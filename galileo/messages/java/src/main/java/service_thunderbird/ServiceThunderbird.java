// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_thunderbird.proto

package service_thunderbird;

public final class ServiceThunderbird {
  private ServiceThunderbird() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ThunderbirdConfigOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];
    /**
     * <code>optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];</code>
     */
    boolean hasMsgName();
    /**
     * <code>optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];</code>
     */
    java.lang.String getMsgName();
    /**
     * <code>optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];</code>
     */
    com.google.protobuf.ByteString
        getMsgNameBytes();

    // optional string script = 2;
    /**
     * <code>optional string script = 2;</code>
     */
    boolean hasScript();
    /**
     * <code>optional string script = 2;</code>
     */
    java.lang.String getScript();
    /**
     * <code>optional string script = 2;</code>
     */
    com.google.protobuf.ByteString
        getScriptBytes();

    // optional float gaindb = 4 [default = 30];
    /**
     * <code>optional float gaindb = 4 [default = 30];</code>
     */
    boolean hasGaindb();
    /**
     * <code>optional float gaindb = 4 [default = 30];</code>
     */
    float getGaindb();

    // optional int32 numberZPipePortsPerChannel = 6 [default = 30];
    /**
     * <code>optional int32 numberZPipePortsPerChannel = 6 [default = 30];</code>
     *
     * <pre>
     * When we have multiple channels, this is how many ZPipe ports will be reserved for each channel
     * </pre>
     */
    boolean hasNumberZPipePortsPerChannel();
    /**
     * <code>optional int32 numberZPipePortsPerChannel = 6 [default = 30];</code>
     *
     * <pre>
     * When we have multiple channels, this is how many ZPipe ports will be reserved for each channel
     * </pre>
     */
    int getNumberZPipePortsPerChannel();

    // optional int32 index = 8 [default = 2];
    /**
     * <code>optional int32 index = 8 [default = 2];</code>
     *
     * <pre>
     * FIXME: This needs to go...it is used as a (global) channel number. See comments on `QServiceThunderbird#index`
     *   for discussion.
     * </pre>
     */
    boolean hasIndex();
    /**
     * <code>optional int32 index = 8 [default = 2];</code>
     *
     * <pre>
     * FIXME: This needs to go...it is used as a (global) channel number. See comments on `QServiceThunderbird#index`
     *   for discussion.
     * </pre>
     */
    int getIndex();

    // optional double ewCapabilitiesRebroadcastCooldown = 101 [default = 5];
    /**
     * <code>optional double ewCapabilitiesRebroadcastCooldown = 101 [default = 5];</code>
     *
     * <pre>
     * Cooldown during which these messages will only be sent if either their value changed since last sent or e.g. we
     * are responding to a specific request.
     * </pre>
     */
    boolean hasEwCapabilitiesRebroadcastCooldown();
    /**
     * <code>optional double ewCapabilitiesRebroadcastCooldown = 101 [default = 5];</code>
     *
     * <pre>
     * Cooldown during which these messages will only be sent if either their value changed since last sent or e.g. we
     * are responding to a specific request.
     * </pre>
     */
    double getEwCapabilitiesRebroadcastCooldown();

    // optional double ewTransmittingRebroadcastCooldown = 102 [default = 5];
    /**
     * <code>optional double ewTransmittingRebroadcastCooldown = 102 [default = 5];</code>
     */
    boolean hasEwTransmittingRebroadcastCooldown();
    /**
     * <code>optional double ewTransmittingRebroadcastCooldown = 102 [default = 5];</code>
     */
    double getEwTransmittingRebroadcastCooldown();

    // optional bool plotOutputSpectrumEnabled = 11 [default = false];
    /**
     * <code>optional bool plotOutputSpectrumEnabled = 11 [default = false];</code>
     *
     * <pre>
     * Debugging-only options.
     * </pre>
     */
    boolean hasPlotOutputSpectrumEnabled();
    /**
     * <code>optional bool plotOutputSpectrumEnabled = 11 [default = false];</code>
     *
     * <pre>
     * Debugging-only options.
     * </pre>
     */
    boolean getPlotOutputSpectrumEnabled();

    // optional bool plotOutputSpectrumThinned = 12 [default = true];
    /**
     * <code>optional bool plotOutputSpectrumThinned = 12 [default = true];</code>
     */
    boolean hasPlotOutputSpectrumThinned();
    /**
     * <code>optional bool plotOutputSpectrumThinned = 12 [default = true];</code>
     */
    boolean getPlotOutputSpectrumThinned();

    // optional bool xpipemonitorEnabled = 13 [default = true];
    /**
     * <code>optional bool xpipemonitorEnabled = 13 [default = true];</code>
     */
    boolean hasXpipemonitorEnabled();
    /**
     * <code>optional bool xpipemonitorEnabled = 13 [default = true];</code>
     */
    boolean getXpipemonitorEnabled();

    // optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;
    /**
     * <code>optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;</code>
     */
    boolean hasMuxtxConfig();
    /**
     * <code>optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;</code>
     */
    service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig getMuxtxConfig();
    /**
     * <code>optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;</code>
     */
    service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfigOrBuilder getMuxtxConfigOrBuilder();

    // optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;
    /**
     * <code>optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;</code>
     */
    boolean hasThrottleHeadersConfig();
    /**
     * <code>optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;</code>
     */
    service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig getThrottleHeadersConfig();
    /**
     * <code>optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;</code>
     */
    service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfigOrBuilder getThrottleHeadersConfigOrBuilder();

    // repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;
    /**
     * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
     */
    java.util.List<service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig> 
        getTbChannelsList();
    /**
     * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
     */
    service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig getTbChannels(int index);
    /**
     * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
     */
    int getTbChannelsCount();
    /**
     * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
     */
    java.util.List<? extends service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfigOrBuilder> 
        getTbChannelsOrBuilderList();
    /**
     * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
     */
    service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfigOrBuilder getTbChannelsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code service_thunderbird.ThunderbirdConfig}
   */
  public static final class ThunderbirdConfig extends
      com.google.protobuf.GeneratedMessage
      implements ThunderbirdConfigOrBuilder {
    // Use ThunderbirdConfig.newBuilder() to construct.
    private ThunderbirdConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ThunderbirdConfig(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ThunderbirdConfig defaultInstance;
    public static ThunderbirdConfig getDefaultInstance() {
      return defaultInstance;
    }

    public ThunderbirdConfig getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ThunderbirdConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              msgName_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              script_ = input.readBytes();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000004;
              gaindb_ = input.readFloat();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              numberZPipePortsPerChannel_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000010;
              index_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000080;
              plotOutputSpectrumEnabled_ = input.readBool();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000100;
              plotOutputSpectrumThinned_ = input.readBool();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000200;
              xpipemonitorEnabled_ = input.readBool();
              break;
            }
            case 114: {
              service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = muxtxConfig_.toBuilder();
              }
              muxtxConfig_ = input.readMessage(service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(muxtxConfig_);
                muxtxConfig_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 122: {
              service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = throttleHeadersConfig_.toBuilder();
              }
              throttleHeadersConfig_ = input.readMessage(service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(throttleHeadersConfig_);
                throttleHeadersConfig_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 130: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                tbChannels_ = new java.util.ArrayList<service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig>();
                mutable_bitField0_ |= 0x00001000;
              }
              tbChannels_.add(input.readMessage(service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.PARSER, extensionRegistry));
              break;
            }
            case 809: {
              bitField0_ |= 0x00000020;
              ewCapabilitiesRebroadcastCooldown_ = input.readDouble();
              break;
            }
            case 817: {
              bitField0_ |= 0x00000040;
              ewTransmittingRebroadcastCooldown_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          tbChannels_ = java.util.Collections.unmodifiableList(tbChannels_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              service_thunderbird.ServiceThunderbird.ThunderbirdConfig.class, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.Builder.class);
    }

    public static com.google.protobuf.Parser<ThunderbirdConfig> PARSER =
        new com.google.protobuf.AbstractParser<ThunderbirdConfig>() {
      public ThunderbirdConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ThunderbirdConfig(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ThunderbirdConfig> getParserForType() {
      return PARSER;
    }

    public interface MuxtxConfigOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional int32 midasProcessPriority = 1 [default = -2147483648];
      /**
       * <code>optional int32 midasProcessPriority = 1 [default = -2147483648];</code>
       *
       * <pre>
       * If set to something other than `-0x80000000` (the default), the `/PPRIO` switch will be used with the
       * provided value when calling `muxtx`. Notable possibilities are:
       *
       * *   `4` -- corresponds to a `nice(1)` value of `0`
       * *   `11` -- corresponds to a `nice(1)` value of `-3`
       * *   `15` -- corresponds to a `nice(1)` value of `-5`
       *
       * See `help PPRIO` for additional options.
       *
       * ### Using `#midasProcessPriority` as a non-root user
       *
       * Note that using this as a non-root user requires some prerequisites:
       *
       * 1.  Update the system configuration to allow the appropriate user to increase their nice values, e.g.
       *     create `/etc/security/limits.d/90-nice.conf` with contents e.g.:
       *
       *         @midas     -       nice      -5
       *
       * 2.  X-Midas goes through some convolutions to set the priority, so some additional legwork is required:
       *
       *     1.  Change the owner of `"${XMDISK}"/xm/unix/xmpriority.allow` to `root`, e.g.:
       *
       *             sudo chown root:root "${XMDISK}"/xm/unix/xmpriority.allow
       *
       *     2.  Update `"${XMDISK}"/xm/unix/xmpriority` to not fail if `setuid(2)` fails, e.g.:
       *
       *         1.  Edit `"${XMDISK}"/xm/unix/xmpriority.c`, to make the branch where `setuid(id_root) != 0`
       *             non-fatal (e.g. comment out the `return (-1);`).
       *
       *         2.  Rebuild the binary, e.g.:
       *
       *                 make -C "${XMDISK}"/xm/unix xmpriority
       *
       * ### Using `#midasProcessPriority` from in a Docker container
       *
       * Assuming `"${XMDISK}"/xm/unix/xmpriority.allow` is already owned by root in the image you're running and that
       * you run the container as root, then simply start the container using e.g. `docker run --ulimit=nice=40 ...`.
       * </pre>
       */
      boolean hasMidasProcessPriority();
      /**
       * <code>optional int32 midasProcessPriority = 1 [default = -2147483648];</code>
       *
       * <pre>
       * If set to something other than `-0x80000000` (the default), the `/PPRIO` switch will be used with the
       * provided value when calling `muxtx`. Notable possibilities are:
       *
       * *   `4` -- corresponds to a `nice(1)` value of `0`
       * *   `11` -- corresponds to a `nice(1)` value of `-3`
       * *   `15` -- corresponds to a `nice(1)` value of `-5`
       *
       * See `help PPRIO` for additional options.
       *
       * ### Using `#midasProcessPriority` as a non-root user
       *
       * Note that using this as a non-root user requires some prerequisites:
       *
       * 1.  Update the system configuration to allow the appropriate user to increase their nice values, e.g.
       *     create `/etc/security/limits.d/90-nice.conf` with contents e.g.:
       *
       *         @midas     -       nice      -5
       *
       * 2.  X-Midas goes through some convolutions to set the priority, so some additional legwork is required:
       *
       *     1.  Change the owner of `"${XMDISK}"/xm/unix/xmpriority.allow` to `root`, e.g.:
       *
       *             sudo chown root:root "${XMDISK}"/xm/unix/xmpriority.allow
       *
       *     2.  Update `"${XMDISK}"/xm/unix/xmpriority` to not fail if `setuid(2)` fails, e.g.:
       *
       *         1.  Edit `"${XMDISK}"/xm/unix/xmpriority.c`, to make the branch where `setuid(id_root) != 0`
       *             non-fatal (e.g. comment out the `return (-1);`).
       *
       *         2.  Rebuild the binary, e.g.:
       *
       *                 make -C "${XMDISK}"/xm/unix xmpriority
       *
       * ### Using `#midasProcessPriority` from in a Docker container
       *
       * Assuming `"${XMDISK}"/xm/unix/xmpriority.allow` is already owned by root in the image you're running and that
       * you run the container as root, then simply start the container using e.g. `docker run --ulimit=nice=40 ...`.
       * </pre>
       */
      int getMidasProcessPriority();

      // optional int32 outputSamplesPerHeader = 2 [default = 262144];
      /**
       * <code>optional int32 outputSamplesPerHeader = 2 [default = 262144];</code>
       *
       * <pre>
       * Used as the value of the `muxtx/OUTXFERLEN` switch. Sets the number of samples associated with each header
       * packet in the `muxtx` output stream.
       * </pre>
       */
      boolean hasOutputSamplesPerHeader();
      /**
       * <code>optional int32 outputSamplesPerHeader = 2 [default = 262144];</code>
       *
       * <pre>
       * Used as the value of the `muxtx/OUTXFERLEN` switch. Sets the number of samples associated with each header
       * packet in the `muxtx` output stream.
       * </pre>
       */
      int getOutputSamplesPerHeader();
    }
    /**
     * Protobuf type {@code service_thunderbird.ThunderbirdConfig.MuxtxConfig}
     *
     * <pre>
     * Configuration _primarily_ aimed at the `muxtx` primitive. Encapsulated in a submessage for organizational
     * purposes.
     * </pre>
     */
    public static final class MuxtxConfig extends
        com.google.protobuf.GeneratedMessage
        implements MuxtxConfigOrBuilder {
      // Use MuxtxConfig.newBuilder() to construct.
      private MuxtxConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private MuxtxConfig(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final MuxtxConfig defaultInstance;
      public static MuxtxConfig getDefaultInstance() {
        return defaultInstance;
      }

      public MuxtxConfig getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private MuxtxConfig(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                midasProcessPriority_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                outputSamplesPerHeader_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_MuxtxConfig_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_MuxtxConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.class, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.Builder.class);
      }

      public static com.google.protobuf.Parser<MuxtxConfig> PARSER =
          new com.google.protobuf.AbstractParser<MuxtxConfig>() {
        public MuxtxConfig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new MuxtxConfig(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<MuxtxConfig> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional int32 midasProcessPriority = 1 [default = -2147483648];
      public static final int MIDASPROCESSPRIORITY_FIELD_NUMBER = 1;
      private int midasProcessPriority_;
      /**
       * <code>optional int32 midasProcessPriority = 1 [default = -2147483648];</code>
       *
       * <pre>
       * If set to something other than `-0x80000000` (the default), the `/PPRIO` switch will be used with the
       * provided value when calling `muxtx`. Notable possibilities are:
       *
       * *   `4` -- corresponds to a `nice(1)` value of `0`
       * *   `11` -- corresponds to a `nice(1)` value of `-3`
       * *   `15` -- corresponds to a `nice(1)` value of `-5`
       *
       * See `help PPRIO` for additional options.
       *
       * ### Using `#midasProcessPriority` as a non-root user
       *
       * Note that using this as a non-root user requires some prerequisites:
       *
       * 1.  Update the system configuration to allow the appropriate user to increase their nice values, e.g.
       *     create `/etc/security/limits.d/90-nice.conf` with contents e.g.:
       *
       *         @midas     -       nice      -5
       *
       * 2.  X-Midas goes through some convolutions to set the priority, so some additional legwork is required:
       *
       *     1.  Change the owner of `"${XMDISK}"/xm/unix/xmpriority.allow` to `root`, e.g.:
       *
       *             sudo chown root:root "${XMDISK}"/xm/unix/xmpriority.allow
       *
       *     2.  Update `"${XMDISK}"/xm/unix/xmpriority` to not fail if `setuid(2)` fails, e.g.:
       *
       *         1.  Edit `"${XMDISK}"/xm/unix/xmpriority.c`, to make the branch where `setuid(id_root) != 0`
       *             non-fatal (e.g. comment out the `return (-1);`).
       *
       *         2.  Rebuild the binary, e.g.:
       *
       *                 make -C "${XMDISK}"/xm/unix xmpriority
       *
       * ### Using `#midasProcessPriority` from in a Docker container
       *
       * Assuming `"${XMDISK}"/xm/unix/xmpriority.allow` is already owned by root in the image you're running and that
       * you run the container as root, then simply start the container using e.g. `docker run --ulimit=nice=40 ...`.
       * </pre>
       */
      public boolean hasMidasProcessPriority() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 midasProcessPriority = 1 [default = -2147483648];</code>
       *
       * <pre>
       * If set to something other than `-0x80000000` (the default), the `/PPRIO` switch will be used with the
       * provided value when calling `muxtx`. Notable possibilities are:
       *
       * *   `4` -- corresponds to a `nice(1)` value of `0`
       * *   `11` -- corresponds to a `nice(1)` value of `-3`
       * *   `15` -- corresponds to a `nice(1)` value of `-5`
       *
       * See `help PPRIO` for additional options.
       *
       * ### Using `#midasProcessPriority` as a non-root user
       *
       * Note that using this as a non-root user requires some prerequisites:
       *
       * 1.  Update the system configuration to allow the appropriate user to increase their nice values, e.g.
       *     create `/etc/security/limits.d/90-nice.conf` with contents e.g.:
       *
       *         @midas     -       nice      -5
       *
       * 2.  X-Midas goes through some convolutions to set the priority, so some additional legwork is required:
       *
       *     1.  Change the owner of `"${XMDISK}"/xm/unix/xmpriority.allow` to `root`, e.g.:
       *
       *             sudo chown root:root "${XMDISK}"/xm/unix/xmpriority.allow
       *
       *     2.  Update `"${XMDISK}"/xm/unix/xmpriority` to not fail if `setuid(2)` fails, e.g.:
       *
       *         1.  Edit `"${XMDISK}"/xm/unix/xmpriority.c`, to make the branch where `setuid(id_root) != 0`
       *             non-fatal (e.g. comment out the `return (-1);`).
       *
       *         2.  Rebuild the binary, e.g.:
       *
       *                 make -C "${XMDISK}"/xm/unix xmpriority
       *
       * ### Using `#midasProcessPriority` from in a Docker container
       *
       * Assuming `"${XMDISK}"/xm/unix/xmpriority.allow` is already owned by root in the image you're running and that
       * you run the container as root, then simply start the container using e.g. `docker run --ulimit=nice=40 ...`.
       * </pre>
       */
      public int getMidasProcessPriority() {
        return midasProcessPriority_;
      }

      // optional int32 outputSamplesPerHeader = 2 [default = 262144];
      public static final int OUTPUTSAMPLESPERHEADER_FIELD_NUMBER = 2;
      private int outputSamplesPerHeader_;
      /**
       * <code>optional int32 outputSamplesPerHeader = 2 [default = 262144];</code>
       *
       * <pre>
       * Used as the value of the `muxtx/OUTXFERLEN` switch. Sets the number of samples associated with each header
       * packet in the `muxtx` output stream.
       * </pre>
       */
      public boolean hasOutputSamplesPerHeader() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 outputSamplesPerHeader = 2 [default = 262144];</code>
       *
       * <pre>
       * Used as the value of the `muxtx/OUTXFERLEN` switch. Sets the number of samples associated with each header
       * packet in the `muxtx` output stream.
       * </pre>
       */
      public int getOutputSamplesPerHeader() {
        return outputSamplesPerHeader_;
      }

      private void initFields() {
        midasProcessPriority_ = -2147483648;
        outputSamplesPerHeader_ = 262144;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, midasProcessPriority_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, outputSamplesPerHeader_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, midasProcessPriority_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, outputSamplesPerHeader_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code service_thunderbird.ThunderbirdConfig.MuxtxConfig}
       *
       * <pre>
       * Configuration _primarily_ aimed at the `muxtx` primitive. Encapsulated in a submessage for organizational
       * purposes.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfigOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_MuxtxConfig_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_MuxtxConfig_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.class, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.Builder.class);
        }

        // Construct using service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          midasProcessPriority_ = -2147483648;
          bitField0_ = (bitField0_ & ~0x00000001);
          outputSamplesPerHeader_ = 262144;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_MuxtxConfig_descriptor;
        }

        public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig getDefaultInstanceForType() {
          return service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.getDefaultInstance();
        }

        public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig build() {
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig buildPartial() {
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig result = new service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.midasProcessPriority_ = midasProcessPriority_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.outputSamplesPerHeader_ = outputSamplesPerHeader_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig) {
            return mergeFrom((service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig other) {
          if (other == service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.getDefaultInstance()) return this;
          if (other.hasMidasProcessPriority()) {
            setMidasProcessPriority(other.getMidasProcessPriority());
          }
          if (other.hasOutputSamplesPerHeader()) {
            setOutputSamplesPerHeader(other.getOutputSamplesPerHeader());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional int32 midasProcessPriority = 1 [default = -2147483648];
        private int midasProcessPriority_ = -2147483648;
        /**
         * <code>optional int32 midasProcessPriority = 1 [default = -2147483648];</code>
         *
         * <pre>
         * If set to something other than `-0x80000000` (the default), the `/PPRIO` switch will be used with the
         * provided value when calling `muxtx`. Notable possibilities are:
         *
         * *   `4` -- corresponds to a `nice(1)` value of `0`
         * *   `11` -- corresponds to a `nice(1)` value of `-3`
         * *   `15` -- corresponds to a `nice(1)` value of `-5`
         *
         * See `help PPRIO` for additional options.
         *
         * ### Using `#midasProcessPriority` as a non-root user
         *
         * Note that using this as a non-root user requires some prerequisites:
         *
         * 1.  Update the system configuration to allow the appropriate user to increase their nice values, e.g.
         *     create `/etc/security/limits.d/90-nice.conf` with contents e.g.:
         *
         *         @midas     -       nice      -5
         *
         * 2.  X-Midas goes through some convolutions to set the priority, so some additional legwork is required:
         *
         *     1.  Change the owner of `"${XMDISK}"/xm/unix/xmpriority.allow` to `root`, e.g.:
         *
         *             sudo chown root:root "${XMDISK}"/xm/unix/xmpriority.allow
         *
         *     2.  Update `"${XMDISK}"/xm/unix/xmpriority` to not fail if `setuid(2)` fails, e.g.:
         *
         *         1.  Edit `"${XMDISK}"/xm/unix/xmpriority.c`, to make the branch where `setuid(id_root) != 0`
         *             non-fatal (e.g. comment out the `return (-1);`).
         *
         *         2.  Rebuild the binary, e.g.:
         *
         *                 make -C "${XMDISK}"/xm/unix xmpriority
         *
         * ### Using `#midasProcessPriority` from in a Docker container
         *
         * Assuming `"${XMDISK}"/xm/unix/xmpriority.allow` is already owned by root in the image you're running and that
         * you run the container as root, then simply start the container using e.g. `docker run --ulimit=nice=40 ...`.
         * </pre>
         */
        public boolean hasMidasProcessPriority() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 midasProcessPriority = 1 [default = -2147483648];</code>
         *
         * <pre>
         * If set to something other than `-0x80000000` (the default), the `/PPRIO` switch will be used with the
         * provided value when calling `muxtx`. Notable possibilities are:
         *
         * *   `4` -- corresponds to a `nice(1)` value of `0`
         * *   `11` -- corresponds to a `nice(1)` value of `-3`
         * *   `15` -- corresponds to a `nice(1)` value of `-5`
         *
         * See `help PPRIO` for additional options.
         *
         * ### Using `#midasProcessPriority` as a non-root user
         *
         * Note that using this as a non-root user requires some prerequisites:
         *
         * 1.  Update the system configuration to allow the appropriate user to increase their nice values, e.g.
         *     create `/etc/security/limits.d/90-nice.conf` with contents e.g.:
         *
         *         @midas     -       nice      -5
         *
         * 2.  X-Midas goes through some convolutions to set the priority, so some additional legwork is required:
         *
         *     1.  Change the owner of `"${XMDISK}"/xm/unix/xmpriority.allow` to `root`, e.g.:
         *
         *             sudo chown root:root "${XMDISK}"/xm/unix/xmpriority.allow
         *
         *     2.  Update `"${XMDISK}"/xm/unix/xmpriority` to not fail if `setuid(2)` fails, e.g.:
         *
         *         1.  Edit `"${XMDISK}"/xm/unix/xmpriority.c`, to make the branch where `setuid(id_root) != 0`
         *             non-fatal (e.g. comment out the `return (-1);`).
         *
         *         2.  Rebuild the binary, e.g.:
         *
         *                 make -C "${XMDISK}"/xm/unix xmpriority
         *
         * ### Using `#midasProcessPriority` from in a Docker container
         *
         * Assuming `"${XMDISK}"/xm/unix/xmpriority.allow` is already owned by root in the image you're running and that
         * you run the container as root, then simply start the container using e.g. `docker run --ulimit=nice=40 ...`.
         * </pre>
         */
        public int getMidasProcessPriority() {
          return midasProcessPriority_;
        }
        /**
         * <code>optional int32 midasProcessPriority = 1 [default = -2147483648];</code>
         *
         * <pre>
         * If set to something other than `-0x80000000` (the default), the `/PPRIO` switch will be used with the
         * provided value when calling `muxtx`. Notable possibilities are:
         *
         * *   `4` -- corresponds to a `nice(1)` value of `0`
         * *   `11` -- corresponds to a `nice(1)` value of `-3`
         * *   `15` -- corresponds to a `nice(1)` value of `-5`
         *
         * See `help PPRIO` for additional options.
         *
         * ### Using `#midasProcessPriority` as a non-root user
         *
         * Note that using this as a non-root user requires some prerequisites:
         *
         * 1.  Update the system configuration to allow the appropriate user to increase their nice values, e.g.
         *     create `/etc/security/limits.d/90-nice.conf` with contents e.g.:
         *
         *         @midas     -       nice      -5
         *
         * 2.  X-Midas goes through some convolutions to set the priority, so some additional legwork is required:
         *
         *     1.  Change the owner of `"${XMDISK}"/xm/unix/xmpriority.allow` to `root`, e.g.:
         *
         *             sudo chown root:root "${XMDISK}"/xm/unix/xmpriority.allow
         *
         *     2.  Update `"${XMDISK}"/xm/unix/xmpriority` to not fail if `setuid(2)` fails, e.g.:
         *
         *         1.  Edit `"${XMDISK}"/xm/unix/xmpriority.c`, to make the branch where `setuid(id_root) != 0`
         *             non-fatal (e.g. comment out the `return (-1);`).
         *
         *         2.  Rebuild the binary, e.g.:
         *
         *                 make -C "${XMDISK}"/xm/unix xmpriority
         *
         * ### Using `#midasProcessPriority` from in a Docker container
         *
         * Assuming `"${XMDISK}"/xm/unix/xmpriority.allow` is already owned by root in the image you're running and that
         * you run the container as root, then simply start the container using e.g. `docker run --ulimit=nice=40 ...`.
         * </pre>
         */
        public Builder setMidasProcessPriority(int value) {
          bitField0_ |= 0x00000001;
          midasProcessPriority_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 midasProcessPriority = 1 [default = -2147483648];</code>
         *
         * <pre>
         * If set to something other than `-0x80000000` (the default), the `/PPRIO` switch will be used with the
         * provided value when calling `muxtx`. Notable possibilities are:
         *
         * *   `4` -- corresponds to a `nice(1)` value of `0`
         * *   `11` -- corresponds to a `nice(1)` value of `-3`
         * *   `15` -- corresponds to a `nice(1)` value of `-5`
         *
         * See `help PPRIO` for additional options.
         *
         * ### Using `#midasProcessPriority` as a non-root user
         *
         * Note that using this as a non-root user requires some prerequisites:
         *
         * 1.  Update the system configuration to allow the appropriate user to increase their nice values, e.g.
         *     create `/etc/security/limits.d/90-nice.conf` with contents e.g.:
         *
         *         @midas     -       nice      -5
         *
         * 2.  X-Midas goes through some convolutions to set the priority, so some additional legwork is required:
         *
         *     1.  Change the owner of `"${XMDISK}"/xm/unix/xmpriority.allow` to `root`, e.g.:
         *
         *             sudo chown root:root "${XMDISK}"/xm/unix/xmpriority.allow
         *
         *     2.  Update `"${XMDISK}"/xm/unix/xmpriority` to not fail if `setuid(2)` fails, e.g.:
         *
         *         1.  Edit `"${XMDISK}"/xm/unix/xmpriority.c`, to make the branch where `setuid(id_root) != 0`
         *             non-fatal (e.g. comment out the `return (-1);`).
         *
         *         2.  Rebuild the binary, e.g.:
         *
         *                 make -C "${XMDISK}"/xm/unix xmpriority
         *
         * ### Using `#midasProcessPriority` from in a Docker container
         *
         * Assuming `"${XMDISK}"/xm/unix/xmpriority.allow` is already owned by root in the image you're running and that
         * you run the container as root, then simply start the container using e.g. `docker run --ulimit=nice=40 ...`.
         * </pre>
         */
        public Builder clearMidasProcessPriority() {
          bitField0_ = (bitField0_ & ~0x00000001);
          midasProcessPriority_ = -2147483648;
          onChanged();
          return this;
        }

        // optional int32 outputSamplesPerHeader = 2 [default = 262144];
        private int outputSamplesPerHeader_ = 262144;
        /**
         * <code>optional int32 outputSamplesPerHeader = 2 [default = 262144];</code>
         *
         * <pre>
         * Used as the value of the `muxtx/OUTXFERLEN` switch. Sets the number of samples associated with each header
         * packet in the `muxtx` output stream.
         * </pre>
         */
        public boolean hasOutputSamplesPerHeader() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int32 outputSamplesPerHeader = 2 [default = 262144];</code>
         *
         * <pre>
         * Used as the value of the `muxtx/OUTXFERLEN` switch. Sets the number of samples associated with each header
         * packet in the `muxtx` output stream.
         * </pre>
         */
        public int getOutputSamplesPerHeader() {
          return outputSamplesPerHeader_;
        }
        /**
         * <code>optional int32 outputSamplesPerHeader = 2 [default = 262144];</code>
         *
         * <pre>
         * Used as the value of the `muxtx/OUTXFERLEN` switch. Sets the number of samples associated with each header
         * packet in the `muxtx` output stream.
         * </pre>
         */
        public Builder setOutputSamplesPerHeader(int value) {
          bitField0_ |= 0x00000002;
          outputSamplesPerHeader_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 outputSamplesPerHeader = 2 [default = 262144];</code>
         *
         * <pre>
         * Used as the value of the `muxtx/OUTXFERLEN` switch. Sets the number of samples associated with each header
         * packet in the `muxtx` output stream.
         * </pre>
         */
        public Builder clearOutputSamplesPerHeader() {
          bitField0_ = (bitField0_ & ~0x00000002);
          outputSamplesPerHeader_ = 262144;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:service_thunderbird.ThunderbirdConfig.MuxtxConfig)
      }

      static {
        defaultInstance = new MuxtxConfig(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:service_thunderbird.ThunderbirdConfig.MuxtxConfig)
    }

    public interface ThrottleHeadersConfigOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional bool enabled = 1 [default = false];
      /**
       * <code>optional bool enabled = 1 [default = false];</code>
       *
       * <pre>
       * Whether or not the `throttle_headers` primitive should be used at all.
       *
       * N.B.: Enabling this will increase the base transmit latency.
       * </pre>
       */
      boolean hasEnabled();
      /**
       * <code>optional bool enabled = 1 [default = false];</code>
       *
       * <pre>
       * Whether or not the `throttle_headers` primitive should be used at all.
       *
       * N.B.: Enabling this will increase the base transmit latency.
       * </pre>
       */
      boolean getEnabled();

      // optional double throttleTimeOffset = 2 [default = 20];
      /**
       * <code>optional double throttleTimeOffset = 2 [default = 20];</code>
       *
       * <pre>
       * Used as the value of the `throttle_headers/THROTTLE_TIME_OFFSET` switch. Set to e.g. `20` (the default) to
       * throttle the header output stream from the `muxtx` primitive when its headers indicate timestamps more than
       * 20 seconds into the future.
       * </pre>
       */
      boolean hasThrottleTimeOffset();
      /**
       * <code>optional double throttleTimeOffset = 2 [default = 20];</code>
       *
       * <pre>
       * Used as the value of the `throttle_headers/THROTTLE_TIME_OFFSET` switch. Set to e.g. `20` (the default) to
       * throttle the header output stream from the `muxtx` primitive when its headers indicate timestamps more than
       * 20 seconds into the future.
       * </pre>
       */
      double getThrottleTimeOffset();
    }
    /**
     * Protobuf type {@code service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig}
     *
     * <pre>
     * Configuration aimed at the `throttle_headers` primitive. Encapsulated in a submessage for organizational
     * purposes.
     *
     * This primitive is added to the X-Midas pipeline immediately after the `muxtx` primitive and throttles the header
     * output stream coming from `muxtx` based on the timestamps contained within.
     *
     * Primarily useful if the other end of the connection might not be initial connected (which would, without this
     * primitive, result in the `muxtx` primitive pushing as far into the future as it possibly can).
     * </pre>
     */
    public static final class ThrottleHeadersConfig extends
        com.google.protobuf.GeneratedMessage
        implements ThrottleHeadersConfigOrBuilder {
      // Use ThrottleHeadersConfig.newBuilder() to construct.
      private ThrottleHeadersConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private ThrottleHeadersConfig(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final ThrottleHeadersConfig defaultInstance;
      public static ThrottleHeadersConfig getDefaultInstance() {
        return defaultInstance;
      }

      public ThrottleHeadersConfig getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private ThrottleHeadersConfig(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                enabled_ = input.readBool();
                break;
              }
              case 17: {
                bitField0_ |= 0x00000002;
                throttleTimeOffset_ = input.readDouble();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_ThrottleHeadersConfig_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_ThrottleHeadersConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.class, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.Builder.class);
      }

      public static com.google.protobuf.Parser<ThrottleHeadersConfig> PARSER =
          new com.google.protobuf.AbstractParser<ThrottleHeadersConfig>() {
        public ThrottleHeadersConfig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ThrottleHeadersConfig(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<ThrottleHeadersConfig> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional bool enabled = 1 [default = false];
      public static final int ENABLED_FIELD_NUMBER = 1;
      private boolean enabled_;
      /**
       * <code>optional bool enabled = 1 [default = false];</code>
       *
       * <pre>
       * Whether or not the `throttle_headers` primitive should be used at all.
       *
       * N.B.: Enabling this will increase the base transmit latency.
       * </pre>
       */
      public boolean hasEnabled() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool enabled = 1 [default = false];</code>
       *
       * <pre>
       * Whether or not the `throttle_headers` primitive should be used at all.
       *
       * N.B.: Enabling this will increase the base transmit latency.
       * </pre>
       */
      public boolean getEnabled() {
        return enabled_;
      }

      // optional double throttleTimeOffset = 2 [default = 20];
      public static final int THROTTLETIMEOFFSET_FIELD_NUMBER = 2;
      private double throttleTimeOffset_;
      /**
       * <code>optional double throttleTimeOffset = 2 [default = 20];</code>
       *
       * <pre>
       * Used as the value of the `throttle_headers/THROTTLE_TIME_OFFSET` switch. Set to e.g. `20` (the default) to
       * throttle the header output stream from the `muxtx` primitive when its headers indicate timestamps more than
       * 20 seconds into the future.
       * </pre>
       */
      public boolean hasThrottleTimeOffset() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double throttleTimeOffset = 2 [default = 20];</code>
       *
       * <pre>
       * Used as the value of the `throttle_headers/THROTTLE_TIME_OFFSET` switch. Set to e.g. `20` (the default) to
       * throttle the header output stream from the `muxtx` primitive when its headers indicate timestamps more than
       * 20 seconds into the future.
       * </pre>
       */
      public double getThrottleTimeOffset() {
        return throttleTimeOffset_;
      }

      private void initFields() {
        enabled_ = false;
        throttleTimeOffset_ = 20D;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBool(1, enabled_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeDouble(2, throttleTimeOffset_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(1, enabled_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, throttleTimeOffset_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig}
       *
       * <pre>
       * Configuration aimed at the `throttle_headers` primitive. Encapsulated in a submessage for organizational
       * purposes.
       *
       * This primitive is added to the X-Midas pipeline immediately after the `muxtx` primitive and throttles the header
       * output stream coming from `muxtx` based on the timestamps contained within.
       *
       * Primarily useful if the other end of the connection might not be initial connected (which would, without this
       * primitive, result in the `muxtx` primitive pushing as far into the future as it possibly can).
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfigOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_ThrottleHeadersConfig_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_ThrottleHeadersConfig_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.class, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.Builder.class);
        }

        // Construct using service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          enabled_ = false;
          bitField0_ = (bitField0_ & ~0x00000001);
          throttleTimeOffset_ = 20D;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_ThrottleHeadersConfig_descriptor;
        }

        public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig getDefaultInstanceForType() {
          return service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.getDefaultInstance();
        }

        public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig build() {
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig buildPartial() {
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig result = new service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.enabled_ = enabled_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.throttleTimeOffset_ = throttleTimeOffset_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig) {
            return mergeFrom((service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig other) {
          if (other == service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.getDefaultInstance()) return this;
          if (other.hasEnabled()) {
            setEnabled(other.getEnabled());
          }
          if (other.hasThrottleTimeOffset()) {
            setThrottleTimeOffset(other.getThrottleTimeOffset());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional bool enabled = 1 [default = false];
        private boolean enabled_ ;
        /**
         * <code>optional bool enabled = 1 [default = false];</code>
         *
         * <pre>
         * Whether or not the `throttle_headers` primitive should be used at all.
         *
         * N.B.: Enabling this will increase the base transmit latency.
         * </pre>
         */
        public boolean hasEnabled() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional bool enabled = 1 [default = false];</code>
         *
         * <pre>
         * Whether or not the `throttle_headers` primitive should be used at all.
         *
         * N.B.: Enabling this will increase the base transmit latency.
         * </pre>
         */
        public boolean getEnabled() {
          return enabled_;
        }
        /**
         * <code>optional bool enabled = 1 [default = false];</code>
         *
         * <pre>
         * Whether or not the `throttle_headers` primitive should be used at all.
         *
         * N.B.: Enabling this will increase the base transmit latency.
         * </pre>
         */
        public Builder setEnabled(boolean value) {
          bitField0_ |= 0x00000001;
          enabled_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional bool enabled = 1 [default = false];</code>
         *
         * <pre>
         * Whether or not the `throttle_headers` primitive should be used at all.
         *
         * N.B.: Enabling this will increase the base transmit latency.
         * </pre>
         */
        public Builder clearEnabled() {
          bitField0_ = (bitField0_ & ~0x00000001);
          enabled_ = false;
          onChanged();
          return this;
        }

        // optional double throttleTimeOffset = 2 [default = 20];
        private double throttleTimeOffset_ = 20D;
        /**
         * <code>optional double throttleTimeOffset = 2 [default = 20];</code>
         *
         * <pre>
         * Used as the value of the `throttle_headers/THROTTLE_TIME_OFFSET` switch. Set to e.g. `20` (the default) to
         * throttle the header output stream from the `muxtx` primitive when its headers indicate timestamps more than
         * 20 seconds into the future.
         * </pre>
         */
        public boolean hasThrottleTimeOffset() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional double throttleTimeOffset = 2 [default = 20];</code>
         *
         * <pre>
         * Used as the value of the `throttle_headers/THROTTLE_TIME_OFFSET` switch. Set to e.g. `20` (the default) to
         * throttle the header output stream from the `muxtx` primitive when its headers indicate timestamps more than
         * 20 seconds into the future.
         * </pre>
         */
        public double getThrottleTimeOffset() {
          return throttleTimeOffset_;
        }
        /**
         * <code>optional double throttleTimeOffset = 2 [default = 20];</code>
         *
         * <pre>
         * Used as the value of the `throttle_headers/THROTTLE_TIME_OFFSET` switch. Set to e.g. `20` (the default) to
         * throttle the header output stream from the `muxtx` primitive when its headers indicate timestamps more than
         * 20 seconds into the future.
         * </pre>
         */
        public Builder setThrottleTimeOffset(double value) {
          bitField0_ |= 0x00000002;
          throttleTimeOffset_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double throttleTimeOffset = 2 [default = 20];</code>
         *
         * <pre>
         * Used as the value of the `throttle_headers/THROTTLE_TIME_OFFSET` switch. Set to e.g. `20` (the default) to
         * throttle the header output stream from the `muxtx` primitive when its headers indicate timestamps more than
         * 20 seconds into the future.
         * </pre>
         */
        public Builder clearThrottleTimeOffset() {
          bitField0_ = (bitField0_ & ~0x00000002);
          throttleTimeOffset_ = 20D;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig)
      }

      static {
        defaultInstance = new ThrottleHeadersConfig(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig)
    }

    public interface TBChannelConfigOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional int32 channelNumber = 1 [default = 1];
      /**
       * <code>optional int32 channelNumber = 1 [default = 1];</code>
       *
       * <pre>
       * Channel Number / Designator
       * </pre>
       */
      boolean hasChannelNumber();
      /**
       * <code>optional int32 channelNumber = 1 [default = 1];</code>
       *
       * <pre>
       * Channel Number / Designator
       * </pre>
       */
      int getChannelNumber();

      // optional double sampleRate = 2 [default = 100000000];
      /**
       * <code>optional double sampleRate = 2 [default = 100000000];</code>
       *
       * <pre>
       * This is the sample Rate of the output channel
       * </pre>
       */
      boolean hasSampleRate();
      /**
       * <code>optional double sampleRate = 2 [default = 100000000];</code>
       *
       * <pre>
       * This is the sample Rate of the output channel
       * </pre>
       */
      double getSampleRate();

      // optional double minFreqMHz = 3 [default = 20];
      /**
       * <code>optional double minFreqMHz = 3 [default = 20];</code>
       *
       * <pre>
       * These set the minimum and maximum frequencies on which a
       * channel of thunderbird is allowed to operate, in MHz. For
       * example, if there are multiple channels within the Thunderbird, this
       * is one way to differentiate which channel the Thunderbird will register on.
       * </pre>
       */
      boolean hasMinFreqMHz();
      /**
       * <code>optional double minFreqMHz = 3 [default = 20];</code>
       *
       * <pre>
       * These set the minimum and maximum frequencies on which a
       * channel of thunderbird is allowed to operate, in MHz. For
       * example, if there are multiple channels within the Thunderbird, this
       * is one way to differentiate which channel the Thunderbird will register on.
       * </pre>
       */
      double getMinFreqMHz();

      // optional double maxFreqMHz = 4 [default = 6000];
      /**
       * <code>optional double maxFreqMHz = 4 [default = 6000];</code>
       */
      boolean hasMaxFreqMHz();
      /**
       * <code>optional double maxFreqMHz = 4 [default = 6000];</code>
       */
      double getMaxFreqMHz();

      // optional int32 zpipeport = 5 [default = 38599];
      /**
       * <code>optional int32 zpipeport = 5 [default = 38599];</code>
       *
       * <pre>
       * This is the output port of the specific channel
       * </pre>
       */
      boolean hasZpipeport();
      /**
       * <code>optional int32 zpipeport = 5 [default = 38599];</code>
       *
       * <pre>
       * This is the output port of the specific channel
       * </pre>
       */
      int getZpipeport();

      // optional string device = 6 [default = "ZPIPE"];
      /**
       * <code>optional string device = 6 [default = "ZPIPE"];</code>
       *
       * <pre>
       * This is the device name of the channel, if there is one
       * </pre>
       */
      boolean hasDevice();
      /**
       * <code>optional string device = 6 [default = "ZPIPE"];</code>
       *
       * <pre>
       * This is the device name of the channel, if there is one
       * </pre>
       */
      java.lang.String getDevice();
      /**
       * <code>optional string device = 6 [default = "ZPIPE"];</code>
       *
       * <pre>
       * This is the device name of the channel, if there is one
       * </pre>
       */
      com.google.protobuf.ByteString
          getDeviceBytes();
    }
    /**
     * Protobuf type {@code service_thunderbird.ThunderbirdConfig.TBChannelConfig}
     *
     * <pre>
     * Configuration aimed at the number of transmit channels within Thunderbird.
     * Encapsulated in a submessage for organizational purposes.
     *
     * Thunderbird can have multiple output channels within a single Thunderbird instance.
     * Each channel can be differentiated currently by frequency, but there is no reason this could
     * not have other differentiators as well.
     * </pre>
     */
    public static final class TBChannelConfig extends
        com.google.protobuf.GeneratedMessage
        implements TBChannelConfigOrBuilder {
      // Use TBChannelConfig.newBuilder() to construct.
      private TBChannelConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private TBChannelConfig(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final TBChannelConfig defaultInstance;
      public static TBChannelConfig getDefaultInstance() {
        return defaultInstance;
      }

      public TBChannelConfig getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private TBChannelConfig(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                channelNumber_ = input.readInt32();
                break;
              }
              case 17: {
                bitField0_ |= 0x00000002;
                sampleRate_ = input.readDouble();
                break;
              }
              case 25: {
                bitField0_ |= 0x00000004;
                minFreqMHz_ = input.readDouble();
                break;
              }
              case 33: {
                bitField0_ |= 0x00000008;
                maxFreqMHz_ = input.readDouble();
                break;
              }
              case 40: {
                bitField0_ |= 0x00000010;
                zpipeport_ = input.readInt32();
                break;
              }
              case 50: {
                bitField0_ |= 0x00000020;
                device_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_TBChannelConfig_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_TBChannelConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.class, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.Builder.class);
      }

      public static com.google.protobuf.Parser<TBChannelConfig> PARSER =
          new com.google.protobuf.AbstractParser<TBChannelConfig>() {
        public TBChannelConfig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new TBChannelConfig(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<TBChannelConfig> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional int32 channelNumber = 1 [default = 1];
      public static final int CHANNELNUMBER_FIELD_NUMBER = 1;
      private int channelNumber_;
      /**
       * <code>optional int32 channelNumber = 1 [default = 1];</code>
       *
       * <pre>
       * Channel Number / Designator
       * </pre>
       */
      public boolean hasChannelNumber() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 channelNumber = 1 [default = 1];</code>
       *
       * <pre>
       * Channel Number / Designator
       * </pre>
       */
      public int getChannelNumber() {
        return channelNumber_;
      }

      // optional double sampleRate = 2 [default = 100000000];
      public static final int SAMPLERATE_FIELD_NUMBER = 2;
      private double sampleRate_;
      /**
       * <code>optional double sampleRate = 2 [default = 100000000];</code>
       *
       * <pre>
       * This is the sample Rate of the output channel
       * </pre>
       */
      public boolean hasSampleRate() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double sampleRate = 2 [default = 100000000];</code>
       *
       * <pre>
       * This is the sample Rate of the output channel
       * </pre>
       */
      public double getSampleRate() {
        return sampleRate_;
      }

      // optional double minFreqMHz = 3 [default = 20];
      public static final int MINFREQMHZ_FIELD_NUMBER = 3;
      private double minFreqMHz_;
      /**
       * <code>optional double minFreqMHz = 3 [default = 20];</code>
       *
       * <pre>
       * These set the minimum and maximum frequencies on which a
       * channel of thunderbird is allowed to operate, in MHz. For
       * example, if there are multiple channels within the Thunderbird, this
       * is one way to differentiate which channel the Thunderbird will register on.
       * </pre>
       */
      public boolean hasMinFreqMHz() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double minFreqMHz = 3 [default = 20];</code>
       *
       * <pre>
       * These set the minimum and maximum frequencies on which a
       * channel of thunderbird is allowed to operate, in MHz. For
       * example, if there are multiple channels within the Thunderbird, this
       * is one way to differentiate which channel the Thunderbird will register on.
       * </pre>
       */
      public double getMinFreqMHz() {
        return minFreqMHz_;
      }

      // optional double maxFreqMHz = 4 [default = 6000];
      public static final int MAXFREQMHZ_FIELD_NUMBER = 4;
      private double maxFreqMHz_;
      /**
       * <code>optional double maxFreqMHz = 4 [default = 6000];</code>
       */
      public boolean hasMaxFreqMHz() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double maxFreqMHz = 4 [default = 6000];</code>
       */
      public double getMaxFreqMHz() {
        return maxFreqMHz_;
      }

      // optional int32 zpipeport = 5 [default = 38599];
      public static final int ZPIPEPORT_FIELD_NUMBER = 5;
      private int zpipeport_;
      /**
       * <code>optional int32 zpipeport = 5 [default = 38599];</code>
       *
       * <pre>
       * This is the output port of the specific channel
       * </pre>
       */
      public boolean hasZpipeport() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 zpipeport = 5 [default = 38599];</code>
       *
       * <pre>
       * This is the output port of the specific channel
       * </pre>
       */
      public int getZpipeport() {
        return zpipeport_;
      }

      // optional string device = 6 [default = "ZPIPE"];
      public static final int DEVICE_FIELD_NUMBER = 6;
      private java.lang.Object device_;
      /**
       * <code>optional string device = 6 [default = "ZPIPE"];</code>
       *
       * <pre>
       * This is the device name of the channel, if there is one
       * </pre>
       */
      public boolean hasDevice() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional string device = 6 [default = "ZPIPE"];</code>
       *
       * <pre>
       * This is the device name of the channel, if there is one
       * </pre>
       */
      public java.lang.String getDevice() {
        java.lang.Object ref = device_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            device_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string device = 6 [default = "ZPIPE"];</code>
       *
       * <pre>
       * This is the device name of the channel, if there is one
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDeviceBytes() {
        java.lang.Object ref = device_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          device_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        channelNumber_ = 1;
        sampleRate_ = 100000000D;
        minFreqMHz_ = 20D;
        maxFreqMHz_ = 6000D;
        zpipeport_ = 38599;
        device_ = "ZPIPE";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, channelNumber_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeDouble(2, sampleRate_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeDouble(3, minFreqMHz_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeDouble(4, maxFreqMHz_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeInt32(5, zpipeport_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeBytes(6, getDeviceBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, channelNumber_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, sampleRate_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, minFreqMHz_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(4, maxFreqMHz_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(5, zpipeport_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(6, getDeviceBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code service_thunderbird.ThunderbirdConfig.TBChannelConfig}
       *
       * <pre>
       * Configuration aimed at the number of transmit channels within Thunderbird.
       * Encapsulated in a submessage for organizational purposes.
       *
       * Thunderbird can have multiple output channels within a single Thunderbird instance.
       * Each channel can be differentiated currently by frequency, but there is no reason this could
       * not have other differentiators as well.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfigOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_TBChannelConfig_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_TBChannelConfig_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.class, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.Builder.class);
        }

        // Construct using service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          channelNumber_ = 1;
          bitField0_ = (bitField0_ & ~0x00000001);
          sampleRate_ = 100000000D;
          bitField0_ = (bitField0_ & ~0x00000002);
          minFreqMHz_ = 20D;
          bitField0_ = (bitField0_ & ~0x00000004);
          maxFreqMHz_ = 6000D;
          bitField0_ = (bitField0_ & ~0x00000008);
          zpipeport_ = 38599;
          bitField0_ = (bitField0_ & ~0x00000010);
          device_ = "ZPIPE";
          bitField0_ = (bitField0_ & ~0x00000020);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_TBChannelConfig_descriptor;
        }

        public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig getDefaultInstanceForType() {
          return service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.getDefaultInstance();
        }

        public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig build() {
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig buildPartial() {
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig result = new service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.channelNumber_ = channelNumber_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.sampleRate_ = sampleRate_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.minFreqMHz_ = minFreqMHz_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.maxFreqMHz_ = maxFreqMHz_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          result.zpipeport_ = zpipeport_;
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000020;
          }
          result.device_ = device_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig) {
            return mergeFrom((service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig other) {
          if (other == service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.getDefaultInstance()) return this;
          if (other.hasChannelNumber()) {
            setChannelNumber(other.getChannelNumber());
          }
          if (other.hasSampleRate()) {
            setSampleRate(other.getSampleRate());
          }
          if (other.hasMinFreqMHz()) {
            setMinFreqMHz(other.getMinFreqMHz());
          }
          if (other.hasMaxFreqMHz()) {
            setMaxFreqMHz(other.getMaxFreqMHz());
          }
          if (other.hasZpipeport()) {
            setZpipeport(other.getZpipeport());
          }
          if (other.hasDevice()) {
            bitField0_ |= 0x00000020;
            device_ = other.device_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional int32 channelNumber = 1 [default = 1];
        private int channelNumber_ = 1;
        /**
         * <code>optional int32 channelNumber = 1 [default = 1];</code>
         *
         * <pre>
         * Channel Number / Designator
         * </pre>
         */
        public boolean hasChannelNumber() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 channelNumber = 1 [default = 1];</code>
         *
         * <pre>
         * Channel Number / Designator
         * </pre>
         */
        public int getChannelNumber() {
          return channelNumber_;
        }
        /**
         * <code>optional int32 channelNumber = 1 [default = 1];</code>
         *
         * <pre>
         * Channel Number / Designator
         * </pre>
         */
        public Builder setChannelNumber(int value) {
          bitField0_ |= 0x00000001;
          channelNumber_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 channelNumber = 1 [default = 1];</code>
         *
         * <pre>
         * Channel Number / Designator
         * </pre>
         */
        public Builder clearChannelNumber() {
          bitField0_ = (bitField0_ & ~0x00000001);
          channelNumber_ = 1;
          onChanged();
          return this;
        }

        // optional double sampleRate = 2 [default = 100000000];
        private double sampleRate_ = 100000000D;
        /**
         * <code>optional double sampleRate = 2 [default = 100000000];</code>
         *
         * <pre>
         * This is the sample Rate of the output channel
         * </pre>
         */
        public boolean hasSampleRate() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional double sampleRate = 2 [default = 100000000];</code>
         *
         * <pre>
         * This is the sample Rate of the output channel
         * </pre>
         */
        public double getSampleRate() {
          return sampleRate_;
        }
        /**
         * <code>optional double sampleRate = 2 [default = 100000000];</code>
         *
         * <pre>
         * This is the sample Rate of the output channel
         * </pre>
         */
        public Builder setSampleRate(double value) {
          bitField0_ |= 0x00000002;
          sampleRate_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double sampleRate = 2 [default = 100000000];</code>
         *
         * <pre>
         * This is the sample Rate of the output channel
         * </pre>
         */
        public Builder clearSampleRate() {
          bitField0_ = (bitField0_ & ~0x00000002);
          sampleRate_ = 100000000D;
          onChanged();
          return this;
        }

        // optional double minFreqMHz = 3 [default = 20];
        private double minFreqMHz_ = 20D;
        /**
         * <code>optional double minFreqMHz = 3 [default = 20];</code>
         *
         * <pre>
         * These set the minimum and maximum frequencies on which a
         * channel of thunderbird is allowed to operate, in MHz. For
         * example, if there are multiple channels within the Thunderbird, this
         * is one way to differentiate which channel the Thunderbird will register on.
         * </pre>
         */
        public boolean hasMinFreqMHz() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional double minFreqMHz = 3 [default = 20];</code>
         *
         * <pre>
         * These set the minimum and maximum frequencies on which a
         * channel of thunderbird is allowed to operate, in MHz. For
         * example, if there are multiple channels within the Thunderbird, this
         * is one way to differentiate which channel the Thunderbird will register on.
         * </pre>
         */
        public double getMinFreqMHz() {
          return minFreqMHz_;
        }
        /**
         * <code>optional double minFreqMHz = 3 [default = 20];</code>
         *
         * <pre>
         * These set the minimum and maximum frequencies on which a
         * channel of thunderbird is allowed to operate, in MHz. For
         * example, if there are multiple channels within the Thunderbird, this
         * is one way to differentiate which channel the Thunderbird will register on.
         * </pre>
         */
        public Builder setMinFreqMHz(double value) {
          bitField0_ |= 0x00000004;
          minFreqMHz_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double minFreqMHz = 3 [default = 20];</code>
         *
         * <pre>
         * These set the minimum and maximum frequencies on which a
         * channel of thunderbird is allowed to operate, in MHz. For
         * example, if there are multiple channels within the Thunderbird, this
         * is one way to differentiate which channel the Thunderbird will register on.
         * </pre>
         */
        public Builder clearMinFreqMHz() {
          bitField0_ = (bitField0_ & ~0x00000004);
          minFreqMHz_ = 20D;
          onChanged();
          return this;
        }

        // optional double maxFreqMHz = 4 [default = 6000];
        private double maxFreqMHz_ = 6000D;
        /**
         * <code>optional double maxFreqMHz = 4 [default = 6000];</code>
         */
        public boolean hasMaxFreqMHz() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional double maxFreqMHz = 4 [default = 6000];</code>
         */
        public double getMaxFreqMHz() {
          return maxFreqMHz_;
        }
        /**
         * <code>optional double maxFreqMHz = 4 [default = 6000];</code>
         */
        public Builder setMaxFreqMHz(double value) {
          bitField0_ |= 0x00000008;
          maxFreqMHz_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double maxFreqMHz = 4 [default = 6000];</code>
         */
        public Builder clearMaxFreqMHz() {
          bitField0_ = (bitField0_ & ~0x00000008);
          maxFreqMHz_ = 6000D;
          onChanged();
          return this;
        }

        // optional int32 zpipeport = 5 [default = 38599];
        private int zpipeport_ = 38599;
        /**
         * <code>optional int32 zpipeport = 5 [default = 38599];</code>
         *
         * <pre>
         * This is the output port of the specific channel
         * </pre>
         */
        public boolean hasZpipeport() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional int32 zpipeport = 5 [default = 38599];</code>
         *
         * <pre>
         * This is the output port of the specific channel
         * </pre>
         */
        public int getZpipeport() {
          return zpipeport_;
        }
        /**
         * <code>optional int32 zpipeport = 5 [default = 38599];</code>
         *
         * <pre>
         * This is the output port of the specific channel
         * </pre>
         */
        public Builder setZpipeport(int value) {
          bitField0_ |= 0x00000010;
          zpipeport_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 zpipeport = 5 [default = 38599];</code>
         *
         * <pre>
         * This is the output port of the specific channel
         * </pre>
         */
        public Builder clearZpipeport() {
          bitField0_ = (bitField0_ & ~0x00000010);
          zpipeport_ = 38599;
          onChanged();
          return this;
        }

        // optional string device = 6 [default = "ZPIPE"];
        private java.lang.Object device_ = "ZPIPE";
        /**
         * <code>optional string device = 6 [default = "ZPIPE"];</code>
         *
         * <pre>
         * This is the device name of the channel, if there is one
         * </pre>
         */
        public boolean hasDevice() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional string device = 6 [default = "ZPIPE"];</code>
         *
         * <pre>
         * This is the device name of the channel, if there is one
         * </pre>
         */
        public java.lang.String getDevice() {
          java.lang.Object ref = device_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            device_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string device = 6 [default = "ZPIPE"];</code>
         *
         * <pre>
         * This is the device name of the channel, if there is one
         * </pre>
         */
        public com.google.protobuf.ByteString
            getDeviceBytes() {
          java.lang.Object ref = device_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            device_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string device = 6 [default = "ZPIPE"];</code>
         *
         * <pre>
         * This is the device name of the channel, if there is one
         * </pre>
         */
        public Builder setDevice(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
          device_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string device = 6 [default = "ZPIPE"];</code>
         *
         * <pre>
         * This is the device name of the channel, if there is one
         * </pre>
         */
        public Builder clearDevice() {
          bitField0_ = (bitField0_ & ~0x00000020);
          device_ = getDefaultInstance().getDevice();
          onChanged();
          return this;
        }
        /**
         * <code>optional string device = 6 [default = "ZPIPE"];</code>
         *
         * <pre>
         * This is the device name of the channel, if there is one
         * </pre>
         */
        public Builder setDeviceBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
          device_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:service_thunderbird.ThunderbirdConfig.TBChannelConfig)
      }

      static {
        defaultInstance = new TBChannelConfig(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:service_thunderbird.ThunderbirdConfig.TBChannelConfig)
    }

    private int bitField0_;
    // optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];
    public static final int MSGNAME_FIELD_NUMBER = 1;
    private java.lang.Object msgName_;
    /**
     * <code>optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];</code>
     */
    public boolean hasMsgName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];</code>
     */
    public java.lang.String getMsgName() {
      java.lang.Object ref = msgName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          msgName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];</code>
     */
    public com.google.protobuf.ByteString
        getMsgNameBytes() {
      java.lang.Object ref = msgName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        msgName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string script = 2;
    public static final int SCRIPT_FIELD_NUMBER = 2;
    private java.lang.Object script_;
    /**
     * <code>optional string script = 2;</code>
     */
    public boolean hasScript() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string script = 2;</code>
     */
    public java.lang.String getScript() {
      java.lang.Object ref = script_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          script_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string script = 2;</code>
     */
    public com.google.protobuf.ByteString
        getScriptBytes() {
      java.lang.Object ref = script_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        script_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional float gaindb = 4 [default = 30];
    public static final int GAINDB_FIELD_NUMBER = 4;
    private float gaindb_;
    /**
     * <code>optional float gaindb = 4 [default = 30];</code>
     */
    public boolean hasGaindb() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float gaindb = 4 [default = 30];</code>
     */
    public float getGaindb() {
      return gaindb_;
    }

    // optional int32 numberZPipePortsPerChannel = 6 [default = 30];
    public static final int NUMBERZPIPEPORTSPERCHANNEL_FIELD_NUMBER = 6;
    private int numberZPipePortsPerChannel_;
    /**
     * <code>optional int32 numberZPipePortsPerChannel = 6 [default = 30];</code>
     *
     * <pre>
     * When we have multiple channels, this is how many ZPipe ports will be reserved for each channel
     * </pre>
     */
    public boolean hasNumberZPipePortsPerChannel() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 numberZPipePortsPerChannel = 6 [default = 30];</code>
     *
     * <pre>
     * When we have multiple channels, this is how many ZPipe ports will be reserved for each channel
     * </pre>
     */
    public int getNumberZPipePortsPerChannel() {
      return numberZPipePortsPerChannel_;
    }

    // optional int32 index = 8 [default = 2];
    public static final int INDEX_FIELD_NUMBER = 8;
    private int index_;
    /**
     * <code>optional int32 index = 8 [default = 2];</code>
     *
     * <pre>
     * FIXME: This needs to go...it is used as a (global) channel number. See comments on `QServiceThunderbird#index`
     *   for discussion.
     * </pre>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 index = 8 [default = 2];</code>
     *
     * <pre>
     * FIXME: This needs to go...it is used as a (global) channel number. See comments on `QServiceThunderbird#index`
     *   for discussion.
     * </pre>
     */
    public int getIndex() {
      return index_;
    }

    // optional double ewCapabilitiesRebroadcastCooldown = 101 [default = 5];
    public static final int EWCAPABILITIESREBROADCASTCOOLDOWN_FIELD_NUMBER = 101;
    private double ewCapabilitiesRebroadcastCooldown_;
    /**
     * <code>optional double ewCapabilitiesRebroadcastCooldown = 101 [default = 5];</code>
     *
     * <pre>
     * Cooldown during which these messages will only be sent if either their value changed since last sent or e.g. we
     * are responding to a specific request.
     * </pre>
     */
    public boolean hasEwCapabilitiesRebroadcastCooldown() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional double ewCapabilitiesRebroadcastCooldown = 101 [default = 5];</code>
     *
     * <pre>
     * Cooldown during which these messages will only be sent if either their value changed since last sent or e.g. we
     * are responding to a specific request.
     * </pre>
     */
    public double getEwCapabilitiesRebroadcastCooldown() {
      return ewCapabilitiesRebroadcastCooldown_;
    }

    // optional double ewTransmittingRebroadcastCooldown = 102 [default = 5];
    public static final int EWTRANSMITTINGREBROADCASTCOOLDOWN_FIELD_NUMBER = 102;
    private double ewTransmittingRebroadcastCooldown_;
    /**
     * <code>optional double ewTransmittingRebroadcastCooldown = 102 [default = 5];</code>
     */
    public boolean hasEwTransmittingRebroadcastCooldown() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional double ewTransmittingRebroadcastCooldown = 102 [default = 5];</code>
     */
    public double getEwTransmittingRebroadcastCooldown() {
      return ewTransmittingRebroadcastCooldown_;
    }

    // optional bool plotOutputSpectrumEnabled = 11 [default = false];
    public static final int PLOTOUTPUTSPECTRUMENABLED_FIELD_NUMBER = 11;
    private boolean plotOutputSpectrumEnabled_;
    /**
     * <code>optional bool plotOutputSpectrumEnabled = 11 [default = false];</code>
     *
     * <pre>
     * Debugging-only options.
     * </pre>
     */
    public boolean hasPlotOutputSpectrumEnabled() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool plotOutputSpectrumEnabled = 11 [default = false];</code>
     *
     * <pre>
     * Debugging-only options.
     * </pre>
     */
    public boolean getPlotOutputSpectrumEnabled() {
      return plotOutputSpectrumEnabled_;
    }

    // optional bool plotOutputSpectrumThinned = 12 [default = true];
    public static final int PLOTOUTPUTSPECTRUMTHINNED_FIELD_NUMBER = 12;
    private boolean plotOutputSpectrumThinned_;
    /**
     * <code>optional bool plotOutputSpectrumThinned = 12 [default = true];</code>
     */
    public boolean hasPlotOutputSpectrumThinned() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bool plotOutputSpectrumThinned = 12 [default = true];</code>
     */
    public boolean getPlotOutputSpectrumThinned() {
      return plotOutputSpectrumThinned_;
    }

    // optional bool xpipemonitorEnabled = 13 [default = true];
    public static final int XPIPEMONITORENABLED_FIELD_NUMBER = 13;
    private boolean xpipemonitorEnabled_;
    /**
     * <code>optional bool xpipemonitorEnabled = 13 [default = true];</code>
     */
    public boolean hasXpipemonitorEnabled() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool xpipemonitorEnabled = 13 [default = true];</code>
     */
    public boolean getXpipemonitorEnabled() {
      return xpipemonitorEnabled_;
    }

    // optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;
    public static final int MUXTXCONFIG_FIELD_NUMBER = 14;
    private service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig_;
    /**
     * <code>optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;</code>
     */
    public boolean hasMuxtxConfig() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;</code>
     */
    public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig getMuxtxConfig() {
      return muxtxConfig_;
    }
    /**
     * <code>optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;</code>
     */
    public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfigOrBuilder getMuxtxConfigOrBuilder() {
      return muxtxConfig_;
    }

    // optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;
    public static final int THROTTLEHEADERSCONFIG_FIELD_NUMBER = 15;
    private service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig_;
    /**
     * <code>optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;</code>
     */
    public boolean hasThrottleHeadersConfig() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;</code>
     */
    public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig getThrottleHeadersConfig() {
      return throttleHeadersConfig_;
    }
    /**
     * <code>optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;</code>
     */
    public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfigOrBuilder getThrottleHeadersConfigOrBuilder() {
      return throttleHeadersConfig_;
    }

    // repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;
    public static final int TBCHANNELS_FIELD_NUMBER = 16;
    private java.util.List<service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig> tbChannels_;
    /**
     * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
     */
    public java.util.List<service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig> getTbChannelsList() {
      return tbChannels_;
    }
    /**
     * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
     */
    public java.util.List<? extends service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfigOrBuilder> 
        getTbChannelsOrBuilderList() {
      return tbChannels_;
    }
    /**
     * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
     */
    public int getTbChannelsCount() {
      return tbChannels_.size();
    }
    /**
     * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
     */
    public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig getTbChannels(int index) {
      return tbChannels_.get(index);
    }
    /**
     * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
     */
    public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfigOrBuilder getTbChannelsOrBuilder(
        int index) {
      return tbChannels_.get(index);
    }

    private void initFields() {
      msgName_ = "service_thunderbird.ThunderbirdConfig";
      script_ = "";
      gaindb_ = 30F;
      numberZPipePortsPerChannel_ = 30;
      index_ = 2;
      ewCapabilitiesRebroadcastCooldown_ = 5D;
      ewTransmittingRebroadcastCooldown_ = 5D;
      plotOutputSpectrumEnabled_ = false;
      plotOutputSpectrumThinned_ = true;
      xpipemonitorEnabled_ = true;
      muxtxConfig_ = service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.getDefaultInstance();
      throttleHeadersConfig_ = service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.getDefaultInstance();
      tbChannels_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getMsgNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getScriptBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(4, gaindb_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, numberZPipePortsPerChannel_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(8, index_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(11, plotOutputSpectrumEnabled_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(12, plotOutputSpectrumThinned_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(13, xpipemonitorEnabled_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(14, muxtxConfig_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(15, throttleHeadersConfig_);
      }
      for (int i = 0; i < tbChannels_.size(); i++) {
        output.writeMessage(16, tbChannels_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(101, ewCapabilitiesRebroadcastCooldown_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(102, ewTransmittingRebroadcastCooldown_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getMsgNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getScriptBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, gaindb_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, numberZPipePortsPerChannel_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, index_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, plotOutputSpectrumEnabled_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, plotOutputSpectrumThinned_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, xpipemonitorEnabled_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, muxtxConfig_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, throttleHeadersConfig_);
      }
      for (int i = 0; i < tbChannels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, tbChannels_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(101, ewCapabilitiesRebroadcastCooldown_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(102, ewTransmittingRebroadcastCooldown_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static service_thunderbird.ServiceThunderbird.ThunderbirdConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(service_thunderbird.ServiceThunderbird.ThunderbirdConfig prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code service_thunderbird.ThunderbirdConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements service_thunderbird.ServiceThunderbird.ThunderbirdConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                service_thunderbird.ServiceThunderbird.ThunderbirdConfig.class, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.Builder.class);
      }

      // Construct using service_thunderbird.ServiceThunderbird.ThunderbirdConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMuxtxConfigFieldBuilder();
          getThrottleHeadersConfigFieldBuilder();
          getTbChannelsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        msgName_ = "service_thunderbird.ThunderbirdConfig";
        bitField0_ = (bitField0_ & ~0x00000001);
        script_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        gaindb_ = 30F;
        bitField0_ = (bitField0_ & ~0x00000004);
        numberZPipePortsPerChannel_ = 30;
        bitField0_ = (bitField0_ & ~0x00000008);
        index_ = 2;
        bitField0_ = (bitField0_ & ~0x00000010);
        ewCapabilitiesRebroadcastCooldown_ = 5D;
        bitField0_ = (bitField0_ & ~0x00000020);
        ewTransmittingRebroadcastCooldown_ = 5D;
        bitField0_ = (bitField0_ & ~0x00000040);
        plotOutputSpectrumEnabled_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        plotOutputSpectrumThinned_ = true;
        bitField0_ = (bitField0_ & ~0x00000100);
        xpipemonitorEnabled_ = true;
        bitField0_ = (bitField0_ & ~0x00000200);
        if (muxtxConfigBuilder_ == null) {
          muxtxConfig_ = service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.getDefaultInstance();
        } else {
          muxtxConfigBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (throttleHeadersConfigBuilder_ == null) {
          throttleHeadersConfig_ = service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.getDefaultInstance();
        } else {
          throttleHeadersConfigBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (tbChannelsBuilder_ == null) {
          tbChannels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
        } else {
          tbChannelsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return service_thunderbird.ServiceThunderbird.internal_static_service_thunderbird_ThunderbirdConfig_descriptor;
      }

      public service_thunderbird.ServiceThunderbird.ThunderbirdConfig getDefaultInstanceForType() {
        return service_thunderbird.ServiceThunderbird.ThunderbirdConfig.getDefaultInstance();
      }

      public service_thunderbird.ServiceThunderbird.ThunderbirdConfig build() {
        service_thunderbird.ServiceThunderbird.ThunderbirdConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public service_thunderbird.ServiceThunderbird.ThunderbirdConfig buildPartial() {
        service_thunderbird.ServiceThunderbird.ThunderbirdConfig result = new service_thunderbird.ServiceThunderbird.ThunderbirdConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.msgName_ = msgName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.script_ = script_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gaindb_ = gaindb_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.numberZPipePortsPerChannel_ = numberZPipePortsPerChannel_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.ewCapabilitiesRebroadcastCooldown_ = ewCapabilitiesRebroadcastCooldown_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.ewTransmittingRebroadcastCooldown_ = ewTransmittingRebroadcastCooldown_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.plotOutputSpectrumEnabled_ = plotOutputSpectrumEnabled_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.plotOutputSpectrumThinned_ = plotOutputSpectrumThinned_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.xpipemonitorEnabled_ = xpipemonitorEnabled_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (muxtxConfigBuilder_ == null) {
          result.muxtxConfig_ = muxtxConfig_;
        } else {
          result.muxtxConfig_ = muxtxConfigBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        if (throttleHeadersConfigBuilder_ == null) {
          result.throttleHeadersConfig_ = throttleHeadersConfig_;
        } else {
          result.throttleHeadersConfig_ = throttleHeadersConfigBuilder_.build();
        }
        if (tbChannelsBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000)) {
            tbChannels_ = java.util.Collections.unmodifiableList(tbChannels_);
            bitField0_ = (bitField0_ & ~0x00001000);
          }
          result.tbChannels_ = tbChannels_;
        } else {
          result.tbChannels_ = tbChannelsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof service_thunderbird.ServiceThunderbird.ThunderbirdConfig) {
          return mergeFrom((service_thunderbird.ServiceThunderbird.ThunderbirdConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(service_thunderbird.ServiceThunderbird.ThunderbirdConfig other) {
        if (other == service_thunderbird.ServiceThunderbird.ThunderbirdConfig.getDefaultInstance()) return this;
        if (other.hasMsgName()) {
          bitField0_ |= 0x00000001;
          msgName_ = other.msgName_;
          onChanged();
        }
        if (other.hasScript()) {
          bitField0_ |= 0x00000002;
          script_ = other.script_;
          onChanged();
        }
        if (other.hasGaindb()) {
          setGaindb(other.getGaindb());
        }
        if (other.hasNumberZPipePortsPerChannel()) {
          setNumberZPipePortsPerChannel(other.getNumberZPipePortsPerChannel());
        }
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasEwCapabilitiesRebroadcastCooldown()) {
          setEwCapabilitiesRebroadcastCooldown(other.getEwCapabilitiesRebroadcastCooldown());
        }
        if (other.hasEwTransmittingRebroadcastCooldown()) {
          setEwTransmittingRebroadcastCooldown(other.getEwTransmittingRebroadcastCooldown());
        }
        if (other.hasPlotOutputSpectrumEnabled()) {
          setPlotOutputSpectrumEnabled(other.getPlotOutputSpectrumEnabled());
        }
        if (other.hasPlotOutputSpectrumThinned()) {
          setPlotOutputSpectrumThinned(other.getPlotOutputSpectrumThinned());
        }
        if (other.hasXpipemonitorEnabled()) {
          setXpipemonitorEnabled(other.getXpipemonitorEnabled());
        }
        if (other.hasMuxtxConfig()) {
          mergeMuxtxConfig(other.getMuxtxConfig());
        }
        if (other.hasThrottleHeadersConfig()) {
          mergeThrottleHeadersConfig(other.getThrottleHeadersConfig());
        }
        if (tbChannelsBuilder_ == null) {
          if (!other.tbChannels_.isEmpty()) {
            if (tbChannels_.isEmpty()) {
              tbChannels_ = other.tbChannels_;
              bitField0_ = (bitField0_ & ~0x00001000);
            } else {
              ensureTbChannelsIsMutable();
              tbChannels_.addAll(other.tbChannels_);
            }
            onChanged();
          }
        } else {
          if (!other.tbChannels_.isEmpty()) {
            if (tbChannelsBuilder_.isEmpty()) {
              tbChannelsBuilder_.dispose();
              tbChannelsBuilder_ = null;
              tbChannels_ = other.tbChannels_;
              bitField0_ = (bitField0_ & ~0x00001000);
              tbChannelsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTbChannelsFieldBuilder() : null;
            } else {
              tbChannelsBuilder_.addAllMessages(other.tbChannels_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        service_thunderbird.ServiceThunderbird.ThunderbirdConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (service_thunderbird.ServiceThunderbird.ThunderbirdConfig) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];
      private java.lang.Object msgName_ = "service_thunderbird.ThunderbirdConfig";
      /**
       * <code>optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];</code>
       */
      public boolean hasMsgName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];</code>
       */
      public java.lang.String getMsgName() {
        java.lang.Object ref = msgName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          msgName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];</code>
       */
      public com.google.protobuf.ByteString
          getMsgNameBytes() {
        java.lang.Object ref = msgName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          msgName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];</code>
       */
      public Builder setMsgName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        msgName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];</code>
       */
      public Builder clearMsgName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        msgName_ = getDefaultInstance().getMsgName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];</code>
       */
      public Builder setMsgNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        msgName_ = value;
        onChanged();
        return this;
      }

      // optional string script = 2;
      private java.lang.Object script_ = "";
      /**
       * <code>optional string script = 2;</code>
       */
      public boolean hasScript() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string script = 2;</code>
       */
      public java.lang.String getScript() {
        java.lang.Object ref = script_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          script_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string script = 2;</code>
       */
      public com.google.protobuf.ByteString
          getScriptBytes() {
        java.lang.Object ref = script_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          script_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string script = 2;</code>
       */
      public Builder setScript(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        script_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string script = 2;</code>
       */
      public Builder clearScript() {
        bitField0_ = (bitField0_ & ~0x00000002);
        script_ = getDefaultInstance().getScript();
        onChanged();
        return this;
      }
      /**
       * <code>optional string script = 2;</code>
       */
      public Builder setScriptBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        script_ = value;
        onChanged();
        return this;
      }

      // optional float gaindb = 4 [default = 30];
      private float gaindb_ = 30F;
      /**
       * <code>optional float gaindb = 4 [default = 30];</code>
       */
      public boolean hasGaindb() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float gaindb = 4 [default = 30];</code>
       */
      public float getGaindb() {
        return gaindb_;
      }
      /**
       * <code>optional float gaindb = 4 [default = 30];</code>
       */
      public Builder setGaindb(float value) {
        bitField0_ |= 0x00000004;
        gaindb_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float gaindb = 4 [default = 30];</code>
       */
      public Builder clearGaindb() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gaindb_ = 30F;
        onChanged();
        return this;
      }

      // optional int32 numberZPipePortsPerChannel = 6 [default = 30];
      private int numberZPipePortsPerChannel_ = 30;
      /**
       * <code>optional int32 numberZPipePortsPerChannel = 6 [default = 30];</code>
       *
       * <pre>
       * When we have multiple channels, this is how many ZPipe ports will be reserved for each channel
       * </pre>
       */
      public boolean hasNumberZPipePortsPerChannel() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 numberZPipePortsPerChannel = 6 [default = 30];</code>
       *
       * <pre>
       * When we have multiple channels, this is how many ZPipe ports will be reserved for each channel
       * </pre>
       */
      public int getNumberZPipePortsPerChannel() {
        return numberZPipePortsPerChannel_;
      }
      /**
       * <code>optional int32 numberZPipePortsPerChannel = 6 [default = 30];</code>
       *
       * <pre>
       * When we have multiple channels, this is how many ZPipe ports will be reserved for each channel
       * </pre>
       */
      public Builder setNumberZPipePortsPerChannel(int value) {
        bitField0_ |= 0x00000008;
        numberZPipePortsPerChannel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 numberZPipePortsPerChannel = 6 [default = 30];</code>
       *
       * <pre>
       * When we have multiple channels, this is how many ZPipe ports will be reserved for each channel
       * </pre>
       */
      public Builder clearNumberZPipePortsPerChannel() {
        bitField0_ = (bitField0_ & ~0x00000008);
        numberZPipePortsPerChannel_ = 30;
        onChanged();
        return this;
      }

      // optional int32 index = 8 [default = 2];
      private int index_ = 2;
      /**
       * <code>optional int32 index = 8 [default = 2];</code>
       *
       * <pre>
       * FIXME: This needs to go...it is used as a (global) channel number. See comments on `QServiceThunderbird#index`
       *   for discussion.
       * </pre>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 index = 8 [default = 2];</code>
       *
       * <pre>
       * FIXME: This needs to go...it is used as a (global) channel number. See comments on `QServiceThunderbird#index`
       *   for discussion.
       * </pre>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>optional int32 index = 8 [default = 2];</code>
       *
       * <pre>
       * FIXME: This needs to go...it is used as a (global) channel number. See comments on `QServiceThunderbird#index`
       *   for discussion.
       * </pre>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000010;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 index = 8 [default = 2];</code>
       *
       * <pre>
       * FIXME: This needs to go...it is used as a (global) channel number. See comments on `QServiceThunderbird#index`
       *   for discussion.
       * </pre>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000010);
        index_ = 2;
        onChanged();
        return this;
      }

      // optional double ewCapabilitiesRebroadcastCooldown = 101 [default = 5];
      private double ewCapabilitiesRebroadcastCooldown_ = 5D;
      /**
       * <code>optional double ewCapabilitiesRebroadcastCooldown = 101 [default = 5];</code>
       *
       * <pre>
       * Cooldown during which these messages will only be sent if either their value changed since last sent or e.g. we
       * are responding to a specific request.
       * </pre>
       */
      public boolean hasEwCapabilitiesRebroadcastCooldown() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional double ewCapabilitiesRebroadcastCooldown = 101 [default = 5];</code>
       *
       * <pre>
       * Cooldown during which these messages will only be sent if either their value changed since last sent or e.g. we
       * are responding to a specific request.
       * </pre>
       */
      public double getEwCapabilitiesRebroadcastCooldown() {
        return ewCapabilitiesRebroadcastCooldown_;
      }
      /**
       * <code>optional double ewCapabilitiesRebroadcastCooldown = 101 [default = 5];</code>
       *
       * <pre>
       * Cooldown during which these messages will only be sent if either their value changed since last sent or e.g. we
       * are responding to a specific request.
       * </pre>
       */
      public Builder setEwCapabilitiesRebroadcastCooldown(double value) {
        bitField0_ |= 0x00000020;
        ewCapabilitiesRebroadcastCooldown_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double ewCapabilitiesRebroadcastCooldown = 101 [default = 5];</code>
       *
       * <pre>
       * Cooldown during which these messages will only be sent if either their value changed since last sent or e.g. we
       * are responding to a specific request.
       * </pre>
       */
      public Builder clearEwCapabilitiesRebroadcastCooldown() {
        bitField0_ = (bitField0_ & ~0x00000020);
        ewCapabilitiesRebroadcastCooldown_ = 5D;
        onChanged();
        return this;
      }

      // optional double ewTransmittingRebroadcastCooldown = 102 [default = 5];
      private double ewTransmittingRebroadcastCooldown_ = 5D;
      /**
       * <code>optional double ewTransmittingRebroadcastCooldown = 102 [default = 5];</code>
       */
      public boolean hasEwTransmittingRebroadcastCooldown() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional double ewTransmittingRebroadcastCooldown = 102 [default = 5];</code>
       */
      public double getEwTransmittingRebroadcastCooldown() {
        return ewTransmittingRebroadcastCooldown_;
      }
      /**
       * <code>optional double ewTransmittingRebroadcastCooldown = 102 [default = 5];</code>
       */
      public Builder setEwTransmittingRebroadcastCooldown(double value) {
        bitField0_ |= 0x00000040;
        ewTransmittingRebroadcastCooldown_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double ewTransmittingRebroadcastCooldown = 102 [default = 5];</code>
       */
      public Builder clearEwTransmittingRebroadcastCooldown() {
        bitField0_ = (bitField0_ & ~0x00000040);
        ewTransmittingRebroadcastCooldown_ = 5D;
        onChanged();
        return this;
      }

      // optional bool plotOutputSpectrumEnabled = 11 [default = false];
      private boolean plotOutputSpectrumEnabled_ ;
      /**
       * <code>optional bool plotOutputSpectrumEnabled = 11 [default = false];</code>
       *
       * <pre>
       * Debugging-only options.
       * </pre>
       */
      public boolean hasPlotOutputSpectrumEnabled() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool plotOutputSpectrumEnabled = 11 [default = false];</code>
       *
       * <pre>
       * Debugging-only options.
       * </pre>
       */
      public boolean getPlotOutputSpectrumEnabled() {
        return plotOutputSpectrumEnabled_;
      }
      /**
       * <code>optional bool plotOutputSpectrumEnabled = 11 [default = false];</code>
       *
       * <pre>
       * Debugging-only options.
       * </pre>
       */
      public Builder setPlotOutputSpectrumEnabled(boolean value) {
        bitField0_ |= 0x00000080;
        plotOutputSpectrumEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool plotOutputSpectrumEnabled = 11 [default = false];</code>
       *
       * <pre>
       * Debugging-only options.
       * </pre>
       */
      public Builder clearPlotOutputSpectrumEnabled() {
        bitField0_ = (bitField0_ & ~0x00000080);
        plotOutputSpectrumEnabled_ = false;
        onChanged();
        return this;
      }

      // optional bool plotOutputSpectrumThinned = 12 [default = true];
      private boolean plotOutputSpectrumThinned_ = true;
      /**
       * <code>optional bool plotOutputSpectrumThinned = 12 [default = true];</code>
       */
      public boolean hasPlotOutputSpectrumThinned() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool plotOutputSpectrumThinned = 12 [default = true];</code>
       */
      public boolean getPlotOutputSpectrumThinned() {
        return plotOutputSpectrumThinned_;
      }
      /**
       * <code>optional bool plotOutputSpectrumThinned = 12 [default = true];</code>
       */
      public Builder setPlotOutputSpectrumThinned(boolean value) {
        bitField0_ |= 0x00000100;
        plotOutputSpectrumThinned_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool plotOutputSpectrumThinned = 12 [default = true];</code>
       */
      public Builder clearPlotOutputSpectrumThinned() {
        bitField0_ = (bitField0_ & ~0x00000100);
        plotOutputSpectrumThinned_ = true;
        onChanged();
        return this;
      }

      // optional bool xpipemonitorEnabled = 13 [default = true];
      private boolean xpipemonitorEnabled_ = true;
      /**
       * <code>optional bool xpipemonitorEnabled = 13 [default = true];</code>
       */
      public boolean hasXpipemonitorEnabled() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bool xpipemonitorEnabled = 13 [default = true];</code>
       */
      public boolean getXpipemonitorEnabled() {
        return xpipemonitorEnabled_;
      }
      /**
       * <code>optional bool xpipemonitorEnabled = 13 [default = true];</code>
       */
      public Builder setXpipemonitorEnabled(boolean value) {
        bitField0_ |= 0x00000200;
        xpipemonitorEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool xpipemonitorEnabled = 13 [default = true];</code>
       */
      public Builder clearXpipemonitorEnabled() {
        bitField0_ = (bitField0_ & ~0x00000200);
        xpipemonitorEnabled_ = true;
        onChanged();
        return this;
      }

      // optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;
      private service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig_ = service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.Builder, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfigOrBuilder> muxtxConfigBuilder_;
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;</code>
       */
      public boolean hasMuxtxConfig() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;</code>
       */
      public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig getMuxtxConfig() {
        if (muxtxConfigBuilder_ == null) {
          return muxtxConfig_;
        } else {
          return muxtxConfigBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;</code>
       */
      public Builder setMuxtxConfig(service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig value) {
        if (muxtxConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          muxtxConfig_ = value;
          onChanged();
        } else {
          muxtxConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;</code>
       */
      public Builder setMuxtxConfig(
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.Builder builderForValue) {
        if (muxtxConfigBuilder_ == null) {
          muxtxConfig_ = builderForValue.build();
          onChanged();
        } else {
          muxtxConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;</code>
       */
      public Builder mergeMuxtxConfig(service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig value) {
        if (muxtxConfigBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              muxtxConfig_ != service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.getDefaultInstance()) {
            muxtxConfig_ =
              service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.newBuilder(muxtxConfig_).mergeFrom(value).buildPartial();
          } else {
            muxtxConfig_ = value;
          }
          onChanged();
        } else {
          muxtxConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;</code>
       */
      public Builder clearMuxtxConfig() {
        if (muxtxConfigBuilder_ == null) {
          muxtxConfig_ = service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.getDefaultInstance();
          onChanged();
        } else {
          muxtxConfigBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;</code>
       */
      public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.Builder getMuxtxConfigBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getMuxtxConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;</code>
       */
      public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfigOrBuilder getMuxtxConfigOrBuilder() {
        if (muxtxConfigBuilder_ != null) {
          return muxtxConfigBuilder_.getMessageOrBuilder();
        } else {
          return muxtxConfig_;
        }
      }
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.Builder, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfigOrBuilder> 
          getMuxtxConfigFieldBuilder() {
        if (muxtxConfigBuilder_ == null) {
          muxtxConfigBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfig.Builder, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.MuxtxConfigOrBuilder>(
                  muxtxConfig_,
                  getParentForChildren(),
                  isClean());
          muxtxConfig_ = null;
        }
        return muxtxConfigBuilder_;
      }

      // optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;
      private service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig_ = service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.Builder, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfigOrBuilder> throttleHeadersConfigBuilder_;
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;</code>
       */
      public boolean hasThrottleHeadersConfig() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;</code>
       */
      public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig getThrottleHeadersConfig() {
        if (throttleHeadersConfigBuilder_ == null) {
          return throttleHeadersConfig_;
        } else {
          return throttleHeadersConfigBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;</code>
       */
      public Builder setThrottleHeadersConfig(service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig value) {
        if (throttleHeadersConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          throttleHeadersConfig_ = value;
          onChanged();
        } else {
          throttleHeadersConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;</code>
       */
      public Builder setThrottleHeadersConfig(
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.Builder builderForValue) {
        if (throttleHeadersConfigBuilder_ == null) {
          throttleHeadersConfig_ = builderForValue.build();
          onChanged();
        } else {
          throttleHeadersConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;</code>
       */
      public Builder mergeThrottleHeadersConfig(service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig value) {
        if (throttleHeadersConfigBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              throttleHeadersConfig_ != service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.getDefaultInstance()) {
            throttleHeadersConfig_ =
              service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.newBuilder(throttleHeadersConfig_).mergeFrom(value).buildPartial();
          } else {
            throttleHeadersConfig_ = value;
          }
          onChanged();
        } else {
          throttleHeadersConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;</code>
       */
      public Builder clearThrottleHeadersConfig() {
        if (throttleHeadersConfigBuilder_ == null) {
          throttleHeadersConfig_ = service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.getDefaultInstance();
          onChanged();
        } else {
          throttleHeadersConfigBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;</code>
       */
      public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.Builder getThrottleHeadersConfigBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getThrottleHeadersConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;</code>
       */
      public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfigOrBuilder getThrottleHeadersConfigOrBuilder() {
        if (throttleHeadersConfigBuilder_ != null) {
          return throttleHeadersConfigBuilder_.getMessageOrBuilder();
        } else {
          return throttleHeadersConfig_;
        }
      }
      /**
       * <code>optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.Builder, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfigOrBuilder> 
          getThrottleHeadersConfigFieldBuilder() {
        if (throttleHeadersConfigBuilder_ == null) {
          throttleHeadersConfigBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfig.Builder, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.ThrottleHeadersConfigOrBuilder>(
                  throttleHeadersConfig_,
                  getParentForChildren(),
                  isClean());
          throttleHeadersConfig_ = null;
        }
        return throttleHeadersConfigBuilder_;
      }

      // repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;
      private java.util.List<service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig> tbChannels_ =
        java.util.Collections.emptyList();
      private void ensureTbChannelsIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          tbChannels_ = new java.util.ArrayList<service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig>(tbChannels_);
          bitField0_ |= 0x00001000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.Builder, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfigOrBuilder> tbChannelsBuilder_;

      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public java.util.List<service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig> getTbChannelsList() {
        if (tbChannelsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tbChannels_);
        } else {
          return tbChannelsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public int getTbChannelsCount() {
        if (tbChannelsBuilder_ == null) {
          return tbChannels_.size();
        } else {
          return tbChannelsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig getTbChannels(int index) {
        if (tbChannelsBuilder_ == null) {
          return tbChannels_.get(index);
        } else {
          return tbChannelsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public Builder setTbChannels(
          int index, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig value) {
        if (tbChannelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTbChannelsIsMutable();
          tbChannels_.set(index, value);
          onChanged();
        } else {
          tbChannelsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public Builder setTbChannels(
          int index, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.Builder builderForValue) {
        if (tbChannelsBuilder_ == null) {
          ensureTbChannelsIsMutable();
          tbChannels_.set(index, builderForValue.build());
          onChanged();
        } else {
          tbChannelsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public Builder addTbChannels(service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig value) {
        if (tbChannelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTbChannelsIsMutable();
          tbChannels_.add(value);
          onChanged();
        } else {
          tbChannelsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public Builder addTbChannels(
          int index, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig value) {
        if (tbChannelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTbChannelsIsMutable();
          tbChannels_.add(index, value);
          onChanged();
        } else {
          tbChannelsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public Builder addTbChannels(
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.Builder builderForValue) {
        if (tbChannelsBuilder_ == null) {
          ensureTbChannelsIsMutable();
          tbChannels_.add(builderForValue.build());
          onChanged();
        } else {
          tbChannelsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public Builder addTbChannels(
          int index, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.Builder builderForValue) {
        if (tbChannelsBuilder_ == null) {
          ensureTbChannelsIsMutable();
          tbChannels_.add(index, builderForValue.build());
          onChanged();
        } else {
          tbChannelsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public Builder addAllTbChannels(
          java.lang.Iterable<? extends service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig> values) {
        if (tbChannelsBuilder_ == null) {
          ensureTbChannelsIsMutable();
          super.addAll(values, tbChannels_);
          onChanged();
        } else {
          tbChannelsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public Builder clearTbChannels() {
        if (tbChannelsBuilder_ == null) {
          tbChannels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
          onChanged();
        } else {
          tbChannelsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public Builder removeTbChannels(int index) {
        if (tbChannelsBuilder_ == null) {
          ensureTbChannelsIsMutable();
          tbChannels_.remove(index);
          onChanged();
        } else {
          tbChannelsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.Builder getTbChannelsBuilder(
          int index) {
        return getTbChannelsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfigOrBuilder getTbChannelsOrBuilder(
          int index) {
        if (tbChannelsBuilder_ == null) {
          return tbChannels_.get(index);  } else {
          return tbChannelsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public java.util.List<? extends service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfigOrBuilder> 
           getTbChannelsOrBuilderList() {
        if (tbChannelsBuilder_ != null) {
          return tbChannelsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tbChannels_);
        }
      }
      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.Builder addTbChannelsBuilder() {
        return getTbChannelsFieldBuilder().addBuilder(
            service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.getDefaultInstance());
      }
      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.Builder addTbChannelsBuilder(
          int index) {
        return getTbChannelsFieldBuilder().addBuilder(
            index, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.getDefaultInstance());
      }
      /**
       * <code>repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;</code>
       */
      public java.util.List<service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.Builder> 
           getTbChannelsBuilderList() {
        return getTbChannelsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.Builder, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfigOrBuilder> 
          getTbChannelsFieldBuilder() {
        if (tbChannelsBuilder_ == null) {
          tbChannelsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfig.Builder, service_thunderbird.ServiceThunderbird.ThunderbirdConfig.TBChannelConfigOrBuilder>(
                  tbChannels_,
                  ((bitField0_ & 0x00001000) == 0x00001000),
                  getParentForChildren(),
                  isClean());
          tbChannels_ = null;
        }
        return tbChannelsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:service_thunderbird.ThunderbirdConfig)
    }

    static {
      defaultInstance = new ThunderbirdConfig(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:service_thunderbird.ThunderbirdConfig)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_service_thunderbird_ThunderbirdConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_service_thunderbird_ThunderbirdConfig_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_service_thunderbird_ThunderbirdConfig_MuxtxConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_service_thunderbird_ThunderbirdConfig_MuxtxConfig_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_service_thunderbird_ThunderbirdConfig_ThrottleHeadersConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_service_thunderbird_ThunderbirdConfig_ThrottleHeadersConfig_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_service_thunderbird_ThunderbirdConfig_TBChannelConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_service_thunderbird_ThunderbirdConfig_TBChannelConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031service_thunderbird.proto\022\023service_thu" +
      "nderbird\"\320\007\n\021ThunderbirdConfig\0226\n\007msgNam" +
      "e\030\001 \001(\t:%service_thunderbird.Thunderbird" +
      "Config\022\016\n\006script\030\002 \001(\t\022\022\n\006gaindb\030\004 \001(\002:\002" +
      "30\022&\n\032numberZPipePortsPerChannel\030\006 \001(\005:\002" +
      "30\022\020\n\005index\030\010 \001(\005:\0012\022,\n!ewCapabilitiesRe" +
      "broadcastCooldown\030e \001(\001:\0015\022,\n!ewTransmit" +
      "tingRebroadcastCooldown\030f \001(\001:\0015\022(\n\031plot" +
      "OutputSpectrumEnabled\030\013 \001(\010:\005false\022\'\n\031pl" +
      "otOutputSpectrumThinned\030\014 \001(\010:\004true\022!\n\023x",
      "pipemonitorEnabled\030\r \001(\010:\004true\022G\n\013muxtxC" +
      "onfig\030\016 \001(\01322.service_thunderbird.Thunde" +
      "rbirdConfig.MuxtxConfig\022[\n\025throttleHeade" +
      "rsConfig\030\017 \001(\0132<.service_thunderbird.Thu" +
      "nderbirdConfig.ThrottleHeadersConfig\022J\n\n" +
      "tbChannels\030\020 \003(\01326.service_thunderbird.T" +
      "hunderbirdConfig.TBChannelConfig\032`\n\013Muxt" +
      "xConfig\022)\n\024midasProcessPriority\030\001 \001(\005:\013-" +
      "2147483648\022&\n\026outputSamplesPerHeader\030\002 \001" +
      "(\005:\006262144\032O\n\025ThrottleHeadersConfig\022\026\n\007e",
      "nabled\030\001 \001(\010:\005false\022\036\n\022throttleTimeOffse" +
      "t\030\002 \001(\001:\00220\032\255\001\n\017TBChannelConfig\022\030\n\rchann" +
      "elNumber\030\001 \001(\005:\0011\022\035\n\nsampleRate\030\002 \001(\001:\t1" +
      "00000000\022\026\n\nminFreqMHz\030\003 \001(\001:\00220\022\030\n\nmaxF" +
      "reqMHz\030\004 \001(\001:\0046000\022\030\n\tzpipeport\030\005 \001(\005:\0053" +
      "8599\022\025\n\006device\030\006 \001(\t:\005ZPIPE"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_service_thunderbird_ThunderbirdConfig_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_service_thunderbird_ThunderbirdConfig_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_service_thunderbird_ThunderbirdConfig_descriptor,
              new java.lang.String[] { "MsgName", "Script", "Gaindb", "NumberZPipePortsPerChannel", "Index", "EwCapabilitiesRebroadcastCooldown", "EwTransmittingRebroadcastCooldown", "PlotOutputSpectrumEnabled", "PlotOutputSpectrumThinned", "XpipemonitorEnabled", "MuxtxConfig", "ThrottleHeadersConfig", "TbChannels", });
          internal_static_service_thunderbird_ThunderbirdConfig_MuxtxConfig_descriptor =
            internal_static_service_thunderbird_ThunderbirdConfig_descriptor.getNestedTypes().get(0);
          internal_static_service_thunderbird_ThunderbirdConfig_MuxtxConfig_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_service_thunderbird_ThunderbirdConfig_MuxtxConfig_descriptor,
              new java.lang.String[] { "MidasProcessPriority", "OutputSamplesPerHeader", });
          internal_static_service_thunderbird_ThunderbirdConfig_ThrottleHeadersConfig_descriptor =
            internal_static_service_thunderbird_ThunderbirdConfig_descriptor.getNestedTypes().get(1);
          internal_static_service_thunderbird_ThunderbirdConfig_ThrottleHeadersConfig_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_service_thunderbird_ThunderbirdConfig_ThrottleHeadersConfig_descriptor,
              new java.lang.String[] { "Enabled", "ThrottleTimeOffset", });
          internal_static_service_thunderbird_ThunderbirdConfig_TBChannelConfig_descriptor =
            internal_static_service_thunderbird_ThunderbirdConfig_descriptor.getNestedTypes().get(2);
          internal_static_service_thunderbird_ThunderbirdConfig_TBChannelConfig_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_service_thunderbird_ThunderbirdConfig_TBChannelConfig_descriptor,
              new java.lang.String[] { "ChannelNumber", "SampleRate", "MinFreqMHz", "MaxFreqMHz", "Zpipeport", "Device", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
