// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceInfrastructureNetwork.proto

package fv.protos.kepsvisor;

public final class ServiceInfrastructureNetwork {
  private ServiceInfrastructureNetwork() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface NetworkLayoutOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int64 base_port = 1 [default = 8080];
    /**
     * <code>optional int64 base_port = 1 [default = 8080];</code>
     */
    boolean hasBasePort();
    /**
     * <code>optional int64 base_port = 1 [default = 8080];</code>
     */
    long getBasePort();

    // optional int64 infra_port_offset = 2 [default = 17];
    /**
     * <code>optional int64 infra_port_offset = 2 [default = 17];</code>
     */
    boolean hasInfraPortOffset();
    /**
     * <code>optional int64 infra_port_offset = 2 [default = 17];</code>
     */
    long getInfraPortOffset();

    // optional int64 service_port_offset = 3 [default = 19];
    /**
     * <code>optional int64 service_port_offset = 3 [default = 19];</code>
     */
    boolean hasServicePortOffset();
    /**
     * <code>optional int64 service_port_offset = 3 [default = 19];</code>
     */
    long getServicePortOffset();

    // optional int64 zpipe_port_offset = 4 [default = 27];
    /**
     * <code>optional int64 zpipe_port_offset = 4 [default = 27];</code>
     */
    boolean hasZpipePortOffset();
    /**
     * <code>optional int64 zpipe_port_offset = 4 [default = 27];</code>
     */
    long getZpipePortOffset();

    // optional int64 sub_port = 5 [default = 6686];
    /**
     * <code>optional int64 sub_port = 5 [default = 6686];</code>
     *
     * <pre>
     * These ports are for testing with the simulator
     * </pre>
     */
    boolean hasSubPort();
    /**
     * <code>optional int64 sub_port = 5 [default = 6686];</code>
     *
     * <pre>
     * These ports are for testing with the simulator
     * </pre>
     */
    long getSubPort();

    // optional int64 pub_port = 6 [default = 5585];
    /**
     * <code>optional int64 pub_port = 6 [default = 5585];</code>
     */
    boolean hasPubPort();
    /**
     * <code>optional int64 pub_port = 6 [default = 5585];</code>
     */
    long getPubPort();
  }
  /**
   * Protobuf type {@code service_infrastructure.NetworkLayout}
   */
  public static final class NetworkLayout extends
      com.google.protobuf.GeneratedMessage
      implements NetworkLayoutOrBuilder {
    // Use NetworkLayout.newBuilder() to construct.
    private NetworkLayout(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NetworkLayout(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NetworkLayout defaultInstance;
    public static NetworkLayout getDefaultInstance() {
      return defaultInstance;
    }

    public NetworkLayout getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NetworkLayout(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              basePort_ = input.readInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              infraPortOffset_ = input.readInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              servicePortOffset_ = input.readInt64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              zpipePortOffset_ = input.readInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              subPort_ = input.readInt64();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              pubPort_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return fv.protos.kepsvisor.ServiceInfrastructureNetwork.internal_static_service_infrastructure_NetworkLayout_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return fv.protos.kepsvisor.ServiceInfrastructureNetwork.internal_static_service_infrastructure_NetworkLayout_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout.class, fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout.Builder.class);
    }

    public static com.google.protobuf.Parser<NetworkLayout> PARSER =
        new com.google.protobuf.AbstractParser<NetworkLayout>() {
      public NetworkLayout parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NetworkLayout(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NetworkLayout> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int64 base_port = 1 [default = 8080];
    public static final int BASE_PORT_FIELD_NUMBER = 1;
    private long basePort_;
    /**
     * <code>optional int64 base_port = 1 [default = 8080];</code>
     */
    public boolean hasBasePort() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int64 base_port = 1 [default = 8080];</code>
     */
    public long getBasePort() {
      return basePort_;
    }

    // optional int64 infra_port_offset = 2 [default = 17];
    public static final int INFRA_PORT_OFFSET_FIELD_NUMBER = 2;
    private long infraPortOffset_;
    /**
     * <code>optional int64 infra_port_offset = 2 [default = 17];</code>
     */
    public boolean hasInfraPortOffset() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 infra_port_offset = 2 [default = 17];</code>
     */
    public long getInfraPortOffset() {
      return infraPortOffset_;
    }

    // optional int64 service_port_offset = 3 [default = 19];
    public static final int SERVICE_PORT_OFFSET_FIELD_NUMBER = 3;
    private long servicePortOffset_;
    /**
     * <code>optional int64 service_port_offset = 3 [default = 19];</code>
     */
    public boolean hasServicePortOffset() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int64 service_port_offset = 3 [default = 19];</code>
     */
    public long getServicePortOffset() {
      return servicePortOffset_;
    }

    // optional int64 zpipe_port_offset = 4 [default = 27];
    public static final int ZPIPE_PORT_OFFSET_FIELD_NUMBER = 4;
    private long zpipePortOffset_;
    /**
     * <code>optional int64 zpipe_port_offset = 4 [default = 27];</code>
     */
    public boolean hasZpipePortOffset() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int64 zpipe_port_offset = 4 [default = 27];</code>
     */
    public long getZpipePortOffset() {
      return zpipePortOffset_;
    }

    // optional int64 sub_port = 5 [default = 6686];
    public static final int SUB_PORT_FIELD_NUMBER = 5;
    private long subPort_;
    /**
     * <code>optional int64 sub_port = 5 [default = 6686];</code>
     *
     * <pre>
     * These ports are for testing with the simulator
     * </pre>
     */
    public boolean hasSubPort() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int64 sub_port = 5 [default = 6686];</code>
     *
     * <pre>
     * These ports are for testing with the simulator
     * </pre>
     */
    public long getSubPort() {
      return subPort_;
    }

    // optional int64 pub_port = 6 [default = 5585];
    public static final int PUB_PORT_FIELD_NUMBER = 6;
    private long pubPort_;
    /**
     * <code>optional int64 pub_port = 6 [default = 5585];</code>
     */
    public boolean hasPubPort() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int64 pub_port = 6 [default = 5585];</code>
     */
    public long getPubPort() {
      return pubPort_;
    }

    private void initFields() {
      basePort_ = 8080L;
      infraPortOffset_ = 17L;
      servicePortOffset_ = 19L;
      zpipePortOffset_ = 27L;
      subPort_ = 6686L;
      pubPort_ = 5585L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, basePort_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, infraPortOffset_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, servicePortOffset_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt64(4, zpipePortOffset_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt64(5, subPort_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt64(6, pubPort_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, basePort_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, infraPortOffset_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, servicePortOffset_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, zpipePortOffset_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, subPort_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, pubPort_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code service_infrastructure.NetworkLayout}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayoutOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return fv.protos.kepsvisor.ServiceInfrastructureNetwork.internal_static_service_infrastructure_NetworkLayout_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return fv.protos.kepsvisor.ServiceInfrastructureNetwork.internal_static_service_infrastructure_NetworkLayout_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout.class, fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout.Builder.class);
      }

      // Construct using fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        basePort_ = 8080L;
        bitField0_ = (bitField0_ & ~0x00000001);
        infraPortOffset_ = 17L;
        bitField0_ = (bitField0_ & ~0x00000002);
        servicePortOffset_ = 19L;
        bitField0_ = (bitField0_ & ~0x00000004);
        zpipePortOffset_ = 27L;
        bitField0_ = (bitField0_ & ~0x00000008);
        subPort_ = 6686L;
        bitField0_ = (bitField0_ & ~0x00000010);
        pubPort_ = 5585L;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return fv.protos.kepsvisor.ServiceInfrastructureNetwork.internal_static_service_infrastructure_NetworkLayout_descriptor;
      }

      public fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout getDefaultInstanceForType() {
        return fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout.getDefaultInstance();
      }

      public fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout build() {
        fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout buildPartial() {
        fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout result = new fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.basePort_ = basePort_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.infraPortOffset_ = infraPortOffset_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.servicePortOffset_ = servicePortOffset_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.zpipePortOffset_ = zpipePortOffset_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.subPort_ = subPort_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.pubPort_ = pubPort_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout) {
          return mergeFrom((fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout other) {
        if (other == fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout.getDefaultInstance()) return this;
        if (other.hasBasePort()) {
          setBasePort(other.getBasePort());
        }
        if (other.hasInfraPortOffset()) {
          setInfraPortOffset(other.getInfraPortOffset());
        }
        if (other.hasServicePortOffset()) {
          setServicePortOffset(other.getServicePortOffset());
        }
        if (other.hasZpipePortOffset()) {
          setZpipePortOffset(other.getZpipePortOffset());
        }
        if (other.hasSubPort()) {
          setSubPort(other.getSubPort());
        }
        if (other.hasPubPort()) {
          setPubPort(other.getPubPort());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (fv.protos.kepsvisor.ServiceInfrastructureNetwork.NetworkLayout) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int64 base_port = 1 [default = 8080];
      private long basePort_ = 8080L;
      /**
       * <code>optional int64 base_port = 1 [default = 8080];</code>
       */
      public boolean hasBasePort() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int64 base_port = 1 [default = 8080];</code>
       */
      public long getBasePort() {
        return basePort_;
      }
      /**
       * <code>optional int64 base_port = 1 [default = 8080];</code>
       */
      public Builder setBasePort(long value) {
        bitField0_ |= 0x00000001;
        basePort_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 base_port = 1 [default = 8080];</code>
       */
      public Builder clearBasePort() {
        bitField0_ = (bitField0_ & ~0x00000001);
        basePort_ = 8080L;
        onChanged();
        return this;
      }

      // optional int64 infra_port_offset = 2 [default = 17];
      private long infraPortOffset_ = 17L;
      /**
       * <code>optional int64 infra_port_offset = 2 [default = 17];</code>
       */
      public boolean hasInfraPortOffset() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 infra_port_offset = 2 [default = 17];</code>
       */
      public long getInfraPortOffset() {
        return infraPortOffset_;
      }
      /**
       * <code>optional int64 infra_port_offset = 2 [default = 17];</code>
       */
      public Builder setInfraPortOffset(long value) {
        bitField0_ |= 0x00000002;
        infraPortOffset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 infra_port_offset = 2 [default = 17];</code>
       */
      public Builder clearInfraPortOffset() {
        bitField0_ = (bitField0_ & ~0x00000002);
        infraPortOffset_ = 17L;
        onChanged();
        return this;
      }

      // optional int64 service_port_offset = 3 [default = 19];
      private long servicePortOffset_ = 19L;
      /**
       * <code>optional int64 service_port_offset = 3 [default = 19];</code>
       */
      public boolean hasServicePortOffset() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int64 service_port_offset = 3 [default = 19];</code>
       */
      public long getServicePortOffset() {
        return servicePortOffset_;
      }
      /**
       * <code>optional int64 service_port_offset = 3 [default = 19];</code>
       */
      public Builder setServicePortOffset(long value) {
        bitField0_ |= 0x00000004;
        servicePortOffset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 service_port_offset = 3 [default = 19];</code>
       */
      public Builder clearServicePortOffset() {
        bitField0_ = (bitField0_ & ~0x00000004);
        servicePortOffset_ = 19L;
        onChanged();
        return this;
      }

      // optional int64 zpipe_port_offset = 4 [default = 27];
      private long zpipePortOffset_ = 27L;
      /**
       * <code>optional int64 zpipe_port_offset = 4 [default = 27];</code>
       */
      public boolean hasZpipePortOffset() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int64 zpipe_port_offset = 4 [default = 27];</code>
       */
      public long getZpipePortOffset() {
        return zpipePortOffset_;
      }
      /**
       * <code>optional int64 zpipe_port_offset = 4 [default = 27];</code>
       */
      public Builder setZpipePortOffset(long value) {
        bitField0_ |= 0x00000008;
        zpipePortOffset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 zpipe_port_offset = 4 [default = 27];</code>
       */
      public Builder clearZpipePortOffset() {
        bitField0_ = (bitField0_ & ~0x00000008);
        zpipePortOffset_ = 27L;
        onChanged();
        return this;
      }

      // optional int64 sub_port = 5 [default = 6686];
      private long subPort_ = 6686L;
      /**
       * <code>optional int64 sub_port = 5 [default = 6686];</code>
       *
       * <pre>
       * These ports are for testing with the simulator
       * </pre>
       */
      public boolean hasSubPort() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int64 sub_port = 5 [default = 6686];</code>
       *
       * <pre>
       * These ports are for testing with the simulator
       * </pre>
       */
      public long getSubPort() {
        return subPort_;
      }
      /**
       * <code>optional int64 sub_port = 5 [default = 6686];</code>
       *
       * <pre>
       * These ports are for testing with the simulator
       * </pre>
       */
      public Builder setSubPort(long value) {
        bitField0_ |= 0x00000010;
        subPort_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 sub_port = 5 [default = 6686];</code>
       *
       * <pre>
       * These ports are for testing with the simulator
       * </pre>
       */
      public Builder clearSubPort() {
        bitField0_ = (bitField0_ & ~0x00000010);
        subPort_ = 6686L;
        onChanged();
        return this;
      }

      // optional int64 pub_port = 6 [default = 5585];
      private long pubPort_ = 5585L;
      /**
       * <code>optional int64 pub_port = 6 [default = 5585];</code>
       */
      public boolean hasPubPort() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int64 pub_port = 6 [default = 5585];</code>
       */
      public long getPubPort() {
        return pubPort_;
      }
      /**
       * <code>optional int64 pub_port = 6 [default = 5585];</code>
       */
      public Builder setPubPort(long value) {
        bitField0_ |= 0x00000020;
        pubPort_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 pub_port = 6 [default = 5585];</code>
       */
      public Builder clearPubPort() {
        bitField0_ = (bitField0_ & ~0x00000020);
        pubPort_ = 5585L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:service_infrastructure.NetworkLayout)
    }

    static {
      defaultInstance = new NetworkLayout(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:service_infrastructure.NetworkLayout)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_service_infrastructure_NetworkLayout_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_service_infrastructure_NetworkLayout_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\"ServiceInfrastructureNetwork.proto\022\026se" +
      "rvice_infrastructure\"\267\001\n\rNetworkLayout\022\027" +
      "\n\tbase_port\030\001 \001(\003:\0048080\022\035\n\021infra_port_of" +
      "fset\030\002 \001(\003:\00217\022\037\n\023service_port_offset\030\003 " +
      "\001(\003:\00219\022\035\n\021zpipe_port_offset\030\004 \001(\003:\00227\022\026" +
      "\n\010sub_port\030\005 \001(\003:\0046686\022\026\n\010pub_port\030\006 \001(\003" +
      ":\0045585B\025\n\023fv.protos.kepsvisor"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_service_infrastructure_NetworkLayout_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_service_infrastructure_NetworkLayout_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_service_infrastructure_NetworkLayout_descriptor,
              new java.lang.String[] { "BasePort", "InfraPortOffset", "ServicePortOffset", "ZpipePortOffset", "SubPort", "PubPort", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
