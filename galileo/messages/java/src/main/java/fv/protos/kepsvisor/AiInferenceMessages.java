// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AiInferenceMessages.proto

package fv.protos.kepsvisor;

public final class AiInferenceMessages {
  private AiInferenceMessages() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface SpectrogramInferenceResultOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];
    /**
     * <code>optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];</code>
     */
    boolean hasMsgName();
    /**
     * <code>optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];</code>
     */
    java.lang.String getMsgName();
    /**
     * <code>optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];</code>
     */
    com.google.protobuf.ByteString
        getMsgNameBytes();

    // optional string ramSnapId = 2;
    /**
     * <code>optional string ramSnapId = 2;</code>
     *
     * <pre>
     * UUID of the I/Q for the Spectrogram
     * </pre>
     */
    boolean hasRamSnapId();
    /**
     * <code>optional string ramSnapId = 2;</code>
     *
     * <pre>
     * UUID of the I/Q for the Spectrogram
     * </pre>
     */
    java.lang.String getRamSnapId();
    /**
     * <code>optional string ramSnapId = 2;</code>
     *
     * <pre>
     * UUID of the I/Q for the Spectrogram
     * </pre>
     */
    com.google.protobuf.ByteString
        getRamSnapIdBytes();

    // optional string spectrogramFile = 3;
    /**
     * <code>optional string spectrogramFile = 3;</code>
     *
     * <pre>
     * Name of the spectrogram file
     * </pre>
     */
    boolean hasSpectrogramFile();
    /**
     * <code>optional string spectrogramFile = 3;</code>
     *
     * <pre>
     * Name of the spectrogram file
     * </pre>
     */
    java.lang.String getSpectrogramFile();
    /**
     * <code>optional string spectrogramFile = 3;</code>
     *
     * <pre>
     * Name of the spectrogram file
     * </pre>
     */
    com.google.protobuf.ByteString
        getSpectrogramFileBytes();

    // optional double centerFrequencyHz = 4;
    /**
     * <code>optional double centerFrequencyHz = 4;</code>
     *
     * <pre>
     * Center Frequency of the Snapshot
     * </pre>
     */
    boolean hasCenterFrequencyHz();
    /**
     * <code>optional double centerFrequencyHz = 4;</code>
     *
     * <pre>
     * Center Frequency of the Snapshot
     * </pre>
     */
    double getCenterFrequencyHz();

    // repeated string labels = 5;
    /**
     * <code>repeated string labels = 5;</code>
     *
     * <pre>
     * List of labels
     * </pre>
     */
    java.util.List<java.lang.String>
    getLabelsList();
    /**
     * <code>repeated string labels = 5;</code>
     *
     * <pre>
     * List of labels
     * </pre>
     */
    int getLabelsCount();
    /**
     * <code>repeated string labels = 5;</code>
     *
     * <pre>
     * List of labels
     * </pre>
     */
    java.lang.String getLabels(int index);
    /**
     * <code>repeated string labels = 5;</code>
     *
     * <pre>
     * List of labels
     * </pre>
     */
    com.google.protobuf.ByteString
        getLabelsBytes(int index);

    // repeated double scores = 6;
    /**
     * <code>repeated double scores = 6;</code>
     *
     * <pre>
     * List of scores for the corresponding labels
     * </pre>
     */
    java.util.List<java.lang.Double> getScoresList();
    /**
     * <code>repeated double scores = 6;</code>
     *
     * <pre>
     * List of scores for the corresponding labels
     * </pre>
     */
    int getScoresCount();
    /**
     * <code>repeated double scores = 6;</code>
     *
     * <pre>
     * List of scores for the corresponding labels
     * </pre>
     */
    double getScores(int index);

    // optional double scoreThreshold = 7;
    /**
     * <code>optional double scoreThreshold = 7;</code>
     *
     * <pre>
     * Score Threshold
     * </pre>
     */
    boolean hasScoreThreshold();
    /**
     * <code>optional double scoreThreshold = 7;</code>
     *
     * <pre>
     * Score Threshold
     * </pre>
     */
    double getScoreThreshold();
  }
  /**
   * Protobuf type {@code ai_inference_msg.SpectrogramInferenceResult}
   */
  public static final class SpectrogramInferenceResult extends
      com.google.protobuf.GeneratedMessage
      implements SpectrogramInferenceResultOrBuilder {
    // Use SpectrogramInferenceResult.newBuilder() to construct.
    private SpectrogramInferenceResult(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SpectrogramInferenceResult(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SpectrogramInferenceResult defaultInstance;
    public static SpectrogramInferenceResult getDefaultInstance() {
      return defaultInstance;
    }

    public SpectrogramInferenceResult getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SpectrogramInferenceResult(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              msgName_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              ramSnapId_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              spectrogramFile_ = input.readBytes();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              centerFrequencyHz_ = input.readDouble();
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                labels_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000010;
              }
              labels_.add(input.readBytes());
              break;
            }
            case 49: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                scores_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000020;
              }
              scores_.add(input.readDouble());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                scores_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                scores_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 57: {
              bitField0_ |= 0x00000010;
              scoreThreshold_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          labels_ = new com.google.protobuf.UnmodifiableLazyStringList(labels_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          scores_ = java.util.Collections.unmodifiableList(scores_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return fv.protos.kepsvisor.AiInferenceMessages.internal_static_ai_inference_msg_SpectrogramInferenceResult_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return fv.protos.kepsvisor.AiInferenceMessages.internal_static_ai_inference_msg_SpectrogramInferenceResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult.class, fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult.Builder.class);
    }

    public static com.google.protobuf.Parser<SpectrogramInferenceResult> PARSER =
        new com.google.protobuf.AbstractParser<SpectrogramInferenceResult>() {
      public SpectrogramInferenceResult parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SpectrogramInferenceResult(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SpectrogramInferenceResult> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];
    public static final int MSGNAME_FIELD_NUMBER = 1;
    private java.lang.Object msgName_;
    /**
     * <code>optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];</code>
     */
    public boolean hasMsgName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];</code>
     */
    public java.lang.String getMsgName() {
      java.lang.Object ref = msgName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          msgName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];</code>
     */
    public com.google.protobuf.ByteString
        getMsgNameBytes() {
      java.lang.Object ref = msgName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        msgName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string ramSnapId = 2;
    public static final int RAMSNAPID_FIELD_NUMBER = 2;
    private java.lang.Object ramSnapId_;
    /**
     * <code>optional string ramSnapId = 2;</code>
     *
     * <pre>
     * UUID of the I/Q for the Spectrogram
     * </pre>
     */
    public boolean hasRamSnapId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string ramSnapId = 2;</code>
     *
     * <pre>
     * UUID of the I/Q for the Spectrogram
     * </pre>
     */
    public java.lang.String getRamSnapId() {
      java.lang.Object ref = ramSnapId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ramSnapId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string ramSnapId = 2;</code>
     *
     * <pre>
     * UUID of the I/Q for the Spectrogram
     * </pre>
     */
    public com.google.protobuf.ByteString
        getRamSnapIdBytes() {
      java.lang.Object ref = ramSnapId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ramSnapId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string spectrogramFile = 3;
    public static final int SPECTROGRAMFILE_FIELD_NUMBER = 3;
    private java.lang.Object spectrogramFile_;
    /**
     * <code>optional string spectrogramFile = 3;</code>
     *
     * <pre>
     * Name of the spectrogram file
     * </pre>
     */
    public boolean hasSpectrogramFile() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string spectrogramFile = 3;</code>
     *
     * <pre>
     * Name of the spectrogram file
     * </pre>
     */
    public java.lang.String getSpectrogramFile() {
      java.lang.Object ref = spectrogramFile_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          spectrogramFile_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string spectrogramFile = 3;</code>
     *
     * <pre>
     * Name of the spectrogram file
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSpectrogramFileBytes() {
      java.lang.Object ref = spectrogramFile_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        spectrogramFile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional double centerFrequencyHz = 4;
    public static final int CENTERFREQUENCYHZ_FIELD_NUMBER = 4;
    private double centerFrequencyHz_;
    /**
     * <code>optional double centerFrequencyHz = 4;</code>
     *
     * <pre>
     * Center Frequency of the Snapshot
     * </pre>
     */
    public boolean hasCenterFrequencyHz() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double centerFrequencyHz = 4;</code>
     *
     * <pre>
     * Center Frequency of the Snapshot
     * </pre>
     */
    public double getCenterFrequencyHz() {
      return centerFrequencyHz_;
    }

    // repeated string labels = 5;
    public static final int LABELS_FIELD_NUMBER = 5;
    private com.google.protobuf.LazyStringList labels_;
    /**
     * <code>repeated string labels = 5;</code>
     *
     * <pre>
     * List of labels
     * </pre>
     */
    public java.util.List<java.lang.String>
        getLabelsList() {
      return labels_;
    }
    /**
     * <code>repeated string labels = 5;</code>
     *
     * <pre>
     * List of labels
     * </pre>
     */
    public int getLabelsCount() {
      return labels_.size();
    }
    /**
     * <code>repeated string labels = 5;</code>
     *
     * <pre>
     * List of labels
     * </pre>
     */
    public java.lang.String getLabels(int index) {
      return labels_.get(index);
    }
    /**
     * <code>repeated string labels = 5;</code>
     *
     * <pre>
     * List of labels
     * </pre>
     */
    public com.google.protobuf.ByteString
        getLabelsBytes(int index) {
      return labels_.getByteString(index);
    }

    // repeated double scores = 6;
    public static final int SCORES_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Double> scores_;
    /**
     * <code>repeated double scores = 6;</code>
     *
     * <pre>
     * List of scores for the corresponding labels
     * </pre>
     */
    public java.util.List<java.lang.Double>
        getScoresList() {
      return scores_;
    }
    /**
     * <code>repeated double scores = 6;</code>
     *
     * <pre>
     * List of scores for the corresponding labels
     * </pre>
     */
    public int getScoresCount() {
      return scores_.size();
    }
    /**
     * <code>repeated double scores = 6;</code>
     *
     * <pre>
     * List of scores for the corresponding labels
     * </pre>
     */
    public double getScores(int index) {
      return scores_.get(index);
    }

    // optional double scoreThreshold = 7;
    public static final int SCORETHRESHOLD_FIELD_NUMBER = 7;
    private double scoreThreshold_;
    /**
     * <code>optional double scoreThreshold = 7;</code>
     *
     * <pre>
     * Score Threshold
     * </pre>
     */
    public boolean hasScoreThreshold() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional double scoreThreshold = 7;</code>
     *
     * <pre>
     * Score Threshold
     * </pre>
     */
    public double getScoreThreshold() {
      return scoreThreshold_;
    }

    private void initFields() {
      msgName_ = "SPECTROGRAM_INFERENCE_RESULT";
      ramSnapId_ = "";
      spectrogramFile_ = "";
      centerFrequencyHz_ = 0D;
      labels_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      scores_ = java.util.Collections.emptyList();
      scoreThreshold_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getMsgNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getRamSnapIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getSpectrogramFileBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, centerFrequencyHz_);
      }
      for (int i = 0; i < labels_.size(); i++) {
        output.writeBytes(5, labels_.getByteString(i));
      }
      for (int i = 0; i < scores_.size(); i++) {
        output.writeDouble(6, scores_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(7, scoreThreshold_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getMsgNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getRamSnapIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getSpectrogramFileBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, centerFrequencyHz_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < labels_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(labels_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getLabelsList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getScoresList().size();
        size += dataSize;
        size += 1 * getScoresList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, scoreThreshold_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ai_inference_msg.SpectrogramInferenceResult}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return fv.protos.kepsvisor.AiInferenceMessages.internal_static_ai_inference_msg_SpectrogramInferenceResult_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return fv.protos.kepsvisor.AiInferenceMessages.internal_static_ai_inference_msg_SpectrogramInferenceResult_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult.class, fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult.Builder.class);
      }

      // Construct using fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        msgName_ = "SPECTROGRAM_INFERENCE_RESULT";
        bitField0_ = (bitField0_ & ~0x00000001);
        ramSnapId_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        spectrogramFile_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        centerFrequencyHz_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        labels_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        scores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        scoreThreshold_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return fv.protos.kepsvisor.AiInferenceMessages.internal_static_ai_inference_msg_SpectrogramInferenceResult_descriptor;
      }

      public fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult getDefaultInstanceForType() {
        return fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult.getDefaultInstance();
      }

      public fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult build() {
        fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult buildPartial() {
        fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult result = new fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.msgName_ = msgName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.ramSnapId_ = ramSnapId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.spectrogramFile_ = spectrogramFile_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.centerFrequencyHz_ = centerFrequencyHz_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          labels_ = new com.google.protobuf.UnmodifiableLazyStringList(
              labels_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.labels_ = labels_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          scores_ = java.util.Collections.unmodifiableList(scores_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.scores_ = scores_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.scoreThreshold_ = scoreThreshold_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult) {
          return mergeFrom((fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult other) {
        if (other == fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult.getDefaultInstance()) return this;
        if (other.hasMsgName()) {
          bitField0_ |= 0x00000001;
          msgName_ = other.msgName_;
          onChanged();
        }
        if (other.hasRamSnapId()) {
          bitField0_ |= 0x00000002;
          ramSnapId_ = other.ramSnapId_;
          onChanged();
        }
        if (other.hasSpectrogramFile()) {
          bitField0_ |= 0x00000004;
          spectrogramFile_ = other.spectrogramFile_;
          onChanged();
        }
        if (other.hasCenterFrequencyHz()) {
          setCenterFrequencyHz(other.getCenterFrequencyHz());
        }
        if (!other.labels_.isEmpty()) {
          if (labels_.isEmpty()) {
            labels_ = other.labels_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureLabelsIsMutable();
            labels_.addAll(other.labels_);
          }
          onChanged();
        }
        if (!other.scores_.isEmpty()) {
          if (scores_.isEmpty()) {
            scores_ = other.scores_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureScoresIsMutable();
            scores_.addAll(other.scores_);
          }
          onChanged();
        }
        if (other.hasScoreThreshold()) {
          setScoreThreshold(other.getScoreThreshold());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (fv.protos.kepsvisor.AiInferenceMessages.SpectrogramInferenceResult) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];
      private java.lang.Object msgName_ = "SPECTROGRAM_INFERENCE_RESULT";
      /**
       * <code>optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];</code>
       */
      public boolean hasMsgName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];</code>
       */
      public java.lang.String getMsgName() {
        java.lang.Object ref = msgName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          msgName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];</code>
       */
      public com.google.protobuf.ByteString
          getMsgNameBytes() {
        java.lang.Object ref = msgName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          msgName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];</code>
       */
      public Builder setMsgName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        msgName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];</code>
       */
      public Builder clearMsgName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        msgName_ = getDefaultInstance().getMsgName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];</code>
       */
      public Builder setMsgNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        msgName_ = value;
        onChanged();
        return this;
      }

      // optional string ramSnapId = 2;
      private java.lang.Object ramSnapId_ = "";
      /**
       * <code>optional string ramSnapId = 2;</code>
       *
       * <pre>
       * UUID of the I/Q for the Spectrogram
       * </pre>
       */
      public boolean hasRamSnapId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string ramSnapId = 2;</code>
       *
       * <pre>
       * UUID of the I/Q for the Spectrogram
       * </pre>
       */
      public java.lang.String getRamSnapId() {
        java.lang.Object ref = ramSnapId_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          ramSnapId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string ramSnapId = 2;</code>
       *
       * <pre>
       * UUID of the I/Q for the Spectrogram
       * </pre>
       */
      public com.google.protobuf.ByteString
          getRamSnapIdBytes() {
        java.lang.Object ref = ramSnapId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ramSnapId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string ramSnapId = 2;</code>
       *
       * <pre>
       * UUID of the I/Q for the Spectrogram
       * </pre>
       */
      public Builder setRamSnapId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        ramSnapId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string ramSnapId = 2;</code>
       *
       * <pre>
       * UUID of the I/Q for the Spectrogram
       * </pre>
       */
      public Builder clearRamSnapId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        ramSnapId_ = getDefaultInstance().getRamSnapId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string ramSnapId = 2;</code>
       *
       * <pre>
       * UUID of the I/Q for the Spectrogram
       * </pre>
       */
      public Builder setRamSnapIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        ramSnapId_ = value;
        onChanged();
        return this;
      }

      // optional string spectrogramFile = 3;
      private java.lang.Object spectrogramFile_ = "";
      /**
       * <code>optional string spectrogramFile = 3;</code>
       *
       * <pre>
       * Name of the spectrogram file
       * </pre>
       */
      public boolean hasSpectrogramFile() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string spectrogramFile = 3;</code>
       *
       * <pre>
       * Name of the spectrogram file
       * </pre>
       */
      public java.lang.String getSpectrogramFile() {
        java.lang.Object ref = spectrogramFile_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          spectrogramFile_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string spectrogramFile = 3;</code>
       *
       * <pre>
       * Name of the spectrogram file
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSpectrogramFileBytes() {
        java.lang.Object ref = spectrogramFile_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          spectrogramFile_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string spectrogramFile = 3;</code>
       *
       * <pre>
       * Name of the spectrogram file
       * </pre>
       */
      public Builder setSpectrogramFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        spectrogramFile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string spectrogramFile = 3;</code>
       *
       * <pre>
       * Name of the spectrogram file
       * </pre>
       */
      public Builder clearSpectrogramFile() {
        bitField0_ = (bitField0_ & ~0x00000004);
        spectrogramFile_ = getDefaultInstance().getSpectrogramFile();
        onChanged();
        return this;
      }
      /**
       * <code>optional string spectrogramFile = 3;</code>
       *
       * <pre>
       * Name of the spectrogram file
       * </pre>
       */
      public Builder setSpectrogramFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        spectrogramFile_ = value;
        onChanged();
        return this;
      }

      // optional double centerFrequencyHz = 4;
      private double centerFrequencyHz_ ;
      /**
       * <code>optional double centerFrequencyHz = 4;</code>
       *
       * <pre>
       * Center Frequency of the Snapshot
       * </pre>
       */
      public boolean hasCenterFrequencyHz() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double centerFrequencyHz = 4;</code>
       *
       * <pre>
       * Center Frequency of the Snapshot
       * </pre>
       */
      public double getCenterFrequencyHz() {
        return centerFrequencyHz_;
      }
      /**
       * <code>optional double centerFrequencyHz = 4;</code>
       *
       * <pre>
       * Center Frequency of the Snapshot
       * </pre>
       */
      public Builder setCenterFrequencyHz(double value) {
        bitField0_ |= 0x00000008;
        centerFrequencyHz_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double centerFrequencyHz = 4;</code>
       *
       * <pre>
       * Center Frequency of the Snapshot
       * </pre>
       */
      public Builder clearCenterFrequencyHz() {
        bitField0_ = (bitField0_ & ~0x00000008);
        centerFrequencyHz_ = 0D;
        onChanged();
        return this;
      }

      // repeated string labels = 5;
      private com.google.protobuf.LazyStringList labels_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureLabelsIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          labels_ = new com.google.protobuf.LazyStringArrayList(labels_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated string labels = 5;</code>
       *
       * <pre>
       * List of labels
       * </pre>
       */
      public java.util.List<java.lang.String>
          getLabelsList() {
        return java.util.Collections.unmodifiableList(labels_);
      }
      /**
       * <code>repeated string labels = 5;</code>
       *
       * <pre>
       * List of labels
       * </pre>
       */
      public int getLabelsCount() {
        return labels_.size();
      }
      /**
       * <code>repeated string labels = 5;</code>
       *
       * <pre>
       * List of labels
       * </pre>
       */
      public java.lang.String getLabels(int index) {
        return labels_.get(index);
      }
      /**
       * <code>repeated string labels = 5;</code>
       *
       * <pre>
       * List of labels
       * </pre>
       */
      public com.google.protobuf.ByteString
          getLabelsBytes(int index) {
        return labels_.getByteString(index);
      }
      /**
       * <code>repeated string labels = 5;</code>
       *
       * <pre>
       * List of labels
       * </pre>
       */
      public Builder setLabels(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureLabelsIsMutable();
        labels_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string labels = 5;</code>
       *
       * <pre>
       * List of labels
       * </pre>
       */
      public Builder addLabels(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureLabelsIsMutable();
        labels_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string labels = 5;</code>
       *
       * <pre>
       * List of labels
       * </pre>
       */
      public Builder addAllLabels(
          java.lang.Iterable<java.lang.String> values) {
        ensureLabelsIsMutable();
        super.addAll(values, labels_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string labels = 5;</code>
       *
       * <pre>
       * List of labels
       * </pre>
       */
      public Builder clearLabels() {
        labels_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string labels = 5;</code>
       *
       * <pre>
       * List of labels
       * </pre>
       */
      public Builder addLabelsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureLabelsIsMutable();
        labels_.add(value);
        onChanged();
        return this;
      }

      // repeated double scores = 6;
      private java.util.List<java.lang.Double> scores_ = java.util.Collections.emptyList();
      private void ensureScoresIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          scores_ = new java.util.ArrayList<java.lang.Double>(scores_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated double scores = 6;</code>
       *
       * <pre>
       * List of scores for the corresponding labels
       * </pre>
       */
      public java.util.List<java.lang.Double>
          getScoresList() {
        return java.util.Collections.unmodifiableList(scores_);
      }
      /**
       * <code>repeated double scores = 6;</code>
       *
       * <pre>
       * List of scores for the corresponding labels
       * </pre>
       */
      public int getScoresCount() {
        return scores_.size();
      }
      /**
       * <code>repeated double scores = 6;</code>
       *
       * <pre>
       * List of scores for the corresponding labels
       * </pre>
       */
      public double getScores(int index) {
        return scores_.get(index);
      }
      /**
       * <code>repeated double scores = 6;</code>
       *
       * <pre>
       * List of scores for the corresponding labels
       * </pre>
       */
      public Builder setScores(
          int index, double value) {
        ensureScoresIsMutable();
        scores_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double scores = 6;</code>
       *
       * <pre>
       * List of scores for the corresponding labels
       * </pre>
       */
      public Builder addScores(double value) {
        ensureScoresIsMutable();
        scores_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double scores = 6;</code>
       *
       * <pre>
       * List of scores for the corresponding labels
       * </pre>
       */
      public Builder addAllScores(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureScoresIsMutable();
        super.addAll(values, scores_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double scores = 6;</code>
       *
       * <pre>
       * List of scores for the corresponding labels
       * </pre>
       */
      public Builder clearScores() {
        scores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // optional double scoreThreshold = 7;
      private double scoreThreshold_ ;
      /**
       * <code>optional double scoreThreshold = 7;</code>
       *
       * <pre>
       * Score Threshold
       * </pre>
       */
      public boolean hasScoreThreshold() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional double scoreThreshold = 7;</code>
       *
       * <pre>
       * Score Threshold
       * </pre>
       */
      public double getScoreThreshold() {
        return scoreThreshold_;
      }
      /**
       * <code>optional double scoreThreshold = 7;</code>
       *
       * <pre>
       * Score Threshold
       * </pre>
       */
      public Builder setScoreThreshold(double value) {
        bitField0_ |= 0x00000040;
        scoreThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double scoreThreshold = 7;</code>
       *
       * <pre>
       * Score Threshold
       * </pre>
       */
      public Builder clearScoreThreshold() {
        bitField0_ = (bitField0_ & ~0x00000040);
        scoreThreshold_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ai_inference_msg.SpectrogramInferenceResult)
    }

    static {
      defaultInstance = new SpectrogramInferenceResult(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ai_inference_msg.SpectrogramInferenceResult)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ai_inference_msg_SpectrogramInferenceResult_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ai_inference_msg_SpectrogramInferenceResult_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031AiInferenceMessages.proto\022\020ai_inferenc" +
      "e_msg\"\312\001\n\032SpectrogramInferenceResult\022-\n\007" +
      "msgName\030\001 \001(\t:\034SPECTROGRAM_INFERENCE_RES" +
      "ULT\022\021\n\tramSnapId\030\002 \001(\t\022\027\n\017spectrogramFil" +
      "e\030\003 \001(\t\022\031\n\021centerFrequencyHz\030\004 \001(\001\022\016\n\006la" +
      "bels\030\005 \003(\t\022\016\n\006scores\030\006 \003(\001\022\026\n\016scoreThres" +
      "hold\030\007 \001(\001B\025\n\023fv.protos.kepsvisor"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_ai_inference_msg_SpectrogramInferenceResult_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_ai_inference_msg_SpectrogramInferenceResult_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ai_inference_msg_SpectrogramInferenceResult_descriptor,
              new java.lang.String[] { "MsgName", "RamSnapId", "SpectrogramFile", "CenterFrequencyHz", "Labels", "Scores", "ScoreThreshold", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
