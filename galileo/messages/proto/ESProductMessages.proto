syntax = "proto2";

// This is the package where the java source code will be placed.
option java_package = "fv.protos.kepsvisor";

////
// Messages used for communicating ES observables and products
//
// In every message, always add the first parameter as:
//    optional string msgName = 1 [default = "MSG_NAME"];
//
// Package used in c and java; python ignores
//
package es_product_msg;

// Include message types from other files
import "FalconCommonMessages.proto";     // contains KeyValuePair
import "FalconExternalsMessages.proto";  // contains HopDescriptor, FSKDescriptor, CWDescriptor, SpreadDescriptor, AVDescriptor, DsssDescriptor


// HEADER

////
// Identifier information for ES Messages
// msgName:         ES_PRODUCT_HEADER, used to identify the message
// esProductID:  unique identifier for this registration, unregistration, and sequence of observables
// globalID:        unique identifier for the emitter that is being collected
// soiNum:          the message SOI parameter (i.e. the number indicating signal type)
// signalName:      human-readable descriptor of signal/capability name/eltex
// sensorName:      name of sensor (i.e. hostname)
// timestamp:       timestamp of message in seconds since epoch
message ESProductHeader
{
    optional string msgName         = 1 [default = "ES_PRODUCT_HEADER"];
    optional string esProductID  = 2;
    optional string globalID        = 3;
    optional string soiNum          = 4;
    optional string signalName      = 5;
    optional string sensorName      = 6;
    optional falcon_common_msg.Timestamp timestamp    = 7;
}



// MAIN MESSAGES SENT IN ESProduct TOPIC

////
// Registration message that should be sent by any passive detector, app, macro, es_product_msg during
// start-up or initialization phase. Once header information is available, this message should be sent.
//
// This message will provide indication of what observables can be generated by this capability
// msgName:             COLLECTION_FRONTEND_PARAMETERS, used to identify the message
// header:              header message providing signal IDs and other general header information
// esObservationsBool:  boolean struct indicating which observables can be produced by this capability
message ESObservablesRegister{
    optional string msgName             = 1 [default = "ES_OBSERVABLES_REGISTER"];
    optional ESProductHeader header  = 2;
    optional ESObservationsBool esObservationsBool  = 3;
}

////
// Deregistration message that should be sent by any passive detector, app, macro, es_product_msg during
// shut-down or completion phase.
//
// This message will provide indication of what observables can be generated by this capability
// msgName:             COLLECTION_FRONTEND_PARAMETERS, used to identify the message
// esProductID:      unique identifier for this registration, unregistration, and sequence of observables
message ESObservablesUnregister{
    optional string msgName         = 1 [default = "ES_OBSERVABLES_UNREGISTER"];
    optional string esProductID  = 2;
}

message ESObservables{
    optional string msgName             = 1 [default = "ES_OBSERVABLES"];
    optional ESProductHeader header  = 2;
    optional ESObservationsTyped esObservationsTyped = 3;
}



// ESOBSERVATIONS MESSAGES

////
// Booleans sent in registration message indicating whether the registered
// product will send that observable.
//
// All booleans should correspond directly to a typed observable in
// ESObservationsTyped
//
message ESObservationsBool {
    optional string msgName                     = 1 [default = "ES_OBSERVATIONS_BOOL"];
    optional bool iqCollectionParameters        = 2;
    optional bool collectionFrontendParameters  = 3;
    optional bool signalEvent                   = 4;
    optional bool gpsPosition                   = 5;
    optional bool esExternalHit                 = 6;
    optional bool esInternalHit                 = 7;
    optional bool fisD                          = 8;
    optional bool sigFrame                      = 9;
    optional bool imageAvailable                = 10;
    optional bool audioAvailable                = 11;
    optional bool dmrMeta                       = 12;

    //List of key value pair labels that may be sent
    repeated string kvpl = 500;
}

////
// Typed values indicating ES observables
//
// Values included should correspond to those indicated in the
// ESObservationsBool included in the registration message
//
message ESObservationsTyped {
    optional string msgName                 = 1 [default = "ES_OBSERVATIONS_BOOL"];
    optional IQCollectionParameters iqCollectionParameters              = 2;
    optional CollectionFrontendParameters collectionFrontendParameters  = 3;
    optional SignalEvent signalEvent        = 4;
    optional GPSPosition gpsPosition        = 5;
    optional ExternalHit externalHit        = 6;
    optional InternalHit internalHit        = 7;
    optional FisD fisD                      = 8;
    optional SIGFrame sigFrame              = 9;
    optional ImageAvailable imageAvailable  = 10;
    optional AudioAvailable audioAvailable  = 11;
    optional DmrMeta dmrMeta                = 12;

    //Key value pairs of other sent observables
    repeated falcon_common_msg.KeyValuePair kvps = 500;
}



// CHILDREN MESSAGES OF ESOBSERVATIONSTYPED

////
// Parameters providing description of IQ raw data collection
// msgName:         COLLECTION_FRONTEND_PARAMETERS, used to identify the message
// centerFreqMHz:   collection center frequency in MHz
// sampleRateMHz:   collection sample rate in MHz
// channel:         collection receiver channel number (from the receiver config)
// timestamp:       timestamp of raw collection in seconds since epoch
message IQCollectionParameters
{
    optional string msgName         = 1 [default = "IQ_COLLECTION_PARAMETERS"];
    optional double centerFreqMHz   = 2;
    optional double sampleRateMHz   = 3;
    optional int32  channel         = 4;
    optional falcon_common_msg.Timestamp timestamp  = 5;
}

////
// Parameters describing front-end setup of IQ raw data collection
// msgName:         COLLECTION_FRONTEND_PARAMETERS, used to identify the message
// antNum:          antenna number in switch used for signal collection (i.e. port number)
// antAz:           antenna azimuth used for detection, in degrees
// antEl:           antenna elevation used for detection, in degrees
// bwMHz:           configured receiver collection bandwidth in MHz
message CollectionFrontendParameters
{
    optional string msgName = 1 [default = "COLLECTION_FRONTEND_PARAMETERS"];
    optional int32  antNum     = 2;
    optional float  antAz      = 3;
    optional float  antEl      = 4;
    optional float  bwMHz      = 5;
}

////
// A new signal has been locked or signal down.  This provides information
// about the active event IDs.
//
// msgName: SIGNAL_EVENT, used to identify the message
// eventType: enumerated type of signal event
// eventID: event ID set by the processing macro
// timestamp: timestamp from UPTIME or DNTIME in seconds since epoch
// rfMHz: if SIGUP, the RFMHZ parameter in MHz
// subcarMHz: if SIGUP, the SCMHZ parameter in MHz
// excurKHz: if SIGUP, the EXKHZ parameter in MHz
// appID: integer indicating the application ID
// scrypt: name of scrypt file
// exportPort: export port, if available
message SignalEvent
{
  enum Type {
    SIGDET     = 0;
    SIGUP      = 1;
    SIGDOWN    = 2;
    SIGTIMEOUT = 3;
  }
  optional string msgName       = 1 [default = "SIGNAL_EVENT"];
  optional Type   eventType     = 2;
  optional string eventID       = 3;
  optional falcon_common_msg.Timestamp timestamp  = 4;
  optional float  rfMHz         = 5;
  optional float  subcarMHz     = 6;
  optional float  excurKHz      = 7;
  optional int32  appID         = 8;
  optional string scrypt        = 9;
  optional int32 exportPort     = 10;
}

////
// Report the GPS position from a signal, assuming WGS 84.
//
// msgName: GPS_POSITION, used to identify the message
// eventID: event ID set by the processing macro
// latitude: latitude position of the emitter in decimal degrees
// longitude: longitude position of the emitter in decimal degrees
// altitude: altitude of the emitter in meters
// wpLatitude: waypoint latitude position of the emitter in decimal degrees
// wpLongitude: waypoint longitude position of the emitter in decimal degrees
// velocity: current velocity of the emitter in meters/sec
// bearing: current relative bearing of the emitter from antenna in decimal degrees
// range: current relative distance to emitter from antenna in meters
// timestamp: timestamp of the GPS point in seconds since epoch
// seqNum: sequence number for GPS ordering
// isPrediction: boolean indicating if the point is a prediction
// major: distance of major axis of uncertainty ellipse in meters
// minor: distance of minor axis of uncertainty ellipse in meters
// vector: azimuthal orientation of uncertainty ellipse in decimal degrees
// appID: integer indicating the application ID
message GPSPosition
{
    optional string msgName         = 1 [default = "GPS_POSITION"];
    optional string eventID         = 2;
    optional float  latitude        = 3;
    optional float  longitude       = 4;
    optional float  altitude        = 5;
    optional float  wpLatitude      = 6;
    optional float  wpLongitude     = 7;
    optional float  velocity        = 8;
    optional float  bearing         = 9;
    optional float  range           = 10;
    optional falcon_common_msg.Timestamp timestamp  = 11;
    optional float  seqNum          = 12;
    optional bool   isPrediction    = 13;
    optional float  major           = 14;
    optional float  minor           = 15;
    optional float  vector          = 16;
    optional int32  appID           = 17;
}

////
// Report the external hit detections generated by detector macros
//
// msgName: EXTERNAL_HIT, used to identify the message
// threatType: enumerated threat type
// centerFreqMHz: center frequency of signal hit in MHz
// pseudoUniqueId: identifier for this external hit
// timestamp: timestamp of signal hit in seconds since epoch
// isTrigger:
// hopDescriptor: metadata specific to frequency hopping signals
// fskDescriptor: metadata specific to frequency-shift key signals
// cwDescriptor: metadata specific to continuous wave signals
// spreadDescriptor: metadata specific to signal spreading
// avDescriptor: metadata specific to analog/video signals
// dsssDescriptor: metadata specific to direct sequence spread spectrum signals
// updateValues:
message ExternalHit
{
    enum Type {
        KNOWN_RED = 0;
        KNOWN_GRAY = 1;
        KNOWN_BLUE = 2;
        UNKNOWN = 3;
        ANOMALY = 4;
    }
    optional string                                msgName           = 1 [default = "EXTERNAL_HIT"];
    optional Type                                  threatType        = 2;
    optional double                                centerFreqMHz     = 3;
    optional int32                                 pseudoUniqueId    = 4;
    optional falcon_common_msg.Timestamp           timestamp         = 5;
    optional bool                                  isTrigger         = 6;
    optional falcon_externals_msg.HopDescriptor    hopDescriptor     = 7;
    optional falcon_externals_msg.FSKDescriptor    fskDescriptor     = 8;
    optional falcon_externals_msg.CWDescriptor     cwDescriptor      = 9;
    optional falcon_externals_msg.SpreadDescriptor spreadDescriptor  = 10;
    optional falcon_externals_msg.AVDescriptor     avDescriptor      = 11;
    optional falcon_externals_msg.DsssDescriptor   dsssDescriptor    = 12;
    optional int32                                 updateValues      = 13;
}

////
// Report the internal hit detections generated by detector macros
//
// msgName: INTERNAL_HIT, used to identify the message
// centerFreqMHz: center frequency of signal hit in MHz
// pseudoUniqueId: identifier for this external hit
// timestamp: timestamp of signal hit in seconds since epoch
// isTrigger:
// hopDescriptor: metadata specific to frequency hopping signals
// fskDescriptor: metadata specific to frequency-shift key signals
// cwDescriptor: metadata specific to continuous wave signals
// spreadDescriptor: metadata specific to signal spreading
// avDescriptor: metadata specific to analog/video signals
// dsssDescriptor: metadata specific to direct sequence spread spectrum signals
// updateValues:
message InternalHit
{
    optional string                                msgName           = 1 [default = "INTERNAL_HIT"];
    optional double                                centerFreqMHz     = 2;
    optional int32                                 pseudoUniqueId    = 3;
    optional falcon_common_msg.Timestamp           timestamp         = 4;
    optional bool                                  isTrigger         = 5;
    optional falcon_externals_msg.HopDescriptor    hopDescriptor     = 6;
    optional falcon_externals_msg.FSKDescriptor    fskDescriptor     = 7;
    optional falcon_externals_msg.CWDescriptor     cwDescriptor      = 8;
    optional falcon_externals_msg.SpreadDescriptor spreadDescriptor  = 9;
    optional falcon_externals_msg.AVDescriptor     avDescriptor      = 10;
    optional falcon_externals_msg.DsssDescriptor   dsssDescriptor    = 11;
    optional int32                                 updateValues      = 12;
}

// This message contains information on a FIS signal.
//
// msgName: FIS_D, used to identify the message
// fileType: enumerated type of file included
// fileName: name of included file
// file: file contents in bytes
// eventID: event ID set by the processing macro
message FisD
{
    enum FileType {
        FS = 0; // FS (frame sync data) file
        TC = 1; // timecode file
        BER = 2; // BER file
    }

    optional string msgName     = 1 [default = "FIS_D"];
    optional FileType fileType  = 2;
    optional string fileName    = 3;
    optional bytes file         = 4;
    optional string eventID     = 5;

}

////
// This message contains a frame of processed data. It also has some header
// information in it for follow-on message reads
//
// msgName: SIG_FRAME, used to identify the message
// signalID: signal ID of the frame
// timestamp: timestamp of the start of the frame in seconds since epoch
// duration: duration in seconds of the frame
// centerFreqMHz: center frequency of the frame in MHz
// centerFreqOffsetHz: offset from the above center frequency in Hz
// sampleRate: sample rate prior to bit synch
// bandwidth: The bandwidth of the signal prior to demod
// power: power of the frame prior to demod
// ber: bit error rate of the frame if available
// frameLength: length of the frame in bytes
// frame: the byte-packed frame of binary data
// tailID: if available, a pseudo-id for the SoI
message SIGFrame {
    optional string msgName             = 1 [default = "SIG_FRAME"];
    optional string signalID            = 2;
    optional falcon_common_msg.Timestamp timestamp  = 3;
    optional double duration            = 4;
    optional double centerFreqMHz       = 5;
    optional double centerFreqOffsetHz  = 6;
    optional double sampleRate          = 7;
    optional double bandwidth           = 8;
    optional double power               = 9;
    optional double ber                 = 10;
    optional int32 frameLength          = 11;
    optional bytes frame                = 12;
    optional int32 tailID               = 13;
}

////
// This message provides a notification of an image's availability. Images can be sent
// as broken-down frames from a streaming video
//
// msgName: IMAGE_AVAILABLE, used to identify the message
// imageWidth: width of image
// imageHeight height of image
// videoPort: in case of streaming video, video output port to use for ZPipe
// frameRate: in case of streaming video, frame rate of video in frames per second
// byteArray: byte-packed data of image
// status: status of image availability
// msgID: identifier for this message; can be used for return messages
// eventID: event ID set by the processing macro
message ImageAvailable
{
  enum Status {
    AVAILABLE = -1;
    UNAVAILABLE = 0;
    PENDING = 1;
  }

  optional string msgName       = 1 [default = "IMAGE_AVAILABLE"];
  optional int32  imageWidth    = 2;
  optional int32  imageHeight   = 3;
  optional int32  videoPort     = 4;
  optional int32  framerate     = 5;
  optional bytes  byteArray     = 6;
  optional Status status        = 7;
  optional int32  msgID         = 8;
  optional string eventID       = 9;
}

////
// This message provides a notification of an audio file's availability
//
// msgName: AUDIO_AVAILABLE, used to identify the message
// centerFreqMHz: center frequency of audio in MHz
// status: status of audio file availability
// audiofile: full path to audio file
// msgID: identifier for this message; can be used for return messages
// eventID: event ID set by the processing macro
message AudioAvailable
{
  enum Status {
    AVAILABLE = -1;
    UNAVAILABLE = 0;
    PENDING = 1;
  }

  optional string msgName       = 1 [default = "AUDIO_AVAILABLE"];
  optional double centerFreqMHz = 2;
  optional Status status        = 3;
  optional string audiofile     = 4;
  optional int32  msgID         = 5;
  optional string soiNum        = 6;
}

////
// This message contains metadata specific to a DMR signal
//
// msgName: DMR_META, used to identify the message
// centerFreqMHz: center frequency of signal in MHz
// srcType: description of type of source emitter (e.g. base station or mobile station)
// srcAddr: address/radio ID of source emitter
// destType: description of type of destination emitter (e.g. base station or mobile station)
// destAddr: address/radio ID of destination emitter
// timeSlot: timeslot that is being transmitted
// callType: type of call occurring (e.g. Voice Call or Text/Data/UNK)
// colorCode: DMR color code indicating transmission channel
// text: data message as string
// geo: reported position
message DmrMeta {
    optional string msgName         = 1 [default = "DMR_META"];
    optional double centerFreqMHz   = 2;
    optional string srcType         = 3;
    optional int32 srcAddr          = 4;
    optional string destType        = 5;
    optional int32 destAddr         = 6;
    optional int32 timeSlot         = 7;
    optional string callType        = 8;
    optional int32 colorCode        = 9;
    optional string text            = 10;
    optional falcon_common_msg.GeodeticPosition geo = 11;
}
