// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DebugMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DebugMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace falcon_debug_msg {

namespace {

const ::google::protobuf::Descriptor* Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Warning_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Warning_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DebugMessages_2eproto() {
  protobuf_AddDesc_DebugMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DebugMessages.proto");
  GOOGLE_CHECK(file != NULL);
  Info_descriptor_ = file->message_type(0);
  static const int Info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, reporter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, msg_),
  };
  Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Info_descriptor_,
      Info::default_instance_,
      Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Info));
  Warning_descriptor_ = file->message_type(1);
  static const int Warning_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warning, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warning, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warning, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warning, reporter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warning, msg_),
  };
  Warning_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Warning_descriptor_,
      Warning::default_instance_,
      Warning_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warning, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warning, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Warning));
  Error_descriptor_ = file->message_type(2);
  static const int Error_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, reporter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, fatal_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DebugMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Info_descriptor_, &Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Warning_descriptor_, &Warning::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DebugMessages_2eproto() {
  delete Info::default_instance_;
  delete Info_reflection_;
  delete Info::_default_msgname_;
  delete Info::_default_hostname_;
  delete Warning::default_instance_;
  delete Warning_reflection_;
  delete Warning::_default_msgname_;
  delete Warning::_default_hostname_;
  delete Error::default_instance_;
  delete Error_reflection_;
  delete Error::_default_msgname_;
  delete Error::_default_hostname_;
}

void protobuf_AddDesc_DebugMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023DebugMessages.proto\022\020falcon_debug_msg\""
    "l\n\004Info\022\025\n\007msgName\030\001 \001(\t:\004INFO\022\033\n\010hostna"
    "me\030\n \001(\t:\tlocalhost\022\021\n\ttimestamp\030\024 \001(\t\022\020"
    "\n\010reporter\030\036 \001(\t\022\013\n\003msg\030\037 \001(\t\"r\n\007Warning"
    "\022\030\n\007msgName\030\001 \001(\t:\007WARNING\022\033\n\010hostname\030\n"
    " \001(\t:\tlocalhost\022\021\n\ttimestamp\030\024 \001(\t\022\020\n\010re"
    "porter\030\036 \001(\t\022\013\n\003msg\030\037 \001(\t\"}\n\005Error\022\026\n\007ms"
    "gName\030\001 \001(\t:\005ERROR\022\033\n\010hostname\030\n \001(\t:\tlo"
    "calhost\022\021\n\ttimestamp\030\024 \001(\t\022\020\n\010reporter\030\036"
    " \001(\t\022\013\n\003msg\030\037 \001(\t\022\r\n\005fatal\030  \001(\010B\025\n\023fv.p"
    "rotos.kepsvisor", 415);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DebugMessages.proto", &protobuf_RegisterTypes);
  Info::_default_msgname_ =
      new ::std::string("INFO", 4);
  Info::_default_hostname_ =
      new ::std::string("localhost", 9);
  Info::default_instance_ = new Info();
  Warning::_default_msgname_ =
      new ::std::string("WARNING", 7);
  Warning::_default_hostname_ =
      new ::std::string("localhost", 9);
  Warning::default_instance_ = new Warning();
  Error::_default_msgname_ =
      new ::std::string("ERROR", 5);
  Error::_default_hostname_ =
      new ::std::string("localhost", 9);
  Error::default_instance_ = new Error();
  Info::default_instance_->InitAsDefaultInstance();
  Warning::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DebugMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DebugMessages_2eproto {
  StaticDescriptorInitializer_DebugMessages_2eproto() {
    protobuf_AddDesc_DebugMessages_2eproto();
  }
} static_descriptor_initializer_DebugMessages_2eproto_;

// ===================================================================

::std::string* Info::_default_msgname_ = NULL;
::std::string* Info::_default_hostname_ = NULL;
#ifndef _MSC_VER
const int Info::kMsgNameFieldNumber;
const int Info::kHostnameFieldNumber;
const int Info::kTimestampFieldNumber;
const int Info::kReporterFieldNumber;
const int Info::kMsgFieldNumber;
#endif  // !_MSC_VER

Info::Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Info::InitAsDefaultInstance() {
}

Info::Info(const Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Info::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  hostname_ = const_cast< ::std::string*>(_default_hostname_);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reporter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Info::~Info() {
  SharedDtor();
}

void Info::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (hostname_ != _default_hostname_) {
    delete hostname_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (reporter_ != &::google::protobuf::internal::kEmptyString) {
    delete reporter_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Info_descriptor_;
}

const Info& Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DebugMessages_2eproto();
  return *default_instance_;
}

Info* Info::default_instance_ = NULL;

Info* Info::New() const {
  return new Info;
}

void Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_hostname()) {
      if (hostname_ != _default_hostname_) {
        hostname_->assign(*_default_hostname_);
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    if (has_reporter()) {
      if (reporter_ != &::google::protobuf::internal::kEmptyString) {
        reporter_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "INFO"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hostname;
        break;
      }

      // optional string hostname = 10 [default = "localhost"];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_reporter;
        break;
      }

      // optional string reporter = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reporter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reporter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reporter().data(), this->reporter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_msg;
        break;
      }

      // optional string msg = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "INFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string hostname = 10 [default = "localhost"];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->hostname(), output);
  }

  // optional string timestamp = 20;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->timestamp(), output);
  }

  // optional string reporter = 30;
  if (has_reporter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reporter().data(), this->reporter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->reporter(), output);
  }

  // optional string msg = 31;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "INFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string hostname = 10 [default = "localhost"];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->hostname(), target);
  }

  // optional string timestamp = 20;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->timestamp(), target);
  }

  // optional string reporter = 30;
  if (has_reporter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reporter().data(), this->reporter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->reporter(), target);
  }

  // optional string msg = 31;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "INFO"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string hostname = 10 [default = "localhost"];
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string timestamp = 20;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional string reporter = 30;
    if (has_reporter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reporter());
    }

    // optional string msg = 31;
    if (has_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Info::MergeFrom(const Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_reporter()) {
      set_reporter(from.reporter());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info::CopyFrom(const Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info::IsInitialized() const {

  return true;
}

void Info::Swap(Info* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(hostname_, other->hostname_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(reporter_, other->reporter_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Info_descriptor_;
  metadata.reflection = Info_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Warning::_default_msgname_ = NULL;
::std::string* Warning::_default_hostname_ = NULL;
#ifndef _MSC_VER
const int Warning::kMsgNameFieldNumber;
const int Warning::kHostnameFieldNumber;
const int Warning::kTimestampFieldNumber;
const int Warning::kReporterFieldNumber;
const int Warning::kMsgFieldNumber;
#endif  // !_MSC_VER

Warning::Warning()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Warning::InitAsDefaultInstance() {
}

Warning::Warning(const Warning& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Warning::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  hostname_ = const_cast< ::std::string*>(_default_hostname_);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reporter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Warning::~Warning() {
  SharedDtor();
}

void Warning::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (hostname_ != _default_hostname_) {
    delete hostname_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (reporter_ != &::google::protobuf::internal::kEmptyString) {
    delete reporter_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void Warning::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Warning::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Warning_descriptor_;
}

const Warning& Warning::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DebugMessages_2eproto();
  return *default_instance_;
}

Warning* Warning::default_instance_ = NULL;

Warning* Warning::New() const {
  return new Warning;
}

void Warning::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_hostname()) {
      if (hostname_ != _default_hostname_) {
        hostname_->assign(*_default_hostname_);
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    if (has_reporter()) {
      if (reporter_ != &::google::protobuf::internal::kEmptyString) {
        reporter_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Warning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "WARNING"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hostname;
        break;
      }

      // optional string hostname = 10 [default = "localhost"];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_reporter;
        break;
      }

      // optional string reporter = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reporter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reporter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reporter().data(), this->reporter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_msg;
        break;
      }

      // optional string msg = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Warning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "WARNING"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string hostname = 10 [default = "localhost"];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->hostname(), output);
  }

  // optional string timestamp = 20;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->timestamp(), output);
  }

  // optional string reporter = 30;
  if (has_reporter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reporter().data(), this->reporter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->reporter(), output);
  }

  // optional string msg = 31;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Warning::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "WARNING"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string hostname = 10 [default = "localhost"];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->hostname(), target);
  }

  // optional string timestamp = 20;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->timestamp(), target);
  }

  // optional string reporter = 30;
  if (has_reporter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reporter().data(), this->reporter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->reporter(), target);
  }

  // optional string msg = 31;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Warning::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "WARNING"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string hostname = 10 [default = "localhost"];
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string timestamp = 20;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional string reporter = 30;
    if (has_reporter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reporter());
    }

    // optional string msg = 31;
    if (has_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Warning::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Warning* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Warning*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Warning::MergeFrom(const Warning& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_reporter()) {
      set_reporter(from.reporter());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Warning::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Warning::CopyFrom(const Warning& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Warning::IsInitialized() const {

  return true;
}

void Warning::Swap(Warning* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(hostname_, other->hostname_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(reporter_, other->reporter_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Warning::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Warning_descriptor_;
  metadata.reflection = Warning_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Error::_default_msgname_ = NULL;
::std::string* Error::_default_hostname_ = NULL;
#ifndef _MSC_VER
const int Error::kMsgNameFieldNumber;
const int Error::kHostnameFieldNumber;
const int Error::kTimestampFieldNumber;
const int Error::kReporterFieldNumber;
const int Error::kMsgFieldNumber;
const int Error::kFatalFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  hostname_ = const_cast< ::std::string*>(_default_hostname_);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reporter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fatal_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  SharedDtor();
}

void Error::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (hostname_ != _default_hostname_) {
    delete hostname_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (reporter_ != &::google::protobuf::internal::kEmptyString) {
    delete reporter_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DebugMessages_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_hostname()) {
      if (hostname_ != _default_hostname_) {
        hostname_->assign(*_default_hostname_);
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    if (has_reporter()) {
      if (reporter_ != &::google::protobuf::internal::kEmptyString) {
        reporter_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    fatal_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ERROR"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hostname;
        break;
      }

      // optional string hostname = 10 [default = "localhost"];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_reporter;
        break;
      }

      // optional string reporter = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reporter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reporter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reporter().data(), this->reporter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_msg;
        break;
      }

      // optional string msg = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_fatal;
        break;
      }

      // optional bool fatal = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fatal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fatal_)));
          set_has_fatal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ERROR"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string hostname = 10 [default = "localhost"];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->hostname(), output);
  }

  // optional string timestamp = 20;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->timestamp(), output);
  }

  // optional string reporter = 30;
  if (has_reporter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reporter().data(), this->reporter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->reporter(), output);
  }

  // optional string msg = 31;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->msg(), output);
  }

  // optional bool fatal = 32;
  if (has_fatal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->fatal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ERROR"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string hostname = 10 [default = "localhost"];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->hostname(), target);
  }

  // optional string timestamp = 20;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->timestamp(), target);
  }

  // optional string reporter = 30;
  if (has_reporter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reporter().data(), this->reporter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->reporter(), target);
  }

  // optional string msg = 31;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->msg(), target);
  }

  // optional bool fatal = 32;
  if (has_fatal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->fatal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ERROR"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string hostname = 10 [default = "localhost"];
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string timestamp = 20;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional string reporter = 30;
    if (has_reporter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reporter());
    }

    // optional string msg = 31;
    if (has_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional bool fatal = 32;
    if (has_fatal()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_reporter()) {
      set_reporter(from.reporter());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_fatal()) {
      set_fatal(from.fatal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(hostname_, other->hostname_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(reporter_, other->reporter_);
    std::swap(msg_, other->msg_);
    std::swap(fatal_, other->fatal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace falcon_debug_msg

// @@protoc_insertion_point(global_scope)
