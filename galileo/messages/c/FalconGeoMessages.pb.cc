// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FalconGeoMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FalconGeoMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace falcon_geo_msg {

namespace {

const ::google::protobuf::Descriptor* CSNAP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSNAP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeoSnapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoSnapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeoSnapDone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoSnapDone_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSNAPQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSNAPQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeoSnapQuitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoSnapQuitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeoBurstDone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoBurstDone_reflection_ = NULL;
const ::google::protobuf::Descriptor* GSNAP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GSNAP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeoProcessDone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoProcessDone_reflection_ = NULL;
const ::google::protobuf::Descriptor* GEO_EXIT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GEO_EXIT_reflection_ = NULL;
const ::google::protobuf::Descriptor* GEO_RESET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GEO_RESET_reflection_ = NULL;
const ::google::protobuf::Descriptor* WifiTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WifiTest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FalconGeoMessages_2eproto() {
  protobuf_AddDesc_FalconGeoMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FalconGeoMessages.proto");
  GOOGLE_CHECK(file != NULL);
  CSNAP_descriptor_ = file->message_type(0);
  static const int CSNAP_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAP, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAP, start_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAP, start_fsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAP, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAP, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAP, az_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAP, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAP, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAP, soi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAP, unit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAP, message_id_),
  };
  CSNAP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSNAP_descriptor_,
      CSNAP::default_instance_,
      CSNAP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSNAP));
  GeoSnapResponse_descriptor_ = file->message_type(1);
  static const int GeoSnapResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapResponse, ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapResponse, message_id_),
  };
  GeoSnapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoSnapResponse_descriptor_,
      GeoSnapResponse::default_instance_,
      GeoSnapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoSnapResponse));
  GeoSnapDone_descriptor_ = file->message_type(2);
  static const int GeoSnapDone_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapDone, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapDone, start_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapDone, start_fsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapDone, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapDone, chan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapDone, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapDone, soi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapDone, unit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapDone, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapDone, meta_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapDone, message_id_),
  };
  GeoSnapDone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoSnapDone_descriptor_,
      GeoSnapDone::default_instance_,
      GeoSnapDone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapDone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapDone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoSnapDone));
  CSNAPQ_descriptor_ = file->message_type(3);
  static const int CSNAPQ_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAPQ, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAPQ, chan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAPQ, message_id_),
  };
  CSNAPQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSNAPQ_descriptor_,
      CSNAPQ::default_instance_,
      CSNAPQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAPQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNAPQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSNAPQ));
  GeoSnapQuitResponse_descriptor_ = file->message_type(4);
  static const int GeoSnapQuitResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapQuitResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapQuitResponse, ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapQuitResponse, chan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapQuitResponse, message_id_),
  };
  GeoSnapQuitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoSnapQuitResponse_descriptor_,
      GeoSnapQuitResponse::default_instance_,
      GeoSnapQuitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapQuitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapQuitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoSnapQuitResponse));
  GeoBurstDone_descriptor_ = file->message_type(5);
  static const int GeoBurstDone_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoBurstDone, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoBurstDone, meta_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoBurstDone, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoBurstDone, chan_),
  };
  GeoBurstDone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoBurstDone_descriptor_,
      GeoBurstDone::default_instance_,
      GeoBurstDone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoBurstDone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoBurstDone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoBurstDone));
  GSNAP_descriptor_ = file->message_type(6);
  static const int GSNAP_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSNAP, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSNAP, chan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSNAP, start_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSNAP, start_fsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSNAP, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSNAP, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSNAP, sample_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSNAP, track_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSNAP, soi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSNAP, message_id_),
  };
  GSNAP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GSNAP_descriptor_,
      GSNAP::default_instance_,
      GSNAP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSNAP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSNAP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GSNAP));
  GeoProcessDone_descriptor_ = file->message_type(7);
  static const int GeoProcessDone_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoProcessDone, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoProcessDone, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoProcessDone, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoProcessDone, message_id_),
  };
  GeoProcessDone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoProcessDone_descriptor_,
      GeoProcessDone::default_instance_,
      GeoProcessDone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoProcessDone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoProcessDone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoProcessDone));
  GEO_EXIT_descriptor_ = file->message_type(8);
  static const int GEO_EXIT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GEO_EXIT, msgname_),
  };
  GEO_EXIT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GEO_EXIT_descriptor_,
      GEO_EXIT::default_instance_,
      GEO_EXIT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GEO_EXIT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GEO_EXIT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GEO_EXIT));
  GEO_RESET_descriptor_ = file->message_type(9);
  static const int GEO_RESET_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GEO_RESET, msgname_),
  };
  GEO_RESET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GEO_RESET_descriptor_,
      GEO_RESET::default_instance_,
      GEO_RESET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GEO_RESET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GEO_RESET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GEO_RESET));
  WifiTest_descriptor_ = file->message_type(10);
  static const int WifiTest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiTest, msgname_),
  };
  WifiTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WifiTest_descriptor_,
      WifiTest::default_instance_,
      WifiTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WifiTest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FalconGeoMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSNAP_descriptor_, &CSNAP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoSnapResponse_descriptor_, &GeoSnapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoSnapDone_descriptor_, &GeoSnapDone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSNAPQ_descriptor_, &CSNAPQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoSnapQuitResponse_descriptor_, &GeoSnapQuitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoBurstDone_descriptor_, &GeoBurstDone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GSNAP_descriptor_, &GSNAP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoProcessDone_descriptor_, &GeoProcessDone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GEO_EXIT_descriptor_, &GEO_EXIT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GEO_RESET_descriptor_, &GEO_RESET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WifiTest_descriptor_, &WifiTest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FalconGeoMessages_2eproto() {
  delete CSNAP::default_instance_;
  delete CSNAP_reflection_;
  delete CSNAP::_default_msgname_;
  delete GeoSnapResponse::default_instance_;
  delete GeoSnapResponse_reflection_;
  delete GeoSnapResponse::_default_msgname_;
  delete GeoSnapDone::default_instance_;
  delete GeoSnapDone_reflection_;
  delete GeoSnapDone::_default_msgname_;
  delete CSNAPQ::default_instance_;
  delete CSNAPQ_reflection_;
  delete CSNAPQ::_default_msgname_;
  delete GeoSnapQuitResponse::default_instance_;
  delete GeoSnapQuitResponse_reflection_;
  delete GeoSnapQuitResponse::_default_msgname_;
  delete GeoBurstDone::default_instance_;
  delete GeoBurstDone_reflection_;
  delete GeoBurstDone::_default_msgname_;
  delete GSNAP::default_instance_;
  delete GSNAP_reflection_;
  delete GSNAP::_default_msgname_;
  delete GeoProcessDone::default_instance_;
  delete GeoProcessDone_reflection_;
  delete GeoProcessDone::_default_msgname_;
  delete GEO_EXIT::default_instance_;
  delete GEO_EXIT_reflection_;
  delete GEO_EXIT::_default_msgname_;
  delete GEO_RESET::default_instance_;
  delete GEO_RESET_reflection_;
  delete GEO_RESET::_default_msgname_;
  delete WifiTest::default_instance_;
  delete WifiTest_reflection_;
  delete WifiTest::_default_msgname_;
}

void protobuf_AddDesc_FalconGeoMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::falcon_common_msg::protobuf_AddDesc_FalconCommonMessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027FalconGeoMessages.proto\022\016falcon_geo_ms"
    "g\032\032FalconCommonMessages.proto\"\274\001\n\005CSNAP\022"
    "\026\n\007msgName\030\001 \001(\t:\005CSNAP\022\021\n\tstart_sec\030\002 \001"
    "(\001\022\022\n\nstart_fsec\030\003 \001(\001\022\n\n\002cf\030\004 \001(\002\022\020\n\010du"
    "ration\030\005 \001(\002\022\n\n\002az\030\006 \001(\005\022\013\n\003lat\030\007 \001(\002\022\013\n"
    "\003lon\030\010 \001(\002\022\013\n\003soi\030\t \001(\t\022\017\n\007unit_id\030\n \001(\t"
    "\022\022\n\nmessage_id\030\013 \001(\001\"V\n\017GeoSnapResponse\022"
    "\"\n\007msgName\030\001 \001(\t:\021GEO_SNAP_RESPONSE\022\013\n\003a"
    "ck\030\002 \001(\005\022\022\n\nmessage_id\030\003 \001(\001\"\333\001\n\013GeoSnap"
    "Done\022\036\n\007msgName\030\001 \001(\t:\rGEO_SNAP_DONE\022\021\n\t"
    "start_sec\030\002 \001(\001\022\022\n\nstart_fsec\030\003 \001(\001\022\020\n\010d"
    "uration\030\004 \001(\002\022\014\n\004chan\030\005 \001(\005\022\n\n\002cf\030\006 \001(\002\022"
    "\013\n\003soi\030\007 \001(\t\022\017\n\007unit_id\030\010 \001(\t\022\020\n\010filenam"
    "e\030\t \001(\t\022\025\n\rmeta_filename\030\n \001(\t\022\022\n\nmessag"
    "e_id\030\013 \001(\001\"C\n\006CSNAPQ\022\027\n\007msgName\030\001 \001(\t:\006C"
    "SNAPQ\022\014\n\004chan\030\002 \001(\005\022\022\n\nmessage_id\030\003 \001(\001\""
    "m\n\023GeoSnapQuitResponse\022\'\n\007msgName\030\001 \001(\t:"
    "\026GEO_SNAP_QUIT_RESPONSE\022\013\n\003ack\030\002 \001(\005\022\014\n\004"
    "chan\030\003 \001(\005\022\022\n\nmessage_id\030\004 \001(\001\"h\n\014GeoBur"
    "stDone\022\037\n\007msgName\030\001 \001(\t:\016GEO_BURST_DONE\022"
    "\025\n\rmeta_filename\030\002 \001(\t\022\022\n\nmessage_id\030\003 \001"
    "(\005\022\014\n\004chan\030\004 \001(\t\"\300\001\n\005GSNAP\022\026\n\007msgName\030\001 "
    "\001(\t:\005GSNAP\022\014\n\004chan\030\003 \001(\005\022\021\n\tstart_sec\030\004 "
    "\001(\001\022\022\n\nstart_fsec\030\005 \001(\001\022\020\n\010duration\030\006 \001("
    "\005\022\014\n\004freq\030\007 \001(\002\022\023\n\013sample_rate\030\010 \001(\002\022\024\n\014"
    "track_number\030\t \001(\005\022\013\n\003soi\030\n \001(\t\022\022\n\nmessa"
    "ge_id\030\013 \001(\001\"j\n\016GeoProcessDone\022!\n\007msgName"
    "\030\001 \001(\t:\020GEO_PROCESS_DONE\022\017\n\007success\030\003 \001("
    "\005\022\020\n\010filename\030\004 \001(\t\022\022\n\nmessage_id\030\005 \001(\001\""
    "%\n\010GEO_EXIT\022\031\n\007msgName\030\001 \001(\t:\010GEO_EXIT\"\'"
    "\n\tGEO_RESET\022\032\n\007msgName\030\001 \001(\t:\tGEO_RESET\""
    "&\n\010WifiTest\022\032\n\007msgName\030\001 \001(\t:\tWIFI_TESTB"
    "\025\n\023fv.protos.kepsvisor", 1302);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FalconGeoMessages.proto", &protobuf_RegisterTypes);
  CSNAP::_default_msgname_ =
      new ::std::string("CSNAP", 5);
  CSNAP::default_instance_ = new CSNAP();
  GeoSnapResponse::_default_msgname_ =
      new ::std::string("GEO_SNAP_RESPONSE", 17);
  GeoSnapResponse::default_instance_ = new GeoSnapResponse();
  GeoSnapDone::_default_msgname_ =
      new ::std::string("GEO_SNAP_DONE", 13);
  GeoSnapDone::default_instance_ = new GeoSnapDone();
  CSNAPQ::_default_msgname_ =
      new ::std::string("CSNAPQ", 6);
  CSNAPQ::default_instance_ = new CSNAPQ();
  GeoSnapQuitResponse::_default_msgname_ =
      new ::std::string("GEO_SNAP_QUIT_RESPONSE", 22);
  GeoSnapQuitResponse::default_instance_ = new GeoSnapQuitResponse();
  GeoBurstDone::_default_msgname_ =
      new ::std::string("GEO_BURST_DONE", 14);
  GeoBurstDone::default_instance_ = new GeoBurstDone();
  GSNAP::_default_msgname_ =
      new ::std::string("GSNAP", 5);
  GSNAP::default_instance_ = new GSNAP();
  GeoProcessDone::_default_msgname_ =
      new ::std::string("GEO_PROCESS_DONE", 16);
  GeoProcessDone::default_instance_ = new GeoProcessDone();
  GEO_EXIT::_default_msgname_ =
      new ::std::string("GEO_EXIT", 8);
  GEO_EXIT::default_instance_ = new GEO_EXIT();
  GEO_RESET::_default_msgname_ =
      new ::std::string("GEO_RESET", 9);
  GEO_RESET::default_instance_ = new GEO_RESET();
  WifiTest::_default_msgname_ =
      new ::std::string("WIFI_TEST", 9);
  WifiTest::default_instance_ = new WifiTest();
  CSNAP::default_instance_->InitAsDefaultInstance();
  GeoSnapResponse::default_instance_->InitAsDefaultInstance();
  GeoSnapDone::default_instance_->InitAsDefaultInstance();
  CSNAPQ::default_instance_->InitAsDefaultInstance();
  GeoSnapQuitResponse::default_instance_->InitAsDefaultInstance();
  GeoBurstDone::default_instance_->InitAsDefaultInstance();
  GSNAP::default_instance_->InitAsDefaultInstance();
  GeoProcessDone::default_instance_->InitAsDefaultInstance();
  GEO_EXIT::default_instance_->InitAsDefaultInstance();
  GEO_RESET::default_instance_->InitAsDefaultInstance();
  WifiTest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FalconGeoMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FalconGeoMessages_2eproto {
  StaticDescriptorInitializer_FalconGeoMessages_2eproto() {
    protobuf_AddDesc_FalconGeoMessages_2eproto();
  }
} static_descriptor_initializer_FalconGeoMessages_2eproto_;

// ===================================================================

::std::string* CSNAP::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int CSNAP::kMsgNameFieldNumber;
const int CSNAP::kStartSecFieldNumber;
const int CSNAP::kStartFsecFieldNumber;
const int CSNAP::kCfFieldNumber;
const int CSNAP::kDurationFieldNumber;
const int CSNAP::kAzFieldNumber;
const int CSNAP::kLatFieldNumber;
const int CSNAP::kLonFieldNumber;
const int CSNAP::kSoiFieldNumber;
const int CSNAP::kUnitIdFieldNumber;
const int CSNAP::kMessageIdFieldNumber;
#endif  // !_MSC_VER

CSNAP::CSNAP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSNAP::InitAsDefaultInstance() {
}

CSNAP::CSNAP(const CSNAP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSNAP::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  start_sec_ = 0;
  start_fsec_ = 0;
  cf_ = 0;
  duration_ = 0;
  az_ = 0;
  lat_ = 0;
  lon_ = 0;
  soi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unit_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSNAP::~CSNAP() {
  SharedDtor();
}

void CSNAP::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (soi_ != &::google::protobuf::internal::kEmptyString) {
    delete soi_;
  }
  if (unit_id_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_id_;
  }
  if (this != default_instance_) {
  }
}

void CSNAP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSNAP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSNAP_descriptor_;
}

const CSNAP& CSNAP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconGeoMessages_2eproto();
  return *default_instance_;
}

CSNAP* CSNAP::default_instance_ = NULL;

CSNAP* CSNAP::New() const {
  return new CSNAP;
}

void CSNAP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    start_sec_ = 0;
    start_fsec_ = 0;
    cf_ = 0;
    duration_ = 0;
    az_ = 0;
    lat_ = 0;
    lon_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_soi()) {
      if (soi_ != &::google::protobuf::internal::kEmptyString) {
        soi_->clear();
      }
    }
    if (has_unit_id()) {
      if (unit_id_ != &::google::protobuf::internal::kEmptyString) {
        unit_id_->clear();
      }
    }
    message_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSNAP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "CSNAP"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_start_sec;
        break;
      }

      // optional double start_sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_sec_)));
          set_has_start_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_start_fsec;
        break;
      }

      // optional double start_fsec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start_fsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_fsec_)));
          set_has_start_fsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_cf;
        break;
      }

      // optional float cf = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cf_)));
          set_has_cf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_duration;
        break;
      }

      // optional float duration = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_az;
        break;
      }

      // optional int32 az = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_az:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &az_)));
          set_has_az();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_lat;
        break;
      }

      // optional float lat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_lon;
        break;
      }

      // optional float lon = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_soi;
        break;
      }

      // optional string soi = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soi().data(), this->soi().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_unit_id;
        break;
      }

      // optional string unit_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unit_id().data(), this->unit_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_message_id;
        break;
      }

      // optional double message_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSNAP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "CSNAP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double start_sec = 2;
  if (has_start_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_sec(), output);
  }

  // optional double start_fsec = 3;
  if (has_start_fsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->start_fsec(), output);
  }

  // optional float cf = 4;
  if (has_cf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cf(), output);
  }

  // optional float duration = 5;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->duration(), output);
  }

  // optional int32 az = 6;
  if (has_az()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->az(), output);
  }

  // optional float lat = 7;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->lat(), output);
  }

  // optional float lon = 8;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->lon(), output);
  }

  // optional string soi = 9;
  if (has_soi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soi().data(), this->soi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->soi(), output);
  }

  // optional string unit_id = 10;
  if (has_unit_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit_id().data(), this->unit_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->unit_id(), output);
  }

  // optional double message_id = 11;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->message_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSNAP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "CSNAP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double start_sec = 2;
  if (has_start_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_sec(), target);
  }

  // optional double start_fsec = 3;
  if (has_start_fsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->start_fsec(), target);
  }

  // optional float cf = 4;
  if (has_cf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cf(), target);
  }

  // optional float duration = 5;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->duration(), target);
  }

  // optional int32 az = 6;
  if (has_az()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->az(), target);
  }

  // optional float lat = 7;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->lat(), target);
  }

  // optional float lon = 8;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->lon(), target);
  }

  // optional string soi = 9;
  if (has_soi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soi().data(), this->soi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->soi(), target);
  }

  // optional string unit_id = 10;
  if (has_unit_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit_id().data(), this->unit_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->unit_id(), target);
  }

  // optional double message_id = 11;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->message_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSNAP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "CSNAP"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double start_sec = 2;
    if (has_start_sec()) {
      total_size += 1 + 8;
    }

    // optional double start_fsec = 3;
    if (has_start_fsec()) {
      total_size += 1 + 8;
    }

    // optional float cf = 4;
    if (has_cf()) {
      total_size += 1 + 4;
    }

    // optional float duration = 5;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional int32 az = 6;
    if (has_az()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->az());
    }

    // optional float lat = 7;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float lon = 8;
    if (has_lon()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string soi = 9;
    if (has_soi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soi());
    }

    // optional string unit_id = 10;
    if (has_unit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit_id());
    }

    // optional double message_id = 11;
    if (has_message_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSNAP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSNAP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSNAP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSNAP::MergeFrom(const CSNAP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_start_sec()) {
      set_start_sec(from.start_sec());
    }
    if (from.has_start_fsec()) {
      set_start_fsec(from.start_fsec());
    }
    if (from.has_cf()) {
      set_cf(from.cf());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_az()) {
      set_az(from.az());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_soi()) {
      set_soi(from.soi());
    }
    if (from.has_unit_id()) {
      set_unit_id(from.unit_id());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSNAP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSNAP::CopyFrom(const CSNAP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNAP::IsInitialized() const {

  return true;
}

void CSNAP::Swap(CSNAP* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(start_sec_, other->start_sec_);
    std::swap(start_fsec_, other->start_fsec_);
    std::swap(cf_, other->cf_);
    std::swap(duration_, other->duration_);
    std::swap(az_, other->az_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(soi_, other->soi_);
    std::swap(unit_id_, other->unit_id_);
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSNAP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSNAP_descriptor_;
  metadata.reflection = CSNAP_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GeoSnapResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GeoSnapResponse::kMsgNameFieldNumber;
const int GeoSnapResponse::kAckFieldNumber;
const int GeoSnapResponse::kMessageIdFieldNumber;
#endif  // !_MSC_VER

GeoSnapResponse::GeoSnapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeoSnapResponse::InitAsDefaultInstance() {
}

GeoSnapResponse::GeoSnapResponse(const GeoSnapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeoSnapResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ack_ = 0;
  message_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoSnapResponse::~GeoSnapResponse() {
  SharedDtor();
}

void GeoSnapResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void GeoSnapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoSnapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoSnapResponse_descriptor_;
}

const GeoSnapResponse& GeoSnapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconGeoMessages_2eproto();
  return *default_instance_;
}

GeoSnapResponse* GeoSnapResponse::default_instance_ = NULL;

GeoSnapResponse* GeoSnapResponse::New() const {
  return new GeoSnapResponse;
}

void GeoSnapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    ack_ = 0;
    message_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoSnapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GEO_SNAP_RESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ack;
        break;
      }

      // optional int32 ack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ack_)));
          set_has_ack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_message_id;
        break;
      }

      // optional double message_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeoSnapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GEO_SNAP_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 ack = 2;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ack(), output);
  }

  // optional double message_id = 3;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->message_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeoSnapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GEO_SNAP_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 ack = 2;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ack(), target);
  }

  // optional double message_id = 3;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->message_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeoSnapResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GEO_SNAP_RESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 ack = 2;
    if (has_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ack());
    }

    // optional double message_id = 3;
    if (has_message_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoSnapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoSnapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoSnapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoSnapResponse::MergeFrom(const GeoSnapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_ack()) {
      set_ack(from.ack());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoSnapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoSnapResponse::CopyFrom(const GeoSnapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoSnapResponse::IsInitialized() const {

  return true;
}

void GeoSnapResponse::Swap(GeoSnapResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(ack_, other->ack_);
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoSnapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoSnapResponse_descriptor_;
  metadata.reflection = GeoSnapResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GeoSnapDone::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GeoSnapDone::kMsgNameFieldNumber;
const int GeoSnapDone::kStartSecFieldNumber;
const int GeoSnapDone::kStartFsecFieldNumber;
const int GeoSnapDone::kDurationFieldNumber;
const int GeoSnapDone::kChanFieldNumber;
const int GeoSnapDone::kCfFieldNumber;
const int GeoSnapDone::kSoiFieldNumber;
const int GeoSnapDone::kUnitIdFieldNumber;
const int GeoSnapDone::kFilenameFieldNumber;
const int GeoSnapDone::kMetaFilenameFieldNumber;
const int GeoSnapDone::kMessageIdFieldNumber;
#endif  // !_MSC_VER

GeoSnapDone::GeoSnapDone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeoSnapDone::InitAsDefaultInstance() {
}

GeoSnapDone::GeoSnapDone(const GeoSnapDone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeoSnapDone::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  start_sec_ = 0;
  start_fsec_ = 0;
  duration_ = 0;
  chan_ = 0;
  cf_ = 0;
  soi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unit_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  meta_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoSnapDone::~GeoSnapDone() {
  SharedDtor();
}

void GeoSnapDone::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (soi_ != &::google::protobuf::internal::kEmptyString) {
    delete soi_;
  }
  if (unit_id_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_id_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (meta_filename_ != &::google::protobuf::internal::kEmptyString) {
    delete meta_filename_;
  }
  if (this != default_instance_) {
  }
}

void GeoSnapDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoSnapDone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoSnapDone_descriptor_;
}

const GeoSnapDone& GeoSnapDone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconGeoMessages_2eproto();
  return *default_instance_;
}

GeoSnapDone* GeoSnapDone::default_instance_ = NULL;

GeoSnapDone* GeoSnapDone::New() const {
  return new GeoSnapDone;
}

void GeoSnapDone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    start_sec_ = 0;
    start_fsec_ = 0;
    duration_ = 0;
    chan_ = 0;
    cf_ = 0;
    if (has_soi()) {
      if (soi_ != &::google::protobuf::internal::kEmptyString) {
        soi_->clear();
      }
    }
    if (has_unit_id()) {
      if (unit_id_ != &::google::protobuf::internal::kEmptyString) {
        unit_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_meta_filename()) {
      if (meta_filename_ != &::google::protobuf::internal::kEmptyString) {
        meta_filename_->clear();
      }
    }
    message_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoSnapDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GEO_SNAP_DONE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_start_sec;
        break;
      }

      // optional double start_sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_sec_)));
          set_has_start_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_start_fsec;
        break;
      }

      // optional double start_fsec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start_fsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_fsec_)));
          set_has_start_fsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_duration;
        break;
      }

      // optional float duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chan;
        break;
      }

      // optional int32 chan = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chan_)));
          set_has_chan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_cf;
        break;
      }

      // optional float cf = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cf_)));
          set_has_cf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_soi;
        break;
      }

      // optional string soi = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soi().data(), this->soi().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_unit_id;
        break;
      }

      // optional string unit_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unit_id().data(), this->unit_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_filename;
        break;
      }

      // optional string filename = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_meta_filename;
        break;
      }

      // optional string meta_filename = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meta_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meta_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meta_filename().data(), this->meta_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_message_id;
        break;
      }

      // optional double message_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeoSnapDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GEO_SNAP_DONE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double start_sec = 2;
  if (has_start_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_sec(), output);
  }

  // optional double start_fsec = 3;
  if (has_start_fsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->start_fsec(), output);
  }

  // optional float duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  // optional int32 chan = 5;
  if (has_chan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chan(), output);
  }

  // optional float cf = 6;
  if (has_cf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cf(), output);
  }

  // optional string soi = 7;
  if (has_soi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soi().data(), this->soi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->soi(), output);
  }

  // optional string unit_id = 8;
  if (has_unit_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit_id().data(), this->unit_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->unit_id(), output);
  }

  // optional string filename = 9;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->filename(), output);
  }

  // optional string meta_filename = 10;
  if (has_meta_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meta_filename().data(), this->meta_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->meta_filename(), output);
  }

  // optional double message_id = 11;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->message_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeoSnapDone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GEO_SNAP_DONE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double start_sec = 2;
  if (has_start_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_sec(), target);
  }

  // optional double start_fsec = 3;
  if (has_start_fsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->start_fsec(), target);
  }

  // optional float duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }

  // optional int32 chan = 5;
  if (has_chan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chan(), target);
  }

  // optional float cf = 6;
  if (has_cf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cf(), target);
  }

  // optional string soi = 7;
  if (has_soi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soi().data(), this->soi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->soi(), target);
  }

  // optional string unit_id = 8;
  if (has_unit_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit_id().data(), this->unit_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->unit_id(), target);
  }

  // optional string filename = 9;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->filename(), target);
  }

  // optional string meta_filename = 10;
  if (has_meta_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meta_filename().data(), this->meta_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->meta_filename(), target);
  }

  // optional double message_id = 11;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->message_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeoSnapDone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GEO_SNAP_DONE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double start_sec = 2;
    if (has_start_sec()) {
      total_size += 1 + 8;
    }

    // optional double start_fsec = 3;
    if (has_start_fsec()) {
      total_size += 1 + 8;
    }

    // optional float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional int32 chan = 5;
    if (has_chan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chan());
    }

    // optional float cf = 6;
    if (has_cf()) {
      total_size += 1 + 4;
    }

    // optional string soi = 7;
    if (has_soi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soi());
    }

    // optional string unit_id = 8;
    if (has_unit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string filename = 9;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string meta_filename = 10;
    if (has_meta_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meta_filename());
    }

    // optional double message_id = 11;
    if (has_message_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoSnapDone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoSnapDone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoSnapDone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoSnapDone::MergeFrom(const GeoSnapDone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_start_sec()) {
      set_start_sec(from.start_sec());
    }
    if (from.has_start_fsec()) {
      set_start_fsec(from.start_fsec());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_chan()) {
      set_chan(from.chan());
    }
    if (from.has_cf()) {
      set_cf(from.cf());
    }
    if (from.has_soi()) {
      set_soi(from.soi());
    }
    if (from.has_unit_id()) {
      set_unit_id(from.unit_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_meta_filename()) {
      set_meta_filename(from.meta_filename());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoSnapDone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoSnapDone::CopyFrom(const GeoSnapDone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoSnapDone::IsInitialized() const {

  return true;
}

void GeoSnapDone::Swap(GeoSnapDone* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(start_sec_, other->start_sec_);
    std::swap(start_fsec_, other->start_fsec_);
    std::swap(duration_, other->duration_);
    std::swap(chan_, other->chan_);
    std::swap(cf_, other->cf_);
    std::swap(soi_, other->soi_);
    std::swap(unit_id_, other->unit_id_);
    std::swap(filename_, other->filename_);
    std::swap(meta_filename_, other->meta_filename_);
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoSnapDone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoSnapDone_descriptor_;
  metadata.reflection = GeoSnapDone_reflection_;
  return metadata;
}


// ===================================================================

::std::string* CSNAPQ::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int CSNAPQ::kMsgNameFieldNumber;
const int CSNAPQ::kChanFieldNumber;
const int CSNAPQ::kMessageIdFieldNumber;
#endif  // !_MSC_VER

CSNAPQ::CSNAPQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSNAPQ::InitAsDefaultInstance() {
}

CSNAPQ::CSNAPQ(const CSNAPQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSNAPQ::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  chan_ = 0;
  message_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSNAPQ::~CSNAPQ() {
  SharedDtor();
}

void CSNAPQ::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void CSNAPQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSNAPQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSNAPQ_descriptor_;
}

const CSNAPQ& CSNAPQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconGeoMessages_2eproto();
  return *default_instance_;
}

CSNAPQ* CSNAPQ::default_instance_ = NULL;

CSNAPQ* CSNAPQ::New() const {
  return new CSNAPQ;
}

void CSNAPQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    chan_ = 0;
    message_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSNAPQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "CSNAPQ"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chan;
        break;
      }

      // optional int32 chan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chan_)));
          set_has_chan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_message_id;
        break;
      }

      // optional double message_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSNAPQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "CSNAPQ"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 chan = 2;
  if (has_chan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chan(), output);
  }

  // optional double message_id = 3;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->message_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSNAPQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "CSNAPQ"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 chan = 2;
  if (has_chan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chan(), target);
  }

  // optional double message_id = 3;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->message_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSNAPQ::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "CSNAPQ"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 chan = 2;
    if (has_chan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chan());
    }

    // optional double message_id = 3;
    if (has_message_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSNAPQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSNAPQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSNAPQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSNAPQ::MergeFrom(const CSNAPQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_chan()) {
      set_chan(from.chan());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSNAPQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSNAPQ::CopyFrom(const CSNAPQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNAPQ::IsInitialized() const {

  return true;
}

void CSNAPQ::Swap(CSNAPQ* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(chan_, other->chan_);
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSNAPQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSNAPQ_descriptor_;
  metadata.reflection = CSNAPQ_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GeoSnapQuitResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GeoSnapQuitResponse::kMsgNameFieldNumber;
const int GeoSnapQuitResponse::kAckFieldNumber;
const int GeoSnapQuitResponse::kChanFieldNumber;
const int GeoSnapQuitResponse::kMessageIdFieldNumber;
#endif  // !_MSC_VER

GeoSnapQuitResponse::GeoSnapQuitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeoSnapQuitResponse::InitAsDefaultInstance() {
}

GeoSnapQuitResponse::GeoSnapQuitResponse(const GeoSnapQuitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeoSnapQuitResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ack_ = 0;
  chan_ = 0;
  message_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoSnapQuitResponse::~GeoSnapQuitResponse() {
  SharedDtor();
}

void GeoSnapQuitResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void GeoSnapQuitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoSnapQuitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoSnapQuitResponse_descriptor_;
}

const GeoSnapQuitResponse& GeoSnapQuitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconGeoMessages_2eproto();
  return *default_instance_;
}

GeoSnapQuitResponse* GeoSnapQuitResponse::default_instance_ = NULL;

GeoSnapQuitResponse* GeoSnapQuitResponse::New() const {
  return new GeoSnapQuitResponse;
}

void GeoSnapQuitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    ack_ = 0;
    chan_ = 0;
    message_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoSnapQuitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GEO_SNAP_QUIT_RESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ack;
        break;
      }

      // optional int32 ack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ack_)));
          set_has_ack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chan;
        break;
      }

      // optional int32 chan = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chan_)));
          set_has_chan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_message_id;
        break;
      }

      // optional double message_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeoSnapQuitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GEO_SNAP_QUIT_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 ack = 2;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ack(), output);
  }

  // optional int32 chan = 3;
  if (has_chan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chan(), output);
  }

  // optional double message_id = 4;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->message_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeoSnapQuitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GEO_SNAP_QUIT_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 ack = 2;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ack(), target);
  }

  // optional int32 chan = 3;
  if (has_chan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chan(), target);
  }

  // optional double message_id = 4;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->message_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeoSnapQuitResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GEO_SNAP_QUIT_RESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 ack = 2;
    if (has_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ack());
    }

    // optional int32 chan = 3;
    if (has_chan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chan());
    }

    // optional double message_id = 4;
    if (has_message_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoSnapQuitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoSnapQuitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoSnapQuitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoSnapQuitResponse::MergeFrom(const GeoSnapQuitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_ack()) {
      set_ack(from.ack());
    }
    if (from.has_chan()) {
      set_chan(from.chan());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoSnapQuitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoSnapQuitResponse::CopyFrom(const GeoSnapQuitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoSnapQuitResponse::IsInitialized() const {

  return true;
}

void GeoSnapQuitResponse::Swap(GeoSnapQuitResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(ack_, other->ack_);
    std::swap(chan_, other->chan_);
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoSnapQuitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoSnapQuitResponse_descriptor_;
  metadata.reflection = GeoSnapQuitResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GeoBurstDone::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GeoBurstDone::kMsgNameFieldNumber;
const int GeoBurstDone::kMetaFilenameFieldNumber;
const int GeoBurstDone::kMessageIdFieldNumber;
const int GeoBurstDone::kChanFieldNumber;
#endif  // !_MSC_VER

GeoBurstDone::GeoBurstDone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeoBurstDone::InitAsDefaultInstance() {
}

GeoBurstDone::GeoBurstDone(const GeoBurstDone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeoBurstDone::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  meta_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_id_ = 0;
  chan_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoBurstDone::~GeoBurstDone() {
  SharedDtor();
}

void GeoBurstDone::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (meta_filename_ != &::google::protobuf::internal::kEmptyString) {
    delete meta_filename_;
  }
  if (chan_ != &::google::protobuf::internal::kEmptyString) {
    delete chan_;
  }
  if (this != default_instance_) {
  }
}

void GeoBurstDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoBurstDone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoBurstDone_descriptor_;
}

const GeoBurstDone& GeoBurstDone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconGeoMessages_2eproto();
  return *default_instance_;
}

GeoBurstDone* GeoBurstDone::default_instance_ = NULL;

GeoBurstDone* GeoBurstDone::New() const {
  return new GeoBurstDone;
}

void GeoBurstDone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_meta_filename()) {
      if (meta_filename_ != &::google::protobuf::internal::kEmptyString) {
        meta_filename_->clear();
      }
    }
    message_id_ = 0;
    if (has_chan()) {
      if (chan_ != &::google::protobuf::internal::kEmptyString) {
        chan_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoBurstDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GEO_BURST_DONE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_meta_filename;
        break;
      }

      // optional string meta_filename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meta_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meta_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meta_filename().data(), this->meta_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_message_id;
        break;
      }

      // optional int32 message_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chan;
        break;
      }

      // optional string chan = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chan()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chan().data(), this->chan().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeoBurstDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GEO_BURST_DONE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string meta_filename = 2;
  if (has_meta_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meta_filename().data(), this->meta_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->meta_filename(), output);
  }

  // optional int32 message_id = 3;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->message_id(), output);
  }

  // optional string chan = 4;
  if (has_chan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chan().data(), this->chan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->chan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeoBurstDone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GEO_BURST_DONE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string meta_filename = 2;
  if (has_meta_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meta_filename().data(), this->meta_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->meta_filename(), target);
  }

  // optional int32 message_id = 3;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->message_id(), target);
  }

  // optional string chan = 4;
  if (has_chan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chan().data(), this->chan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeoBurstDone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GEO_BURST_DONE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string meta_filename = 2;
    if (has_meta_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meta_filename());
    }

    // optional int32 message_id = 3;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // optional string chan = 4;
    if (has_chan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chan());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoBurstDone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoBurstDone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoBurstDone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoBurstDone::MergeFrom(const GeoBurstDone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_meta_filename()) {
      set_meta_filename(from.meta_filename());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_chan()) {
      set_chan(from.chan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoBurstDone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoBurstDone::CopyFrom(const GeoBurstDone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoBurstDone::IsInitialized() const {

  return true;
}

void GeoBurstDone::Swap(GeoBurstDone* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(meta_filename_, other->meta_filename_);
    std::swap(message_id_, other->message_id_);
    std::swap(chan_, other->chan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoBurstDone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoBurstDone_descriptor_;
  metadata.reflection = GeoBurstDone_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GSNAP::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GSNAP::kMsgNameFieldNumber;
const int GSNAP::kChanFieldNumber;
const int GSNAP::kStartSecFieldNumber;
const int GSNAP::kStartFsecFieldNumber;
const int GSNAP::kDurationFieldNumber;
const int GSNAP::kFreqFieldNumber;
const int GSNAP::kSampleRateFieldNumber;
const int GSNAP::kTrackNumberFieldNumber;
const int GSNAP::kSoiFieldNumber;
const int GSNAP::kMessageIdFieldNumber;
#endif  // !_MSC_VER

GSNAP::GSNAP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GSNAP::InitAsDefaultInstance() {
}

GSNAP::GSNAP(const GSNAP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GSNAP::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  chan_ = 0;
  start_sec_ = 0;
  start_fsec_ = 0;
  duration_ = 0;
  freq_ = 0;
  sample_rate_ = 0;
  track_number_ = 0;
  soi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GSNAP::~GSNAP() {
  SharedDtor();
}

void GSNAP::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (soi_ != &::google::protobuf::internal::kEmptyString) {
    delete soi_;
  }
  if (this != default_instance_) {
  }
}

void GSNAP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GSNAP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GSNAP_descriptor_;
}

const GSNAP& GSNAP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconGeoMessages_2eproto();
  return *default_instance_;
}

GSNAP* GSNAP::default_instance_ = NULL;

GSNAP* GSNAP::New() const {
  return new GSNAP;
}

void GSNAP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    chan_ = 0;
    start_sec_ = 0;
    start_fsec_ = 0;
    duration_ = 0;
    freq_ = 0;
    sample_rate_ = 0;
    track_number_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_soi()) {
      if (soi_ != &::google::protobuf::internal::kEmptyString) {
        soi_->clear();
      }
    }
    message_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GSNAP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GSNAP"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chan;
        break;
      }

      // optional int32 chan = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chan_)));
          set_has_chan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_start_sec;
        break;
      }

      // optional double start_sec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_sec_)));
          set_has_start_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_start_fsec;
        break;
      }

      // optional double start_fsec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start_fsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_fsec_)));
          set_has_start_fsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_duration;
        break;
      }

      // optional int32 duration = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_freq;
        break;
      }

      // optional float freq = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_sample_rate;
        break;
      }

      // optional float sample_rate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sample_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sample_rate_)));
          set_has_sample_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_track_number;
        break;
      }

      // optional int32 track_number = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_track_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_number_)));
          set_has_track_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_soi;
        break;
      }

      // optional string soi = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soi().data(), this->soi().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_message_id;
        break;
      }

      // optional double message_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GSNAP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GSNAP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 chan = 3;
  if (has_chan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chan(), output);
  }

  // optional double start_sec = 4;
  if (has_start_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->start_sec(), output);
  }

  // optional double start_fsec = 5;
  if (has_start_fsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->start_fsec(), output);
  }

  // optional int32 duration = 6;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->duration(), output);
  }

  // optional float freq = 7;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->freq(), output);
  }

  // optional float sample_rate = 8;
  if (has_sample_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->sample_rate(), output);
  }

  // optional int32 track_number = 9;
  if (has_track_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->track_number(), output);
  }

  // optional string soi = 10;
  if (has_soi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soi().data(), this->soi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->soi(), output);
  }

  // optional double message_id = 11;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->message_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GSNAP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GSNAP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 chan = 3;
  if (has_chan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chan(), target);
  }

  // optional double start_sec = 4;
  if (has_start_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->start_sec(), target);
  }

  // optional double start_fsec = 5;
  if (has_start_fsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->start_fsec(), target);
  }

  // optional int32 duration = 6;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->duration(), target);
  }

  // optional float freq = 7;
  if (has_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->freq(), target);
  }

  // optional float sample_rate = 8;
  if (has_sample_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->sample_rate(), target);
  }

  // optional int32 track_number = 9;
  if (has_track_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->track_number(), target);
  }

  // optional string soi = 10;
  if (has_soi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soi().data(), this->soi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->soi(), target);
  }

  // optional double message_id = 11;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->message_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GSNAP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GSNAP"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 chan = 3;
    if (has_chan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chan());
    }

    // optional double start_sec = 4;
    if (has_start_sec()) {
      total_size += 1 + 8;
    }

    // optional double start_fsec = 5;
    if (has_start_fsec()) {
      total_size += 1 + 8;
    }

    // optional int32 duration = 6;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional float freq = 7;
    if (has_freq()) {
      total_size += 1 + 4;
    }

    // optional float sample_rate = 8;
    if (has_sample_rate()) {
      total_size += 1 + 4;
    }

    // optional int32 track_number = 9;
    if (has_track_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track_number());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string soi = 10;
    if (has_soi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soi());
    }

    // optional double message_id = 11;
    if (has_message_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GSNAP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GSNAP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GSNAP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GSNAP::MergeFrom(const GSNAP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_chan()) {
      set_chan(from.chan());
    }
    if (from.has_start_sec()) {
      set_start_sec(from.start_sec());
    }
    if (from.has_start_fsec()) {
      set_start_fsec(from.start_fsec());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_freq()) {
      set_freq(from.freq());
    }
    if (from.has_sample_rate()) {
      set_sample_rate(from.sample_rate());
    }
    if (from.has_track_number()) {
      set_track_number(from.track_number());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_soi()) {
      set_soi(from.soi());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GSNAP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSNAP::CopyFrom(const GSNAP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSNAP::IsInitialized() const {

  return true;
}

void GSNAP::Swap(GSNAP* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(chan_, other->chan_);
    std::swap(start_sec_, other->start_sec_);
    std::swap(start_fsec_, other->start_fsec_);
    std::swap(duration_, other->duration_);
    std::swap(freq_, other->freq_);
    std::swap(sample_rate_, other->sample_rate_);
    std::swap(track_number_, other->track_number_);
    std::swap(soi_, other->soi_);
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GSNAP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GSNAP_descriptor_;
  metadata.reflection = GSNAP_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GeoProcessDone::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GeoProcessDone::kMsgNameFieldNumber;
const int GeoProcessDone::kSuccessFieldNumber;
const int GeoProcessDone::kFilenameFieldNumber;
const int GeoProcessDone::kMessageIdFieldNumber;
#endif  // !_MSC_VER

GeoProcessDone::GeoProcessDone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeoProcessDone::InitAsDefaultInstance() {
}

GeoProcessDone::GeoProcessDone(const GeoProcessDone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeoProcessDone::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  success_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoProcessDone::~GeoProcessDone() {
  SharedDtor();
}

void GeoProcessDone::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void GeoProcessDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoProcessDone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoProcessDone_descriptor_;
}

const GeoProcessDone& GeoProcessDone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconGeoMessages_2eproto();
  return *default_instance_;
}

GeoProcessDone* GeoProcessDone::default_instance_ = NULL;

GeoProcessDone* GeoProcessDone::New() const {
  return new GeoProcessDone;
}

void GeoProcessDone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    success_ = 0;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    message_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoProcessDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GEO_PROCESS_DONE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_success;
        break;
      }

      // optional int32 success = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_filename;
        break;
      }

      // optional string filename = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_message_id;
        break;
      }

      // optional double message_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeoProcessDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GEO_PROCESS_DONE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 success = 3;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->success(), output);
  }

  // optional string filename = 4;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->filename(), output);
  }

  // optional double message_id = 5;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->message_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeoProcessDone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GEO_PROCESS_DONE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 success = 3;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->success(), target);
  }

  // optional string filename = 4;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filename(), target);
  }

  // optional double message_id = 5;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->message_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeoProcessDone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GEO_PROCESS_DONE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 success = 3;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success());
    }

    // optional string filename = 4;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional double message_id = 5;
    if (has_message_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoProcessDone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoProcessDone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoProcessDone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoProcessDone::MergeFrom(const GeoProcessDone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoProcessDone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoProcessDone::CopyFrom(const GeoProcessDone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoProcessDone::IsInitialized() const {

  return true;
}

void GeoProcessDone::Swap(GeoProcessDone* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(success_, other->success_);
    std::swap(filename_, other->filename_);
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoProcessDone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoProcessDone_descriptor_;
  metadata.reflection = GeoProcessDone_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GEO_EXIT::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GEO_EXIT::kMsgNameFieldNumber;
#endif  // !_MSC_VER

GEO_EXIT::GEO_EXIT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GEO_EXIT::InitAsDefaultInstance() {
}

GEO_EXIT::GEO_EXIT(const GEO_EXIT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GEO_EXIT::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GEO_EXIT::~GEO_EXIT() {
  SharedDtor();
}

void GEO_EXIT::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void GEO_EXIT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GEO_EXIT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GEO_EXIT_descriptor_;
}

const GEO_EXIT& GEO_EXIT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconGeoMessages_2eproto();
  return *default_instance_;
}

GEO_EXIT* GEO_EXIT::default_instance_ = NULL;

GEO_EXIT* GEO_EXIT::New() const {
  return new GEO_EXIT;
}

void GEO_EXIT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GEO_EXIT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GEO_EXIT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GEO_EXIT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GEO_EXIT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GEO_EXIT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GEO_EXIT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GEO_EXIT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GEO_EXIT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GEO_EXIT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GEO_EXIT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GEO_EXIT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GEO_EXIT::MergeFrom(const GEO_EXIT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GEO_EXIT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GEO_EXIT::CopyFrom(const GEO_EXIT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GEO_EXIT::IsInitialized() const {

  return true;
}

void GEO_EXIT::Swap(GEO_EXIT* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GEO_EXIT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GEO_EXIT_descriptor_;
  metadata.reflection = GEO_EXIT_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GEO_RESET::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GEO_RESET::kMsgNameFieldNumber;
#endif  // !_MSC_VER

GEO_RESET::GEO_RESET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GEO_RESET::InitAsDefaultInstance() {
}

GEO_RESET::GEO_RESET(const GEO_RESET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GEO_RESET::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GEO_RESET::~GEO_RESET() {
  SharedDtor();
}

void GEO_RESET::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void GEO_RESET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GEO_RESET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GEO_RESET_descriptor_;
}

const GEO_RESET& GEO_RESET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconGeoMessages_2eproto();
  return *default_instance_;
}

GEO_RESET* GEO_RESET::default_instance_ = NULL;

GEO_RESET* GEO_RESET::New() const {
  return new GEO_RESET;
}

void GEO_RESET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GEO_RESET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GEO_RESET"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GEO_RESET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GEO_RESET"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GEO_RESET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GEO_RESET"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GEO_RESET::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GEO_RESET"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GEO_RESET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GEO_RESET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GEO_RESET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GEO_RESET::MergeFrom(const GEO_RESET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GEO_RESET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GEO_RESET::CopyFrom(const GEO_RESET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GEO_RESET::IsInitialized() const {

  return true;
}

void GEO_RESET::Swap(GEO_RESET* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GEO_RESET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GEO_RESET_descriptor_;
  metadata.reflection = GEO_RESET_reflection_;
  return metadata;
}


// ===================================================================

::std::string* WifiTest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int WifiTest::kMsgNameFieldNumber;
#endif  // !_MSC_VER

WifiTest::WifiTest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WifiTest::InitAsDefaultInstance() {
}

WifiTest::WifiTest(const WifiTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WifiTest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WifiTest::~WifiTest() {
  SharedDtor();
}

void WifiTest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void WifiTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WifiTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WifiTest_descriptor_;
}

const WifiTest& WifiTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconGeoMessages_2eproto();
  return *default_instance_;
}

WifiTest* WifiTest::default_instance_ = NULL;

WifiTest* WifiTest::New() const {
  return new WifiTest;
}

void WifiTest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WifiTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "WIFI_TEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WifiTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "WIFI_TEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WifiTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "WIFI_TEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WifiTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "WIFI_TEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WifiTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WifiTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WifiTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WifiTest::MergeFrom(const WifiTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WifiTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WifiTest::CopyFrom(const WifiTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiTest::IsInitialized() const {

  return true;
}

void WifiTest::Swap(WifiTest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WifiTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WifiTest_descriptor_;
  metadata.reflection = WifiTest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace falcon_geo_msg

// @@protoc_insertion_point(global_scope)
