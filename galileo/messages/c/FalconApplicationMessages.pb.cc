// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FalconApplicationMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FalconApplicationMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace falcon_app_msg {

namespace {

const ::google::protobuf::Descriptor* MacroOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MacroOptions_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MacroOptions_AutoControl_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MacroOptions_PPS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MacroOptions_Ref10m_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MacroOptions_ExportFlags_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FastSearchConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FastSearchConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* FastSearchState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FastSearchState_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewFastScan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewFastScan_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionManConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionManConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcMacroConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcMacroConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProcMacroConfig_SystemType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WidebandRecordConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WidebandRecordConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* HealthCheckConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HealthCheckConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* MmsHealthConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MmsHealthConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoiseTestConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoiseTestConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GpsHealthConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GpsHealthConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* AntennaControlConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AntennaControlConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* VcnConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VcnConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenericMacroConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericMacroConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SettingsConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SettingsConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* KepSvisorConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KepSvisorConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZMQPubDemoConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZMQPubDemoConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZMQSubDemoConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZMQSubDemoConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* WifiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WifiConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FalconApplicationMessages_2eproto() {
  protobuf_AddDesc_FalconApplicationMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FalconApplicationMessages.proto");
  GOOGLE_CHECK(file != NULL);
  MacroOptions_descriptor_ = file->message_type(0);
  static const int MacroOptions_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, autocontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, ppsenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, refenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, iffrequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, writeaux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, exportenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, videolength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, sensorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, psdipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, psdperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, jpegperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, xmlperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, protectarch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, midasbundling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, remotethresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, psdmethod_),
  };
  MacroOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MacroOptions_descriptor_,
      MacroOptions::default_instance_,
      MacroOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MacroOptions));
  MacroOptions_AutoControl_descriptor_ = MacroOptions_descriptor_->enum_type(0);
  MacroOptions_PPS_descriptor_ = MacroOptions_descriptor_->enum_type(1);
  MacroOptions_Ref10m_descriptor_ = MacroOptions_descriptor_->enum_type(2);
  MacroOptions_ExportFlags_descriptor_ = MacroOptions_descriptor_->enum_type(3);
  FastSearchConfig_descriptor_ = file->message_type(1);
  static const int FastSearchConfig_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchConfig, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchConfig, charmansvc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchConfig, enableremoting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchConfig, enablefastpsd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchConfig, fastpsdperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchConfig, dbactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchConfig, dbuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchConfig, dbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchConfig, dbhost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchConfig, archivenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchConfig, archivesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchConfig, geo_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchConfig, auto_process_),
  };
  FastSearchConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FastSearchConfig_descriptor_,
      FastSearchConfig::default_instance_,
      FastSearchConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FastSearchConfig));
  FastSearchState_descriptor_ = file->message_type(2);
  static const int FastSearchState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchState, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchState, search_),
  };
  FastSearchState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FastSearchState_descriptor_,
      FastSearchState::default_instance_,
      FastSearchState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastSearchState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FastSearchState));
  NewFastScan_descriptor_ = file->message_type(3);
  static const int NewFastScan_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewFastScan, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewFastScan, j1970time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewFastScan, channel_),
  };
  NewFastScan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewFastScan_descriptor_,
      NewFastScan::default_instance_,
      NewFastScan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewFastScan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewFastScan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewFastScan));
  MissionManConfig_descriptor_ = file->message_type(4);
  static const int MissionManConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionManConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionManConfig, dbhost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionManConfig, dbuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionManConfig, dbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionManConfig, dbport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionManConfig, starttunernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionManConfig, numarcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionManConfig, arcspread_),
  };
  MissionManConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionManConfig_descriptor_,
      MissionManConfig::default_instance_,
      MissionManConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionManConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionManConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionManConfig));
  ProcMacroConfig_descriptor_ = file->message_type(5);
  static const int ProcMacroConfig_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, systype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, enableic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, slavetimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, extraforksvc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, extraforkchan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, healthrxport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, geo_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, soinums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, associatedsois_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, assocrepeatsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, proctimeoutenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, proctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, blacklistbw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, blacklisttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, initialtimeout_),
  };
  ProcMacroConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcMacroConfig_descriptor_,
      ProcMacroConfig::default_instance_,
      ProcMacroConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcMacroConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcMacroConfig));
  ProcMacroConfig_SystemType_descriptor_ = ProcMacroConfig_descriptor_->enum_type(0);
  WidebandRecordConfig_descriptor_ = file->message_type(6);
  static const int WidebandRecordConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WidebandRecordConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WidebandRecordConfig, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WidebandRecordConfig, healthrxport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WidebandRecordConfig, geo_enabled_),
  };
  WidebandRecordConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WidebandRecordConfig_descriptor_,
      WidebandRecordConfig::default_instance_,
      WidebandRecordConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WidebandRecordConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WidebandRecordConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WidebandRecordConfig));
  HealthCheckConfig_descriptor_ = file->message_type(7);
  static const int HealthCheckConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheckConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheckConfig, options_),
  };
  HealthCheckConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HealthCheckConfig_descriptor_,
      HealthCheckConfig::default_instance_,
      HealthCheckConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheckConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheckConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HealthCheckConfig));
  MmsHealthConfig_descriptor_ = file->message_type(8);
  static const int MmsHealthConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MmsHealthConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MmsHealthConfig, options_),
  };
  MmsHealthConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MmsHealthConfig_descriptor_,
      MmsHealthConfig::default_instance_,
      MmsHealthConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MmsHealthConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MmsHealthConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MmsHealthConfig));
  NoiseTestConfig_descriptor_ = file->message_type(9);
  static const int NoiseTestConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseTestConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseTestConfig, options_),
  };
  NoiseTestConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoiseTestConfig_descriptor_,
      NoiseTestConfig::default_instance_,
      NoiseTestConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseTestConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseTestConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoiseTestConfig));
  GpsHealthConfig_descriptor_ = file->message_type(10);
  static const int GpsHealthConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsHealthConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsHealthConfig, options_),
  };
  GpsHealthConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GpsHealthConfig_descriptor_,
      GpsHealthConfig::default_instance_,
      GpsHealthConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsHealthConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsHealthConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GpsHealthConfig));
  AntennaControlConfig_descriptor_ = file->message_type(11);
  static const int AntennaControlConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaControlConfig, msgname_),
  };
  AntennaControlConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AntennaControlConfig_descriptor_,
      AntennaControlConfig::default_instance_,
      AntennaControlConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaControlConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaControlConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AntennaControlConfig));
  VcnConfig_descriptor_ = file->message_type(12);
  static const int VcnConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnConfig, msgname_),
  };
  VcnConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VcnConfig_descriptor_,
      VcnConfig::default_instance_,
      VcnConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VcnConfig));
  GenericMacroConfig_descriptor_ = file->message_type(13);
  static const int GenericMacroConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMacroConfig, msgname_),
  };
  GenericMacroConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenericMacroConfig_descriptor_,
      GenericMacroConfig::default_instance_,
      GenericMacroConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMacroConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericMacroConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenericMacroConfig));
  SettingsConfig_descriptor_ = file->message_type(14);
  static const int SettingsConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsConfig, msgname_),
  };
  SettingsConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SettingsConfig_descriptor_,
      SettingsConfig::default_instance_,
      SettingsConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SettingsConfig));
  KepSvisorConfig_descriptor_ = file->message_type(15);
  static const int KepSvisorConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepSvisorConfig, msgname_),
  };
  KepSvisorConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KepSvisorConfig_descriptor_,
      KepSvisorConfig::default_instance_,
      KepSvisorConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepSvisorConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepSvisorConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KepSvisorConfig));
  ZMQPubDemoConfig_descriptor_ = file->message_type(16);
  static const int ZMQPubDemoConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQPubDemoConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQPubDemoConfig, maxrequests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQPubDemoConfig, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQPubDemoConfig, options_),
  };
  ZMQPubDemoConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZMQPubDemoConfig_descriptor_,
      ZMQPubDemoConfig::default_instance_,
      ZMQPubDemoConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQPubDemoConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQPubDemoConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZMQPubDemoConfig));
  ZMQSubDemoConfig_descriptor_ = file->message_type(17);
  static const int ZMQSubDemoConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSubDemoConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSubDemoConfig, maxproducts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSubDemoConfig, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSubDemoConfig, options_),
  };
  ZMQSubDemoConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZMQSubDemoConfig_descriptor_,
      ZMQSubDemoConfig::default_instance_,
      ZMQSubDemoConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSubDemoConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSubDemoConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZMQSubDemoConfig));
  WifiConfig_descriptor_ = file->message_type(18);
  static const int WifiConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiConfig, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiConfig, geo_enabled_),
  };
  WifiConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WifiConfig_descriptor_,
      WifiConfig::default_instance_,
      WifiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WifiConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FalconApplicationMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MacroOptions_descriptor_, &MacroOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FastSearchConfig_descriptor_, &FastSearchConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FastSearchState_descriptor_, &FastSearchState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewFastScan_descriptor_, &NewFastScan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionManConfig_descriptor_, &MissionManConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcMacroConfig_descriptor_, &ProcMacroConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WidebandRecordConfig_descriptor_, &WidebandRecordConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HealthCheckConfig_descriptor_, &HealthCheckConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MmsHealthConfig_descriptor_, &MmsHealthConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoiseTestConfig_descriptor_, &NoiseTestConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GpsHealthConfig_descriptor_, &GpsHealthConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AntennaControlConfig_descriptor_, &AntennaControlConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VcnConfig_descriptor_, &VcnConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenericMacroConfig_descriptor_, &GenericMacroConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SettingsConfig_descriptor_, &SettingsConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KepSvisorConfig_descriptor_, &KepSvisorConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZMQPubDemoConfig_descriptor_, &ZMQPubDemoConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZMQSubDemoConfig_descriptor_, &ZMQSubDemoConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WifiConfig_descriptor_, &WifiConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FalconApplicationMessages_2eproto() {
  delete MacroOptions::default_instance_;
  delete MacroOptions_reflection_;
  delete MacroOptions::_default_sensorname_;
  delete FastSearchConfig::default_instance_;
  delete FastSearchConfig_reflection_;
  delete FastSearchConfig::_default_msgname_;
  delete FastSearchConfig::_default_geo_enabled_;
  delete FastSearchConfig::_default_auto_process_;
  delete FastSearchState::default_instance_;
  delete FastSearchState_reflection_;
  delete FastSearchState::_default_msgname_;
  delete NewFastScan::default_instance_;
  delete NewFastScan_reflection_;
  delete NewFastScan::_default_msgname_;
  delete MissionManConfig::default_instance_;
  delete MissionManConfig_reflection_;
  delete MissionManConfig::_default_msgname_;
  delete ProcMacroConfig::default_instance_;
  delete ProcMacroConfig_reflection_;
  delete ProcMacroConfig::_default_msgname_;
  delete ProcMacroConfig::_default_geo_enabled_;
  delete WidebandRecordConfig::default_instance_;
  delete WidebandRecordConfig_reflection_;
  delete WidebandRecordConfig::_default_msgname_;
  delete WidebandRecordConfig::_default_geo_enabled_;
  delete HealthCheckConfig::default_instance_;
  delete HealthCheckConfig_reflection_;
  delete HealthCheckConfig::_default_msgname_;
  delete MmsHealthConfig::default_instance_;
  delete MmsHealthConfig_reflection_;
  delete MmsHealthConfig::_default_msgname_;
  delete NoiseTestConfig::default_instance_;
  delete NoiseTestConfig_reflection_;
  delete NoiseTestConfig::_default_msgname_;
  delete GpsHealthConfig::default_instance_;
  delete GpsHealthConfig_reflection_;
  delete GpsHealthConfig::_default_msgname_;
  delete AntennaControlConfig::default_instance_;
  delete AntennaControlConfig_reflection_;
  delete AntennaControlConfig::_default_msgname_;
  delete VcnConfig::default_instance_;
  delete VcnConfig_reflection_;
  delete VcnConfig::_default_msgname_;
  delete GenericMacroConfig::default_instance_;
  delete GenericMacroConfig_reflection_;
  delete GenericMacroConfig::_default_msgname_;
  delete SettingsConfig::default_instance_;
  delete SettingsConfig_reflection_;
  delete SettingsConfig::_default_msgname_;
  delete KepSvisorConfig::default_instance_;
  delete KepSvisorConfig_reflection_;
  delete KepSvisorConfig::_default_msgname_;
  delete ZMQPubDemoConfig::default_instance_;
  delete ZMQPubDemoConfig_reflection_;
  delete ZMQPubDemoConfig::_default_msgname_;
  delete ZMQSubDemoConfig::default_instance_;
  delete ZMQSubDemoConfig_reflection_;
  delete ZMQSubDemoConfig::_default_msgname_;
  delete WifiConfig::default_instance_;
  delete WifiConfig_reflection_;
  delete WifiConfig::_default_msgname_;
  delete WifiConfig::_default_geo_enabled_;
}

void protobuf_AddDesc_FalconApplicationMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::falcon_common_msg::protobuf_AddDesc_FalconCommonMessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037FalconApplicationMessages.proto\022\016falco"
    "n_app_msg\032\032FalconCommonMessages.proto\"\377\005"
    "\n\014MacroOptions\022=\n\013autoControl\030\001 \001(\0162(.fa"
    "lcon_app_msg.MacroOptions.AutoControl\022<\n"
    "\tppsEnable\030\002 \001(\0162 .falcon_app_msg.MacroO"
    "ptions.PPS:\007PPS_OFF\022\?\n\trefEnable\030\003 \001(\0162#"
    ".falcon_app_msg.MacroOptions.Ref10m:\007REF"
    "_OFF\022\035\n\013ifFrequency\030\004 \001(\001:\01030000000\022\024\n\010w"
    "riteAux\030\005 \001(\005:\00212\022\027\n\014exportEnable\030\006 \001(\005:"
    "\0010\022\027\n\013videoLength\030\007 \001(\005:\00220\022\032\n\nsensorNam"
    "e\030\010 \001(\t:\006sensor\022\026\n\014psdIPAddress\030\t \001(\t:\000\022"
    "\026\n\tpsdPeriod\030\n \001(\005:\003200\022\026\n\njpegPeriod\030\013 "
    "\001(\005:\00250\022\024\n\txmlPeriod\030\014 \001(\005:\0015\022\026\n\013protect"
    "Arch\030\r \001(\005:\0010\022\034\n\rmidasBundling\030\016 \001(\010:\005fa"
    "lse\022\030\n\014remoteThresh\030\017 \001(\005:\00210\022\025\n\tpsdMeth"
    "od\030\020 \001(\005:\002-1\":\n\013AutoControl\022\014\n\010HEADLESS\020"
    "\000\022\016\n\nCONTROLLED\020\001\022\r\n\tAUTO_MODE\020\002\"\036\n\003PPS\022"
    "\013\n\007PPS_OFF\020\000\022\n\n\006PPS_ON\020\001\"!\n\006Ref10m\022\013\n\007RE"
    "F_OFF\020\000\022\n\n\006REF_ON\020\001\"j\n\013ExportFlags\022\017\n\013EN"
    "ABLE_NONE\020\000\022\020\n\014ENABLE_VIDEO\020\001\022\020\n\014ENABLE_"
    "JPEGS\020\002\022\016\n\nENABLE_PSD\020\004\022\026\n\022ENABLE_WORKST"
    "ATION\020\010\"\357\002\n\020FastSearchConfig\022#\n\007msgName\030"
    "\001 \001(\t:\022FAST_SEARCH_CONFIG\022-\n\007options\030\002 \001"
    "(\0132\034.falcon_app_msg.MacroOptions\022\022\n\nchar"
    "ManSvc\030\003 \001(\t\022\034\n\016enableRemoting\030\004 \001(\010:\004tr"
    "ue\022\034\n\renableFastPSD\030\005 \001(\010:\005false\022\025\n\rfast"
    "PSDPeriod\030\006 \001(\005\022\020\n\010dbActive\030\007 \001(\010\022\016\n\006dbU"
    "ser\030\010 \001(\t\022\016\n\006dbName\030\t \001(\t\022\016\n\006dbHost\030\n \001("
    "\t\022\025\n\rarchiveNumber\030\013 \001(\005\022\023\n\013archiveSize\030"
    "\014 \001(\t\022\030\n\013geo_enabled\030\r \001(\t:\003OFF\022\030\n\014auto_"
    "process\030\016 \001(\t:\002ON\"K\n\017FastSearchState\022\"\n\007"
    "msgName\030\001 \001(\t:\021FAST_SEARCH_STATE\022\024\n\006sear"
    "ch\030\002 \001(\010:\004true\"Q\n\013NewFastScan\022\036\n\007msgName"
    "\030\001 \001(\t:\rNEW_FAST_SCAN\022\021\n\tj1970Time\030\002 \001(\001"
    "\022\017\n\007channel\030\003 \001(\005\"\265\001\n\020MissionManConfig\022#"
    "\n\007msgName\030\001 \001(\t:\022MISSION_MAN_CONFIG\022\016\n\006d"
    "bHost\030\002 \001(\t\022\016\n\006dbUser\030\003 \001(\t\022\016\n\006dbName\030\004 "
    "\001(\t\022\016\n\006dbPort\030\005 \001(\005\022\030\n\rstarttunernum\030\006 \001"
    "(\005:\0011\022\017\n\007numarcs\030\007 \001(\005\022\021\n\tarcspread\030\010 \001("
    "\t\"\330\005\n\017ProcMacroConfig\022\"\n\007msgName\030\001 \001(\t:\021"
    "PROC_MACRO_CONFIG\022-\n\007options\030\002 \001(\0132\034.fal"
    "con_app_msg.MacroOptions\022K\n\007sysType\030\003 \001("
    "\0162*.falcon_app_msg.ProcMacroConfig.Syste"
    "mType:\016SYSTEM_TYPE_RF\022\027\n\010enableIC\030\004 \001(\010:"
    "\005false\022\023\n\007timeout\030\005 \001(\005:\00240\022\031\n\014slaveTime"
    "out\030\006 \001(\005:\003300\022\024\n\014extraForkSvc\030\007 \001(\t\022:\n\r"
    "extraForkChan\030\010 \001(\0132#.falcon_common_msg."
    "ExtraForkChannel\022\033\n\014healthRxPort\030\t \001(\010:\005"
    "false\022\030\n\013geo_enabled\030\n \001(\t:\003OFF\022\017\n\007soiNu"
    "ms\030\013 \003(\t\022\026\n\016associatedSOIs\030\014 \003(\t\022\034\n\016asso"
    "cRepeatSec\030\r \001(\005:\0041800\022!\n\022procTimeoutEna"
    "bled\030\016 \001(\010:\005false\022\024\n\010procTime\030\017 \001(\005:\002-1\022"
    "\023\n\013blacklistBW\030\020 \001(\005\022\030\n\rblacklistTime\030\021 "
    "\001(\005:\0010\022\033\n\016initialTimeout\030\022 \001(\005:\003600\"\206\001\n\n"
    "SystemType\022\023\n\017SYSTEM_TYPE_UNK\020\000\022\022\n\016SYSTE"
    "M_TYPE_SD\020\001\022\022\n\016SYSTEM_TYPE_RF\020\002\022\023\n\017SYSTE"
    "M_TYPE_VCN\020\003\022\022\n\016SYSTEM_TYPE_BF\020\004\022\022\n\016SYST"
    "EM_TYPE_GF\020\005\"\245\001\n\024WidebandRecordConfig\022\'\n"
    "\007msgName\030\001 \001(\t:\026WIDEBAND_RECORD_CONFIG\022-"
    "\n\007options\030\002 \001(\0132\034.falcon_app_msg.MacroOp"
    "tions\022\033\n\014healthRxPort\030\003 \001(\010:\005false\022\030\n\013ge"
    "o_enabled\030\004 \001(\t:\003OFF\"h\n\021HealthCheckConfi"
    "g\022$\n\007msgName\030\001 \001(\t:\023HEALTH_CHECK_CONFIG\022"
    "-\n\007options\030\002 \001(\0132\034.falcon_app_msg.MacroO"
    "ptions\"d\n\017MmsHealthConfig\022\"\n\007msgName\030\001 \001"
    "(\t:\021MMS_HEALTH_CONFIG\022-\n\007options\030\002 \001(\0132\034"
    ".falcon_app_msg.MacroOptions\"d\n\017NoiseTes"
    "tConfig\022\"\n\007msgName\030\001 \001(\t:\021NOISE_TEST_CON"
    "FIG\022-\n\007options\030\002 \001(\0132\034.falcon_app_msg.Ma"
    "croOptions\"d\n\017GpsHealthConfig\022\"\n\007msgName"
    "\030\001 \001(\t:\021GPS_HEALTH_CONFIG\022-\n\007options\030\002 \001"
    "(\0132\034.falcon_app_msg.MacroOptions\"8\n\024Ante"
    "nnaControlConfig\022 \n\007msgName\030\001 \001(\t:\017ANTEN"
    "NA_CONTROL\"(\n\tVcnConfig\022\033\n\007msgName\030\001 \001(\t"
    ":\nVCN_CONFIG\";\n\022GenericMacroConfig\022%\n\007ms"
    "gName\030\001 \001(\t:\024GENERIC_MACRO_CONFIG\"2\n\016Set"
    "tingsConfig\022 \n\007msgName\030\001 \001(\t:\017SETTINGS_C"
    "ONFIG\"5\n\017KepSvisorConfig\022\"\n\007msgName\030\001 \001("
    "\t:\021KEP_SVISOR_CONFIG\"\222\001\n\020ZMQPubDemoConfi"
    "g\022$\n\007msgName\030\001 \001(\t:\023ZMQ_PUB_DEMO_CONFIG\022"
    "\026\n\013maxRequests\030\002 \001(\005:\0011\022\021\n\007address\030\003 \001(\t"
    ":\000\022-\n\007options\030\004 \001(\0132\034.falcon_app_msg.Mac"
    "roOptions\"\222\001\n\020ZMQSubDemoConfig\022$\n\007msgNam"
    "e\030\001 \001(\t:\023ZMQ_SUB_DEMO_CONFIG\022\026\n\013maxProdu"
    "cts\030\002 \001(\005:\0011\022\021\n\007address\030\003 \001(\t:\000\022-\n\007optio"
    "ns\030\004 \001(\0132\034.falcon_app_msg.MacroOptions\"s"
    "\n\nWifiConfig\022\034\n\007msgName\030\001 \001(\t:\013WIFI_CONF"
    "IG\022-\n\007options\030\002 \001(\0132\034.falcon_app_msg.Mac"
    "roOptions\022\030\n\013geo_enabled\030\003 \001(\t:\003OFFB\025\n\023f"
    "v.protos.kepsvisor", 3578);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FalconApplicationMessages.proto", &protobuf_RegisterTypes);
  MacroOptions::_default_sensorname_ =
      new ::std::string("sensor", 6);
  MacroOptions::default_instance_ = new MacroOptions();
  FastSearchConfig::_default_msgname_ =
      new ::std::string("FAST_SEARCH_CONFIG", 18);
  FastSearchConfig::_default_geo_enabled_ =
      new ::std::string("OFF", 3);
  FastSearchConfig::_default_auto_process_ =
      new ::std::string("ON", 2);
  FastSearchConfig::default_instance_ = new FastSearchConfig();
  FastSearchState::_default_msgname_ =
      new ::std::string("FAST_SEARCH_STATE", 17);
  FastSearchState::default_instance_ = new FastSearchState();
  NewFastScan::_default_msgname_ =
      new ::std::string("NEW_FAST_SCAN", 13);
  NewFastScan::default_instance_ = new NewFastScan();
  MissionManConfig::_default_msgname_ =
      new ::std::string("MISSION_MAN_CONFIG", 18);
  MissionManConfig::default_instance_ = new MissionManConfig();
  ProcMacroConfig::_default_msgname_ =
      new ::std::string("PROC_MACRO_CONFIG", 17);
  ProcMacroConfig::_default_geo_enabled_ =
      new ::std::string("OFF", 3);
  ProcMacroConfig::default_instance_ = new ProcMacroConfig();
  WidebandRecordConfig::_default_msgname_ =
      new ::std::string("WIDEBAND_RECORD_CONFIG", 22);
  WidebandRecordConfig::_default_geo_enabled_ =
      new ::std::string("OFF", 3);
  WidebandRecordConfig::default_instance_ = new WidebandRecordConfig();
  HealthCheckConfig::_default_msgname_ =
      new ::std::string("HEALTH_CHECK_CONFIG", 19);
  HealthCheckConfig::default_instance_ = new HealthCheckConfig();
  MmsHealthConfig::_default_msgname_ =
      new ::std::string("MMS_HEALTH_CONFIG", 17);
  MmsHealthConfig::default_instance_ = new MmsHealthConfig();
  NoiseTestConfig::_default_msgname_ =
      new ::std::string("NOISE_TEST_CONFIG", 17);
  NoiseTestConfig::default_instance_ = new NoiseTestConfig();
  GpsHealthConfig::_default_msgname_ =
      new ::std::string("GPS_HEALTH_CONFIG", 17);
  GpsHealthConfig::default_instance_ = new GpsHealthConfig();
  AntennaControlConfig::_default_msgname_ =
      new ::std::string("ANTENNA_CONTROL", 15);
  AntennaControlConfig::default_instance_ = new AntennaControlConfig();
  VcnConfig::_default_msgname_ =
      new ::std::string("VCN_CONFIG", 10);
  VcnConfig::default_instance_ = new VcnConfig();
  GenericMacroConfig::_default_msgname_ =
      new ::std::string("GENERIC_MACRO_CONFIG", 20);
  GenericMacroConfig::default_instance_ = new GenericMacroConfig();
  SettingsConfig::_default_msgname_ =
      new ::std::string("SETTINGS_CONFIG", 15);
  SettingsConfig::default_instance_ = new SettingsConfig();
  KepSvisorConfig::_default_msgname_ =
      new ::std::string("KEP_SVISOR_CONFIG", 17);
  KepSvisorConfig::default_instance_ = new KepSvisorConfig();
  ZMQPubDemoConfig::_default_msgname_ =
      new ::std::string("ZMQ_PUB_DEMO_CONFIG", 19);
  ZMQPubDemoConfig::default_instance_ = new ZMQPubDemoConfig();
  ZMQSubDemoConfig::_default_msgname_ =
      new ::std::string("ZMQ_SUB_DEMO_CONFIG", 19);
  ZMQSubDemoConfig::default_instance_ = new ZMQSubDemoConfig();
  WifiConfig::_default_msgname_ =
      new ::std::string("WIFI_CONFIG", 11);
  WifiConfig::_default_geo_enabled_ =
      new ::std::string("OFF", 3);
  WifiConfig::default_instance_ = new WifiConfig();
  MacroOptions::default_instance_->InitAsDefaultInstance();
  FastSearchConfig::default_instance_->InitAsDefaultInstance();
  FastSearchState::default_instance_->InitAsDefaultInstance();
  NewFastScan::default_instance_->InitAsDefaultInstance();
  MissionManConfig::default_instance_->InitAsDefaultInstance();
  ProcMacroConfig::default_instance_->InitAsDefaultInstance();
  WidebandRecordConfig::default_instance_->InitAsDefaultInstance();
  HealthCheckConfig::default_instance_->InitAsDefaultInstance();
  MmsHealthConfig::default_instance_->InitAsDefaultInstance();
  NoiseTestConfig::default_instance_->InitAsDefaultInstance();
  GpsHealthConfig::default_instance_->InitAsDefaultInstance();
  AntennaControlConfig::default_instance_->InitAsDefaultInstance();
  VcnConfig::default_instance_->InitAsDefaultInstance();
  GenericMacroConfig::default_instance_->InitAsDefaultInstance();
  SettingsConfig::default_instance_->InitAsDefaultInstance();
  KepSvisorConfig::default_instance_->InitAsDefaultInstance();
  ZMQPubDemoConfig::default_instance_->InitAsDefaultInstance();
  ZMQSubDemoConfig::default_instance_->InitAsDefaultInstance();
  WifiConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FalconApplicationMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FalconApplicationMessages_2eproto {
  StaticDescriptorInitializer_FalconApplicationMessages_2eproto() {
    protobuf_AddDesc_FalconApplicationMessages_2eproto();
  }
} static_descriptor_initializer_FalconApplicationMessages_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MacroOptions_AutoControl_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MacroOptions_AutoControl_descriptor_;
}
bool MacroOptions_AutoControl_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MacroOptions_AutoControl MacroOptions::HEADLESS;
const MacroOptions_AutoControl MacroOptions::CONTROLLED;
const MacroOptions_AutoControl MacroOptions::AUTO_MODE;
const MacroOptions_AutoControl MacroOptions::AutoControl_MIN;
const MacroOptions_AutoControl MacroOptions::AutoControl_MAX;
const int MacroOptions::AutoControl_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MacroOptions_PPS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MacroOptions_PPS_descriptor_;
}
bool MacroOptions_PPS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MacroOptions_PPS MacroOptions::PPS_OFF;
const MacroOptions_PPS MacroOptions::PPS_ON;
const MacroOptions_PPS MacroOptions::PPS_MIN;
const MacroOptions_PPS MacroOptions::PPS_MAX;
const int MacroOptions::PPS_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MacroOptions_Ref10m_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MacroOptions_Ref10m_descriptor_;
}
bool MacroOptions_Ref10m_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MacroOptions_Ref10m MacroOptions::REF_OFF;
const MacroOptions_Ref10m MacroOptions::REF_ON;
const MacroOptions_Ref10m MacroOptions::Ref10m_MIN;
const MacroOptions_Ref10m MacroOptions::Ref10m_MAX;
const int MacroOptions::Ref10m_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MacroOptions_ExportFlags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MacroOptions_ExportFlags_descriptor_;
}
bool MacroOptions_ExportFlags_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MacroOptions_ExportFlags MacroOptions::ENABLE_NONE;
const MacroOptions_ExportFlags MacroOptions::ENABLE_VIDEO;
const MacroOptions_ExportFlags MacroOptions::ENABLE_JPEGS;
const MacroOptions_ExportFlags MacroOptions::ENABLE_PSD;
const MacroOptions_ExportFlags MacroOptions::ENABLE_WORKSTATION;
const MacroOptions_ExportFlags MacroOptions::ExportFlags_MIN;
const MacroOptions_ExportFlags MacroOptions::ExportFlags_MAX;
const int MacroOptions::ExportFlags_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* MacroOptions::_default_sensorname_ = NULL;
#ifndef _MSC_VER
const int MacroOptions::kAutoControlFieldNumber;
const int MacroOptions::kPpsEnableFieldNumber;
const int MacroOptions::kRefEnableFieldNumber;
const int MacroOptions::kIfFrequencyFieldNumber;
const int MacroOptions::kWriteAuxFieldNumber;
const int MacroOptions::kExportEnableFieldNumber;
const int MacroOptions::kVideoLengthFieldNumber;
const int MacroOptions::kSensorNameFieldNumber;
const int MacroOptions::kPsdIPAddressFieldNumber;
const int MacroOptions::kPsdPeriodFieldNumber;
const int MacroOptions::kJpegPeriodFieldNumber;
const int MacroOptions::kXmlPeriodFieldNumber;
const int MacroOptions::kProtectArchFieldNumber;
const int MacroOptions::kMidasBundlingFieldNumber;
const int MacroOptions::kRemoteThreshFieldNumber;
const int MacroOptions::kPsdMethodFieldNumber;
#endif  // !_MSC_VER

MacroOptions::MacroOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MacroOptions::InitAsDefaultInstance() {
}

MacroOptions::MacroOptions(const MacroOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MacroOptions::SharedCtor() {
  _cached_size_ = 0;
  autocontrol_ = 0;
  ppsenable_ = 0;
  refenable_ = 0;
  iffrequency_ = 30000000;
  writeaux_ = 12;
  exportenable_ = 0;
  videolength_ = 20;
  sensorname_ = const_cast< ::std::string*>(_default_sensorname_);
  psdipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  psdperiod_ = 200;
  jpegperiod_ = 50;
  xmlperiod_ = 5;
  protectarch_ = 0;
  midasbundling_ = false;
  remotethresh_ = 10;
  psdmethod_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MacroOptions::~MacroOptions() {
  SharedDtor();
}

void MacroOptions::SharedDtor() {
  if (sensorname_ != _default_sensorname_) {
    delete sensorname_;
  }
  if (psdipaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete psdipaddress_;
  }
  if (this != default_instance_) {
  }
}

void MacroOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MacroOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MacroOptions_descriptor_;
}

const MacroOptions& MacroOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

MacroOptions* MacroOptions::default_instance_ = NULL;

MacroOptions* MacroOptions::New() const {
  return new MacroOptions;
}

void MacroOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    autocontrol_ = 0;
    ppsenable_ = 0;
    refenable_ = 0;
    iffrequency_ = 30000000;
    writeaux_ = 12;
    exportenable_ = 0;
    videolength_ = 20;
    if (has_sensorname()) {
      if (sensorname_ != _default_sensorname_) {
        sensorname_->assign(*_default_sensorname_);
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_psdipaddress()) {
      if (psdipaddress_ != &::google::protobuf::internal::kEmptyString) {
        psdipaddress_->clear();
      }
    }
    psdperiod_ = 200;
    jpegperiod_ = 50;
    xmlperiod_ = 5;
    protectarch_ = 0;
    midasbundling_ = false;
    remotethresh_ = 10;
    psdmethod_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MacroOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .falcon_app_msg.MacroOptions.AutoControl autoControl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_app_msg::MacroOptions_AutoControl_IsValid(value)) {
            set_autocontrol(static_cast< ::falcon_app_msg::MacroOptions_AutoControl >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ppsEnable;
        break;
      }

      // optional .falcon_app_msg.MacroOptions.PPS ppsEnable = 2 [default = PPS_OFF];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ppsEnable:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_app_msg::MacroOptions_PPS_IsValid(value)) {
            set_ppsenable(static_cast< ::falcon_app_msg::MacroOptions_PPS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refEnable;
        break;
      }

      // optional .falcon_app_msg.MacroOptions.Ref10m refEnable = 3 [default = REF_OFF];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refEnable:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_app_msg::MacroOptions_Ref10m_IsValid(value)) {
            set_refenable(static_cast< ::falcon_app_msg::MacroOptions_Ref10m >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_ifFrequency;
        break;
      }

      // optional double ifFrequency = 4 [default = 30000000];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ifFrequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &iffrequency_)));
          set_has_iffrequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_writeAux;
        break;
      }

      // optional int32 writeAux = 5 [default = 12];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writeAux:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writeaux_)));
          set_has_writeaux();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exportEnable;
        break;
      }

      // optional int32 exportEnable = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exportEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exportenable_)));
          set_has_exportenable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_videoLength;
        break;
      }

      // optional int32 videoLength = 7 [default = 20];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_videoLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videolength_)));
          set_has_videolength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 8 [default = "sensor"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_psdIPAddress;
        break;
      }

      // optional string psdIPAddress = 9 [default = ""];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psdIPAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_psdipaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->psdipaddress().data(), this->psdipaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_psdPeriod;
        break;
      }

      // optional int32 psdPeriod = 10 [default = 200];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_psdPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &psdperiod_)));
          set_has_psdperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_jpegPeriod;
        break;
      }

      // optional int32 jpegPeriod = 11 [default = 50];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jpegPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jpegperiod_)));
          set_has_jpegperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_xmlPeriod;
        break;
      }

      // optional int32 xmlPeriod = 12 [default = 5];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xmlPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xmlperiod_)));
          set_has_xmlperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_protectArch;
        break;
      }

      // optional int32 protectArch = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protectArch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protectarch_)));
          set_has_protectarch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_midasBundling;
        break;
      }

      // optional bool midasBundling = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_midasBundling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &midasbundling_)));
          set_has_midasbundling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_remoteThresh;
        break;
      }

      // optional int32 remoteThresh = 15 [default = 10];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remoteThresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remotethresh_)));
          set_has_remotethresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_psdMethod;
        break;
      }

      // optional int32 psdMethod = 16 [default = -1];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_psdMethod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &psdmethod_)));
          set_has_psdmethod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MacroOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .falcon_app_msg.MacroOptions.AutoControl autoControl = 1;
  if (has_autocontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->autocontrol(), output);
  }

  // optional .falcon_app_msg.MacroOptions.PPS ppsEnable = 2 [default = PPS_OFF];
  if (has_ppsenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ppsenable(), output);
  }

  // optional .falcon_app_msg.MacroOptions.Ref10m refEnable = 3 [default = REF_OFF];
  if (has_refenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->refenable(), output);
  }

  // optional double ifFrequency = 4 [default = 30000000];
  if (has_iffrequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->iffrequency(), output);
  }

  // optional int32 writeAux = 5 [default = 12];
  if (has_writeaux()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->writeaux(), output);
  }

  // optional int32 exportEnable = 6 [default = 0];
  if (has_exportenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exportenable(), output);
  }

  // optional int32 videoLength = 7 [default = 20];
  if (has_videolength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->videolength(), output);
  }

  // optional string sensorName = 8 [default = "sensor"];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sensorname(), output);
  }

  // optional string psdIPAddress = 9 [default = ""];
  if (has_psdipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psdipaddress().data(), this->psdipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->psdipaddress(), output);
  }

  // optional int32 psdPeriod = 10 [default = 200];
  if (has_psdperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->psdperiod(), output);
  }

  // optional int32 jpegPeriod = 11 [default = 50];
  if (has_jpegperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->jpegperiod(), output);
  }

  // optional int32 xmlPeriod = 12 [default = 5];
  if (has_xmlperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->xmlperiod(), output);
  }

  // optional int32 protectArch = 13 [default = 0];
  if (has_protectarch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->protectarch(), output);
  }

  // optional bool midasBundling = 14 [default = false];
  if (has_midasbundling()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->midasbundling(), output);
  }

  // optional int32 remoteThresh = 15 [default = 10];
  if (has_remotethresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->remotethresh(), output);
  }

  // optional int32 psdMethod = 16 [default = -1];
  if (has_psdmethod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->psdmethod(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MacroOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .falcon_app_msg.MacroOptions.AutoControl autoControl = 1;
  if (has_autocontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->autocontrol(), target);
  }

  // optional .falcon_app_msg.MacroOptions.PPS ppsEnable = 2 [default = PPS_OFF];
  if (has_ppsenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ppsenable(), target);
  }

  // optional .falcon_app_msg.MacroOptions.Ref10m refEnable = 3 [default = REF_OFF];
  if (has_refenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->refenable(), target);
  }

  // optional double ifFrequency = 4 [default = 30000000];
  if (has_iffrequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->iffrequency(), target);
  }

  // optional int32 writeAux = 5 [default = 12];
  if (has_writeaux()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->writeaux(), target);
  }

  // optional int32 exportEnable = 6 [default = 0];
  if (has_exportenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exportenable(), target);
  }

  // optional int32 videoLength = 7 [default = 20];
  if (has_videolength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->videolength(), target);
  }

  // optional string sensorName = 8 [default = "sensor"];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sensorname(), target);
  }

  // optional string psdIPAddress = 9 [default = ""];
  if (has_psdipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psdipaddress().data(), this->psdipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->psdipaddress(), target);
  }

  // optional int32 psdPeriod = 10 [default = 200];
  if (has_psdperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->psdperiod(), target);
  }

  // optional int32 jpegPeriod = 11 [default = 50];
  if (has_jpegperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->jpegperiod(), target);
  }

  // optional int32 xmlPeriod = 12 [default = 5];
  if (has_xmlperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->xmlperiod(), target);
  }

  // optional int32 protectArch = 13 [default = 0];
  if (has_protectarch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->protectarch(), target);
  }

  // optional bool midasBundling = 14 [default = false];
  if (has_midasbundling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->midasbundling(), target);
  }

  // optional int32 remoteThresh = 15 [default = 10];
  if (has_remotethresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->remotethresh(), target);
  }

  // optional int32 psdMethod = 16 [default = -1];
  if (has_psdmethod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->psdmethod(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MacroOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .falcon_app_msg.MacroOptions.AutoControl autoControl = 1;
    if (has_autocontrol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->autocontrol());
    }

    // optional .falcon_app_msg.MacroOptions.PPS ppsEnable = 2 [default = PPS_OFF];
    if (has_ppsenable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ppsenable());
    }

    // optional .falcon_app_msg.MacroOptions.Ref10m refEnable = 3 [default = REF_OFF];
    if (has_refenable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->refenable());
    }

    // optional double ifFrequency = 4 [default = 30000000];
    if (has_iffrequency()) {
      total_size += 1 + 8;
    }

    // optional int32 writeAux = 5 [default = 12];
    if (has_writeaux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writeaux());
    }

    // optional int32 exportEnable = 6 [default = 0];
    if (has_exportenable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exportenable());
    }

    // optional int32 videoLength = 7 [default = 20];
    if (has_videolength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videolength());
    }

    // optional string sensorName = 8 [default = "sensor"];
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string psdIPAddress = 9 [default = ""];
    if (has_psdipaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->psdipaddress());
    }

    // optional int32 psdPeriod = 10 [default = 200];
    if (has_psdperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->psdperiod());
    }

    // optional int32 jpegPeriod = 11 [default = 50];
    if (has_jpegperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jpegperiod());
    }

    // optional int32 xmlPeriod = 12 [default = 5];
    if (has_xmlperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xmlperiod());
    }

    // optional int32 protectArch = 13 [default = 0];
    if (has_protectarch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protectarch());
    }

    // optional bool midasBundling = 14 [default = false];
    if (has_midasbundling()) {
      total_size += 1 + 1;
    }

    // optional int32 remoteThresh = 15 [default = 10];
    if (has_remotethresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remotethresh());
    }

    // optional int32 psdMethod = 16 [default = -1];
    if (has_psdmethod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->psdmethod());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MacroOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MacroOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MacroOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MacroOptions::MergeFrom(const MacroOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autocontrol()) {
      set_autocontrol(from.autocontrol());
    }
    if (from.has_ppsenable()) {
      set_ppsenable(from.ppsenable());
    }
    if (from.has_refenable()) {
      set_refenable(from.refenable());
    }
    if (from.has_iffrequency()) {
      set_iffrequency(from.iffrequency());
    }
    if (from.has_writeaux()) {
      set_writeaux(from.writeaux());
    }
    if (from.has_exportenable()) {
      set_exportenable(from.exportenable());
    }
    if (from.has_videolength()) {
      set_videolength(from.videolength());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_psdipaddress()) {
      set_psdipaddress(from.psdipaddress());
    }
    if (from.has_psdperiod()) {
      set_psdperiod(from.psdperiod());
    }
    if (from.has_jpegperiod()) {
      set_jpegperiod(from.jpegperiod());
    }
    if (from.has_xmlperiod()) {
      set_xmlperiod(from.xmlperiod());
    }
    if (from.has_protectarch()) {
      set_protectarch(from.protectarch());
    }
    if (from.has_midasbundling()) {
      set_midasbundling(from.midasbundling());
    }
    if (from.has_remotethresh()) {
      set_remotethresh(from.remotethresh());
    }
    if (from.has_psdmethod()) {
      set_psdmethod(from.psdmethod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MacroOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MacroOptions::CopyFrom(const MacroOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MacroOptions::IsInitialized() const {

  return true;
}

void MacroOptions::Swap(MacroOptions* other) {
  if (other != this) {
    std::swap(autocontrol_, other->autocontrol_);
    std::swap(ppsenable_, other->ppsenable_);
    std::swap(refenable_, other->refenable_);
    std::swap(iffrequency_, other->iffrequency_);
    std::swap(writeaux_, other->writeaux_);
    std::swap(exportenable_, other->exportenable_);
    std::swap(videolength_, other->videolength_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(psdipaddress_, other->psdipaddress_);
    std::swap(psdperiod_, other->psdperiod_);
    std::swap(jpegperiod_, other->jpegperiod_);
    std::swap(xmlperiod_, other->xmlperiod_);
    std::swap(protectarch_, other->protectarch_);
    std::swap(midasbundling_, other->midasbundling_);
    std::swap(remotethresh_, other->remotethresh_);
    std::swap(psdmethod_, other->psdmethod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MacroOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MacroOptions_descriptor_;
  metadata.reflection = MacroOptions_reflection_;
  return metadata;
}


// ===================================================================

::std::string* FastSearchConfig::_default_msgname_ = NULL;
::std::string* FastSearchConfig::_default_geo_enabled_ = NULL;
::std::string* FastSearchConfig::_default_auto_process_ = NULL;
#ifndef _MSC_VER
const int FastSearchConfig::kMsgNameFieldNumber;
const int FastSearchConfig::kOptionsFieldNumber;
const int FastSearchConfig::kCharManSvcFieldNumber;
const int FastSearchConfig::kEnableRemotingFieldNumber;
const int FastSearchConfig::kEnableFastPSDFieldNumber;
const int FastSearchConfig::kFastPSDPeriodFieldNumber;
const int FastSearchConfig::kDbActiveFieldNumber;
const int FastSearchConfig::kDbUserFieldNumber;
const int FastSearchConfig::kDbNameFieldNumber;
const int FastSearchConfig::kDbHostFieldNumber;
const int FastSearchConfig::kArchiveNumberFieldNumber;
const int FastSearchConfig::kArchiveSizeFieldNumber;
const int FastSearchConfig::kGeoEnabledFieldNumber;
const int FastSearchConfig::kAutoProcessFieldNumber;
#endif  // !_MSC_VER

FastSearchConfig::FastSearchConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FastSearchConfig::InitAsDefaultInstance() {
  options_ = const_cast< ::falcon_app_msg::MacroOptions*>(&::falcon_app_msg::MacroOptions::default_instance());
}

FastSearchConfig::FastSearchConfig(const FastSearchConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FastSearchConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  options_ = NULL;
  charmansvc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enableremoting_ = true;
  enablefastpsd_ = false;
  fastpsdperiod_ = 0;
  dbactive_ = false;
  dbuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  archivenumber_ = 0;
  archivesize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  geo_enabled_ = const_cast< ::std::string*>(_default_geo_enabled_);
  auto_process_ = const_cast< ::std::string*>(_default_auto_process_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FastSearchConfig::~FastSearchConfig() {
  SharedDtor();
}

void FastSearchConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (charmansvc_ != &::google::protobuf::internal::kEmptyString) {
    delete charmansvc_;
  }
  if (dbuser_ != &::google::protobuf::internal::kEmptyString) {
    delete dbuser_;
  }
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    delete dbname_;
  }
  if (dbhost_ != &::google::protobuf::internal::kEmptyString) {
    delete dbhost_;
  }
  if (archivesize_ != &::google::protobuf::internal::kEmptyString) {
    delete archivesize_;
  }
  if (geo_enabled_ != _default_geo_enabled_) {
    delete geo_enabled_;
  }
  if (auto_process_ != _default_auto_process_) {
    delete auto_process_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void FastSearchConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FastSearchConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FastSearchConfig_descriptor_;
}

const FastSearchConfig& FastSearchConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

FastSearchConfig* FastSearchConfig::default_instance_ = NULL;

FastSearchConfig* FastSearchConfig::New() const {
  return new FastSearchConfig;
}

void FastSearchConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_options()) {
      if (options_ != NULL) options_->::falcon_app_msg::MacroOptions::Clear();
    }
    if (has_charmansvc()) {
      if (charmansvc_ != &::google::protobuf::internal::kEmptyString) {
        charmansvc_->clear();
      }
    }
    enableremoting_ = true;
    enablefastpsd_ = false;
    fastpsdperiod_ = 0;
    dbactive_ = false;
    if (has_dbuser()) {
      if (dbuser_ != &::google::protobuf::internal::kEmptyString) {
        dbuser_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_dbname()) {
      if (dbname_ != &::google::protobuf::internal::kEmptyString) {
        dbname_->clear();
      }
    }
    if (has_dbhost()) {
      if (dbhost_ != &::google::protobuf::internal::kEmptyString) {
        dbhost_->clear();
      }
    }
    archivenumber_ = 0;
    if (has_archivesize()) {
      if (archivesize_ != &::google::protobuf::internal::kEmptyString) {
        archivesize_->clear();
      }
    }
    if (has_geo_enabled()) {
      if (geo_enabled_ != _default_geo_enabled_) {
        geo_enabled_->assign(*_default_geo_enabled_);
      }
    }
    if (has_auto_process()) {
      if (auto_process_ != _default_auto_process_) {
        auto_process_->assign(*_default_auto_process_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FastSearchConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "FAST_SEARCH_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .falcon_app_msg.MacroOptions options = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charManSvc;
        break;
      }

      // optional string charManSvc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charManSvc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charmansvc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charmansvc().data(), this->charmansvc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enableRemoting;
        break;
      }

      // optional bool enableRemoting = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enableRemoting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableremoting_)));
          set_has_enableremoting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_enableFastPSD;
        break;
      }

      // optional bool enableFastPSD = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enableFastPSD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enablefastpsd_)));
          set_has_enablefastpsd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fastPSDPeriod;
        break;
      }

      // optional int32 fastPSDPeriod = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fastPSDPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fastpsdperiod_)));
          set_has_fastpsdperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dbActive;
        break;
      }

      // optional bool dbActive = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dbActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dbactive_)));
          set_has_dbactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_dbUser;
        break;
      }

      // optional string dbUser = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbuser().data(), this->dbuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_dbName;
        break;
      }

      // optional string dbName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbname().data(), this->dbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_dbHost;
        break;
      }

      // optional string dbHost = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbHost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbhost().data(), this->dbhost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_archiveNumber;
        break;
      }

      // optional int32 archiveNumber = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_archiveNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &archivenumber_)));
          set_has_archivenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_archiveSize;
        break;
      }

      // optional string archiveSize = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archiveSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_archivesize()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->archivesize().data(), this->archivesize().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_geo_enabled;
        break;
      }

      // optional string geo_enabled = 13 [default = "OFF"];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo_enabled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geo_enabled()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geo_enabled().data(), this->geo_enabled().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_auto_process;
        break;
      }

      // optional string auto_process = 14 [default = "ON"];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auto_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auto_process()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auto_process().data(), this->auto_process().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FastSearchConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "FAST_SEARCH_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .falcon_app_msg.MacroOptions options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->options(), output);
  }

  // optional string charManSvc = 3;
  if (has_charmansvc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charmansvc().data(), this->charmansvc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->charmansvc(), output);
  }

  // optional bool enableRemoting = 4 [default = true];
  if (has_enableremoting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enableremoting(), output);
  }

  // optional bool enableFastPSD = 5 [default = false];
  if (has_enablefastpsd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enablefastpsd(), output);
  }

  // optional int32 fastPSDPeriod = 6;
  if (has_fastpsdperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fastpsdperiod(), output);
  }

  // optional bool dbActive = 7;
  if (has_dbactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->dbactive(), output);
  }

  // optional string dbUser = 8;
  if (has_dbuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbuser().data(), this->dbuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->dbuser(), output);
  }

  // optional string dbName = 9;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->dbname(), output);
  }

  // optional string dbHost = 10;
  if (has_dbhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbhost().data(), this->dbhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->dbhost(), output);
  }

  // optional int32 archiveNumber = 11;
  if (has_archivenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->archivenumber(), output);
  }

  // optional string archiveSize = 12;
  if (has_archivesize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->archivesize().data(), this->archivesize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->archivesize(), output);
  }

  // optional string geo_enabled = 13 [default = "OFF"];
  if (has_geo_enabled()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geo_enabled().data(), this->geo_enabled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->geo_enabled(), output);
  }

  // optional string auto_process = 14 [default = "ON"];
  if (has_auto_process()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auto_process().data(), this->auto_process().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->auto_process(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FastSearchConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "FAST_SEARCH_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .falcon_app_msg.MacroOptions options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->options(), target);
  }

  // optional string charManSvc = 3;
  if (has_charmansvc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charmansvc().data(), this->charmansvc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charmansvc(), target);
  }

  // optional bool enableRemoting = 4 [default = true];
  if (has_enableremoting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enableremoting(), target);
  }

  // optional bool enableFastPSD = 5 [default = false];
  if (has_enablefastpsd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enablefastpsd(), target);
  }

  // optional int32 fastPSDPeriod = 6;
  if (has_fastpsdperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fastpsdperiod(), target);
  }

  // optional bool dbActive = 7;
  if (has_dbactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->dbactive(), target);
  }

  // optional string dbUser = 8;
  if (has_dbuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbuser().data(), this->dbuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->dbuser(), target);
  }

  // optional string dbName = 9;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->dbname(), target);
  }

  // optional string dbHost = 10;
  if (has_dbhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbhost().data(), this->dbhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->dbhost(), target);
  }

  // optional int32 archiveNumber = 11;
  if (has_archivenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->archivenumber(), target);
  }

  // optional string archiveSize = 12;
  if (has_archivesize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->archivesize().data(), this->archivesize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->archivesize(), target);
  }

  // optional string geo_enabled = 13 [default = "OFF"];
  if (has_geo_enabled()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geo_enabled().data(), this->geo_enabled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->geo_enabled(), target);
  }

  // optional string auto_process = 14 [default = "ON"];
  if (has_auto_process()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auto_process().data(), this->auto_process().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->auto_process(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FastSearchConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "FAST_SEARCH_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .falcon_app_msg.MacroOptions options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

    // optional string charManSvc = 3;
    if (has_charmansvc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charmansvc());
    }

    // optional bool enableRemoting = 4 [default = true];
    if (has_enableremoting()) {
      total_size += 1 + 1;
    }

    // optional bool enableFastPSD = 5 [default = false];
    if (has_enablefastpsd()) {
      total_size += 1 + 1;
    }

    // optional int32 fastPSDPeriod = 6;
    if (has_fastpsdperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fastpsdperiod());
    }

    // optional bool dbActive = 7;
    if (has_dbactive()) {
      total_size += 1 + 1;
    }

    // optional string dbUser = 8;
    if (has_dbuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbuser());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string dbName = 9;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbname());
    }

    // optional string dbHost = 10;
    if (has_dbhost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbhost());
    }

    // optional int32 archiveNumber = 11;
    if (has_archivenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->archivenumber());
    }

    // optional string archiveSize = 12;
    if (has_archivesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->archivesize());
    }

    // optional string geo_enabled = 13 [default = "OFF"];
    if (has_geo_enabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geo_enabled());
    }

    // optional string auto_process = 14 [default = "ON"];
    if (has_auto_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auto_process());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FastSearchConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FastSearchConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FastSearchConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FastSearchConfig::MergeFrom(const FastSearchConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_options()) {
      mutable_options()->::falcon_app_msg::MacroOptions::MergeFrom(from.options());
    }
    if (from.has_charmansvc()) {
      set_charmansvc(from.charmansvc());
    }
    if (from.has_enableremoting()) {
      set_enableremoting(from.enableremoting());
    }
    if (from.has_enablefastpsd()) {
      set_enablefastpsd(from.enablefastpsd());
    }
    if (from.has_fastpsdperiod()) {
      set_fastpsdperiod(from.fastpsdperiod());
    }
    if (from.has_dbactive()) {
      set_dbactive(from.dbactive());
    }
    if (from.has_dbuser()) {
      set_dbuser(from.dbuser());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
    if (from.has_dbhost()) {
      set_dbhost(from.dbhost());
    }
    if (from.has_archivenumber()) {
      set_archivenumber(from.archivenumber());
    }
    if (from.has_archivesize()) {
      set_archivesize(from.archivesize());
    }
    if (from.has_geo_enabled()) {
      set_geo_enabled(from.geo_enabled());
    }
    if (from.has_auto_process()) {
      set_auto_process(from.auto_process());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FastSearchConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastSearchConfig::CopyFrom(const FastSearchConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastSearchConfig::IsInitialized() const {

  return true;
}

void FastSearchConfig::Swap(FastSearchConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(options_, other->options_);
    std::swap(charmansvc_, other->charmansvc_);
    std::swap(enableremoting_, other->enableremoting_);
    std::swap(enablefastpsd_, other->enablefastpsd_);
    std::swap(fastpsdperiod_, other->fastpsdperiod_);
    std::swap(dbactive_, other->dbactive_);
    std::swap(dbuser_, other->dbuser_);
    std::swap(dbname_, other->dbname_);
    std::swap(dbhost_, other->dbhost_);
    std::swap(archivenumber_, other->archivenumber_);
    std::swap(archivesize_, other->archivesize_);
    std::swap(geo_enabled_, other->geo_enabled_);
    std::swap(auto_process_, other->auto_process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FastSearchConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FastSearchConfig_descriptor_;
  metadata.reflection = FastSearchConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* FastSearchState::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int FastSearchState::kMsgNameFieldNumber;
const int FastSearchState::kSearchFieldNumber;
#endif  // !_MSC_VER

FastSearchState::FastSearchState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FastSearchState::InitAsDefaultInstance() {
}

FastSearchState::FastSearchState(const FastSearchState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FastSearchState::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  search_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FastSearchState::~FastSearchState() {
  SharedDtor();
}

void FastSearchState::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void FastSearchState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FastSearchState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FastSearchState_descriptor_;
}

const FastSearchState& FastSearchState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

FastSearchState* FastSearchState::default_instance_ = NULL;

FastSearchState* FastSearchState::New() const {
  return new FastSearchState;
}

void FastSearchState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    search_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FastSearchState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "FAST_SEARCH_STATE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_search;
        break;
      }

      // optional bool search = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_search:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &search_)));
          set_has_search();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FastSearchState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "FAST_SEARCH_STATE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool search = 2 [default = true];
  if (has_search()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->search(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FastSearchState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "FAST_SEARCH_STATE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool search = 2 [default = true];
  if (has_search()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->search(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FastSearchState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "FAST_SEARCH_STATE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool search = 2 [default = true];
    if (has_search()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FastSearchState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FastSearchState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FastSearchState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FastSearchState::MergeFrom(const FastSearchState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_search()) {
      set_search(from.search());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FastSearchState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastSearchState::CopyFrom(const FastSearchState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastSearchState::IsInitialized() const {

  return true;
}

void FastSearchState::Swap(FastSearchState* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(search_, other->search_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FastSearchState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FastSearchState_descriptor_;
  metadata.reflection = FastSearchState_reflection_;
  return metadata;
}


// ===================================================================

::std::string* NewFastScan::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int NewFastScan::kMsgNameFieldNumber;
const int NewFastScan::kJ1970TimeFieldNumber;
const int NewFastScan::kChannelFieldNumber;
#endif  // !_MSC_VER

NewFastScan::NewFastScan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewFastScan::InitAsDefaultInstance() {
}

NewFastScan::NewFastScan(const NewFastScan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewFastScan::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  j1970time_ = 0;
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewFastScan::~NewFastScan() {
  SharedDtor();
}

void NewFastScan::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void NewFastScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewFastScan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewFastScan_descriptor_;
}

const NewFastScan& NewFastScan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

NewFastScan* NewFastScan::default_instance_ = NULL;

NewFastScan* NewFastScan::New() const {
  return new NewFastScan;
}

void NewFastScan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    j1970time_ = 0;
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewFastScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "NEW_FAST_SCAN"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_j1970Time;
        break;
      }

      // optional double j1970Time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_j1970Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &j1970time_)));
          set_has_j1970time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel;
        break;
      }

      // optional int32 channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewFastScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "NEW_FAST_SCAN"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double j1970Time = 2;
  if (has_j1970time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->j1970time(), output);
  }

  // optional int32 channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewFastScan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "NEW_FAST_SCAN"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double j1970Time = 2;
  if (has_j1970time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->j1970time(), target);
  }

  // optional int32 channel = 3;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewFastScan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "NEW_FAST_SCAN"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double j1970Time = 2;
    if (has_j1970time()) {
      total_size += 1 + 8;
    }

    // optional int32 channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewFastScan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewFastScan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewFastScan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewFastScan::MergeFrom(const NewFastScan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_j1970time()) {
      set_j1970time(from.j1970time());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewFastScan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewFastScan::CopyFrom(const NewFastScan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewFastScan::IsInitialized() const {

  return true;
}

void NewFastScan::Swap(NewFastScan* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(j1970time_, other->j1970time_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewFastScan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewFastScan_descriptor_;
  metadata.reflection = NewFastScan_reflection_;
  return metadata;
}


// ===================================================================

::std::string* MissionManConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int MissionManConfig::kMsgNameFieldNumber;
const int MissionManConfig::kDbHostFieldNumber;
const int MissionManConfig::kDbUserFieldNumber;
const int MissionManConfig::kDbNameFieldNumber;
const int MissionManConfig::kDbPortFieldNumber;
const int MissionManConfig::kStarttunernumFieldNumber;
const int MissionManConfig::kNumarcsFieldNumber;
const int MissionManConfig::kArcspreadFieldNumber;
#endif  // !_MSC_VER

MissionManConfig::MissionManConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionManConfig::InitAsDefaultInstance() {
}

MissionManConfig::MissionManConfig(const MissionManConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionManConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  dbhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbport_ = 0;
  starttunernum_ = 1;
  numarcs_ = 0;
  arcspread_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionManConfig::~MissionManConfig() {
  SharedDtor();
}

void MissionManConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (dbhost_ != &::google::protobuf::internal::kEmptyString) {
    delete dbhost_;
  }
  if (dbuser_ != &::google::protobuf::internal::kEmptyString) {
    delete dbuser_;
  }
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    delete dbname_;
  }
  if (arcspread_ != &::google::protobuf::internal::kEmptyString) {
    delete arcspread_;
  }
  if (this != default_instance_) {
  }
}

void MissionManConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionManConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionManConfig_descriptor_;
}

const MissionManConfig& MissionManConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

MissionManConfig* MissionManConfig::default_instance_ = NULL;

MissionManConfig* MissionManConfig::New() const {
  return new MissionManConfig;
}

void MissionManConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_dbhost()) {
      if (dbhost_ != &::google::protobuf::internal::kEmptyString) {
        dbhost_->clear();
      }
    }
    if (has_dbuser()) {
      if (dbuser_ != &::google::protobuf::internal::kEmptyString) {
        dbuser_->clear();
      }
    }
    if (has_dbname()) {
      if (dbname_ != &::google::protobuf::internal::kEmptyString) {
        dbname_->clear();
      }
    }
    dbport_ = 0;
    starttunernum_ = 1;
    numarcs_ = 0;
    if (has_arcspread()) {
      if (arcspread_ != &::google::protobuf::internal::kEmptyString) {
        arcspread_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionManConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "MISSION_MAN_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dbHost;
        break;
      }

      // optional string dbHost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbHost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbhost().data(), this->dbhost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dbUser;
        break;
      }

      // optional string dbUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbuser().data(), this->dbuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dbName;
        break;
      }

      // optional string dbName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbname().data(), this->dbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dbPort;
        break;
      }

      // optional int32 dbPort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dbPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dbport_)));
          set_has_dbport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_starttunernum;
        break;
      }

      // optional int32 starttunernum = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttunernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttunernum_)));
          set_has_starttunernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_numarcs;
        break;
      }

      // optional int32 numarcs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numarcs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numarcs_)));
          set_has_numarcs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_arcspread;
        break;
      }

      // optional string arcspread = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arcspread:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arcspread()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->arcspread().data(), this->arcspread().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionManConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "MISSION_MAN_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string dbHost = 2;
  if (has_dbhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbhost().data(), this->dbhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dbhost(), output);
  }

  // optional string dbUser = 3;
  if (has_dbuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbuser().data(), this->dbuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dbuser(), output);
  }

  // optional string dbName = 4;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dbname(), output);
  }

  // optional int32 dbPort = 5;
  if (has_dbport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dbport(), output);
  }

  // optional int32 starttunernum = 6 [default = 1];
  if (has_starttunernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->starttunernum(), output);
  }

  // optional int32 numarcs = 7;
  if (has_numarcs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->numarcs(), output);
  }

  // optional string arcspread = 8;
  if (has_arcspread()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arcspread().data(), this->arcspread().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->arcspread(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionManConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "MISSION_MAN_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string dbHost = 2;
  if (has_dbhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbhost().data(), this->dbhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dbhost(), target);
  }

  // optional string dbUser = 3;
  if (has_dbuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbuser().data(), this->dbuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dbuser(), target);
  }

  // optional string dbName = 4;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dbname(), target);
  }

  // optional int32 dbPort = 5;
  if (has_dbport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dbport(), target);
  }

  // optional int32 starttunernum = 6 [default = 1];
  if (has_starttunernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->starttunernum(), target);
  }

  // optional int32 numarcs = 7;
  if (has_numarcs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->numarcs(), target);
  }

  // optional string arcspread = 8;
  if (has_arcspread()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arcspread().data(), this->arcspread().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->arcspread(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionManConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "MISSION_MAN_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string dbHost = 2;
    if (has_dbhost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbhost());
    }

    // optional string dbUser = 3;
    if (has_dbuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbuser());
    }

    // optional string dbName = 4;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbname());
    }

    // optional int32 dbPort = 5;
    if (has_dbport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dbport());
    }

    // optional int32 starttunernum = 6 [default = 1];
    if (has_starttunernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttunernum());
    }

    // optional int32 numarcs = 7;
    if (has_numarcs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numarcs());
    }

    // optional string arcspread = 8;
    if (has_arcspread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arcspread());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionManConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionManConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionManConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionManConfig::MergeFrom(const MissionManConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_dbhost()) {
      set_dbhost(from.dbhost());
    }
    if (from.has_dbuser()) {
      set_dbuser(from.dbuser());
    }
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
    if (from.has_dbport()) {
      set_dbport(from.dbport());
    }
    if (from.has_starttunernum()) {
      set_starttunernum(from.starttunernum());
    }
    if (from.has_numarcs()) {
      set_numarcs(from.numarcs());
    }
    if (from.has_arcspread()) {
      set_arcspread(from.arcspread());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionManConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionManConfig::CopyFrom(const MissionManConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionManConfig::IsInitialized() const {

  return true;
}

void MissionManConfig::Swap(MissionManConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(dbhost_, other->dbhost_);
    std::swap(dbuser_, other->dbuser_);
    std::swap(dbname_, other->dbname_);
    std::swap(dbport_, other->dbport_);
    std::swap(starttunernum_, other->starttunernum_);
    std::swap(numarcs_, other->numarcs_);
    std::swap(arcspread_, other->arcspread_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionManConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionManConfig_descriptor_;
  metadata.reflection = MissionManConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProcMacroConfig_SystemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcMacroConfig_SystemType_descriptor_;
}
bool ProcMacroConfig_SystemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProcMacroConfig_SystemType ProcMacroConfig::SYSTEM_TYPE_UNK;
const ProcMacroConfig_SystemType ProcMacroConfig::SYSTEM_TYPE_SD;
const ProcMacroConfig_SystemType ProcMacroConfig::SYSTEM_TYPE_RF;
const ProcMacroConfig_SystemType ProcMacroConfig::SYSTEM_TYPE_VCN;
const ProcMacroConfig_SystemType ProcMacroConfig::SYSTEM_TYPE_BF;
const ProcMacroConfig_SystemType ProcMacroConfig::SYSTEM_TYPE_GF;
const ProcMacroConfig_SystemType ProcMacroConfig::SystemType_MIN;
const ProcMacroConfig_SystemType ProcMacroConfig::SystemType_MAX;
const int ProcMacroConfig::SystemType_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* ProcMacroConfig::_default_msgname_ = NULL;
::std::string* ProcMacroConfig::_default_geo_enabled_ = NULL;
#ifndef _MSC_VER
const int ProcMacroConfig::kMsgNameFieldNumber;
const int ProcMacroConfig::kOptionsFieldNumber;
const int ProcMacroConfig::kSysTypeFieldNumber;
const int ProcMacroConfig::kEnableICFieldNumber;
const int ProcMacroConfig::kTimeoutFieldNumber;
const int ProcMacroConfig::kSlaveTimeoutFieldNumber;
const int ProcMacroConfig::kExtraForkSvcFieldNumber;
const int ProcMacroConfig::kExtraForkChanFieldNumber;
const int ProcMacroConfig::kHealthRxPortFieldNumber;
const int ProcMacroConfig::kGeoEnabledFieldNumber;
const int ProcMacroConfig::kSoiNumsFieldNumber;
const int ProcMacroConfig::kAssociatedSOIsFieldNumber;
const int ProcMacroConfig::kAssocRepeatSecFieldNumber;
const int ProcMacroConfig::kProcTimeoutEnabledFieldNumber;
const int ProcMacroConfig::kProcTimeFieldNumber;
const int ProcMacroConfig::kBlacklistBWFieldNumber;
const int ProcMacroConfig::kBlacklistTimeFieldNumber;
const int ProcMacroConfig::kInitialTimeoutFieldNumber;
#endif  // !_MSC_VER

ProcMacroConfig::ProcMacroConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcMacroConfig::InitAsDefaultInstance() {
  options_ = const_cast< ::falcon_app_msg::MacroOptions*>(&::falcon_app_msg::MacroOptions::default_instance());
  extraforkchan_ = const_cast< ::falcon_common_msg::ExtraForkChannel*>(&::falcon_common_msg::ExtraForkChannel::default_instance());
}

ProcMacroConfig::ProcMacroConfig(const ProcMacroConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcMacroConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  options_ = NULL;
  systype_ = 2;
  enableic_ = false;
  timeout_ = 40;
  slavetimeout_ = 300;
  extraforksvc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extraforkchan_ = NULL;
  healthrxport_ = false;
  geo_enabled_ = const_cast< ::std::string*>(_default_geo_enabled_);
  assocrepeatsec_ = 1800;
  proctimeoutenabled_ = false;
  proctime_ = -1;
  blacklistbw_ = 0;
  blacklisttime_ = 0;
  initialtimeout_ = 600;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcMacroConfig::~ProcMacroConfig() {
  SharedDtor();
}

void ProcMacroConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (extraforksvc_ != &::google::protobuf::internal::kEmptyString) {
    delete extraforksvc_;
  }
  if (geo_enabled_ != _default_geo_enabled_) {
    delete geo_enabled_;
  }
  if (this != default_instance_) {
    delete options_;
    delete extraforkchan_;
  }
}

void ProcMacroConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcMacroConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcMacroConfig_descriptor_;
}

const ProcMacroConfig& ProcMacroConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

ProcMacroConfig* ProcMacroConfig::default_instance_ = NULL;

ProcMacroConfig* ProcMacroConfig::New() const {
  return new ProcMacroConfig;
}

void ProcMacroConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_options()) {
      if (options_ != NULL) options_->::falcon_app_msg::MacroOptions::Clear();
    }
    systype_ = 2;
    enableic_ = false;
    timeout_ = 40;
    slavetimeout_ = 300;
    if (has_extraforksvc()) {
      if (extraforksvc_ != &::google::protobuf::internal::kEmptyString) {
        extraforksvc_->clear();
      }
    }
    if (has_extraforkchan()) {
      if (extraforkchan_ != NULL) extraforkchan_->::falcon_common_msg::ExtraForkChannel::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    healthrxport_ = false;
    if (has_geo_enabled()) {
      if (geo_enabled_ != _default_geo_enabled_) {
        geo_enabled_->assign(*_default_geo_enabled_);
      }
    }
    assocrepeatsec_ = 1800;
    proctimeoutenabled_ = false;
    proctime_ = -1;
    blacklistbw_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    blacklisttime_ = 0;
    initialtimeout_ = 600;
  }
  soinums_.Clear();
  associatedsois_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcMacroConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "PROC_MACRO_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .falcon_app_msg.MacroOptions options = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sysType;
        break;
      }

      // optional .falcon_app_msg.ProcMacroConfig.SystemType sysType = 3 [default = SYSTEM_TYPE_RF];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sysType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_app_msg::ProcMacroConfig_SystemType_IsValid(value)) {
            set_systype(static_cast< ::falcon_app_msg::ProcMacroConfig_SystemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enableIC;
        break;
      }

      // optional bool enableIC = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enableIC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableic_)));
          set_has_enableic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timeout;
        break;
      }

      // optional int32 timeout = 5 [default = 40];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_slaveTimeout;
        break;
      }

      // optional int32 slaveTimeout = 6 [default = 300];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slaveTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slavetimeout_)));
          set_has_slavetimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_extraForkSvc;
        break;
      }

      // optional string extraForkSvc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extraForkSvc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extraforksvc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extraforksvc().data(), this->extraforksvc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_extraForkChan;
        break;
      }

      // optional .falcon_common_msg.ExtraForkChannel extraForkChan = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extraForkChan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extraforkchan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_healthRxPort;
        break;
      }

      // optional bool healthRxPort = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_healthRxPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &healthrxport_)));
          set_has_healthrxport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_geo_enabled;
        break;
      }

      // optional string geo_enabled = 10 [default = "OFF"];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo_enabled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geo_enabled()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geo_enabled().data(), this->geo_enabled().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_soiNums;
        break;
      }

      // repeated string soiNums = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soiNums:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_soinums()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soinums(this->soinums_size() - 1).data(),
            this->soinums(this->soinums_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_soiNums;
        if (input->ExpectTag(98)) goto parse_associatedSOIs;
        break;
      }

      // repeated string associatedSOIs = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_associatedSOIs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_associatedsois()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->associatedsois(this->associatedsois_size() - 1).data(),
            this->associatedsois(this->associatedsois_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_associatedSOIs;
        if (input->ExpectTag(104)) goto parse_assocRepeatSec;
        break;
      }

      // optional int32 assocRepeatSec = 13 [default = 1800];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assocRepeatSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assocrepeatsec_)));
          set_has_assocrepeatsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_procTimeoutEnabled;
        break;
      }

      // optional bool procTimeoutEnabled = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_procTimeoutEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &proctimeoutenabled_)));
          set_has_proctimeoutenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_procTime;
        break;
      }

      // optional int32 procTime = 15 [default = -1];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_procTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proctime_)));
          set_has_proctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_blacklistBW;
        break;
      }

      // optional int32 blacklistBW = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blacklistBW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blacklistbw_)));
          set_has_blacklistbw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_blacklistTime;
        break;
      }

      // optional int32 blacklistTime = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blacklistTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blacklisttime_)));
          set_has_blacklisttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_initialTimeout;
        break;
      }

      // optional int32 initialTimeout = 18 [default = 600];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initialTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initialtimeout_)));
          set_has_initialtimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcMacroConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "PROC_MACRO_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .falcon_app_msg.MacroOptions options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->options(), output);
  }

  // optional .falcon_app_msg.ProcMacroConfig.SystemType sysType = 3 [default = SYSTEM_TYPE_RF];
  if (has_systype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->systype(), output);
  }

  // optional bool enableIC = 4 [default = false];
  if (has_enableic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enableic(), output);
  }

  // optional int32 timeout = 5 [default = 40];
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timeout(), output);
  }

  // optional int32 slaveTimeout = 6 [default = 300];
  if (has_slavetimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->slavetimeout(), output);
  }

  // optional string extraForkSvc = 7;
  if (has_extraforksvc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extraforksvc().data(), this->extraforksvc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->extraforksvc(), output);
  }

  // optional .falcon_common_msg.ExtraForkChannel extraForkChan = 8;
  if (has_extraforkchan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->extraforkchan(), output);
  }

  // optional bool healthRxPort = 9 [default = false];
  if (has_healthrxport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->healthrxport(), output);
  }

  // optional string geo_enabled = 10 [default = "OFF"];
  if (has_geo_enabled()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geo_enabled().data(), this->geo_enabled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->geo_enabled(), output);
  }

  // repeated string soiNums = 11;
  for (int i = 0; i < this->soinums_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->soinums(i).data(), this->soinums(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->soinums(i), output);
  }

  // repeated string associatedSOIs = 12;
  for (int i = 0; i < this->associatedsois_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->associatedsois(i).data(), this->associatedsois(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->associatedsois(i), output);
  }

  // optional int32 assocRepeatSec = 13 [default = 1800];
  if (has_assocrepeatsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->assocrepeatsec(), output);
  }

  // optional bool procTimeoutEnabled = 14 [default = false];
  if (has_proctimeoutenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->proctimeoutenabled(), output);
  }

  // optional int32 procTime = 15 [default = -1];
  if (has_proctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->proctime(), output);
  }

  // optional int32 blacklistBW = 16;
  if (has_blacklistbw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->blacklistbw(), output);
  }

  // optional int32 blacklistTime = 17 [default = 0];
  if (has_blacklisttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->blacklisttime(), output);
  }

  // optional int32 initialTimeout = 18 [default = 600];
  if (has_initialtimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->initialtimeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcMacroConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "PROC_MACRO_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .falcon_app_msg.MacroOptions options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->options(), target);
  }

  // optional .falcon_app_msg.ProcMacroConfig.SystemType sysType = 3 [default = SYSTEM_TYPE_RF];
  if (has_systype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->systype(), target);
  }

  // optional bool enableIC = 4 [default = false];
  if (has_enableic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enableic(), target);
  }

  // optional int32 timeout = 5 [default = 40];
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timeout(), target);
  }

  // optional int32 slaveTimeout = 6 [default = 300];
  if (has_slavetimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->slavetimeout(), target);
  }

  // optional string extraForkSvc = 7;
  if (has_extraforksvc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extraforksvc().data(), this->extraforksvc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->extraforksvc(), target);
  }

  // optional .falcon_common_msg.ExtraForkChannel extraForkChan = 8;
  if (has_extraforkchan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->extraforkchan(), target);
  }

  // optional bool healthRxPort = 9 [default = false];
  if (has_healthrxport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->healthrxport(), target);
  }

  // optional string geo_enabled = 10 [default = "OFF"];
  if (has_geo_enabled()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geo_enabled().data(), this->geo_enabled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->geo_enabled(), target);
  }

  // repeated string soiNums = 11;
  for (int i = 0; i < this->soinums_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinums(i).data(), this->soinums(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->soinums(i), target);
  }

  // repeated string associatedSOIs = 12;
  for (int i = 0; i < this->associatedsois_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->associatedsois(i).data(), this->associatedsois(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->associatedsois(i), target);
  }

  // optional int32 assocRepeatSec = 13 [default = 1800];
  if (has_assocrepeatsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->assocrepeatsec(), target);
  }

  // optional bool procTimeoutEnabled = 14 [default = false];
  if (has_proctimeoutenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->proctimeoutenabled(), target);
  }

  // optional int32 procTime = 15 [default = -1];
  if (has_proctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->proctime(), target);
  }

  // optional int32 blacklistBW = 16;
  if (has_blacklistbw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->blacklistbw(), target);
  }

  // optional int32 blacklistTime = 17 [default = 0];
  if (has_blacklisttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->blacklisttime(), target);
  }

  // optional int32 initialTimeout = 18 [default = 600];
  if (has_initialtimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->initialtimeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcMacroConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "PROC_MACRO_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .falcon_app_msg.MacroOptions options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

    // optional .falcon_app_msg.ProcMacroConfig.SystemType sysType = 3 [default = SYSTEM_TYPE_RF];
    if (has_systype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->systype());
    }

    // optional bool enableIC = 4 [default = false];
    if (has_enableic()) {
      total_size += 1 + 1;
    }

    // optional int32 timeout = 5 [default = 40];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }

    // optional int32 slaveTimeout = 6 [default = 300];
    if (has_slavetimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slavetimeout());
    }

    // optional string extraForkSvc = 7;
    if (has_extraforksvc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extraforksvc());
    }

    // optional .falcon_common_msg.ExtraForkChannel extraForkChan = 8;
    if (has_extraforkchan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extraforkchan());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool healthRxPort = 9 [default = false];
    if (has_healthrxport()) {
      total_size += 1 + 1;
    }

    // optional string geo_enabled = 10 [default = "OFF"];
    if (has_geo_enabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geo_enabled());
    }

    // optional int32 assocRepeatSec = 13 [default = 1800];
    if (has_assocrepeatsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assocrepeatsec());
    }

    // optional bool procTimeoutEnabled = 14 [default = false];
    if (has_proctimeoutenabled()) {
      total_size += 1 + 1;
    }

    // optional int32 procTime = 15 [default = -1];
    if (has_proctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proctime());
    }

    // optional int32 blacklistBW = 16;
    if (has_blacklistbw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blacklistbw());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 blacklistTime = 17 [default = 0];
    if (has_blacklisttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blacklisttime());
    }

    // optional int32 initialTimeout = 18 [default = 600];
    if (has_initialtimeout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initialtimeout());
    }

  }
  // repeated string soiNums = 11;
  total_size += 1 * this->soinums_size();
  for (int i = 0; i < this->soinums_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->soinums(i));
  }

  // repeated string associatedSOIs = 12;
  total_size += 1 * this->associatedsois_size();
  for (int i = 0; i < this->associatedsois_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->associatedsois(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcMacroConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcMacroConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcMacroConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcMacroConfig::MergeFrom(const ProcMacroConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  soinums_.MergeFrom(from.soinums_);
  associatedsois_.MergeFrom(from.associatedsois_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_options()) {
      mutable_options()->::falcon_app_msg::MacroOptions::MergeFrom(from.options());
    }
    if (from.has_systype()) {
      set_systype(from.systype());
    }
    if (from.has_enableic()) {
      set_enableic(from.enableic());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_slavetimeout()) {
      set_slavetimeout(from.slavetimeout());
    }
    if (from.has_extraforksvc()) {
      set_extraforksvc(from.extraforksvc());
    }
    if (from.has_extraforkchan()) {
      mutable_extraforkchan()->::falcon_common_msg::ExtraForkChannel::MergeFrom(from.extraforkchan());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_healthrxport()) {
      set_healthrxport(from.healthrxport());
    }
    if (from.has_geo_enabled()) {
      set_geo_enabled(from.geo_enabled());
    }
    if (from.has_assocrepeatsec()) {
      set_assocrepeatsec(from.assocrepeatsec());
    }
    if (from.has_proctimeoutenabled()) {
      set_proctimeoutenabled(from.proctimeoutenabled());
    }
    if (from.has_proctime()) {
      set_proctime(from.proctime());
    }
    if (from.has_blacklistbw()) {
      set_blacklistbw(from.blacklistbw());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_blacklisttime()) {
      set_blacklisttime(from.blacklisttime());
    }
    if (from.has_initialtimeout()) {
      set_initialtimeout(from.initialtimeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcMacroConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcMacroConfig::CopyFrom(const ProcMacroConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcMacroConfig::IsInitialized() const {

  return true;
}

void ProcMacroConfig::Swap(ProcMacroConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(options_, other->options_);
    std::swap(systype_, other->systype_);
    std::swap(enableic_, other->enableic_);
    std::swap(timeout_, other->timeout_);
    std::swap(slavetimeout_, other->slavetimeout_);
    std::swap(extraforksvc_, other->extraforksvc_);
    std::swap(extraforkchan_, other->extraforkchan_);
    std::swap(healthrxport_, other->healthrxport_);
    std::swap(geo_enabled_, other->geo_enabled_);
    soinums_.Swap(&other->soinums_);
    associatedsois_.Swap(&other->associatedsois_);
    std::swap(assocrepeatsec_, other->assocrepeatsec_);
    std::swap(proctimeoutenabled_, other->proctimeoutenabled_);
    std::swap(proctime_, other->proctime_);
    std::swap(blacklistbw_, other->blacklistbw_);
    std::swap(blacklisttime_, other->blacklisttime_);
    std::swap(initialtimeout_, other->initialtimeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcMacroConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcMacroConfig_descriptor_;
  metadata.reflection = ProcMacroConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* WidebandRecordConfig::_default_msgname_ = NULL;
::std::string* WidebandRecordConfig::_default_geo_enabled_ = NULL;
#ifndef _MSC_VER
const int WidebandRecordConfig::kMsgNameFieldNumber;
const int WidebandRecordConfig::kOptionsFieldNumber;
const int WidebandRecordConfig::kHealthRxPortFieldNumber;
const int WidebandRecordConfig::kGeoEnabledFieldNumber;
#endif  // !_MSC_VER

WidebandRecordConfig::WidebandRecordConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WidebandRecordConfig::InitAsDefaultInstance() {
  options_ = const_cast< ::falcon_app_msg::MacroOptions*>(&::falcon_app_msg::MacroOptions::default_instance());
}

WidebandRecordConfig::WidebandRecordConfig(const WidebandRecordConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WidebandRecordConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  options_ = NULL;
  healthrxport_ = false;
  geo_enabled_ = const_cast< ::std::string*>(_default_geo_enabled_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WidebandRecordConfig::~WidebandRecordConfig() {
  SharedDtor();
}

void WidebandRecordConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (geo_enabled_ != _default_geo_enabled_) {
    delete geo_enabled_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void WidebandRecordConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WidebandRecordConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WidebandRecordConfig_descriptor_;
}

const WidebandRecordConfig& WidebandRecordConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

WidebandRecordConfig* WidebandRecordConfig::default_instance_ = NULL;

WidebandRecordConfig* WidebandRecordConfig::New() const {
  return new WidebandRecordConfig;
}

void WidebandRecordConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_options()) {
      if (options_ != NULL) options_->::falcon_app_msg::MacroOptions::Clear();
    }
    healthrxport_ = false;
    if (has_geo_enabled()) {
      if (geo_enabled_ != _default_geo_enabled_) {
        geo_enabled_->assign(*_default_geo_enabled_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WidebandRecordConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "WIDEBAND_RECORD_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .falcon_app_msg.MacroOptions options = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_healthRxPort;
        break;
      }

      // optional bool healthRxPort = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_healthRxPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &healthrxport_)));
          set_has_healthrxport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_geo_enabled;
        break;
      }

      // optional string geo_enabled = 4 [default = "OFF"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo_enabled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geo_enabled()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geo_enabled().data(), this->geo_enabled().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WidebandRecordConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "WIDEBAND_RECORD_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .falcon_app_msg.MacroOptions options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->options(), output);
  }

  // optional bool healthRxPort = 3 [default = false];
  if (has_healthrxport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->healthrxport(), output);
  }

  // optional string geo_enabled = 4 [default = "OFF"];
  if (has_geo_enabled()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geo_enabled().data(), this->geo_enabled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->geo_enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WidebandRecordConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "WIDEBAND_RECORD_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .falcon_app_msg.MacroOptions options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->options(), target);
  }

  // optional bool healthRxPort = 3 [default = false];
  if (has_healthrxport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->healthrxport(), target);
  }

  // optional string geo_enabled = 4 [default = "OFF"];
  if (has_geo_enabled()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geo_enabled().data(), this->geo_enabled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->geo_enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WidebandRecordConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "WIDEBAND_RECORD_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .falcon_app_msg.MacroOptions options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

    // optional bool healthRxPort = 3 [default = false];
    if (has_healthrxport()) {
      total_size += 1 + 1;
    }

    // optional string geo_enabled = 4 [default = "OFF"];
    if (has_geo_enabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geo_enabled());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WidebandRecordConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WidebandRecordConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WidebandRecordConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WidebandRecordConfig::MergeFrom(const WidebandRecordConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_options()) {
      mutable_options()->::falcon_app_msg::MacroOptions::MergeFrom(from.options());
    }
    if (from.has_healthrxport()) {
      set_healthrxport(from.healthrxport());
    }
    if (from.has_geo_enabled()) {
      set_geo_enabled(from.geo_enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WidebandRecordConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WidebandRecordConfig::CopyFrom(const WidebandRecordConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WidebandRecordConfig::IsInitialized() const {

  return true;
}

void WidebandRecordConfig::Swap(WidebandRecordConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(options_, other->options_);
    std::swap(healthrxport_, other->healthrxport_);
    std::swap(geo_enabled_, other->geo_enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WidebandRecordConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WidebandRecordConfig_descriptor_;
  metadata.reflection = WidebandRecordConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* HealthCheckConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int HealthCheckConfig::kMsgNameFieldNumber;
const int HealthCheckConfig::kOptionsFieldNumber;
#endif  // !_MSC_VER

HealthCheckConfig::HealthCheckConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HealthCheckConfig::InitAsDefaultInstance() {
  options_ = const_cast< ::falcon_app_msg::MacroOptions*>(&::falcon_app_msg::MacroOptions::default_instance());
}

HealthCheckConfig::HealthCheckConfig(const HealthCheckConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HealthCheckConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HealthCheckConfig::~HealthCheckConfig() {
  SharedDtor();
}

void HealthCheckConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void HealthCheckConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthCheckConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HealthCheckConfig_descriptor_;
}

const HealthCheckConfig& HealthCheckConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

HealthCheckConfig* HealthCheckConfig::default_instance_ = NULL;

HealthCheckConfig* HealthCheckConfig::New() const {
  return new HealthCheckConfig;
}

void HealthCheckConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_options()) {
      if (options_ != NULL) options_->::falcon_app_msg::MacroOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HealthCheckConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "HEALTH_CHECK_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .falcon_app_msg.MacroOptions options = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HealthCheckConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "HEALTH_CHECK_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .falcon_app_msg.MacroOptions options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HealthCheckConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "HEALTH_CHECK_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .falcon_app_msg.MacroOptions options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HealthCheckConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "HEALTH_CHECK_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .falcon_app_msg.MacroOptions options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthCheckConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HealthCheckConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HealthCheckConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HealthCheckConfig::MergeFrom(const HealthCheckConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_options()) {
      mutable_options()->::falcon_app_msg::MacroOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HealthCheckConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheckConfig::CopyFrom(const HealthCheckConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckConfig::IsInitialized() const {

  return true;
}

void HealthCheckConfig::Swap(HealthCheckConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HealthCheckConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HealthCheckConfig_descriptor_;
  metadata.reflection = HealthCheckConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* MmsHealthConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int MmsHealthConfig::kMsgNameFieldNumber;
const int MmsHealthConfig::kOptionsFieldNumber;
#endif  // !_MSC_VER

MmsHealthConfig::MmsHealthConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MmsHealthConfig::InitAsDefaultInstance() {
  options_ = const_cast< ::falcon_app_msg::MacroOptions*>(&::falcon_app_msg::MacroOptions::default_instance());
}

MmsHealthConfig::MmsHealthConfig(const MmsHealthConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MmsHealthConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MmsHealthConfig::~MmsHealthConfig() {
  SharedDtor();
}

void MmsHealthConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void MmsHealthConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MmsHealthConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MmsHealthConfig_descriptor_;
}

const MmsHealthConfig& MmsHealthConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

MmsHealthConfig* MmsHealthConfig::default_instance_ = NULL;

MmsHealthConfig* MmsHealthConfig::New() const {
  return new MmsHealthConfig;
}

void MmsHealthConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_options()) {
      if (options_ != NULL) options_->::falcon_app_msg::MacroOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MmsHealthConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "MMS_HEALTH_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .falcon_app_msg.MacroOptions options = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MmsHealthConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "MMS_HEALTH_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .falcon_app_msg.MacroOptions options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MmsHealthConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "MMS_HEALTH_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .falcon_app_msg.MacroOptions options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MmsHealthConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "MMS_HEALTH_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .falcon_app_msg.MacroOptions options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MmsHealthConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MmsHealthConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MmsHealthConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MmsHealthConfig::MergeFrom(const MmsHealthConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_options()) {
      mutable_options()->::falcon_app_msg::MacroOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MmsHealthConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MmsHealthConfig::CopyFrom(const MmsHealthConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmsHealthConfig::IsInitialized() const {

  return true;
}

void MmsHealthConfig::Swap(MmsHealthConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MmsHealthConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MmsHealthConfig_descriptor_;
  metadata.reflection = MmsHealthConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* NoiseTestConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int NoiseTestConfig::kMsgNameFieldNumber;
const int NoiseTestConfig::kOptionsFieldNumber;
#endif  // !_MSC_VER

NoiseTestConfig::NoiseTestConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NoiseTestConfig::InitAsDefaultInstance() {
  options_ = const_cast< ::falcon_app_msg::MacroOptions*>(&::falcon_app_msg::MacroOptions::default_instance());
}

NoiseTestConfig::NoiseTestConfig(const NoiseTestConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NoiseTestConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoiseTestConfig::~NoiseTestConfig() {
  SharedDtor();
}

void NoiseTestConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void NoiseTestConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoiseTestConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoiseTestConfig_descriptor_;
}

const NoiseTestConfig& NoiseTestConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

NoiseTestConfig* NoiseTestConfig::default_instance_ = NULL;

NoiseTestConfig* NoiseTestConfig::New() const {
  return new NoiseTestConfig;
}

void NoiseTestConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_options()) {
      if (options_ != NULL) options_->::falcon_app_msg::MacroOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoiseTestConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "NOISE_TEST_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .falcon_app_msg.MacroOptions options = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NoiseTestConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "NOISE_TEST_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .falcon_app_msg.MacroOptions options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NoiseTestConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "NOISE_TEST_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .falcon_app_msg.MacroOptions options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NoiseTestConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "NOISE_TEST_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .falcon_app_msg.MacroOptions options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoiseTestConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoiseTestConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoiseTestConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoiseTestConfig::MergeFrom(const NoiseTestConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_options()) {
      mutable_options()->::falcon_app_msg::MacroOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoiseTestConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoiseTestConfig::CopyFrom(const NoiseTestConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoiseTestConfig::IsInitialized() const {

  return true;
}

void NoiseTestConfig::Swap(NoiseTestConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoiseTestConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoiseTestConfig_descriptor_;
  metadata.reflection = NoiseTestConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GpsHealthConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GpsHealthConfig::kMsgNameFieldNumber;
const int GpsHealthConfig::kOptionsFieldNumber;
#endif  // !_MSC_VER

GpsHealthConfig::GpsHealthConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GpsHealthConfig::InitAsDefaultInstance() {
  options_ = const_cast< ::falcon_app_msg::MacroOptions*>(&::falcon_app_msg::MacroOptions::default_instance());
}

GpsHealthConfig::GpsHealthConfig(const GpsHealthConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GpsHealthConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GpsHealthConfig::~GpsHealthConfig() {
  SharedDtor();
}

void GpsHealthConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void GpsHealthConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GpsHealthConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpsHealthConfig_descriptor_;
}

const GpsHealthConfig& GpsHealthConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

GpsHealthConfig* GpsHealthConfig::default_instance_ = NULL;

GpsHealthConfig* GpsHealthConfig::New() const {
  return new GpsHealthConfig;
}

void GpsHealthConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_options()) {
      if (options_ != NULL) options_->::falcon_app_msg::MacroOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GpsHealthConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GPS_HEALTH_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .falcon_app_msg.MacroOptions options = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GpsHealthConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GPS_HEALTH_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .falcon_app_msg.MacroOptions options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GpsHealthConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GPS_HEALTH_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .falcon_app_msg.MacroOptions options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GpsHealthConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GPS_HEALTH_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .falcon_app_msg.MacroOptions options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpsHealthConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GpsHealthConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GpsHealthConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GpsHealthConfig::MergeFrom(const GpsHealthConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_options()) {
      mutable_options()->::falcon_app_msg::MacroOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GpsHealthConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsHealthConfig::CopyFrom(const GpsHealthConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsHealthConfig::IsInitialized() const {

  return true;
}

void GpsHealthConfig::Swap(GpsHealthConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GpsHealthConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GpsHealthConfig_descriptor_;
  metadata.reflection = GpsHealthConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* AntennaControlConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int AntennaControlConfig::kMsgNameFieldNumber;
#endif  // !_MSC_VER

AntennaControlConfig::AntennaControlConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AntennaControlConfig::InitAsDefaultInstance() {
}

AntennaControlConfig::AntennaControlConfig(const AntennaControlConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AntennaControlConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AntennaControlConfig::~AntennaControlConfig() {
  SharedDtor();
}

void AntennaControlConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void AntennaControlConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AntennaControlConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AntennaControlConfig_descriptor_;
}

const AntennaControlConfig& AntennaControlConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

AntennaControlConfig* AntennaControlConfig::default_instance_ = NULL;

AntennaControlConfig* AntennaControlConfig::New() const {
  return new AntennaControlConfig;
}

void AntennaControlConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AntennaControlConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ANTENNA_CONTROL"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AntennaControlConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ANTENNA_CONTROL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AntennaControlConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ANTENNA_CONTROL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AntennaControlConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ANTENNA_CONTROL"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AntennaControlConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AntennaControlConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AntennaControlConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AntennaControlConfig::MergeFrom(const AntennaControlConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AntennaControlConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AntennaControlConfig::CopyFrom(const AntennaControlConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaControlConfig::IsInitialized() const {

  return true;
}

void AntennaControlConfig::Swap(AntennaControlConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AntennaControlConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AntennaControlConfig_descriptor_;
  metadata.reflection = AntennaControlConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* VcnConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int VcnConfig::kMsgNameFieldNumber;
#endif  // !_MSC_VER

VcnConfig::VcnConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VcnConfig::InitAsDefaultInstance() {
}

VcnConfig::VcnConfig(const VcnConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VcnConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VcnConfig::~VcnConfig() {
  SharedDtor();
}

void VcnConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void VcnConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VcnConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VcnConfig_descriptor_;
}

const VcnConfig& VcnConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

VcnConfig* VcnConfig::default_instance_ = NULL;

VcnConfig* VcnConfig::New() const {
  return new VcnConfig;
}

void VcnConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VcnConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "VCN_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VcnConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "VCN_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VcnConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "VCN_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VcnConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "VCN_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VcnConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VcnConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VcnConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VcnConfig::MergeFrom(const VcnConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VcnConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VcnConfig::CopyFrom(const VcnConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VcnConfig::IsInitialized() const {

  return true;
}

void VcnConfig::Swap(VcnConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VcnConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VcnConfig_descriptor_;
  metadata.reflection = VcnConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GenericMacroConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GenericMacroConfig::kMsgNameFieldNumber;
#endif  // !_MSC_VER

GenericMacroConfig::GenericMacroConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GenericMacroConfig::InitAsDefaultInstance() {
}

GenericMacroConfig::GenericMacroConfig(const GenericMacroConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GenericMacroConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenericMacroConfig::~GenericMacroConfig() {
  SharedDtor();
}

void GenericMacroConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void GenericMacroConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericMacroConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericMacroConfig_descriptor_;
}

const GenericMacroConfig& GenericMacroConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

GenericMacroConfig* GenericMacroConfig::default_instance_ = NULL;

GenericMacroConfig* GenericMacroConfig::New() const {
  return new GenericMacroConfig;
}

void GenericMacroConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenericMacroConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GENERIC_MACRO_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenericMacroConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GENERIC_MACRO_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenericMacroConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GENERIC_MACRO_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenericMacroConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GENERIC_MACRO_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericMacroConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenericMacroConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenericMacroConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenericMacroConfig::MergeFrom(const GenericMacroConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenericMacroConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericMacroConfig::CopyFrom(const GenericMacroConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericMacroConfig::IsInitialized() const {

  return true;
}

void GenericMacroConfig::Swap(GenericMacroConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenericMacroConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericMacroConfig_descriptor_;
  metadata.reflection = GenericMacroConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SettingsConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SettingsConfig::kMsgNameFieldNumber;
#endif  // !_MSC_VER

SettingsConfig::SettingsConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SettingsConfig::InitAsDefaultInstance() {
}

SettingsConfig::SettingsConfig(const SettingsConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SettingsConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SettingsConfig::~SettingsConfig() {
  SharedDtor();
}

void SettingsConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void SettingsConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SettingsConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettingsConfig_descriptor_;
}

const SettingsConfig& SettingsConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

SettingsConfig* SettingsConfig::default_instance_ = NULL;

SettingsConfig* SettingsConfig::New() const {
  return new SettingsConfig;
}

void SettingsConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SettingsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SETTINGS_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SettingsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SETTINGS_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SettingsConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SETTINGS_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SettingsConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SETTINGS_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SettingsConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SettingsConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SettingsConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SettingsConfig::MergeFrom(const SettingsConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SettingsConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingsConfig::CopyFrom(const SettingsConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsConfig::IsInitialized() const {

  return true;
}

void SettingsConfig::Swap(SettingsConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SettingsConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SettingsConfig_descriptor_;
  metadata.reflection = SettingsConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* KepSvisorConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int KepSvisorConfig::kMsgNameFieldNumber;
#endif  // !_MSC_VER

KepSvisorConfig::KepSvisorConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KepSvisorConfig::InitAsDefaultInstance() {
}

KepSvisorConfig::KepSvisorConfig(const KepSvisorConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KepSvisorConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KepSvisorConfig::~KepSvisorConfig() {
  SharedDtor();
}

void KepSvisorConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void KepSvisorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KepSvisorConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KepSvisorConfig_descriptor_;
}

const KepSvisorConfig& KepSvisorConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

KepSvisorConfig* KepSvisorConfig::default_instance_ = NULL;

KepSvisorConfig* KepSvisorConfig::New() const {
  return new KepSvisorConfig;
}

void KepSvisorConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KepSvisorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "KEP_SVISOR_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KepSvisorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "KEP_SVISOR_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KepSvisorConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "KEP_SVISOR_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KepSvisorConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "KEP_SVISOR_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KepSvisorConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KepSvisorConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KepSvisorConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KepSvisorConfig::MergeFrom(const KepSvisorConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KepSvisorConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KepSvisorConfig::CopyFrom(const KepSvisorConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KepSvisorConfig::IsInitialized() const {

  return true;
}

void KepSvisorConfig::Swap(KepSvisorConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KepSvisorConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KepSvisorConfig_descriptor_;
  metadata.reflection = KepSvisorConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ZMQPubDemoConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ZMQPubDemoConfig::kMsgNameFieldNumber;
const int ZMQPubDemoConfig::kMaxRequestsFieldNumber;
const int ZMQPubDemoConfig::kAddressFieldNumber;
const int ZMQPubDemoConfig::kOptionsFieldNumber;
#endif  // !_MSC_VER

ZMQPubDemoConfig::ZMQPubDemoConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZMQPubDemoConfig::InitAsDefaultInstance() {
  options_ = const_cast< ::falcon_app_msg::MacroOptions*>(&::falcon_app_msg::MacroOptions::default_instance());
}

ZMQPubDemoConfig::ZMQPubDemoConfig(const ZMQPubDemoConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZMQPubDemoConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  maxrequests_ = 1;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZMQPubDemoConfig::~ZMQPubDemoConfig() {
  SharedDtor();
}

void ZMQPubDemoConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void ZMQPubDemoConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZMQPubDemoConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZMQPubDemoConfig_descriptor_;
}

const ZMQPubDemoConfig& ZMQPubDemoConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

ZMQPubDemoConfig* ZMQPubDemoConfig::default_instance_ = NULL;

ZMQPubDemoConfig* ZMQPubDemoConfig::New() const {
  return new ZMQPubDemoConfig;
}

void ZMQPubDemoConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    maxrequests_ = 1;
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_options()) {
      if (options_ != NULL) options_->::falcon_app_msg::MacroOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZMQPubDemoConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ZMQ_PUB_DEMO_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxRequests;
        break;
      }

      // optional int32 maxRequests = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxRequests:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrequests_)));
          set_has_maxrequests();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }

      // optional string address = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_options;
        break;
      }

      // optional .falcon_app_msg.MacroOptions options = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZMQPubDemoConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ZMQ_PUB_DEMO_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 maxRequests = 2 [default = 1];
  if (has_maxrequests()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxrequests(), output);
  }

  // optional string address = 3 [default = ""];
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->address(), output);
  }

  // optional .falcon_app_msg.MacroOptions options = 4;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZMQPubDemoConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ZMQ_PUB_DEMO_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 maxRequests = 2 [default = 1];
  if (has_maxrequests()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxrequests(), target);
  }

  // optional string address = 3 [default = ""];
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->address(), target);
  }

  // optional .falcon_app_msg.MacroOptions options = 4;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZMQPubDemoConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ZMQ_PUB_DEMO_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 maxRequests = 2 [default = 1];
    if (has_maxrequests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrequests());
    }

    // optional string address = 3 [default = ""];
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional .falcon_app_msg.MacroOptions options = 4;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZMQPubDemoConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZMQPubDemoConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZMQPubDemoConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZMQPubDemoConfig::MergeFrom(const ZMQPubDemoConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_maxrequests()) {
      set_maxrequests(from.maxrequests());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_options()) {
      mutable_options()->::falcon_app_msg::MacroOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZMQPubDemoConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZMQPubDemoConfig::CopyFrom(const ZMQPubDemoConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZMQPubDemoConfig::IsInitialized() const {

  return true;
}

void ZMQPubDemoConfig::Swap(ZMQPubDemoConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(maxrequests_, other->maxrequests_);
    std::swap(address_, other->address_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZMQPubDemoConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZMQPubDemoConfig_descriptor_;
  metadata.reflection = ZMQPubDemoConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ZMQSubDemoConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ZMQSubDemoConfig::kMsgNameFieldNumber;
const int ZMQSubDemoConfig::kMaxProductsFieldNumber;
const int ZMQSubDemoConfig::kAddressFieldNumber;
const int ZMQSubDemoConfig::kOptionsFieldNumber;
#endif  // !_MSC_VER

ZMQSubDemoConfig::ZMQSubDemoConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZMQSubDemoConfig::InitAsDefaultInstance() {
  options_ = const_cast< ::falcon_app_msg::MacroOptions*>(&::falcon_app_msg::MacroOptions::default_instance());
}

ZMQSubDemoConfig::ZMQSubDemoConfig(const ZMQSubDemoConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZMQSubDemoConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  maxproducts_ = 1;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZMQSubDemoConfig::~ZMQSubDemoConfig() {
  SharedDtor();
}

void ZMQSubDemoConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void ZMQSubDemoConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZMQSubDemoConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZMQSubDemoConfig_descriptor_;
}

const ZMQSubDemoConfig& ZMQSubDemoConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

ZMQSubDemoConfig* ZMQSubDemoConfig::default_instance_ = NULL;

ZMQSubDemoConfig* ZMQSubDemoConfig::New() const {
  return new ZMQSubDemoConfig;
}

void ZMQSubDemoConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    maxproducts_ = 1;
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_options()) {
      if (options_ != NULL) options_->::falcon_app_msg::MacroOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZMQSubDemoConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ZMQ_SUB_DEMO_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxProducts;
        break;
      }

      // optional int32 maxProducts = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxProducts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxproducts_)));
          set_has_maxproducts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }

      // optional string address = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_options;
        break;
      }

      // optional .falcon_app_msg.MacroOptions options = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZMQSubDemoConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ZMQ_SUB_DEMO_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 maxProducts = 2 [default = 1];
  if (has_maxproducts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxproducts(), output);
  }

  // optional string address = 3 [default = ""];
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->address(), output);
  }

  // optional .falcon_app_msg.MacroOptions options = 4;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZMQSubDemoConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ZMQ_SUB_DEMO_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 maxProducts = 2 [default = 1];
  if (has_maxproducts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxproducts(), target);
  }

  // optional string address = 3 [default = ""];
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->address(), target);
  }

  // optional .falcon_app_msg.MacroOptions options = 4;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZMQSubDemoConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ZMQ_SUB_DEMO_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 maxProducts = 2 [default = 1];
    if (has_maxproducts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxproducts());
    }

    // optional string address = 3 [default = ""];
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional .falcon_app_msg.MacroOptions options = 4;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZMQSubDemoConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZMQSubDemoConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZMQSubDemoConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZMQSubDemoConfig::MergeFrom(const ZMQSubDemoConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_maxproducts()) {
      set_maxproducts(from.maxproducts());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_options()) {
      mutable_options()->::falcon_app_msg::MacroOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZMQSubDemoConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZMQSubDemoConfig::CopyFrom(const ZMQSubDemoConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZMQSubDemoConfig::IsInitialized() const {

  return true;
}

void ZMQSubDemoConfig::Swap(ZMQSubDemoConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(maxproducts_, other->maxproducts_);
    std::swap(address_, other->address_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZMQSubDemoConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZMQSubDemoConfig_descriptor_;
  metadata.reflection = ZMQSubDemoConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* WifiConfig::_default_msgname_ = NULL;
::std::string* WifiConfig::_default_geo_enabled_ = NULL;
#ifndef _MSC_VER
const int WifiConfig::kMsgNameFieldNumber;
const int WifiConfig::kOptionsFieldNumber;
const int WifiConfig::kGeoEnabledFieldNumber;
#endif  // !_MSC_VER

WifiConfig::WifiConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WifiConfig::InitAsDefaultInstance() {
  options_ = const_cast< ::falcon_app_msg::MacroOptions*>(&::falcon_app_msg::MacroOptions::default_instance());
}

WifiConfig::WifiConfig(const WifiConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WifiConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  options_ = NULL;
  geo_enabled_ = const_cast< ::std::string*>(_default_geo_enabled_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WifiConfig::~WifiConfig() {
  SharedDtor();
}

void WifiConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (geo_enabled_ != _default_geo_enabled_) {
    delete geo_enabled_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void WifiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WifiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WifiConfig_descriptor_;
}

const WifiConfig& WifiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconApplicationMessages_2eproto();
  return *default_instance_;
}

WifiConfig* WifiConfig::default_instance_ = NULL;

WifiConfig* WifiConfig::New() const {
  return new WifiConfig;
}

void WifiConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_options()) {
      if (options_ != NULL) options_->::falcon_app_msg::MacroOptions::Clear();
    }
    if (has_geo_enabled()) {
      if (geo_enabled_ != _default_geo_enabled_) {
        geo_enabled_->assign(*_default_geo_enabled_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WifiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "WIFI_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .falcon_app_msg.MacroOptions options = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_geo_enabled;
        break;
      }

      // optional string geo_enabled = 3 [default = "OFF"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo_enabled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geo_enabled()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geo_enabled().data(), this->geo_enabled().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WifiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "WIFI_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .falcon_app_msg.MacroOptions options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->options(), output);
  }

  // optional string geo_enabled = 3 [default = "OFF"];
  if (has_geo_enabled()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geo_enabled().data(), this->geo_enabled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->geo_enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WifiConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "WIFI_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .falcon_app_msg.MacroOptions options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->options(), target);
  }

  // optional string geo_enabled = 3 [default = "OFF"];
  if (has_geo_enabled()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geo_enabled().data(), this->geo_enabled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->geo_enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WifiConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "WIFI_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .falcon_app_msg.MacroOptions options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

    // optional string geo_enabled = 3 [default = "OFF"];
    if (has_geo_enabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geo_enabled());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WifiConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WifiConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WifiConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WifiConfig::MergeFrom(const WifiConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_options()) {
      mutable_options()->::falcon_app_msg::MacroOptions::MergeFrom(from.options());
    }
    if (from.has_geo_enabled()) {
      set_geo_enabled(from.geo_enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WifiConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WifiConfig::CopyFrom(const WifiConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiConfig::IsInitialized() const {

  return true;
}

void WifiConfig::Swap(WifiConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(options_, other->options_);
    std::swap(geo_enabled_, other->geo_enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WifiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WifiConfig_descriptor_;
  metadata.reflection = WifiConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace falcon_app_msg

// @@protoc_insertion_point(global_scope)
