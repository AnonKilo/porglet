// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DSMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DSMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ds_msg {

namespace {

const ::google::protobuf::Descriptor* SatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Detection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Detection_reflection_ = NULL;
const ::google::protobuf::Descriptor* DopplerTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DopplerTip_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GeoRequest_Action_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GeoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GeoResponse_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GeoPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActiveList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActiveList_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitiateGeo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitiateGeo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DSMessages_2eproto() {
  protobuf_AddDesc_DSMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DSMessages.proto");
  GOOGLE_CHECK(file != NULL);
  SatInfo_descriptor_ = file->message_type(0);
  static const int SatInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatInfo, ssc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatInfo, polarization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatInfo, band_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatInfo, satname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatInfo, rfswitchin_),
  };
  SatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SatInfo_descriptor_,
      SatInfo::default_instance_,
      SatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SatInfo));
  Detection_descriptor_ = file->message_type(1);
  static const int Detection_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, snr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, firsttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, numdetects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, sigtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, siguuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, ignore_),
  };
  Detection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Detection_descriptor_,
      Detection::default_instance_,
      Detection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Detection));
  DopplerTip_descriptor_ = file->message_type(2);
  static const int DopplerTip_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DopplerTip, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DopplerTip, dopplershift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DopplerTip, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DopplerTip, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DopplerTip, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DopplerTip, majoraxis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DopplerTip, minoraxis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DopplerTip, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DopplerTip, siguuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DopplerTip, classification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DopplerTip, msgid_),
  };
  DopplerTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DopplerTip_descriptor_,
      DopplerTip::default_instance_,
      DopplerTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DopplerTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DopplerTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DopplerTip));
  GeoRequest_descriptor_ = file->message_type(3);
  static const int GeoRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRequest, reqaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRequest, det_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRequest, sat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRequest, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRequest, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRequest, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRequest, loctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRequest, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRequest, classification_),
  };
  GeoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoRequest_descriptor_,
      GeoRequest::default_instance_,
      GeoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoRequest));
  GeoRequest_Action_descriptor_ = GeoRequest_descriptor_->enum_type(0);
  GeoResponse_descriptor_ = file->message_type(4);
  static const int GeoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResponse, outcome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResponse, siguuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResponse, classification_),
  };
  GeoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoResponse_descriptor_,
      GeoResponse::default_instance_,
      GeoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoResponse));
  GeoResponse_Status_descriptor_ = GeoResponse_descriptor_->enum_type(0);
  GeoPoint_descriptor_ = file->message_type(5);
  static const int GeoPoint_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, majoraxis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, minoraxis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, altconf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, vconf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, headconf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, covariance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, siguuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, geotime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, classification_),
  };
  GeoPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoPoint_descriptor_,
      GeoPoint::default_instance_,
      GeoPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoPoint));
  ActiveList_descriptor_ = file->message_type(6);
  static const int ActiveList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveList, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveList, sat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveList, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveList, classification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveList, det_),
  };
  ActiveList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActiveList_descriptor_,
      ActiveList::default_instance_,
      ActiveList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActiveList));
  InitiateGeo_descriptor_ = file->message_type(7);
  static const int InitiateGeo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitiateGeo, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitiateGeo, siguuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitiateGeo, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitiateGeo, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitiateGeo, force_),
  };
  InitiateGeo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitiateGeo_descriptor_,
      InitiateGeo::default_instance_,
      InitiateGeo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitiateGeo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitiateGeo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitiateGeo));
  SignalStatus_descriptor_ = file->message_type(8);
  static const int SignalStatus_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, siguuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, sigtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, proc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, geostatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, telemavail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, telemlasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, geopri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, signame_),
  };
  SignalStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalStatus_descriptor_,
      SignalStatus::default_instance_,
      SignalStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalStatus));
  StatusRequest_descriptor_ = file->message_type(9);
  static const int StatusRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, siguuid_),
  };
  StatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusRequest_descriptor_,
      StatusRequest::default_instance_,
      StatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DSMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SatInfo_descriptor_, &SatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Detection_descriptor_, &Detection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DopplerTip_descriptor_, &DopplerTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoRequest_descriptor_, &GeoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoResponse_descriptor_, &GeoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoPoint_descriptor_, &GeoPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActiveList_descriptor_, &ActiveList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitiateGeo_descriptor_, &InitiateGeo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalStatus_descriptor_, &SignalStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusRequest_descriptor_, &StatusRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DSMessages_2eproto() {
  delete SatInfo::default_instance_;
  delete SatInfo_reflection_;
  delete Detection::default_instance_;
  delete Detection_reflection_;
  delete Detection::_default_sigtype_;
  delete DopplerTip::default_instance_;
  delete DopplerTip_reflection_;
  delete DopplerTip::_default_msgname_;
  delete GeoRequest::default_instance_;
  delete GeoRequest_reflection_;
  delete GeoRequest::_default_msgname_;
  delete GeoResponse::default_instance_;
  delete GeoResponse_reflection_;
  delete GeoResponse::_default_msgname_;
  delete GeoPoint::default_instance_;
  delete GeoPoint_reflection_;
  delete GeoPoint::_default_msgname_;
  delete ActiveList::default_instance_;
  delete ActiveList_reflection_;
  delete ActiveList::_default_msgname_;
  delete InitiateGeo::default_instance_;
  delete InitiateGeo_reflection_;
  delete InitiateGeo::_default_msgname_;
  delete SignalStatus::default_instance_;
  delete SignalStatus_reflection_;
  delete SignalStatus::_default_msgname_;
  delete StatusRequest::default_instance_;
  delete StatusRequest_reflection_;
  delete StatusRequest::_default_msgname_;
}

void protobuf_AddDesc_DSMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020DSMessages.proto\022\006ds_msg\"e\n\007SatInfo\022\013\n"
    "\003ssc\030\001 \001(\005\022\024\n\014polarization\030\002 \001(\t\022\014\n\004band"
    "\030\003 \001(\t\022\021\n\007satName\030\004 \001(\t:\000\022\026\n\nrfSwitchIn\030"
    "\005 \001(\005:\002-1\"\265\001\n\tDetection\022\021\n\tfrequency\030\001 \001"
    "(\001\022\021\n\tbandwidth\030\002 \001(\001\022\013\n\003snr\030\003 \001(\001\022\021\n\tfi"
    "rstTime\030\004 \001(\t\022\020\n\010lastTime\030\005 \001(\t\022\022\n\nnumDe"
    "tects\030\006 \001(\003\022\024\n\007sigType\030\007 \001(\t:\003UNK\022\017\n\007sig"
    "UUID\030\010 \001(\t\022\025\n\006ignore\030\t \001(\010:\005false\"\344\001\n\nDo"
    "pplerTip\022\034\n\007msgName\030\001 \001(\t:\013DOPPLER_TIP\022\024"
    "\n\014dopplershift\030\002 \001(\001\022\021\n\ttimestamp\030\003 \001(\t\022"
    "\013\n\003lat\030\004 \001(\001\022\013\n\003lon\030\005 \001(\001\022\021\n\tmajoraxis\030\006"
    " \001(\001\022\021\n\tminoraxis\030\007 \001(\001\022\023\n\013orientation\030\010"
    " \001(\001\022\017\n\007sigUUID\030\t \001(\t\022\030\n\016classification\030"
    "\n \001(\t:\000\022\017\n\005msgID\030\013 \001(\t:\000\"\311\002\n\nGeoRequest\022"
    "\034\n\007msgName\030\001 \001(\t:\013GEO_REQUEST\0222\n\treqActi"
    "on\030\002 \001(\0162\031.ds_msg.GeoRequest.Action:\004STO"
    "P\022\036\n\003det\030\003 \001(\0132\021.ds_msg.Detection\022\034\n\003sat"
    "\030\004 \001(\0132\017.ds_msg.SatInfo\022\021\n\003lat\030\005 \001(\001:\00410"
    "00\022\021\n\003lon\030\006 \001(\001:\0041000\022\017\n\003alt\030\007 \001(\001:\002-1\022\017"
    "\n\007locTime\030\010 \001(\t\022\023\n\010priority\030\t \001(\005:\0010\022\030\n\016"
    "classification\030\n \001(\t:\000\"4\n\006Action\022\010\n\004STOP"
    "\020\000\022\t\n\005START\020\001\022\t\n\005QUERY\020\002\022\n\n\006UPDATE\020\003\"\302\001\n"
    "\013GeoResponse\022\035\n\007msgName\030\001 \001(\t:\014GEO_RESPO"
    "NSE\022+\n\007outcome\030\002 \001(\0162\032.ds_msg.GeoRespons"
    "e.Status\022\017\n\007sigUUID\030\003 \003(\t\022\030\n\016classificat"
    "ion\030\004 \001(\t:\000\"<\n\006Status\022\013\n\007FAILURE\020\000\022\013\n\007SU"
    "CCESS\020\001\022\t\n\005QUERY\020\002\022\r\n\tTRACKDOWN\020\003\"\262\002\n\010Ge"
    "oPoint\022\032\n\007msgName\030\001 \001(\t:\tGEO_POINT\022\013\n\003la"
    "t\030\002 \001(\001\022\013\n\003lon\030\003 \001(\001\022\021\n\tmajoraxis\030\004 \001(\001\022"
    "\021\n\tminoraxis\030\005 \001(\001\022\023\n\013orientation\030\006 \001(\001\022"
    "\020\n\010altitude\030\007 \001(\001\022\017\n\007altConf\030\010 \001(\005\022\020\n\010ve"
    "locity\030\t \001(\001\022\r\n\005vConf\030\n \001(\005\022\017\n\007heading\030\013"
    " \001(\001\022\020\n\010headConf\030\014 \001(\005\022\022\n\ncovariance\030\r \001"
    "(\t\022\017\n\007sigUUID\030\016 \001(\t\022\017\n\007geoTime\030\017 \001(\t\022\030\n\016"
    "classification\030\020 \001(\t:\000\"\223\001\n\nActiveList\022\034\n"
    "\007msgName\030\001 \001(\t:\013ACTIVE_LIST\022\034\n\003sat\030\002 \001(\013"
    "2\017.ds_msg.SatInfo\022\017\n\005msgID\030\003 \001(\t:\000\022\030\n\016cl"
    "assification\030\004 \001(\t:\000\022\036\n\003det\030\005 \003(\0132\021.ds_m"
    "sg.Detection\"\177\n\013InitiateGeo\022\035\n\007msgName\030\001"
    " \001(\t:\014INITIATE_GEO\022\017\n\007sigUUID\030\002 \001(\t\022\023\n\010p"
    "riority\030\003 \001(\005:\0010\022\025\n\010duration\030\004 \001(\001:\003300\022"
    "\024\n\005force\030\005 \001(\010:\005false\"\316\001\n\014SignalStatus\022\036"
    "\n\007msgName\030\001 \001(\t:\rSIGNAL_STATUS\022\017\n\007sigUUI"
    "D\030\002 \001(\t\022\017\n\007sigType\030\003 \001(\t\022\014\n\004proc\030\004 \001(\010\022\021"
    "\n\tgeoStatus\030\005 \001(\t\022\022\n\ntelemAvail\030\006 \001(\010\022\025\n"
    "\rtelemLastTime\030\007 \001(\t\022\016\n\006geoPri\030\010 \001(\003\022\017\n\007"
    "eventID\030\t \001(\t\022\017\n\007sigName\030\n \001(\t\";\n\rStatus"
    "Request\022\031\n\007msgName\030\001 \001(\t:\010STAT_REQ\022\017\n\007si"
    "gUUID\030\002 \001(\tB\025\n\023fv.protos.kepsvisor", 1954);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DSMessages.proto", &protobuf_RegisterTypes);
  SatInfo::default_instance_ = new SatInfo();
  Detection::_default_sigtype_ =
      new ::std::string("UNK", 3);
  Detection::default_instance_ = new Detection();
  DopplerTip::_default_msgname_ =
      new ::std::string("DOPPLER_TIP", 11);
  DopplerTip::default_instance_ = new DopplerTip();
  GeoRequest::_default_msgname_ =
      new ::std::string("GEO_REQUEST", 11);
  GeoRequest::default_instance_ = new GeoRequest();
  GeoResponse::_default_msgname_ =
      new ::std::string("GEO_RESPONSE", 12);
  GeoResponse::default_instance_ = new GeoResponse();
  GeoPoint::_default_msgname_ =
      new ::std::string("GEO_POINT", 9);
  GeoPoint::default_instance_ = new GeoPoint();
  ActiveList::_default_msgname_ =
      new ::std::string("ACTIVE_LIST", 11);
  ActiveList::default_instance_ = new ActiveList();
  InitiateGeo::_default_msgname_ =
      new ::std::string("INITIATE_GEO", 12);
  InitiateGeo::default_instance_ = new InitiateGeo();
  SignalStatus::_default_msgname_ =
      new ::std::string("SIGNAL_STATUS", 13);
  SignalStatus::default_instance_ = new SignalStatus();
  StatusRequest::_default_msgname_ =
      new ::std::string("STAT_REQ", 8);
  StatusRequest::default_instance_ = new StatusRequest();
  SatInfo::default_instance_->InitAsDefaultInstance();
  Detection::default_instance_->InitAsDefaultInstance();
  DopplerTip::default_instance_->InitAsDefaultInstance();
  GeoRequest::default_instance_->InitAsDefaultInstance();
  GeoResponse::default_instance_->InitAsDefaultInstance();
  GeoPoint::default_instance_->InitAsDefaultInstance();
  ActiveList::default_instance_->InitAsDefaultInstance();
  InitiateGeo::default_instance_->InitAsDefaultInstance();
  SignalStatus::default_instance_->InitAsDefaultInstance();
  StatusRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DSMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DSMessages_2eproto {
  StaticDescriptorInitializer_DSMessages_2eproto() {
    protobuf_AddDesc_DSMessages_2eproto();
  }
} static_descriptor_initializer_DSMessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SatInfo::kSscFieldNumber;
const int SatInfo::kPolarizationFieldNumber;
const int SatInfo::kBandFieldNumber;
const int SatInfo::kSatNameFieldNumber;
const int SatInfo::kRfSwitchInFieldNumber;
#endif  // !_MSC_VER

SatInfo::SatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SatInfo::InitAsDefaultInstance() {
}

SatInfo::SatInfo(const SatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SatInfo::SharedCtor() {
  _cached_size_ = 0;
  ssc_ = 0;
  polarization_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  band_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  satname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rfswitchin_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SatInfo::~SatInfo() {
  SharedDtor();
}

void SatInfo::SharedDtor() {
  if (polarization_ != &::google::protobuf::internal::kEmptyString) {
    delete polarization_;
  }
  if (band_ != &::google::protobuf::internal::kEmptyString) {
    delete band_;
  }
  if (satname_ != &::google::protobuf::internal::kEmptyString) {
    delete satname_;
  }
  if (this != default_instance_) {
  }
}

void SatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SatInfo_descriptor_;
}

const SatInfo& SatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DSMessages_2eproto();
  return *default_instance_;
}

SatInfo* SatInfo::default_instance_ = NULL;

SatInfo* SatInfo::New() const {
  return new SatInfo;
}

void SatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ssc_ = 0;
    if (has_polarization()) {
      if (polarization_ != &::google::protobuf::internal::kEmptyString) {
        polarization_->clear();
      }
    }
    if (has_band()) {
      if (band_ != &::google::protobuf::internal::kEmptyString) {
        band_->clear();
      }
    }
    if (has_satname()) {
      if (satname_ != &::google::protobuf::internal::kEmptyString) {
        satname_->clear();
      }
    }
    rfswitchin_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssc_)));
          set_has_ssc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_polarization;
        break;
      }

      // optional string polarization = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polarization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_polarization()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->polarization().data(), this->polarization().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_band;
        break;
      }

      // optional string band = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_band:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_band()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->band().data(), this->band().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_satName;
        break;
      }

      // optional string satName = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_satName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_satname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->satname().data(), this->satname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rfSwitchIn;
        break;
      }

      // optional int32 rfSwitchIn = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rfSwitchIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rfswitchin_)));
          set_has_rfswitchin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ssc = 1;
  if (has_ssc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssc(), output);
  }

  // optional string polarization = 2;
  if (has_polarization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->polarization().data(), this->polarization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->polarization(), output);
  }

  // optional string band = 3;
  if (has_band()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->band().data(), this->band().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->band(), output);
  }

  // optional string satName = 4 [default = ""];
  if (has_satname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->satname().data(), this->satname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->satname(), output);
  }

  // optional int32 rfSwitchIn = 5 [default = -1];
  if (has_rfswitchin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rfswitchin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ssc = 1;
  if (has_ssc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ssc(), target);
  }

  // optional string polarization = 2;
  if (has_polarization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->polarization().data(), this->polarization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->polarization(), target);
  }

  // optional string band = 3;
  if (has_band()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->band().data(), this->band().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->band(), target);
  }

  // optional string satName = 4 [default = ""];
  if (has_satname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->satname().data(), this->satname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->satname(), target);
  }

  // optional int32 rfSwitchIn = 5 [default = -1];
  if (has_rfswitchin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rfswitchin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssc = 1;
    if (has_ssc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssc());
    }

    // optional string polarization = 2;
    if (has_polarization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->polarization());
    }

    // optional string band = 3;
    if (has_band()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->band());
    }

    // optional string satName = 4 [default = ""];
    if (has_satname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->satname());
    }

    // optional int32 rfSwitchIn = 5 [default = -1];
    if (has_rfswitchin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rfswitchin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SatInfo::MergeFrom(const SatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssc()) {
      set_ssc(from.ssc());
    }
    if (from.has_polarization()) {
      set_polarization(from.polarization());
    }
    if (from.has_band()) {
      set_band(from.band());
    }
    if (from.has_satname()) {
      set_satname(from.satname());
    }
    if (from.has_rfswitchin()) {
      set_rfswitchin(from.rfswitchin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SatInfo::CopyFrom(const SatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SatInfo::IsInitialized() const {

  return true;
}

void SatInfo::Swap(SatInfo* other) {
  if (other != this) {
    std::swap(ssc_, other->ssc_);
    std::swap(polarization_, other->polarization_);
    std::swap(band_, other->band_);
    std::swap(satname_, other->satname_);
    std::swap(rfswitchin_, other->rfswitchin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SatInfo_descriptor_;
  metadata.reflection = SatInfo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Detection::_default_sigtype_ = NULL;
#ifndef _MSC_VER
const int Detection::kFrequencyFieldNumber;
const int Detection::kBandwidthFieldNumber;
const int Detection::kSnrFieldNumber;
const int Detection::kFirstTimeFieldNumber;
const int Detection::kLastTimeFieldNumber;
const int Detection::kNumDetectsFieldNumber;
const int Detection::kSigTypeFieldNumber;
const int Detection::kSigUUIDFieldNumber;
const int Detection::kIgnoreFieldNumber;
#endif  // !_MSC_VER

Detection::Detection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Detection::InitAsDefaultInstance() {
}

Detection::Detection(const Detection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Detection::SharedCtor() {
  _cached_size_ = 0;
  frequency_ = 0;
  bandwidth_ = 0;
  snr_ = 0;
  firsttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lasttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  numdetects_ = GOOGLE_LONGLONG(0);
  sigtype_ = const_cast< ::std::string*>(_default_sigtype_);
  siguuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ignore_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Detection::~Detection() {
  SharedDtor();
}

void Detection::SharedDtor() {
  if (firsttime_ != &::google::protobuf::internal::kEmptyString) {
    delete firsttime_;
  }
  if (lasttime_ != &::google::protobuf::internal::kEmptyString) {
    delete lasttime_;
  }
  if (sigtype_ != _default_sigtype_) {
    delete sigtype_;
  }
  if (siguuid_ != &::google::protobuf::internal::kEmptyString) {
    delete siguuid_;
  }
  if (this != default_instance_) {
  }
}

void Detection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Detection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Detection_descriptor_;
}

const Detection& Detection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DSMessages_2eproto();
  return *default_instance_;
}

Detection* Detection::default_instance_ = NULL;

Detection* Detection::New() const {
  return new Detection;
}

void Detection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    frequency_ = 0;
    bandwidth_ = 0;
    snr_ = 0;
    if (has_firsttime()) {
      if (firsttime_ != &::google::protobuf::internal::kEmptyString) {
        firsttime_->clear();
      }
    }
    if (has_lasttime()) {
      if (lasttime_ != &::google::protobuf::internal::kEmptyString) {
        lasttime_->clear();
      }
    }
    numdetects_ = GOOGLE_LONGLONG(0);
    if (has_sigtype()) {
      if (sigtype_ != _default_sigtype_) {
        sigtype_->assign(*_default_sigtype_);
      }
    }
    if (has_siguuid()) {
      if (siguuid_ != &::google::protobuf::internal::kEmptyString) {
        siguuid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ignore_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Detection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double frequency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_bandwidth;
        break;
      }

      // optional double bandwidth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_snr;
        break;
      }

      // optional double snr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_snr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &snr_)));
          set_has_snr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_firstTime;
        break;
      }

      // optional string firstTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_firstTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firsttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->firsttime().data(), this->firsttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lastTime;
        break;
      }

      // optional string lastTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lasttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lasttime().data(), this->lasttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_numDetects;
        break;
      }

      // optional int64 numDetects = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numDetects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &numdetects_)));
          set_has_numdetects();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sigType;
        break;
      }

      // optional string sigType = 7 [default = "UNK"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sigtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sigtype().data(), this->sigtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sigUUID;
        break;
      }

      // optional string sigUUID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigUUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_siguuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->siguuid().data(), this->siguuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ignore;
        break;
      }

      // optional bool ignore = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_)));
          set_has_ignore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Detection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double frequency = 1;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->frequency(), output);
  }

  // optional double bandwidth = 2;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->bandwidth(), output);
  }

  // optional double snr = 3;
  if (has_snr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->snr(), output);
  }

  // optional string firstTime = 4;
  if (has_firsttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firsttime().data(), this->firsttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->firsttime(), output);
  }

  // optional string lastTime = 5;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lasttime().data(), this->lasttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lasttime(), output);
  }

  // optional int64 numDetects = 6;
  if (has_numdetects()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->numdetects(), output);
  }

  // optional string sigType = 7 [default = "UNK"];
  if (has_sigtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sigtype().data(), this->sigtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sigtype(), output);
  }

  // optional string sigUUID = 8;
  if (has_siguuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siguuid().data(), this->siguuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->siguuid(), output);
  }

  // optional bool ignore = 9 [default = false];
  if (has_ignore()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ignore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Detection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double frequency = 1;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->frequency(), target);
  }

  // optional double bandwidth = 2;
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->bandwidth(), target);
  }

  // optional double snr = 3;
  if (has_snr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->snr(), target);
  }

  // optional string firstTime = 4;
  if (has_firsttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firsttime().data(), this->firsttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->firsttime(), target);
  }

  // optional string lastTime = 5;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lasttime().data(), this->lasttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lasttime(), target);
  }

  // optional int64 numDetects = 6;
  if (has_numdetects()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->numdetects(), target);
  }

  // optional string sigType = 7 [default = "UNK"];
  if (has_sigtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sigtype().data(), this->sigtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sigtype(), target);
  }

  // optional string sigUUID = 8;
  if (has_siguuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siguuid().data(), this->siguuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->siguuid(), target);
  }

  // optional bool ignore = 9 [default = false];
  if (has_ignore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ignore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Detection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double frequency = 1;
    if (has_frequency()) {
      total_size += 1 + 8;
    }

    // optional double bandwidth = 2;
    if (has_bandwidth()) {
      total_size += 1 + 8;
    }

    // optional double snr = 3;
    if (has_snr()) {
      total_size += 1 + 8;
    }

    // optional string firstTime = 4;
    if (has_firsttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firsttime());
    }

    // optional string lastTime = 5;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lasttime());
    }

    // optional int64 numDetects = 6;
    if (has_numdetects()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->numdetects());
    }

    // optional string sigType = 7 [default = "UNK"];
    if (has_sigtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sigtype());
    }

    // optional string sigUUID = 8;
    if (has_siguuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->siguuid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool ignore = 9 [default = false];
    if (has_ignore()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Detection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Detection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Detection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Detection::MergeFrom(const Detection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
    if (from.has_snr()) {
      set_snr(from.snr());
    }
    if (from.has_firsttime()) {
      set_firsttime(from.firsttime());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_numdetects()) {
      set_numdetects(from.numdetects());
    }
    if (from.has_sigtype()) {
      set_sigtype(from.sigtype());
    }
    if (from.has_siguuid()) {
      set_siguuid(from.siguuid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ignore()) {
      set_ignore(from.ignore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Detection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detection::CopyFrom(const Detection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detection::IsInitialized() const {

  return true;
}

void Detection::Swap(Detection* other) {
  if (other != this) {
    std::swap(frequency_, other->frequency_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(snr_, other->snr_);
    std::swap(firsttime_, other->firsttime_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(numdetects_, other->numdetects_);
    std::swap(sigtype_, other->sigtype_);
    std::swap(siguuid_, other->siguuid_);
    std::swap(ignore_, other->ignore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Detection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Detection_descriptor_;
  metadata.reflection = Detection_reflection_;
  return metadata;
}


// ===================================================================

::std::string* DopplerTip::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int DopplerTip::kMsgNameFieldNumber;
const int DopplerTip::kDopplershiftFieldNumber;
const int DopplerTip::kTimestampFieldNumber;
const int DopplerTip::kLatFieldNumber;
const int DopplerTip::kLonFieldNumber;
const int DopplerTip::kMajoraxisFieldNumber;
const int DopplerTip::kMinoraxisFieldNumber;
const int DopplerTip::kOrientationFieldNumber;
const int DopplerTip::kSigUUIDFieldNumber;
const int DopplerTip::kClassificationFieldNumber;
const int DopplerTip::kMsgIDFieldNumber;
#endif  // !_MSC_VER

DopplerTip::DopplerTip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DopplerTip::InitAsDefaultInstance() {
}

DopplerTip::DopplerTip(const DopplerTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DopplerTip::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  dopplershift_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lat_ = 0;
  lon_ = 0;
  majoraxis_ = 0;
  minoraxis_ = 0;
  orientation_ = 0;
  siguuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DopplerTip::~DopplerTip() {
  SharedDtor();
}

void DopplerTip::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (siguuid_ != &::google::protobuf::internal::kEmptyString) {
    delete siguuid_;
  }
  if (classification_ != &::google::protobuf::internal::kEmptyString) {
    delete classification_;
  }
  if (msgid_ != &::google::protobuf::internal::kEmptyString) {
    delete msgid_;
  }
  if (this != default_instance_) {
  }
}

void DopplerTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DopplerTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DopplerTip_descriptor_;
}

const DopplerTip& DopplerTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DSMessages_2eproto();
  return *default_instance_;
}

DopplerTip* DopplerTip::default_instance_ = NULL;

DopplerTip* DopplerTip::New() const {
  return new DopplerTip;
}

void DopplerTip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    dopplershift_ = 0;
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    lat_ = 0;
    lon_ = 0;
    majoraxis_ = 0;
    minoraxis_ = 0;
    orientation_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_siguuid()) {
      if (siguuid_ != &::google::protobuf::internal::kEmptyString) {
        siguuid_->clear();
      }
    }
    if (has_classification()) {
      if (classification_ != &::google::protobuf::internal::kEmptyString) {
        classification_->clear();
      }
    }
    if (has_msgid()) {
      if (msgid_ != &::google::protobuf::internal::kEmptyString) {
        msgid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DopplerTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DOPPLER_TIP"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dopplershift;
        break;
      }

      // optional double dopplershift = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dopplershift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dopplershift_)));
          set_has_dopplershift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_lat;
        break;
      }

      // optional double lat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_lon;
        break;
      }

      // optional double lon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_majoraxis;
        break;
      }

      // optional double majoraxis = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_majoraxis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &majoraxis_)));
          set_has_majoraxis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_minoraxis;
        break;
      }

      // optional double minoraxis = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minoraxis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minoraxis_)));
          set_has_minoraxis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_orientation;
        break;
      }

      // optional double orientation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sigUUID;
        break;
      }

      // optional string sigUUID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigUUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_siguuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->siguuid().data(), this->siguuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_classification;
        break;
      }

      // optional string classification = 10 [default = ""];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->classification().data(), this->classification().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_msgID;
        break;
      }

      // optional string msgID = 11 [default = ""];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgid().data(), this->msgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DopplerTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DOPPLER_TIP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double dopplershift = 2;
  if (has_dopplershift()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dopplershift(), output);
  }

  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->timestamp(), output);
  }

  // optional double lat = 4;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lat(), output);
  }

  // optional double lon = 5;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lon(), output);
  }

  // optional double majoraxis = 6;
  if (has_majoraxis()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->majoraxis(), output);
  }

  // optional double minoraxis = 7;
  if (has_minoraxis()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->minoraxis(), output);
  }

  // optional double orientation = 8;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->orientation(), output);
  }

  // optional string sigUUID = 9;
  if (has_siguuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siguuid().data(), this->siguuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->siguuid(), output);
  }

  // optional string classification = 10 [default = ""];
  if (has_classification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->classification().data(), this->classification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->classification(), output);
  }

  // optional string msgID = 11 [default = ""];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DopplerTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DOPPLER_TIP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double dopplershift = 2;
  if (has_dopplershift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dopplershift(), target);
  }

  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timestamp(), target);
  }

  // optional double lat = 4;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lat(), target);
  }

  // optional double lon = 5;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lon(), target);
  }

  // optional double majoraxis = 6;
  if (has_majoraxis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->majoraxis(), target);
  }

  // optional double minoraxis = 7;
  if (has_minoraxis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->minoraxis(), target);
  }

  // optional double orientation = 8;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->orientation(), target);
  }

  // optional string sigUUID = 9;
  if (has_siguuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siguuid().data(), this->siguuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->siguuid(), target);
  }

  // optional string classification = 10 [default = ""];
  if (has_classification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->classification().data(), this->classification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->classification(), target);
  }

  // optional string msgID = 11 [default = ""];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DopplerTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DOPPLER_TIP"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double dopplershift = 2;
    if (has_dopplershift()) {
      total_size += 1 + 8;
    }

    // optional string timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional double lat = 4;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional double lon = 5;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // optional double majoraxis = 6;
    if (has_majoraxis()) {
      total_size += 1 + 8;
    }

    // optional double minoraxis = 7;
    if (has_minoraxis()) {
      total_size += 1 + 8;
    }

    // optional double orientation = 8;
    if (has_orientation()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string sigUUID = 9;
    if (has_siguuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->siguuid());
    }

    // optional string classification = 10 [default = ""];
    if (has_classification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classification());
    }

    // optional string msgID = 11 [default = ""];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DopplerTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DopplerTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DopplerTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DopplerTip::MergeFrom(const DopplerTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_dopplershift()) {
      set_dopplershift(from.dopplershift());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_majoraxis()) {
      set_majoraxis(from.majoraxis());
    }
    if (from.has_minoraxis()) {
      set_minoraxis(from.minoraxis());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_siguuid()) {
      set_siguuid(from.siguuid());
    }
    if (from.has_classification()) {
      set_classification(from.classification());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DopplerTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DopplerTip::CopyFrom(const DopplerTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DopplerTip::IsInitialized() const {

  return true;
}

void DopplerTip::Swap(DopplerTip* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(dopplershift_, other->dopplershift_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(majoraxis_, other->majoraxis_);
    std::swap(minoraxis_, other->minoraxis_);
    std::swap(orientation_, other->orientation_);
    std::swap(siguuid_, other->siguuid_);
    std::swap(classification_, other->classification_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DopplerTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DopplerTip_descriptor_;
  metadata.reflection = DopplerTip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GeoRequest_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoRequest_Action_descriptor_;
}
bool GeoRequest_Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GeoRequest_Action GeoRequest::STOP;
const GeoRequest_Action GeoRequest::START;
const GeoRequest_Action GeoRequest::QUERY;
const GeoRequest_Action GeoRequest::UPDATE;
const GeoRequest_Action GeoRequest::Action_MIN;
const GeoRequest_Action GeoRequest::Action_MAX;
const int GeoRequest::Action_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* GeoRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GeoRequest::kMsgNameFieldNumber;
const int GeoRequest::kReqActionFieldNumber;
const int GeoRequest::kDetFieldNumber;
const int GeoRequest::kSatFieldNumber;
const int GeoRequest::kLatFieldNumber;
const int GeoRequest::kLonFieldNumber;
const int GeoRequest::kAltFieldNumber;
const int GeoRequest::kLocTimeFieldNumber;
const int GeoRequest::kPriorityFieldNumber;
const int GeoRequest::kClassificationFieldNumber;
#endif  // !_MSC_VER

GeoRequest::GeoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeoRequest::InitAsDefaultInstance() {
  det_ = const_cast< ::ds_msg::Detection*>(&::ds_msg::Detection::default_instance());
  sat_ = const_cast< ::ds_msg::SatInfo*>(&::ds_msg::SatInfo::default_instance());
}

GeoRequest::GeoRequest(const GeoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeoRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  reqaction_ = 0;
  det_ = NULL;
  sat_ = NULL;
  lat_ = 1000;
  lon_ = 1000;
  alt_ = -1;
  loctime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  priority_ = 0;
  classification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoRequest::~GeoRequest() {
  SharedDtor();
}

void GeoRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (loctime_ != &::google::protobuf::internal::kEmptyString) {
    delete loctime_;
  }
  if (classification_ != &::google::protobuf::internal::kEmptyString) {
    delete classification_;
  }
  if (this != default_instance_) {
    delete det_;
    delete sat_;
  }
}

void GeoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoRequest_descriptor_;
}

const GeoRequest& GeoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DSMessages_2eproto();
  return *default_instance_;
}

GeoRequest* GeoRequest::default_instance_ = NULL;

GeoRequest* GeoRequest::New() const {
  return new GeoRequest;
}

void GeoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    reqaction_ = 0;
    if (has_det()) {
      if (det_ != NULL) det_->::ds_msg::Detection::Clear();
    }
    if (has_sat()) {
      if (sat_ != NULL) sat_->::ds_msg::SatInfo::Clear();
    }
    lat_ = 1000;
    lon_ = 1000;
    alt_ = -1;
    if (has_loctime()) {
      if (loctime_ != &::google::protobuf::internal::kEmptyString) {
        loctime_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    priority_ = 0;
    if (has_classification()) {
      if (classification_ != &::google::protobuf::internal::kEmptyString) {
        classification_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GEO_REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reqAction;
        break;
      }

      // optional .ds_msg.GeoRequest.Action reqAction = 2 [default = STOP];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqAction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ds_msg::GeoRequest_Action_IsValid(value)) {
            set_reqaction(static_cast< ::ds_msg::GeoRequest_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_det;
        break;
      }

      // optional .ds_msg.Detection det = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_det:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_det()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sat;
        break;
      }

      // optional .ds_msg.SatInfo sat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_lat;
        break;
      }

      // optional double lat = 5 [default = 1000];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_lon;
        break;
      }

      // optional double lon = 6 [default = 1000];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_alt;
        break;
      }

      // optional double alt = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_locTime;
        break;
      }

      // optional string locTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loctime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loctime().data(), this->loctime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_priority;
        break;
      }

      // optional int32 priority = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_classification;
        break;
      }

      // optional string classification = 10 [default = ""];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->classification().data(), this->classification().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GEO_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .ds_msg.GeoRequest.Action reqAction = 2 [default = STOP];
  if (has_reqaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reqaction(), output);
  }

  // optional .ds_msg.Detection det = 3;
  if (has_det()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->det(), output);
  }

  // optional .ds_msg.SatInfo sat = 4;
  if (has_sat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sat(), output);
  }

  // optional double lat = 5 [default = 1000];
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lat(), output);
  }

  // optional double lon = 6 [default = 1000];
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lon(), output);
  }

  // optional double alt = 7 [default = -1];
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->alt(), output);
  }

  // optional string locTime = 8;
  if (has_loctime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loctime().data(), this->loctime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->loctime(), output);
  }

  // optional int32 priority = 9 [default = 0];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->priority(), output);
  }

  // optional string classification = 10 [default = ""];
  if (has_classification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->classification().data(), this->classification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->classification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GEO_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .ds_msg.GeoRequest.Action reqAction = 2 [default = STOP];
  if (has_reqaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reqaction(), target);
  }

  // optional .ds_msg.Detection det = 3;
  if (has_det()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->det(), target);
  }

  // optional .ds_msg.SatInfo sat = 4;
  if (has_sat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sat(), target);
  }

  // optional double lat = 5 [default = 1000];
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lat(), target);
  }

  // optional double lon = 6 [default = 1000];
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lon(), target);
  }

  // optional double alt = 7 [default = -1];
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->alt(), target);
  }

  // optional string locTime = 8;
  if (has_loctime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loctime().data(), this->loctime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->loctime(), target);
  }

  // optional int32 priority = 9 [default = 0];
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->priority(), target);
  }

  // optional string classification = 10 [default = ""];
  if (has_classification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->classification().data(), this->classification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->classification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GEO_REQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .ds_msg.GeoRequest.Action reqAction = 2 [default = STOP];
    if (has_reqaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reqaction());
    }

    // optional .ds_msg.Detection det = 3;
    if (has_det()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->det());
    }

    // optional .ds_msg.SatInfo sat = 4;
    if (has_sat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sat());
    }

    // optional double lat = 5 [default = 1000];
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional double lon = 6 [default = 1000];
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // optional double alt = 7 [default = -1];
    if (has_alt()) {
      total_size += 1 + 8;
    }

    // optional string locTime = 8;
    if (has_loctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loctime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 priority = 9 [default = 0];
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional string classification = 10 [default = ""];
    if (has_classification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classification());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoRequest::MergeFrom(const GeoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_reqaction()) {
      set_reqaction(from.reqaction());
    }
    if (from.has_det()) {
      mutable_det()->::ds_msg::Detection::MergeFrom(from.det());
    }
    if (from.has_sat()) {
      mutable_sat()->::ds_msg::SatInfo::MergeFrom(from.sat());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_loctime()) {
      set_loctime(from.loctime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_classification()) {
      set_classification(from.classification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoRequest::CopyFrom(const GeoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoRequest::IsInitialized() const {

  return true;
}

void GeoRequest::Swap(GeoRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(reqaction_, other->reqaction_);
    std::swap(det_, other->det_);
    std::swap(sat_, other->sat_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(alt_, other->alt_);
    std::swap(loctime_, other->loctime_);
    std::swap(priority_, other->priority_);
    std::swap(classification_, other->classification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoRequest_descriptor_;
  metadata.reflection = GeoRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GeoResponse_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoResponse_Status_descriptor_;
}
bool GeoResponse_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GeoResponse_Status GeoResponse::FAILURE;
const GeoResponse_Status GeoResponse::SUCCESS;
const GeoResponse_Status GeoResponse::QUERY;
const GeoResponse_Status GeoResponse::TRACKDOWN;
const GeoResponse_Status GeoResponse::Status_MIN;
const GeoResponse_Status GeoResponse::Status_MAX;
const int GeoResponse::Status_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* GeoResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GeoResponse::kMsgNameFieldNumber;
const int GeoResponse::kOutcomeFieldNumber;
const int GeoResponse::kSigUUIDFieldNumber;
const int GeoResponse::kClassificationFieldNumber;
#endif  // !_MSC_VER

GeoResponse::GeoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeoResponse::InitAsDefaultInstance() {
}

GeoResponse::GeoResponse(const GeoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeoResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  outcome_ = 0;
  classification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoResponse::~GeoResponse() {
  SharedDtor();
}

void GeoResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (classification_ != &::google::protobuf::internal::kEmptyString) {
    delete classification_;
  }
  if (this != default_instance_) {
  }
}

void GeoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoResponse_descriptor_;
}

const GeoResponse& GeoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DSMessages_2eproto();
  return *default_instance_;
}

GeoResponse* GeoResponse::default_instance_ = NULL;

GeoResponse* GeoResponse::New() const {
  return new GeoResponse;
}

void GeoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    outcome_ = 0;
    if (has_classification()) {
      if (classification_ != &::google::protobuf::internal::kEmptyString) {
        classification_->clear();
      }
    }
  }
  siguuid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GEO_RESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outcome;
        break;
      }

      // optional .ds_msg.GeoResponse.Status outcome = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcome:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ds_msg::GeoResponse_Status_IsValid(value)) {
            set_outcome(static_cast< ::ds_msg::GeoResponse_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sigUUID;
        break;
      }

      // repeated string sigUUID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigUUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_siguuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->siguuid(this->siguuid_size() - 1).data(),
            this->siguuid(this->siguuid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sigUUID;
        if (input->ExpectTag(34)) goto parse_classification;
        break;
      }

      // optional string classification = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->classification().data(), this->classification().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GEO_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .ds_msg.GeoResponse.Status outcome = 2;
  if (has_outcome()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->outcome(), output);
  }

  // repeated string sigUUID = 3;
  for (int i = 0; i < this->siguuid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->siguuid(i).data(), this->siguuid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->siguuid(i), output);
  }

  // optional string classification = 4 [default = ""];
  if (has_classification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->classification().data(), this->classification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->classification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GEO_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .ds_msg.GeoResponse.Status outcome = 2;
  if (has_outcome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->outcome(), target);
  }

  // repeated string sigUUID = 3;
  for (int i = 0; i < this->siguuid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siguuid(i).data(), this->siguuid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->siguuid(i), target);
  }

  // optional string classification = 4 [default = ""];
  if (has_classification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->classification().data(), this->classification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->classification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GEO_RESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .ds_msg.GeoResponse.Status outcome = 2;
    if (has_outcome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->outcome());
    }

    // optional string classification = 4 [default = ""];
    if (has_classification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classification());
    }

  }
  // repeated string sigUUID = 3;
  total_size += 1 * this->siguuid_size();
  for (int i = 0; i < this->siguuid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->siguuid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoResponse::MergeFrom(const GeoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  siguuid_.MergeFrom(from.siguuid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_outcome()) {
      set_outcome(from.outcome());
    }
    if (from.has_classification()) {
      set_classification(from.classification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoResponse::CopyFrom(const GeoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoResponse::IsInitialized() const {

  return true;
}

void GeoResponse::Swap(GeoResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(outcome_, other->outcome_);
    siguuid_.Swap(&other->siguuid_);
    std::swap(classification_, other->classification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoResponse_descriptor_;
  metadata.reflection = GeoResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GeoPoint::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GeoPoint::kMsgNameFieldNumber;
const int GeoPoint::kLatFieldNumber;
const int GeoPoint::kLonFieldNumber;
const int GeoPoint::kMajoraxisFieldNumber;
const int GeoPoint::kMinoraxisFieldNumber;
const int GeoPoint::kOrientationFieldNumber;
const int GeoPoint::kAltitudeFieldNumber;
const int GeoPoint::kAltConfFieldNumber;
const int GeoPoint::kVelocityFieldNumber;
const int GeoPoint::kVConfFieldNumber;
const int GeoPoint::kHeadingFieldNumber;
const int GeoPoint::kHeadConfFieldNumber;
const int GeoPoint::kCovarianceFieldNumber;
const int GeoPoint::kSigUUIDFieldNumber;
const int GeoPoint::kGeoTimeFieldNumber;
const int GeoPoint::kClassificationFieldNumber;
#endif  // !_MSC_VER

GeoPoint::GeoPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeoPoint::InitAsDefaultInstance() {
}

GeoPoint::GeoPoint(const GeoPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeoPoint::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  lat_ = 0;
  lon_ = 0;
  majoraxis_ = 0;
  minoraxis_ = 0;
  orientation_ = 0;
  altitude_ = 0;
  altconf_ = 0;
  velocity_ = 0;
  vconf_ = 0;
  heading_ = 0;
  headconf_ = 0;
  covariance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  siguuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  geotime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoPoint::~GeoPoint() {
  SharedDtor();
}

void GeoPoint::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (covariance_ != &::google::protobuf::internal::kEmptyString) {
    delete covariance_;
  }
  if (siguuid_ != &::google::protobuf::internal::kEmptyString) {
    delete siguuid_;
  }
  if (geotime_ != &::google::protobuf::internal::kEmptyString) {
    delete geotime_;
  }
  if (classification_ != &::google::protobuf::internal::kEmptyString) {
    delete classification_;
  }
  if (this != default_instance_) {
  }
}

void GeoPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoPoint_descriptor_;
}

const GeoPoint& GeoPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DSMessages_2eproto();
  return *default_instance_;
}

GeoPoint* GeoPoint::default_instance_ = NULL;

GeoPoint* GeoPoint::New() const {
  return new GeoPoint;
}

void GeoPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    lat_ = 0;
    lon_ = 0;
    majoraxis_ = 0;
    minoraxis_ = 0;
    orientation_ = 0;
    altitude_ = 0;
    altconf_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    velocity_ = 0;
    vconf_ = 0;
    heading_ = 0;
    headconf_ = 0;
    if (has_covariance()) {
      if (covariance_ != &::google::protobuf::internal::kEmptyString) {
        covariance_->clear();
      }
    }
    if (has_siguuid()) {
      if (siguuid_ != &::google::protobuf::internal::kEmptyString) {
        siguuid_->clear();
      }
    }
    if (has_geotime()) {
      if (geotime_ != &::google::protobuf::internal::kEmptyString) {
        geotime_->clear();
      }
    }
    if (has_classification()) {
      if (classification_ != &::google::protobuf::internal::kEmptyString) {
        classification_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GEO_POINT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }

      // optional double lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_lon;
        break;
      }

      // optional double lon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_majoraxis;
        break;
      }

      // optional double majoraxis = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_majoraxis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &majoraxis_)));
          set_has_majoraxis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_minoraxis;
        break;
      }

      // optional double minoraxis = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minoraxis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minoraxis_)));
          set_has_minoraxis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_orientation;
        break;
      }

      // optional double orientation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_altitude;
        break;
      }

      // optional double altitude = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_altConf;
        break;
      }

      // optional int32 altConf = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_altConf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &altconf_)));
          set_has_altconf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_velocity;
        break;
      }

      // optional double velocity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vConf;
        break;
      }

      // optional int32 vConf = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vConf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vconf_)));
          set_has_vconf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_heading;
        break;
      }

      // optional double heading = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_headConf;
        break;
      }

      // optional int32 headConf = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headConf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headconf_)));
          set_has_headconf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_covariance;
        break;
      }

      // optional string covariance = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_covariance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_covariance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->covariance().data(), this->covariance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_sigUUID;
        break;
      }

      // optional string sigUUID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigUUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_siguuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->siguuid().data(), this->siguuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_geoTime;
        break;
      }

      // optional string geoTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geoTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geotime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geotime().data(), this->geotime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_classification;
        break;
      }

      // optional string classification = 16 [default = ""];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->classification().data(), this->classification().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeoPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GEO_POINT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // optional double lon = 3;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lon(), output);
  }

  // optional double majoraxis = 4;
  if (has_majoraxis()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->majoraxis(), output);
  }

  // optional double minoraxis = 5;
  if (has_minoraxis()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->minoraxis(), output);
  }

  // optional double orientation = 6;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->orientation(), output);
  }

  // optional double altitude = 7;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->altitude(), output);
  }

  // optional int32 altConf = 8;
  if (has_altconf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->altconf(), output);
  }

  // optional double velocity = 9;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->velocity(), output);
  }

  // optional int32 vConf = 10;
  if (has_vconf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vconf(), output);
  }

  // optional double heading = 11;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->heading(), output);
  }

  // optional int32 headConf = 12;
  if (has_headconf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->headconf(), output);
  }

  // optional string covariance = 13;
  if (has_covariance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->covariance().data(), this->covariance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->covariance(), output);
  }

  // optional string sigUUID = 14;
  if (has_siguuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siguuid().data(), this->siguuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->siguuid(), output);
  }

  // optional string geoTime = 15;
  if (has_geotime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geotime().data(), this->geotime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->geotime(), output);
  }

  // optional string classification = 16 [default = ""];
  if (has_classification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->classification().data(), this->classification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->classification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeoPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GEO_POINT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // optional double lon = 3;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lon(), target);
  }

  // optional double majoraxis = 4;
  if (has_majoraxis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->majoraxis(), target);
  }

  // optional double minoraxis = 5;
  if (has_minoraxis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->minoraxis(), target);
  }

  // optional double orientation = 6;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->orientation(), target);
  }

  // optional double altitude = 7;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->altitude(), target);
  }

  // optional int32 altConf = 8;
  if (has_altconf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->altconf(), target);
  }

  // optional double velocity = 9;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->velocity(), target);
  }

  // optional int32 vConf = 10;
  if (has_vconf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vconf(), target);
  }

  // optional double heading = 11;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->heading(), target);
  }

  // optional int32 headConf = 12;
  if (has_headconf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->headconf(), target);
  }

  // optional string covariance = 13;
  if (has_covariance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->covariance().data(), this->covariance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->covariance(), target);
  }

  // optional string sigUUID = 14;
  if (has_siguuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siguuid().data(), this->siguuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->siguuid(), target);
  }

  // optional string geoTime = 15;
  if (has_geotime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geotime().data(), this->geotime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->geotime(), target);
  }

  // optional string classification = 16 [default = ""];
  if (has_classification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->classification().data(), this->classification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->classification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeoPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GEO_POINT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double lat = 2;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional double lon = 3;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // optional double majoraxis = 4;
    if (has_majoraxis()) {
      total_size += 1 + 8;
    }

    // optional double minoraxis = 5;
    if (has_minoraxis()) {
      total_size += 1 + 8;
    }

    // optional double orientation = 6;
    if (has_orientation()) {
      total_size += 1 + 8;
    }

    // optional double altitude = 7;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

    // optional int32 altConf = 8;
    if (has_altconf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->altconf());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double velocity = 9;
    if (has_velocity()) {
      total_size += 1 + 8;
    }

    // optional int32 vConf = 10;
    if (has_vconf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vconf());
    }

    // optional double heading = 11;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional int32 headConf = 12;
    if (has_headconf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headconf());
    }

    // optional string covariance = 13;
    if (has_covariance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->covariance());
    }

    // optional string sigUUID = 14;
    if (has_siguuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->siguuid());
    }

    // optional string geoTime = 15;
    if (has_geotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geotime());
    }

    // optional string classification = 16 [default = ""];
    if (has_classification()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classification());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoPoint::MergeFrom(const GeoPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_majoraxis()) {
      set_majoraxis(from.majoraxis());
    }
    if (from.has_minoraxis()) {
      set_minoraxis(from.minoraxis());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_altconf()) {
      set_altconf(from.altconf());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_vconf()) {
      set_vconf(from.vconf());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_headconf()) {
      set_headconf(from.headconf());
    }
    if (from.has_covariance()) {
      set_covariance(from.covariance());
    }
    if (from.has_siguuid()) {
      set_siguuid(from.siguuid());
    }
    if (from.has_geotime()) {
      set_geotime(from.geotime());
    }
    if (from.has_classification()) {
      set_classification(from.classification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoPoint::CopyFrom(const GeoPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPoint::IsInitialized() const {

  return true;
}

void GeoPoint::Swap(GeoPoint* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(majoraxis_, other->majoraxis_);
    std::swap(minoraxis_, other->minoraxis_);
    std::swap(orientation_, other->orientation_);
    std::swap(altitude_, other->altitude_);
    std::swap(altconf_, other->altconf_);
    std::swap(velocity_, other->velocity_);
    std::swap(vconf_, other->vconf_);
    std::swap(heading_, other->heading_);
    std::swap(headconf_, other->headconf_);
    std::swap(covariance_, other->covariance_);
    std::swap(siguuid_, other->siguuid_);
    std::swap(geotime_, other->geotime_);
    std::swap(classification_, other->classification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoPoint_descriptor_;
  metadata.reflection = GeoPoint_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ActiveList::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ActiveList::kMsgNameFieldNumber;
const int ActiveList::kSatFieldNumber;
const int ActiveList::kMsgIDFieldNumber;
const int ActiveList::kClassificationFieldNumber;
const int ActiveList::kDetFieldNumber;
#endif  // !_MSC_VER

ActiveList::ActiveList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActiveList::InitAsDefaultInstance() {
  sat_ = const_cast< ::ds_msg::SatInfo*>(&::ds_msg::SatInfo::default_instance());
}

ActiveList::ActiveList(const ActiveList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActiveList::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  sat_ = NULL;
  msgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActiveList::~ActiveList() {
  SharedDtor();
}

void ActiveList::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgid_ != &::google::protobuf::internal::kEmptyString) {
    delete msgid_;
  }
  if (classification_ != &::google::protobuf::internal::kEmptyString) {
    delete classification_;
  }
  if (this != default_instance_) {
    delete sat_;
  }
}

void ActiveList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActiveList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActiveList_descriptor_;
}

const ActiveList& ActiveList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DSMessages_2eproto();
  return *default_instance_;
}

ActiveList* ActiveList::default_instance_ = NULL;

ActiveList* ActiveList::New() const {
  return new ActiveList;
}

void ActiveList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_sat()) {
      if (sat_ != NULL) sat_->::ds_msg::SatInfo::Clear();
    }
    if (has_msgid()) {
      if (msgid_ != &::google::protobuf::internal::kEmptyString) {
        msgid_->clear();
      }
    }
    if (has_classification()) {
      if (classification_ != &::google::protobuf::internal::kEmptyString) {
        classification_->clear();
      }
    }
  }
  det_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActiveList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ACTIVE_LIST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sat;
        break;
      }

      // optional .ds_msg.SatInfo sat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgID;
        break;
      }

      // optional string msgID = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgid().data(), this->msgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_classification;
        break;
      }

      // optional string classification = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->classification().data(), this->classification().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_det;
        break;
      }

      // repeated .ds_msg.Detection det = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_det:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_det()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_det;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActiveList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ACTIVE_LIST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .ds_msg.SatInfo sat = 2;
  if (has_sat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sat(), output);
  }

  // optional string msgID = 3 [default = ""];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msgid(), output);
  }

  // optional string classification = 4 [default = ""];
  if (has_classification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->classification().data(), this->classification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->classification(), output);
  }

  // repeated .ds_msg.Detection det = 5;
  for (int i = 0; i < this->det_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->det(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActiveList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ACTIVE_LIST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .ds_msg.SatInfo sat = 2;
  if (has_sat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sat(), target);
  }

  // optional string msgID = 3 [default = ""];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msgid(), target);
  }

  // optional string classification = 4 [default = ""];
  if (has_classification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->classification().data(), this->classification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->classification(), target);
  }

  // repeated .ds_msg.Detection det = 5;
  for (int i = 0; i < this->det_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->det(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActiveList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ACTIVE_LIST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .ds_msg.SatInfo sat = 2;
    if (has_sat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sat());
    }

    // optional string msgID = 3 [default = ""];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgid());
    }

    // optional string classification = 4 [default = ""];
    if (has_classification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classification());
    }

  }
  // repeated .ds_msg.Detection det = 5;
  total_size += 1 * this->det_size();
  for (int i = 0; i < this->det_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->det(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActiveList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActiveList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActiveList::MergeFrom(const ActiveList& from) {
  GOOGLE_CHECK_NE(&from, this);
  det_.MergeFrom(from.det_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_sat()) {
      mutable_sat()->::ds_msg::SatInfo::MergeFrom(from.sat());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_classification()) {
      set_classification(from.classification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActiveList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveList::CopyFrom(const ActiveList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveList::IsInitialized() const {

  return true;
}

void ActiveList::Swap(ActiveList* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(sat_, other->sat_);
    std::swap(msgid_, other->msgid_);
    std::swap(classification_, other->classification_);
    det_.Swap(&other->det_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActiveList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActiveList_descriptor_;
  metadata.reflection = ActiveList_reflection_;
  return metadata;
}


// ===================================================================

::std::string* InitiateGeo::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int InitiateGeo::kMsgNameFieldNumber;
const int InitiateGeo::kSigUUIDFieldNumber;
const int InitiateGeo::kPriorityFieldNumber;
const int InitiateGeo::kDurationFieldNumber;
const int InitiateGeo::kForceFieldNumber;
#endif  // !_MSC_VER

InitiateGeo::InitiateGeo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitiateGeo::InitAsDefaultInstance() {
}

InitiateGeo::InitiateGeo(const InitiateGeo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitiateGeo::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  siguuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  priority_ = 0;
  duration_ = 300;
  force_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitiateGeo::~InitiateGeo() {
  SharedDtor();
}

void InitiateGeo::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (siguuid_ != &::google::protobuf::internal::kEmptyString) {
    delete siguuid_;
  }
  if (this != default_instance_) {
  }
}

void InitiateGeo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitiateGeo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitiateGeo_descriptor_;
}

const InitiateGeo& InitiateGeo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DSMessages_2eproto();
  return *default_instance_;
}

InitiateGeo* InitiateGeo::default_instance_ = NULL;

InitiateGeo* InitiateGeo::New() const {
  return new InitiateGeo;
}

void InitiateGeo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_siguuid()) {
      if (siguuid_ != &::google::protobuf::internal::kEmptyString) {
        siguuid_->clear();
      }
    }
    priority_ = 0;
    duration_ = 300;
    force_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitiateGeo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "INITIATE_GEO"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sigUUID;
        break;
      }

      // optional string sigUUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigUUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_siguuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->siguuid().data(), this->siguuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_priority;
        break;
      }

      // optional int32 priority = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_duration;
        break;
      }

      // optional double duration = 4 [default = 300];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_force;
        break;
      }

      // optional bool force = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitiateGeo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "INITIATE_GEO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string sigUUID = 2;
  if (has_siguuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siguuid().data(), this->siguuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->siguuid(), output);
  }

  // optional int32 priority = 3 [default = 0];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  // optional double duration = 4 [default = 300];
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->duration(), output);
  }

  // optional bool force = 5 [default = false];
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->force(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitiateGeo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "INITIATE_GEO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string sigUUID = 2;
  if (has_siguuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siguuid().data(), this->siguuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->siguuid(), target);
  }

  // optional int32 priority = 3 [default = 0];
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->priority(), target);
  }

  // optional double duration = 4 [default = 300];
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->duration(), target);
  }

  // optional bool force = 5 [default = false];
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->force(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitiateGeo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "INITIATE_GEO"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string sigUUID = 2;
    if (has_siguuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->siguuid());
    }

    // optional int32 priority = 3 [default = 0];
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional double duration = 4 [default = 300];
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional bool force = 5 [default = false];
    if (has_force()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitiateGeo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitiateGeo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitiateGeo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitiateGeo::MergeFrom(const InitiateGeo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_siguuid()) {
      set_siguuid(from.siguuid());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitiateGeo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitiateGeo::CopyFrom(const InitiateGeo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitiateGeo::IsInitialized() const {

  return true;
}

void InitiateGeo::Swap(InitiateGeo* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(siguuid_, other->siguuid_);
    std::swap(priority_, other->priority_);
    std::swap(duration_, other->duration_);
    std::swap(force_, other->force_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitiateGeo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitiateGeo_descriptor_;
  metadata.reflection = InitiateGeo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SignalStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SignalStatus::kMsgNameFieldNumber;
const int SignalStatus::kSigUUIDFieldNumber;
const int SignalStatus::kSigTypeFieldNumber;
const int SignalStatus::kProcFieldNumber;
const int SignalStatus::kGeoStatusFieldNumber;
const int SignalStatus::kTelemAvailFieldNumber;
const int SignalStatus::kTelemLastTimeFieldNumber;
const int SignalStatus::kGeoPriFieldNumber;
const int SignalStatus::kEventIDFieldNumber;
const int SignalStatus::kSigNameFieldNumber;
#endif  // !_MSC_VER

SignalStatus::SignalStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalStatus::InitAsDefaultInstance() {
}

SignalStatus::SignalStatus(const SignalStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  siguuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sigtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proc_ = false;
  geostatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  telemavail_ = false;
  telemlasttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  geopri_ = GOOGLE_LONGLONG(0);
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signame_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalStatus::~SignalStatus() {
  SharedDtor();
}

void SignalStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (siguuid_ != &::google::protobuf::internal::kEmptyString) {
    delete siguuid_;
  }
  if (sigtype_ != &::google::protobuf::internal::kEmptyString) {
    delete sigtype_;
  }
  if (geostatus_ != &::google::protobuf::internal::kEmptyString) {
    delete geostatus_;
  }
  if (telemlasttime_ != &::google::protobuf::internal::kEmptyString) {
    delete telemlasttime_;
  }
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (signame_ != &::google::protobuf::internal::kEmptyString) {
    delete signame_;
  }
  if (this != default_instance_) {
  }
}

void SignalStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalStatus_descriptor_;
}

const SignalStatus& SignalStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DSMessages_2eproto();
  return *default_instance_;
}

SignalStatus* SignalStatus::default_instance_ = NULL;

SignalStatus* SignalStatus::New() const {
  return new SignalStatus;
}

void SignalStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_siguuid()) {
      if (siguuid_ != &::google::protobuf::internal::kEmptyString) {
        siguuid_->clear();
      }
    }
    if (has_sigtype()) {
      if (sigtype_ != &::google::protobuf::internal::kEmptyString) {
        sigtype_->clear();
      }
    }
    proc_ = false;
    if (has_geostatus()) {
      if (geostatus_ != &::google::protobuf::internal::kEmptyString) {
        geostatus_->clear();
      }
    }
    telemavail_ = false;
    if (has_telemlasttime()) {
      if (telemlasttime_ != &::google::protobuf::internal::kEmptyString) {
        telemlasttime_->clear();
      }
    }
    geopri_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
    if (has_signame()) {
      if (signame_ != &::google::protobuf::internal::kEmptyString) {
        signame_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SIGNAL_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sigUUID;
        break;
      }

      // optional string sigUUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigUUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_siguuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->siguuid().data(), this->siguuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sigType;
        break;
      }

      // optional string sigType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sigtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sigtype().data(), this->sigtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_proc;
        break;
      }

      // optional bool proc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &proc_)));
          set_has_proc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_geoStatus;
        break;
      }

      // optional string geoStatus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geoStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geostatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geostatus().data(), this->geostatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_telemAvail;
        break;
      }

      // optional bool telemAvail = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_telemAvail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &telemavail_)));
          set_has_telemavail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_telemLastTime;
        break;
      }

      // optional string telemLastTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_telemLastTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_telemlasttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->telemlasttime().data(), this->telemlasttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_geoPri;
        break;
      }

      // optional int64 geoPri = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_geoPri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &geopri_)));
          set_has_geopri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_eventID;
        break;
      }

      // optional string eventID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_sigName;
        break;
      }

      // optional string sigName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signame()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signame().data(), this->signame().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SIGNAL_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string sigUUID = 2;
  if (has_siguuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siguuid().data(), this->siguuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->siguuid(), output);
  }

  // optional string sigType = 3;
  if (has_sigtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sigtype().data(), this->sigtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sigtype(), output);
  }

  // optional bool proc = 4;
  if (has_proc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->proc(), output);
  }

  // optional string geoStatus = 5;
  if (has_geostatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geostatus().data(), this->geostatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->geostatus(), output);
  }

  // optional bool telemAvail = 6;
  if (has_telemavail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->telemavail(), output);
  }

  // optional string telemLastTime = 7;
  if (has_telemlasttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->telemlasttime().data(), this->telemlasttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->telemlasttime(), output);
  }

  // optional int64 geoPri = 8;
  if (has_geopri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->geopri(), output);
  }

  // optional string eventID = 9;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->eventid(), output);
  }

  // optional string sigName = 10;
  if (has_signame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signame().data(), this->signame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->signame(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SIGNAL_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string sigUUID = 2;
  if (has_siguuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siguuid().data(), this->siguuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->siguuid(), target);
  }

  // optional string sigType = 3;
  if (has_sigtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sigtype().data(), this->sigtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sigtype(), target);
  }

  // optional bool proc = 4;
  if (has_proc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->proc(), target);
  }

  // optional string geoStatus = 5;
  if (has_geostatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geostatus().data(), this->geostatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->geostatus(), target);
  }

  // optional bool telemAvail = 6;
  if (has_telemavail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->telemavail(), target);
  }

  // optional string telemLastTime = 7;
  if (has_telemlasttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->telemlasttime().data(), this->telemlasttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->telemlasttime(), target);
  }

  // optional int64 geoPri = 8;
  if (has_geopri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->geopri(), target);
  }

  // optional string eventID = 9;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->eventid(), target);
  }

  // optional string sigName = 10;
  if (has_signame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signame().data(), this->signame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->signame(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SIGNAL_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string sigUUID = 2;
    if (has_siguuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->siguuid());
    }

    // optional string sigType = 3;
    if (has_sigtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sigtype());
    }

    // optional bool proc = 4;
    if (has_proc()) {
      total_size += 1 + 1;
    }

    // optional string geoStatus = 5;
    if (has_geostatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geostatus());
    }

    // optional bool telemAvail = 6;
    if (has_telemavail()) {
      total_size += 1 + 1;
    }

    // optional string telemLastTime = 7;
    if (has_telemlasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->telemlasttime());
    }

    // optional int64 geoPri = 8;
    if (has_geopri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->geopri());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string eventID = 9;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

    // optional string sigName = 10;
    if (has_signame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signame());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalStatus::MergeFrom(const SignalStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_siguuid()) {
      set_siguuid(from.siguuid());
    }
    if (from.has_sigtype()) {
      set_sigtype(from.sigtype());
    }
    if (from.has_proc()) {
      set_proc(from.proc());
    }
    if (from.has_geostatus()) {
      set_geostatus(from.geostatus());
    }
    if (from.has_telemavail()) {
      set_telemavail(from.telemavail());
    }
    if (from.has_telemlasttime()) {
      set_telemlasttime(from.telemlasttime());
    }
    if (from.has_geopri()) {
      set_geopri(from.geopri());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_signame()) {
      set_signame(from.signame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalStatus::CopyFrom(const SignalStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalStatus::IsInitialized() const {

  return true;
}

void SignalStatus::Swap(SignalStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(siguuid_, other->siguuid_);
    std::swap(sigtype_, other->sigtype_);
    std::swap(proc_, other->proc_);
    std::swap(geostatus_, other->geostatus_);
    std::swap(telemavail_, other->telemavail_);
    std::swap(telemlasttime_, other->telemlasttime_);
    std::swap(geopri_, other->geopri_);
    std::swap(eventid_, other->eventid_);
    std::swap(signame_, other->signame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalStatus_descriptor_;
  metadata.reflection = SignalStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* StatusRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int StatusRequest::kMsgNameFieldNumber;
const int StatusRequest::kSigUUIDFieldNumber;
#endif  // !_MSC_VER

StatusRequest::StatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusRequest::InitAsDefaultInstance() {
}

StatusRequest::StatusRequest(const StatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  siguuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusRequest::~StatusRequest() {
  SharedDtor();
}

void StatusRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (siguuid_ != &::google::protobuf::internal::kEmptyString) {
    delete siguuid_;
  }
  if (this != default_instance_) {
  }
}

void StatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusRequest_descriptor_;
}

const StatusRequest& StatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DSMessages_2eproto();
  return *default_instance_;
}

StatusRequest* StatusRequest::default_instance_ = NULL;

StatusRequest* StatusRequest::New() const {
  return new StatusRequest;
}

void StatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_siguuid()) {
      if (siguuid_ != &::google::protobuf::internal::kEmptyString) {
        siguuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "STAT_REQ"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sigUUID;
        break;
      }

      // optional string sigUUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigUUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_siguuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->siguuid().data(), this->siguuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "STAT_REQ"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string sigUUID = 2;
  if (has_siguuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siguuid().data(), this->siguuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->siguuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "STAT_REQ"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string sigUUID = 2;
  if (has_siguuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siguuid().data(), this->siguuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->siguuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "STAT_REQ"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string sigUUID = 2;
    if (has_siguuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->siguuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusRequest::MergeFrom(const StatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_siguuid()) {
      set_siguuid(from.siguuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRequest::IsInitialized() const {

  return true;
}

void StatusRequest::Swap(StatusRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(siguuid_, other->siguuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusRequest_descriptor_;
  metadata.reflection = StatusRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ds_msg

// @@protoc_insertion_point(global_scope)
