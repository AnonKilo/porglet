// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FalconTriggerMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FalconTriggerMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace falcon_trigger_msg {

namespace {

const ::google::protobuf::Descriptor* Intercept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Intercept_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Intercept_TeamType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InterceptAmpX_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InterceptAmpX_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalLocked_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalLocked_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalTimeout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalTimeout_reflection_ = NULL;
const ::google::protobuf::Descriptor* InterceptListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InterceptListRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InterceptListRequest_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RunGoNoGo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunGoNoGo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlacklistRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlacklistRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BlacklistRequest_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProcessTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessTip_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeoLaunch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoLaunch_reflection_ = NULL;
const ::google::protobuf::Descriptor* WifiLaunch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WifiLaunch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReallocateResources_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReallocateResources_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControlUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlUpgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* RfcuSwitch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RfcuSwitch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGDopplerTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGDopplerTip_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FalconTriggerMessages_2eproto() {
  protobuf_AddDesc_FalconTriggerMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FalconTriggerMessages.proto");
  GOOGLE_CHECK(file != NULL);
  Intercept_descriptor_ = file->message_type(0);
  static const int Intercept_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, istrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, receiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, antenna_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, snr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, searchscrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, searchtier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, numframes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, detconf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, procparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, ssc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, band_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, polarization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, uniquefield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, gpsposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, priming_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, feedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, detectionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, receiveratn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, teamtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, noprocess_),
  };
  Intercept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Intercept_descriptor_,
      Intercept::default_instance_,
      Intercept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intercept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Intercept));
  Intercept_TeamType_descriptor_ = Intercept_descriptor_->enum_type(0);
  InterceptAmpX_descriptor_ = file->message_type(1);
  static const int InterceptAmpX_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, istrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, receiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, antenna_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, snr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, searchscrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, searchtier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, numframes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, detconf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, procparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, uniquefield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, gpsposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, priming_),
  };
  InterceptAmpX_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InterceptAmpX_descriptor_,
      InterceptAmpX::default_instance_,
      InterceptAmpX_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptAmpX, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InterceptAmpX));
  SignalLocked_descriptor_ = file->message_type(2);
  static const int SignalLocked_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLocked, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLocked, istrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLocked, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLocked, antenna_),
  };
  SignalLocked_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalLocked_descriptor_,
      SignalLocked::default_instance_,
      SignalLocked_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLocked, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLocked, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalLocked));
  SignalTimeout_descriptor_ = file->message_type(3);
  static const int SignalTimeout_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalTimeout, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalTimeout, istrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalTimeout, appid_),
  };
  SignalTimeout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalTimeout_descriptor_,
      SignalTimeout::default_instance_,
      SignalTimeout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalTimeout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalTimeout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalTimeout));
  InterceptListRequest_descriptor_ = file->message_type(4);
  static const int InterceptListRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptListRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptListRequest, istrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptListRequest, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptListRequest, uniqueid_),
  };
  InterceptListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InterceptListRequest_descriptor_,
      InterceptListRequest::default_instance_,
      InterceptListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InterceptListRequest));
  InterceptListRequest_Type_descriptor_ = InterceptListRequest_descriptor_->enum_type(0);
  RunGoNoGo_descriptor_ = file->message_type(5);
  static const int RunGoNoGo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGoNoGo, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGoNoGo, istrigger_),
  };
  RunGoNoGo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunGoNoGo_descriptor_,
      RunGoNoGo::default_instance_,
      RunGoNoGo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGoNoGo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGoNoGo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunGoNoGo));
  BlacklistRequest_descriptor_ = file->message_type(6);
  static const int BlacklistRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistRequest, istrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistRequest, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistRequest, entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistRequest, uniqueid_),
  };
  BlacklistRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlacklistRequest_descriptor_,
      BlacklistRequest::default_instance_,
      BlacklistRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlacklistRequest));
  BlacklistRequest_Type_descriptor_ = BlacklistRequest_descriptor_->enum_type(0);
  ProcessTip_descriptor_ = file->message_type(7);
  static const int ProcessTip_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTip, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTip, istrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTip, soi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTip, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTip, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTip, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTip, idnumber_),
  };
  ProcessTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessTip_descriptor_,
      ProcessTip::default_instance_,
      ProcessTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessTip));
  GeoLaunch_descriptor_ = file->message_type(8);
  static const int GeoLaunch_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoLaunch, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoLaunch, istrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoLaunch, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoLaunch, chan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoLaunch, az_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoLaunch, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoLaunch, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoLaunch, scrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoLaunch, rcvr_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoLaunch, message_id_),
  };
  GeoLaunch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoLaunch_descriptor_,
      GeoLaunch::default_instance_,
      GeoLaunch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoLaunch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoLaunch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoLaunch));
  WifiLaunch_descriptor_ = file->message_type(9);
  static const int WifiLaunch_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiLaunch, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiLaunch, istrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiLaunch, infile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiLaunch, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiLaunch, frametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiLaunch, csvfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiLaunch, chan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiLaunch, message_id_),
  };
  WifiLaunch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WifiLaunch_descriptor_,
      WifiLaunch::default_instance_,
      WifiLaunch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiLaunch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiLaunch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WifiLaunch));
  ReallocateResources_descriptor_ = file->message_type(10);
  static const int ReallocateResources_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReallocateResources, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReallocateResources, istrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReallocateResources, appid_),
  };
  ReallocateResources_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReallocateResources_descriptor_,
      ReallocateResources::default_instance_,
      ReallocateResources_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReallocateResources, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReallocateResources, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReallocateResources));
  ControlUpgrade_descriptor_ = file->message_type(11);
  static const int ControlUpgrade_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlUpgrade, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlUpgrade, istrigger_),
  };
  ControlUpgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControlUpgrade_descriptor_,
      ControlUpgrade::default_instance_,
      ControlUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlUpgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlUpgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControlUpgrade));
  RfcuSwitch_descriptor_ = file->message_type(12);
  static const int RfcuSwitch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RfcuSwitch, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RfcuSwitch, istrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RfcuSwitch, standbystate_),
  };
  RfcuSwitch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RfcuSwitch_descriptor_,
      RfcuSwitch::default_instance_,
      RfcuSwitch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RfcuSwitch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RfcuSwitch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RfcuSwitch));
  TGDopplerTip_descriptor_ = file->message_type(13);
  static const int TGDopplerTip_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGDopplerTip, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGDopplerTip, istrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGDopplerTip, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGDopplerTip, frequency_),
  };
  TGDopplerTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGDopplerTip_descriptor_,
      TGDopplerTip::default_instance_,
      TGDopplerTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGDopplerTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGDopplerTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGDopplerTip));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FalconTriggerMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Intercept_descriptor_, &Intercept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InterceptAmpX_descriptor_, &InterceptAmpX::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalLocked_descriptor_, &SignalLocked::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalTimeout_descriptor_, &SignalTimeout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InterceptListRequest_descriptor_, &InterceptListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunGoNoGo_descriptor_, &RunGoNoGo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlacklistRequest_descriptor_, &BlacklistRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessTip_descriptor_, &ProcessTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoLaunch_descriptor_, &GeoLaunch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WifiLaunch_descriptor_, &WifiLaunch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReallocateResources_descriptor_, &ReallocateResources::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControlUpgrade_descriptor_, &ControlUpgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RfcuSwitch_descriptor_, &RfcuSwitch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGDopplerTip_descriptor_, &TGDopplerTip::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FalconTriggerMessages_2eproto() {
  delete Intercept::default_instance_;
  delete Intercept_reflection_;
  delete Intercept::_default_msgname_;
  delete InterceptAmpX::default_instance_;
  delete InterceptAmpX_reflection_;
  delete InterceptAmpX::_default_msgname_;
  delete SignalLocked::default_instance_;
  delete SignalLocked_reflection_;
  delete SignalLocked::_default_msgname_;
  delete SignalTimeout::default_instance_;
  delete SignalTimeout_reflection_;
  delete SignalTimeout::_default_msgname_;
  delete InterceptListRequest::default_instance_;
  delete InterceptListRequest_reflection_;
  delete InterceptListRequest::_default_msgname_;
  delete RunGoNoGo::default_instance_;
  delete RunGoNoGo_reflection_;
  delete RunGoNoGo::_default_msgname_;
  delete BlacklistRequest::default_instance_;
  delete BlacklistRequest_reflection_;
  delete BlacklistRequest::_default_msgname_;
  delete ProcessTip::default_instance_;
  delete ProcessTip_reflection_;
  delete ProcessTip::_default_msgname_;
  delete GeoLaunch::default_instance_;
  delete GeoLaunch_reflection_;
  delete GeoLaunch::_default_msgname_;
  delete WifiLaunch::default_instance_;
  delete WifiLaunch_reflection_;
  delete WifiLaunch::_default_msgname_;
  delete ReallocateResources::default_instance_;
  delete ReallocateResources_reflection_;
  delete ReallocateResources::_default_msgname_;
  delete ControlUpgrade::default_instance_;
  delete ControlUpgrade_reflection_;
  delete ControlUpgrade::_default_msgname_;
  delete RfcuSwitch::default_instance_;
  delete RfcuSwitch_reflection_;
  delete RfcuSwitch::_default_msgname_;
  delete TGDopplerTip::default_instance_;
  delete TGDopplerTip_reflection_;
  delete TGDopplerTip::_default_msgname_;
}

void protobuf_AddDesc_FalconTriggerMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::falcon_common_msg::protobuf_AddDesc_FalconCommonMessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033FalconTriggerMessages.proto\022\022falcon_tr"
    "igger_msg\032\032FalconCommonMessages.proto\"\360\005"
    "\n\tIntercept\022\032\n\007msgName\030\001 \001(\t:\tINTERCEPT\022"
    "\027\n\tisTrigger\030\002 \001(\010:\004true\022\016\n\006signal\030\003 \001(\t"
    "\022\021\n\tfrequency\030\004 \001(\001\022\021\n\tbandwidth\030\005 \001(\002\022\020"
    "\n\010receiver\030\006 \001(\t\022\017\n\007antenna\030\007 \001(\t\022\022\n\007azi"
    "muth\030\010 \001(\002:\0010\022\024\n\televation\030\t \001(\002:\0010\022\016\n\003s"
    "nr\030\n \001(\002:\0010\022\021\n\ttimestamp\030\013 \001(\t\022\024\n\014search"
    "Scrypt\030\014 \001(\t\022\025\n\nsearchTier\030\r \001(\005:\0011\022\021\n\tn"
    "umFrames\030\016 \001(\005\022\017\n\007detConf\030\017 \001(\t\022\022\n\nprocP"
    "arams\030\020 \001(\t\022\017\n\003ssc\030\021 \001(\005:\002-1\022\014\n\004band\030\022 \001"
    "(\t\022\024\n\014polarization\030\023 \001(\t\022\022\n\010hostname\030\024 \001"
    "(\t:\000\022\022\n\010uniqueID\030\025 \001(\t:\000\022\025\n\013uniqueField\030"
    "\026 \001(\t:\000\022\025\n\013gpsPosition\030\027 \001(\t:\000\022\026\n\007primin"
    "g\030\030 \001(\010:\005false\022\022\n\010globalID\030\031 \001(\t:\000\022\022\n\006fe"
    "edID\030\032 \001(\003:\002-1\022\027\n\013detectionID\030\033 \001(\003:\002-1\022"
    "\025\n\013receiverATN\030\034 \001(\t:\000\022B\n\010teamType\030\035 \001(\016"
    "2&.falcon_trigger_msg.Intercept.TeamType"
    ":\010RED_TEAM\022\030\n\tnoProcess\030\036 \001(\010:\005false\"J\n\010"
    "TeamType\022\r\n\tBLUE_TEAM\020\000\022\016\n\nWHITE_TEAM\020\001\022"
    "\014\n\010RED_TEAM\020\002\022\021\n\rHIGH_PRIORITY\020\003\"\302\003\n\rInt"
    "erceptAmpX\022\037\n\007msgName\030\001 \001(\t:\016INTERCEPT_A"
    "MPX\022\027\n\tisTrigger\030\002 \001(\010:\004true\022\016\n\006signal\030\003"
    " \001(\t\022\021\n\tfrequency\030\004 \001(\001\022\021\n\tbandwidth\030\005 \001"
    "(\002\022\020\n\010receiver\030\006 \001(\t\022\017\n\007antenna\030\007 \001(\t\022\022\n"
    "\007azimuth\030\010 \001(\002:\0010\022\024\n\televation\030\t \001(\002:\0010\022"
    "\016\n\003snr\030\n \001(\002:\0010\022\021\n\ttimestamp\030\013 \001(\t\022\024\n\014se"
    "archScrypt\030\014 \001(\t\022\025\n\nsearchTier\030\r \001(\005:\0011\022"
    "\021\n\tnumFrames\030\016 \001(\005\022\017\n\007detConf\030\017 \001(\t\022\022\n\np"
    "rocParams\030\020 \001(\t\022\022\n\010hostname\030\021 \001(\t:\000\022\022\n\010u"
    "niqueID\030\022 \001(\t:\000\022\025\n\013uniqueField\030\023 \001(\t:\000\022\025"
    "\n\013gpsPosition\030\024 \001(\t:\000\022\026\n\007priming\030\025 \001(\010:\005"
    "false\"g\n\014SignalLocked\022\036\n\007msgName\030\001 \001(\t:\r"
    "SIGNAL_LOCKED\022\027\n\tisTrigger\030\002 \001(\010:\004true\022\r"
    "\n\005appID\030\003 \001(\005\022\017\n\007antenna\030\004 \001(\t\"X\n\rSignal"
    "Timeout\022\037\n\007msgName\030\001 \001(\t:\016SIGNAL_TIMEOUT"
    "\022\027\n\tisTrigger\030\002 \001(\010:\004true\022\r\n\005appID\030\003 \001(\005"
    "\"\333\001\n\024InterceptListRequest\022\'\n\007msgName\030\001 \001"
    "(\t:\026INTERCEPT_LIST_REQUEST\022\027\n\tisTrigger\030"
    "\002 \001(\010:\004true\022B\n\013requestType\030\003 \001(\0162-.falco"
    "n_trigger_msg.InterceptListRequest.Type\022"
    "\022\n\010uniqueID\030\004 \001(\t:\000\")\n\004Type\022\n\n\006STATUS\020\000\022"
    "\n\n\006REMOVE\020\001\022\t\n\005CLEAR\020\002\"B\n\tRunGoNoGo\022\034\n\007m"
    "sgName\030\001 \001(\t:\013RUN_GO_NOGO\022\027\n\tisTrigger\030\002"
    " \001(\010:\004true\"\376\001\n\020BlacklistRequest\022\"\n\007msgNa"
    "me\030\001 \001(\t:\021BLACKLIST_REQUEST\022\027\n\tisTrigger"
    "\030\002 \001(\010:\004true\022>\n\013requestType\030\003 \001(\0162).falc"
    "on_trigger_msg.BlacklistRequest.Type\0220\n\005"
    "entry\030\004 \001(\0132!.falcon_common_msg.Blacklis"
    "tEntry\022\022\n\010uniqueID\030\005 \001(\t:\000\"\'\n\004Type\022\n\n\006ST"
    "ATUS\020\000\022\007\n\003ADD\020\001\022\n\n\006REMOVE\020\002\"\232\001\n\nProcessT"
    "ip\022\034\n\007msgName\030\001 \001(\t:\013PROCESS_TIP\022\027\n\tisTr"
    "igger\030\002 \001(\010:\004true\022\013\n\003soi\030\003 \001(\005\022\021\n\tfreque"
    "ncy\030\004 \001(\001\022\020\n\010latitude\030\005 \001(\002\022\021\n\tlongitude"
    "\030\006 \001(\002\022\020\n\010idNumber\030\007 \001(\001\"\270\001\n\tGeoLaunch\022\033"
    "\n\007msgName\030\001 \001(\t:\nGEO_LAUNCH\022\027\n\tisTrigger"
    "\030\002 \001(\010:\004true\022\n\n\002cf\030\003 \001(\002\022\014\n\004chan\030\004 \001(\005\022\n"
    "\n\002az\030\005 \001(\005\022\013\n\003lat\030\006 \001(\002\022\013\n\003lon\030\007 \001(\002\022\016\n\006"
    "scrypt\030\010 \001(\t\022\021\n\trcvr_name\030\t \001(\t\022\022\n\nmessa"
    "ge_id\030\n \001(\001\"\246\001\n\nWifiLaunch\022\034\n\007msgName\030\001 "
    "\001(\t:\013WIFI_LAUNCH\022\027\n\tisTrigger\030\002 \001(\010:\004tru"
    "e\022\016\n\006infile\030\003 \001(\t\022\013\n\003mac\030\004 \001(\t\022\021\n\tframeT"
    "ype\030\005 \001(\t\022\017\n\007csvfile\030\006 \001(\t\022\014\n\004chan\030\007 \001(\005"
    "\022\022\n\nmessage_id\030\010 \001(\001\"d\n\023ReallocateResour"
    "ces\022%\n\007msgName\030\001 \001(\t:\024REALLOCATE_RESOURC"
    "ES\022\027\n\tisTrigger\030\002 \001(\010:\004true\022\r\n\005appID\030\003 \001"
    "(\005\"K\n\016ControlUpgrade\022 \n\007msgName\030\001 \001(\t:\017C"
    "ONTROL_UPGRADE\022\027\n\tisTrigger\030\002 \001(\010:\004true\""
    "Y\n\nRfcuSwitch\022\034\n\007msgName\030\001 \001(\t:\013RFCU_SWI"
    "TCH\022\027\n\tisTrigger\030\002 \001(\010:\004true\022\024\n\014standbyS"
    "tate\030\003 \001(\005\"m\n\014TGDopplerTip\022\037\n\007msgName\030\001 "
    "\001(\t:\016TG_DOPPLER_TIP\022\027\n\tisTrigger\030\002 \001(\010:\004"
    "true\022\020\n\010globalID\030\003 \001(\t\022\021\n\tfrequency\030\004 \001("
    "\001B\025\n\023fv.protos.kepsvisor", 2944);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FalconTriggerMessages.proto", &protobuf_RegisterTypes);
  Intercept::_default_msgname_ =
      new ::std::string("INTERCEPT", 9);
  Intercept::default_instance_ = new Intercept();
  InterceptAmpX::_default_msgname_ =
      new ::std::string("INTERCEPT_AMPX", 14);
  InterceptAmpX::default_instance_ = new InterceptAmpX();
  SignalLocked::_default_msgname_ =
      new ::std::string("SIGNAL_LOCKED", 13);
  SignalLocked::default_instance_ = new SignalLocked();
  SignalTimeout::_default_msgname_ =
      new ::std::string("SIGNAL_TIMEOUT", 14);
  SignalTimeout::default_instance_ = new SignalTimeout();
  InterceptListRequest::_default_msgname_ =
      new ::std::string("INTERCEPT_LIST_REQUEST", 22);
  InterceptListRequest::default_instance_ = new InterceptListRequest();
  RunGoNoGo::_default_msgname_ =
      new ::std::string("RUN_GO_NOGO", 11);
  RunGoNoGo::default_instance_ = new RunGoNoGo();
  BlacklistRequest::_default_msgname_ =
      new ::std::string("BLACKLIST_REQUEST", 17);
  BlacklistRequest::default_instance_ = new BlacklistRequest();
  ProcessTip::_default_msgname_ =
      new ::std::string("PROCESS_TIP", 11);
  ProcessTip::default_instance_ = new ProcessTip();
  GeoLaunch::_default_msgname_ =
      new ::std::string("GEO_LAUNCH", 10);
  GeoLaunch::default_instance_ = new GeoLaunch();
  WifiLaunch::_default_msgname_ =
      new ::std::string("WIFI_LAUNCH", 11);
  WifiLaunch::default_instance_ = new WifiLaunch();
  ReallocateResources::_default_msgname_ =
      new ::std::string("REALLOCATE_RESOURCES", 20);
  ReallocateResources::default_instance_ = new ReallocateResources();
  ControlUpgrade::_default_msgname_ =
      new ::std::string("CONTROL_UPGRADE", 15);
  ControlUpgrade::default_instance_ = new ControlUpgrade();
  RfcuSwitch::_default_msgname_ =
      new ::std::string("RFCU_SWITCH", 11);
  RfcuSwitch::default_instance_ = new RfcuSwitch();
  TGDopplerTip::_default_msgname_ =
      new ::std::string("TG_DOPPLER_TIP", 14);
  TGDopplerTip::default_instance_ = new TGDopplerTip();
  Intercept::default_instance_->InitAsDefaultInstance();
  InterceptAmpX::default_instance_->InitAsDefaultInstance();
  SignalLocked::default_instance_->InitAsDefaultInstance();
  SignalTimeout::default_instance_->InitAsDefaultInstance();
  InterceptListRequest::default_instance_->InitAsDefaultInstance();
  RunGoNoGo::default_instance_->InitAsDefaultInstance();
  BlacklistRequest::default_instance_->InitAsDefaultInstance();
  ProcessTip::default_instance_->InitAsDefaultInstance();
  GeoLaunch::default_instance_->InitAsDefaultInstance();
  WifiLaunch::default_instance_->InitAsDefaultInstance();
  ReallocateResources::default_instance_->InitAsDefaultInstance();
  ControlUpgrade::default_instance_->InitAsDefaultInstance();
  RfcuSwitch::default_instance_->InitAsDefaultInstance();
  TGDopplerTip::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FalconTriggerMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FalconTriggerMessages_2eproto {
  StaticDescriptorInitializer_FalconTriggerMessages_2eproto() {
    protobuf_AddDesc_FalconTriggerMessages_2eproto();
  }
} static_descriptor_initializer_FalconTriggerMessages_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Intercept_TeamType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Intercept_TeamType_descriptor_;
}
bool Intercept_TeamType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Intercept_TeamType Intercept::BLUE_TEAM;
const Intercept_TeamType Intercept::WHITE_TEAM;
const Intercept_TeamType Intercept::RED_TEAM;
const Intercept_TeamType Intercept::HIGH_PRIORITY;
const Intercept_TeamType Intercept::TeamType_MIN;
const Intercept_TeamType Intercept::TeamType_MAX;
const int Intercept::TeamType_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* Intercept::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int Intercept::kMsgNameFieldNumber;
const int Intercept::kIsTriggerFieldNumber;
const int Intercept::kSignalFieldNumber;
const int Intercept::kFrequencyFieldNumber;
const int Intercept::kBandwidthFieldNumber;
const int Intercept::kReceiverFieldNumber;
const int Intercept::kAntennaFieldNumber;
const int Intercept::kAzimuthFieldNumber;
const int Intercept::kElevationFieldNumber;
const int Intercept::kSnrFieldNumber;
const int Intercept::kTimestampFieldNumber;
const int Intercept::kSearchScryptFieldNumber;
const int Intercept::kSearchTierFieldNumber;
const int Intercept::kNumFramesFieldNumber;
const int Intercept::kDetConfFieldNumber;
const int Intercept::kProcParamsFieldNumber;
const int Intercept::kSscFieldNumber;
const int Intercept::kBandFieldNumber;
const int Intercept::kPolarizationFieldNumber;
const int Intercept::kHostnameFieldNumber;
const int Intercept::kUniqueIDFieldNumber;
const int Intercept::kUniqueFieldFieldNumber;
const int Intercept::kGpsPositionFieldNumber;
const int Intercept::kPrimingFieldNumber;
const int Intercept::kGlobalIDFieldNumber;
const int Intercept::kFeedIDFieldNumber;
const int Intercept::kDetectionIDFieldNumber;
const int Intercept::kReceiverATNFieldNumber;
const int Intercept::kTeamTypeFieldNumber;
const int Intercept::kNoProcessFieldNumber;
#endif  // !_MSC_VER

Intercept::Intercept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Intercept::InitAsDefaultInstance() {
}

Intercept::Intercept(const Intercept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Intercept::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  istrigger_ = true;
  signal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frequency_ = 0;
  bandwidth_ = 0;
  receiver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  antenna_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  azimuth_ = 0;
  elevation_ = 0;
  snr_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  searchscrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  searchtier_ = 1;
  numframes_ = 0;
  detconf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  procparams_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ssc_ = -1;
  band_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  polarization_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uniquefield_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gpsposition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  priming_ = false;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  feedid_ = GOOGLE_LONGLONG(-1);
  detectionid_ = GOOGLE_LONGLONG(-1);
  receiveratn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamtype_ = 2;
  noprocess_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Intercept::~Intercept() {
  SharedDtor();
}

void Intercept::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (signal_ != &::google::protobuf::internal::kEmptyString) {
    delete signal_;
  }
  if (receiver_ != &::google::protobuf::internal::kEmptyString) {
    delete receiver_;
  }
  if (antenna_ != &::google::protobuf::internal::kEmptyString) {
    delete antenna_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (searchscrypt_ != &::google::protobuf::internal::kEmptyString) {
    delete searchscrypt_;
  }
  if (detconf_ != &::google::protobuf::internal::kEmptyString) {
    delete detconf_;
  }
  if (procparams_ != &::google::protobuf::internal::kEmptyString) {
    delete procparams_;
  }
  if (band_ != &::google::protobuf::internal::kEmptyString) {
    delete band_;
  }
  if (polarization_ != &::google::protobuf::internal::kEmptyString) {
    delete polarization_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (uniquefield_ != &::google::protobuf::internal::kEmptyString) {
    delete uniquefield_;
  }
  if (gpsposition_ != &::google::protobuf::internal::kEmptyString) {
    delete gpsposition_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (receiveratn_ != &::google::protobuf::internal::kEmptyString) {
    delete receiveratn_;
  }
  if (this != default_instance_) {
  }
}

void Intercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Intercept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Intercept_descriptor_;
}

const Intercept& Intercept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTriggerMessages_2eproto();
  return *default_instance_;
}

Intercept* Intercept::default_instance_ = NULL;

Intercept* Intercept::New() const {
  return new Intercept;
}

void Intercept::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    istrigger_ = true;
    if (has_signal()) {
      if (signal_ != &::google::protobuf::internal::kEmptyString) {
        signal_->clear();
      }
    }
    frequency_ = 0;
    bandwidth_ = 0;
    if (has_receiver()) {
      if (receiver_ != &::google::protobuf::internal::kEmptyString) {
        receiver_->clear();
      }
    }
    if (has_antenna()) {
      if (antenna_ != &::google::protobuf::internal::kEmptyString) {
        antenna_->clear();
      }
    }
    azimuth_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    elevation_ = 0;
    snr_ = 0;
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    if (has_searchscrypt()) {
      if (searchscrypt_ != &::google::protobuf::internal::kEmptyString) {
        searchscrypt_->clear();
      }
    }
    searchtier_ = 1;
    numframes_ = 0;
    if (has_detconf()) {
      if (detconf_ != &::google::protobuf::internal::kEmptyString) {
        detconf_->clear();
      }
    }
    if (has_procparams()) {
      if (procparams_ != &::google::protobuf::internal::kEmptyString) {
        procparams_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    ssc_ = -1;
    if (has_band()) {
      if (band_ != &::google::protobuf::internal::kEmptyString) {
        band_->clear();
      }
    }
    if (has_polarization()) {
      if (polarization_ != &::google::protobuf::internal::kEmptyString) {
        polarization_->clear();
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_uniqueid()) {
      if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
        uniqueid_->clear();
      }
    }
    if (has_uniquefield()) {
      if (uniquefield_ != &::google::protobuf::internal::kEmptyString) {
        uniquefield_->clear();
      }
    }
    if (has_gpsposition()) {
      if (gpsposition_ != &::google::protobuf::internal::kEmptyString) {
        gpsposition_->clear();
      }
    }
    priming_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    feedid_ = GOOGLE_LONGLONG(-1);
    detectionid_ = GOOGLE_LONGLONG(-1);
    if (has_receiveratn()) {
      if (receiveratn_ != &::google::protobuf::internal::kEmptyString) {
        receiveratn_->clear();
      }
    }
    teamtype_ = 2;
    noprocess_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Intercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "INTERCEPT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signal;
        break;
      }

      // optional string signal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signal().data(), this->signal().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_frequency;
        break;
      }

      // optional double frequency = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_bandwidth;
        break;
      }

      // optional float bandwidth = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_receiver;
        break;
      }

      // optional string receiver = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receiver().data(), this->receiver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_antenna;
        break;
      }

      // optional string antenna = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_antenna:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_antenna()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->antenna().data(), this->antenna().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_azimuth;
        break;
      }

      // optional float azimuth = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_elevation;
        break;
      }

      // optional float elevation = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_snr;
        break;
      }

      // optional float snr = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_snr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &snr_)));
          set_has_snr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_searchScrypt;
        break;
      }

      // optional string searchScrypt = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_searchScrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchscrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->searchscrypt().data(), this->searchscrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_searchTier;
        break;
      }

      // optional int32 searchTier = 13 [default = 1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_searchTier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &searchtier_)));
          set_has_searchtier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_numFrames;
        break;
      }

      // optional int32 numFrames = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numFrames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numframes_)));
          set_has_numframes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_detConf;
        break;
      }

      // optional string detConf = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detConf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detconf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->detconf().data(), this->detconf().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_procParams;
        break;
      }

      // optional string procParams = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_procParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_procparams()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->procparams().data(), this->procparams().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_ssc;
        break;
      }

      // optional int32 ssc = 17 [default = -1];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ssc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssc_)));
          set_has_ssc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_band;
        break;
      }

      // optional string band = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_band:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_band()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->band().data(), this->band().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_polarization;
        break;
      }

      // optional string polarization = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polarization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_polarization()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->polarization().data(), this->polarization().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_hostname;
        break;
      }

      // optional string hostname = 20 [default = ""];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_uniqueID;
        break;
      }

      // optional string uniqueID = 21 [default = ""];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqueID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqueid().data(), this->uniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_uniqueField;
        break;
      }

      // optional string uniqueField = 22 [default = ""];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqueField:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniquefield()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniquefield().data(), this->uniquefield().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_gpsPosition;
        break;
      }

      // optional string gpsPosition = 23 [default = ""];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpsPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpsposition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpsposition().data(), this->gpsposition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_priming;
        break;
      }

      // optional bool priming = 24 [default = false];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priming:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &priming_)));
          set_has_priming();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_globalID;
        break;
      }

      // optional string globalID = 25 [default = ""];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_feedID;
        break;
      }

      // optional int64 feedID = 26 [default = -1];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feedID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feedid_)));
          set_has_feedid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_detectionID;
        break;
      }

      // optional int64 detectionID = 27 [default = -1];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_detectionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &detectionid_)));
          set_has_detectionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_receiverATN;
        break;
      }

      // optional string receiverATN = 28 [default = ""];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiverATN:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiveratn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receiveratn().data(), this->receiveratn().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_teamType;
        break;
      }

      // optional .falcon_trigger_msg.Intercept.TeamType teamType = 29 [default = RED_TEAM];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_trigger_msg::Intercept_TeamType_IsValid(value)) {
            set_teamtype(static_cast< ::falcon_trigger_msg::Intercept_TeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(29, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_noProcess;
        break;
      }

      // optional bool noProcess = 30 [default = false];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noProcess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &noprocess_)));
          set_has_noprocess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Intercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "INTERCEPT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istrigger(), output);
  }

  // optional string signal = 3;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal().data(), this->signal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->signal(), output);
  }

  // optional double frequency = 4;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->frequency(), output);
  }

  // optional float bandwidth = 5;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->bandwidth(), output);
  }

  // optional string receiver = 6;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver().data(), this->receiver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->receiver(), output);
  }

  // optional string antenna = 7;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->antenna().data(), this->antenna().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->antenna(), output);
  }

  // optional float azimuth = 8 [default = 0];
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->azimuth(), output);
  }

  // optional float elevation = 9 [default = 0];
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->elevation(), output);
  }

  // optional float snr = 10 [default = 0];
  if (has_snr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->snr(), output);
  }

  // optional string timestamp = 11;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->timestamp(), output);
  }

  // optional string searchScrypt = 12;
  if (has_searchscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->searchscrypt().data(), this->searchscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->searchscrypt(), output);
  }

  // optional int32 searchTier = 13 [default = 1];
  if (has_searchtier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->searchtier(), output);
  }

  // optional int32 numFrames = 14;
  if (has_numframes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->numframes(), output);
  }

  // optional string detConf = 15;
  if (has_detconf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detconf().data(), this->detconf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->detconf(), output);
  }

  // optional string procParams = 16;
  if (has_procparams()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->procparams().data(), this->procparams().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->procparams(), output);
  }

  // optional int32 ssc = 17 [default = -1];
  if (has_ssc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->ssc(), output);
  }

  // optional string band = 18;
  if (has_band()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->band().data(), this->band().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->band(), output);
  }

  // optional string polarization = 19;
  if (has_polarization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->polarization().data(), this->polarization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->polarization(), output);
  }

  // optional string hostname = 20 [default = ""];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->hostname(), output);
  }

  // optional string uniqueID = 21 [default = ""];
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->uniqueid(), output);
  }

  // optional string uniqueField = 22 [default = ""];
  if (has_uniquefield()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniquefield().data(), this->uniquefield().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->uniquefield(), output);
  }

  // optional string gpsPosition = 23 [default = ""];
  if (has_gpsposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsposition().data(), this->gpsposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->gpsposition(), output);
  }

  // optional bool priming = 24 [default = false];
  if (has_priming()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->priming(), output);
  }

  // optional string globalID = 25 [default = ""];
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->globalid(), output);
  }

  // optional int64 feedID = 26 [default = -1];
  if (has_feedid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->feedid(), output);
  }

  // optional int64 detectionID = 27 [default = -1];
  if (has_detectionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->detectionid(), output);
  }

  // optional string receiverATN = 28 [default = ""];
  if (has_receiveratn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiveratn().data(), this->receiveratn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->receiveratn(), output);
  }

  // optional .falcon_trigger_msg.Intercept.TeamType teamType = 29 [default = RED_TEAM];
  if (has_teamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->teamtype(), output);
  }

  // optional bool noProcess = 30 [default = false];
  if (has_noprocess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->noprocess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Intercept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "INTERCEPT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istrigger(), target);
  }

  // optional string signal = 3;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal().data(), this->signal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->signal(), target);
  }

  // optional double frequency = 4;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->frequency(), target);
  }

  // optional float bandwidth = 5;
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->bandwidth(), target);
  }

  // optional string receiver = 6;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver().data(), this->receiver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->receiver(), target);
  }

  // optional string antenna = 7;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->antenna().data(), this->antenna().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->antenna(), target);
  }

  // optional float azimuth = 8 [default = 0];
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->azimuth(), target);
  }

  // optional float elevation = 9 [default = 0];
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->elevation(), target);
  }

  // optional float snr = 10 [default = 0];
  if (has_snr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->snr(), target);
  }

  // optional string timestamp = 11;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->timestamp(), target);
  }

  // optional string searchScrypt = 12;
  if (has_searchscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->searchscrypt().data(), this->searchscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->searchscrypt(), target);
  }

  // optional int32 searchTier = 13 [default = 1];
  if (has_searchtier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->searchtier(), target);
  }

  // optional int32 numFrames = 14;
  if (has_numframes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->numframes(), target);
  }

  // optional string detConf = 15;
  if (has_detconf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detconf().data(), this->detconf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->detconf(), target);
  }

  // optional string procParams = 16;
  if (has_procparams()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->procparams().data(), this->procparams().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->procparams(), target);
  }

  // optional int32 ssc = 17 [default = -1];
  if (has_ssc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->ssc(), target);
  }

  // optional string band = 18;
  if (has_band()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->band().data(), this->band().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->band(), target);
  }

  // optional string polarization = 19;
  if (has_polarization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->polarization().data(), this->polarization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->polarization(), target);
  }

  // optional string hostname = 20 [default = ""];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->hostname(), target);
  }

  // optional string uniqueID = 21 [default = ""];
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->uniqueid(), target);
  }

  // optional string uniqueField = 22 [default = ""];
  if (has_uniquefield()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniquefield().data(), this->uniquefield().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->uniquefield(), target);
  }

  // optional string gpsPosition = 23 [default = ""];
  if (has_gpsposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsposition().data(), this->gpsposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->gpsposition(), target);
  }

  // optional bool priming = 24 [default = false];
  if (has_priming()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->priming(), target);
  }

  // optional string globalID = 25 [default = ""];
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->globalid(), target);
  }

  // optional int64 feedID = 26 [default = -1];
  if (has_feedid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->feedid(), target);
  }

  // optional int64 detectionID = 27 [default = -1];
  if (has_detectionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->detectionid(), target);
  }

  // optional string receiverATN = 28 [default = ""];
  if (has_receiveratn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiveratn().data(), this->receiveratn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->receiveratn(), target);
  }

  // optional .falcon_trigger_msg.Intercept.TeamType teamType = 29 [default = RED_TEAM];
  if (has_teamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      29, this->teamtype(), target);
  }

  // optional bool noProcess = 30 [default = false];
  if (has_noprocess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->noprocess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Intercept::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "INTERCEPT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool isTrigger = 2 [default = true];
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

    // optional string signal = 3;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signal());
    }

    // optional double frequency = 4;
    if (has_frequency()) {
      total_size += 1 + 8;
    }

    // optional float bandwidth = 5;
    if (has_bandwidth()) {
      total_size += 1 + 4;
    }

    // optional string receiver = 6;
    if (has_receiver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiver());
    }

    // optional string antenna = 7;
    if (has_antenna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->antenna());
    }

    // optional float azimuth = 8 [default = 0];
    if (has_azimuth()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float elevation = 9 [default = 0];
    if (has_elevation()) {
      total_size += 1 + 4;
    }

    // optional float snr = 10 [default = 0];
    if (has_snr()) {
      total_size += 1 + 4;
    }

    // optional string timestamp = 11;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional string searchScrypt = 12;
    if (has_searchscrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->searchscrypt());
    }

    // optional int32 searchTier = 13 [default = 1];
    if (has_searchtier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->searchtier());
    }

    // optional int32 numFrames = 14;
    if (has_numframes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numframes());
    }

    // optional string detConf = 15;
    if (has_detconf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detconf());
    }

    // optional string procParams = 16;
    if (has_procparams()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->procparams());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 ssc = 17 [default = -1];
    if (has_ssc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssc());
    }

    // optional string band = 18;
    if (has_band()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->band());
    }

    // optional string polarization = 19;
    if (has_polarization()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->polarization());
    }

    // optional string hostname = 20 [default = ""];
    if (has_hostname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string uniqueID = 21 [default = ""];
    if (has_uniqueid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueid());
    }

    // optional string uniqueField = 22 [default = ""];
    if (has_uniquefield()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniquefield());
    }

    // optional string gpsPosition = 23 [default = ""];
    if (has_gpsposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpsposition());
    }

    // optional bool priming = 24 [default = false];
    if (has_priming()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string globalID = 25 [default = ""];
    if (has_globalid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional int64 feedID = 26 [default = -1];
    if (has_feedid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feedid());
    }

    // optional int64 detectionID = 27 [default = -1];
    if (has_detectionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->detectionid());
    }

    // optional string receiverATN = 28 [default = ""];
    if (has_receiveratn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiveratn());
    }

    // optional .falcon_trigger_msg.Intercept.TeamType teamType = 29 [default = RED_TEAM];
    if (has_teamtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teamtype());
    }

    // optional bool noProcess = 30 [default = false];
    if (has_noprocess()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Intercept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Intercept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Intercept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Intercept::MergeFrom(const Intercept& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
    if (from.has_signal()) {
      set_signal(from.signal());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
    if (from.has_receiver()) {
      set_receiver(from.receiver());
    }
    if (from.has_antenna()) {
      set_antenna(from.antenna());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
    if (from.has_snr()) {
      set_snr(from.snr());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_searchscrypt()) {
      set_searchscrypt(from.searchscrypt());
    }
    if (from.has_searchtier()) {
      set_searchtier(from.searchtier());
    }
    if (from.has_numframes()) {
      set_numframes(from.numframes());
    }
    if (from.has_detconf()) {
      set_detconf(from.detconf());
    }
    if (from.has_procparams()) {
      set_procparams(from.procparams());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ssc()) {
      set_ssc(from.ssc());
    }
    if (from.has_band()) {
      set_band(from.band());
    }
    if (from.has_polarization()) {
      set_polarization(from.polarization());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_uniquefield()) {
      set_uniquefield(from.uniquefield());
    }
    if (from.has_gpsposition()) {
      set_gpsposition(from.gpsposition());
    }
    if (from.has_priming()) {
      set_priming(from.priming());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_feedid()) {
      set_feedid(from.feedid());
    }
    if (from.has_detectionid()) {
      set_detectionid(from.detectionid());
    }
    if (from.has_receiveratn()) {
      set_receiveratn(from.receiveratn());
    }
    if (from.has_teamtype()) {
      set_teamtype(from.teamtype());
    }
    if (from.has_noprocess()) {
      set_noprocess(from.noprocess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Intercept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Intercept::CopyFrom(const Intercept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intercept::IsInitialized() const {

  return true;
}

void Intercept::Swap(Intercept* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(signal_, other->signal_);
    std::swap(frequency_, other->frequency_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(receiver_, other->receiver_);
    std::swap(antenna_, other->antenna_);
    std::swap(azimuth_, other->azimuth_);
    std::swap(elevation_, other->elevation_);
    std::swap(snr_, other->snr_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(searchscrypt_, other->searchscrypt_);
    std::swap(searchtier_, other->searchtier_);
    std::swap(numframes_, other->numframes_);
    std::swap(detconf_, other->detconf_);
    std::swap(procparams_, other->procparams_);
    std::swap(ssc_, other->ssc_);
    std::swap(band_, other->band_);
    std::swap(polarization_, other->polarization_);
    std::swap(hostname_, other->hostname_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(uniquefield_, other->uniquefield_);
    std::swap(gpsposition_, other->gpsposition_);
    std::swap(priming_, other->priming_);
    std::swap(globalid_, other->globalid_);
    std::swap(feedid_, other->feedid_);
    std::swap(detectionid_, other->detectionid_);
    std::swap(receiveratn_, other->receiveratn_);
    std::swap(teamtype_, other->teamtype_);
    std::swap(noprocess_, other->noprocess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Intercept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Intercept_descriptor_;
  metadata.reflection = Intercept_reflection_;
  return metadata;
}


// ===================================================================

::std::string* InterceptAmpX::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int InterceptAmpX::kMsgNameFieldNumber;
const int InterceptAmpX::kIsTriggerFieldNumber;
const int InterceptAmpX::kSignalFieldNumber;
const int InterceptAmpX::kFrequencyFieldNumber;
const int InterceptAmpX::kBandwidthFieldNumber;
const int InterceptAmpX::kReceiverFieldNumber;
const int InterceptAmpX::kAntennaFieldNumber;
const int InterceptAmpX::kAzimuthFieldNumber;
const int InterceptAmpX::kElevationFieldNumber;
const int InterceptAmpX::kSnrFieldNumber;
const int InterceptAmpX::kTimestampFieldNumber;
const int InterceptAmpX::kSearchScryptFieldNumber;
const int InterceptAmpX::kSearchTierFieldNumber;
const int InterceptAmpX::kNumFramesFieldNumber;
const int InterceptAmpX::kDetConfFieldNumber;
const int InterceptAmpX::kProcParamsFieldNumber;
const int InterceptAmpX::kHostnameFieldNumber;
const int InterceptAmpX::kUniqueIDFieldNumber;
const int InterceptAmpX::kUniqueFieldFieldNumber;
const int InterceptAmpX::kGpsPositionFieldNumber;
const int InterceptAmpX::kPrimingFieldNumber;
#endif  // !_MSC_VER

InterceptAmpX::InterceptAmpX()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InterceptAmpX::InitAsDefaultInstance() {
}

InterceptAmpX::InterceptAmpX(const InterceptAmpX& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InterceptAmpX::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  istrigger_ = true;
  signal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frequency_ = 0;
  bandwidth_ = 0;
  receiver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  antenna_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  azimuth_ = 0;
  elevation_ = 0;
  snr_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  searchscrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  searchtier_ = 1;
  numframes_ = 0;
  detconf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  procparams_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uniquefield_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gpsposition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  priming_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InterceptAmpX::~InterceptAmpX() {
  SharedDtor();
}

void InterceptAmpX::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (signal_ != &::google::protobuf::internal::kEmptyString) {
    delete signal_;
  }
  if (receiver_ != &::google::protobuf::internal::kEmptyString) {
    delete receiver_;
  }
  if (antenna_ != &::google::protobuf::internal::kEmptyString) {
    delete antenna_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (searchscrypt_ != &::google::protobuf::internal::kEmptyString) {
    delete searchscrypt_;
  }
  if (detconf_ != &::google::protobuf::internal::kEmptyString) {
    delete detconf_;
  }
  if (procparams_ != &::google::protobuf::internal::kEmptyString) {
    delete procparams_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (uniquefield_ != &::google::protobuf::internal::kEmptyString) {
    delete uniquefield_;
  }
  if (gpsposition_ != &::google::protobuf::internal::kEmptyString) {
    delete gpsposition_;
  }
  if (this != default_instance_) {
  }
}

void InterceptAmpX::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterceptAmpX::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InterceptAmpX_descriptor_;
}

const InterceptAmpX& InterceptAmpX::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTriggerMessages_2eproto();
  return *default_instance_;
}

InterceptAmpX* InterceptAmpX::default_instance_ = NULL;

InterceptAmpX* InterceptAmpX::New() const {
  return new InterceptAmpX;
}

void InterceptAmpX::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    istrigger_ = true;
    if (has_signal()) {
      if (signal_ != &::google::protobuf::internal::kEmptyString) {
        signal_->clear();
      }
    }
    frequency_ = 0;
    bandwidth_ = 0;
    if (has_receiver()) {
      if (receiver_ != &::google::protobuf::internal::kEmptyString) {
        receiver_->clear();
      }
    }
    if (has_antenna()) {
      if (antenna_ != &::google::protobuf::internal::kEmptyString) {
        antenna_->clear();
      }
    }
    azimuth_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    elevation_ = 0;
    snr_ = 0;
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    if (has_searchscrypt()) {
      if (searchscrypt_ != &::google::protobuf::internal::kEmptyString) {
        searchscrypt_->clear();
      }
    }
    searchtier_ = 1;
    numframes_ = 0;
    if (has_detconf()) {
      if (detconf_ != &::google::protobuf::internal::kEmptyString) {
        detconf_->clear();
      }
    }
    if (has_procparams()) {
      if (procparams_ != &::google::protobuf::internal::kEmptyString) {
        procparams_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_uniqueid()) {
      if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
        uniqueid_->clear();
      }
    }
    if (has_uniquefield()) {
      if (uniquefield_ != &::google::protobuf::internal::kEmptyString) {
        uniquefield_->clear();
      }
    }
    if (has_gpsposition()) {
      if (gpsposition_ != &::google::protobuf::internal::kEmptyString) {
        gpsposition_->clear();
      }
    }
    priming_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InterceptAmpX::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "INTERCEPT_AMPX"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signal;
        break;
      }

      // optional string signal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signal().data(), this->signal().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_frequency;
        break;
      }

      // optional double frequency = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_bandwidth;
        break;
      }

      // optional float bandwidth = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_receiver;
        break;
      }

      // optional string receiver = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receiver().data(), this->receiver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_antenna;
        break;
      }

      // optional string antenna = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_antenna:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_antenna()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->antenna().data(), this->antenna().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_azimuth;
        break;
      }

      // optional float azimuth = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_elevation;
        break;
      }

      // optional float elevation = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_snr;
        break;
      }

      // optional float snr = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_snr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &snr_)));
          set_has_snr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_searchScrypt;
        break;
      }

      // optional string searchScrypt = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_searchScrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchscrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->searchscrypt().data(), this->searchscrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_searchTier;
        break;
      }

      // optional int32 searchTier = 13 [default = 1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_searchTier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &searchtier_)));
          set_has_searchtier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_numFrames;
        break;
      }

      // optional int32 numFrames = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numFrames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numframes_)));
          set_has_numframes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_detConf;
        break;
      }

      // optional string detConf = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detConf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detconf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->detconf().data(), this->detconf().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_procParams;
        break;
      }

      // optional string procParams = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_procParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_procparams()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->procparams().data(), this->procparams().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_hostname;
        break;
      }

      // optional string hostname = 17 [default = ""];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_uniqueID;
        break;
      }

      // optional string uniqueID = 18 [default = ""];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqueID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqueid().data(), this->uniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_uniqueField;
        break;
      }

      // optional string uniqueField = 19 [default = ""];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqueField:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniquefield()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniquefield().data(), this->uniquefield().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_gpsPosition;
        break;
      }

      // optional string gpsPosition = 20 [default = ""];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpsPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpsposition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpsposition().data(), this->gpsposition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_priming;
        break;
      }

      // optional bool priming = 21 [default = false];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priming:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &priming_)));
          set_has_priming();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InterceptAmpX::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "INTERCEPT_AMPX"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istrigger(), output);
  }

  // optional string signal = 3;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal().data(), this->signal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->signal(), output);
  }

  // optional double frequency = 4;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->frequency(), output);
  }

  // optional float bandwidth = 5;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->bandwidth(), output);
  }

  // optional string receiver = 6;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver().data(), this->receiver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->receiver(), output);
  }

  // optional string antenna = 7;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->antenna().data(), this->antenna().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->antenna(), output);
  }

  // optional float azimuth = 8 [default = 0];
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->azimuth(), output);
  }

  // optional float elevation = 9 [default = 0];
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->elevation(), output);
  }

  // optional float snr = 10 [default = 0];
  if (has_snr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->snr(), output);
  }

  // optional string timestamp = 11;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->timestamp(), output);
  }

  // optional string searchScrypt = 12;
  if (has_searchscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->searchscrypt().data(), this->searchscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->searchscrypt(), output);
  }

  // optional int32 searchTier = 13 [default = 1];
  if (has_searchtier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->searchtier(), output);
  }

  // optional int32 numFrames = 14;
  if (has_numframes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->numframes(), output);
  }

  // optional string detConf = 15;
  if (has_detconf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detconf().data(), this->detconf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->detconf(), output);
  }

  // optional string procParams = 16;
  if (has_procparams()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->procparams().data(), this->procparams().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->procparams(), output);
  }

  // optional string hostname = 17 [default = ""];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->hostname(), output);
  }

  // optional string uniqueID = 18 [default = ""];
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->uniqueid(), output);
  }

  // optional string uniqueField = 19 [default = ""];
  if (has_uniquefield()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniquefield().data(), this->uniquefield().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->uniquefield(), output);
  }

  // optional string gpsPosition = 20 [default = ""];
  if (has_gpsposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsposition().data(), this->gpsposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->gpsposition(), output);
  }

  // optional bool priming = 21 [default = false];
  if (has_priming()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->priming(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InterceptAmpX::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "INTERCEPT_AMPX"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istrigger(), target);
  }

  // optional string signal = 3;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal().data(), this->signal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->signal(), target);
  }

  // optional double frequency = 4;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->frequency(), target);
  }

  // optional float bandwidth = 5;
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->bandwidth(), target);
  }

  // optional string receiver = 6;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver().data(), this->receiver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->receiver(), target);
  }

  // optional string antenna = 7;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->antenna().data(), this->antenna().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->antenna(), target);
  }

  // optional float azimuth = 8 [default = 0];
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->azimuth(), target);
  }

  // optional float elevation = 9 [default = 0];
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->elevation(), target);
  }

  // optional float snr = 10 [default = 0];
  if (has_snr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->snr(), target);
  }

  // optional string timestamp = 11;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->timestamp(), target);
  }

  // optional string searchScrypt = 12;
  if (has_searchscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->searchscrypt().data(), this->searchscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->searchscrypt(), target);
  }

  // optional int32 searchTier = 13 [default = 1];
  if (has_searchtier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->searchtier(), target);
  }

  // optional int32 numFrames = 14;
  if (has_numframes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->numframes(), target);
  }

  // optional string detConf = 15;
  if (has_detconf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detconf().data(), this->detconf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->detconf(), target);
  }

  // optional string procParams = 16;
  if (has_procparams()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->procparams().data(), this->procparams().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->procparams(), target);
  }

  // optional string hostname = 17 [default = ""];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->hostname(), target);
  }

  // optional string uniqueID = 18 [default = ""];
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->uniqueid(), target);
  }

  // optional string uniqueField = 19 [default = ""];
  if (has_uniquefield()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniquefield().data(), this->uniquefield().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->uniquefield(), target);
  }

  // optional string gpsPosition = 20 [default = ""];
  if (has_gpsposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsposition().data(), this->gpsposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->gpsposition(), target);
  }

  // optional bool priming = 21 [default = false];
  if (has_priming()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->priming(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InterceptAmpX::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "INTERCEPT_AMPX"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool isTrigger = 2 [default = true];
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

    // optional string signal = 3;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signal());
    }

    // optional double frequency = 4;
    if (has_frequency()) {
      total_size += 1 + 8;
    }

    // optional float bandwidth = 5;
    if (has_bandwidth()) {
      total_size += 1 + 4;
    }

    // optional string receiver = 6;
    if (has_receiver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiver());
    }

    // optional string antenna = 7;
    if (has_antenna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->antenna());
    }

    // optional float azimuth = 8 [default = 0];
    if (has_azimuth()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float elevation = 9 [default = 0];
    if (has_elevation()) {
      total_size += 1 + 4;
    }

    // optional float snr = 10 [default = 0];
    if (has_snr()) {
      total_size += 1 + 4;
    }

    // optional string timestamp = 11;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional string searchScrypt = 12;
    if (has_searchscrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->searchscrypt());
    }

    // optional int32 searchTier = 13 [default = 1];
    if (has_searchtier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->searchtier());
    }

    // optional int32 numFrames = 14;
    if (has_numframes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numframes());
    }

    // optional string detConf = 15;
    if (has_detconf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detconf());
    }

    // optional string procParams = 16;
    if (has_procparams()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->procparams());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string hostname = 17 [default = ""];
    if (has_hostname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string uniqueID = 18 [default = ""];
    if (has_uniqueid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueid());
    }

    // optional string uniqueField = 19 [default = ""];
    if (has_uniquefield()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniquefield());
    }

    // optional string gpsPosition = 20 [default = ""];
    if (has_gpsposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpsposition());
    }

    // optional bool priming = 21 [default = false];
    if (has_priming()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterceptAmpX::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InterceptAmpX* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InterceptAmpX*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InterceptAmpX::MergeFrom(const InterceptAmpX& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
    if (from.has_signal()) {
      set_signal(from.signal());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
    if (from.has_receiver()) {
      set_receiver(from.receiver());
    }
    if (from.has_antenna()) {
      set_antenna(from.antenna());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
    if (from.has_snr()) {
      set_snr(from.snr());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_searchscrypt()) {
      set_searchscrypt(from.searchscrypt());
    }
    if (from.has_searchtier()) {
      set_searchtier(from.searchtier());
    }
    if (from.has_numframes()) {
      set_numframes(from.numframes());
    }
    if (from.has_detconf()) {
      set_detconf(from.detconf());
    }
    if (from.has_procparams()) {
      set_procparams(from.procparams());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_uniquefield()) {
      set_uniquefield(from.uniquefield());
    }
    if (from.has_gpsposition()) {
      set_gpsposition(from.gpsposition());
    }
    if (from.has_priming()) {
      set_priming(from.priming());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InterceptAmpX::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterceptAmpX::CopyFrom(const InterceptAmpX& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterceptAmpX::IsInitialized() const {

  return true;
}

void InterceptAmpX::Swap(InterceptAmpX* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(signal_, other->signal_);
    std::swap(frequency_, other->frequency_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(receiver_, other->receiver_);
    std::swap(antenna_, other->antenna_);
    std::swap(azimuth_, other->azimuth_);
    std::swap(elevation_, other->elevation_);
    std::swap(snr_, other->snr_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(searchscrypt_, other->searchscrypt_);
    std::swap(searchtier_, other->searchtier_);
    std::swap(numframes_, other->numframes_);
    std::swap(detconf_, other->detconf_);
    std::swap(procparams_, other->procparams_);
    std::swap(hostname_, other->hostname_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(uniquefield_, other->uniquefield_);
    std::swap(gpsposition_, other->gpsposition_);
    std::swap(priming_, other->priming_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InterceptAmpX::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InterceptAmpX_descriptor_;
  metadata.reflection = InterceptAmpX_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SignalLocked::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SignalLocked::kMsgNameFieldNumber;
const int SignalLocked::kIsTriggerFieldNumber;
const int SignalLocked::kAppIDFieldNumber;
const int SignalLocked::kAntennaFieldNumber;
#endif  // !_MSC_VER

SignalLocked::SignalLocked()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalLocked::InitAsDefaultInstance() {
}

SignalLocked::SignalLocked(const SignalLocked& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalLocked::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  istrigger_ = true;
  appid_ = 0;
  antenna_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalLocked::~SignalLocked() {
  SharedDtor();
}

void SignalLocked::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (antenna_ != &::google::protobuf::internal::kEmptyString) {
    delete antenna_;
  }
  if (this != default_instance_) {
  }
}

void SignalLocked::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalLocked::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalLocked_descriptor_;
}

const SignalLocked& SignalLocked::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTriggerMessages_2eproto();
  return *default_instance_;
}

SignalLocked* SignalLocked::default_instance_ = NULL;

SignalLocked* SignalLocked::New() const {
  return new SignalLocked;
}

void SignalLocked::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    istrigger_ = true;
    appid_ = 0;
    if (has_antenna()) {
      if (antenna_ != &::google::protobuf::internal::kEmptyString) {
        antenna_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalLocked::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SIGNAL_LOCKED"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appID;
        break;
      }

      // optional int32 appID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_antenna;
        break;
      }

      // optional string antenna = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_antenna:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_antenna()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->antenna().data(), this->antenna().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalLocked::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SIGNAL_LOCKED"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istrigger(), output);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  // optional string antenna = 4;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->antenna().data(), this->antenna().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->antenna(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalLocked::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SIGNAL_LOCKED"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istrigger(), target);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  // optional string antenna = 4;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->antenna().data(), this->antenna().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->antenna(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalLocked::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SIGNAL_LOCKED"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool isTrigger = 2 [default = true];
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

    // optional int32 appID = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional string antenna = 4;
    if (has_antenna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->antenna());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalLocked::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalLocked* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalLocked*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalLocked::MergeFrom(const SignalLocked& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_antenna()) {
      set_antenna(from.antenna());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalLocked::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalLocked::CopyFrom(const SignalLocked& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalLocked::IsInitialized() const {

  return true;
}

void SignalLocked::Swap(SignalLocked* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(appid_, other->appid_);
    std::swap(antenna_, other->antenna_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalLocked::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalLocked_descriptor_;
  metadata.reflection = SignalLocked_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SignalTimeout::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SignalTimeout::kMsgNameFieldNumber;
const int SignalTimeout::kIsTriggerFieldNumber;
const int SignalTimeout::kAppIDFieldNumber;
#endif  // !_MSC_VER

SignalTimeout::SignalTimeout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalTimeout::InitAsDefaultInstance() {
}

SignalTimeout::SignalTimeout(const SignalTimeout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalTimeout::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  istrigger_ = true;
  appid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalTimeout::~SignalTimeout() {
  SharedDtor();
}

void SignalTimeout::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void SignalTimeout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalTimeout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalTimeout_descriptor_;
}

const SignalTimeout& SignalTimeout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTriggerMessages_2eproto();
  return *default_instance_;
}

SignalTimeout* SignalTimeout::default_instance_ = NULL;

SignalTimeout* SignalTimeout::New() const {
  return new SignalTimeout;
}

void SignalTimeout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    istrigger_ = true;
    appid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalTimeout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SIGNAL_TIMEOUT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appID;
        break;
      }

      // optional int32 appID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalTimeout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SIGNAL_TIMEOUT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istrigger(), output);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalTimeout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SIGNAL_TIMEOUT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istrigger(), target);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalTimeout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SIGNAL_TIMEOUT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool isTrigger = 2 [default = true];
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

    // optional int32 appID = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalTimeout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalTimeout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalTimeout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalTimeout::MergeFrom(const SignalTimeout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalTimeout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalTimeout::CopyFrom(const SignalTimeout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalTimeout::IsInitialized() const {

  return true;
}

void SignalTimeout::Swap(SignalTimeout* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalTimeout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalTimeout_descriptor_;
  metadata.reflection = SignalTimeout_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InterceptListRequest_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InterceptListRequest_Type_descriptor_;
}
bool InterceptListRequest_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InterceptListRequest_Type InterceptListRequest::STATUS;
const InterceptListRequest_Type InterceptListRequest::REMOVE;
const InterceptListRequest_Type InterceptListRequest::CLEAR;
const InterceptListRequest_Type InterceptListRequest::Type_MIN;
const InterceptListRequest_Type InterceptListRequest::Type_MAX;
const int InterceptListRequest::Type_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* InterceptListRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int InterceptListRequest::kMsgNameFieldNumber;
const int InterceptListRequest::kIsTriggerFieldNumber;
const int InterceptListRequest::kRequestTypeFieldNumber;
const int InterceptListRequest::kUniqueIDFieldNumber;
#endif  // !_MSC_VER

InterceptListRequest::InterceptListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InterceptListRequest::InitAsDefaultInstance() {
}

InterceptListRequest::InterceptListRequest(const InterceptListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InterceptListRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  istrigger_ = true;
  requesttype_ = 0;
  uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InterceptListRequest::~InterceptListRequest() {
  SharedDtor();
}

void InterceptListRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (this != default_instance_) {
  }
}

void InterceptListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterceptListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InterceptListRequest_descriptor_;
}

const InterceptListRequest& InterceptListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTriggerMessages_2eproto();
  return *default_instance_;
}

InterceptListRequest* InterceptListRequest::default_instance_ = NULL;

InterceptListRequest* InterceptListRequest::New() const {
  return new InterceptListRequest;
}

void InterceptListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    istrigger_ = true;
    requesttype_ = 0;
    if (has_uniqueid()) {
      if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
        uniqueid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InterceptListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "INTERCEPT_LIST_REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_requestType;
        break;
      }

      // optional .falcon_trigger_msg.InterceptListRequest.Type requestType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_trigger_msg::InterceptListRequest_Type_IsValid(value)) {
            set_requesttype(static_cast< ::falcon_trigger_msg::InterceptListRequest_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uniqueID;
        break;
      }

      // optional string uniqueID = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqueID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqueid().data(), this->uniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InterceptListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "INTERCEPT_LIST_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istrigger(), output);
  }

  // optional .falcon_trigger_msg.InterceptListRequest.Type requestType = 3;
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->requesttype(), output);
  }

  // optional string uniqueID = 4 [default = ""];
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InterceptListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "INTERCEPT_LIST_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istrigger(), target);
  }

  // optional .falcon_trigger_msg.InterceptListRequest.Type requestType = 3;
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->requesttype(), target);
  }

  // optional string uniqueID = 4 [default = ""];
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InterceptListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "INTERCEPT_LIST_REQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool isTrigger = 2 [default = true];
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

    // optional .falcon_trigger_msg.InterceptListRequest.Type requestType = 3;
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->requesttype());
    }

    // optional string uniqueID = 4 [default = ""];
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterceptListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InterceptListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InterceptListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InterceptListRequest::MergeFrom(const InterceptListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InterceptListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterceptListRequest::CopyFrom(const InterceptListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterceptListRequest::IsInitialized() const {

  return true;
}

void InterceptListRequest::Swap(InterceptListRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(requesttype_, other->requesttype_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InterceptListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InterceptListRequest_descriptor_;
  metadata.reflection = InterceptListRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RunGoNoGo::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RunGoNoGo::kMsgNameFieldNumber;
const int RunGoNoGo::kIsTriggerFieldNumber;
#endif  // !_MSC_VER

RunGoNoGo::RunGoNoGo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RunGoNoGo::InitAsDefaultInstance() {
}

RunGoNoGo::RunGoNoGo(const RunGoNoGo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RunGoNoGo::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  istrigger_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunGoNoGo::~RunGoNoGo() {
  SharedDtor();
}

void RunGoNoGo::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void RunGoNoGo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunGoNoGo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunGoNoGo_descriptor_;
}

const RunGoNoGo& RunGoNoGo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTriggerMessages_2eproto();
  return *default_instance_;
}

RunGoNoGo* RunGoNoGo::default_instance_ = NULL;

RunGoNoGo* RunGoNoGo::New() const {
  return new RunGoNoGo;
}

void RunGoNoGo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    istrigger_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunGoNoGo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RUN_GO_NOGO"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RunGoNoGo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RUN_GO_NOGO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istrigger(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RunGoNoGo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RUN_GO_NOGO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istrigger(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RunGoNoGo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RUN_GO_NOGO"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool isTrigger = 2 [default = true];
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunGoNoGo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunGoNoGo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunGoNoGo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunGoNoGo::MergeFrom(const RunGoNoGo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunGoNoGo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunGoNoGo::CopyFrom(const RunGoNoGo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunGoNoGo::IsInitialized() const {

  return true;
}

void RunGoNoGo::Swap(RunGoNoGo* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunGoNoGo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunGoNoGo_descriptor_;
  metadata.reflection = RunGoNoGo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BlacklistRequest_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlacklistRequest_Type_descriptor_;
}
bool BlacklistRequest_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BlacklistRequest_Type BlacklistRequest::STATUS;
const BlacklistRequest_Type BlacklistRequest::ADD;
const BlacklistRequest_Type BlacklistRequest::REMOVE;
const BlacklistRequest_Type BlacklistRequest::Type_MIN;
const BlacklistRequest_Type BlacklistRequest::Type_MAX;
const int BlacklistRequest::Type_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* BlacklistRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int BlacklistRequest::kMsgNameFieldNumber;
const int BlacklistRequest::kIsTriggerFieldNumber;
const int BlacklistRequest::kRequestTypeFieldNumber;
const int BlacklistRequest::kEntryFieldNumber;
const int BlacklistRequest::kUniqueIDFieldNumber;
#endif  // !_MSC_VER

BlacklistRequest::BlacklistRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlacklistRequest::InitAsDefaultInstance() {
  entry_ = const_cast< ::falcon_common_msg::BlacklistEntry*>(&::falcon_common_msg::BlacklistEntry::default_instance());
}

BlacklistRequest::BlacklistRequest(const BlacklistRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlacklistRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  istrigger_ = true;
  requesttype_ = 0;
  entry_ = NULL;
  uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlacklistRequest::~BlacklistRequest() {
  SharedDtor();
}

void BlacklistRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (this != default_instance_) {
    delete entry_;
  }
}

void BlacklistRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlacklistRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlacklistRequest_descriptor_;
}

const BlacklistRequest& BlacklistRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTriggerMessages_2eproto();
  return *default_instance_;
}

BlacklistRequest* BlacklistRequest::default_instance_ = NULL;

BlacklistRequest* BlacklistRequest::New() const {
  return new BlacklistRequest;
}

void BlacklistRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    istrigger_ = true;
    requesttype_ = 0;
    if (has_entry()) {
      if (entry_ != NULL) entry_->::falcon_common_msg::BlacklistEntry::Clear();
    }
    if (has_uniqueid()) {
      if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
        uniqueid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlacklistRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "BLACKLIST_REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_requestType;
        break;
      }

      // optional .falcon_trigger_msg.BlacklistRequest.Type requestType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_trigger_msg::BlacklistRequest_Type_IsValid(value)) {
            set_requesttype(static_cast< ::falcon_trigger_msg::BlacklistRequest_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_entry;
        break;
      }

      // optional .falcon_common_msg.BlacklistEntry entry = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_uniqueID;
        break;
      }

      // optional string uniqueID = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqueID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqueid().data(), this->uniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlacklistRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "BLACKLIST_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istrigger(), output);
  }

  // optional .falcon_trigger_msg.BlacklistRequest.Type requestType = 3;
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->requesttype(), output);
  }

  // optional .falcon_common_msg.BlacklistEntry entry = 4;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->entry(), output);
  }

  // optional string uniqueID = 5 [default = ""];
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->uniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlacklistRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "BLACKLIST_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istrigger(), target);
  }

  // optional .falcon_trigger_msg.BlacklistRequest.Type requestType = 3;
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->requesttype(), target);
  }

  // optional .falcon_common_msg.BlacklistEntry entry = 4;
  if (has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->entry(), target);
  }

  // optional string uniqueID = 5 [default = ""];
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->uniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlacklistRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "BLACKLIST_REQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool isTrigger = 2 [default = true];
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

    // optional .falcon_trigger_msg.BlacklistRequest.Type requestType = 3;
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->requesttype());
    }

    // optional .falcon_common_msg.BlacklistEntry entry = 4;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entry());
    }

    // optional string uniqueID = 5 [default = ""];
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlacklistRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlacklistRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlacklistRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlacklistRequest::MergeFrom(const BlacklistRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_entry()) {
      mutable_entry()->::falcon_common_msg::BlacklistEntry::MergeFrom(from.entry());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlacklistRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlacklistRequest::CopyFrom(const BlacklistRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlacklistRequest::IsInitialized() const {

  return true;
}

void BlacklistRequest::Swap(BlacklistRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(requesttype_, other->requesttype_);
    std::swap(entry_, other->entry_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlacklistRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlacklistRequest_descriptor_;
  metadata.reflection = BlacklistRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ProcessTip::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ProcessTip::kMsgNameFieldNumber;
const int ProcessTip::kIsTriggerFieldNumber;
const int ProcessTip::kSoiFieldNumber;
const int ProcessTip::kFrequencyFieldNumber;
const int ProcessTip::kLatitudeFieldNumber;
const int ProcessTip::kLongitudeFieldNumber;
const int ProcessTip::kIdNumberFieldNumber;
#endif  // !_MSC_VER

ProcessTip::ProcessTip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessTip::InitAsDefaultInstance() {
}

ProcessTip::ProcessTip(const ProcessTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessTip::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  istrigger_ = true;
  soi_ = 0;
  frequency_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  idnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessTip::~ProcessTip() {
  SharedDtor();
}

void ProcessTip::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ProcessTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessTip_descriptor_;
}

const ProcessTip& ProcessTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTriggerMessages_2eproto();
  return *default_instance_;
}

ProcessTip* ProcessTip::default_instance_ = NULL;

ProcessTip* ProcessTip::New() const {
  return new ProcessTip;
}

void ProcessTip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    istrigger_ = true;
    soi_ = 0;
    frequency_ = 0;
    latitude_ = 0;
    longitude_ = 0;
    idnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "PROCESS_TIP"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_soi;
        break;
      }

      // optional int32 soi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soi_)));
          set_has_soi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_frequency;
        break;
      }

      // optional double frequency = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_latitude;
        break;
      }

      // optional float latitude = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_longitude;
        break;
      }

      // optional float longitude = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_idNumber;
        break;
      }

      // optional double idNumber = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_idNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &idnumber_)));
          set_has_idnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "PROCESS_TIP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istrigger(), output);
  }

  // optional int32 soi = 3;
  if (has_soi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->soi(), output);
  }

  // optional double frequency = 4;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->frequency(), output);
  }

  // optional float latitude = 5;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->latitude(), output);
  }

  // optional float longitude = 6;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->longitude(), output);
  }

  // optional double idNumber = 7;
  if (has_idnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->idnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "PROCESS_TIP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istrigger(), target);
  }

  // optional int32 soi = 3;
  if (has_soi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->soi(), target);
  }

  // optional double frequency = 4;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->frequency(), target);
  }

  // optional float latitude = 5;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->latitude(), target);
  }

  // optional float longitude = 6;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->longitude(), target);
  }

  // optional double idNumber = 7;
  if (has_idnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->idnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "PROCESS_TIP"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool isTrigger = 2 [default = true];
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

    // optional int32 soi = 3;
    if (has_soi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soi());
    }

    // optional double frequency = 4;
    if (has_frequency()) {
      total_size += 1 + 8;
    }

    // optional float latitude = 5;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 6;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional double idNumber = 7;
    if (has_idnumber()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessTip::MergeFrom(const ProcessTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
    if (from.has_soi()) {
      set_soi(from.soi());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_idnumber()) {
      set_idnumber(from.idnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessTip::CopyFrom(const ProcessTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessTip::IsInitialized() const {

  return true;
}

void ProcessTip::Swap(ProcessTip* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(soi_, other->soi_);
    std::swap(frequency_, other->frequency_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(idnumber_, other->idnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessTip_descriptor_;
  metadata.reflection = ProcessTip_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GeoLaunch::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GeoLaunch::kMsgNameFieldNumber;
const int GeoLaunch::kIsTriggerFieldNumber;
const int GeoLaunch::kCfFieldNumber;
const int GeoLaunch::kChanFieldNumber;
const int GeoLaunch::kAzFieldNumber;
const int GeoLaunch::kLatFieldNumber;
const int GeoLaunch::kLonFieldNumber;
const int GeoLaunch::kScryptFieldNumber;
const int GeoLaunch::kRcvrNameFieldNumber;
const int GeoLaunch::kMessageIdFieldNumber;
#endif  // !_MSC_VER

GeoLaunch::GeoLaunch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeoLaunch::InitAsDefaultInstance() {
}

GeoLaunch::GeoLaunch(const GeoLaunch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeoLaunch::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  istrigger_ = true;
  cf_ = 0;
  chan_ = 0;
  az_ = 0;
  lat_ = 0;
  lon_ = 0;
  scrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rcvr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoLaunch::~GeoLaunch() {
  SharedDtor();
}

void GeoLaunch::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (scrypt_ != &::google::protobuf::internal::kEmptyString) {
    delete scrypt_;
  }
  if (rcvr_name_ != &::google::protobuf::internal::kEmptyString) {
    delete rcvr_name_;
  }
  if (this != default_instance_) {
  }
}

void GeoLaunch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoLaunch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoLaunch_descriptor_;
}

const GeoLaunch& GeoLaunch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTriggerMessages_2eproto();
  return *default_instance_;
}

GeoLaunch* GeoLaunch::default_instance_ = NULL;

GeoLaunch* GeoLaunch::New() const {
  return new GeoLaunch;
}

void GeoLaunch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    istrigger_ = true;
    cf_ = 0;
    chan_ = 0;
    az_ = 0;
    lat_ = 0;
    lon_ = 0;
    if (has_scrypt()) {
      if (scrypt_ != &::google::protobuf::internal::kEmptyString) {
        scrypt_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_rcvr_name()) {
      if (rcvr_name_ != &::google::protobuf::internal::kEmptyString) {
        rcvr_name_->clear();
      }
    }
    message_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoLaunch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GEO_LAUNCH"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_cf;
        break;
      }

      // optional float cf = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cf_)));
          set_has_cf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chan;
        break;
      }

      // optional int32 chan = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chan_)));
          set_has_chan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_az;
        break;
      }

      // optional int32 az = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_az:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &az_)));
          set_has_az();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_lat;
        break;
      }

      // optional float lat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_lon;
        break;
      }

      // optional float lon = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_scrypt;
        break;
      }

      // optional string scrypt = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scrypt().data(), this->scrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_rcvr_name;
        break;
      }

      // optional string rcvr_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rcvr_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rcvr_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rcvr_name().data(), this->rcvr_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_message_id;
        break;
      }

      // optional double message_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeoLaunch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GEO_LAUNCH"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istrigger(), output);
  }

  // optional float cf = 3;
  if (has_cf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cf(), output);
  }

  // optional int32 chan = 4;
  if (has_chan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chan(), output);
  }

  // optional int32 az = 5;
  if (has_az()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->az(), output);
  }

  // optional float lat = 6;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->lat(), output);
  }

  // optional float lon = 7;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->lon(), output);
  }

  // optional string scrypt = 8;
  if (has_scrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scrypt().data(), this->scrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->scrypt(), output);
  }

  // optional string rcvr_name = 9;
  if (has_rcvr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rcvr_name().data(), this->rcvr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->rcvr_name(), output);
  }

  // optional double message_id = 10;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->message_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeoLaunch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GEO_LAUNCH"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istrigger(), target);
  }

  // optional float cf = 3;
  if (has_cf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cf(), target);
  }

  // optional int32 chan = 4;
  if (has_chan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chan(), target);
  }

  // optional int32 az = 5;
  if (has_az()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->az(), target);
  }

  // optional float lat = 6;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->lat(), target);
  }

  // optional float lon = 7;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->lon(), target);
  }

  // optional string scrypt = 8;
  if (has_scrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scrypt().data(), this->scrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->scrypt(), target);
  }

  // optional string rcvr_name = 9;
  if (has_rcvr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rcvr_name().data(), this->rcvr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->rcvr_name(), target);
  }

  // optional double message_id = 10;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->message_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeoLaunch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GEO_LAUNCH"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool isTrigger = 2 [default = true];
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

    // optional float cf = 3;
    if (has_cf()) {
      total_size += 1 + 4;
    }

    // optional int32 chan = 4;
    if (has_chan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chan());
    }

    // optional int32 az = 5;
    if (has_az()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->az());
    }

    // optional float lat = 6;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float lon = 7;
    if (has_lon()) {
      total_size += 1 + 4;
    }

    // optional string scrypt = 8;
    if (has_scrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scrypt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string rcvr_name = 9;
    if (has_rcvr_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rcvr_name());
    }

    // optional double message_id = 10;
    if (has_message_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoLaunch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoLaunch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoLaunch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoLaunch::MergeFrom(const GeoLaunch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
    if (from.has_cf()) {
      set_cf(from.cf());
    }
    if (from.has_chan()) {
      set_chan(from.chan());
    }
    if (from.has_az()) {
      set_az(from.az());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_scrypt()) {
      set_scrypt(from.scrypt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rcvr_name()) {
      set_rcvr_name(from.rcvr_name());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoLaunch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoLaunch::CopyFrom(const GeoLaunch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoLaunch::IsInitialized() const {

  return true;
}

void GeoLaunch::Swap(GeoLaunch* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(cf_, other->cf_);
    std::swap(chan_, other->chan_);
    std::swap(az_, other->az_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(scrypt_, other->scrypt_);
    std::swap(rcvr_name_, other->rcvr_name_);
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoLaunch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoLaunch_descriptor_;
  metadata.reflection = GeoLaunch_reflection_;
  return metadata;
}


// ===================================================================

::std::string* WifiLaunch::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int WifiLaunch::kMsgNameFieldNumber;
const int WifiLaunch::kIsTriggerFieldNumber;
const int WifiLaunch::kInfileFieldNumber;
const int WifiLaunch::kMacFieldNumber;
const int WifiLaunch::kFrameTypeFieldNumber;
const int WifiLaunch::kCsvfileFieldNumber;
const int WifiLaunch::kChanFieldNumber;
const int WifiLaunch::kMessageIdFieldNumber;
#endif  // !_MSC_VER

WifiLaunch::WifiLaunch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WifiLaunch::InitAsDefaultInstance() {
}

WifiLaunch::WifiLaunch(const WifiLaunch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WifiLaunch::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  istrigger_ = true;
  infile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frametype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  csvfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chan_ = 0;
  message_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WifiLaunch::~WifiLaunch() {
  SharedDtor();
}

void WifiLaunch::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (infile_ != &::google::protobuf::internal::kEmptyString) {
    delete infile_;
  }
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (frametype_ != &::google::protobuf::internal::kEmptyString) {
    delete frametype_;
  }
  if (csvfile_ != &::google::protobuf::internal::kEmptyString) {
    delete csvfile_;
  }
  if (this != default_instance_) {
  }
}

void WifiLaunch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WifiLaunch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WifiLaunch_descriptor_;
}

const WifiLaunch& WifiLaunch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTriggerMessages_2eproto();
  return *default_instance_;
}

WifiLaunch* WifiLaunch::default_instance_ = NULL;

WifiLaunch* WifiLaunch::New() const {
  return new WifiLaunch;
}

void WifiLaunch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    istrigger_ = true;
    if (has_infile()) {
      if (infile_ != &::google::protobuf::internal::kEmptyString) {
        infile_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
    if (has_frametype()) {
      if (frametype_ != &::google::protobuf::internal::kEmptyString) {
        frametype_->clear();
      }
    }
    if (has_csvfile()) {
      if (csvfile_ != &::google::protobuf::internal::kEmptyString) {
        csvfile_->clear();
      }
    }
    chan_ = 0;
    message_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WifiLaunch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "WIFI_LAUNCH"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infile;
        break;
      }

      // optional string infile = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->infile().data(), this->infile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mac;
        break;
      }

      // optional string mac = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_frameType;
        break;
      }

      // optional string frameType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frameType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frametype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->frametype().data(), this->frametype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_csvfile;
        break;
      }

      // optional string csvfile = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_csvfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_csvfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->csvfile().data(), this->csvfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_chan;
        break;
      }

      // optional int32 chan = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chan_)));
          set_has_chan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_message_id;
        break;
      }

      // optional double message_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WifiLaunch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "WIFI_LAUNCH"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istrigger(), output);
  }

  // optional string infile = 3;
  if (has_infile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->infile().data(), this->infile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->infile(), output);
  }

  // optional string mac = 4;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mac(), output);
  }

  // optional string frameType = 5;
  if (has_frametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frametype().data(), this->frametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->frametype(), output);
  }

  // optional string csvfile = 6;
  if (has_csvfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->csvfile().data(), this->csvfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->csvfile(), output);
  }

  // optional int32 chan = 7;
  if (has_chan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->chan(), output);
  }

  // optional double message_id = 8;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->message_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WifiLaunch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "WIFI_LAUNCH"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istrigger(), target);
  }

  // optional string infile = 3;
  if (has_infile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->infile().data(), this->infile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->infile(), target);
  }

  // optional string mac = 4;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mac(), target);
  }

  // optional string frameType = 5;
  if (has_frametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frametype().data(), this->frametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->frametype(), target);
  }

  // optional string csvfile = 6;
  if (has_csvfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->csvfile().data(), this->csvfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->csvfile(), target);
  }

  // optional int32 chan = 7;
  if (has_chan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->chan(), target);
  }

  // optional double message_id = 8;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->message_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WifiLaunch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "WIFI_LAUNCH"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool isTrigger = 2 [default = true];
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

    // optional string infile = 3;
    if (has_infile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infile());
    }

    // optional string mac = 4;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

    // optional string frameType = 5;
    if (has_frametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frametype());
    }

    // optional string csvfile = 6;
    if (has_csvfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->csvfile());
    }

    // optional int32 chan = 7;
    if (has_chan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chan());
    }

    // optional double message_id = 8;
    if (has_message_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WifiLaunch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WifiLaunch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WifiLaunch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WifiLaunch::MergeFrom(const WifiLaunch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
    if (from.has_infile()) {
      set_infile(from.infile());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_frametype()) {
      set_frametype(from.frametype());
    }
    if (from.has_csvfile()) {
      set_csvfile(from.csvfile());
    }
    if (from.has_chan()) {
      set_chan(from.chan());
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WifiLaunch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WifiLaunch::CopyFrom(const WifiLaunch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiLaunch::IsInitialized() const {

  return true;
}

void WifiLaunch::Swap(WifiLaunch* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(infile_, other->infile_);
    std::swap(mac_, other->mac_);
    std::swap(frametype_, other->frametype_);
    std::swap(csvfile_, other->csvfile_);
    std::swap(chan_, other->chan_);
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WifiLaunch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WifiLaunch_descriptor_;
  metadata.reflection = WifiLaunch_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ReallocateResources::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ReallocateResources::kMsgNameFieldNumber;
const int ReallocateResources::kIsTriggerFieldNumber;
const int ReallocateResources::kAppIDFieldNumber;
#endif  // !_MSC_VER

ReallocateResources::ReallocateResources()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReallocateResources::InitAsDefaultInstance() {
}

ReallocateResources::ReallocateResources(const ReallocateResources& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReallocateResources::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  istrigger_ = true;
  appid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReallocateResources::~ReallocateResources() {
  SharedDtor();
}

void ReallocateResources::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ReallocateResources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReallocateResources::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReallocateResources_descriptor_;
}

const ReallocateResources& ReallocateResources::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTriggerMessages_2eproto();
  return *default_instance_;
}

ReallocateResources* ReallocateResources::default_instance_ = NULL;

ReallocateResources* ReallocateResources::New() const {
  return new ReallocateResources;
}

void ReallocateResources::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    istrigger_ = true;
    appid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReallocateResources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "REALLOCATE_RESOURCES"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appID;
        break;
      }

      // optional int32 appID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReallocateResources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "REALLOCATE_RESOURCES"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istrigger(), output);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReallocateResources::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "REALLOCATE_RESOURCES"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istrigger(), target);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReallocateResources::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "REALLOCATE_RESOURCES"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool isTrigger = 2 [default = true];
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

    // optional int32 appID = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReallocateResources::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReallocateResources* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReallocateResources*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReallocateResources::MergeFrom(const ReallocateResources& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReallocateResources::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReallocateResources::CopyFrom(const ReallocateResources& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReallocateResources::IsInitialized() const {

  return true;
}

void ReallocateResources::Swap(ReallocateResources* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReallocateResources::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReallocateResources_descriptor_;
  metadata.reflection = ReallocateResources_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ControlUpgrade::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ControlUpgrade::kMsgNameFieldNumber;
const int ControlUpgrade::kIsTriggerFieldNumber;
#endif  // !_MSC_VER

ControlUpgrade::ControlUpgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ControlUpgrade::InitAsDefaultInstance() {
}

ControlUpgrade::ControlUpgrade(const ControlUpgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ControlUpgrade::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  istrigger_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControlUpgrade::~ControlUpgrade() {
  SharedDtor();
}

void ControlUpgrade::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ControlUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlUpgrade_descriptor_;
}

const ControlUpgrade& ControlUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTriggerMessages_2eproto();
  return *default_instance_;
}

ControlUpgrade* ControlUpgrade::default_instance_ = NULL;

ControlUpgrade* ControlUpgrade::New() const {
  return new ControlUpgrade;
}

void ControlUpgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    istrigger_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControlUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "CONTROL_UPGRADE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ControlUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "CONTROL_UPGRADE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istrigger(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ControlUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "CONTROL_UPGRADE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istrigger(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ControlUpgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "CONTROL_UPGRADE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool isTrigger = 2 [default = true];
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControlUpgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControlUpgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControlUpgrade::MergeFrom(const ControlUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControlUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlUpgrade::CopyFrom(const ControlUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlUpgrade::IsInitialized() const {

  return true;
}

void ControlUpgrade::Swap(ControlUpgrade* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControlUpgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlUpgrade_descriptor_;
  metadata.reflection = ControlUpgrade_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RfcuSwitch::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RfcuSwitch::kMsgNameFieldNumber;
const int RfcuSwitch::kIsTriggerFieldNumber;
const int RfcuSwitch::kStandbyStateFieldNumber;
#endif  // !_MSC_VER

RfcuSwitch::RfcuSwitch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RfcuSwitch::InitAsDefaultInstance() {
}

RfcuSwitch::RfcuSwitch(const RfcuSwitch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RfcuSwitch::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  istrigger_ = true;
  standbystate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RfcuSwitch::~RfcuSwitch() {
  SharedDtor();
}

void RfcuSwitch::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void RfcuSwitch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RfcuSwitch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RfcuSwitch_descriptor_;
}

const RfcuSwitch& RfcuSwitch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTriggerMessages_2eproto();
  return *default_instance_;
}

RfcuSwitch* RfcuSwitch::default_instance_ = NULL;

RfcuSwitch* RfcuSwitch::New() const {
  return new RfcuSwitch;
}

void RfcuSwitch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    istrigger_ = true;
    standbystate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RfcuSwitch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RFCU_SWITCH"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_standbyState;
        break;
      }

      // optional int32 standbyState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standbyState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &standbystate_)));
          set_has_standbystate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RfcuSwitch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RFCU_SWITCH"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istrigger(), output);
  }

  // optional int32 standbyState = 3;
  if (has_standbystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->standbystate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RfcuSwitch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RFCU_SWITCH"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istrigger(), target);
  }

  // optional int32 standbyState = 3;
  if (has_standbystate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->standbystate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RfcuSwitch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RFCU_SWITCH"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool isTrigger = 2 [default = true];
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

    // optional int32 standbyState = 3;
    if (has_standbystate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->standbystate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RfcuSwitch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RfcuSwitch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RfcuSwitch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RfcuSwitch::MergeFrom(const RfcuSwitch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
    if (from.has_standbystate()) {
      set_standbystate(from.standbystate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RfcuSwitch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RfcuSwitch::CopyFrom(const RfcuSwitch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RfcuSwitch::IsInitialized() const {

  return true;
}

void RfcuSwitch::Swap(RfcuSwitch* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(standbystate_, other->standbystate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RfcuSwitch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RfcuSwitch_descriptor_;
  metadata.reflection = RfcuSwitch_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TGDopplerTip::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int TGDopplerTip::kMsgNameFieldNumber;
const int TGDopplerTip::kIsTriggerFieldNumber;
const int TGDopplerTip::kGlobalIDFieldNumber;
const int TGDopplerTip::kFrequencyFieldNumber;
#endif  // !_MSC_VER

TGDopplerTip::TGDopplerTip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TGDopplerTip::InitAsDefaultInstance() {
}

TGDopplerTip::TGDopplerTip(const TGDopplerTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TGDopplerTip::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  istrigger_ = true;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frequency_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGDopplerTip::~TGDopplerTip() {
  SharedDtor();
}

void TGDopplerTip::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void TGDopplerTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGDopplerTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGDopplerTip_descriptor_;
}

const TGDopplerTip& TGDopplerTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTriggerMessages_2eproto();
  return *default_instance_;
}

TGDopplerTip* TGDopplerTip::default_instance_ = NULL;

TGDopplerTip* TGDopplerTip::New() const {
  return new TGDopplerTip;
}

void TGDopplerTip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    istrigger_ = true;
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    frequency_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGDopplerTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TG_DOPPLER_TIP"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_globalID;
        break;
      }

      // optional string globalID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_frequency;
        break;
      }

      // optional double frequency = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TGDopplerTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TG_DOPPLER_TIP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istrigger(), output);
  }

  // optional string globalID = 3;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->globalid(), output);
  }

  // optional double frequency = 4;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->frequency(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TGDopplerTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TG_DOPPLER_TIP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool isTrigger = 2 [default = true];
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istrigger(), target);
  }

  // optional string globalID = 3;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->globalid(), target);
  }

  // optional double frequency = 4;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->frequency(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TGDopplerTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TG_DOPPLER_TIP"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool isTrigger = 2 [default = true];
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

    // optional string globalID = 3;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional double frequency = 4;
    if (has_frequency()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGDopplerTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGDopplerTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGDopplerTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGDopplerTip::MergeFrom(const TGDopplerTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGDopplerTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGDopplerTip::CopyFrom(const TGDopplerTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGDopplerTip::IsInitialized() const {

  return true;
}

void TGDopplerTip::Swap(TGDopplerTip* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(globalid_, other->globalid_);
    std::swap(frequency_, other->frequency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGDopplerTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGDopplerTip_descriptor_;
  metadata.reflection = TGDopplerTip_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace falcon_trigger_msg

// @@protoc_insertion_point(global_scope)
