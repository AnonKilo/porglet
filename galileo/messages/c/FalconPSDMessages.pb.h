// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FalconPSDMessages.proto

#ifndef PROTOBUF_FalconPSDMessages_2eproto__INCLUDED
#define PROTOBUF_FalconPSDMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace falcon_psd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FalconPSDMessages_2eproto();
void protobuf_AssignDesc_FalconPSDMessages_2eproto();
void protobuf_ShutdownFile_FalconPSDMessages_2eproto();

class ClassificationHeader;
class PSDHeader;
class PSD;
class DensePSD;
class BitFrameHeader;
class BitFrame;

enum ClassificationHeader_ClassLevel {
  ClassificationHeader_ClassLevel_UNCLASSIFIED = 1,
  ClassificationHeader_ClassLevel_CONFIDENTIAL = 2,
  ClassificationHeader_ClassLevel_SECRET = 3,
  ClassificationHeader_ClassLevel_TOPSECRET = 4
};
bool ClassificationHeader_ClassLevel_IsValid(int value);
const ClassificationHeader_ClassLevel ClassificationHeader_ClassLevel_ClassLevel_MIN = ClassificationHeader_ClassLevel_UNCLASSIFIED;
const ClassificationHeader_ClassLevel ClassificationHeader_ClassLevel_ClassLevel_MAX = ClassificationHeader_ClassLevel_TOPSECRET;
const int ClassificationHeader_ClassLevel_ClassLevel_ARRAYSIZE = ClassificationHeader_ClassLevel_ClassLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClassificationHeader_ClassLevel_descriptor();
inline const ::std::string& ClassificationHeader_ClassLevel_Name(ClassificationHeader_ClassLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClassificationHeader_ClassLevel_descriptor(), value);
}
inline bool ClassificationHeader_ClassLevel_Parse(
    const ::std::string& name, ClassificationHeader_ClassLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClassificationHeader_ClassLevel>(
    ClassificationHeader_ClassLevel_descriptor(), name, value);
}
enum ClassificationHeader_Compartment {
  ClassificationHeader_Compartment_SI = 1,
  ClassificationHeader_Compartment_TK = 2
};
bool ClassificationHeader_Compartment_IsValid(int value);
const ClassificationHeader_Compartment ClassificationHeader_Compartment_Compartment_MIN = ClassificationHeader_Compartment_SI;
const ClassificationHeader_Compartment ClassificationHeader_Compartment_Compartment_MAX = ClassificationHeader_Compartment_TK;
const int ClassificationHeader_Compartment_Compartment_ARRAYSIZE = ClassificationHeader_Compartment_Compartment_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClassificationHeader_Compartment_descriptor();
inline const ::std::string& ClassificationHeader_Compartment_Name(ClassificationHeader_Compartment value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClassificationHeader_Compartment_descriptor(), value);
}
inline bool ClassificationHeader_Compartment_Parse(
    const ::std::string& name, ClassificationHeader_Compartment* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClassificationHeader_Compartment>(
    ClassificationHeader_Compartment_descriptor(), name, value);
}
enum ClassificationHeader_Releasability {
  ClassificationHeader_Releasability_FOUO = 1,
  ClassificationHeader_Releasability_ROK = 2,
  ClassificationHeader_Releasability_EY3 = 3,
  ClassificationHeader_Releasability_EY4 = 4,
  ClassificationHeader_Releasability_EY5 = 5,
  ClassificationHeader_Releasability_EY9 = 6,
  ClassificationHeader_Releasability_NOFOR = 7
};
bool ClassificationHeader_Releasability_IsValid(int value);
const ClassificationHeader_Releasability ClassificationHeader_Releasability_Releasability_MIN = ClassificationHeader_Releasability_FOUO;
const ClassificationHeader_Releasability ClassificationHeader_Releasability_Releasability_MAX = ClassificationHeader_Releasability_NOFOR;
const int ClassificationHeader_Releasability_Releasability_ARRAYSIZE = ClassificationHeader_Releasability_Releasability_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClassificationHeader_Releasability_descriptor();
inline const ::std::string& ClassificationHeader_Releasability_Name(ClassificationHeader_Releasability value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClassificationHeader_Releasability_descriptor(), value);
}
inline bool ClassificationHeader_Releasability_Parse(
    const ::std::string& name, ClassificationHeader_Releasability* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClassificationHeader_Releasability>(
    ClassificationHeader_Releasability_descriptor(), name, value);
}
// ===================================================================

class ClassificationHeader : public ::google::protobuf::Message {
 public:
  ClassificationHeader();
  virtual ~ClassificationHeader();

  ClassificationHeader(const ClassificationHeader& from);

  inline ClassificationHeader& operator=(const ClassificationHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassificationHeader& default_instance();

  void Swap(ClassificationHeader* other);

  // implements Message ----------------------------------------------

  ClassificationHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClassificationHeader& from);
  void MergeFrom(const ClassificationHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ClassificationHeader_ClassLevel ClassLevel;
  static const ClassLevel UNCLASSIFIED = ClassificationHeader_ClassLevel_UNCLASSIFIED;
  static const ClassLevel CONFIDENTIAL = ClassificationHeader_ClassLevel_CONFIDENTIAL;
  static const ClassLevel SECRET = ClassificationHeader_ClassLevel_SECRET;
  static const ClassLevel TOPSECRET = ClassificationHeader_ClassLevel_TOPSECRET;
  static inline bool ClassLevel_IsValid(int value) {
    return ClassificationHeader_ClassLevel_IsValid(value);
  }
  static const ClassLevel ClassLevel_MIN =
    ClassificationHeader_ClassLevel_ClassLevel_MIN;
  static const ClassLevel ClassLevel_MAX =
    ClassificationHeader_ClassLevel_ClassLevel_MAX;
  static const int ClassLevel_ARRAYSIZE =
    ClassificationHeader_ClassLevel_ClassLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ClassLevel_descriptor() {
    return ClassificationHeader_ClassLevel_descriptor();
  }
  static inline const ::std::string& ClassLevel_Name(ClassLevel value) {
    return ClassificationHeader_ClassLevel_Name(value);
  }
  static inline bool ClassLevel_Parse(const ::std::string& name,
      ClassLevel* value) {
    return ClassificationHeader_ClassLevel_Parse(name, value);
  }

  typedef ClassificationHeader_Compartment Compartment;
  static const Compartment SI = ClassificationHeader_Compartment_SI;
  static const Compartment TK = ClassificationHeader_Compartment_TK;
  static inline bool Compartment_IsValid(int value) {
    return ClassificationHeader_Compartment_IsValid(value);
  }
  static const Compartment Compartment_MIN =
    ClassificationHeader_Compartment_Compartment_MIN;
  static const Compartment Compartment_MAX =
    ClassificationHeader_Compartment_Compartment_MAX;
  static const int Compartment_ARRAYSIZE =
    ClassificationHeader_Compartment_Compartment_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Compartment_descriptor() {
    return ClassificationHeader_Compartment_descriptor();
  }
  static inline const ::std::string& Compartment_Name(Compartment value) {
    return ClassificationHeader_Compartment_Name(value);
  }
  static inline bool Compartment_Parse(const ::std::string& name,
      Compartment* value) {
    return ClassificationHeader_Compartment_Parse(name, value);
  }

  typedef ClassificationHeader_Releasability Releasability;
  static const Releasability FOUO = ClassificationHeader_Releasability_FOUO;
  static const Releasability ROK = ClassificationHeader_Releasability_ROK;
  static const Releasability EY3 = ClassificationHeader_Releasability_EY3;
  static const Releasability EY4 = ClassificationHeader_Releasability_EY4;
  static const Releasability EY5 = ClassificationHeader_Releasability_EY5;
  static const Releasability EY9 = ClassificationHeader_Releasability_EY9;
  static const Releasability NOFOR = ClassificationHeader_Releasability_NOFOR;
  static inline bool Releasability_IsValid(int value) {
    return ClassificationHeader_Releasability_IsValid(value);
  }
  static const Releasability Releasability_MIN =
    ClassificationHeader_Releasability_Releasability_MIN;
  static const Releasability Releasability_MAX =
    ClassificationHeader_Releasability_Releasability_MAX;
  static const int Releasability_ARRAYSIZE =
    ClassificationHeader_Releasability_Releasability_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Releasability_descriptor() {
    return ClassificationHeader_Releasability_descriptor();
  }
  static inline const ::std::string& Releasability_Name(Releasability value) {
    return ClassificationHeader_Releasability_Name(value);
  }
  static inline bool Releasability_Parse(const ::std::string& name,
      Releasability* value) {
    return ClassificationHeader_Releasability_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .falcon_psd.ClassificationHeader.ClassLevel classification = 1;
  inline bool has_classification() const;
  inline void clear_classification();
  static const int kClassificationFieldNumber = 1;
  inline ::falcon_psd::ClassificationHeader_ClassLevel classification() const;
  inline void set_classification(::falcon_psd::ClassificationHeader_ClassLevel value);

  // optional .falcon_psd.ClassificationHeader.Compartment compartment = 2;
  inline bool has_compartment() const;
  inline void clear_compartment();
  static const int kCompartmentFieldNumber = 2;
  inline ::falcon_psd::ClassificationHeader_Compartment compartment() const;
  inline void set_compartment(::falcon_psd::ClassificationHeader_Compartment value);

  // optional .falcon_psd.ClassificationHeader.Releasability rel_to = 3;
  inline bool has_rel_to() const;
  inline void clear_rel_to();
  static const int kRelToFieldNumber = 3;
  inline ::falcon_psd::ClassificationHeader_Releasability rel_to() const;
  inline void set_rel_to(::falcon_psd::ClassificationHeader_Releasability value);

  // @@protoc_insertion_point(class_scope:falcon_psd.ClassificationHeader)
 private:
  inline void set_has_classification();
  inline void clear_has_classification();
  inline void set_has_compartment();
  inline void clear_has_compartment();
  inline void set_has_rel_to();
  inline void clear_has_rel_to();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int classification_;
  int compartment_;
  int rel_to_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FalconPSDMessages_2eproto();
  friend void protobuf_AssignDesc_FalconPSDMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconPSDMessages_2eproto();

  void InitAsDefaultInstance();
  static ClassificationHeader* default_instance_;
};
// -------------------------------------------------------------------

class PSDHeader : public ::google::protobuf::Message {
 public:
  PSDHeader();
  virtual ~PSDHeader();

  PSDHeader(const PSDHeader& from);

  inline PSDHeader& operator=(const PSDHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PSDHeader& default_instance();

  void Swap(PSDHeader* other);

  // implements Message ----------------------------------------------

  PSDHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PSDHeader& from);
  void MergeFrom(const PSDHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required double start_frequency = 2;
  inline bool has_start_frequency() const;
  inline void clear_start_frequency();
  static const int kStartFrequencyFieldNumber = 2;
  inline double start_frequency() const;
  inline void set_start_frequency(double value);

  // required double end_frequency = 3;
  inline bool has_end_frequency() const;
  inline void clear_end_frequency();
  static const int kEndFrequencyFieldNumber = 3;
  inline double end_frequency() const;
  inline void set_end_frequency(double value);

  // required double resolution_bandwidth = 4;
  inline bool has_resolution_bandwidth() const;
  inline void clear_resolution_bandwidth();
  static const int kResolutionBandwidthFieldNumber = 4;
  inline double resolution_bandwidth() const;
  inline void set_resolution_bandwidth(double value);

  // required int32 num_points = 5;
  inline bool has_num_points() const;
  inline void clear_num_points();
  static const int kNumPointsFieldNumber = 5;
  inline ::google::protobuf::int32 num_points() const;
  inline void set_num_points(::google::protobuf::int32 value);

  // required double duration = 6;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 6;
  inline double duration() const;
  inline void set_duration(double value);

  // required int32 channel = 7;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 7;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional int32 highlight_start = 8;
  inline bool has_highlight_start() const;
  inline void clear_highlight_start();
  static const int kHighlightStartFieldNumber = 8;
  inline ::google::protobuf::int32 highlight_start() const;
  inline void set_highlight_start(::google::protobuf::int32 value);

  // optional int32 highlight_end = 9;
  inline bool has_highlight_end() const;
  inline void clear_highlight_end();
  static const int kHighlightEndFieldNumber = 9;
  inline ::google::protobuf::int32 highlight_end() const;
  inline void set_highlight_end(::google::protobuf::int32 value);

  // optional int32 saturation = 10;
  inline bool has_saturation() const;
  inline void clear_saturation();
  static const int kSaturationFieldNumber = 10;
  inline ::google::protobuf::int32 saturation() const;
  inline void set_saturation(::google::protobuf::int32 value);

  // optional double psd_max = 11;
  inline bool has_psd_max() const;
  inline void clear_psd_max();
  static const int kPsdMaxFieldNumber = 11;
  inline double psd_max() const;
  inline void set_psd_max(double value);

  // optional double psd_min = 12;
  inline bool has_psd_min() const;
  inline void clear_psd_min();
  static const int kPsdMinFieldNumber = 12;
  inline double psd_min() const;
  inline void set_psd_min(double value);

  // @@protoc_insertion_point(class_scope:falcon_psd.PSDHeader)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_start_frequency();
  inline void clear_has_start_frequency();
  inline void set_has_end_frequency();
  inline void clear_has_end_frequency();
  inline void set_has_resolution_bandwidth();
  inline void clear_has_resolution_bandwidth();
  inline void set_has_num_points();
  inline void clear_has_num_points();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_highlight_start();
  inline void clear_has_highlight_start();
  inline void set_has_highlight_end();
  inline void clear_has_highlight_end();
  inline void set_has_saturation();
  inline void clear_has_saturation();
  inline void set_has_psd_max();
  inline void clear_has_psd_max();
  inline void set_has_psd_min();
  inline void clear_has_psd_min();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uuid_;
  double start_frequency_;
  double end_frequency_;
  double resolution_bandwidth_;
  double duration_;
  ::google::protobuf::int32 num_points_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 highlight_start_;
  ::google::protobuf::int32 highlight_end_;
  double psd_max_;
  double psd_min_;
  ::google::protobuf::int32 saturation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_FalconPSDMessages_2eproto();
  friend void protobuf_AssignDesc_FalconPSDMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconPSDMessages_2eproto();

  void InitAsDefaultInstance();
  static PSDHeader* default_instance_;
};
// -------------------------------------------------------------------

class PSD : public ::google::protobuf::Message {
 public:
  PSD();
  virtual ~PSD();

  PSD(const PSD& from);

  inline PSD& operator=(const PSD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PSD& default_instance();

  void Swap(PSD* other);

  // implements Message ----------------------------------------------

  PSD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PSD& from);
  void MergeFrom(const PSD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "PSD"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // required .falcon_psd.ClassificationHeader classification_header = 2;
  inline bool has_classification_header() const;
  inline void clear_classification_header();
  static const int kClassificationHeaderFieldNumber = 2;
  inline const ::falcon_psd::ClassificationHeader& classification_header() const;
  inline ::falcon_psd::ClassificationHeader* mutable_classification_header();
  inline ::falcon_psd::ClassificationHeader* release_classification_header();
  inline void set_allocated_classification_header(::falcon_psd::ClassificationHeader* classification_header);

  // required double timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline double timestamp() const;
  inline void set_timestamp(double value);

  // required string uuid = 4;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 4;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional .falcon_psd.PSDHeader psd_header = 5;
  inline bool has_psd_header() const;
  inline void clear_psd_header();
  static const int kPsdHeaderFieldNumber = 5;
  inline const ::falcon_psd::PSDHeader& psd_header() const;
  inline ::falcon_psd::PSDHeader* mutable_psd_header();
  inline ::falcon_psd::PSDHeader* release_psd_header();
  inline void set_allocated_psd_header(::falcon_psd::PSDHeader* psd_header);

  // repeated float fft_data = 6 [packed = true];
  inline int fft_data_size() const;
  inline void clear_fft_data();
  static const int kFftDataFieldNumber = 6;
  inline float fft_data(int index) const;
  inline void set_fft_data(int index, float value);
  inline void add_fft_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      fft_data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_fft_data();

  // @@protoc_insertion_point(class_scope:falcon_psd.PSD)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_classification_header();
  inline void clear_has_classification_header();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_psd_header();
  inline void clear_has_psd_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::falcon_psd::ClassificationHeader* classification_header_;
  double timestamp_;
  ::std::string* uuid_;
  ::falcon_psd::PSDHeader* psd_header_;
  ::google::protobuf::RepeatedField< float > fft_data_;
  mutable int _fft_data_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_FalconPSDMessages_2eproto();
  friend void protobuf_AssignDesc_FalconPSDMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconPSDMessages_2eproto();

  void InitAsDefaultInstance();
  static PSD* default_instance_;
};
// -------------------------------------------------------------------

class DensePSD : public ::google::protobuf::Message {
 public:
  DensePSD();
  virtual ~DensePSD();

  DensePSD(const DensePSD& from);

  inline DensePSD& operator=(const DensePSD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DensePSD& default_instance();

  void Swap(DensePSD* other);

  // implements Message ----------------------------------------------

  DensePSD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DensePSD& from);
  void MergeFrom(const DensePSD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "DENSE_PSD"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // required .falcon_psd.ClassificationHeader classification_header = 2;
  inline bool has_classification_header() const;
  inline void clear_classification_header();
  static const int kClassificationHeaderFieldNumber = 2;
  inline const ::falcon_psd::ClassificationHeader& classification_header() const;
  inline ::falcon_psd::ClassificationHeader* mutable_classification_header();
  inline ::falcon_psd::ClassificationHeader* release_classification_header();
  inline void set_allocated_classification_header(::falcon_psd::ClassificationHeader* classification_header);

  // required double timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline double timestamp() const;
  inline void set_timestamp(double value);

  // required string uuid = 4;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 4;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional .falcon_psd.PSDHeader psd_header = 5;
  inline bool has_psd_header() const;
  inline void clear_psd_header();
  static const int kPsdHeaderFieldNumber = 5;
  inline const ::falcon_psd::PSDHeader& psd_header() const;
  inline ::falcon_psd::PSDHeader* mutable_psd_header();
  inline ::falcon_psd::PSDHeader* release_psd_header();
  inline void set_allocated_psd_header(::falcon_psd::PSDHeader* psd_header);

  // required float min = 6;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 6;
  inline float min() const;
  inline void set_min(float value);

  // required float step = 7;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 7;
  inline float step() const;
  inline void set_step(float value);

  // repeated float fft_data = 8;
  inline int fft_data_size() const;
  inline void clear_fft_data();
  static const int kFftDataFieldNumber = 8;
  inline float fft_data(int index) const;
  inline void set_fft_data(int index, float value);
  inline void add_fft_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      fft_data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_fft_data();

  // @@protoc_insertion_point(class_scope:falcon_psd.DensePSD)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_classification_header();
  inline void clear_has_classification_header();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_psd_header();
  inline void clear_has_psd_header();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_step();
  inline void clear_has_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::falcon_psd::ClassificationHeader* classification_header_;
  double timestamp_;
  ::std::string* uuid_;
  ::falcon_psd::PSDHeader* psd_header_;
  float min_;
  float step_;
  ::google::protobuf::RepeatedField< float > fft_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_FalconPSDMessages_2eproto();
  friend void protobuf_AssignDesc_FalconPSDMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconPSDMessages_2eproto();

  void InitAsDefaultInstance();
  static DensePSD* default_instance_;
};
// -------------------------------------------------------------------

class BitFrameHeader : public ::google::protobuf::Message {
 public:
  BitFrameHeader();
  virtual ~BitFrameHeader();

  BitFrameHeader(const BitFrameHeader& from);

  inline BitFrameHeader& operator=(const BitFrameHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitFrameHeader& default_instance();

  void Swap(BitFrameHeader* other);

  // implements Message ----------------------------------------------

  BitFrameHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitFrameHeader& from);
  void MergeFrom(const BitFrameHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required int32 num_points = 2;
  inline bool has_num_points() const;
  inline void clear_num_points();
  static const int kNumPointsFieldNumber = 2;
  inline ::google::protobuf::int32 num_points() const;
  inline void set_num_points(::google::protobuf::int32 value);

  // required double duration = 3;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 3;
  inline double duration() const;
  inline void set_duration(double value);

  // required int32 channel = 4;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 4;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional double bit_max = 5;
  inline bool has_bit_max() const;
  inline void clear_bit_max();
  static const int kBitMaxFieldNumber = 5;
  inline double bit_max() const;
  inline void set_bit_max(double value);

  // optional double bit_min = 6;
  inline bool has_bit_min() const;
  inline void clear_bit_min();
  static const int kBitMinFieldNumber = 6;
  inline double bit_min() const;
  inline void set_bit_min(double value);

  // optional string appName = 7;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppNameFieldNumber = 7;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // @@protoc_insertion_point(class_scope:falcon_psd.BitFrameHeader)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_num_points();
  inline void clear_has_num_points();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_bit_max();
  inline void clear_has_bit_max();
  inline void set_has_bit_min();
  inline void clear_has_bit_min();
  inline void set_has_appname();
  inline void clear_has_appname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uuid_;
  double duration_;
  ::google::protobuf::int32 num_points_;
  ::google::protobuf::int32 channel_;
  double bit_max_;
  double bit_min_;
  ::std::string* appname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_FalconPSDMessages_2eproto();
  friend void protobuf_AssignDesc_FalconPSDMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconPSDMessages_2eproto();

  void InitAsDefaultInstance();
  static BitFrameHeader* default_instance_;
};
// -------------------------------------------------------------------

class BitFrame : public ::google::protobuf::Message {
 public:
  BitFrame();
  virtual ~BitFrame();

  BitFrame(const BitFrame& from);

  inline BitFrame& operator=(const BitFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitFrame& default_instance();

  void Swap(BitFrame* other);

  // implements Message ----------------------------------------------

  BitFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitFrame& from);
  void MergeFrom(const BitFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "BIT_FRAME"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // required .falcon_psd.ClassificationHeader classification_header = 2;
  inline bool has_classification_header() const;
  inline void clear_classification_header();
  static const int kClassificationHeaderFieldNumber = 2;
  inline const ::falcon_psd::ClassificationHeader& classification_header() const;
  inline ::falcon_psd::ClassificationHeader* mutable_classification_header();
  inline ::falcon_psd::ClassificationHeader* release_classification_header();
  inline void set_allocated_classification_header(::falcon_psd::ClassificationHeader* classification_header);

  // required double timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline double timestamp() const;
  inline void set_timestamp(double value);

  // required string uuid = 4;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 4;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional .falcon_psd.BitFrameHeader header = 5;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 5;
  inline const ::falcon_psd::BitFrameHeader& header() const;
  inline ::falcon_psd::BitFrameHeader* mutable_header();
  inline ::falcon_psd::BitFrameHeader* release_header();
  inline void set_allocated_header(::falcon_psd::BitFrameHeader* header);

  // repeated int32 bit_data = 6;
  inline int bit_data_size() const;
  inline void clear_bit_data();
  static const int kBitDataFieldNumber = 6;
  inline ::google::protobuf::int32 bit_data(int index) const;
  inline void set_bit_data(int index, ::google::protobuf::int32 value);
  inline void add_bit_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bit_data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bit_data();

  // @@protoc_insertion_point(class_scope:falcon_psd.BitFrame)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_classification_header();
  inline void clear_has_classification_header();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::falcon_psd::ClassificationHeader* classification_header_;
  double timestamp_;
  ::std::string* uuid_;
  ::falcon_psd::BitFrameHeader* header_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bit_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_FalconPSDMessages_2eproto();
  friend void protobuf_AssignDesc_FalconPSDMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconPSDMessages_2eproto();

  void InitAsDefaultInstance();
  static BitFrame* default_instance_;
};
// ===================================================================


// ===================================================================

// ClassificationHeader

// required .falcon_psd.ClassificationHeader.ClassLevel classification = 1;
inline bool ClassificationHeader::has_classification() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClassificationHeader::set_has_classification() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClassificationHeader::clear_has_classification() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClassificationHeader::clear_classification() {
  classification_ = 1;
  clear_has_classification();
}
inline ::falcon_psd::ClassificationHeader_ClassLevel ClassificationHeader::classification() const {
  return static_cast< ::falcon_psd::ClassificationHeader_ClassLevel >(classification_);
}
inline void ClassificationHeader::set_classification(::falcon_psd::ClassificationHeader_ClassLevel value) {
  assert(::falcon_psd::ClassificationHeader_ClassLevel_IsValid(value));
  set_has_classification();
  classification_ = value;
}

// optional .falcon_psd.ClassificationHeader.Compartment compartment = 2;
inline bool ClassificationHeader::has_compartment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClassificationHeader::set_has_compartment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClassificationHeader::clear_has_compartment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClassificationHeader::clear_compartment() {
  compartment_ = 1;
  clear_has_compartment();
}
inline ::falcon_psd::ClassificationHeader_Compartment ClassificationHeader::compartment() const {
  return static_cast< ::falcon_psd::ClassificationHeader_Compartment >(compartment_);
}
inline void ClassificationHeader::set_compartment(::falcon_psd::ClassificationHeader_Compartment value) {
  assert(::falcon_psd::ClassificationHeader_Compartment_IsValid(value));
  set_has_compartment();
  compartment_ = value;
}

// optional .falcon_psd.ClassificationHeader.Releasability rel_to = 3;
inline bool ClassificationHeader::has_rel_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClassificationHeader::set_has_rel_to() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClassificationHeader::clear_has_rel_to() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClassificationHeader::clear_rel_to() {
  rel_to_ = 1;
  clear_has_rel_to();
}
inline ::falcon_psd::ClassificationHeader_Releasability ClassificationHeader::rel_to() const {
  return static_cast< ::falcon_psd::ClassificationHeader_Releasability >(rel_to_);
}
inline void ClassificationHeader::set_rel_to(::falcon_psd::ClassificationHeader_Releasability value) {
  assert(::falcon_psd::ClassificationHeader_Releasability_IsValid(value));
  set_has_rel_to();
  rel_to_ = value;
}

// -------------------------------------------------------------------

// PSDHeader

// required string uuid = 1;
inline bool PSDHeader::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PSDHeader::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PSDHeader::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PSDHeader::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& PSDHeader::uuid() const {
  return *uuid_;
}
inline void PSDHeader::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void PSDHeader::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void PSDHeader::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PSDHeader::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* PSDHeader::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PSDHeader::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double start_frequency = 2;
inline bool PSDHeader::has_start_frequency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PSDHeader::set_has_start_frequency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PSDHeader::clear_has_start_frequency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PSDHeader::clear_start_frequency() {
  start_frequency_ = 0;
  clear_has_start_frequency();
}
inline double PSDHeader::start_frequency() const {
  return start_frequency_;
}
inline void PSDHeader::set_start_frequency(double value) {
  set_has_start_frequency();
  start_frequency_ = value;
}

// required double end_frequency = 3;
inline bool PSDHeader::has_end_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PSDHeader::set_has_end_frequency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PSDHeader::clear_has_end_frequency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PSDHeader::clear_end_frequency() {
  end_frequency_ = 0;
  clear_has_end_frequency();
}
inline double PSDHeader::end_frequency() const {
  return end_frequency_;
}
inline void PSDHeader::set_end_frequency(double value) {
  set_has_end_frequency();
  end_frequency_ = value;
}

// required double resolution_bandwidth = 4;
inline bool PSDHeader::has_resolution_bandwidth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PSDHeader::set_has_resolution_bandwidth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PSDHeader::clear_has_resolution_bandwidth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PSDHeader::clear_resolution_bandwidth() {
  resolution_bandwidth_ = 0;
  clear_has_resolution_bandwidth();
}
inline double PSDHeader::resolution_bandwidth() const {
  return resolution_bandwidth_;
}
inline void PSDHeader::set_resolution_bandwidth(double value) {
  set_has_resolution_bandwidth();
  resolution_bandwidth_ = value;
}

// required int32 num_points = 5;
inline bool PSDHeader::has_num_points() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PSDHeader::set_has_num_points() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PSDHeader::clear_has_num_points() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PSDHeader::clear_num_points() {
  num_points_ = 0;
  clear_has_num_points();
}
inline ::google::protobuf::int32 PSDHeader::num_points() const {
  return num_points_;
}
inline void PSDHeader::set_num_points(::google::protobuf::int32 value) {
  set_has_num_points();
  num_points_ = value;
}

// required double duration = 6;
inline bool PSDHeader::has_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PSDHeader::set_has_duration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PSDHeader::clear_has_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PSDHeader::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline double PSDHeader::duration() const {
  return duration_;
}
inline void PSDHeader::set_duration(double value) {
  set_has_duration();
  duration_ = value;
}

// required int32 channel = 7;
inline bool PSDHeader::has_channel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PSDHeader::set_has_channel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PSDHeader::clear_has_channel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PSDHeader::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 PSDHeader::channel() const {
  return channel_;
}
inline void PSDHeader::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional int32 highlight_start = 8;
inline bool PSDHeader::has_highlight_start() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PSDHeader::set_has_highlight_start() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PSDHeader::clear_has_highlight_start() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PSDHeader::clear_highlight_start() {
  highlight_start_ = 0;
  clear_has_highlight_start();
}
inline ::google::protobuf::int32 PSDHeader::highlight_start() const {
  return highlight_start_;
}
inline void PSDHeader::set_highlight_start(::google::protobuf::int32 value) {
  set_has_highlight_start();
  highlight_start_ = value;
}

// optional int32 highlight_end = 9;
inline bool PSDHeader::has_highlight_end() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PSDHeader::set_has_highlight_end() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PSDHeader::clear_has_highlight_end() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PSDHeader::clear_highlight_end() {
  highlight_end_ = 0;
  clear_has_highlight_end();
}
inline ::google::protobuf::int32 PSDHeader::highlight_end() const {
  return highlight_end_;
}
inline void PSDHeader::set_highlight_end(::google::protobuf::int32 value) {
  set_has_highlight_end();
  highlight_end_ = value;
}

// optional int32 saturation = 10;
inline bool PSDHeader::has_saturation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PSDHeader::set_has_saturation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PSDHeader::clear_has_saturation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PSDHeader::clear_saturation() {
  saturation_ = 0;
  clear_has_saturation();
}
inline ::google::protobuf::int32 PSDHeader::saturation() const {
  return saturation_;
}
inline void PSDHeader::set_saturation(::google::protobuf::int32 value) {
  set_has_saturation();
  saturation_ = value;
}

// optional double psd_max = 11;
inline bool PSDHeader::has_psd_max() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PSDHeader::set_has_psd_max() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PSDHeader::clear_has_psd_max() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PSDHeader::clear_psd_max() {
  psd_max_ = 0;
  clear_has_psd_max();
}
inline double PSDHeader::psd_max() const {
  return psd_max_;
}
inline void PSDHeader::set_psd_max(double value) {
  set_has_psd_max();
  psd_max_ = value;
}

// optional double psd_min = 12;
inline bool PSDHeader::has_psd_min() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PSDHeader::set_has_psd_min() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PSDHeader::clear_has_psd_min() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PSDHeader::clear_psd_min() {
  psd_min_ = 0;
  clear_has_psd_min();
}
inline double PSDHeader::psd_min() const {
  return psd_min_;
}
inline void PSDHeader::set_psd_min(double value) {
  set_has_psd_min();
  psd_min_ = value;
}

// -------------------------------------------------------------------

// PSD

// optional string msgName = 1 [default = "PSD"];
inline bool PSD::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PSD::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PSD::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PSD::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& PSD::msgname() const {
  return *msgname_;
}
inline void PSD::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void PSD::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void PSD::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PSD::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* PSD::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void PSD::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// required .falcon_psd.ClassificationHeader classification_header = 2;
inline bool PSD::has_classification_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PSD::set_has_classification_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PSD::clear_has_classification_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PSD::clear_classification_header() {
  if (classification_header_ != NULL) classification_header_->::falcon_psd::ClassificationHeader::Clear();
  clear_has_classification_header();
}
inline const ::falcon_psd::ClassificationHeader& PSD::classification_header() const {
  return classification_header_ != NULL ? *classification_header_ : *default_instance_->classification_header_;
}
inline ::falcon_psd::ClassificationHeader* PSD::mutable_classification_header() {
  set_has_classification_header();
  if (classification_header_ == NULL) classification_header_ = new ::falcon_psd::ClassificationHeader;
  return classification_header_;
}
inline ::falcon_psd::ClassificationHeader* PSD::release_classification_header() {
  clear_has_classification_header();
  ::falcon_psd::ClassificationHeader* temp = classification_header_;
  classification_header_ = NULL;
  return temp;
}
inline void PSD::set_allocated_classification_header(::falcon_psd::ClassificationHeader* classification_header) {
  delete classification_header_;
  classification_header_ = classification_header;
  if (classification_header) {
    set_has_classification_header();
  } else {
    clear_has_classification_header();
  }
}

// required double timestamp = 3;
inline bool PSD::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PSD::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PSD::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PSD::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double PSD::timestamp() const {
  return timestamp_;
}
inline void PSD::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required string uuid = 4;
inline bool PSD::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PSD::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PSD::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PSD::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& PSD::uuid() const {
  return *uuid_;
}
inline void PSD::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void PSD::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void PSD::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PSD::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* PSD::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PSD::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .falcon_psd.PSDHeader psd_header = 5;
inline bool PSD::has_psd_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PSD::set_has_psd_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PSD::clear_has_psd_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PSD::clear_psd_header() {
  if (psd_header_ != NULL) psd_header_->::falcon_psd::PSDHeader::Clear();
  clear_has_psd_header();
}
inline const ::falcon_psd::PSDHeader& PSD::psd_header() const {
  return psd_header_ != NULL ? *psd_header_ : *default_instance_->psd_header_;
}
inline ::falcon_psd::PSDHeader* PSD::mutable_psd_header() {
  set_has_psd_header();
  if (psd_header_ == NULL) psd_header_ = new ::falcon_psd::PSDHeader;
  return psd_header_;
}
inline ::falcon_psd::PSDHeader* PSD::release_psd_header() {
  clear_has_psd_header();
  ::falcon_psd::PSDHeader* temp = psd_header_;
  psd_header_ = NULL;
  return temp;
}
inline void PSD::set_allocated_psd_header(::falcon_psd::PSDHeader* psd_header) {
  delete psd_header_;
  psd_header_ = psd_header;
  if (psd_header) {
    set_has_psd_header();
  } else {
    clear_has_psd_header();
  }
}

// repeated float fft_data = 6 [packed = true];
inline int PSD::fft_data_size() const {
  return fft_data_.size();
}
inline void PSD::clear_fft_data() {
  fft_data_.Clear();
}
inline float PSD::fft_data(int index) const {
  return fft_data_.Get(index);
}
inline void PSD::set_fft_data(int index, float value) {
  fft_data_.Set(index, value);
}
inline void PSD::add_fft_data(float value) {
  fft_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
PSD::fft_data() const {
  return fft_data_;
}
inline ::google::protobuf::RepeatedField< float >*
PSD::mutable_fft_data() {
  return &fft_data_;
}

// -------------------------------------------------------------------

// DensePSD

// optional string msgName = 1 [default = "DENSE_PSD"];
inline bool DensePSD::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DensePSD::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DensePSD::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DensePSD::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& DensePSD::msgname() const {
  return *msgname_;
}
inline void DensePSD::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void DensePSD::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void DensePSD::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DensePSD::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* DensePSD::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void DensePSD::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// required .falcon_psd.ClassificationHeader classification_header = 2;
inline bool DensePSD::has_classification_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DensePSD::set_has_classification_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DensePSD::clear_has_classification_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DensePSD::clear_classification_header() {
  if (classification_header_ != NULL) classification_header_->::falcon_psd::ClassificationHeader::Clear();
  clear_has_classification_header();
}
inline const ::falcon_psd::ClassificationHeader& DensePSD::classification_header() const {
  return classification_header_ != NULL ? *classification_header_ : *default_instance_->classification_header_;
}
inline ::falcon_psd::ClassificationHeader* DensePSD::mutable_classification_header() {
  set_has_classification_header();
  if (classification_header_ == NULL) classification_header_ = new ::falcon_psd::ClassificationHeader;
  return classification_header_;
}
inline ::falcon_psd::ClassificationHeader* DensePSD::release_classification_header() {
  clear_has_classification_header();
  ::falcon_psd::ClassificationHeader* temp = classification_header_;
  classification_header_ = NULL;
  return temp;
}
inline void DensePSD::set_allocated_classification_header(::falcon_psd::ClassificationHeader* classification_header) {
  delete classification_header_;
  classification_header_ = classification_header;
  if (classification_header) {
    set_has_classification_header();
  } else {
    clear_has_classification_header();
  }
}

// required double timestamp = 3;
inline bool DensePSD::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DensePSD::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DensePSD::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DensePSD::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double DensePSD::timestamp() const {
  return timestamp_;
}
inline void DensePSD::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required string uuid = 4;
inline bool DensePSD::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DensePSD::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DensePSD::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DensePSD::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& DensePSD::uuid() const {
  return *uuid_;
}
inline void DensePSD::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void DensePSD::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void DensePSD::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DensePSD::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* DensePSD::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DensePSD::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .falcon_psd.PSDHeader psd_header = 5;
inline bool DensePSD::has_psd_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DensePSD::set_has_psd_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DensePSD::clear_has_psd_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DensePSD::clear_psd_header() {
  if (psd_header_ != NULL) psd_header_->::falcon_psd::PSDHeader::Clear();
  clear_has_psd_header();
}
inline const ::falcon_psd::PSDHeader& DensePSD::psd_header() const {
  return psd_header_ != NULL ? *psd_header_ : *default_instance_->psd_header_;
}
inline ::falcon_psd::PSDHeader* DensePSD::mutable_psd_header() {
  set_has_psd_header();
  if (psd_header_ == NULL) psd_header_ = new ::falcon_psd::PSDHeader;
  return psd_header_;
}
inline ::falcon_psd::PSDHeader* DensePSD::release_psd_header() {
  clear_has_psd_header();
  ::falcon_psd::PSDHeader* temp = psd_header_;
  psd_header_ = NULL;
  return temp;
}
inline void DensePSD::set_allocated_psd_header(::falcon_psd::PSDHeader* psd_header) {
  delete psd_header_;
  psd_header_ = psd_header;
  if (psd_header) {
    set_has_psd_header();
  } else {
    clear_has_psd_header();
  }
}

// required float min = 6;
inline bool DensePSD::has_min() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DensePSD::set_has_min() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DensePSD::clear_has_min() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DensePSD::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline float DensePSD::min() const {
  return min_;
}
inline void DensePSD::set_min(float value) {
  set_has_min();
  min_ = value;
}

// required float step = 7;
inline bool DensePSD::has_step() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DensePSD::set_has_step() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DensePSD::clear_has_step() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DensePSD::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline float DensePSD::step() const {
  return step_;
}
inline void DensePSD::set_step(float value) {
  set_has_step();
  step_ = value;
}

// repeated float fft_data = 8;
inline int DensePSD::fft_data_size() const {
  return fft_data_.size();
}
inline void DensePSD::clear_fft_data() {
  fft_data_.Clear();
}
inline float DensePSD::fft_data(int index) const {
  return fft_data_.Get(index);
}
inline void DensePSD::set_fft_data(int index, float value) {
  fft_data_.Set(index, value);
}
inline void DensePSD::add_fft_data(float value) {
  fft_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DensePSD::fft_data() const {
  return fft_data_;
}
inline ::google::protobuf::RepeatedField< float >*
DensePSD::mutable_fft_data() {
  return &fft_data_;
}

// -------------------------------------------------------------------

// BitFrameHeader

// required string uuid = 1;
inline bool BitFrameHeader::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BitFrameHeader::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BitFrameHeader::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BitFrameHeader::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& BitFrameHeader::uuid() const {
  return *uuid_;
}
inline void BitFrameHeader::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void BitFrameHeader::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void BitFrameHeader::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BitFrameHeader::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* BitFrameHeader::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BitFrameHeader::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 num_points = 2;
inline bool BitFrameHeader::has_num_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BitFrameHeader::set_has_num_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BitFrameHeader::clear_has_num_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BitFrameHeader::clear_num_points() {
  num_points_ = 0;
  clear_has_num_points();
}
inline ::google::protobuf::int32 BitFrameHeader::num_points() const {
  return num_points_;
}
inline void BitFrameHeader::set_num_points(::google::protobuf::int32 value) {
  set_has_num_points();
  num_points_ = value;
}

// required double duration = 3;
inline bool BitFrameHeader::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BitFrameHeader::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BitFrameHeader::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BitFrameHeader::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline double BitFrameHeader::duration() const {
  return duration_;
}
inline void BitFrameHeader::set_duration(double value) {
  set_has_duration();
  duration_ = value;
}

// required int32 channel = 4;
inline bool BitFrameHeader::has_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BitFrameHeader::set_has_channel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BitFrameHeader::clear_has_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BitFrameHeader::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 BitFrameHeader::channel() const {
  return channel_;
}
inline void BitFrameHeader::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional double bit_max = 5;
inline bool BitFrameHeader::has_bit_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BitFrameHeader::set_has_bit_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BitFrameHeader::clear_has_bit_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BitFrameHeader::clear_bit_max() {
  bit_max_ = 0;
  clear_has_bit_max();
}
inline double BitFrameHeader::bit_max() const {
  return bit_max_;
}
inline void BitFrameHeader::set_bit_max(double value) {
  set_has_bit_max();
  bit_max_ = value;
}

// optional double bit_min = 6;
inline bool BitFrameHeader::has_bit_min() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BitFrameHeader::set_has_bit_min() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BitFrameHeader::clear_has_bit_min() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BitFrameHeader::clear_bit_min() {
  bit_min_ = 0;
  clear_has_bit_min();
}
inline double BitFrameHeader::bit_min() const {
  return bit_min_;
}
inline void BitFrameHeader::set_bit_min(double value) {
  set_has_bit_min();
  bit_min_ = value;
}

// optional string appName = 7;
inline bool BitFrameHeader::has_appname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BitFrameHeader::set_has_appname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BitFrameHeader::clear_has_appname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BitFrameHeader::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& BitFrameHeader::appname() const {
  return *appname_;
}
inline void BitFrameHeader::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void BitFrameHeader::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void BitFrameHeader::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BitFrameHeader::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* BitFrameHeader::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BitFrameHeader::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BitFrame

// optional string msgName = 1 [default = "BIT_FRAME"];
inline bool BitFrame::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BitFrame::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BitFrame::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BitFrame::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& BitFrame::msgname() const {
  return *msgname_;
}
inline void BitFrame::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void BitFrame::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void BitFrame::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BitFrame::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* BitFrame::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void BitFrame::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// required .falcon_psd.ClassificationHeader classification_header = 2;
inline bool BitFrame::has_classification_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BitFrame::set_has_classification_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BitFrame::clear_has_classification_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BitFrame::clear_classification_header() {
  if (classification_header_ != NULL) classification_header_->::falcon_psd::ClassificationHeader::Clear();
  clear_has_classification_header();
}
inline const ::falcon_psd::ClassificationHeader& BitFrame::classification_header() const {
  return classification_header_ != NULL ? *classification_header_ : *default_instance_->classification_header_;
}
inline ::falcon_psd::ClassificationHeader* BitFrame::mutable_classification_header() {
  set_has_classification_header();
  if (classification_header_ == NULL) classification_header_ = new ::falcon_psd::ClassificationHeader;
  return classification_header_;
}
inline ::falcon_psd::ClassificationHeader* BitFrame::release_classification_header() {
  clear_has_classification_header();
  ::falcon_psd::ClassificationHeader* temp = classification_header_;
  classification_header_ = NULL;
  return temp;
}
inline void BitFrame::set_allocated_classification_header(::falcon_psd::ClassificationHeader* classification_header) {
  delete classification_header_;
  classification_header_ = classification_header;
  if (classification_header) {
    set_has_classification_header();
  } else {
    clear_has_classification_header();
  }
}

// required double timestamp = 3;
inline bool BitFrame::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BitFrame::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BitFrame::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BitFrame::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double BitFrame::timestamp() const {
  return timestamp_;
}
inline void BitFrame::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required string uuid = 4;
inline bool BitFrame::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BitFrame::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BitFrame::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BitFrame::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& BitFrame::uuid() const {
  return *uuid_;
}
inline void BitFrame::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void BitFrame::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void BitFrame::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BitFrame::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* BitFrame::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BitFrame::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .falcon_psd.BitFrameHeader header = 5;
inline bool BitFrame::has_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BitFrame::set_has_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BitFrame::clear_has_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BitFrame::clear_header() {
  if (header_ != NULL) header_->::falcon_psd::BitFrameHeader::Clear();
  clear_has_header();
}
inline const ::falcon_psd::BitFrameHeader& BitFrame::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::falcon_psd::BitFrameHeader* BitFrame::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::falcon_psd::BitFrameHeader;
  return header_;
}
inline ::falcon_psd::BitFrameHeader* BitFrame::release_header() {
  clear_has_header();
  ::falcon_psd::BitFrameHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void BitFrame::set_allocated_header(::falcon_psd::BitFrameHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// repeated int32 bit_data = 6;
inline int BitFrame::bit_data_size() const {
  return bit_data_.size();
}
inline void BitFrame::clear_bit_data() {
  bit_data_.Clear();
}
inline ::google::protobuf::int32 BitFrame::bit_data(int index) const {
  return bit_data_.Get(index);
}
inline void BitFrame::set_bit_data(int index, ::google::protobuf::int32 value) {
  bit_data_.Set(index, value);
}
inline void BitFrame::add_bit_data(::google::protobuf::int32 value) {
  bit_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BitFrame::bit_data() const {
  return bit_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BitFrame::mutable_bit_data() {
  return &bit_data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace falcon_psd

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::falcon_psd::ClassificationHeader_ClassLevel>() {
  return ::falcon_psd::ClassificationHeader_ClassLevel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::falcon_psd::ClassificationHeader_Compartment>() {
  return ::falcon_psd::ClassificationHeader_Compartment_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::falcon_psd::ClassificationHeader_Releasability>() {
  return ::falcon_psd::ClassificationHeader_Releasability_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FalconPSDMessages_2eproto__INCLUDED
