// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SITPostMessages.proto

#ifndef PROTOBUF_SITPostMessages_2eproto__INCLUDED
#define PROTOBUF_SITPostMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sit_post_msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SITPostMessages_2eproto();
void protobuf_AssignDesc_SITPostMessages_2eproto();
void protobuf_ShutdownFile_SITPostMessages_2eproto();

class detectFhopRequest;
class add2SoilistRequest;
class generateJamFileRequest;

// ===================================================================

class detectFhopRequest : public ::google::protobuf::Message {
 public:
  detectFhopRequest();
  virtual ~detectFhopRequest();

  detectFhopRequest(const detectFhopRequest& from);

  inline detectFhopRequest& operator=(const detectFhopRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const detectFhopRequest& default_instance();

  void Swap(detectFhopRequest* other);

  // implements Message ----------------------------------------------

  detectFhopRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const detectFhopRequest& from);
  void MergeFrom(const detectFhopRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "detectFhopRequest"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // required string requestID = 2;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestIDFieldNumber = 2;
  inline const ::std::string& requestid() const;
  inline void set_requestid(const ::std::string& value);
  inline void set_requestid(const char* value);
  inline void set_requestid(const char* value, size_t size);
  inline ::std::string* mutable_requestid();
  inline ::std::string* release_requestid();
  inline void set_allocated_requestid(::std::string* requestid);

  // required string iqSnap = 3;
  inline bool has_iqsnap() const;
  inline void clear_iqsnap();
  static const int kIqSnapFieldNumber = 3;
  inline const ::std::string& iqsnap() const;
  inline void set_iqsnap(const ::std::string& value);
  inline void set_iqsnap(const char* value);
  inline void set_iqsnap(const char* value, size_t size);
  inline ::std::string* mutable_iqsnap();
  inline ::std::string* release_iqsnap();
  inline void set_allocated_iqsnap(::std::string* iqsnap);

  // required double confidenceThreshold = 4;
  inline bool has_confidencethreshold() const;
  inline void clear_confidencethreshold();
  static const int kConfidenceThresholdFieldNumber = 4;
  inline double confidencethreshold() const;
  inline void set_confidencethreshold(double value);

  // @@protoc_insertion_point(class_scope:sit_post_msg.detectFhopRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_iqsnap();
  inline void clear_has_iqsnap();
  inline void set_has_confidencethreshold();
  inline void clear_has_confidencethreshold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* requestid_;
  ::std::string* iqsnap_;
  double confidencethreshold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SITPostMessages_2eproto();
  friend void protobuf_AssignDesc_SITPostMessages_2eproto();
  friend void protobuf_ShutdownFile_SITPostMessages_2eproto();

  void InitAsDefaultInstance();
  static detectFhopRequest* default_instance_;
};
// -------------------------------------------------------------------

class add2SoilistRequest : public ::google::protobuf::Message {
 public:
  add2SoilistRequest();
  virtual ~add2SoilistRequest();

  add2SoilistRequest(const add2SoilistRequest& from);

  inline add2SoilistRequest& operator=(const add2SoilistRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const add2SoilistRequest& default_instance();

  void Swap(add2SoilistRequest* other);

  // implements Message ----------------------------------------------

  add2SoilistRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const add2SoilistRequest& from);
  void MergeFrom(const add2SoilistRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "add2SoilistRequest"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // required string requestID = 2;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestIDFieldNumber = 2;
  inline const ::std::string& requestid() const;
  inline void set_requestid(const ::std::string& value);
  inline void set_requestid(const char* value);
  inline void set_requestid(const char* value, size_t size);
  inline ::std::string* mutable_requestid();
  inline ::std::string* release_requestid();
  inline void set_allocated_requestid(::std::string* requestid);

  // required int32 clusterID = 3;
  inline bool has_clusterid() const;
  inline void clear_clusterid();
  static const int kClusterIDFieldNumber = 3;
  inline ::google::protobuf::int32 clusterid() const;
  inline void set_clusterid(::google::protobuf::int32 value);

  // required string targetIdentifier = 4;
  inline bool has_targetidentifier() const;
  inline void clear_targetidentifier();
  static const int kTargetIdentifierFieldNumber = 4;
  inline const ::std::string& targetidentifier() const;
  inline void set_targetidentifier(const ::std::string& value);
  inline void set_targetidentifier(const char* value);
  inline void set_targetidentifier(const char* value, size_t size);
  inline ::std::string* mutable_targetidentifier();
  inline ::std::string* release_targetidentifier();
  inline void set_allocated_targetidentifier(::std::string* targetidentifier);

  // @@protoc_insertion_point(class_scope:sit_post_msg.add2SoilistRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_clusterid();
  inline void clear_has_clusterid();
  inline void set_has_targetidentifier();
  inline void clear_has_targetidentifier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* requestid_;
  ::std::string* targetidentifier_;
  ::google::protobuf::int32 clusterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SITPostMessages_2eproto();
  friend void protobuf_AssignDesc_SITPostMessages_2eproto();
  friend void protobuf_ShutdownFile_SITPostMessages_2eproto();

  void InitAsDefaultInstance();
  static add2SoilistRequest* default_instance_;
};
// -------------------------------------------------------------------

class generateJamFileRequest : public ::google::protobuf::Message {
 public:
  generateJamFileRequest();
  virtual ~generateJamFileRequest();

  generateJamFileRequest(const generateJamFileRequest& from);

  inline generateJamFileRequest& operator=(const generateJamFileRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const generateJamFileRequest& default_instance();

  void Swap(generateJamFileRequest* other);

  // implements Message ----------------------------------------------

  generateJamFileRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const generateJamFileRequest& from);
  void MergeFrom(const generateJamFileRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "generateJamFileRequest"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // required string requestID = 2;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestIDFieldNumber = 2;
  inline const ::std::string& requestid() const;
  inline void set_requestid(const ::std::string& value);
  inline void set_requestid(const char* value);
  inline void set_requestid(const char* value, size_t size);
  inline ::std::string* mutable_requestid();
  inline ::std::string* release_requestid();
  inline void set_allocated_requestid(::std::string* requestid);

  // required int32 clusterID = 3;
  inline bool has_clusterid() const;
  inline void clear_clusterid();
  static const int kClusterIDFieldNumber = 3;
  inline ::google::protobuf::int32 clusterid() const;
  inline void set_clusterid(::google::protobuf::int32 value);

  // required string targetIdentifier = 4;
  inline bool has_targetidentifier() const;
  inline void clear_targetidentifier();
  static const int kTargetIdentifierFieldNumber = 4;
  inline const ::std::string& targetidentifier() const;
  inline void set_targetidentifier(const ::std::string& value);
  inline void set_targetidentifier(const char* value);
  inline void set_targetidentifier(const char* value, size_t size);
  inline ::std::string* mutable_targetidentifier();
  inline ::std::string* release_targetidentifier();
  inline void set_allocated_targetidentifier(::std::string* targetidentifier);

  // @@protoc_insertion_point(class_scope:sit_post_msg.generateJamFileRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_clusterid();
  inline void clear_has_clusterid();
  inline void set_has_targetidentifier();
  inline void clear_has_targetidentifier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* requestid_;
  ::std::string* targetidentifier_;
  ::google::protobuf::int32 clusterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SITPostMessages_2eproto();
  friend void protobuf_AssignDesc_SITPostMessages_2eproto();
  friend void protobuf_ShutdownFile_SITPostMessages_2eproto();

  void InitAsDefaultInstance();
  static generateJamFileRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// detectFhopRequest

// optional string msgName = 1 [default = "detectFhopRequest"];
inline bool detectFhopRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void detectFhopRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void detectFhopRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void detectFhopRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& detectFhopRequest::msgname() const {
  return *msgname_;
}
inline void detectFhopRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void detectFhopRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void detectFhopRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* detectFhopRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* detectFhopRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void detectFhopRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// required string requestID = 2;
inline bool detectFhopRequest::has_requestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void detectFhopRequest::set_has_requestid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void detectFhopRequest::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void detectFhopRequest::clear_requestid() {
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    requestid_->clear();
  }
  clear_has_requestid();
}
inline const ::std::string& detectFhopRequest::requestid() const {
  return *requestid_;
}
inline void detectFhopRequest::set_requestid(const ::std::string& value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void detectFhopRequest::set_requestid(const char* value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void detectFhopRequest::set_requestid(const char* value, size_t size) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* detectFhopRequest::mutable_requestid() {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  return requestid_;
}
inline ::std::string* detectFhopRequest::release_requestid() {
  clear_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = requestid_;
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void detectFhopRequest::set_allocated_requestid(::std::string* requestid) {
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    delete requestid_;
  }
  if (requestid) {
    set_has_requestid();
    requestid_ = requestid;
  } else {
    clear_has_requestid();
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string iqSnap = 3;
inline bool detectFhopRequest::has_iqsnap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void detectFhopRequest::set_has_iqsnap() {
  _has_bits_[0] |= 0x00000004u;
}
inline void detectFhopRequest::clear_has_iqsnap() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void detectFhopRequest::clear_iqsnap() {
  if (iqsnap_ != &::google::protobuf::internal::kEmptyString) {
    iqsnap_->clear();
  }
  clear_has_iqsnap();
}
inline const ::std::string& detectFhopRequest::iqsnap() const {
  return *iqsnap_;
}
inline void detectFhopRequest::set_iqsnap(const ::std::string& value) {
  set_has_iqsnap();
  if (iqsnap_ == &::google::protobuf::internal::kEmptyString) {
    iqsnap_ = new ::std::string;
  }
  iqsnap_->assign(value);
}
inline void detectFhopRequest::set_iqsnap(const char* value) {
  set_has_iqsnap();
  if (iqsnap_ == &::google::protobuf::internal::kEmptyString) {
    iqsnap_ = new ::std::string;
  }
  iqsnap_->assign(value);
}
inline void detectFhopRequest::set_iqsnap(const char* value, size_t size) {
  set_has_iqsnap();
  if (iqsnap_ == &::google::protobuf::internal::kEmptyString) {
    iqsnap_ = new ::std::string;
  }
  iqsnap_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* detectFhopRequest::mutable_iqsnap() {
  set_has_iqsnap();
  if (iqsnap_ == &::google::protobuf::internal::kEmptyString) {
    iqsnap_ = new ::std::string;
  }
  return iqsnap_;
}
inline ::std::string* detectFhopRequest::release_iqsnap() {
  clear_has_iqsnap();
  if (iqsnap_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = iqsnap_;
    iqsnap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void detectFhopRequest::set_allocated_iqsnap(::std::string* iqsnap) {
  if (iqsnap_ != &::google::protobuf::internal::kEmptyString) {
    delete iqsnap_;
  }
  if (iqsnap) {
    set_has_iqsnap();
    iqsnap_ = iqsnap;
  } else {
    clear_has_iqsnap();
    iqsnap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double confidenceThreshold = 4;
inline bool detectFhopRequest::has_confidencethreshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void detectFhopRequest::set_has_confidencethreshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void detectFhopRequest::clear_has_confidencethreshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void detectFhopRequest::clear_confidencethreshold() {
  confidencethreshold_ = 0;
  clear_has_confidencethreshold();
}
inline double detectFhopRequest::confidencethreshold() const {
  return confidencethreshold_;
}
inline void detectFhopRequest::set_confidencethreshold(double value) {
  set_has_confidencethreshold();
  confidencethreshold_ = value;
}

// -------------------------------------------------------------------

// add2SoilistRequest

// optional string msgName = 1 [default = "add2SoilistRequest"];
inline bool add2SoilistRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void add2SoilistRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void add2SoilistRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void add2SoilistRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& add2SoilistRequest::msgname() const {
  return *msgname_;
}
inline void add2SoilistRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void add2SoilistRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void add2SoilistRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* add2SoilistRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* add2SoilistRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void add2SoilistRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// required string requestID = 2;
inline bool add2SoilistRequest::has_requestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void add2SoilistRequest::set_has_requestid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void add2SoilistRequest::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void add2SoilistRequest::clear_requestid() {
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    requestid_->clear();
  }
  clear_has_requestid();
}
inline const ::std::string& add2SoilistRequest::requestid() const {
  return *requestid_;
}
inline void add2SoilistRequest::set_requestid(const ::std::string& value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void add2SoilistRequest::set_requestid(const char* value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void add2SoilistRequest::set_requestid(const char* value, size_t size) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* add2SoilistRequest::mutable_requestid() {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  return requestid_;
}
inline ::std::string* add2SoilistRequest::release_requestid() {
  clear_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = requestid_;
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void add2SoilistRequest::set_allocated_requestid(::std::string* requestid) {
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    delete requestid_;
  }
  if (requestid) {
    set_has_requestid();
    requestid_ = requestid;
  } else {
    clear_has_requestid();
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 clusterID = 3;
inline bool add2SoilistRequest::has_clusterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void add2SoilistRequest::set_has_clusterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void add2SoilistRequest::clear_has_clusterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void add2SoilistRequest::clear_clusterid() {
  clusterid_ = 0;
  clear_has_clusterid();
}
inline ::google::protobuf::int32 add2SoilistRequest::clusterid() const {
  return clusterid_;
}
inline void add2SoilistRequest::set_clusterid(::google::protobuf::int32 value) {
  set_has_clusterid();
  clusterid_ = value;
}

// required string targetIdentifier = 4;
inline bool add2SoilistRequest::has_targetidentifier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void add2SoilistRequest::set_has_targetidentifier() {
  _has_bits_[0] |= 0x00000008u;
}
inline void add2SoilistRequest::clear_has_targetidentifier() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void add2SoilistRequest::clear_targetidentifier() {
  if (targetidentifier_ != &::google::protobuf::internal::kEmptyString) {
    targetidentifier_->clear();
  }
  clear_has_targetidentifier();
}
inline const ::std::string& add2SoilistRequest::targetidentifier() const {
  return *targetidentifier_;
}
inline void add2SoilistRequest::set_targetidentifier(const ::std::string& value) {
  set_has_targetidentifier();
  if (targetidentifier_ == &::google::protobuf::internal::kEmptyString) {
    targetidentifier_ = new ::std::string;
  }
  targetidentifier_->assign(value);
}
inline void add2SoilistRequest::set_targetidentifier(const char* value) {
  set_has_targetidentifier();
  if (targetidentifier_ == &::google::protobuf::internal::kEmptyString) {
    targetidentifier_ = new ::std::string;
  }
  targetidentifier_->assign(value);
}
inline void add2SoilistRequest::set_targetidentifier(const char* value, size_t size) {
  set_has_targetidentifier();
  if (targetidentifier_ == &::google::protobuf::internal::kEmptyString) {
    targetidentifier_ = new ::std::string;
  }
  targetidentifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* add2SoilistRequest::mutable_targetidentifier() {
  set_has_targetidentifier();
  if (targetidentifier_ == &::google::protobuf::internal::kEmptyString) {
    targetidentifier_ = new ::std::string;
  }
  return targetidentifier_;
}
inline ::std::string* add2SoilistRequest::release_targetidentifier() {
  clear_has_targetidentifier();
  if (targetidentifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = targetidentifier_;
    targetidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void add2SoilistRequest::set_allocated_targetidentifier(::std::string* targetidentifier) {
  if (targetidentifier_ != &::google::protobuf::internal::kEmptyString) {
    delete targetidentifier_;
  }
  if (targetidentifier) {
    set_has_targetidentifier();
    targetidentifier_ = targetidentifier;
  } else {
    clear_has_targetidentifier();
    targetidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// generateJamFileRequest

// optional string msgName = 1 [default = "generateJamFileRequest"];
inline bool generateJamFileRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void generateJamFileRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void generateJamFileRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void generateJamFileRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& generateJamFileRequest::msgname() const {
  return *msgname_;
}
inline void generateJamFileRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void generateJamFileRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void generateJamFileRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* generateJamFileRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* generateJamFileRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void generateJamFileRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// required string requestID = 2;
inline bool generateJamFileRequest::has_requestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void generateJamFileRequest::set_has_requestid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void generateJamFileRequest::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void generateJamFileRequest::clear_requestid() {
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    requestid_->clear();
  }
  clear_has_requestid();
}
inline const ::std::string& generateJamFileRequest::requestid() const {
  return *requestid_;
}
inline void generateJamFileRequest::set_requestid(const ::std::string& value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void generateJamFileRequest::set_requestid(const char* value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void generateJamFileRequest::set_requestid(const char* value, size_t size) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* generateJamFileRequest::mutable_requestid() {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  return requestid_;
}
inline ::std::string* generateJamFileRequest::release_requestid() {
  clear_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = requestid_;
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void generateJamFileRequest::set_allocated_requestid(::std::string* requestid) {
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    delete requestid_;
  }
  if (requestid) {
    set_has_requestid();
    requestid_ = requestid;
  } else {
    clear_has_requestid();
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 clusterID = 3;
inline bool generateJamFileRequest::has_clusterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void generateJamFileRequest::set_has_clusterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void generateJamFileRequest::clear_has_clusterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void generateJamFileRequest::clear_clusterid() {
  clusterid_ = 0;
  clear_has_clusterid();
}
inline ::google::protobuf::int32 generateJamFileRequest::clusterid() const {
  return clusterid_;
}
inline void generateJamFileRequest::set_clusterid(::google::protobuf::int32 value) {
  set_has_clusterid();
  clusterid_ = value;
}

// required string targetIdentifier = 4;
inline bool generateJamFileRequest::has_targetidentifier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void generateJamFileRequest::set_has_targetidentifier() {
  _has_bits_[0] |= 0x00000008u;
}
inline void generateJamFileRequest::clear_has_targetidentifier() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void generateJamFileRequest::clear_targetidentifier() {
  if (targetidentifier_ != &::google::protobuf::internal::kEmptyString) {
    targetidentifier_->clear();
  }
  clear_has_targetidentifier();
}
inline const ::std::string& generateJamFileRequest::targetidentifier() const {
  return *targetidentifier_;
}
inline void generateJamFileRequest::set_targetidentifier(const ::std::string& value) {
  set_has_targetidentifier();
  if (targetidentifier_ == &::google::protobuf::internal::kEmptyString) {
    targetidentifier_ = new ::std::string;
  }
  targetidentifier_->assign(value);
}
inline void generateJamFileRequest::set_targetidentifier(const char* value) {
  set_has_targetidentifier();
  if (targetidentifier_ == &::google::protobuf::internal::kEmptyString) {
    targetidentifier_ = new ::std::string;
  }
  targetidentifier_->assign(value);
}
inline void generateJamFileRequest::set_targetidentifier(const char* value, size_t size) {
  set_has_targetidentifier();
  if (targetidentifier_ == &::google::protobuf::internal::kEmptyString) {
    targetidentifier_ = new ::std::string;
  }
  targetidentifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* generateJamFileRequest::mutable_targetidentifier() {
  set_has_targetidentifier();
  if (targetidentifier_ == &::google::protobuf::internal::kEmptyString) {
    targetidentifier_ = new ::std::string;
  }
  return targetidentifier_;
}
inline ::std::string* generateJamFileRequest::release_targetidentifier() {
  clear_has_targetidentifier();
  if (targetidentifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = targetidentifier_;
    targetidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void generateJamFileRequest::set_allocated_targetidentifier(::std::string* targetidentifier) {
  if (targetidentifier_ != &::google::protobuf::internal::kEmptyString) {
    delete targetidentifier_;
  }
  if (targetidentifier) {
    set_has_targetidentifier();
    targetidentifier_ = targetidentifier;
  } else {
    clear_has_targetidentifier();
    targetidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sit_post_msg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SITPostMessages_2eproto__INCLUDED
