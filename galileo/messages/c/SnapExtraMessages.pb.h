// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SnapExtraMessages.proto

#ifndef PROTOBUF_SnapExtraMessages_2eproto__INCLUDED
#define PROTOBUF_SnapExtraMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SnapExtraMessages_2eproto();
void protobuf_AssignDesc_SnapExtraMessages_2eproto();
void protobuf_ShutdownFile_SnapExtraMessages_2eproto();

class SnapExtraRequest;

// ===================================================================

class SnapExtraRequest : public ::google::protobuf::Message {
 public:
  SnapExtraRequest();
  virtual ~SnapExtraRequest();

  SnapExtraRequest(const SnapExtraRequest& from);

  inline SnapExtraRequest& operator=(const SnapExtraRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapExtraRequest& default_instance();

  void Swap(SnapExtraRequest* other);

  // implements Message ----------------------------------------------

  SnapExtraRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapExtraRequest& from);
  void MergeFrom(const SnapExtraRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "SNAP_EXTRA_REQUEST"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional string snapName = 2;
  inline bool has_snapname() const;
  inline void clear_snapname();
  static const int kSnapNameFieldNumber = 2;
  inline const ::std::string& snapname() const;
  inline void set_snapname(const ::std::string& value);
  inline void set_snapname(const char* value);
  inline void set_snapname(const char* value, size_t size);
  inline ::std::string* mutable_snapname();
  inline ::std::string* release_snapname();
  inline void set_allocated_snapname(::std::string* snapname);

  // @@protoc_insertion_point(class_scope:SnapExtraRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_snapname();
  inline void clear_has_snapname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* snapname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SnapExtraMessages_2eproto();
  friend void protobuf_AssignDesc_SnapExtraMessages_2eproto();
  friend void protobuf_ShutdownFile_SnapExtraMessages_2eproto();

  void InitAsDefaultInstance();
  static SnapExtraRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// SnapExtraRequest

// optional string msgName = 1 [default = "SNAP_EXTRA_REQUEST"];
inline bool SnapExtraRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnapExtraRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnapExtraRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnapExtraRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& SnapExtraRequest::msgname() const {
  return *msgname_;
}
inline void SnapExtraRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SnapExtraRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SnapExtraRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SnapExtraRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* SnapExtraRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void SnapExtraRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional string snapName = 2;
inline bool SnapExtraRequest::has_snapname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnapExtraRequest::set_has_snapname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SnapExtraRequest::clear_has_snapname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SnapExtraRequest::clear_snapname() {
  if (snapname_ != &::google::protobuf::internal::kEmptyString) {
    snapname_->clear();
  }
  clear_has_snapname();
}
inline const ::std::string& SnapExtraRequest::snapname() const {
  return *snapname_;
}
inline void SnapExtraRequest::set_snapname(const ::std::string& value) {
  set_has_snapname();
  if (snapname_ == &::google::protobuf::internal::kEmptyString) {
    snapname_ = new ::std::string;
  }
  snapname_->assign(value);
}
inline void SnapExtraRequest::set_snapname(const char* value) {
  set_has_snapname();
  if (snapname_ == &::google::protobuf::internal::kEmptyString) {
    snapname_ = new ::std::string;
  }
  snapname_->assign(value);
}
inline void SnapExtraRequest::set_snapname(const char* value, size_t size) {
  set_has_snapname();
  if (snapname_ == &::google::protobuf::internal::kEmptyString) {
    snapname_ = new ::std::string;
  }
  snapname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SnapExtraRequest::mutable_snapname() {
  set_has_snapname();
  if (snapname_ == &::google::protobuf::internal::kEmptyString) {
    snapname_ = new ::std::string;
  }
  return snapname_;
}
inline ::std::string* SnapExtraRequest::release_snapname() {
  clear_has_snapname();
  if (snapname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapname_;
    snapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SnapExtraRequest::set_allocated_snapname(::std::string* snapname) {
  if (snapname_ != &::google::protobuf::internal::kEmptyString) {
    delete snapname_;
  }
  if (snapname) {
    set_has_snapname();
    snapname_ = snapname;
  } else {
    clear_has_snapname();
    snapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SnapExtraMessages_2eproto__INCLUDED
