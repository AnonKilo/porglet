// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VideoCompressionMessages.proto

#ifndef PROTOBUF_VideoCompressionMessages_2eproto__INCLUDED
#define PROTOBUF_VideoCompressionMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace video_compression_msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_VideoCompressionMessages_2eproto();
void protobuf_AssignDesc_VideoCompressionMessages_2eproto();
void protobuf_ShutdownFile_VideoCompressionMessages_2eproto();

class ImageAvailable;
class ImageRequest;

enum ImageAvailable_Status {
  ImageAvailable_Status_AVAILABLE = -1,
  ImageAvailable_Status_UNAVAILABLE = 0,
  ImageAvailable_Status_PENDING = 1
};
bool ImageAvailable_Status_IsValid(int value);
const ImageAvailable_Status ImageAvailable_Status_Status_MIN = ImageAvailable_Status_AVAILABLE;
const ImageAvailable_Status ImageAvailable_Status_Status_MAX = ImageAvailable_Status_PENDING;
const int ImageAvailable_Status_Status_ARRAYSIZE = ImageAvailable_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageAvailable_Status_descriptor();
inline const ::std::string& ImageAvailable_Status_Name(ImageAvailable_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageAvailable_Status_descriptor(), value);
}
inline bool ImageAvailable_Status_Parse(
    const ::std::string& name, ImageAvailable_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageAvailable_Status>(
    ImageAvailable_Status_descriptor(), name, value);
}
// ===================================================================

class ImageAvailable : public ::google::protobuf::Message {
 public:
  ImageAvailable();
  virtual ~ImageAvailable();

  ImageAvailable(const ImageAvailable& from);

  inline ImageAvailable& operator=(const ImageAvailable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageAvailable& default_instance();

  void Swap(ImageAvailable* other);

  // implements Message ----------------------------------------------

  ImageAvailable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageAvailable& from);
  void MergeFrom(const ImageAvailable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ImageAvailable_Status Status;
  static const Status AVAILABLE = ImageAvailable_Status_AVAILABLE;
  static const Status UNAVAILABLE = ImageAvailable_Status_UNAVAILABLE;
  static const Status PENDING = ImageAvailable_Status_PENDING;
  static inline bool Status_IsValid(int value) {
    return ImageAvailable_Status_IsValid(value);
  }
  static const Status Status_MIN =
    ImageAvailable_Status_Status_MIN;
  static const Status Status_MAX =
    ImageAvailable_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    ImageAvailable_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return ImageAvailable_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return ImageAvailable_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return ImageAvailable_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "IMAGEAVAILABLE"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 imageWidth = 2;
  inline bool has_imagewidth() const;
  inline void clear_imagewidth();
  static const int kImageWidthFieldNumber = 2;
  inline ::google::protobuf::int32 imagewidth() const;
  inline void set_imagewidth(::google::protobuf::int32 value);

  // optional int32 imageHeight = 3;
  inline bool has_imageheight() const;
  inline void clear_imageheight();
  static const int kImageHeightFieldNumber = 3;
  inline ::google::protobuf::int32 imageheight() const;
  inline void set_imageheight(::google::protobuf::int32 value);

  // optional int32 videoPort = 4;
  inline bool has_videoport() const;
  inline void clear_videoport();
  static const int kVideoPortFieldNumber = 4;
  inline ::google::protobuf::int32 videoport() const;
  inline void set_videoport(::google::protobuf::int32 value);

  // optional int32 framerate = 5;
  inline bool has_framerate() const;
  inline void clear_framerate();
  static const int kFramerateFieldNumber = 5;
  inline ::google::protobuf::int32 framerate() const;
  inline void set_framerate(::google::protobuf::int32 value);

  // optional bytes byteArray = 6;
  inline bool has_bytearray() const;
  inline void clear_bytearray();
  static const int kByteArrayFieldNumber = 6;
  inline const ::std::string& bytearray() const;
  inline void set_bytearray(const ::std::string& value);
  inline void set_bytearray(const char* value);
  inline void set_bytearray(const void* value, size_t size);
  inline ::std::string* mutable_bytearray();
  inline ::std::string* release_bytearray();
  inline void set_allocated_bytearray(::std::string* bytearray);

  // optional .video_compression_msg.ImageAvailable.Status status = 7;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  inline ::video_compression_msg::ImageAvailable_Status status() const;
  inline void set_status(::video_compression_msg::ImageAvailable_Status value);

  // optional int32 msgID = 8;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 8;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);

  // optional string eventID = 10;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIDFieldNumber = 10;
  inline const ::std::string& eventid() const;
  inline void set_eventid(const ::std::string& value);
  inline void set_eventid(const char* value);
  inline void set_eventid(const char* value, size_t size);
  inline ::std::string* mutable_eventid();
  inline ::std::string* release_eventid();
  inline void set_allocated_eventid(::std::string* eventid);

  // optional string globalID = 11;
  inline bool has_globalid() const;
  inline void clear_globalid();
  static const int kGlobalIDFieldNumber = 11;
  inline const ::std::string& globalid() const;
  inline void set_globalid(const ::std::string& value);
  inline void set_globalid(const char* value);
  inline void set_globalid(const char* value, size_t size);
  inline ::std::string* mutable_globalid();
  inline ::std::string* release_globalid();
  inline void set_allocated_globalid(::std::string* globalid);

  // optional string eltex = 12;
  inline bool has_eltex() const;
  inline void clear_eltex();
  static const int kEltexFieldNumber = 12;
  inline const ::std::string& eltex() const;
  inline void set_eltex(const ::std::string& value);
  inline void set_eltex(const char* value);
  inline void set_eltex(const char* value, size_t size);
  inline ::std::string* mutable_eltex();
  inline ::std::string* release_eltex();
  inline void set_allocated_eltex(::std::string* eltex);

  // optional string soiNum = 13;
  inline bool has_soinum() const;
  inline void clear_soinum();
  static const int kSoiNumFieldNumber = 13;
  inline const ::std::string& soinum() const;
  inline void set_soinum(const ::std::string& value);
  inline void set_soinum(const char* value);
  inline void set_soinum(const char* value, size_t size);
  inline ::std::string* mutable_soinum();
  inline ::std::string* release_soinum();
  inline void set_allocated_soinum(::std::string* soinum);

  // @@protoc_insertion_point(class_scope:video_compression_msg.ImageAvailable)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_imagewidth();
  inline void clear_has_imagewidth();
  inline void set_has_imageheight();
  inline void clear_has_imageheight();
  inline void set_has_videoport();
  inline void clear_has_videoport();
  inline void set_has_framerate();
  inline void clear_has_framerate();
  inline void set_has_bytearray();
  inline void clear_has_bytearray();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_eventid();
  inline void clear_has_eventid();
  inline void set_has_globalid();
  inline void clear_has_globalid();
  inline void set_has_eltex();
  inline void clear_has_eltex();
  inline void set_has_soinum();
  inline void clear_has_soinum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int32 imagewidth_;
  ::google::protobuf::int32 imageheight_;
  ::google::protobuf::int32 videoport_;
  ::google::protobuf::int32 framerate_;
  ::std::string* bytearray_;
  int status_;
  ::google::protobuf::int32 msgid_;
  ::std::string* eventid_;
  ::std::string* globalid_;
  ::std::string* eltex_;
  ::std::string* soinum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_VideoCompressionMessages_2eproto();
  friend void protobuf_AssignDesc_VideoCompressionMessages_2eproto();
  friend void protobuf_ShutdownFile_VideoCompressionMessages_2eproto();

  void InitAsDefaultInstance();
  static ImageAvailable* default_instance_;
};
// -------------------------------------------------------------------

class ImageRequest : public ::google::protobuf::Message {
 public:
  ImageRequest();
  virtual ~ImageRequest();

  ImageRequest(const ImageRequest& from);

  inline ImageRequest& operator=(const ImageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageRequest& default_instance();

  void Swap(ImageRequest* other);

  // implements Message ----------------------------------------------

  ImageRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageRequest& from);
  void MergeFrom(const ImageRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "IMAGEREQUEST"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 msgID = 2;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 2;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);

  // optional string eventID = 3;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIDFieldNumber = 3;
  inline const ::std::string& eventid() const;
  inline void set_eventid(const ::std::string& value);
  inline void set_eventid(const char* value);
  inline void set_eventid(const char* value, size_t size);
  inline ::std::string* mutable_eventid();
  inline ::std::string* release_eventid();
  inline void set_allocated_eventid(::std::string* eventid);

  // @@protoc_insertion_point(class_scope:video_compression_msg.ImageRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_eventid();
  inline void clear_has_eventid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* eventid_;
  ::google::protobuf::int32 msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_VideoCompressionMessages_2eproto();
  friend void protobuf_AssignDesc_VideoCompressionMessages_2eproto();
  friend void protobuf_ShutdownFile_VideoCompressionMessages_2eproto();

  void InitAsDefaultInstance();
  static ImageRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// ImageAvailable

// optional string msgName = 1 [default = "IMAGEAVAILABLE"];
inline bool ImageAvailable::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageAvailable::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageAvailable::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageAvailable::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& ImageAvailable::msgname() const {
  return *msgname_;
}
inline void ImageAvailable::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ImageAvailable::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ImageAvailable::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageAvailable::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* ImageAvailable::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void ImageAvailable::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 imageWidth = 2;
inline bool ImageAvailable::has_imagewidth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageAvailable::set_has_imagewidth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageAvailable::clear_has_imagewidth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageAvailable::clear_imagewidth() {
  imagewidth_ = 0;
  clear_has_imagewidth();
}
inline ::google::protobuf::int32 ImageAvailable::imagewidth() const {
  return imagewidth_;
}
inline void ImageAvailable::set_imagewidth(::google::protobuf::int32 value) {
  set_has_imagewidth();
  imagewidth_ = value;
}

// optional int32 imageHeight = 3;
inline bool ImageAvailable::has_imageheight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageAvailable::set_has_imageheight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageAvailable::clear_has_imageheight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageAvailable::clear_imageheight() {
  imageheight_ = 0;
  clear_has_imageheight();
}
inline ::google::protobuf::int32 ImageAvailable::imageheight() const {
  return imageheight_;
}
inline void ImageAvailable::set_imageheight(::google::protobuf::int32 value) {
  set_has_imageheight();
  imageheight_ = value;
}

// optional int32 videoPort = 4;
inline bool ImageAvailable::has_videoport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageAvailable::set_has_videoport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageAvailable::clear_has_videoport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageAvailable::clear_videoport() {
  videoport_ = 0;
  clear_has_videoport();
}
inline ::google::protobuf::int32 ImageAvailable::videoport() const {
  return videoport_;
}
inline void ImageAvailable::set_videoport(::google::protobuf::int32 value) {
  set_has_videoport();
  videoport_ = value;
}

// optional int32 framerate = 5;
inline bool ImageAvailable::has_framerate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageAvailable::set_has_framerate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageAvailable::clear_has_framerate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageAvailable::clear_framerate() {
  framerate_ = 0;
  clear_has_framerate();
}
inline ::google::protobuf::int32 ImageAvailable::framerate() const {
  return framerate_;
}
inline void ImageAvailable::set_framerate(::google::protobuf::int32 value) {
  set_has_framerate();
  framerate_ = value;
}

// optional bytes byteArray = 6;
inline bool ImageAvailable::has_bytearray() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageAvailable::set_has_bytearray() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageAvailable::clear_has_bytearray() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageAvailable::clear_bytearray() {
  if (bytearray_ != &::google::protobuf::internal::kEmptyString) {
    bytearray_->clear();
  }
  clear_has_bytearray();
}
inline const ::std::string& ImageAvailable::bytearray() const {
  return *bytearray_;
}
inline void ImageAvailable::set_bytearray(const ::std::string& value) {
  set_has_bytearray();
  if (bytearray_ == &::google::protobuf::internal::kEmptyString) {
    bytearray_ = new ::std::string;
  }
  bytearray_->assign(value);
}
inline void ImageAvailable::set_bytearray(const char* value) {
  set_has_bytearray();
  if (bytearray_ == &::google::protobuf::internal::kEmptyString) {
    bytearray_ = new ::std::string;
  }
  bytearray_->assign(value);
}
inline void ImageAvailable::set_bytearray(const void* value, size_t size) {
  set_has_bytearray();
  if (bytearray_ == &::google::protobuf::internal::kEmptyString) {
    bytearray_ = new ::std::string;
  }
  bytearray_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageAvailable::mutable_bytearray() {
  set_has_bytearray();
  if (bytearray_ == &::google::protobuf::internal::kEmptyString) {
    bytearray_ = new ::std::string;
  }
  return bytearray_;
}
inline ::std::string* ImageAvailable::release_bytearray() {
  clear_has_bytearray();
  if (bytearray_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bytearray_;
    bytearray_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImageAvailable::set_allocated_bytearray(::std::string* bytearray) {
  if (bytearray_ != &::google::protobuf::internal::kEmptyString) {
    delete bytearray_;
  }
  if (bytearray) {
    set_has_bytearray();
    bytearray_ = bytearray;
  } else {
    clear_has_bytearray();
    bytearray_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .video_compression_msg.ImageAvailable.Status status = 7;
inline bool ImageAvailable::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageAvailable::set_has_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageAvailable::clear_has_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageAvailable::clear_status() {
  status_ = -1;
  clear_has_status();
}
inline ::video_compression_msg::ImageAvailable_Status ImageAvailable::status() const {
  return static_cast< ::video_compression_msg::ImageAvailable_Status >(status_);
}
inline void ImageAvailable::set_status(::video_compression_msg::ImageAvailable_Status value) {
  assert(::video_compression_msg::ImageAvailable_Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional int32 msgID = 8;
inline bool ImageAvailable::has_msgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageAvailable::set_has_msgid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageAvailable::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageAvailable::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 ImageAvailable::msgid() const {
  return msgid_;
}
inline void ImageAvailable::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
}

// optional string eventID = 10;
inline bool ImageAvailable::has_eventid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImageAvailable::set_has_eventid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImageAvailable::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImageAvailable::clear_eventid() {
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    eventid_->clear();
  }
  clear_has_eventid();
}
inline const ::std::string& ImageAvailable::eventid() const {
  return *eventid_;
}
inline void ImageAvailable::set_eventid(const ::std::string& value) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::kEmptyString) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(value);
}
inline void ImageAvailable::set_eventid(const char* value) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::kEmptyString) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(value);
}
inline void ImageAvailable::set_eventid(const char* value, size_t size) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::kEmptyString) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageAvailable::mutable_eventid() {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::kEmptyString) {
    eventid_ = new ::std::string;
  }
  return eventid_;
}
inline ::std::string* ImageAvailable::release_eventid() {
  clear_has_eventid();
  if (eventid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eventid_;
    eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImageAvailable::set_allocated_eventid(::std::string* eventid) {
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (eventid) {
    set_has_eventid();
    eventid_ = eventid;
  } else {
    clear_has_eventid();
    eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string globalID = 11;
inline bool ImageAvailable::has_globalid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ImageAvailable::set_has_globalid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ImageAvailable::clear_has_globalid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ImageAvailable::clear_globalid() {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    globalid_->clear();
  }
  clear_has_globalid();
}
inline const ::std::string& ImageAvailable::globalid() const {
  return *globalid_;
}
inline void ImageAvailable::set_globalid(const ::std::string& value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void ImageAvailable::set_globalid(const char* value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void ImageAvailable::set_globalid(const char* value, size_t size) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageAvailable::mutable_globalid() {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  return globalid_;
}
inline ::std::string* ImageAvailable::release_globalid() {
  clear_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = globalid_;
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImageAvailable::set_allocated_globalid(::std::string* globalid) {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (globalid) {
    set_has_globalid();
    globalid_ = globalid;
  } else {
    clear_has_globalid();
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string eltex = 12;
inline bool ImageAvailable::has_eltex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ImageAvailable::set_has_eltex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ImageAvailable::clear_has_eltex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ImageAvailable::clear_eltex() {
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    eltex_->clear();
  }
  clear_has_eltex();
}
inline const ::std::string& ImageAvailable::eltex() const {
  return *eltex_;
}
inline void ImageAvailable::set_eltex(const ::std::string& value) {
  set_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    eltex_ = new ::std::string;
  }
  eltex_->assign(value);
}
inline void ImageAvailable::set_eltex(const char* value) {
  set_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    eltex_ = new ::std::string;
  }
  eltex_->assign(value);
}
inline void ImageAvailable::set_eltex(const char* value, size_t size) {
  set_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    eltex_ = new ::std::string;
  }
  eltex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageAvailable::mutable_eltex() {
  set_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    eltex_ = new ::std::string;
  }
  return eltex_;
}
inline ::std::string* ImageAvailable::release_eltex() {
  clear_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eltex_;
    eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImageAvailable::set_allocated_eltex(::std::string* eltex) {
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    delete eltex_;
  }
  if (eltex) {
    set_has_eltex();
    eltex_ = eltex;
  } else {
    clear_has_eltex();
    eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string soiNum = 13;
inline bool ImageAvailable::has_soinum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ImageAvailable::set_has_soinum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ImageAvailable::clear_has_soinum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ImageAvailable::clear_soinum() {
  if (soinum_ != &::google::protobuf::internal::kEmptyString) {
    soinum_->clear();
  }
  clear_has_soinum();
}
inline const ::std::string& ImageAvailable::soinum() const {
  return *soinum_;
}
inline void ImageAvailable::set_soinum(const ::std::string& value) {
  set_has_soinum();
  if (soinum_ == &::google::protobuf::internal::kEmptyString) {
    soinum_ = new ::std::string;
  }
  soinum_->assign(value);
}
inline void ImageAvailable::set_soinum(const char* value) {
  set_has_soinum();
  if (soinum_ == &::google::protobuf::internal::kEmptyString) {
    soinum_ = new ::std::string;
  }
  soinum_->assign(value);
}
inline void ImageAvailable::set_soinum(const char* value, size_t size) {
  set_has_soinum();
  if (soinum_ == &::google::protobuf::internal::kEmptyString) {
    soinum_ = new ::std::string;
  }
  soinum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageAvailable::mutable_soinum() {
  set_has_soinum();
  if (soinum_ == &::google::protobuf::internal::kEmptyString) {
    soinum_ = new ::std::string;
  }
  return soinum_;
}
inline ::std::string* ImageAvailable::release_soinum() {
  clear_has_soinum();
  if (soinum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = soinum_;
    soinum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImageAvailable::set_allocated_soinum(::std::string* soinum) {
  if (soinum_ != &::google::protobuf::internal::kEmptyString) {
    delete soinum_;
  }
  if (soinum) {
    set_has_soinum();
    soinum_ = soinum;
  } else {
    clear_has_soinum();
    soinum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ImageRequest

// optional string msgName = 1 [default = "IMAGEREQUEST"];
inline bool ImageRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& ImageRequest::msgname() const {
  return *msgname_;
}
inline void ImageRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ImageRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ImageRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* ImageRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void ImageRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 msgID = 2;
inline bool ImageRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageRequest::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 ImageRequest::msgid() const {
  return msgid_;
}
inline void ImageRequest::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
}

// optional string eventID = 3;
inline bool ImageRequest::has_eventid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageRequest::set_has_eventid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageRequest::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageRequest::clear_eventid() {
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    eventid_->clear();
  }
  clear_has_eventid();
}
inline const ::std::string& ImageRequest::eventid() const {
  return *eventid_;
}
inline void ImageRequest::set_eventid(const ::std::string& value) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::kEmptyString) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(value);
}
inline void ImageRequest::set_eventid(const char* value) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::kEmptyString) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(value);
}
inline void ImageRequest::set_eventid(const char* value, size_t size) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::kEmptyString) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageRequest::mutable_eventid() {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::kEmptyString) {
    eventid_ = new ::std::string;
  }
  return eventid_;
}
inline ::std::string* ImageRequest::release_eventid() {
  clear_has_eventid();
  if (eventid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eventid_;
    eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImageRequest::set_allocated_eventid(::std::string* eventid) {
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (eventid) {
    set_has_eventid();
    eventid_ = eventid;
  } else {
    clear_has_eventid();
    eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace video_compression_msg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::video_compression_msg::ImageAvailable_Status>() {
  return ::video_compression_msg::ImageAvailable_Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VideoCompressionMessages_2eproto__INCLUDED
