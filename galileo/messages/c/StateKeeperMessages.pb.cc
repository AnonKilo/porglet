// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StateKeeperMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StateKeeperMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace raptorx_msg {

namespace {

const ::google::protobuf::Descriptor* StateKeeperStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateKeeperStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Detection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Detection_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorGPSPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorGPSPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ping_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_StateKeeperMessages_2eproto() {
  protobuf_AddDesc_StateKeeperMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StateKeeperMessages.proto");
  GOOGLE_CHECK(file != NULL);
  StateKeeperStatus_descriptor_ = file->message_type(0);
  static const int StateKeeperStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateKeeperStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateKeeperStatus, state_name_),
  };
  StateKeeperStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateKeeperStatus_descriptor_,
      StateKeeperStatus::default_instance_,
      StateKeeperStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateKeeperStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateKeeperStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateKeeperStatus));
  Detection_descriptor_ = file->message_type(1);
  static const int Detection_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, characterization_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, feed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, time_whole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, time_fractional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, center_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, snr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, hidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, wrindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, globalid_),
  };
  Detection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Detection_descriptor_,
      Detection::default_instance_,
      Detection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Detection));
  SensorGPSPosition_descriptor_ = file->message_type(2);
  static const int SensorGPSPosition_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorGPSPosition, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorGPSPosition, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorGPSPosition, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorGPSPosition, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorGPSPosition, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorGPSPosition, minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorGPSPosition, vector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorGPSPosition, timestamp_),
  };
  SensorGPSPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorGPSPosition_descriptor_,
      SensorGPSPosition::default_instance_,
      SensorGPSPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorGPSPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorGPSPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorGPSPosition));
  ActionStatus_descriptor_ = file->message_type(3);
  static const int ActionStatus_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionStatus, executing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionStatus, ampon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionStatus, strikeassessment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionStatus, underattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionStatus, jamtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionStatus, jamfreq_),
  };
  ActionStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionStatus_descriptor_,
      ActionStatus::default_instance_,
      ActionStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionStatus));
  SystemStatus_descriptor_ = file->message_type(4);
  static const int SystemStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStatus, hardware_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStatus, software_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStatus, gps_lock_),
  };
  SystemStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemStatus_descriptor_,
      SystemStatus::default_instance_,
      SystemStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemStatus));
  Ping_descriptor_ = file->message_type(5);
  static const int Ping_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, msgname_),
  };
  Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ping_descriptor_,
      Ping::default_instance_,
      Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ping));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StateKeeperMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateKeeperStatus_descriptor_, &StateKeeperStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Detection_descriptor_, &Detection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorGPSPosition_descriptor_, &SensorGPSPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionStatus_descriptor_, &ActionStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemStatus_descriptor_, &SystemStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ping_descriptor_, &Ping::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StateKeeperMessages_2eproto() {
  delete StateKeeperStatus::default_instance_;
  delete StateKeeperStatus_reflection_;
  delete StateKeeperStatus::_default_msgname_;
  delete Detection::default_instance_;
  delete Detection_reflection_;
  delete Detection::_default_msgname_;
  delete SensorGPSPosition::default_instance_;
  delete SensorGPSPosition_reflection_;
  delete SensorGPSPosition::_default_msgname_;
  delete ActionStatus::default_instance_;
  delete ActionStatus_reflection_;
  delete ActionStatus::_default_msgname_;
  delete SystemStatus::default_instance_;
  delete SystemStatus_reflection_;
  delete SystemStatus::_default_msgname_;
  delete Ping::default_instance_;
  delete Ping_reflection_;
  delete Ping::_default_msgname_;
}

void protobuf_AddDesc_StateKeeperMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031StateKeeperMessages.proto\022\013raptorx_msg"
    "\"K\n\021StateKeeperStatus\022\"\n\007msgName\030\001 \001(\t:\021"
    "StateKeeperStatus\022\022\n\nstate_name\030\002 \001(\t\"\276\002"
    "\n\tDetection\022\032\n\007msgName\030\001 \001(\t:\tDetection\022"
    "\n\n\002id\030\002 \001(\003\022\033\n\023characterization_id\030\003 \001(\003"
    "\022\016\n\006signal\030\004 \001(\t\022\014\n\004feed\030\005 \001(\t\022\022\n\ntime_w"
    "hole\030\006 \001(\003\022\027\n\017time_fractional\030\007 \001(\001\022\020\n\010d"
    "uration\030\010 \001(\001\022\030\n\020center_frequency\030\t \001(\001\022"
    "\021\n\tbandwidth\030\n \001(\001\022\017\n\007azimuth\030\013 \001(\001\022\021\n\te"
    "levation\030\014 \001(\001\022\013\n\003snr\030\r \001(\001\022\016\n\006hidden\030\016 "
    "\001(\010\022\017\n\007wrindex\030\017 \001(\005\022\020\n\010globalID\030\020 \001(\t\"\237"
    "\001\n\021SensorGPSPosition\022\"\n\007msgName\030\001 \001(\t:\021S"
    "ensorGPSPosition\022\013\n\003lat\030\002 \001(\002\022\013\n\003lon\030\003 \001"
    "(\002\022\013\n\003alt\030\004 \001(\002\022\r\n\005major\030\005 \001(\002\022\r\n\005minor\030"
    "\006 \001(\002\022\016\n\006vector\030\007 \001(\002\022\021\n\ttimestamp\030\010 \001(\t"
    "\"\240\001\n\014ActionStatus\022\035\n\007msgName\030\001 \001(\t:\014Acti"
    "onStatus\022\021\n\texecuting\030\002 \001(\t\022\r\n\005ampOn\030\003 \001"
    "(\t\022\030\n\020strikeAssessment\030\004 \001(\t\022\023\n\013underAtt"
    "ack\030\005 \001(\t\022\017\n\007jamType\030\006 \001(\t\022\017\n\007jamFreq\030\007 "
    "\001(\002\"q\n\014SystemStatus\022\035\n\007msgName\030\001 \001(\t:\014Sy"
    "stemStatus\022\027\n\017hardware_status\030\002 \001(\t\022\027\n\017s"
    "oftware_status\030\003 \001(\t\022\020\n\010gps_lock\030\004 \001(\t\"\035"
    "\n\004Ping\022\025\n\007msgName\030\001 \001(\t:\004PingB\025\n\023fv.prot"
    "os.kepsvisor", 932);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StateKeeperMessages.proto", &protobuf_RegisterTypes);
  StateKeeperStatus::_default_msgname_ =
      new ::std::string("StateKeeperStatus", 17);
  StateKeeperStatus::default_instance_ = new StateKeeperStatus();
  Detection::_default_msgname_ =
      new ::std::string("Detection", 9);
  Detection::default_instance_ = new Detection();
  SensorGPSPosition::_default_msgname_ =
      new ::std::string("SensorGPSPosition", 17);
  SensorGPSPosition::default_instance_ = new SensorGPSPosition();
  ActionStatus::_default_msgname_ =
      new ::std::string("ActionStatus", 12);
  ActionStatus::default_instance_ = new ActionStatus();
  SystemStatus::_default_msgname_ =
      new ::std::string("SystemStatus", 12);
  SystemStatus::default_instance_ = new SystemStatus();
  Ping::_default_msgname_ =
      new ::std::string("Ping", 4);
  Ping::default_instance_ = new Ping();
  StateKeeperStatus::default_instance_->InitAsDefaultInstance();
  Detection::default_instance_->InitAsDefaultInstance();
  SensorGPSPosition::default_instance_->InitAsDefaultInstance();
  ActionStatus::default_instance_->InitAsDefaultInstance();
  SystemStatus::default_instance_->InitAsDefaultInstance();
  Ping::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StateKeeperMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StateKeeperMessages_2eproto {
  StaticDescriptorInitializer_StateKeeperMessages_2eproto() {
    protobuf_AddDesc_StateKeeperMessages_2eproto();
  }
} static_descriptor_initializer_StateKeeperMessages_2eproto_;

// ===================================================================

::std::string* StateKeeperStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int StateKeeperStatus::kMsgNameFieldNumber;
const int StateKeeperStatus::kStateNameFieldNumber;
#endif  // !_MSC_VER

StateKeeperStatus::StateKeeperStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StateKeeperStatus::InitAsDefaultInstance() {
}

StateKeeperStatus::StateKeeperStatus(const StateKeeperStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StateKeeperStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  state_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateKeeperStatus::~StateKeeperStatus() {
  SharedDtor();
}

void StateKeeperStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (state_name_ != &::google::protobuf::internal::kEmptyString) {
    delete state_name_;
  }
  if (this != default_instance_) {
  }
}

void StateKeeperStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateKeeperStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateKeeperStatus_descriptor_;
}

const StateKeeperStatus& StateKeeperStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateKeeperMessages_2eproto();
  return *default_instance_;
}

StateKeeperStatus* StateKeeperStatus::default_instance_ = NULL;

StateKeeperStatus* StateKeeperStatus::New() const {
  return new StateKeeperStatus;
}

void StateKeeperStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_state_name()) {
      if (state_name_ != &::google::protobuf::internal::kEmptyString) {
        state_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateKeeperStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "StateKeeperStatus"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state_name;
        break;
      }

      // optional string state_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->state_name().data(), this->state_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StateKeeperStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "StateKeeperStatus"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string state_name = 2;
  if (has_state_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state_name().data(), this->state_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->state_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StateKeeperStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "StateKeeperStatus"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string state_name = 2;
  if (has_state_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state_name().data(), this->state_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->state_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StateKeeperStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "StateKeeperStatus"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string state_name = 2;
    if (has_state_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateKeeperStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateKeeperStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateKeeperStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateKeeperStatus::MergeFrom(const StateKeeperStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_state_name()) {
      set_state_name(from.state_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateKeeperStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateKeeperStatus::CopyFrom(const StateKeeperStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateKeeperStatus::IsInitialized() const {

  return true;
}

void StateKeeperStatus::Swap(StateKeeperStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(state_name_, other->state_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateKeeperStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateKeeperStatus_descriptor_;
  metadata.reflection = StateKeeperStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Detection::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int Detection::kMsgNameFieldNumber;
const int Detection::kIdFieldNumber;
const int Detection::kCharacterizationIdFieldNumber;
const int Detection::kSignalFieldNumber;
const int Detection::kFeedFieldNumber;
const int Detection::kTimeWholeFieldNumber;
const int Detection::kTimeFractionalFieldNumber;
const int Detection::kDurationFieldNumber;
const int Detection::kCenterFrequencyFieldNumber;
const int Detection::kBandwidthFieldNumber;
const int Detection::kAzimuthFieldNumber;
const int Detection::kElevationFieldNumber;
const int Detection::kSnrFieldNumber;
const int Detection::kHiddenFieldNumber;
const int Detection::kWrindexFieldNumber;
const int Detection::kGlobalIDFieldNumber;
#endif  // !_MSC_VER

Detection::Detection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Detection::InitAsDefaultInstance() {
}

Detection::Detection(const Detection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Detection::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  id_ = GOOGLE_LONGLONG(0);
  characterization_id_ = GOOGLE_LONGLONG(0);
  signal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  feed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_whole_ = GOOGLE_LONGLONG(0);
  time_fractional_ = 0;
  duration_ = 0;
  center_frequency_ = 0;
  bandwidth_ = 0;
  azimuth_ = 0;
  elevation_ = 0;
  snr_ = 0;
  hidden_ = false;
  wrindex_ = 0;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Detection::~Detection() {
  SharedDtor();
}

void Detection::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (signal_ != &::google::protobuf::internal::kEmptyString) {
    delete signal_;
  }
  if (feed_ != &::google::protobuf::internal::kEmptyString) {
    delete feed_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void Detection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Detection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Detection_descriptor_;
}

const Detection& Detection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateKeeperMessages_2eproto();
  return *default_instance_;
}

Detection* Detection::default_instance_ = NULL;

Detection* Detection::New() const {
  return new Detection;
}

void Detection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    id_ = GOOGLE_LONGLONG(0);
    characterization_id_ = GOOGLE_LONGLONG(0);
    if (has_signal()) {
      if (signal_ != &::google::protobuf::internal::kEmptyString) {
        signal_->clear();
      }
    }
    if (has_feed()) {
      if (feed_ != &::google::protobuf::internal::kEmptyString) {
        feed_->clear();
      }
    }
    time_whole_ = GOOGLE_LONGLONG(0);
    time_fractional_ = 0;
    duration_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    center_frequency_ = 0;
    bandwidth_ = 0;
    azimuth_ = 0;
    elevation_ = 0;
    snr_ = 0;
    hidden_ = false;
    wrindex_ = 0;
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Detection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "Detection"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_characterization_id;
        break;
      }

      // optional int64 characterization_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_characterization_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &characterization_id_)));
          set_has_characterization_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_signal;
        break;
      }

      // optional string signal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signal().data(), this->signal().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_feed;
        break;
      }

      // optional string feed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->feed().data(), this->feed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time_whole;
        break;
      }

      // optional int64 time_whole = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_whole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_whole_)));
          set_has_time_whole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_time_fractional;
        break;
      }

      // optional double time_fractional = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_fractional:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_fractional_)));
          set_has_time_fractional();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_duration;
        break;
      }

      // optional double duration = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_center_frequency;
        break;
      }

      // optional double center_frequency = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_center_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &center_frequency_)));
          set_has_center_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_bandwidth;
        break;
      }

      // optional double bandwidth = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_azimuth;
        break;
      }

      // optional double azimuth = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_elevation;
        break;
      }

      // optional double elevation = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_snr;
        break;
      }

      // optional double snr = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_snr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &snr_)));
          set_has_snr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_hidden;
        break;
      }

      // optional bool hidden = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_)));
          set_has_hidden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_wrindex;
        break;
      }

      // optional int32 wrindex = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wrindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrindex_)));
          set_has_wrindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_globalID;
        break;
      }

      // optional string globalID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Detection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "Detection"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // optional int64 characterization_id = 3;
  if (has_characterization_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->characterization_id(), output);
  }

  // optional string signal = 4;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal().data(), this->signal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->signal(), output);
  }

  // optional string feed = 5;
  if (has_feed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feed().data(), this->feed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->feed(), output);
  }

  // optional int64 time_whole = 6;
  if (has_time_whole()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->time_whole(), output);
  }

  // optional double time_fractional = 7;
  if (has_time_fractional()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->time_fractional(), output);
  }

  // optional double duration = 8;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->duration(), output);
  }

  // optional double center_frequency = 9;
  if (has_center_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->center_frequency(), output);
  }

  // optional double bandwidth = 10;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->bandwidth(), output);
  }

  // optional double azimuth = 11;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->azimuth(), output);
  }

  // optional double elevation = 12;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->elevation(), output);
  }

  // optional double snr = 13;
  if (has_snr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->snr(), output);
  }

  // optional bool hidden = 14;
  if (has_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->hidden(), output);
  }

  // optional int32 wrindex = 15;
  if (has_wrindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->wrindex(), output);
  }

  // optional string globalID = 16;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Detection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "Detection"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // optional int64 characterization_id = 3;
  if (has_characterization_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->characterization_id(), target);
  }

  // optional string signal = 4;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal().data(), this->signal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->signal(), target);
  }

  // optional string feed = 5;
  if (has_feed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feed().data(), this->feed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->feed(), target);
  }

  // optional int64 time_whole = 6;
  if (has_time_whole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->time_whole(), target);
  }

  // optional double time_fractional = 7;
  if (has_time_fractional()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->time_fractional(), target);
  }

  // optional double duration = 8;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->duration(), target);
  }

  // optional double center_frequency = 9;
  if (has_center_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->center_frequency(), target);
  }

  // optional double bandwidth = 10;
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->bandwidth(), target);
  }

  // optional double azimuth = 11;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->azimuth(), target);
  }

  // optional double elevation = 12;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->elevation(), target);
  }

  // optional double snr = 13;
  if (has_snr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->snr(), target);
  }

  // optional bool hidden = 14;
  if (has_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->hidden(), target);
  }

  // optional int32 wrindex = 15;
  if (has_wrindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->wrindex(), target);
  }

  // optional string globalID = 16;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Detection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "Detection"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 characterization_id = 3;
    if (has_characterization_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->characterization_id());
    }

    // optional string signal = 4;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signal());
    }

    // optional string feed = 5;
    if (has_feed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feed());
    }

    // optional int64 time_whole = 6;
    if (has_time_whole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_whole());
    }

    // optional double time_fractional = 7;
    if (has_time_fractional()) {
      total_size += 1 + 8;
    }

    // optional double duration = 8;
    if (has_duration()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double center_frequency = 9;
    if (has_center_frequency()) {
      total_size += 1 + 8;
    }

    // optional double bandwidth = 10;
    if (has_bandwidth()) {
      total_size += 1 + 8;
    }

    // optional double azimuth = 11;
    if (has_azimuth()) {
      total_size += 1 + 8;
    }

    // optional double elevation = 12;
    if (has_elevation()) {
      total_size += 1 + 8;
    }

    // optional double snr = 13;
    if (has_snr()) {
      total_size += 1 + 8;
    }

    // optional bool hidden = 14;
    if (has_hidden()) {
      total_size += 1 + 1;
    }

    // optional int32 wrindex = 15;
    if (has_wrindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wrindex());
    }

    // optional string globalID = 16;
    if (has_globalid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Detection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Detection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Detection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Detection::MergeFrom(const Detection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_characterization_id()) {
      set_characterization_id(from.characterization_id());
    }
    if (from.has_signal()) {
      set_signal(from.signal());
    }
    if (from.has_feed()) {
      set_feed(from.feed());
    }
    if (from.has_time_whole()) {
      set_time_whole(from.time_whole());
    }
    if (from.has_time_fractional()) {
      set_time_fractional(from.time_fractional());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_center_frequency()) {
      set_center_frequency(from.center_frequency());
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
    if (from.has_snr()) {
      set_snr(from.snr());
    }
    if (from.has_hidden()) {
      set_hidden(from.hidden());
    }
    if (from.has_wrindex()) {
      set_wrindex(from.wrindex());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Detection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detection::CopyFrom(const Detection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detection::IsInitialized() const {

  return true;
}

void Detection::Swap(Detection* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(id_, other->id_);
    std::swap(characterization_id_, other->characterization_id_);
    std::swap(signal_, other->signal_);
    std::swap(feed_, other->feed_);
    std::swap(time_whole_, other->time_whole_);
    std::swap(time_fractional_, other->time_fractional_);
    std::swap(duration_, other->duration_);
    std::swap(center_frequency_, other->center_frequency_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(azimuth_, other->azimuth_);
    std::swap(elevation_, other->elevation_);
    std::swap(snr_, other->snr_);
    std::swap(hidden_, other->hidden_);
    std::swap(wrindex_, other->wrindex_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Detection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Detection_descriptor_;
  metadata.reflection = Detection_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SensorGPSPosition::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SensorGPSPosition::kMsgNameFieldNumber;
const int SensorGPSPosition::kLatFieldNumber;
const int SensorGPSPosition::kLonFieldNumber;
const int SensorGPSPosition::kAltFieldNumber;
const int SensorGPSPosition::kMajorFieldNumber;
const int SensorGPSPosition::kMinorFieldNumber;
const int SensorGPSPosition::kVectorFieldNumber;
const int SensorGPSPosition::kTimestampFieldNumber;
#endif  // !_MSC_VER

SensorGPSPosition::SensorGPSPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorGPSPosition::InitAsDefaultInstance() {
}

SensorGPSPosition::SensorGPSPosition(const SensorGPSPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorGPSPosition::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  lat_ = 0;
  lon_ = 0;
  alt_ = 0;
  major_ = 0;
  minor_ = 0;
  vector_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorGPSPosition::~SensorGPSPosition() {
  SharedDtor();
}

void SensorGPSPosition::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void SensorGPSPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorGPSPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorGPSPosition_descriptor_;
}

const SensorGPSPosition& SensorGPSPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateKeeperMessages_2eproto();
  return *default_instance_;
}

SensorGPSPosition* SensorGPSPosition::default_instance_ = NULL;

SensorGPSPosition* SensorGPSPosition::New() const {
  return new SensorGPSPosition;
}

void SensorGPSPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    lat_ = 0;
    lon_ = 0;
    alt_ = 0;
    major_ = 0;
    minor_ = 0;
    vector_ = 0;
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorGPSPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SensorGPSPosition"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_lat;
        break;
      }

      // optional float lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_lon;
        break;
      }

      // optional float lon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_alt;
        break;
      }

      // optional float alt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_major;
        break;
      }

      // optional float major = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &major_)));
          set_has_major();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_minor;
        break;
      }

      // optional float minor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minor_)));
          set_has_minor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_vector;
        break;
      }

      // optional float vector = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vector_)));
          set_has_vector();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorGPSPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SensorGPSPosition"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional float lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lat(), output);
  }

  // optional float lon = 3;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lon(), output);
  }

  // optional float alt = 4;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->alt(), output);
  }

  // optional float major = 5;
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->major(), output);
  }

  // optional float minor = 6;
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->minor(), output);
  }

  // optional float vector = 7;
  if (has_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->vector(), output);
  }

  // optional string timestamp = 8;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorGPSPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SensorGPSPosition"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional float lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lat(), target);
  }

  // optional float lon = 3;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lon(), target);
  }

  // optional float alt = 4;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->alt(), target);
  }

  // optional float major = 5;
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->major(), target);
  }

  // optional float minor = 6;
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->minor(), target);
  }

  // optional float vector = 7;
  if (has_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->vector(), target);
  }

  // optional string timestamp = 8;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorGPSPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SensorGPSPosition"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional float lat = 2;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float lon = 3;
    if (has_lon()) {
      total_size += 1 + 4;
    }

    // optional float alt = 4;
    if (has_alt()) {
      total_size += 1 + 4;
    }

    // optional float major = 5;
    if (has_major()) {
      total_size += 1 + 4;
    }

    // optional float minor = 6;
    if (has_minor()) {
      total_size += 1 + 4;
    }

    // optional float vector = 7;
    if (has_vector()) {
      total_size += 1 + 4;
    }

    // optional string timestamp = 8;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorGPSPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorGPSPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorGPSPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorGPSPosition::MergeFrom(const SensorGPSPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
    if (from.has_vector()) {
      set_vector(from.vector());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorGPSPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorGPSPosition::CopyFrom(const SensorGPSPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorGPSPosition::IsInitialized() const {

  return true;
}

void SensorGPSPosition::Swap(SensorGPSPosition* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(alt_, other->alt_);
    std::swap(major_, other->major_);
    std::swap(minor_, other->minor_);
    std::swap(vector_, other->vector_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorGPSPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorGPSPosition_descriptor_;
  metadata.reflection = SensorGPSPosition_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ActionStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ActionStatus::kMsgNameFieldNumber;
const int ActionStatus::kExecutingFieldNumber;
const int ActionStatus::kAmpOnFieldNumber;
const int ActionStatus::kStrikeAssessmentFieldNumber;
const int ActionStatus::kUnderAttackFieldNumber;
const int ActionStatus::kJamTypeFieldNumber;
const int ActionStatus::kJamFreqFieldNumber;
#endif  // !_MSC_VER

ActionStatus::ActionStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionStatus::InitAsDefaultInstance() {
}

ActionStatus::ActionStatus(const ActionStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  executing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ampon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strikeassessment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underattack_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jamtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jamfreq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionStatus::~ActionStatus() {
  SharedDtor();
}

void ActionStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (executing_ != &::google::protobuf::internal::kEmptyString) {
    delete executing_;
  }
  if (ampon_ != &::google::protobuf::internal::kEmptyString) {
    delete ampon_;
  }
  if (strikeassessment_ != &::google::protobuf::internal::kEmptyString) {
    delete strikeassessment_;
  }
  if (underattack_ != &::google::protobuf::internal::kEmptyString) {
    delete underattack_;
  }
  if (jamtype_ != &::google::protobuf::internal::kEmptyString) {
    delete jamtype_;
  }
  if (this != default_instance_) {
  }
}

void ActionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionStatus_descriptor_;
}

const ActionStatus& ActionStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateKeeperMessages_2eproto();
  return *default_instance_;
}

ActionStatus* ActionStatus::default_instance_ = NULL;

ActionStatus* ActionStatus::New() const {
  return new ActionStatus;
}

void ActionStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_executing()) {
      if (executing_ != &::google::protobuf::internal::kEmptyString) {
        executing_->clear();
      }
    }
    if (has_ampon()) {
      if (ampon_ != &::google::protobuf::internal::kEmptyString) {
        ampon_->clear();
      }
    }
    if (has_strikeassessment()) {
      if (strikeassessment_ != &::google::protobuf::internal::kEmptyString) {
        strikeassessment_->clear();
      }
    }
    if (has_underattack()) {
      if (underattack_ != &::google::protobuf::internal::kEmptyString) {
        underattack_->clear();
      }
    }
    if (has_jamtype()) {
      if (jamtype_ != &::google::protobuf::internal::kEmptyString) {
        jamtype_->clear();
      }
    }
    jamfreq_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ActionStatus"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_executing;
        break;
      }

      // optional string executing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executing()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->executing().data(), this->executing().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ampOn;
        break;
      }

      // optional string ampOn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ampOn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ampon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ampon().data(), this->ampon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strikeAssessment;
        break;
      }

      // optional string strikeAssessment = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strikeAssessment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strikeassessment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strikeassessment().data(), this->strikeassessment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_underAttack;
        break;
      }

      // optional string underAttack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underAttack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underattack()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underattack().data(), this->underattack().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_jamType;
        break;
      }

      // optional string jamType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jamType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jamtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jamtype().data(), this->jamtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_jamFreq;
        break;
      }

      // optional float jamFreq = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_jamFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jamfreq_)));
          set_has_jamfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ActionStatus"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string executing = 2;
  if (has_executing()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executing().data(), this->executing().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->executing(), output);
  }

  // optional string ampOn = 3;
  if (has_ampon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ampon().data(), this->ampon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ampon(), output);
  }

  // optional string strikeAssessment = 4;
  if (has_strikeassessment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strikeassessment().data(), this->strikeassessment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strikeassessment(), output);
  }

  // optional string underAttack = 5;
  if (has_underattack()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underattack().data(), this->underattack().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->underattack(), output);
  }

  // optional string jamType = 6;
  if (has_jamtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jamtype().data(), this->jamtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->jamtype(), output);
  }

  // optional float jamFreq = 7;
  if (has_jamfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->jamfreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ActionStatus"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string executing = 2;
  if (has_executing()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executing().data(), this->executing().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->executing(), target);
  }

  // optional string ampOn = 3;
  if (has_ampon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ampon().data(), this->ampon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ampon(), target);
  }

  // optional string strikeAssessment = 4;
  if (has_strikeassessment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strikeassessment().data(), this->strikeassessment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strikeassessment(), target);
  }

  // optional string underAttack = 5;
  if (has_underattack()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underattack().data(), this->underattack().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->underattack(), target);
  }

  // optional string jamType = 6;
  if (has_jamtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jamtype().data(), this->jamtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->jamtype(), target);
  }

  // optional float jamFreq = 7;
  if (has_jamfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->jamfreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ActionStatus"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string executing = 2;
    if (has_executing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->executing());
    }

    // optional string ampOn = 3;
    if (has_ampon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ampon());
    }

    // optional string strikeAssessment = 4;
    if (has_strikeassessment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strikeassessment());
    }

    // optional string underAttack = 5;
    if (has_underattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underattack());
    }

    // optional string jamType = 6;
    if (has_jamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jamtype());
    }

    // optional float jamFreq = 7;
    if (has_jamfreq()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionStatus::MergeFrom(const ActionStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_executing()) {
      set_executing(from.executing());
    }
    if (from.has_ampon()) {
      set_ampon(from.ampon());
    }
    if (from.has_strikeassessment()) {
      set_strikeassessment(from.strikeassessment());
    }
    if (from.has_underattack()) {
      set_underattack(from.underattack());
    }
    if (from.has_jamtype()) {
      set_jamtype(from.jamtype());
    }
    if (from.has_jamfreq()) {
      set_jamfreq(from.jamfreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionStatus::CopyFrom(const ActionStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionStatus::IsInitialized() const {

  return true;
}

void ActionStatus::Swap(ActionStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(executing_, other->executing_);
    std::swap(ampon_, other->ampon_);
    std::swap(strikeassessment_, other->strikeassessment_);
    std::swap(underattack_, other->underattack_);
    std::swap(jamtype_, other->jamtype_);
    std::swap(jamfreq_, other->jamfreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionStatus_descriptor_;
  metadata.reflection = ActionStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SystemStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SystemStatus::kMsgNameFieldNumber;
const int SystemStatus::kHardwareStatusFieldNumber;
const int SystemStatus::kSoftwareStatusFieldNumber;
const int SystemStatus::kGpsLockFieldNumber;
#endif  // !_MSC_VER

SystemStatus::SystemStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemStatus::InitAsDefaultInstance() {
}

SystemStatus::SystemStatus(const SystemStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  hardware_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  software_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gps_lock_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemStatus::~SystemStatus() {
  SharedDtor();
}

void SystemStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (hardware_status_ != &::google::protobuf::internal::kEmptyString) {
    delete hardware_status_;
  }
  if (software_status_ != &::google::protobuf::internal::kEmptyString) {
    delete software_status_;
  }
  if (gps_lock_ != &::google::protobuf::internal::kEmptyString) {
    delete gps_lock_;
  }
  if (this != default_instance_) {
  }
}

void SystemStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemStatus_descriptor_;
}

const SystemStatus& SystemStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateKeeperMessages_2eproto();
  return *default_instance_;
}

SystemStatus* SystemStatus::default_instance_ = NULL;

SystemStatus* SystemStatus::New() const {
  return new SystemStatus;
}

void SystemStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_hardware_status()) {
      if (hardware_status_ != &::google::protobuf::internal::kEmptyString) {
        hardware_status_->clear();
      }
    }
    if (has_software_status()) {
      if (software_status_ != &::google::protobuf::internal::kEmptyString) {
        software_status_->clear();
      }
    }
    if (has_gps_lock()) {
      if (gps_lock_ != &::google::protobuf::internal::kEmptyString) {
        gps_lock_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SystemStatus"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hardware_status;
        break;
      }

      // optional string hardware_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hardware_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hardware_status().data(), this->hardware_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_software_status;
        break;
      }

      // optional string software_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_software_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_software_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->software_status().data(), this->software_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gps_lock;
        break;
      }

      // optional string gps_lock = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gps_lock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gps_lock()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gps_lock().data(), this->gps_lock().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SystemStatus"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string hardware_status = 2;
  if (has_hardware_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hardware_status().data(), this->hardware_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hardware_status(), output);
  }

  // optional string software_status = 3;
  if (has_software_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->software_status().data(), this->software_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->software_status(), output);
  }

  // optional string gps_lock = 4;
  if (has_gps_lock()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gps_lock().data(), this->gps_lock().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gps_lock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SystemStatus"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string hardware_status = 2;
  if (has_hardware_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hardware_status().data(), this->hardware_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hardware_status(), target);
  }

  // optional string software_status = 3;
  if (has_software_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->software_status().data(), this->software_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->software_status(), target);
  }

  // optional string gps_lock = 4;
  if (has_gps_lock()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gps_lock().data(), this->gps_lock().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gps_lock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SystemStatus"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string hardware_status = 2;
    if (has_hardware_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware_status());
    }

    // optional string software_status = 3;
    if (has_software_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->software_status());
    }

    // optional string gps_lock = 4;
    if (has_gps_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gps_lock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemStatus::MergeFrom(const SystemStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_hardware_status()) {
      set_hardware_status(from.hardware_status());
    }
    if (from.has_software_status()) {
      set_software_status(from.software_status());
    }
    if (from.has_gps_lock()) {
      set_gps_lock(from.gps_lock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemStatus::CopyFrom(const SystemStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemStatus::IsInitialized() const {

  return true;
}

void SystemStatus::Swap(SystemStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(hardware_status_, other->hardware_status_);
    std::swap(software_status_, other->software_status_);
    std::swap(gps_lock_, other->gps_lock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemStatus_descriptor_;
  metadata.reflection = SystemStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Ping::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int Ping::kMsgNameFieldNumber;
#endif  // !_MSC_VER

Ping::Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ping::InitAsDefaultInstance() {
}

Ping::Ping(const Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ping::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ping::~Ping() {
  SharedDtor();
}

void Ping::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ping_descriptor_;
}

const Ping& Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateKeeperMessages_2eproto();
  return *default_instance_;
}

Ping* Ping::default_instance_ = NULL;

Ping* Ping::New() const {
  return new Ping;
}

void Ping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "Ping"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "Ping"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "Ping"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "Ping"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {

  return true;
}

void Ping::Swap(Ping* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ping_descriptor_;
  metadata.reflection = Ping_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raptorx_msg

// @@protoc_insertion_point(global_scope)
