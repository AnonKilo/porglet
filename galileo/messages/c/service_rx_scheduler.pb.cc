// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_rx_scheduler.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service_rx_scheduler.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace service_rx_scheduler {

namespace {

const ::google::protobuf::Descriptor* RxSchedulerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RxSchedulerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RxSchedulerConfig_ScheduleImportInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RxSchedulerConfig_ScheduleImportInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RxSchedulerConfig_TimelineImportInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RxSchedulerConfig_TimelineImportInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RxSchedulerConfig_BlackoutImportInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RxSchedulerConfig_BlackoutImportInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_5frx_5fscheduler_2eproto() {
  protobuf_AddDesc_service_5frx_5fscheduler_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service_rx_scheduler.proto");
  GOOGLE_CHECK(file != NULL);
  RxSchedulerConfig_descriptor_ = file->message_type(0);
  static const int RxSchedulerConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig, scheduleimportinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig, timelineimportinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig, blackoutimportinfos_),
  };
  RxSchedulerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RxSchedulerConfig_descriptor_,
      RxSchedulerConfig::default_instance_,
      RxSchedulerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RxSchedulerConfig));
  RxSchedulerConfig_ScheduleImportInfo_descriptor_ = RxSchedulerConfig_descriptor_->nested_type(0);
  static const int RxSchedulerConfig_ScheduleImportInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig_ScheduleImportInfo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig_ScheduleImportInfo, importpath_),
  };
  RxSchedulerConfig_ScheduleImportInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RxSchedulerConfig_ScheduleImportInfo_descriptor_,
      RxSchedulerConfig_ScheduleImportInfo::default_instance_,
      RxSchedulerConfig_ScheduleImportInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig_ScheduleImportInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig_ScheduleImportInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RxSchedulerConfig_ScheduleImportInfo));
  RxSchedulerConfig_TimelineImportInfo_descriptor_ = RxSchedulerConfig_descriptor_->nested_type(1);
  static const int RxSchedulerConfig_TimelineImportInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig_TimelineImportInfo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig_TimelineImportInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig_TimelineImportInfo, stoptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig_TimelineImportInfo, filepath_),
  };
  RxSchedulerConfig_TimelineImportInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RxSchedulerConfig_TimelineImportInfo_descriptor_,
      RxSchedulerConfig_TimelineImportInfo::default_instance_,
      RxSchedulerConfig_TimelineImportInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig_TimelineImportInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig_TimelineImportInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RxSchedulerConfig_TimelineImportInfo));
  RxSchedulerConfig_BlackoutImportInfo_descriptor_ = RxSchedulerConfig_descriptor_->nested_type(2);
  static const int RxSchedulerConfig_BlackoutImportInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig_BlackoutImportInfo, filepath_),
  };
  RxSchedulerConfig_BlackoutImportInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RxSchedulerConfig_BlackoutImportInfo_descriptor_,
      RxSchedulerConfig_BlackoutImportInfo::default_instance_,
      RxSchedulerConfig_BlackoutImportInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig_BlackoutImportInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxSchedulerConfig_BlackoutImportInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RxSchedulerConfig_BlackoutImportInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_5frx_5fscheduler_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RxSchedulerConfig_descriptor_, &RxSchedulerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RxSchedulerConfig_ScheduleImportInfo_descriptor_, &RxSchedulerConfig_ScheduleImportInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RxSchedulerConfig_TimelineImportInfo_descriptor_, &RxSchedulerConfig_TimelineImportInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RxSchedulerConfig_BlackoutImportInfo_descriptor_, &RxSchedulerConfig_BlackoutImportInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_5frx_5fscheduler_2eproto() {
  delete RxSchedulerConfig::default_instance_;
  delete RxSchedulerConfig_reflection_;
  delete RxSchedulerConfig::_default_msgname_;
  delete RxSchedulerConfig_ScheduleImportInfo::default_instance_;
  delete RxSchedulerConfig_ScheduleImportInfo_reflection_;
  delete RxSchedulerConfig_TimelineImportInfo::default_instance_;
  delete RxSchedulerConfig_TimelineImportInfo_reflection_;
  delete RxSchedulerConfig_BlackoutImportInfo::default_instance_;
  delete RxSchedulerConfig_BlackoutImportInfo_reflection_;
}

void protobuf_AddDesc_service_5frx_5fscheduler_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032service_rx_scheduler.proto\022\024service_rx"
    "_scheduler\"\234\004\n\021RxSchedulerConfig\0227\n\007msgN"
    "ame\030\001 \001(\t:&service_rx_scheduler.RxSchedu"
    "lerConfig\022W\n\023scheduleImportInfos\030\002 \003(\0132:"
    ".service_rx_scheduler.RxSchedulerConfig."
    "ScheduleImportInfo\022W\n\023timelineImportInfo"
    "s\030\003 \003(\0132:.service_rx_scheduler.RxSchedul"
    "erConfig.TimelineImportInfo\022W\n\023blackoutI"
    "mportInfos\030\004 \003(\0132:.service_rx_scheduler."
    "RxSchedulerConfig.BlackoutImportInfo\032;\n\022"
    "ScheduleImportInfo\022\021\n\tchannelId\030\001 \002(\t\022\022\n"
    "\nimportPath\030\002 \002(\t\032^\n\022TimelineImportInfo\022"
    "\021\n\tchannelId\030\001 \001(\t\022\021\n\tstartTime\030\002 \001(\t\022\020\n"
    "\010stopTime\030\003 \001(\t\022\020\n\010filePath\030\004 \001(\t\032&\n\022Bla"
    "ckoutImportInfo\022\020\n\010filePath\030\001 \001(\tB\025\n\023fv."
    "protos.kepsvisor", 616);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service_rx_scheduler.proto", &protobuf_RegisterTypes);
  RxSchedulerConfig::_default_msgname_ =
      new ::std::string("service_rx_scheduler.RxSchedulerConfig", 38);
  RxSchedulerConfig::default_instance_ = new RxSchedulerConfig();
  RxSchedulerConfig_ScheduleImportInfo::default_instance_ = new RxSchedulerConfig_ScheduleImportInfo();
  RxSchedulerConfig_TimelineImportInfo::default_instance_ = new RxSchedulerConfig_TimelineImportInfo();
  RxSchedulerConfig_BlackoutImportInfo::default_instance_ = new RxSchedulerConfig_BlackoutImportInfo();
  RxSchedulerConfig::default_instance_->InitAsDefaultInstance();
  RxSchedulerConfig_ScheduleImportInfo::default_instance_->InitAsDefaultInstance();
  RxSchedulerConfig_TimelineImportInfo::default_instance_->InitAsDefaultInstance();
  RxSchedulerConfig_BlackoutImportInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_5frx_5fscheduler_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_5frx_5fscheduler_2eproto {
  StaticDescriptorInitializer_service_5frx_5fscheduler_2eproto() {
    protobuf_AddDesc_service_5frx_5fscheduler_2eproto();
  }
} static_descriptor_initializer_service_5frx_5fscheduler_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RxSchedulerConfig_ScheduleImportInfo::kChannelIdFieldNumber;
const int RxSchedulerConfig_ScheduleImportInfo::kImportPathFieldNumber;
#endif  // !_MSC_VER

RxSchedulerConfig_ScheduleImportInfo::RxSchedulerConfig_ScheduleImportInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RxSchedulerConfig_ScheduleImportInfo::InitAsDefaultInstance() {
}

RxSchedulerConfig_ScheduleImportInfo::RxSchedulerConfig_ScheduleImportInfo(const RxSchedulerConfig_ScheduleImportInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RxSchedulerConfig_ScheduleImportInfo::SharedCtor() {
  _cached_size_ = 0;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  importpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RxSchedulerConfig_ScheduleImportInfo::~RxSchedulerConfig_ScheduleImportInfo() {
  SharedDtor();
}

void RxSchedulerConfig_ScheduleImportInfo::SharedDtor() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (importpath_ != &::google::protobuf::internal::kEmptyString) {
    delete importpath_;
  }
  if (this != default_instance_) {
  }
}

void RxSchedulerConfig_ScheduleImportInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RxSchedulerConfig_ScheduleImportInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RxSchedulerConfig_ScheduleImportInfo_descriptor_;
}

const RxSchedulerConfig_ScheduleImportInfo& RxSchedulerConfig_ScheduleImportInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5frx_5fscheduler_2eproto();
  return *default_instance_;
}

RxSchedulerConfig_ScheduleImportInfo* RxSchedulerConfig_ScheduleImportInfo::default_instance_ = NULL;

RxSchedulerConfig_ScheduleImportInfo* RxSchedulerConfig_ScheduleImportInfo::New() const {
  return new RxSchedulerConfig_ScheduleImportInfo;
}

void RxSchedulerConfig_ScheduleImportInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_importpath()) {
      if (importpath_ != &::google::protobuf::internal::kEmptyString) {
        importpath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RxSchedulerConfig_ScheduleImportInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string channelId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_importPath;
        break;
      }

      // required string importPath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_importPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_importpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->importpath().data(), this->importpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RxSchedulerConfig_ScheduleImportInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string channelId = 1;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channelid(), output);
  }

  // required string importPath = 2;
  if (has_importpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->importpath().data(), this->importpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->importpath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RxSchedulerConfig_ScheduleImportInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string channelId = 1;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channelid(), target);
  }

  // required string importPath = 2;
  if (has_importpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->importpath().data(), this->importpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->importpath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RxSchedulerConfig_ScheduleImportInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string channelId = 1;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // required string importPath = 2;
    if (has_importpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->importpath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RxSchedulerConfig_ScheduleImportInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RxSchedulerConfig_ScheduleImportInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RxSchedulerConfig_ScheduleImportInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RxSchedulerConfig_ScheduleImportInfo::MergeFrom(const RxSchedulerConfig_ScheduleImportInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_importpath()) {
      set_importpath(from.importpath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RxSchedulerConfig_ScheduleImportInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RxSchedulerConfig_ScheduleImportInfo::CopyFrom(const RxSchedulerConfig_ScheduleImportInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RxSchedulerConfig_ScheduleImportInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RxSchedulerConfig_ScheduleImportInfo::Swap(RxSchedulerConfig_ScheduleImportInfo* other) {
  if (other != this) {
    std::swap(channelid_, other->channelid_);
    std::swap(importpath_, other->importpath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RxSchedulerConfig_ScheduleImportInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RxSchedulerConfig_ScheduleImportInfo_descriptor_;
  metadata.reflection = RxSchedulerConfig_ScheduleImportInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RxSchedulerConfig_TimelineImportInfo::kChannelIdFieldNumber;
const int RxSchedulerConfig_TimelineImportInfo::kStartTimeFieldNumber;
const int RxSchedulerConfig_TimelineImportInfo::kStopTimeFieldNumber;
const int RxSchedulerConfig_TimelineImportInfo::kFilePathFieldNumber;
#endif  // !_MSC_VER

RxSchedulerConfig_TimelineImportInfo::RxSchedulerConfig_TimelineImportInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RxSchedulerConfig_TimelineImportInfo::InitAsDefaultInstance() {
}

RxSchedulerConfig_TimelineImportInfo::RxSchedulerConfig_TimelineImportInfo(const RxSchedulerConfig_TimelineImportInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RxSchedulerConfig_TimelineImportInfo::SharedCtor() {
  _cached_size_ = 0;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stoptime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RxSchedulerConfig_TimelineImportInfo::~RxSchedulerConfig_TimelineImportInfo() {
  SharedDtor();
}

void RxSchedulerConfig_TimelineImportInfo::SharedDtor() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  if (stoptime_ != &::google::protobuf::internal::kEmptyString) {
    delete stoptime_;
  }
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (this != default_instance_) {
  }
}

void RxSchedulerConfig_TimelineImportInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RxSchedulerConfig_TimelineImportInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RxSchedulerConfig_TimelineImportInfo_descriptor_;
}

const RxSchedulerConfig_TimelineImportInfo& RxSchedulerConfig_TimelineImportInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5frx_5fscheduler_2eproto();
  return *default_instance_;
}

RxSchedulerConfig_TimelineImportInfo* RxSchedulerConfig_TimelineImportInfo::default_instance_ = NULL;

RxSchedulerConfig_TimelineImportInfo* RxSchedulerConfig_TimelineImportInfo::New() const {
  return new RxSchedulerConfig_TimelineImportInfo;
}

void RxSchedulerConfig_TimelineImportInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::kEmptyString) {
        starttime_->clear();
      }
    }
    if (has_stoptime()) {
      if (stoptime_ != &::google::protobuf::internal::kEmptyString) {
        stoptime_->clear();
      }
    }
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::kEmptyString) {
        filepath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RxSchedulerConfig_TimelineImportInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channelId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_startTime;
        break;
      }

      // optional string startTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stopTime;
        break;
      }

      // optional string stopTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stopTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoptime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stoptime().data(), this->stoptime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_filePath;
        break;
      }

      // optional string filePath = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RxSchedulerConfig_TimelineImportInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string channelId = 1;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channelid(), output);
  }

  // optional string startTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->starttime(), output);
  }

  // optional string stopTime = 3;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stoptime().data(), this->stoptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stoptime(), output);
  }

  // optional string filePath = 4;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->filepath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RxSchedulerConfig_TimelineImportInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string channelId = 1;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channelid(), target);
  }

  // optional string startTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->starttime(), target);
  }

  // optional string stopTime = 3;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stoptime().data(), this->stoptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stoptime(), target);
  }

  // optional string filePath = 4;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filepath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RxSchedulerConfig_TimelineImportInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string channelId = 1;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional string startTime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional string stopTime = 3;
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stoptime());
    }

    // optional string filePath = 4;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RxSchedulerConfig_TimelineImportInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RxSchedulerConfig_TimelineImportInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RxSchedulerConfig_TimelineImportInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RxSchedulerConfig_TimelineImportInfo::MergeFrom(const RxSchedulerConfig_TimelineImportInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RxSchedulerConfig_TimelineImportInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RxSchedulerConfig_TimelineImportInfo::CopyFrom(const RxSchedulerConfig_TimelineImportInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RxSchedulerConfig_TimelineImportInfo::IsInitialized() const {

  return true;
}

void RxSchedulerConfig_TimelineImportInfo::Swap(RxSchedulerConfig_TimelineImportInfo* other) {
  if (other != this) {
    std::swap(channelid_, other->channelid_);
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(filepath_, other->filepath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RxSchedulerConfig_TimelineImportInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RxSchedulerConfig_TimelineImportInfo_descriptor_;
  metadata.reflection = RxSchedulerConfig_TimelineImportInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RxSchedulerConfig_BlackoutImportInfo::kFilePathFieldNumber;
#endif  // !_MSC_VER

RxSchedulerConfig_BlackoutImportInfo::RxSchedulerConfig_BlackoutImportInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RxSchedulerConfig_BlackoutImportInfo::InitAsDefaultInstance() {
}

RxSchedulerConfig_BlackoutImportInfo::RxSchedulerConfig_BlackoutImportInfo(const RxSchedulerConfig_BlackoutImportInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RxSchedulerConfig_BlackoutImportInfo::SharedCtor() {
  _cached_size_ = 0;
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RxSchedulerConfig_BlackoutImportInfo::~RxSchedulerConfig_BlackoutImportInfo() {
  SharedDtor();
}

void RxSchedulerConfig_BlackoutImportInfo::SharedDtor() {
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (this != default_instance_) {
  }
}

void RxSchedulerConfig_BlackoutImportInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RxSchedulerConfig_BlackoutImportInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RxSchedulerConfig_BlackoutImportInfo_descriptor_;
}

const RxSchedulerConfig_BlackoutImportInfo& RxSchedulerConfig_BlackoutImportInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5frx_5fscheduler_2eproto();
  return *default_instance_;
}

RxSchedulerConfig_BlackoutImportInfo* RxSchedulerConfig_BlackoutImportInfo::default_instance_ = NULL;

RxSchedulerConfig_BlackoutImportInfo* RxSchedulerConfig_BlackoutImportInfo::New() const {
  return new RxSchedulerConfig_BlackoutImportInfo;
}

void RxSchedulerConfig_BlackoutImportInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::kEmptyString) {
        filepath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RxSchedulerConfig_BlackoutImportInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filePath = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RxSchedulerConfig_BlackoutImportInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filePath = 1;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filepath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RxSchedulerConfig_BlackoutImportInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string filePath = 1;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filepath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RxSchedulerConfig_BlackoutImportInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filePath = 1;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RxSchedulerConfig_BlackoutImportInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RxSchedulerConfig_BlackoutImportInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RxSchedulerConfig_BlackoutImportInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RxSchedulerConfig_BlackoutImportInfo::MergeFrom(const RxSchedulerConfig_BlackoutImportInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RxSchedulerConfig_BlackoutImportInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RxSchedulerConfig_BlackoutImportInfo::CopyFrom(const RxSchedulerConfig_BlackoutImportInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RxSchedulerConfig_BlackoutImportInfo::IsInitialized() const {

  return true;
}

void RxSchedulerConfig_BlackoutImportInfo::Swap(RxSchedulerConfig_BlackoutImportInfo* other) {
  if (other != this) {
    std::swap(filepath_, other->filepath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RxSchedulerConfig_BlackoutImportInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RxSchedulerConfig_BlackoutImportInfo_descriptor_;
  metadata.reflection = RxSchedulerConfig_BlackoutImportInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* RxSchedulerConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RxSchedulerConfig::kMsgNameFieldNumber;
const int RxSchedulerConfig::kScheduleImportInfosFieldNumber;
const int RxSchedulerConfig::kTimelineImportInfosFieldNumber;
const int RxSchedulerConfig::kBlackoutImportInfosFieldNumber;
#endif  // !_MSC_VER

RxSchedulerConfig::RxSchedulerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RxSchedulerConfig::InitAsDefaultInstance() {
}

RxSchedulerConfig::RxSchedulerConfig(const RxSchedulerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RxSchedulerConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RxSchedulerConfig::~RxSchedulerConfig() {
  SharedDtor();
}

void RxSchedulerConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void RxSchedulerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RxSchedulerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RxSchedulerConfig_descriptor_;
}

const RxSchedulerConfig& RxSchedulerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5frx_5fscheduler_2eproto();
  return *default_instance_;
}

RxSchedulerConfig* RxSchedulerConfig::default_instance_ = NULL;

RxSchedulerConfig* RxSchedulerConfig::New() const {
  return new RxSchedulerConfig;
}

void RxSchedulerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  scheduleimportinfos_.Clear();
  timelineimportinfos_.Clear();
  blackoutimportinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RxSchedulerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "service_rx_scheduler.RxSchedulerConfig"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scheduleImportInfos;
        break;
      }

      // repeated .service_rx_scheduler.RxSchedulerConfig.ScheduleImportInfo scheduleImportInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scheduleImportInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scheduleimportinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scheduleImportInfos;
        if (input->ExpectTag(26)) goto parse_timelineImportInfos;
        break;
      }

      // repeated .service_rx_scheduler.RxSchedulerConfig.TimelineImportInfo timelineImportInfos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timelineImportInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timelineimportinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timelineImportInfos;
        if (input->ExpectTag(34)) goto parse_blackoutImportInfos;
        break;
      }

      // repeated .service_rx_scheduler.RxSchedulerConfig.BlackoutImportInfo blackoutImportInfos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blackoutImportInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blackoutimportinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_blackoutImportInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RxSchedulerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "service_rx_scheduler.RxSchedulerConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated .service_rx_scheduler.RxSchedulerConfig.ScheduleImportInfo scheduleImportInfos = 2;
  for (int i = 0; i < this->scheduleimportinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scheduleimportinfos(i), output);
  }

  // repeated .service_rx_scheduler.RxSchedulerConfig.TimelineImportInfo timelineImportInfos = 3;
  for (int i = 0; i < this->timelineimportinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->timelineimportinfos(i), output);
  }

  // repeated .service_rx_scheduler.RxSchedulerConfig.BlackoutImportInfo blackoutImportInfos = 4;
  for (int i = 0; i < this->blackoutimportinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->blackoutimportinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RxSchedulerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "service_rx_scheduler.RxSchedulerConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated .service_rx_scheduler.RxSchedulerConfig.ScheduleImportInfo scheduleImportInfos = 2;
  for (int i = 0; i < this->scheduleimportinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scheduleimportinfos(i), target);
  }

  // repeated .service_rx_scheduler.RxSchedulerConfig.TimelineImportInfo timelineImportInfos = 3;
  for (int i = 0; i < this->timelineimportinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->timelineimportinfos(i), target);
  }

  // repeated .service_rx_scheduler.RxSchedulerConfig.BlackoutImportInfo blackoutImportInfos = 4;
  for (int i = 0; i < this->blackoutimportinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->blackoutimportinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RxSchedulerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "service_rx_scheduler.RxSchedulerConfig"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  // repeated .service_rx_scheduler.RxSchedulerConfig.ScheduleImportInfo scheduleImportInfos = 2;
  total_size += 1 * this->scheduleimportinfos_size();
  for (int i = 0; i < this->scheduleimportinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scheduleimportinfos(i));
  }

  // repeated .service_rx_scheduler.RxSchedulerConfig.TimelineImportInfo timelineImportInfos = 3;
  total_size += 1 * this->timelineimportinfos_size();
  for (int i = 0; i < this->timelineimportinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timelineimportinfos(i));
  }

  // repeated .service_rx_scheduler.RxSchedulerConfig.BlackoutImportInfo blackoutImportInfos = 4;
  total_size += 1 * this->blackoutimportinfos_size();
  for (int i = 0; i < this->blackoutimportinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blackoutimportinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RxSchedulerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RxSchedulerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RxSchedulerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RxSchedulerConfig::MergeFrom(const RxSchedulerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  scheduleimportinfos_.MergeFrom(from.scheduleimportinfos_);
  timelineimportinfos_.MergeFrom(from.timelineimportinfos_);
  blackoutimportinfos_.MergeFrom(from.blackoutimportinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RxSchedulerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RxSchedulerConfig::CopyFrom(const RxSchedulerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RxSchedulerConfig::IsInitialized() const {

  for (int i = 0; i < scheduleimportinfos_size(); i++) {
    if (!this->scheduleimportinfos(i).IsInitialized()) return false;
  }
  return true;
}

void RxSchedulerConfig::Swap(RxSchedulerConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    scheduleimportinfos_.Swap(&other->scheduleimportinfos_);
    timelineimportinfos_.Swap(&other->timelineimportinfos_);
    blackoutimportinfos_.Swap(&other->blackoutimportinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RxSchedulerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RxSchedulerConfig_descriptor_;
  metadata.reflection = RxSchedulerConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_rx_scheduler

// @@protoc_insertion_point(global_scope)
