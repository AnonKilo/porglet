// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_spectrumexporter.proto

#ifndef PROTOBUF_service_5fspectrumexporter_2eproto__INCLUDED
#define PROTOBUF_service_5fspectrumexporter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace service_spectrum_exporter {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_5fspectrumexporter_2eproto();
void protobuf_AssignDesc_service_5fspectrumexporter_2eproto();
void protobuf_ShutdownFile_service_5fspectrumexporter_2eproto();

class SpectrumExporterConfig;

// ===================================================================

class SpectrumExporterConfig : public ::google::protobuf::Message {
 public:
  SpectrumExporterConfig();
  virtual ~SpectrumExporterConfig();

  SpectrumExporterConfig(const SpectrumExporterConfig& from);

  inline SpectrumExporterConfig& operator=(const SpectrumExporterConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpectrumExporterConfig& default_instance();

  void Swap(SpectrumExporterConfig* other);

  // implements Message ----------------------------------------------

  SpectrumExporterConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpectrumExporterConfig& from);
  void MergeFrom(const SpectrumExporterConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "service_spectrum_exporter.SpectrumExporterConfig"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 channel = 2 [default = 72];
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional int32 fftLength = 3 [default = 4096];
  inline bool has_fftlength() const;
  inline void clear_fftlength();
  static const int kFftLengthFieldNumber = 3;
  inline ::google::protobuf::int32 fftlength() const;
  inline void set_fftlength(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:service_spectrum_exporter.SpectrumExporterConfig)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_fftlength();
  inline void clear_has_fftlength();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 fftlength_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_service_5fspectrumexporter_2eproto();
  friend void protobuf_AssignDesc_service_5fspectrumexporter_2eproto();
  friend void protobuf_ShutdownFile_service_5fspectrumexporter_2eproto();

  void InitAsDefaultInstance();
  static SpectrumExporterConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// SpectrumExporterConfig

// optional string msgName = 1 [default = "service_spectrum_exporter.SpectrumExporterConfig"];
inline bool SpectrumExporterConfig::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpectrumExporterConfig::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpectrumExporterConfig::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpectrumExporterConfig::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& SpectrumExporterConfig::msgname() const {
  return *msgname_;
}
inline void SpectrumExporterConfig::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SpectrumExporterConfig::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SpectrumExporterConfig::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpectrumExporterConfig::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* SpectrumExporterConfig::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void SpectrumExporterConfig::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 channel = 2 [default = 72];
inline bool SpectrumExporterConfig::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpectrumExporterConfig::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpectrumExporterConfig::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpectrumExporterConfig::clear_channel() {
  channel_ = 72;
  clear_has_channel();
}
inline ::google::protobuf::int32 SpectrumExporterConfig::channel() const {
  return channel_;
}
inline void SpectrumExporterConfig::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional int32 fftLength = 3 [default = 4096];
inline bool SpectrumExporterConfig::has_fftlength() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpectrumExporterConfig::set_has_fftlength() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpectrumExporterConfig::clear_has_fftlength() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpectrumExporterConfig::clear_fftlength() {
  fftlength_ = 4096;
  clear_has_fftlength();
}
inline ::google::protobuf::int32 SpectrumExporterConfig::fftlength() const {
  return fftlength_;
}
inline void SpectrumExporterConfig::set_fftlength(::google::protobuf::int32 value) {
  set_has_fftlength();
  fftlength_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_spectrum_exporter

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_5fspectrumexporter_2eproto__INCLUDED
