// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VideoCompressionMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VideoCompressionMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace video_compression_msg {

namespace {

const ::google::protobuf::Descriptor* ImageAvailable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageAvailable_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ImageAvailable_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ImageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_VideoCompressionMessages_2eproto() {
  protobuf_AddDesc_VideoCompressionMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VideoCompressionMessages.proto");
  GOOGLE_CHECK(file != NULL);
  ImageAvailable_descriptor_ = file->message_type(0);
  static const int ImageAvailable_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, imagewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, imageheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, videoport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, framerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, bytearray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, eltex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, soinum_),
  };
  ImageAvailable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageAvailable_descriptor_,
      ImageAvailable::default_instance_,
      ImageAvailable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageAvailable));
  ImageAvailable_Status_descriptor_ = ImageAvailable_descriptor_->enum_type(0);
  ImageRequest_descriptor_ = file->message_type(1);
  static const int ImageRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRequest, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRequest, eventid_),
  };
  ImageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageRequest_descriptor_,
      ImageRequest::default_instance_,
      ImageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VideoCompressionMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageAvailable_descriptor_, &ImageAvailable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageRequest_descriptor_, &ImageRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VideoCompressionMessages_2eproto() {
  delete ImageAvailable::default_instance_;
  delete ImageAvailable_reflection_;
  delete ImageAvailable::_default_msgname_;
  delete ImageRequest::default_instance_;
  delete ImageRequest_reflection_;
  delete ImageRequest::_default_msgname_;
}

void protobuf_AddDesc_VideoCompressionMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036VideoCompressionMessages.proto\022\025video_"
    "compression_msg\"\342\002\n\016ImageAvailable\022\037\n\007ms"
    "gName\030\001 \001(\t:\016IMAGEAVAILABLE\022\022\n\nimageWidt"
    "h\030\002 \001(\005\022\023\n\013imageHeight\030\003 \001(\005\022\021\n\tvideoPor"
    "t\030\004 \001(\005\022\021\n\tframerate\030\005 \001(\005\022\021\n\tbyteArray\030"
    "\006 \001(\014\022<\n\006status\030\007 \001(\0162,.video_compressio"
    "n_msg.ImageAvailable.Status\022\r\n\005msgID\030\010 \001"
    "(\005\022\017\n\007eventID\030\n \001(\t\022\020\n\010globalID\030\013 \001(\t\022\r\n"
    "\005eltex\030\014 \001(\t\022\016\n\006soiNum\030\r \001(\t\">\n\006Status\022\026"
    "\n\tAVAILABLE\020\377\377\377\377\377\377\377\377\377\001\022\017\n\013UNAVAILABLE\020\000\022"
    "\013\n\007PENDING\020\001\"M\n\014ImageRequest\022\035\n\007msgName\030"
    "\001 \001(\t:\014IMAGEREQUEST\022\r\n\005msgID\030\002 \001(\005\022\017\n\007ev"
    "entID\030\003 \001(\tB\025\n\023fv.protos.kepsvisor", 514);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VideoCompressionMessages.proto", &protobuf_RegisterTypes);
  ImageAvailable::_default_msgname_ =
      new ::std::string("IMAGEAVAILABLE", 14);
  ImageAvailable::default_instance_ = new ImageAvailable();
  ImageRequest::_default_msgname_ =
      new ::std::string("IMAGEREQUEST", 12);
  ImageRequest::default_instance_ = new ImageRequest();
  ImageAvailable::default_instance_->InitAsDefaultInstance();
  ImageRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VideoCompressionMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VideoCompressionMessages_2eproto {
  StaticDescriptorInitializer_VideoCompressionMessages_2eproto() {
    protobuf_AddDesc_VideoCompressionMessages_2eproto();
  }
} static_descriptor_initializer_VideoCompressionMessages_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ImageAvailable_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageAvailable_Status_descriptor_;
}
bool ImageAvailable_Status_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ImageAvailable_Status ImageAvailable::AVAILABLE;
const ImageAvailable_Status ImageAvailable::UNAVAILABLE;
const ImageAvailable_Status ImageAvailable::PENDING;
const ImageAvailable_Status ImageAvailable::Status_MIN;
const ImageAvailable_Status ImageAvailable::Status_MAX;
const int ImageAvailable::Status_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* ImageAvailable::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ImageAvailable::kMsgNameFieldNumber;
const int ImageAvailable::kImageWidthFieldNumber;
const int ImageAvailable::kImageHeightFieldNumber;
const int ImageAvailable::kVideoPortFieldNumber;
const int ImageAvailable::kFramerateFieldNumber;
const int ImageAvailable::kByteArrayFieldNumber;
const int ImageAvailable::kStatusFieldNumber;
const int ImageAvailable::kMsgIDFieldNumber;
const int ImageAvailable::kEventIDFieldNumber;
const int ImageAvailable::kGlobalIDFieldNumber;
const int ImageAvailable::kEltexFieldNumber;
const int ImageAvailable::kSoiNumFieldNumber;
#endif  // !_MSC_VER

ImageAvailable::ImageAvailable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageAvailable::InitAsDefaultInstance() {
}

ImageAvailable::ImageAvailable(const ImageAvailable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageAvailable::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  imagewidth_ = 0;
  imageheight_ = 0;
  videoport_ = 0;
  framerate_ = 0;
  bytearray_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = -1;
  msgid_ = 0;
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  soinum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageAvailable::~ImageAvailable() {
  SharedDtor();
}

void ImageAvailable::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (bytearray_ != &::google::protobuf::internal::kEmptyString) {
    delete bytearray_;
  }
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    delete eltex_;
  }
  if (soinum_ != &::google::protobuf::internal::kEmptyString) {
    delete soinum_;
  }
  if (this != default_instance_) {
  }
}

void ImageAvailable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageAvailable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageAvailable_descriptor_;
}

const ImageAvailable& ImageAvailable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VideoCompressionMessages_2eproto();
  return *default_instance_;
}

ImageAvailable* ImageAvailable::default_instance_ = NULL;

ImageAvailable* ImageAvailable::New() const {
  return new ImageAvailable;
}

void ImageAvailable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    imagewidth_ = 0;
    imageheight_ = 0;
    videoport_ = 0;
    framerate_ = 0;
    if (has_bytearray()) {
      if (bytearray_ != &::google::protobuf::internal::kEmptyString) {
        bytearray_->clear();
      }
    }
    status_ = -1;
    msgid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    if (has_eltex()) {
      if (eltex_ != &::google::protobuf::internal::kEmptyString) {
        eltex_->clear();
      }
    }
    if (has_soinum()) {
      if (soinum_ != &::google::protobuf::internal::kEmptyString) {
        soinum_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageAvailable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "IMAGEAVAILABLE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_imageWidth;
        break;
      }

      // optional int32 imageWidth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imageWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imagewidth_)));
          set_has_imagewidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_imageHeight;
        break;
      }

      // optional int32 imageHeight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imageHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imageheight_)));
          set_has_imageheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_videoPort;
        break;
      }

      // optional int32 videoPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_videoPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoport_)));
          set_has_videoport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_framerate;
        break;
      }

      // optional int32 framerate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_framerate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framerate_)));
          set_has_framerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_byteArray;
        break;
      }

      // optional bytes byteArray = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_byteArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytearray()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional .video_compression_msg.ImageAvailable.Status status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::video_compression_msg::ImageAvailable_Status_IsValid(value)) {
            set_status(static_cast< ::video_compression_msg::ImageAvailable_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_msgID;
        break;
      }

      // optional int32 msgID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_eventID;
        break;
      }

      // optional string eventID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_globalID;
        break;
      }

      // optional string globalID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_eltex;
        break;
      }

      // optional string eltex = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eltex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eltex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eltex().data(), this->eltex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_soiNum;
        break;
      }

      // optional string soiNum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soiNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soinum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soinum().data(), this->soinum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageAvailable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "IMAGEAVAILABLE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 imageWidth = 2;
  if (has_imagewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->imagewidth(), output);
  }

  // optional int32 imageHeight = 3;
  if (has_imageheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->imageheight(), output);
  }

  // optional int32 videoPort = 4;
  if (has_videoport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->videoport(), output);
  }

  // optional int32 framerate = 5;
  if (has_framerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->framerate(), output);
  }

  // optional bytes byteArray = 6;
  if (has_bytearray()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->bytearray(), output);
  }

  // optional .video_compression_msg.ImageAvailable.Status status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->status(), output);
  }

  // optional int32 msgID = 8;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->msgid(), output);
  }

  // optional string eventID = 10;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->eventid(), output);
  }

  // optional string globalID = 11;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->globalid(), output);
  }

  // optional string eltex = 12;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->eltex(), output);
  }

  // optional string soiNum = 13;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->soinum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageAvailable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "IMAGEAVAILABLE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 imageWidth = 2;
  if (has_imagewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->imagewidth(), target);
  }

  // optional int32 imageHeight = 3;
  if (has_imageheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->imageheight(), target);
  }

  // optional int32 videoPort = 4;
  if (has_videoport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->videoport(), target);
  }

  // optional int32 framerate = 5;
  if (has_framerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->framerate(), target);
  }

  // optional bytes byteArray = 6;
  if (has_bytearray()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->bytearray(), target);
  }

  // optional .video_compression_msg.ImageAvailable.Status status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->status(), target);
  }

  // optional int32 msgID = 8;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->msgid(), target);
  }

  // optional string eventID = 10;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->eventid(), target);
  }

  // optional string globalID = 11;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->globalid(), target);
  }

  // optional string eltex = 12;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->eltex(), target);
  }

  // optional string soiNum = 13;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->soinum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageAvailable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "IMAGEAVAILABLE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 imageWidth = 2;
    if (has_imagewidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imagewidth());
    }

    // optional int32 imageHeight = 3;
    if (has_imageheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imageheight());
    }

    // optional int32 videoPort = 4;
    if (has_videoport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videoport());
    }

    // optional int32 framerate = 5;
    if (has_framerate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->framerate());
    }

    // optional bytes byteArray = 6;
    if (has_bytearray()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytearray());
    }

    // optional .video_compression_msg.ImageAvailable.Status status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 msgID = 8;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string eventID = 10;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

    // optional string globalID = 11;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional string eltex = 12;
    if (has_eltex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eltex());
    }

    // optional string soiNum = 13;
    if (has_soinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soinum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageAvailable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageAvailable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageAvailable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageAvailable::MergeFrom(const ImageAvailable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_imagewidth()) {
      set_imagewidth(from.imagewidth());
    }
    if (from.has_imageheight()) {
      set_imageheight(from.imageheight());
    }
    if (from.has_videoport()) {
      set_videoport(from.videoport());
    }
    if (from.has_framerate()) {
      set_framerate(from.framerate());
    }
    if (from.has_bytearray()) {
      set_bytearray(from.bytearray());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_eltex()) {
      set_eltex(from.eltex());
    }
    if (from.has_soinum()) {
      set_soinum(from.soinum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageAvailable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageAvailable::CopyFrom(const ImageAvailable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageAvailable::IsInitialized() const {

  return true;
}

void ImageAvailable::Swap(ImageAvailable* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(imagewidth_, other->imagewidth_);
    std::swap(imageheight_, other->imageheight_);
    std::swap(videoport_, other->videoport_);
    std::swap(framerate_, other->framerate_);
    std::swap(bytearray_, other->bytearray_);
    std::swap(status_, other->status_);
    std::swap(msgid_, other->msgid_);
    std::swap(eventid_, other->eventid_);
    std::swap(globalid_, other->globalid_);
    std::swap(eltex_, other->eltex_);
    std::swap(soinum_, other->soinum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageAvailable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageAvailable_descriptor_;
  metadata.reflection = ImageAvailable_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ImageRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ImageRequest::kMsgNameFieldNumber;
const int ImageRequest::kMsgIDFieldNumber;
const int ImageRequest::kEventIDFieldNumber;
#endif  // !_MSC_VER

ImageRequest::ImageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageRequest::InitAsDefaultInstance() {
}

ImageRequest::ImageRequest(const ImageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  msgid_ = 0;
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageRequest::~ImageRequest() {
  SharedDtor();
}

void ImageRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (this != default_instance_) {
  }
}

void ImageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageRequest_descriptor_;
}

const ImageRequest& ImageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VideoCompressionMessages_2eproto();
  return *default_instance_;
}

ImageRequest* ImageRequest::default_instance_ = NULL;

ImageRequest* ImageRequest::New() const {
  return new ImageRequest;
}

void ImageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    msgid_ = 0;
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "IMAGEREQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgID;
        break;
      }

      // optional int32 msgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_eventID;
        break;
      }

      // optional string eventID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "IMAGEREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 msgID = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msgid(), output);
  }

  // optional string eventID = 3;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->eventid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "IMAGEREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 msgID = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->msgid(), target);
  }

  // optional string eventID = 3;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->eventid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "IMAGEREQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 msgID = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }

    // optional string eventID = 3;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageRequest::MergeFrom(const ImageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageRequest::CopyFrom(const ImageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageRequest::IsInitialized() const {

  return true;
}

void ImageRequest::Swap(ImageRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(msgid_, other->msgid_);
    std::swap(eventid_, other->eventid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageRequest_descriptor_;
  metadata.reflection = ImageRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace video_compression_msg

// @@protoc_insertion_point(global_scope)
