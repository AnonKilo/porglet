// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_spectrogram.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service_spectrogram.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace service_spectrogram {

namespace {

const ::google::protobuf::Descriptor* SpectrogramConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpectrogramConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_5fspectrogram_2eproto() {
  protobuf_AddDesc_service_5fspectrogram_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service_spectrogram.proto");
  GOOGLE_CHECK(file != NULL);
  SpectrogramConfig_descriptor_ = file->message_type(0);
  static const int SpectrogramConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramConfig, iqfilter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramConfig, fftlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramConfig, writeaux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramConfig, averages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramConfig, implementation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramConfig, gppconfig_),
  };
  SpectrogramConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpectrogramConfig_descriptor_,
      SpectrogramConfig::default_instance_,
      SpectrogramConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpectrogramConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_5fspectrogram_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpectrogramConfig_descriptor_, &SpectrogramConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_5fspectrogram_2eproto() {
  delete SpectrogramConfig::default_instance_;
  delete SpectrogramConfig_reflection_;
  delete SpectrogramConfig::_default_msgname_;
}

void protobuf_AddDesc_service_5fspectrogram_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::service_rxdataplane::protobuf_AddDesc_service_5frxdataplane_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031service_spectrogram.proto\022\023service_spe"
    "ctrogram\032\031service_rxdataplane.proto\"\304\002\n\021"
    "SpectrogramConfig\0226\n\007msgName\030\001 \001(\t:%serv"
    "ice_spectrogram.SpectrogramConfig\0225\n\010IQF"
    "ilter\030\002 \001(\0132#.service_rxdataplane.IQInge"
    "stFilter\022\027\n\tfftLength\030\003 \001(\005:\0044096\022\024\n\010wri"
    "teAux\030\004 \001(\005:\00272\022\023\n\010averages\030\005 \001(\005:\0011\022E\n\016"
    "implementation\030\006 \001(\0162(.service_rxdatapla"
    "ne.implementationTypes:\003GPP\0225\n\tGPPConfig"
    "\030\007 \001(\0132\".service_rxdataplane.GPPConfigIn"
    "foB\025\n\023fv.protos.kepsvisor", 425);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service_spectrogram.proto", &protobuf_RegisterTypes);
  SpectrogramConfig::_default_msgname_ =
      new ::std::string("service_spectrogram.SpectrogramConfig", 37);
  SpectrogramConfig::default_instance_ = new SpectrogramConfig();
  SpectrogramConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_5fspectrogram_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_5fspectrogram_2eproto {
  StaticDescriptorInitializer_service_5fspectrogram_2eproto() {
    protobuf_AddDesc_service_5fspectrogram_2eproto();
  }
} static_descriptor_initializer_service_5fspectrogram_2eproto_;

// ===================================================================

::std::string* SpectrogramConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SpectrogramConfig::kMsgNameFieldNumber;
const int SpectrogramConfig::kIQFilterFieldNumber;
const int SpectrogramConfig::kFftLengthFieldNumber;
const int SpectrogramConfig::kWriteAuxFieldNumber;
const int SpectrogramConfig::kAveragesFieldNumber;
const int SpectrogramConfig::kImplementationFieldNumber;
const int SpectrogramConfig::kGPPConfigFieldNumber;
#endif  // !_MSC_VER

SpectrogramConfig::SpectrogramConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpectrogramConfig::InitAsDefaultInstance() {
  iqfilter_ = const_cast< ::service_rxdataplane::IQIngestFilter*>(&::service_rxdataplane::IQIngestFilter::default_instance());
  gppconfig_ = const_cast< ::service_rxdataplane::GPPConfigInfo*>(&::service_rxdataplane::GPPConfigInfo::default_instance());
}

SpectrogramConfig::SpectrogramConfig(const SpectrogramConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpectrogramConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  iqfilter_ = NULL;
  fftlength_ = 4096;
  writeaux_ = 72;
  averages_ = 1;
  implementation_ = 1;
  gppconfig_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpectrogramConfig::~SpectrogramConfig() {
  SharedDtor();
}

void SpectrogramConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete iqfilter_;
    delete gppconfig_;
  }
}

void SpectrogramConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpectrogramConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpectrogramConfig_descriptor_;
}

const SpectrogramConfig& SpectrogramConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fspectrogram_2eproto();
  return *default_instance_;
}

SpectrogramConfig* SpectrogramConfig::default_instance_ = NULL;

SpectrogramConfig* SpectrogramConfig::New() const {
  return new SpectrogramConfig;
}

void SpectrogramConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_iqfilter()) {
      if (iqfilter_ != NULL) iqfilter_->::service_rxdataplane::IQIngestFilter::Clear();
    }
    fftlength_ = 4096;
    writeaux_ = 72;
    averages_ = 1;
    implementation_ = 1;
    if (has_gppconfig()) {
      if (gppconfig_ != NULL) gppconfig_->::service_rxdataplane::GPPConfigInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpectrogramConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "service_spectrogram.SpectrogramConfig"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IQFilter;
        break;
      }

      // optional .service_rxdataplane.IQIngestFilter IQFilter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IQFilter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iqfilter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fftLength;
        break;
      }

      // optional int32 fftLength = 3 [default = 4096];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fftLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fftlength_)));
          set_has_fftlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_writeAux;
        break;
      }

      // optional int32 writeAux = 4 [default = 72];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writeAux:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writeaux_)));
          set_has_writeaux();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_averages;
        break;
      }

      // optional int32 averages = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_averages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &averages_)));
          set_has_averages();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_implementation;
        break;
      }

      // optional .service_rxdataplane.implementationTypes implementation = 6 [default = GPP];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_implementation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::service_rxdataplane::implementationTypes_IsValid(value)) {
            set_implementation(static_cast< ::service_rxdataplane::implementationTypes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_GPPConfig;
        break;
      }

      // optional .service_rxdataplane.GPPConfigInfo GPPConfig = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GPPConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gppconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpectrogramConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "service_spectrogram.SpectrogramConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .service_rxdataplane.IQIngestFilter IQFilter = 2;
  if (has_iqfilter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iqfilter(), output);
  }

  // optional int32 fftLength = 3 [default = 4096];
  if (has_fftlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fftlength(), output);
  }

  // optional int32 writeAux = 4 [default = 72];
  if (has_writeaux()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->writeaux(), output);
  }

  // optional int32 averages = 5 [default = 1];
  if (has_averages()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->averages(), output);
  }

  // optional .service_rxdataplane.implementationTypes implementation = 6 [default = GPP];
  if (has_implementation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->implementation(), output);
  }

  // optional .service_rxdataplane.GPPConfigInfo GPPConfig = 7;
  if (has_gppconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->gppconfig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpectrogramConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "service_spectrogram.SpectrogramConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .service_rxdataplane.IQIngestFilter IQFilter = 2;
  if (has_iqfilter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iqfilter(), target);
  }

  // optional int32 fftLength = 3 [default = 4096];
  if (has_fftlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fftlength(), target);
  }

  // optional int32 writeAux = 4 [default = 72];
  if (has_writeaux()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->writeaux(), target);
  }

  // optional int32 averages = 5 [default = 1];
  if (has_averages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->averages(), target);
  }

  // optional .service_rxdataplane.implementationTypes implementation = 6 [default = GPP];
  if (has_implementation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->implementation(), target);
  }

  // optional .service_rxdataplane.GPPConfigInfo GPPConfig = 7;
  if (has_gppconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->gppconfig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpectrogramConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "service_spectrogram.SpectrogramConfig"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .service_rxdataplane.IQIngestFilter IQFilter = 2;
    if (has_iqfilter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iqfilter());
    }

    // optional int32 fftLength = 3 [default = 4096];
    if (has_fftlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fftlength());
    }

    // optional int32 writeAux = 4 [default = 72];
    if (has_writeaux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writeaux());
    }

    // optional int32 averages = 5 [default = 1];
    if (has_averages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->averages());
    }

    // optional .service_rxdataplane.implementationTypes implementation = 6 [default = GPP];
    if (has_implementation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->implementation());
    }

    // optional .service_rxdataplane.GPPConfigInfo GPPConfig = 7;
    if (has_gppconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gppconfig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpectrogramConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpectrogramConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpectrogramConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpectrogramConfig::MergeFrom(const SpectrogramConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_iqfilter()) {
      mutable_iqfilter()->::service_rxdataplane::IQIngestFilter::MergeFrom(from.iqfilter());
    }
    if (from.has_fftlength()) {
      set_fftlength(from.fftlength());
    }
    if (from.has_writeaux()) {
      set_writeaux(from.writeaux());
    }
    if (from.has_averages()) {
      set_averages(from.averages());
    }
    if (from.has_implementation()) {
      set_implementation(from.implementation());
    }
    if (from.has_gppconfig()) {
      mutable_gppconfig()->::service_rxdataplane::GPPConfigInfo::MergeFrom(from.gppconfig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpectrogramConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpectrogramConfig::CopyFrom(const SpectrogramConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpectrogramConfig::IsInitialized() const {

  return true;
}

void SpectrogramConfig::Swap(SpectrogramConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(iqfilter_, other->iqfilter_);
    std::swap(fftlength_, other->fftlength_);
    std::swap(writeaux_, other->writeaux_);
    std::swap(averages_, other->averages_);
    std::swap(implementation_, other->implementation_);
    std::swap(gppconfig_, other->gppconfig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpectrogramConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpectrogramConfig_descriptor_;
  metadata.reflection = SpectrogramConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_spectrogram

// @@protoc_insertion_point(global_scope)
