// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExtraForkMessages.proto

#ifndef PROTOBUF_ExtraForkMessages_2eproto__INCLUDED
#define PROTOBUF_ExtraForkMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace extra_fork_msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ExtraForkMessages_2eproto();
void protobuf_AssignDesc_ExtraForkMessages_2eproto();
void protobuf_ShutdownFile_ExtraForkMessages_2eproto();

class ExtraForkLoad;
class ExtraForkTable;
class ExtraForkReset;
class ExtraForkKill;
class ExtraForkClean;
class ExtraForkPoll;
class ExtraForkRaw;
class ExtraForkShow;
class ExtraForkPollRequest;
class ExtraForkPollResponse;

enum ExtraForkLoad_Status {
  ExtraForkLoad_Status_FAILED = -1,
  ExtraForkLoad_Status_REQUEST = 0,
  ExtraForkLoad_Status_SUCCESS = 1
};
bool ExtraForkLoad_Status_IsValid(int value);
const ExtraForkLoad_Status ExtraForkLoad_Status_Status_MIN = ExtraForkLoad_Status_FAILED;
const ExtraForkLoad_Status ExtraForkLoad_Status_Status_MAX = ExtraForkLoad_Status_SUCCESS;
const int ExtraForkLoad_Status_Status_ARRAYSIZE = ExtraForkLoad_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExtraForkLoad_Status_descriptor();
inline const ::std::string& ExtraForkLoad_Status_Name(ExtraForkLoad_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExtraForkLoad_Status_descriptor(), value);
}
inline bool ExtraForkLoad_Status_Parse(
    const ::std::string& name, ExtraForkLoad_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExtraForkLoad_Status>(
    ExtraForkLoad_Status_descriptor(), name, value);
}
enum ExtraForkPoll_Status {
  ExtraForkPoll_Status_FAILED = -1,
  ExtraForkPoll_Status_REQUEST = 0,
  ExtraForkPoll_Status_SUCCESS = 1
};
bool ExtraForkPoll_Status_IsValid(int value);
const ExtraForkPoll_Status ExtraForkPoll_Status_Status_MIN = ExtraForkPoll_Status_FAILED;
const ExtraForkPoll_Status ExtraForkPoll_Status_Status_MAX = ExtraForkPoll_Status_SUCCESS;
const int ExtraForkPoll_Status_Status_ARRAYSIZE = ExtraForkPoll_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExtraForkPoll_Status_descriptor();
inline const ::std::string& ExtraForkPoll_Status_Name(ExtraForkPoll_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExtraForkPoll_Status_descriptor(), value);
}
inline bool ExtraForkPoll_Status_Parse(
    const ::std::string& name, ExtraForkPoll_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExtraForkPoll_Status>(
    ExtraForkPoll_Status_descriptor(), name, value);
}
enum ExtraForkRaw_Status {
  ExtraForkRaw_Status_FAILED = -1,
  ExtraForkRaw_Status_REQUEST = 0,
  ExtraForkRaw_Status_SUCCESS = 1
};
bool ExtraForkRaw_Status_IsValid(int value);
const ExtraForkRaw_Status ExtraForkRaw_Status_Status_MIN = ExtraForkRaw_Status_FAILED;
const ExtraForkRaw_Status ExtraForkRaw_Status_Status_MAX = ExtraForkRaw_Status_SUCCESS;
const int ExtraForkRaw_Status_Status_ARRAYSIZE = ExtraForkRaw_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExtraForkRaw_Status_descriptor();
inline const ::std::string& ExtraForkRaw_Status_Name(ExtraForkRaw_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExtraForkRaw_Status_descriptor(), value);
}
inline bool ExtraForkRaw_Status_Parse(
    const ::std::string& name, ExtraForkRaw_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExtraForkRaw_Status>(
    ExtraForkRaw_Status_descriptor(), name, value);
}
// ===================================================================

class ExtraForkLoad : public ::google::protobuf::Message {
 public:
  ExtraForkLoad();
  virtual ~ExtraForkLoad();

  ExtraForkLoad(const ExtraForkLoad& from);

  inline ExtraForkLoad& operator=(const ExtraForkLoad& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtraForkLoad& default_instance();

  void Swap(ExtraForkLoad* other);

  // implements Message ----------------------------------------------

  ExtraForkLoad* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExtraForkLoad& from);
  void MergeFrom(const ExtraForkLoad& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ExtraForkLoad_Status Status;
  static const Status FAILED = ExtraForkLoad_Status_FAILED;
  static const Status REQUEST = ExtraForkLoad_Status_REQUEST;
  static const Status SUCCESS = ExtraForkLoad_Status_SUCCESS;
  static inline bool Status_IsValid(int value) {
    return ExtraForkLoad_Status_IsValid(value);
  }
  static const Status Status_MIN =
    ExtraForkLoad_Status_Status_MIN;
  static const Status Status_MAX =
    ExtraForkLoad_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    ExtraForkLoad_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return ExtraForkLoad_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return ExtraForkLoad_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return ExtraForkLoad_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "EXTRA_FORK_LOAD"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional int32 inputPort = 3;
  inline bool has_inputport() const;
  inline void clear_inputport();
  static const int kInputPortFieldNumber = 3;
  inline ::google::protobuf::int32 inputport() const;
  inline void set_inputport(::google::protobuf::int32 value);

  // optional int32 outputPort = 4;
  inline bool has_outputport() const;
  inline void clear_outputport();
  static const int kOutputPortFieldNumber = 4;
  inline ::google::protobuf::int32 outputport() const;
  inline void set_outputport(::google::protobuf::int32 value);

  // optional int32 videoPort = 5;
  inline bool has_videoport() const;
  inline void clear_videoport();
  static const int kVideoPortFieldNumber = 5;
  inline ::google::protobuf::int32 videoport() const;
  inline void set_videoport(::google::protobuf::int32 value);

  // optional string tableFile = 6;
  inline bool has_tablefile() const;
  inline void clear_tablefile();
  static const int kTableFileFieldNumber = 6;
  inline const ::std::string& tablefile() const;
  inline void set_tablefile(const ::std::string& value);
  inline void set_tablefile(const char* value);
  inline void set_tablefile(const char* value, size_t size);
  inline ::std::string* mutable_tablefile();
  inline ::std::string* release_tablefile();
  inline void set_allocated_tablefile(::std::string* tablefile);

  // optional bool show = 7;
  inline bool has_show() const;
  inline void clear_show();
  static const int kShowFieldNumber = 7;
  inline bool show() const;
  inline void set_show(bool value);

  // optional .extra_fork_msg.ExtraForkLoad.Status status = 8;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 8;
  inline ::extra_fork_msg::ExtraForkLoad_Status status() const;
  inline void set_status(::extra_fork_msg::ExtraForkLoad_Status value);

  // optional double timedelta = 9;
  inline bool has_timedelta() const;
  inline void clear_timedelta();
  static const int kTimedeltaFieldNumber = 9;
  inline double timedelta() const;
  inline void set_timedelta(double value);

  // optional int32 msgID = 10;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 10;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:extra_fork_msg.ExtraForkLoad)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_inputport();
  inline void clear_has_inputport();
  inline void set_has_outputport();
  inline void clear_has_outputport();
  inline void set_has_videoport();
  inline void clear_has_videoport();
  inline void set_has_tablefile();
  inline void clear_has_tablefile();
  inline void set_has_show();
  inline void clear_has_show();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_timedelta();
  inline void clear_has_timedelta();
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 inputport_;
  ::google::protobuf::int32 outputport_;
  ::google::protobuf::int32 videoport_;
  ::std::string* tablefile_;
  bool show_;
  int status_;
  double timedelta_;
  ::google::protobuf::int32 msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_ExtraForkMessages_2eproto();
  friend void protobuf_AssignDesc_ExtraForkMessages_2eproto();
  friend void protobuf_ShutdownFile_ExtraForkMessages_2eproto();

  void InitAsDefaultInstance();
  static ExtraForkLoad* default_instance_;
};
// -------------------------------------------------------------------

class ExtraForkTable : public ::google::protobuf::Message {
 public:
  ExtraForkTable();
  virtual ~ExtraForkTable();

  ExtraForkTable(const ExtraForkTable& from);

  inline ExtraForkTable& operator=(const ExtraForkTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtraForkTable& default_instance();

  void Swap(ExtraForkTable* other);

  // implements Message ----------------------------------------------

  ExtraForkTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExtraForkTable& from);
  void MergeFrom(const ExtraForkTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "EXTRA_FORK_TABLE"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional string tableFile = 3;
  inline bool has_tablefile() const;
  inline void clear_tablefile();
  static const int kTableFileFieldNumber = 3;
  inline const ::std::string& tablefile() const;
  inline void set_tablefile(const ::std::string& value);
  inline void set_tablefile(const char* value);
  inline void set_tablefile(const char* value, size_t size);
  inline ::std::string* mutable_tablefile();
  inline ::std::string* release_tablefile();
  inline void set_allocated_tablefile(::std::string* tablefile);

  // @@protoc_insertion_point(class_scope:extra_fork_msg.ExtraForkTable)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_tablefile();
  inline void clear_has_tablefile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* tablefile_;
  ::google::protobuf::int32 channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ExtraForkMessages_2eproto();
  friend void protobuf_AssignDesc_ExtraForkMessages_2eproto();
  friend void protobuf_ShutdownFile_ExtraForkMessages_2eproto();

  void InitAsDefaultInstance();
  static ExtraForkTable* default_instance_;
};
// -------------------------------------------------------------------

class ExtraForkReset : public ::google::protobuf::Message {
 public:
  ExtraForkReset();
  virtual ~ExtraForkReset();

  ExtraForkReset(const ExtraForkReset& from);

  inline ExtraForkReset& operator=(const ExtraForkReset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtraForkReset& default_instance();

  void Swap(ExtraForkReset* other);

  // implements Message ----------------------------------------------

  ExtraForkReset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExtraForkReset& from);
  void MergeFrom(const ExtraForkReset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "EXTRA_FORK_RESET"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:extra_fork_msg.ExtraForkReset)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_channel();
  inline void clear_has_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int32 channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ExtraForkMessages_2eproto();
  friend void protobuf_AssignDesc_ExtraForkMessages_2eproto();
  friend void protobuf_ShutdownFile_ExtraForkMessages_2eproto();

  void InitAsDefaultInstance();
  static ExtraForkReset* default_instance_;
};
// -------------------------------------------------------------------

class ExtraForkKill : public ::google::protobuf::Message {
 public:
  ExtraForkKill();
  virtual ~ExtraForkKill();

  ExtraForkKill(const ExtraForkKill& from);

  inline ExtraForkKill& operator=(const ExtraForkKill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtraForkKill& default_instance();

  void Swap(ExtraForkKill* other);

  // implements Message ----------------------------------------------

  ExtraForkKill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExtraForkKill& from);
  void MergeFrom(const ExtraForkKill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "EXTRA_FORK_KILL"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:extra_fork_msg.ExtraForkKill)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_channel();
  inline void clear_has_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int32 channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ExtraForkMessages_2eproto();
  friend void protobuf_AssignDesc_ExtraForkMessages_2eproto();
  friend void protobuf_ShutdownFile_ExtraForkMessages_2eproto();

  void InitAsDefaultInstance();
  static ExtraForkKill* default_instance_;
};
// -------------------------------------------------------------------

class ExtraForkClean : public ::google::protobuf::Message {
 public:
  ExtraForkClean();
  virtual ~ExtraForkClean();

  ExtraForkClean(const ExtraForkClean& from);

  inline ExtraForkClean& operator=(const ExtraForkClean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtraForkClean& default_instance();

  void Swap(ExtraForkClean* other);

  // implements Message ----------------------------------------------

  ExtraForkClean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExtraForkClean& from);
  void MergeFrom(const ExtraForkClean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "EXTRA_FORK_CLEAN"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:extra_fork_msg.ExtraForkClean)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_channel();
  inline void clear_has_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int32 channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ExtraForkMessages_2eproto();
  friend void protobuf_AssignDesc_ExtraForkMessages_2eproto();
  friend void protobuf_ShutdownFile_ExtraForkMessages_2eproto();

  void InitAsDefaultInstance();
  static ExtraForkClean* default_instance_;
};
// -------------------------------------------------------------------

class ExtraForkPoll : public ::google::protobuf::Message {
 public:
  ExtraForkPoll();
  virtual ~ExtraForkPoll();

  ExtraForkPoll(const ExtraForkPoll& from);

  inline ExtraForkPoll& operator=(const ExtraForkPoll& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtraForkPoll& default_instance();

  void Swap(ExtraForkPoll* other);

  // implements Message ----------------------------------------------

  ExtraForkPoll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExtraForkPoll& from);
  void MergeFrom(const ExtraForkPoll& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ExtraForkPoll_Status Status;
  static const Status FAILED = ExtraForkPoll_Status_FAILED;
  static const Status REQUEST = ExtraForkPoll_Status_REQUEST;
  static const Status SUCCESS = ExtraForkPoll_Status_SUCCESS;
  static inline bool Status_IsValid(int value) {
    return ExtraForkPoll_Status_IsValid(value);
  }
  static const Status Status_MIN =
    ExtraForkPoll_Status_Status_MIN;
  static const Status Status_MAX =
    ExtraForkPoll_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    ExtraForkPoll_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return ExtraForkPoll_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return ExtraForkPoll_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return ExtraForkPoll_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "EXTRA_FORK_POLL"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional string parameter = 3;
  inline bool has_parameter() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 3;
  inline const ::std::string& parameter() const;
  inline void set_parameter(const ::std::string& value);
  inline void set_parameter(const char* value);
  inline void set_parameter(const char* value, size_t size);
  inline ::std::string* mutable_parameter();
  inline ::std::string* release_parameter();
  inline void set_allocated_parameter(::std::string* parameter);

  // optional float value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline float value() const;
  inline void set_value(float value);

  // optional .extra_fork_msg.ExtraForkPoll.Status status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::extra_fork_msg::ExtraForkPoll_Status status() const;
  inline void set_status(::extra_fork_msg::ExtraForkPoll_Status value);

  // optional int32 msgID = 6;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 6;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:extra_fork_msg.ExtraForkPoll)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_parameter();
  inline void clear_has_parameter();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* parameter_;
  ::google::protobuf::int32 channel_;
  float value_;
  int status_;
  ::google::protobuf::int32 msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ExtraForkMessages_2eproto();
  friend void protobuf_AssignDesc_ExtraForkMessages_2eproto();
  friend void protobuf_ShutdownFile_ExtraForkMessages_2eproto();

  void InitAsDefaultInstance();
  static ExtraForkPoll* default_instance_;
};
// -------------------------------------------------------------------

class ExtraForkRaw : public ::google::protobuf::Message {
 public:
  ExtraForkRaw();
  virtual ~ExtraForkRaw();

  ExtraForkRaw(const ExtraForkRaw& from);

  inline ExtraForkRaw& operator=(const ExtraForkRaw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtraForkRaw& default_instance();

  void Swap(ExtraForkRaw* other);

  // implements Message ----------------------------------------------

  ExtraForkRaw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExtraForkRaw& from);
  void MergeFrom(const ExtraForkRaw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ExtraForkRaw_Status Status;
  static const Status FAILED = ExtraForkRaw_Status_FAILED;
  static const Status REQUEST = ExtraForkRaw_Status_REQUEST;
  static const Status SUCCESS = ExtraForkRaw_Status_SUCCESS;
  static inline bool Status_IsValid(int value) {
    return ExtraForkRaw_Status_IsValid(value);
  }
  static const Status Status_MIN =
    ExtraForkRaw_Status_Status_MIN;
  static const Status Status_MAX =
    ExtraForkRaw_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    ExtraForkRaw_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return ExtraForkRaw_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return ExtraForkRaw_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return ExtraForkRaw_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "EXTRA_FORK_RAW"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional string parameter = 3;
  inline bool has_parameter() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 3;
  inline const ::std::string& parameter() const;
  inline void set_parameter(const ::std::string& value);
  inline void set_parameter(const char* value);
  inline void set_parameter(const char* value, size_t size);
  inline ::std::string* mutable_parameter();
  inline ::std::string* release_parameter();
  inline void set_allocated_parameter(::std::string* parameter);

  // optional string resp = 4;
  inline bool has_resp() const;
  inline void clear_resp();
  static const int kRespFieldNumber = 4;
  inline const ::std::string& resp() const;
  inline void set_resp(const ::std::string& value);
  inline void set_resp(const char* value);
  inline void set_resp(const char* value, size_t size);
  inline ::std::string* mutable_resp();
  inline ::std::string* release_resp();
  inline void set_allocated_resp(::std::string* resp);

  // optional float value = 5;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline float value() const;
  inline void set_value(float value);

  // optional .extra_fork_msg.ExtraForkRaw.Status status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::extra_fork_msg::ExtraForkRaw_Status status() const;
  inline void set_status(::extra_fork_msg::ExtraForkRaw_Status value);

  // optional int32 msgID = 7;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 7;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:extra_fork_msg.ExtraForkRaw)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_parameter();
  inline void clear_has_parameter();
  inline void set_has_resp();
  inline void clear_has_resp();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* parameter_;
  ::google::protobuf::int32 channel_;
  float value_;
  ::std::string* resp_;
  int status_;
  ::google::protobuf::int32 msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ExtraForkMessages_2eproto();
  friend void protobuf_AssignDesc_ExtraForkMessages_2eproto();
  friend void protobuf_ShutdownFile_ExtraForkMessages_2eproto();

  void InitAsDefaultInstance();
  static ExtraForkRaw* default_instance_;
};
// -------------------------------------------------------------------

class ExtraForkShow : public ::google::protobuf::Message {
 public:
  ExtraForkShow();
  virtual ~ExtraForkShow();

  ExtraForkShow(const ExtraForkShow& from);

  inline ExtraForkShow& operator=(const ExtraForkShow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtraForkShow& default_instance();

  void Swap(ExtraForkShow* other);

  // implements Message ----------------------------------------------

  ExtraForkShow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExtraForkShow& from);
  void MergeFrom(const ExtraForkShow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "EXTRA_FORK_SHOW"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional bool show = 3;
  inline bool has_show() const;
  inline void clear_show();
  static const int kShowFieldNumber = 3;
  inline bool show() const;
  inline void set_show(bool value);

  // @@protoc_insertion_point(class_scope:extra_fork_msg.ExtraForkShow)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_show();
  inline void clear_has_show();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int32 channel_;
  bool show_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ExtraForkMessages_2eproto();
  friend void protobuf_AssignDesc_ExtraForkMessages_2eproto();
  friend void protobuf_ShutdownFile_ExtraForkMessages_2eproto();

  void InitAsDefaultInstance();
  static ExtraForkShow* default_instance_;
};
// -------------------------------------------------------------------

class ExtraForkPollRequest : public ::google::protobuf::Message {
 public:
  ExtraForkPollRequest();
  virtual ~ExtraForkPollRequest();

  ExtraForkPollRequest(const ExtraForkPollRequest& from);

  inline ExtraForkPollRequest& operator=(const ExtraForkPollRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtraForkPollRequest& default_instance();

  void Swap(ExtraForkPollRequest* other);

  // implements Message ----------------------------------------------

  ExtraForkPollRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExtraForkPollRequest& from);
  void MergeFrom(const ExtraForkPollRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "EXTRA_FORK_POLL_REQUEST"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // repeated string properties = 2;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  inline const ::std::string& properties(int index) const;
  inline ::std::string* mutable_properties(int index);
  inline void set_properties(int index, const ::std::string& value);
  inline void set_properties(int index, const char* value);
  inline void set_properties(int index, const char* value, size_t size);
  inline ::std::string* add_properties();
  inline void add_properties(const ::std::string& value);
  inline void add_properties(const char* value);
  inline void add_properties(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_properties();

  // @@protoc_insertion_point(class_scope:extra_fork_msg.ExtraForkPollRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> properties_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ExtraForkMessages_2eproto();
  friend void protobuf_AssignDesc_ExtraForkMessages_2eproto();
  friend void protobuf_ShutdownFile_ExtraForkMessages_2eproto();

  void InitAsDefaultInstance();
  static ExtraForkPollRequest* default_instance_;
};
// -------------------------------------------------------------------

class ExtraForkPollResponse : public ::google::protobuf::Message {
 public:
  ExtraForkPollResponse();
  virtual ~ExtraForkPollResponse();

  ExtraForkPollResponse(const ExtraForkPollResponse& from);

  inline ExtraForkPollResponse& operator=(const ExtraForkPollResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtraForkPollResponse& default_instance();

  void Swap(ExtraForkPollResponse* other);

  // implements Message ----------------------------------------------

  ExtraForkPollResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExtraForkPollResponse& from);
  void MergeFrom(const ExtraForkPollResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "EXTRA_FORK_POLL_RESPONSE"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // repeated string properties = 2;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  inline const ::std::string& properties(int index) const;
  inline ::std::string* mutable_properties(int index);
  inline void set_properties(int index, const ::std::string& value);
  inline void set_properties(int index, const char* value);
  inline void set_properties(int index, const char* value, size_t size);
  inline ::std::string* add_properties();
  inline void add_properties(const ::std::string& value);
  inline void add_properties(const char* value);
  inline void add_properties(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_properties();

  // optional .extra_fork_msg.ExtraForkPollRequest request = 3;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 3;
  inline const ::extra_fork_msg::ExtraForkPollRequest& request() const;
  inline ::extra_fork_msg::ExtraForkPollRequest* mutable_request();
  inline ::extra_fork_msg::ExtraForkPollRequest* release_request();
  inline void set_allocated_request(::extra_fork_msg::ExtraForkPollRequest* request);

  // @@protoc_insertion_point(class_scope:extra_fork_msg.ExtraForkPollResponse)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_request();
  inline void clear_has_request();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> properties_;
  ::extra_fork_msg::ExtraForkPollRequest* request_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ExtraForkMessages_2eproto();
  friend void protobuf_AssignDesc_ExtraForkMessages_2eproto();
  friend void protobuf_ShutdownFile_ExtraForkMessages_2eproto();

  void InitAsDefaultInstance();
  static ExtraForkPollResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ExtraForkLoad

// optional string msgName = 1 [default = "EXTRA_FORK_LOAD"];
inline bool ExtraForkLoad::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtraForkLoad::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtraForkLoad::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtraForkLoad::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& ExtraForkLoad::msgname() const {
  return *msgname_;
}
inline void ExtraForkLoad::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkLoad::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkLoad::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtraForkLoad::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* ExtraForkLoad::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void ExtraForkLoad::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 channel = 2;
inline bool ExtraForkLoad::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtraForkLoad::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtraForkLoad::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtraForkLoad::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 ExtraForkLoad::channel() const {
  return channel_;
}
inline void ExtraForkLoad::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional int32 inputPort = 3;
inline bool ExtraForkLoad::has_inputport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExtraForkLoad::set_has_inputport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExtraForkLoad::clear_has_inputport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExtraForkLoad::clear_inputport() {
  inputport_ = 0;
  clear_has_inputport();
}
inline ::google::protobuf::int32 ExtraForkLoad::inputport() const {
  return inputport_;
}
inline void ExtraForkLoad::set_inputport(::google::protobuf::int32 value) {
  set_has_inputport();
  inputport_ = value;
}

// optional int32 outputPort = 4;
inline bool ExtraForkLoad::has_outputport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExtraForkLoad::set_has_outputport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExtraForkLoad::clear_has_outputport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExtraForkLoad::clear_outputport() {
  outputport_ = 0;
  clear_has_outputport();
}
inline ::google::protobuf::int32 ExtraForkLoad::outputport() const {
  return outputport_;
}
inline void ExtraForkLoad::set_outputport(::google::protobuf::int32 value) {
  set_has_outputport();
  outputport_ = value;
}

// optional int32 videoPort = 5;
inline bool ExtraForkLoad::has_videoport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExtraForkLoad::set_has_videoport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExtraForkLoad::clear_has_videoport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExtraForkLoad::clear_videoport() {
  videoport_ = 0;
  clear_has_videoport();
}
inline ::google::protobuf::int32 ExtraForkLoad::videoport() const {
  return videoport_;
}
inline void ExtraForkLoad::set_videoport(::google::protobuf::int32 value) {
  set_has_videoport();
  videoport_ = value;
}

// optional string tableFile = 6;
inline bool ExtraForkLoad::has_tablefile() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExtraForkLoad::set_has_tablefile() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExtraForkLoad::clear_has_tablefile() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExtraForkLoad::clear_tablefile() {
  if (tablefile_ != &::google::protobuf::internal::kEmptyString) {
    tablefile_->clear();
  }
  clear_has_tablefile();
}
inline const ::std::string& ExtraForkLoad::tablefile() const {
  return *tablefile_;
}
inline void ExtraForkLoad::set_tablefile(const ::std::string& value) {
  set_has_tablefile();
  if (tablefile_ == &::google::protobuf::internal::kEmptyString) {
    tablefile_ = new ::std::string;
  }
  tablefile_->assign(value);
}
inline void ExtraForkLoad::set_tablefile(const char* value) {
  set_has_tablefile();
  if (tablefile_ == &::google::protobuf::internal::kEmptyString) {
    tablefile_ = new ::std::string;
  }
  tablefile_->assign(value);
}
inline void ExtraForkLoad::set_tablefile(const char* value, size_t size) {
  set_has_tablefile();
  if (tablefile_ == &::google::protobuf::internal::kEmptyString) {
    tablefile_ = new ::std::string;
  }
  tablefile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtraForkLoad::mutable_tablefile() {
  set_has_tablefile();
  if (tablefile_ == &::google::protobuf::internal::kEmptyString) {
    tablefile_ = new ::std::string;
  }
  return tablefile_;
}
inline ::std::string* ExtraForkLoad::release_tablefile() {
  clear_has_tablefile();
  if (tablefile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablefile_;
    tablefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExtraForkLoad::set_allocated_tablefile(::std::string* tablefile) {
  if (tablefile_ != &::google::protobuf::internal::kEmptyString) {
    delete tablefile_;
  }
  if (tablefile) {
    set_has_tablefile();
    tablefile_ = tablefile;
  } else {
    clear_has_tablefile();
    tablefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool show = 7;
inline bool ExtraForkLoad::has_show() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExtraForkLoad::set_has_show() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExtraForkLoad::clear_has_show() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExtraForkLoad::clear_show() {
  show_ = false;
  clear_has_show();
}
inline bool ExtraForkLoad::show() const {
  return show_;
}
inline void ExtraForkLoad::set_show(bool value) {
  set_has_show();
  show_ = value;
}

// optional .extra_fork_msg.ExtraForkLoad.Status status = 8;
inline bool ExtraForkLoad::has_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ExtraForkLoad::set_has_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ExtraForkLoad::clear_has_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ExtraForkLoad::clear_status() {
  status_ = -1;
  clear_has_status();
}
inline ::extra_fork_msg::ExtraForkLoad_Status ExtraForkLoad::status() const {
  return static_cast< ::extra_fork_msg::ExtraForkLoad_Status >(status_);
}
inline void ExtraForkLoad::set_status(::extra_fork_msg::ExtraForkLoad_Status value) {
  assert(::extra_fork_msg::ExtraForkLoad_Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional double timedelta = 9;
inline bool ExtraForkLoad::has_timedelta() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ExtraForkLoad::set_has_timedelta() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ExtraForkLoad::clear_has_timedelta() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ExtraForkLoad::clear_timedelta() {
  timedelta_ = 0;
  clear_has_timedelta();
}
inline double ExtraForkLoad::timedelta() const {
  return timedelta_;
}
inline void ExtraForkLoad::set_timedelta(double value) {
  set_has_timedelta();
  timedelta_ = value;
}

// optional int32 msgID = 10;
inline bool ExtraForkLoad::has_msgid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ExtraForkLoad::set_has_msgid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ExtraForkLoad::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ExtraForkLoad::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 ExtraForkLoad::msgid() const {
  return msgid_;
}
inline void ExtraForkLoad::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
}

// -------------------------------------------------------------------

// ExtraForkTable

// optional string msgName = 1 [default = "EXTRA_FORK_TABLE"];
inline bool ExtraForkTable::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtraForkTable::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtraForkTable::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtraForkTable::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& ExtraForkTable::msgname() const {
  return *msgname_;
}
inline void ExtraForkTable::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkTable::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkTable::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtraForkTable::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* ExtraForkTable::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void ExtraForkTable::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 channel = 2;
inline bool ExtraForkTable::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtraForkTable::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtraForkTable::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtraForkTable::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 ExtraForkTable::channel() const {
  return channel_;
}
inline void ExtraForkTable::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional string tableFile = 3;
inline bool ExtraForkTable::has_tablefile() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExtraForkTable::set_has_tablefile() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExtraForkTable::clear_has_tablefile() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExtraForkTable::clear_tablefile() {
  if (tablefile_ != &::google::protobuf::internal::kEmptyString) {
    tablefile_->clear();
  }
  clear_has_tablefile();
}
inline const ::std::string& ExtraForkTable::tablefile() const {
  return *tablefile_;
}
inline void ExtraForkTable::set_tablefile(const ::std::string& value) {
  set_has_tablefile();
  if (tablefile_ == &::google::protobuf::internal::kEmptyString) {
    tablefile_ = new ::std::string;
  }
  tablefile_->assign(value);
}
inline void ExtraForkTable::set_tablefile(const char* value) {
  set_has_tablefile();
  if (tablefile_ == &::google::protobuf::internal::kEmptyString) {
    tablefile_ = new ::std::string;
  }
  tablefile_->assign(value);
}
inline void ExtraForkTable::set_tablefile(const char* value, size_t size) {
  set_has_tablefile();
  if (tablefile_ == &::google::protobuf::internal::kEmptyString) {
    tablefile_ = new ::std::string;
  }
  tablefile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtraForkTable::mutable_tablefile() {
  set_has_tablefile();
  if (tablefile_ == &::google::protobuf::internal::kEmptyString) {
    tablefile_ = new ::std::string;
  }
  return tablefile_;
}
inline ::std::string* ExtraForkTable::release_tablefile() {
  clear_has_tablefile();
  if (tablefile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablefile_;
    tablefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExtraForkTable::set_allocated_tablefile(::std::string* tablefile) {
  if (tablefile_ != &::google::protobuf::internal::kEmptyString) {
    delete tablefile_;
  }
  if (tablefile) {
    set_has_tablefile();
    tablefile_ = tablefile;
  } else {
    clear_has_tablefile();
    tablefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ExtraForkReset

// optional string msgName = 1 [default = "EXTRA_FORK_RESET"];
inline bool ExtraForkReset::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtraForkReset::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtraForkReset::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtraForkReset::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& ExtraForkReset::msgname() const {
  return *msgname_;
}
inline void ExtraForkReset::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkReset::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkReset::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtraForkReset::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* ExtraForkReset::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void ExtraForkReset::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 channel = 2;
inline bool ExtraForkReset::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtraForkReset::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtraForkReset::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtraForkReset::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 ExtraForkReset::channel() const {
  return channel_;
}
inline void ExtraForkReset::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// -------------------------------------------------------------------

// ExtraForkKill

// optional string msgName = 1 [default = "EXTRA_FORK_KILL"];
inline bool ExtraForkKill::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtraForkKill::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtraForkKill::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtraForkKill::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& ExtraForkKill::msgname() const {
  return *msgname_;
}
inline void ExtraForkKill::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkKill::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkKill::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtraForkKill::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* ExtraForkKill::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void ExtraForkKill::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 channel = 2;
inline bool ExtraForkKill::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtraForkKill::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtraForkKill::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtraForkKill::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 ExtraForkKill::channel() const {
  return channel_;
}
inline void ExtraForkKill::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// -------------------------------------------------------------------

// ExtraForkClean

// optional string msgName = 1 [default = "EXTRA_FORK_CLEAN"];
inline bool ExtraForkClean::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtraForkClean::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtraForkClean::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtraForkClean::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& ExtraForkClean::msgname() const {
  return *msgname_;
}
inline void ExtraForkClean::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkClean::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkClean::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtraForkClean::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* ExtraForkClean::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void ExtraForkClean::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 channel = 2;
inline bool ExtraForkClean::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtraForkClean::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtraForkClean::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtraForkClean::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 ExtraForkClean::channel() const {
  return channel_;
}
inline void ExtraForkClean::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// -------------------------------------------------------------------

// ExtraForkPoll

// optional string msgName = 1 [default = "EXTRA_FORK_POLL"];
inline bool ExtraForkPoll::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtraForkPoll::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtraForkPoll::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtraForkPoll::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& ExtraForkPoll::msgname() const {
  return *msgname_;
}
inline void ExtraForkPoll::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkPoll::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkPoll::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtraForkPoll::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* ExtraForkPoll::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void ExtraForkPoll::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 channel = 2;
inline bool ExtraForkPoll::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtraForkPoll::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtraForkPoll::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtraForkPoll::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 ExtraForkPoll::channel() const {
  return channel_;
}
inline void ExtraForkPoll::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional string parameter = 3;
inline bool ExtraForkPoll::has_parameter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExtraForkPoll::set_has_parameter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExtraForkPoll::clear_has_parameter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExtraForkPoll::clear_parameter() {
  if (parameter_ != &::google::protobuf::internal::kEmptyString) {
    parameter_->clear();
  }
  clear_has_parameter();
}
inline const ::std::string& ExtraForkPoll::parameter() const {
  return *parameter_;
}
inline void ExtraForkPoll::set_parameter(const ::std::string& value) {
  set_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kEmptyString) {
    parameter_ = new ::std::string;
  }
  parameter_->assign(value);
}
inline void ExtraForkPoll::set_parameter(const char* value) {
  set_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kEmptyString) {
    parameter_ = new ::std::string;
  }
  parameter_->assign(value);
}
inline void ExtraForkPoll::set_parameter(const char* value, size_t size) {
  set_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kEmptyString) {
    parameter_ = new ::std::string;
  }
  parameter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtraForkPoll::mutable_parameter() {
  set_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kEmptyString) {
    parameter_ = new ::std::string;
  }
  return parameter_;
}
inline ::std::string* ExtraForkPoll::release_parameter() {
  clear_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parameter_;
    parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExtraForkPoll::set_allocated_parameter(::std::string* parameter) {
  if (parameter_ != &::google::protobuf::internal::kEmptyString) {
    delete parameter_;
  }
  if (parameter) {
    set_has_parameter();
    parameter_ = parameter;
  } else {
    clear_has_parameter();
    parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float value = 4;
inline bool ExtraForkPoll::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExtraForkPoll::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExtraForkPoll::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExtraForkPoll::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float ExtraForkPoll::value() const {
  return value_;
}
inline void ExtraForkPoll::set_value(float value) {
  set_has_value();
  value_ = value;
}

// optional .extra_fork_msg.ExtraForkPoll.Status status = 5;
inline bool ExtraForkPoll::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExtraForkPoll::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExtraForkPoll::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExtraForkPoll::clear_status() {
  status_ = -1;
  clear_has_status();
}
inline ::extra_fork_msg::ExtraForkPoll_Status ExtraForkPoll::status() const {
  return static_cast< ::extra_fork_msg::ExtraForkPoll_Status >(status_);
}
inline void ExtraForkPoll::set_status(::extra_fork_msg::ExtraForkPoll_Status value) {
  assert(::extra_fork_msg::ExtraForkPoll_Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional int32 msgID = 6;
inline bool ExtraForkPoll::has_msgid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExtraForkPoll::set_has_msgid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExtraForkPoll::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExtraForkPoll::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 ExtraForkPoll::msgid() const {
  return msgid_;
}
inline void ExtraForkPoll::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
}

// -------------------------------------------------------------------

// ExtraForkRaw

// optional string msgName = 1 [default = "EXTRA_FORK_RAW"];
inline bool ExtraForkRaw::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtraForkRaw::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtraForkRaw::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtraForkRaw::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& ExtraForkRaw::msgname() const {
  return *msgname_;
}
inline void ExtraForkRaw::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkRaw::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkRaw::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtraForkRaw::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* ExtraForkRaw::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void ExtraForkRaw::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 channel = 2;
inline bool ExtraForkRaw::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtraForkRaw::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtraForkRaw::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtraForkRaw::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 ExtraForkRaw::channel() const {
  return channel_;
}
inline void ExtraForkRaw::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional string parameter = 3;
inline bool ExtraForkRaw::has_parameter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExtraForkRaw::set_has_parameter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExtraForkRaw::clear_has_parameter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExtraForkRaw::clear_parameter() {
  if (parameter_ != &::google::protobuf::internal::kEmptyString) {
    parameter_->clear();
  }
  clear_has_parameter();
}
inline const ::std::string& ExtraForkRaw::parameter() const {
  return *parameter_;
}
inline void ExtraForkRaw::set_parameter(const ::std::string& value) {
  set_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kEmptyString) {
    parameter_ = new ::std::string;
  }
  parameter_->assign(value);
}
inline void ExtraForkRaw::set_parameter(const char* value) {
  set_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kEmptyString) {
    parameter_ = new ::std::string;
  }
  parameter_->assign(value);
}
inline void ExtraForkRaw::set_parameter(const char* value, size_t size) {
  set_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kEmptyString) {
    parameter_ = new ::std::string;
  }
  parameter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtraForkRaw::mutable_parameter() {
  set_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kEmptyString) {
    parameter_ = new ::std::string;
  }
  return parameter_;
}
inline ::std::string* ExtraForkRaw::release_parameter() {
  clear_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parameter_;
    parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExtraForkRaw::set_allocated_parameter(::std::string* parameter) {
  if (parameter_ != &::google::protobuf::internal::kEmptyString) {
    delete parameter_;
  }
  if (parameter) {
    set_has_parameter();
    parameter_ = parameter;
  } else {
    clear_has_parameter();
    parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string resp = 4;
inline bool ExtraForkRaw::has_resp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExtraForkRaw::set_has_resp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExtraForkRaw::clear_has_resp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExtraForkRaw::clear_resp() {
  if (resp_ != &::google::protobuf::internal::kEmptyString) {
    resp_->clear();
  }
  clear_has_resp();
}
inline const ::std::string& ExtraForkRaw::resp() const {
  return *resp_;
}
inline void ExtraForkRaw::set_resp(const ::std::string& value) {
  set_has_resp();
  if (resp_ == &::google::protobuf::internal::kEmptyString) {
    resp_ = new ::std::string;
  }
  resp_->assign(value);
}
inline void ExtraForkRaw::set_resp(const char* value) {
  set_has_resp();
  if (resp_ == &::google::protobuf::internal::kEmptyString) {
    resp_ = new ::std::string;
  }
  resp_->assign(value);
}
inline void ExtraForkRaw::set_resp(const char* value, size_t size) {
  set_has_resp();
  if (resp_ == &::google::protobuf::internal::kEmptyString) {
    resp_ = new ::std::string;
  }
  resp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtraForkRaw::mutable_resp() {
  set_has_resp();
  if (resp_ == &::google::protobuf::internal::kEmptyString) {
    resp_ = new ::std::string;
  }
  return resp_;
}
inline ::std::string* ExtraForkRaw::release_resp() {
  clear_has_resp();
  if (resp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resp_;
    resp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExtraForkRaw::set_allocated_resp(::std::string* resp) {
  if (resp_ != &::google::protobuf::internal::kEmptyString) {
    delete resp_;
  }
  if (resp) {
    set_has_resp();
    resp_ = resp;
  } else {
    clear_has_resp();
    resp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float value = 5;
inline bool ExtraForkRaw::has_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExtraForkRaw::set_has_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExtraForkRaw::clear_has_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExtraForkRaw::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float ExtraForkRaw::value() const {
  return value_;
}
inline void ExtraForkRaw::set_value(float value) {
  set_has_value();
  value_ = value;
}

// optional .extra_fork_msg.ExtraForkRaw.Status status = 6;
inline bool ExtraForkRaw::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExtraForkRaw::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExtraForkRaw::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExtraForkRaw::clear_status() {
  status_ = -1;
  clear_has_status();
}
inline ::extra_fork_msg::ExtraForkRaw_Status ExtraForkRaw::status() const {
  return static_cast< ::extra_fork_msg::ExtraForkRaw_Status >(status_);
}
inline void ExtraForkRaw::set_status(::extra_fork_msg::ExtraForkRaw_Status value) {
  assert(::extra_fork_msg::ExtraForkRaw_Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional int32 msgID = 7;
inline bool ExtraForkRaw::has_msgid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExtraForkRaw::set_has_msgid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExtraForkRaw::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExtraForkRaw::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 ExtraForkRaw::msgid() const {
  return msgid_;
}
inline void ExtraForkRaw::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
}

// -------------------------------------------------------------------

// ExtraForkShow

// optional string msgName = 1 [default = "EXTRA_FORK_SHOW"];
inline bool ExtraForkShow::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtraForkShow::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtraForkShow::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtraForkShow::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& ExtraForkShow::msgname() const {
  return *msgname_;
}
inline void ExtraForkShow::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkShow::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkShow::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtraForkShow::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* ExtraForkShow::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void ExtraForkShow::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 channel = 2;
inline bool ExtraForkShow::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtraForkShow::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtraForkShow::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtraForkShow::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 ExtraForkShow::channel() const {
  return channel_;
}
inline void ExtraForkShow::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional bool show = 3;
inline bool ExtraForkShow::has_show() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExtraForkShow::set_has_show() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExtraForkShow::clear_has_show() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExtraForkShow::clear_show() {
  show_ = false;
  clear_has_show();
}
inline bool ExtraForkShow::show() const {
  return show_;
}
inline void ExtraForkShow::set_show(bool value) {
  set_has_show();
  show_ = value;
}

// -------------------------------------------------------------------

// ExtraForkPollRequest

// optional string msgName = 1 [default = "EXTRA_FORK_POLL_REQUEST"];
inline bool ExtraForkPollRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtraForkPollRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtraForkPollRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtraForkPollRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& ExtraForkPollRequest::msgname() const {
  return *msgname_;
}
inline void ExtraForkPollRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkPollRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkPollRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtraForkPollRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* ExtraForkPollRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void ExtraForkPollRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// repeated string properties = 2;
inline int ExtraForkPollRequest::properties_size() const {
  return properties_.size();
}
inline void ExtraForkPollRequest::clear_properties() {
  properties_.Clear();
}
inline const ::std::string& ExtraForkPollRequest::properties(int index) const {
  return properties_.Get(index);
}
inline ::std::string* ExtraForkPollRequest::mutable_properties(int index) {
  return properties_.Mutable(index);
}
inline void ExtraForkPollRequest::set_properties(int index, const ::std::string& value) {
  properties_.Mutable(index)->assign(value);
}
inline void ExtraForkPollRequest::set_properties(int index, const char* value) {
  properties_.Mutable(index)->assign(value);
}
inline void ExtraForkPollRequest::set_properties(int index, const char* value, size_t size) {
  properties_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtraForkPollRequest::add_properties() {
  return properties_.Add();
}
inline void ExtraForkPollRequest::add_properties(const ::std::string& value) {
  properties_.Add()->assign(value);
}
inline void ExtraForkPollRequest::add_properties(const char* value) {
  properties_.Add()->assign(value);
}
inline void ExtraForkPollRequest::add_properties(const char* value, size_t size) {
  properties_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExtraForkPollRequest::properties() const {
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ExtraForkPollRequest::mutable_properties() {
  return &properties_;
}

// -------------------------------------------------------------------

// ExtraForkPollResponse

// optional string msgName = 1 [default = "EXTRA_FORK_POLL_RESPONSE"];
inline bool ExtraForkPollResponse::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtraForkPollResponse::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtraForkPollResponse::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtraForkPollResponse::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& ExtraForkPollResponse::msgname() const {
  return *msgname_;
}
inline void ExtraForkPollResponse::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkPollResponse::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ExtraForkPollResponse::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtraForkPollResponse::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* ExtraForkPollResponse::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void ExtraForkPollResponse::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// repeated string properties = 2;
inline int ExtraForkPollResponse::properties_size() const {
  return properties_.size();
}
inline void ExtraForkPollResponse::clear_properties() {
  properties_.Clear();
}
inline const ::std::string& ExtraForkPollResponse::properties(int index) const {
  return properties_.Get(index);
}
inline ::std::string* ExtraForkPollResponse::mutable_properties(int index) {
  return properties_.Mutable(index);
}
inline void ExtraForkPollResponse::set_properties(int index, const ::std::string& value) {
  properties_.Mutable(index)->assign(value);
}
inline void ExtraForkPollResponse::set_properties(int index, const char* value) {
  properties_.Mutable(index)->assign(value);
}
inline void ExtraForkPollResponse::set_properties(int index, const char* value, size_t size) {
  properties_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtraForkPollResponse::add_properties() {
  return properties_.Add();
}
inline void ExtraForkPollResponse::add_properties(const ::std::string& value) {
  properties_.Add()->assign(value);
}
inline void ExtraForkPollResponse::add_properties(const char* value) {
  properties_.Add()->assign(value);
}
inline void ExtraForkPollResponse::add_properties(const char* value, size_t size) {
  properties_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExtraForkPollResponse::properties() const {
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ExtraForkPollResponse::mutable_properties() {
  return &properties_;
}

// optional .extra_fork_msg.ExtraForkPollRequest request = 3;
inline bool ExtraForkPollResponse::has_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExtraForkPollResponse::set_has_request() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExtraForkPollResponse::clear_has_request() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExtraForkPollResponse::clear_request() {
  if (request_ != NULL) request_->::extra_fork_msg::ExtraForkPollRequest::Clear();
  clear_has_request();
}
inline const ::extra_fork_msg::ExtraForkPollRequest& ExtraForkPollResponse::request() const {
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::extra_fork_msg::ExtraForkPollRequest* ExtraForkPollResponse::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::extra_fork_msg::ExtraForkPollRequest;
  return request_;
}
inline ::extra_fork_msg::ExtraForkPollRequest* ExtraForkPollResponse::release_request() {
  clear_has_request();
  ::extra_fork_msg::ExtraForkPollRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline void ExtraForkPollResponse::set_allocated_request(::extra_fork_msg::ExtraForkPollRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace extra_fork_msg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::extra_fork_msg::ExtraForkLoad_Status>() {
  return ::extra_fork_msg::ExtraForkLoad_Status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::extra_fork_msg::ExtraForkPoll_Status>() {
  return ::extra_fork_msg::ExtraForkPoll_Status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::extra_fork_msg::ExtraForkRaw_Status>() {
  return ::extra_fork_msg::ExtraForkRaw_Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ExtraForkMessages_2eproto__INCLUDED
