// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TunerMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TunerMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tuner_msg {

namespace {

const ::google::protobuf::Descriptor* AdjustScan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdjustScan_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManArch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManArch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArch_reflection_ = NULL;
const ::google::protobuf::Descriptor* IQHeaderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IQHeaderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IQMetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IQMetaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeTuneRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeTuneRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* TuneRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TuneRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiverStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiverStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReceiverStatus_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* QueryReceiverStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryReceiverStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimingCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimingCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* DwellScan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DwellScan_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DwellScan_State_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DwellScan_GainMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TxTune_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxTune_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReactiveJam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReactiveJam_reflection_ = NULL;
const ::google::protobuf::Descriptor* diskSnapAvailable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  diskSnapAvailable_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapBroadcast_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SnapBroadcast_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReceiverRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiverRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiverRelease_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiverRelease_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiverAcquired_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiverAcquired_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiverReleased_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiverReleased_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeRXTxConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeRXTxConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TunerMessages_2eproto() {
  protobuf_AddDesc_TunerMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TunerMessages.proto");
  GOOGLE_CHECK(file != NULL);
  AdjustScan_descriptor_ = file->message_type(0);
  static const int AdjustScan_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustScan, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustScan, dwtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustScan, ftupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustScan, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustScan, revid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustScan, feed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustScan, az_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustScan, foffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustScan, snapreset_),
  };
  AdjustScan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdjustScan_descriptor_,
      AdjustScan::default_instance_,
      AdjustScan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustScan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustScan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdjustScan));
  ManArch_descriptor_ = file->message_type(1);
  static const int ManArch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManArch, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManArch, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManArch, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManArch, filename_),
  };
  ManArch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManArch_descriptor_,
      ManArch::default_instance_,
      ManArch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManArch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManArch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManArch));
  TArch_descriptor_ = file->message_type(2);
  static const int TArch_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArch, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArch, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArch, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArch, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArch, startf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArch, tasknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArch, revid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArch, foffset_),
  };
  TArch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArch_descriptor_,
      TArch::default_instance_,
      TArch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArch));
  IQHeaderInfo_descriptor_ = file->message_type(3);
  static const int IQHeaderInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, freqrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, snapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, revid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, tasknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, feedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, rcvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, sample_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, ramsnap_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, derived_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, parentsnapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, basepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, fileextension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, filedataoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, filedatasize_),
  };
  IQHeaderInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IQHeaderInfo_descriptor_,
      IQHeaderInfo::default_instance_,
      IQHeaderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQHeaderInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IQHeaderInfo));
  IQMetaData_descriptor_ = file->message_type(4);
  static const int IQMetaData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMetaData, freqcf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMetaData, freqmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMetaData, freqmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMetaData, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMetaData, ramsnaptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMetaData, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMetaData, feedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMetaData, rcvrid_),
  };
  IQMetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IQMetaData_descriptor_,
      IQMetaData::default_instance_,
      IQMetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IQMetaData));
  SnapInfo_descriptor_ = file->message_type(5);
  static const int SnapInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapInfo, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapInfo, iqheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapInfo, iqheaders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapInfo, iqmetadata_),
  };
  SnapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapInfo_descriptor_,
      SnapInfo::default_instance_,
      SnapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapInfo));
  ChangeTuneRange_descriptor_ = file->message_type(6);
  static const int ChangeTuneRange_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTuneRange, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTuneRange, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTuneRange, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTuneRange, tuneplan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTuneRange, allowoverlap_),
  };
  ChangeTuneRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeTuneRange_descriptor_,
      ChangeTuneRange::default_instance_,
      ChangeTuneRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTuneRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTuneRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeTuneRange));
  TuneRange_descriptor_ = file->message_type(7);
  static const int TuneRange_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuneRange, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuneRange, startrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuneRange, endrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuneRange, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuneRange, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuneRange, gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuneRange, atten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuneRange, bwmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuneRange, appid_),
  };
  TuneRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TuneRange_descriptor_,
      TuneRange::default_instance_,
      TuneRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuneRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TuneRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TuneRange));
  ReceiverStatus_descriptor_ = file->message_type(8);
  static const int ReceiverStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, tuneplan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, currentfrequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, status_),
  };
  ReceiverStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiverStatus_descriptor_,
      ReceiverStatus::default_instance_,
      ReceiverStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiverStatus));
  ReceiverStatus_Status_descriptor_ = ReceiverStatus_descriptor_->enum_type(0);
  QueryReceiverStatus_descriptor_ = file->message_type(9);
  static const int QueryReceiverStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryReceiverStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryReceiverStatus, channel_),
  };
  QueryReceiverStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryReceiverStatus_descriptor_,
      QueryReceiverStatus::default_instance_,
      QueryReceiverStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryReceiverStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryReceiverStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryReceiverStatus));
  TimingCheck_descriptor_ = file->message_type(10);
  static const int TimingCheck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimingCheck, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimingCheck, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimingCheck, timing_),
  };
  TimingCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimingCheck_descriptor_,
      TimingCheck::default_instance_,
      TimingCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimingCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimingCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimingCheck));
  DwellScan_descriptor_ = file->message_type(11);
  static const int DwellScan_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwellScan, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwellScan, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwellScan, freqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwellScan, gaindb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwellScan, bwmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwellScan, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwellScan, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwellScan, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwellScan, mergefile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwellScan, gainmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwellScan, hostname_),
  };
  DwellScan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DwellScan_descriptor_,
      DwellScan::default_instance_,
      DwellScan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwellScan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwellScan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DwellScan));
  DwellScan_State_descriptor_ = DwellScan_descriptor_->enum_type(0);
  DwellScan_GainMode_descriptor_ = DwellScan_descriptor_->enum_type(1);
  TxTune_descriptor_ = file->message_type(12);
  static const int TxTune_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxTune, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxTune, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxTune, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxTune, freqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxTune, gaindb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxTune, samplerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxTune, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxTune, capestate_),
  };
  TxTune_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxTune_descriptor_,
      TxTune::default_instance_,
      TxTune_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxTune, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxTune, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxTune));
  ReactiveJam_descriptor_ = file->message_type(13);
  static const int ReactiveJam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReactiveJam, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReactiveJam, state_),
  };
  ReactiveJam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReactiveJam_descriptor_,
      ReactiveJam::default_instance_,
      ReactiveJam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReactiveJam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReactiveJam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReactiveJam));
  diskSnapAvailable_descriptor_ = file->message_type(14);
  static const int diskSnapAvailable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diskSnapAvailable, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diskSnapAvailable, disksnapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diskSnapAvailable, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diskSnapAvailable, hostname_),
  };
  diskSnapAvailable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      diskSnapAvailable_descriptor_,
      diskSnapAvailable::default_instance_,
      diskSnapAvailable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diskSnapAvailable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diskSnapAvailable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(diskSnapAvailable));
  SnapBroadcast_descriptor_ = file->message_type(15);
  static const int SnapBroadcast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapBroadcast, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapBroadcast, freqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapBroadcast, state_),
  };
  SnapBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapBroadcast_descriptor_,
      SnapBroadcast::default_instance_,
      SnapBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapBroadcast));
  SnapBroadcast_State_descriptor_ = SnapBroadcast_descriptor_->enum_type(0);
  ReceiverRequest_descriptor_ = file->message_type(16);
  static const int ReceiverRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRequest, appid_),
  };
  ReceiverRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiverRequest_descriptor_,
      ReceiverRequest::default_instance_,
      ReceiverRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiverRequest));
  ReceiverRelease_descriptor_ = file->message_type(17);
  static const int ReceiverRelease_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRelease, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRelease, channel_),
  };
  ReceiverRelease_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiverRelease_descriptor_,
      ReceiverRelease::default_instance_,
      ReceiverRelease_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRelease, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRelease, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiverRelease));
  ReceiverAcquired_descriptor_ = file->message_type(18);
  static const int ReceiverAcquired_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverAcquired, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverAcquired, channel_),
  };
  ReceiverAcquired_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiverAcquired_descriptor_,
      ReceiverAcquired::default_instance_,
      ReceiverAcquired_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverAcquired, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverAcquired, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiverAcquired));
  ReceiverReleased_descriptor_ = file->message_type(19);
  static const int ReceiverReleased_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverReleased, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverReleased, channel_),
  };
  ReceiverReleased_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiverReleased_descriptor_,
      ReceiverReleased::default_instance_,
      ReceiverReleased_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverReleased, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverReleased, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiverReleased));
  ChangeRXTxConfig_descriptor_ = file->message_type(20);
  static const int ChangeRXTxConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRXTxConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRXTxConfig, config_),
  };
  ChangeRXTxConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeRXTxConfig_descriptor_,
      ChangeRXTxConfig::default_instance_,
      ChangeRXTxConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRXTxConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRXTxConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeRXTxConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TunerMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdjustScan_descriptor_, &AdjustScan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManArch_descriptor_, &ManArch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArch_descriptor_, &TArch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IQHeaderInfo_descriptor_, &IQHeaderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IQMetaData_descriptor_, &IQMetaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapInfo_descriptor_, &SnapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeTuneRange_descriptor_, &ChangeTuneRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TuneRange_descriptor_, &TuneRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiverStatus_descriptor_, &ReceiverStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryReceiverStatus_descriptor_, &QueryReceiverStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimingCheck_descriptor_, &TimingCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DwellScan_descriptor_, &DwellScan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxTune_descriptor_, &TxTune::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReactiveJam_descriptor_, &ReactiveJam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    diskSnapAvailable_descriptor_, &diskSnapAvailable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapBroadcast_descriptor_, &SnapBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiverRequest_descriptor_, &ReceiverRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiverRelease_descriptor_, &ReceiverRelease::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiverAcquired_descriptor_, &ReceiverAcquired::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiverReleased_descriptor_, &ReceiverReleased::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeRXTxConfig_descriptor_, &ChangeRXTxConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TunerMessages_2eproto() {
  delete AdjustScan::default_instance_;
  delete AdjustScan_reflection_;
  delete AdjustScan::_default_msgname_;
  delete ManArch::default_instance_;
  delete ManArch_reflection_;
  delete ManArch::_default_msgname_;
  delete TArch::default_instance_;
  delete TArch_reflection_;
  delete TArch::_default_msgname_;
  delete IQHeaderInfo::default_instance_;
  delete IQHeaderInfo_reflection_;
  delete IQHeaderInfo::_default_msgname_;
  delete IQHeaderInfo::_default_hostname_;
  delete IQHeaderInfo::_default_basepath_;
  delete IQHeaderInfo::_default_fileextension_;
  delete IQMetaData::default_instance_;
  delete IQMetaData_reflection_;
  delete SnapInfo::default_instance_;
  delete SnapInfo_reflection_;
  delete SnapInfo::_default_msgname_;
  delete ChangeTuneRange::default_instance_;
  delete ChangeTuneRange_reflection_;
  delete ChangeTuneRange::_default_msgname_;
  delete TuneRange::default_instance_;
  delete TuneRange_reflection_;
  delete TuneRange::_default_msgname_;
  delete ReceiverStatus::default_instance_;
  delete ReceiverStatus_reflection_;
  delete ReceiverStatus::_default_msgname_;
  delete QueryReceiverStatus::default_instance_;
  delete QueryReceiverStatus_reflection_;
  delete QueryReceiverStatus::_default_msgname_;
  delete TimingCheck::default_instance_;
  delete TimingCheck_reflection_;
  delete TimingCheck::_default_msgname_;
  delete DwellScan::default_instance_;
  delete DwellScan_reflection_;
  delete DwellScan::_default_msgname_;
  delete DwellScan::_default_hostname_;
  delete TxTune::default_instance_;
  delete TxTune_reflection_;
  delete TxTune::_default_msgname_;
  delete ReactiveJam::default_instance_;
  delete ReactiveJam_reflection_;
  delete ReactiveJam::_default_msgname_;
  delete diskSnapAvailable::default_instance_;
  delete diskSnapAvailable_reflection_;
  delete diskSnapAvailable::_default_msgname_;
  delete SnapBroadcast::default_instance_;
  delete SnapBroadcast_reflection_;
  delete SnapBroadcast::_default_msgname_;
  delete ReceiverRequest::default_instance_;
  delete ReceiverRequest_reflection_;
  delete ReceiverRelease::default_instance_;
  delete ReceiverRelease_reflection_;
  delete ReceiverAcquired::default_instance_;
  delete ReceiverAcquired_reflection_;
  delete ReceiverReleased::default_instance_;
  delete ReceiverReleased_reflection_;
  delete ChangeRXTxConfig::default_instance_;
  delete ChangeRXTxConfig_reflection_;
  delete ChangeRXTxConfig::_default_msgname_;
  delete ChangeRXTxConfig::_default_config_;
}

void protobuf_AddDesc_TunerMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023TunerMessages.proto\022\ttuner_msg\"\246\001\n\nAdj"
    "ustScan\022\033\n\007msgName\030\001 \001(\t:\nADJUSTSCAN\022\016\n\006"
    "dwtime\030\002 \001(\001\022\020\n\010ftupdate\030\003 \001(\005\022\014\n\004mode\030\004"
    " \001(\005\022\r\n\005revid\030\005 \001(\005\022\014\n\004feed\030\006 \001(\t\022\n\n\002az\030"
    "\007 \001(\001\022\017\n\007foffset\030\010 \001(\001\022\021\n\tsnapreset\030\t \001("
    "\005\"U\n\007ManArch\022\030\n\007msgName\030\001 \001(\t:\007MANARCH\022\014"
    "\n\004freq\030\002 \001(\001\022\020\n\010duration\030\003 \001(\001\022\020\n\010filena"
    "me\030\004 \001(\t\"\224\001\n\005TArch\022\026\n\007msgName\030\001 \001(\t:\005TAR"
    "CH\022\020\n\010duration\030\002 \001(\001\022\021\n\tfrequency\030\003 \001(\001\022"
    "\r\n\005start\030\004 \001(\001\022\016\n\006startf\030\005 \001(\001\022\017\n\007tasknu"
    "m\030\006 \001(\001\022\r\n\005revid\030\007 \001(\005\022\017\n\007foffset\030\010 \001(\001\""
    "\277\003\n\014IQHeaderInfo\022\035\n\007msgName\030\001 \001(\t:\014IQHEA"
    "DERINFO\022\016\n\006freqRF\030\002 \001(\001\022\016\n\006snapid\030\003 \001(\t\022"
    "\r\n\005revid\030\004 \001(\005\022\017\n\007tasknum\030\005 \001(\005\022\017\n\007chann"
    "el\030\006 \001(\005\022\020\n\010filename\030\007 \001(\t\022\016\n\006feedid\030\010 \001"
    "(\t\022\016\n\006rcvrid\030\t \001(\t\022\023\n\013sample_rate\030\n \001(\001\022"
    "\020\n\010duration\030\013 \001(\001\022\024\n\014ramsnap_time\030\014 \001(\t\022"
    "\026\n\010hostname\030\r \001(\t:\004None\022\021\n\tbandwidth\030\016 \001"
    "(\001\022\026\n\007derived\030\017 \001(\010:\005false\022\024\n\014parentSnap"
    "ID\030\020 \001(\t\022,\n\010basePath\030\021 \001(\t:\032/var/lib/kep"
    "ler/snapshots/\022\033\n\rfileExtension\030\022 \001(\t:\004."
    "tmp\022\026\n\016fileDataOffset\0303 \001(\004\022\024\n\014fileDataS"
    "ize\0304 \001(\004\"\227\001\n\nIQMetaData\022\016\n\006freqCf\030\001 \001(\001"
    "\022\017\n\007freqMin\030\002 \001(\001\022\017\n\007freqMax\030\003 \001(\001\022\020\n\010du"
    "ration\030\004 \001(\001\022\023\n\013ramsnapTime\030\005 \001(\t\022\020\n\010hos"
    "tname\030\006 \001(\t\022\016\n\006feedId\030\007 \001(\t\022\016\n\006rcvrId\030\010 "
    "\001(\t\"\247\001\n\010SnapInfo\022\031\n\007msgName\030\001 \001(\t:\010SNAPI"
    "NFO\022)\n\010IQHeader\030\002 \001(\0132\027.tuner_msg.IQHead"
    "erInfo\022*\n\tiqHeaders\030\003 \003(\0132\027.tuner_msg.IQ"
    "HeaderInfo\022)\n\niqMetaData\030\004 \001(\0132\025.tuner_m"
    "sg.IQMetaData\"\235\001\n\017ChangeTuneRange\022\"\n\007msg"
    "Name\030\001 \001(\t:\021CHANGE_TUNE_RANGE\022\023\n\007channel"
    "\030\002 \001(\005:\002-1\022\r\n\005appID\030\003 \001(\005\022&\n\010tunePlan\030\004 "
    "\003(\0132\024.tuner_msg.TuneRange\022\032\n\014allowOverla"
    "p\030\005 \001(\010:\004true\"\247\001\n\tTuneRange\022\033\n\007msgName\030\001"
    " \001(\t:\nTUNE_RANGE\022\017\n\007startRf\030\002 \001(\001\022\r\n\005end"
    "Rf\030\003 \001(\001\022\014\n\004step\030\004 \001(\001\022\020\n\010duration\030\005 \001(\001"
    "\022\014\n\004gain\030\006 \001(\001\022\r\n\005atten\030\007 \001(\005\022\021\n\005bwMHz\030\010"
    " \001(\002:\00220\022\r\n\005appID\030\t \003(\005\"\352\001\n\016ReceiverStat"
    "us\022\037\n\007msgName\030\001 \001(\t:\016RECEIVERSTATUS\022\017\n\007c"
    "hannel\030\002 \001(\005\022&\n\010tunePlan\030\003 \003(\0132\024.tuner_m"
    "sg.TuneRange\022\030\n\020currentFrequency\030\004 \001(\001\0225"
    "\n\006status\030\005 \001(\0162 .tuner_msg.ReceiverStatu"
    "s.Status:\003OFF\"-\n\006Status\022\014\n\010SCANNING\020\001\022\014\n"
    "\010DWELLING\020\002\022\007\n\003OFF\020\003\"L\n\023QueryReceiverSta"
    "tus\022$\n\007msgName\030\001 \001(\t:\023QUERYRECEIVERSTATU"
    "S\022\017\n\007channel\030\002 \001(\005\"L\n\013TimingCheck\022\034\n\007msg"
    "Name\030\001 \001(\t:\013TIMINGCHECK\022\017\n\007channel\030\002 \001(\005"
    "\022\016\n\006timing\030\003 \001(\t\"\365\002\n\tDwellScan\022\032\n\007msgNam"
    "e\030\001 \001(\t:\tDWELLSCAN\022\017\n\007channel\030\002 \001(\005\022\017\n\007f"
    "reqMHz\030\003 \001(\002\022\016\n\006gaindB\030\004 \001(\002\022\021\n\005bwMHz\030\005 "
    "\001(\002:\00220\022\024\n\010duration\030\006 \001(\002:\002-1\0220\n\005state\030\007"
    " \001(\0162\032.tuner_msg.DwellScan.State:\005DWELL\022"
    "\r\n\005appID\030\010 \001(\005\022\030\n\tmergeFile\030\t \001(\010:\005false"
    "\0224\n\010gainMode\030\n \001(\0162\035.tuner_msg.DwellScan"
    ".GainMode:\003AGC\022\026\n\010hostname\030\013 \001(\t:\004None\"\'"
    "\n\005State\022\t\n\005START\020\000\022\t\n\005DWELL\020\001\022\010\n\004STOP\020\002\""
    "\037\n\010GainMode\022\007\n\003AGC\020\000\022\n\n\006MANUAL\020\001\"\231\001\n\006TxT"
    "une\022\027\n\007msgName\030\001 \001(\t:\006TXTUNE\022\r\n\005state\030\002 "
    "\001(\010\022\017\n\007channel\030\003 \001(\005\022\017\n\007freqMHz\030\004 \001(\002\022\016\n"
    "\006gaindB\030\005 \001(\002\022\022\n\nsampleRate\030\006 \001(\002\022\016\n\006con"
    "fig\030\007 \001(\t\022\021\n\tcapeState\030\010 \001(\010\":\n\013Reactive"
    "Jam\022\034\n\007msgName\030\001 \001(\t:\013REACTIVEJAM\022\r\n\005sta"
    "te\030\002 \001(\010\"o\n\021diskSnapAvailable\022\"\n\007msgName"
    "\030\001 \001(\t:\021DISKSNAPAVAILABLE\022\022\n\ndiskSnapID\030"
    "\002 \001(\t\022\020\n\010filename\030\003 \001(\t\022\020\n\010hostname\030\004 \001("
    "\t\"\223\001\n\rSnapBroadcast\022\036\n\007msgName\030\001 \001(\t:\rSN"
    "APBROADCAST\022\017\n\007freqMHz\030\002 \001(\002\0223\n\005state\030\003 "
    "\001(\0162\036.tuner_msg.SnapBroadcast.State:\004STO"
    "P\"\034\n\005State\022\t\n\005START\020\000\022\010\n\004STOP\020\001\" \n\017Recei"
    "verRequest\022\r\n\005appID\030\001 \001(\005\"1\n\017ReceiverRel"
    "ease\022\r\n\005appID\030\001 \001(\005\022\017\n\007channel\030\002 \001(\005\"2\n\020"
    "ReceiverAcquired\022\r\n\005appID\030\001 \001(\005\022\017\n\007chann"
    "el\030\002 \001(\005\"2\n\020ReceiverReleased\022\r\n\005appID\030\001 "
    "\001(\005\022\017\n\007channel\030\002 \001(\005\"K\n\020ChangeRXTxConfig"
    "\022!\n\007msgName\030\001 \001(\t:\020ChangeRXTxConfig\022\024\n\006c"
    "onfig\030\002 \001(\t:\004RCH3B\025\n\023fv.protos.kepsvisor", 3080);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TunerMessages.proto", &protobuf_RegisterTypes);
  AdjustScan::_default_msgname_ =
      new ::std::string("ADJUSTSCAN", 10);
  AdjustScan::default_instance_ = new AdjustScan();
  ManArch::_default_msgname_ =
      new ::std::string("MANARCH", 7);
  ManArch::default_instance_ = new ManArch();
  TArch::_default_msgname_ =
      new ::std::string("TARCH", 5);
  TArch::default_instance_ = new TArch();
  IQHeaderInfo::_default_msgname_ =
      new ::std::string("IQHEADERINFO", 12);
  IQHeaderInfo::_default_hostname_ =
      new ::std::string("None", 4);
  IQHeaderInfo::_default_basepath_ =
      new ::std::string("/var/lib/kepler/snapshots/", 26);
  IQHeaderInfo::_default_fileextension_ =
      new ::std::string(".tmp", 4);
  IQHeaderInfo::default_instance_ = new IQHeaderInfo();
  IQMetaData::default_instance_ = new IQMetaData();
  SnapInfo::_default_msgname_ =
      new ::std::string("SNAPINFO", 8);
  SnapInfo::default_instance_ = new SnapInfo();
  ChangeTuneRange::_default_msgname_ =
      new ::std::string("CHANGE_TUNE_RANGE", 17);
  ChangeTuneRange::default_instance_ = new ChangeTuneRange();
  TuneRange::_default_msgname_ =
      new ::std::string("TUNE_RANGE", 10);
  TuneRange::default_instance_ = new TuneRange();
  ReceiverStatus::_default_msgname_ =
      new ::std::string("RECEIVERSTATUS", 14);
  ReceiverStatus::default_instance_ = new ReceiverStatus();
  QueryReceiverStatus::_default_msgname_ =
      new ::std::string("QUERYRECEIVERSTATUS", 19);
  QueryReceiverStatus::default_instance_ = new QueryReceiverStatus();
  TimingCheck::_default_msgname_ =
      new ::std::string("TIMINGCHECK", 11);
  TimingCheck::default_instance_ = new TimingCheck();
  DwellScan::_default_msgname_ =
      new ::std::string("DWELLSCAN", 9);
  DwellScan::_default_hostname_ =
      new ::std::string("None", 4);
  DwellScan::default_instance_ = new DwellScan();
  TxTune::_default_msgname_ =
      new ::std::string("TXTUNE", 6);
  TxTune::default_instance_ = new TxTune();
  ReactiveJam::_default_msgname_ =
      new ::std::string("REACTIVEJAM", 11);
  ReactiveJam::default_instance_ = new ReactiveJam();
  diskSnapAvailable::_default_msgname_ =
      new ::std::string("DISKSNAPAVAILABLE", 17);
  diskSnapAvailable::default_instance_ = new diskSnapAvailable();
  SnapBroadcast::_default_msgname_ =
      new ::std::string("SNAPBROADCAST", 13);
  SnapBroadcast::default_instance_ = new SnapBroadcast();
  ReceiverRequest::default_instance_ = new ReceiverRequest();
  ReceiverRelease::default_instance_ = new ReceiverRelease();
  ReceiverAcquired::default_instance_ = new ReceiverAcquired();
  ReceiverReleased::default_instance_ = new ReceiverReleased();
  ChangeRXTxConfig::_default_msgname_ =
      new ::std::string("ChangeRXTxConfig", 16);
  ChangeRXTxConfig::_default_config_ =
      new ::std::string("RCH3", 4);
  ChangeRXTxConfig::default_instance_ = new ChangeRXTxConfig();
  AdjustScan::default_instance_->InitAsDefaultInstance();
  ManArch::default_instance_->InitAsDefaultInstance();
  TArch::default_instance_->InitAsDefaultInstance();
  IQHeaderInfo::default_instance_->InitAsDefaultInstance();
  IQMetaData::default_instance_->InitAsDefaultInstance();
  SnapInfo::default_instance_->InitAsDefaultInstance();
  ChangeTuneRange::default_instance_->InitAsDefaultInstance();
  TuneRange::default_instance_->InitAsDefaultInstance();
  ReceiverStatus::default_instance_->InitAsDefaultInstance();
  QueryReceiverStatus::default_instance_->InitAsDefaultInstance();
  TimingCheck::default_instance_->InitAsDefaultInstance();
  DwellScan::default_instance_->InitAsDefaultInstance();
  TxTune::default_instance_->InitAsDefaultInstance();
  ReactiveJam::default_instance_->InitAsDefaultInstance();
  diskSnapAvailable::default_instance_->InitAsDefaultInstance();
  SnapBroadcast::default_instance_->InitAsDefaultInstance();
  ReceiverRequest::default_instance_->InitAsDefaultInstance();
  ReceiverRelease::default_instance_->InitAsDefaultInstance();
  ReceiverAcquired::default_instance_->InitAsDefaultInstance();
  ReceiverReleased::default_instance_->InitAsDefaultInstance();
  ChangeRXTxConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TunerMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TunerMessages_2eproto {
  StaticDescriptorInitializer_TunerMessages_2eproto() {
    protobuf_AddDesc_TunerMessages_2eproto();
  }
} static_descriptor_initializer_TunerMessages_2eproto_;

// ===================================================================

::std::string* AdjustScan::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int AdjustScan::kMsgNameFieldNumber;
const int AdjustScan::kDwtimeFieldNumber;
const int AdjustScan::kFtupdateFieldNumber;
const int AdjustScan::kModeFieldNumber;
const int AdjustScan::kRevidFieldNumber;
const int AdjustScan::kFeedFieldNumber;
const int AdjustScan::kAzFieldNumber;
const int AdjustScan::kFoffsetFieldNumber;
const int AdjustScan::kSnapresetFieldNumber;
#endif  // !_MSC_VER

AdjustScan::AdjustScan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdjustScan::InitAsDefaultInstance() {
}

AdjustScan::AdjustScan(const AdjustScan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdjustScan::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  dwtime_ = 0;
  ftupdate_ = 0;
  mode_ = 0;
  revid_ = 0;
  feed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  az_ = 0;
  foffset_ = 0;
  snapreset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdjustScan::~AdjustScan() {
  SharedDtor();
}

void AdjustScan::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (feed_ != &::google::protobuf::internal::kEmptyString) {
    delete feed_;
  }
  if (this != default_instance_) {
  }
}

void AdjustScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdjustScan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdjustScan_descriptor_;
}

const AdjustScan& AdjustScan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

AdjustScan* AdjustScan::default_instance_ = NULL;

AdjustScan* AdjustScan::New() const {
  return new AdjustScan;
}

void AdjustScan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    dwtime_ = 0;
    ftupdate_ = 0;
    mode_ = 0;
    revid_ = 0;
    if (has_feed()) {
      if (feed_ != &::google::protobuf::internal::kEmptyString) {
        feed_->clear();
      }
    }
    az_ = 0;
    foffset_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    snapreset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdjustScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ADJUSTSCAN"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dwtime;
        break;
      }

      // optional double dwtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dwtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwtime_)));
          set_has_dwtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ftupdate;
        break;
      }

      // optional int32 ftupdate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ftupdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ftupdate_)));
          set_has_ftupdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mode;
        break;
      }

      // optional int32 mode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_revid;
        break;
      }

      // optional int32 revid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revid_)));
          set_has_revid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_feed;
        break;
      }

      // optional string feed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->feed().data(), this->feed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_az;
        break;
      }

      // optional double az = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_az:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &az_)));
          set_has_az();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_foffset;
        break;
      }

      // optional double foffset = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_foffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &foffset_)));
          set_has_foffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_snapreset;
        break;
      }

      // optional int32 snapreset = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snapreset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snapreset_)));
          set_has_snapreset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdjustScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ADJUSTSCAN"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double dwtime = 2;
  if (has_dwtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dwtime(), output);
  }

  // optional int32 ftupdate = 3;
  if (has_ftupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ftupdate(), output);
  }

  // optional int32 mode = 4;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mode(), output);
  }

  // optional int32 revid = 5;
  if (has_revid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->revid(), output);
  }

  // optional string feed = 6;
  if (has_feed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feed().data(), this->feed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->feed(), output);
  }

  // optional double az = 7;
  if (has_az()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->az(), output);
  }

  // optional double foffset = 8;
  if (has_foffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->foffset(), output);
  }

  // optional int32 snapreset = 9;
  if (has_snapreset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->snapreset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdjustScan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ADJUSTSCAN"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double dwtime = 2;
  if (has_dwtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dwtime(), target);
  }

  // optional int32 ftupdate = 3;
  if (has_ftupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ftupdate(), target);
  }

  // optional int32 mode = 4;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mode(), target);
  }

  // optional int32 revid = 5;
  if (has_revid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->revid(), target);
  }

  // optional string feed = 6;
  if (has_feed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feed().data(), this->feed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->feed(), target);
  }

  // optional double az = 7;
  if (has_az()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->az(), target);
  }

  // optional double foffset = 8;
  if (has_foffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->foffset(), target);
  }

  // optional int32 snapreset = 9;
  if (has_snapreset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->snapreset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdjustScan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ADJUSTSCAN"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double dwtime = 2;
    if (has_dwtime()) {
      total_size += 1 + 8;
    }

    // optional int32 ftupdate = 3;
    if (has_ftupdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ftupdate());
    }

    // optional int32 mode = 4;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional int32 revid = 5;
    if (has_revid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revid());
    }

    // optional string feed = 6;
    if (has_feed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feed());
    }

    // optional double az = 7;
    if (has_az()) {
      total_size += 1 + 8;
    }

    // optional double foffset = 8;
    if (has_foffset()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 snapreset = 9;
    if (has_snapreset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snapreset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdjustScan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdjustScan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdjustScan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdjustScan::MergeFrom(const AdjustScan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_dwtime()) {
      set_dwtime(from.dwtime());
    }
    if (from.has_ftupdate()) {
      set_ftupdate(from.ftupdate());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_revid()) {
      set_revid(from.revid());
    }
    if (from.has_feed()) {
      set_feed(from.feed());
    }
    if (from.has_az()) {
      set_az(from.az());
    }
    if (from.has_foffset()) {
      set_foffset(from.foffset());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_snapreset()) {
      set_snapreset(from.snapreset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdjustScan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdjustScan::CopyFrom(const AdjustScan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdjustScan::IsInitialized() const {

  return true;
}

void AdjustScan::Swap(AdjustScan* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(dwtime_, other->dwtime_);
    std::swap(ftupdate_, other->ftupdate_);
    std::swap(mode_, other->mode_);
    std::swap(revid_, other->revid_);
    std::swap(feed_, other->feed_);
    std::swap(az_, other->az_);
    std::swap(foffset_, other->foffset_);
    std::swap(snapreset_, other->snapreset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdjustScan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdjustScan_descriptor_;
  metadata.reflection = AdjustScan_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ManArch::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ManArch::kMsgNameFieldNumber;
const int ManArch::kFreqFieldNumber;
const int ManArch::kDurationFieldNumber;
const int ManArch::kFilenameFieldNumber;
#endif  // !_MSC_VER

ManArch::ManArch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ManArch::InitAsDefaultInstance() {
}

ManArch::ManArch(const ManArch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ManArch::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  freq_ = 0;
  duration_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManArch::~ManArch() {
  SharedDtor();
}

void ManArch::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void ManArch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManArch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManArch_descriptor_;
}

const ManArch& ManArch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

ManArch* ManArch::default_instance_ = NULL;

ManArch* ManArch::New() const {
  return new ManArch;
}

void ManArch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    freq_ = 0;
    duration_ = 0;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManArch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "MANARCH"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_freq;
        break;
      }

      // optional double freq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_duration;
        break;
      }

      // optional double duration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_filename;
        break;
      }

      // optional string filename = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ManArch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "MANARCH"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double freq = 2;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->freq(), output);
  }

  // optional double duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->duration(), output);
  }

  // optional string filename = 4;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ManArch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "MANARCH"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double freq = 2;
  if (has_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->freq(), target);
  }

  // optional double duration = 3;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->duration(), target);
  }

  // optional string filename = 4;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ManArch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "MANARCH"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double freq = 2;
    if (has_freq()) {
      total_size += 1 + 8;
    }

    // optional double duration = 3;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional string filename = 4;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManArch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManArch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManArch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManArch::MergeFrom(const ManArch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_freq()) {
      set_freq(from.freq());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManArch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManArch::CopyFrom(const ManArch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManArch::IsInitialized() const {

  return true;
}

void ManArch::Swap(ManArch* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(freq_, other->freq_);
    std::swap(duration_, other->duration_);
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManArch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManArch_descriptor_;
  metadata.reflection = ManArch_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TArch::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int TArch::kMsgNameFieldNumber;
const int TArch::kDurationFieldNumber;
const int TArch::kFrequencyFieldNumber;
const int TArch::kStartFieldNumber;
const int TArch::kStartfFieldNumber;
const int TArch::kTasknumFieldNumber;
const int TArch::kRevidFieldNumber;
const int TArch::kFoffsetFieldNumber;
#endif  // !_MSC_VER

TArch::TArch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TArch::InitAsDefaultInstance() {
}

TArch::TArch(const TArch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TArch::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  duration_ = 0;
  frequency_ = 0;
  start_ = 0;
  startf_ = 0;
  tasknum_ = 0;
  revid_ = 0;
  foffset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArch::~TArch() {
  SharedDtor();
}

void TArch::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void TArch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArch_descriptor_;
}

const TArch& TArch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

TArch* TArch::default_instance_ = NULL;

TArch* TArch::New() const {
  return new TArch;
}

void TArch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    duration_ = 0;
    frequency_ = 0;
    start_ = 0;
    startf_ = 0;
    tasknum_ = 0;
    revid_ = 0;
    foffset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TARCH"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_duration;
        break;
      }

      // optional double duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_frequency;
        break;
      }

      // optional double frequency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_start;
        break;
      }

      // optional double start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_startf;
        break;
      }

      // optional double startf = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_startf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startf_)));
          set_has_startf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_tasknum;
        break;
      }

      // optional double tasknum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tasknum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tasknum_)));
          set_has_tasknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_revid;
        break;
      }

      // optional int32 revid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revid_)));
          set_has_revid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_foffset;
        break;
      }

      // optional double foffset = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_foffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &foffset_)));
          set_has_foffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TArch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TARCH"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->duration(), output);
  }

  // optional double frequency = 3;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->frequency(), output);
  }

  // optional double start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->start(), output);
  }

  // optional double startf = 5;
  if (has_startf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->startf(), output);
  }

  // optional double tasknum = 6;
  if (has_tasknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->tasknum(), output);
  }

  // optional int32 revid = 7;
  if (has_revid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->revid(), output);
  }

  // optional double foffset = 8;
  if (has_foffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->foffset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TArch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TARCH"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->duration(), target);
  }

  // optional double frequency = 3;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->frequency(), target);
  }

  // optional double start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->start(), target);
  }

  // optional double startf = 5;
  if (has_startf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->startf(), target);
  }

  // optional double tasknum = 6;
  if (has_tasknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->tasknum(), target);
  }

  // optional int32 revid = 7;
  if (has_revid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->revid(), target);
  }

  // optional double foffset = 8;
  if (has_foffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->foffset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TArch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TARCH"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double duration = 2;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional double frequency = 3;
    if (has_frequency()) {
      total_size += 1 + 8;
    }

    // optional double start = 4;
    if (has_start()) {
      total_size += 1 + 8;
    }

    // optional double startf = 5;
    if (has_startf()) {
      total_size += 1 + 8;
    }

    // optional double tasknum = 6;
    if (has_tasknum()) {
      total_size += 1 + 8;
    }

    // optional int32 revid = 7;
    if (has_revid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revid());
    }

    // optional double foffset = 8;
    if (has_foffset()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArch::MergeFrom(const TArch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_startf()) {
      set_startf(from.startf());
    }
    if (from.has_tasknum()) {
      set_tasknum(from.tasknum());
    }
    if (from.has_revid()) {
      set_revid(from.revid());
    }
    if (from.has_foffset()) {
      set_foffset(from.foffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArch::CopyFrom(const TArch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArch::IsInitialized() const {

  return true;
}

void TArch::Swap(TArch* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(duration_, other->duration_);
    std::swap(frequency_, other->frequency_);
    std::swap(start_, other->start_);
    std::swap(startf_, other->startf_);
    std::swap(tasknum_, other->tasknum_);
    std::swap(revid_, other->revid_);
    std::swap(foffset_, other->foffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArch_descriptor_;
  metadata.reflection = TArch_reflection_;
  return metadata;
}


// ===================================================================

::std::string* IQHeaderInfo::_default_msgname_ = NULL;
::std::string* IQHeaderInfo::_default_hostname_ = NULL;
::std::string* IQHeaderInfo::_default_basepath_ = NULL;
::std::string* IQHeaderInfo::_default_fileextension_ = NULL;
#ifndef _MSC_VER
const int IQHeaderInfo::kMsgNameFieldNumber;
const int IQHeaderInfo::kFreqRFFieldNumber;
const int IQHeaderInfo::kSnapidFieldNumber;
const int IQHeaderInfo::kRevidFieldNumber;
const int IQHeaderInfo::kTasknumFieldNumber;
const int IQHeaderInfo::kChannelFieldNumber;
const int IQHeaderInfo::kFilenameFieldNumber;
const int IQHeaderInfo::kFeedidFieldNumber;
const int IQHeaderInfo::kRcvridFieldNumber;
const int IQHeaderInfo::kSampleRateFieldNumber;
const int IQHeaderInfo::kDurationFieldNumber;
const int IQHeaderInfo::kRamsnapTimeFieldNumber;
const int IQHeaderInfo::kHostnameFieldNumber;
const int IQHeaderInfo::kBandwidthFieldNumber;
const int IQHeaderInfo::kDerivedFieldNumber;
const int IQHeaderInfo::kParentSnapIDFieldNumber;
const int IQHeaderInfo::kBasePathFieldNumber;
const int IQHeaderInfo::kFileExtensionFieldNumber;
const int IQHeaderInfo::kFileDataOffsetFieldNumber;
const int IQHeaderInfo::kFileDataSizeFieldNumber;
#endif  // !_MSC_VER

IQHeaderInfo::IQHeaderInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IQHeaderInfo::InitAsDefaultInstance() {
}

IQHeaderInfo::IQHeaderInfo(const IQHeaderInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IQHeaderInfo::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  freqrf_ = 0;
  snapid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  revid_ = 0;
  tasknum_ = 0;
  channel_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  feedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rcvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sample_rate_ = 0;
  duration_ = 0;
  ramsnap_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostname_ = const_cast< ::std::string*>(_default_hostname_);
  bandwidth_ = 0;
  derived_ = false;
  parentsnapid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  basepath_ = const_cast< ::std::string*>(_default_basepath_);
  fileextension_ = const_cast< ::std::string*>(_default_fileextension_);
  filedataoffset_ = GOOGLE_ULONGLONG(0);
  filedatasize_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IQHeaderInfo::~IQHeaderInfo() {
  SharedDtor();
}

void IQHeaderInfo::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (snapid_ != &::google::protobuf::internal::kEmptyString) {
    delete snapid_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (feedid_ != &::google::protobuf::internal::kEmptyString) {
    delete feedid_;
  }
  if (rcvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete rcvrid_;
  }
  if (ramsnap_time_ != &::google::protobuf::internal::kEmptyString) {
    delete ramsnap_time_;
  }
  if (hostname_ != _default_hostname_) {
    delete hostname_;
  }
  if (parentsnapid_ != &::google::protobuf::internal::kEmptyString) {
    delete parentsnapid_;
  }
  if (basepath_ != _default_basepath_) {
    delete basepath_;
  }
  if (fileextension_ != _default_fileextension_) {
    delete fileextension_;
  }
  if (this != default_instance_) {
  }
}

void IQHeaderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IQHeaderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IQHeaderInfo_descriptor_;
}

const IQHeaderInfo& IQHeaderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

IQHeaderInfo* IQHeaderInfo::default_instance_ = NULL;

IQHeaderInfo* IQHeaderInfo::New() const {
  return new IQHeaderInfo;
}

void IQHeaderInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    freqrf_ = 0;
    if (has_snapid()) {
      if (snapid_ != &::google::protobuf::internal::kEmptyString) {
        snapid_->clear();
      }
    }
    revid_ = 0;
    tasknum_ = 0;
    channel_ = 0;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_feedid()) {
      if (feedid_ != &::google::protobuf::internal::kEmptyString) {
        feedid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_rcvrid()) {
      if (rcvrid_ != &::google::protobuf::internal::kEmptyString) {
        rcvrid_->clear();
      }
    }
    sample_rate_ = 0;
    duration_ = 0;
    if (has_ramsnap_time()) {
      if (ramsnap_time_ != &::google::protobuf::internal::kEmptyString) {
        ramsnap_time_->clear();
      }
    }
    if (has_hostname()) {
      if (hostname_ != _default_hostname_) {
        hostname_->assign(*_default_hostname_);
      }
    }
    bandwidth_ = 0;
    derived_ = false;
    if (has_parentsnapid()) {
      if (parentsnapid_ != &::google::protobuf::internal::kEmptyString) {
        parentsnapid_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_basepath()) {
      if (basepath_ != _default_basepath_) {
        basepath_->assign(*_default_basepath_);
      }
    }
    if (has_fileextension()) {
      if (fileextension_ != _default_fileextension_) {
        fileextension_->assign(*_default_fileextension_);
      }
    }
    filedataoffset_ = GOOGLE_ULONGLONG(0);
    filedatasize_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IQHeaderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "IQHEADERINFO"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_freqRF;
        break;
      }

      // optional double freqRF = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freqRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freqrf_)));
          set_has_freqrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_snapid;
        break;
      }

      // optional string snapid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapid().data(), this->snapid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_revid;
        break;
      }

      // optional int32 revid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revid_)));
          set_has_revid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tasknum;
        break;
      }

      // optional int32 tasknum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tasknum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasknum_)));
          set_has_tasknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_channel;
        break;
      }

      // optional int32 channel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_filename;
        break;
      }

      // optional string filename = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_feedid;
        break;
      }

      // optional string feedid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feedid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feedid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->feedid().data(), this->feedid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_rcvrid;
        break;
      }

      // optional string rcvrid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rcvrid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rcvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rcvrid().data(), this->rcvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_sample_rate;
        break;
      }

      // optional double sample_rate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sample_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_rate_)));
          set_has_sample_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_duration;
        break;
      }

      // optional double duration = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ramsnap_time;
        break;
      }

      // optional string ramsnap_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ramsnap_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ramsnap_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ramsnap_time().data(), this->ramsnap_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_hostname;
        break;
      }

      // optional string hostname = 13 [default = "None"];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_bandwidth;
        break;
      }

      // optional double bandwidth = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_derived;
        break;
      }

      // optional bool derived = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_derived:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &derived_)));
          set_has_derived();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_parentSnapID;
        break;
      }

      // optional string parentSnapID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parentSnapID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentsnapid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parentsnapid().data(), this->parentsnapid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_basePath;
        break;
      }

      // optional string basePath = 17 [default = "/var/lib/kepler/snapshots/"];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->basepath().data(), this->basepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_fileExtension;
        break;
      }

      // optional string fileExtension = 18 [default = ".tmp"];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileExtension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileextension()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fileextension().data(), this->fileextension().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_fileDataOffset;
        break;
      }

      // optional uint64 fileDataOffset = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileDataOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filedataoffset_)));
          set_has_filedataoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_fileDataSize;
        break;
      }

      // optional uint64 fileDataSize = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileDataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filedatasize_)));
          set_has_filedatasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IQHeaderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "IQHEADERINFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double freqRF = 2;
  if (has_freqrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->freqrf(), output);
  }

  // optional string snapid = 3;
  if (has_snapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapid().data(), this->snapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->snapid(), output);
  }

  // optional int32 revid = 4;
  if (has_revid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->revid(), output);
  }

  // optional int32 tasknum = 5;
  if (has_tasknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tasknum(), output);
  }

  // optional int32 channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->channel(), output);
  }

  // optional string filename = 7;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->filename(), output);
  }

  // optional string feedid = 8;
  if (has_feedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feedid().data(), this->feedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->feedid(), output);
  }

  // optional string rcvrid = 9;
  if (has_rcvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rcvrid().data(), this->rcvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->rcvrid(), output);
  }

  // optional double sample_rate = 10;
  if (has_sample_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->sample_rate(), output);
  }

  // optional double duration = 11;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->duration(), output);
  }

  // optional string ramsnap_time = 12;
  if (has_ramsnap_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ramsnap_time().data(), this->ramsnap_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->ramsnap_time(), output);
  }

  // optional string hostname = 13 [default = "None"];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->hostname(), output);
  }

  // optional double bandwidth = 14;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->bandwidth(), output);
  }

  // optional bool derived = 15 [default = false];
  if (has_derived()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->derived(), output);
  }

  // optional string parentSnapID = 16;
  if (has_parentsnapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentsnapid().data(), this->parentsnapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->parentsnapid(), output);
  }

  // optional string basePath = 17 [default = "/var/lib/kepler/snapshots/"];
  if (has_basepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->basepath().data(), this->basepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->basepath(), output);
  }

  // optional string fileExtension = 18 [default = ".tmp"];
  if (has_fileextension()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fileextension().data(), this->fileextension().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->fileextension(), output);
  }

  // optional uint64 fileDataOffset = 51;
  if (has_filedataoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(51, this->filedataoffset(), output);
  }

  // optional uint64 fileDataSize = 52;
  if (has_filedatasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(52, this->filedatasize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IQHeaderInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "IQHEADERINFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double freqRF = 2;
  if (has_freqrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->freqrf(), target);
  }

  // optional string snapid = 3;
  if (has_snapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapid().data(), this->snapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->snapid(), target);
  }

  // optional int32 revid = 4;
  if (has_revid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->revid(), target);
  }

  // optional int32 tasknum = 5;
  if (has_tasknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tasknum(), target);
  }

  // optional int32 channel = 6;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->channel(), target);
  }

  // optional string filename = 7;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filename(), target);
  }

  // optional string feedid = 8;
  if (has_feedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feedid().data(), this->feedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->feedid(), target);
  }

  // optional string rcvrid = 9;
  if (has_rcvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rcvrid().data(), this->rcvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->rcvrid(), target);
  }

  // optional double sample_rate = 10;
  if (has_sample_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->sample_rate(), target);
  }

  // optional double duration = 11;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->duration(), target);
  }

  // optional string ramsnap_time = 12;
  if (has_ramsnap_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ramsnap_time().data(), this->ramsnap_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->ramsnap_time(), target);
  }

  // optional string hostname = 13 [default = "None"];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->hostname(), target);
  }

  // optional double bandwidth = 14;
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->bandwidth(), target);
  }

  // optional bool derived = 15 [default = false];
  if (has_derived()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->derived(), target);
  }

  // optional string parentSnapID = 16;
  if (has_parentsnapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentsnapid().data(), this->parentsnapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->parentsnapid(), target);
  }

  // optional string basePath = 17 [default = "/var/lib/kepler/snapshots/"];
  if (has_basepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->basepath().data(), this->basepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->basepath(), target);
  }

  // optional string fileExtension = 18 [default = ".tmp"];
  if (has_fileextension()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fileextension().data(), this->fileextension().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->fileextension(), target);
  }

  // optional uint64 fileDataOffset = 51;
  if (has_filedataoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(51, this->filedataoffset(), target);
  }

  // optional uint64 fileDataSize = 52;
  if (has_filedatasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(52, this->filedatasize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IQHeaderInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "IQHEADERINFO"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double freqRF = 2;
    if (has_freqrf()) {
      total_size += 1 + 8;
    }

    // optional string snapid = 3;
    if (has_snapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapid());
    }

    // optional int32 revid = 4;
    if (has_revid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revid());
    }

    // optional int32 tasknum = 5;
    if (has_tasknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasknum());
    }

    // optional int32 channel = 6;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional string filename = 7;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string feedid = 8;
    if (has_feedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feedid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string rcvrid = 9;
    if (has_rcvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rcvrid());
    }

    // optional double sample_rate = 10;
    if (has_sample_rate()) {
      total_size += 1 + 8;
    }

    // optional double duration = 11;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional string ramsnap_time = 12;
    if (has_ramsnap_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ramsnap_time());
    }

    // optional string hostname = 13 [default = "None"];
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional double bandwidth = 14;
    if (has_bandwidth()) {
      total_size += 1 + 8;
    }

    // optional bool derived = 15 [default = false];
    if (has_derived()) {
      total_size += 1 + 1;
    }

    // optional string parentSnapID = 16;
    if (has_parentsnapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentsnapid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string basePath = 17 [default = "/var/lib/kepler/snapshots/"];
    if (has_basepath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->basepath());
    }

    // optional string fileExtension = 18 [default = ".tmp"];
    if (has_fileextension()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileextension());
    }

    // optional uint64 fileDataOffset = 51;
    if (has_filedataoffset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filedataoffset());
    }

    // optional uint64 fileDataSize = 52;
    if (has_filedatasize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filedatasize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IQHeaderInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IQHeaderInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IQHeaderInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IQHeaderInfo::MergeFrom(const IQHeaderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_freqrf()) {
      set_freqrf(from.freqrf());
    }
    if (from.has_snapid()) {
      set_snapid(from.snapid());
    }
    if (from.has_revid()) {
      set_revid(from.revid());
    }
    if (from.has_tasknum()) {
      set_tasknum(from.tasknum());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_feedid()) {
      set_feedid(from.feedid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rcvrid()) {
      set_rcvrid(from.rcvrid());
    }
    if (from.has_sample_rate()) {
      set_sample_rate(from.sample_rate());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_ramsnap_time()) {
      set_ramsnap_time(from.ramsnap_time());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
    if (from.has_derived()) {
      set_derived(from.derived());
    }
    if (from.has_parentsnapid()) {
      set_parentsnapid(from.parentsnapid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_basepath()) {
      set_basepath(from.basepath());
    }
    if (from.has_fileextension()) {
      set_fileextension(from.fileextension());
    }
    if (from.has_filedataoffset()) {
      set_filedataoffset(from.filedataoffset());
    }
    if (from.has_filedatasize()) {
      set_filedatasize(from.filedatasize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IQHeaderInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IQHeaderInfo::CopyFrom(const IQHeaderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IQHeaderInfo::IsInitialized() const {

  return true;
}

void IQHeaderInfo::Swap(IQHeaderInfo* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(freqrf_, other->freqrf_);
    std::swap(snapid_, other->snapid_);
    std::swap(revid_, other->revid_);
    std::swap(tasknum_, other->tasknum_);
    std::swap(channel_, other->channel_);
    std::swap(filename_, other->filename_);
    std::swap(feedid_, other->feedid_);
    std::swap(rcvrid_, other->rcvrid_);
    std::swap(sample_rate_, other->sample_rate_);
    std::swap(duration_, other->duration_);
    std::swap(ramsnap_time_, other->ramsnap_time_);
    std::swap(hostname_, other->hostname_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(derived_, other->derived_);
    std::swap(parentsnapid_, other->parentsnapid_);
    std::swap(basepath_, other->basepath_);
    std::swap(fileextension_, other->fileextension_);
    std::swap(filedataoffset_, other->filedataoffset_);
    std::swap(filedatasize_, other->filedatasize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IQHeaderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IQHeaderInfo_descriptor_;
  metadata.reflection = IQHeaderInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IQMetaData::kFreqCfFieldNumber;
const int IQMetaData::kFreqMinFieldNumber;
const int IQMetaData::kFreqMaxFieldNumber;
const int IQMetaData::kDurationFieldNumber;
const int IQMetaData::kRamsnapTimeFieldNumber;
const int IQMetaData::kHostnameFieldNumber;
const int IQMetaData::kFeedIdFieldNumber;
const int IQMetaData::kRcvrIdFieldNumber;
#endif  // !_MSC_VER

IQMetaData::IQMetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IQMetaData::InitAsDefaultInstance() {
}

IQMetaData::IQMetaData(const IQMetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IQMetaData::SharedCtor() {
  _cached_size_ = 0;
  freqcf_ = 0;
  freqmin_ = 0;
  freqmax_ = 0;
  duration_ = 0;
  ramsnaptime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  feedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rcvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IQMetaData::~IQMetaData() {
  SharedDtor();
}

void IQMetaData::SharedDtor() {
  if (ramsnaptime_ != &::google::protobuf::internal::kEmptyString) {
    delete ramsnaptime_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (feedid_ != &::google::protobuf::internal::kEmptyString) {
    delete feedid_;
  }
  if (rcvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete rcvrid_;
  }
  if (this != default_instance_) {
  }
}

void IQMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IQMetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IQMetaData_descriptor_;
}

const IQMetaData& IQMetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

IQMetaData* IQMetaData::default_instance_ = NULL;

IQMetaData* IQMetaData::New() const {
  return new IQMetaData;
}

void IQMetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    freqcf_ = 0;
    freqmin_ = 0;
    freqmax_ = 0;
    duration_ = 0;
    if (has_ramsnaptime()) {
      if (ramsnaptime_ != &::google::protobuf::internal::kEmptyString) {
        ramsnaptime_->clear();
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_feedid()) {
      if (feedid_ != &::google::protobuf::internal::kEmptyString) {
        feedid_->clear();
      }
    }
    if (has_rcvrid()) {
      if (rcvrid_ != &::google::protobuf::internal::kEmptyString) {
        rcvrid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IQMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double freqCf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freqcf_)));
          set_has_freqcf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_freqMin;
        break;
      }

      // optional double freqMin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freqMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freqmin_)));
          set_has_freqmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_freqMax;
        break;
      }

      // optional double freqMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freqMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freqmax_)));
          set_has_freqmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_duration;
        break;
      }

      // optional double duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ramsnapTime;
        break;
      }

      // optional string ramsnapTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ramsnapTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ramsnaptime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ramsnaptime().data(), this->ramsnaptime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_hostname;
        break;
      }

      // optional string hostname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_feedId;
        break;
      }

      // optional string feedId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feedId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feedid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->feedid().data(), this->feedid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rcvrId;
        break;
      }

      // optional string rcvrId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rcvrId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rcvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rcvrid().data(), this->rcvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IQMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double freqCf = 1;
  if (has_freqcf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->freqcf(), output);
  }

  // optional double freqMin = 2;
  if (has_freqmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->freqmin(), output);
  }

  // optional double freqMax = 3;
  if (has_freqmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->freqmax(), output);
  }

  // optional double duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->duration(), output);
  }

  // optional string ramsnapTime = 5;
  if (has_ramsnaptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ramsnaptime().data(), this->ramsnaptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ramsnaptime(), output);
  }

  // optional string hostname = 6;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->hostname(), output);
  }

  // optional string feedId = 7;
  if (has_feedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feedid().data(), this->feedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->feedid(), output);
  }

  // optional string rcvrId = 8;
  if (has_rcvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rcvrid().data(), this->rcvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->rcvrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IQMetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double freqCf = 1;
  if (has_freqcf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->freqcf(), target);
  }

  // optional double freqMin = 2;
  if (has_freqmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->freqmin(), target);
  }

  // optional double freqMax = 3;
  if (has_freqmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->freqmax(), target);
  }

  // optional double duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->duration(), target);
  }

  // optional string ramsnapTime = 5;
  if (has_ramsnaptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ramsnaptime().data(), this->ramsnaptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ramsnaptime(), target);
  }

  // optional string hostname = 6;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->hostname(), target);
  }

  // optional string feedId = 7;
  if (has_feedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feedid().data(), this->feedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->feedid(), target);
  }

  // optional string rcvrId = 8;
  if (has_rcvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rcvrid().data(), this->rcvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rcvrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IQMetaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double freqCf = 1;
    if (has_freqcf()) {
      total_size += 1 + 8;
    }

    // optional double freqMin = 2;
    if (has_freqmin()) {
      total_size += 1 + 8;
    }

    // optional double freqMax = 3;
    if (has_freqmax()) {
      total_size += 1 + 8;
    }

    // optional double duration = 4;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional string ramsnapTime = 5;
    if (has_ramsnaptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ramsnaptime());
    }

    // optional string hostname = 6;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string feedId = 7;
    if (has_feedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feedid());
    }

    // optional string rcvrId = 8;
    if (has_rcvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rcvrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IQMetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IQMetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IQMetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IQMetaData::MergeFrom(const IQMetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_freqcf()) {
      set_freqcf(from.freqcf());
    }
    if (from.has_freqmin()) {
      set_freqmin(from.freqmin());
    }
    if (from.has_freqmax()) {
      set_freqmax(from.freqmax());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_ramsnaptime()) {
      set_ramsnaptime(from.ramsnaptime());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_feedid()) {
      set_feedid(from.feedid());
    }
    if (from.has_rcvrid()) {
      set_rcvrid(from.rcvrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IQMetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IQMetaData::CopyFrom(const IQMetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IQMetaData::IsInitialized() const {

  return true;
}

void IQMetaData::Swap(IQMetaData* other) {
  if (other != this) {
    std::swap(freqcf_, other->freqcf_);
    std::swap(freqmin_, other->freqmin_);
    std::swap(freqmax_, other->freqmax_);
    std::swap(duration_, other->duration_);
    std::swap(ramsnaptime_, other->ramsnaptime_);
    std::swap(hostname_, other->hostname_);
    std::swap(feedid_, other->feedid_);
    std::swap(rcvrid_, other->rcvrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IQMetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IQMetaData_descriptor_;
  metadata.reflection = IQMetaData_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SnapInfo::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SnapInfo::kMsgNameFieldNumber;
const int SnapInfo::kIQHeaderFieldNumber;
const int SnapInfo::kIqHeadersFieldNumber;
const int SnapInfo::kIqMetaDataFieldNumber;
#endif  // !_MSC_VER

SnapInfo::SnapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnapInfo::InitAsDefaultInstance() {
  iqheader_ = const_cast< ::tuner_msg::IQHeaderInfo*>(&::tuner_msg::IQHeaderInfo::default_instance());
  iqmetadata_ = const_cast< ::tuner_msg::IQMetaData*>(&::tuner_msg::IQMetaData::default_instance());
}

SnapInfo::SnapInfo(const SnapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnapInfo::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  iqheader_ = NULL;
  iqmetadata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapInfo::~SnapInfo() {
  SharedDtor();
}

void SnapInfo::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete iqheader_;
    delete iqmetadata_;
  }
}

void SnapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapInfo_descriptor_;
}

const SnapInfo& SnapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

SnapInfo* SnapInfo::default_instance_ = NULL;

SnapInfo* SnapInfo::New() const {
  return new SnapInfo;
}

void SnapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_iqheader()) {
      if (iqheader_ != NULL) iqheader_->::tuner_msg::IQHeaderInfo::Clear();
    }
    if (has_iqmetadata()) {
      if (iqmetadata_ != NULL) iqmetadata_->::tuner_msg::IQMetaData::Clear();
    }
  }
  iqheaders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SNAPINFO"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IQHeader;
        break;
      }

      // optional .tuner_msg.IQHeaderInfo IQHeader = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IQHeader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iqheader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_iqHeaders;
        break;
      }

      // repeated .tuner_msg.IQHeaderInfo iqHeaders = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iqHeaders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iqheaders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_iqHeaders;
        if (input->ExpectTag(34)) goto parse_iqMetaData;
        break;
      }

      // optional .tuner_msg.IQMetaData iqMetaData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iqMetaData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iqmetadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SNAPINFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .tuner_msg.IQHeaderInfo IQHeader = 2;
  if (has_iqheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iqheader(), output);
  }

  // repeated .tuner_msg.IQHeaderInfo iqHeaders = 3;
  for (int i = 0; i < this->iqheaders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->iqheaders(i), output);
  }

  // optional .tuner_msg.IQMetaData iqMetaData = 4;
  if (has_iqmetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->iqmetadata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SNAPINFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .tuner_msg.IQHeaderInfo IQHeader = 2;
  if (has_iqheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iqheader(), target);
  }

  // repeated .tuner_msg.IQHeaderInfo iqHeaders = 3;
  for (int i = 0; i < this->iqheaders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->iqheaders(i), target);
  }

  // optional .tuner_msg.IQMetaData iqMetaData = 4;
  if (has_iqmetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->iqmetadata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SNAPINFO"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .tuner_msg.IQHeaderInfo IQHeader = 2;
    if (has_iqheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iqheader());
    }

    // optional .tuner_msg.IQMetaData iqMetaData = 4;
    if (has_iqmetadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iqmetadata());
    }

  }
  // repeated .tuner_msg.IQHeaderInfo iqHeaders = 3;
  total_size += 1 * this->iqheaders_size();
  for (int i = 0; i < this->iqheaders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iqheaders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapInfo::MergeFrom(const SnapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  iqheaders_.MergeFrom(from.iqheaders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_iqheader()) {
      mutable_iqheader()->::tuner_msg::IQHeaderInfo::MergeFrom(from.iqheader());
    }
    if (from.has_iqmetadata()) {
      mutable_iqmetadata()->::tuner_msg::IQMetaData::MergeFrom(from.iqmetadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapInfo::CopyFrom(const SnapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapInfo::IsInitialized() const {

  return true;
}

void SnapInfo::Swap(SnapInfo* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(iqheader_, other->iqheader_);
    iqheaders_.Swap(&other->iqheaders_);
    std::swap(iqmetadata_, other->iqmetadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapInfo_descriptor_;
  metadata.reflection = SnapInfo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ChangeTuneRange::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ChangeTuneRange::kMsgNameFieldNumber;
const int ChangeTuneRange::kChannelFieldNumber;
const int ChangeTuneRange::kAppIDFieldNumber;
const int ChangeTuneRange::kTunePlanFieldNumber;
const int ChangeTuneRange::kAllowOverlapFieldNumber;
#endif  // !_MSC_VER

ChangeTuneRange::ChangeTuneRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeTuneRange::InitAsDefaultInstance() {
}

ChangeTuneRange::ChangeTuneRange(const ChangeTuneRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeTuneRange::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = -1;
  appid_ = 0;
  allowoverlap_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeTuneRange::~ChangeTuneRange() {
  SharedDtor();
}

void ChangeTuneRange::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ChangeTuneRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeTuneRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeTuneRange_descriptor_;
}

const ChangeTuneRange& ChangeTuneRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

ChangeTuneRange* ChangeTuneRange::default_instance_ = NULL;

ChangeTuneRange* ChangeTuneRange::New() const {
  return new ChangeTuneRange;
}

void ChangeTuneRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = -1;
    appid_ = 0;
    allowoverlap_ = true;
  }
  tuneplan_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeTuneRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "CHANGE_TUNE_RANGE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appID;
        break;
      }

      // optional int32 appID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tunePlan;
        break;
      }

      // repeated .tuner_msg.TuneRange tunePlan = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tunePlan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tuneplan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tunePlan;
        if (input->ExpectTag(40)) goto parse_allowOverlap;
        break;
      }

      // optional bool allowOverlap = 5 [default = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allowOverlap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowoverlap_)));
          set_has_allowoverlap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeTuneRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "CHANGE_TUNE_RANGE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2 [default = -1];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  // repeated .tuner_msg.TuneRange tunePlan = 4;
  for (int i = 0; i < this->tuneplan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tuneplan(i), output);
  }

  // optional bool allowOverlap = 5 [default = true];
  if (has_allowoverlap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->allowoverlap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeTuneRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "CHANGE_TUNE_RANGE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2 [default = -1];
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  // repeated .tuner_msg.TuneRange tunePlan = 4;
  for (int i = 0; i < this->tuneplan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tuneplan(i), target);
  }

  // optional bool allowOverlap = 5 [default = true];
  if (has_allowoverlap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->allowoverlap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeTuneRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "CHANGE_TUNE_RANGE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2 [default = -1];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 appID = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional bool allowOverlap = 5 [default = true];
    if (has_allowoverlap()) {
      total_size += 1 + 1;
    }

  }
  // repeated .tuner_msg.TuneRange tunePlan = 4;
  total_size += 1 * this->tuneplan_size();
  for (int i = 0; i < this->tuneplan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tuneplan(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeTuneRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeTuneRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeTuneRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeTuneRange::MergeFrom(const ChangeTuneRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  tuneplan_.MergeFrom(from.tuneplan_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_allowoverlap()) {
      set_allowoverlap(from.allowoverlap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeTuneRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeTuneRange::CopyFrom(const ChangeTuneRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeTuneRange::IsInitialized() const {

  return true;
}

void ChangeTuneRange::Swap(ChangeTuneRange* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(appid_, other->appid_);
    tuneplan_.Swap(&other->tuneplan_);
    std::swap(allowoverlap_, other->allowoverlap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeTuneRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeTuneRange_descriptor_;
  metadata.reflection = ChangeTuneRange_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TuneRange::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int TuneRange::kMsgNameFieldNumber;
const int TuneRange::kStartRfFieldNumber;
const int TuneRange::kEndRfFieldNumber;
const int TuneRange::kStepFieldNumber;
const int TuneRange::kDurationFieldNumber;
const int TuneRange::kGainFieldNumber;
const int TuneRange::kAttenFieldNumber;
const int TuneRange::kBwMHzFieldNumber;
const int TuneRange::kAppIDFieldNumber;
#endif  // !_MSC_VER

TuneRange::TuneRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TuneRange::InitAsDefaultInstance() {
}

TuneRange::TuneRange(const TuneRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TuneRange::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  startrf_ = 0;
  endrf_ = 0;
  step_ = 0;
  duration_ = 0;
  gain_ = 0;
  atten_ = 0;
  bwmhz_ = 20;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TuneRange::~TuneRange() {
  SharedDtor();
}

void TuneRange::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void TuneRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TuneRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TuneRange_descriptor_;
}

const TuneRange& TuneRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

TuneRange* TuneRange::default_instance_ = NULL;

TuneRange* TuneRange::New() const {
  return new TuneRange;
}

void TuneRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    startrf_ = 0;
    endrf_ = 0;
    step_ = 0;
    duration_ = 0;
    gain_ = 0;
    atten_ = 0;
    bwmhz_ = 20;
  }
  appid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TuneRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TUNE_RANGE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_startRf;
        break;
      }

      // optional double startRf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_startRf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startrf_)));
          set_has_startrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_endRf;
        break;
      }

      // optional double endRf = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_endRf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endrf_)));
          set_has_endrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_step;
        break;
      }

      // optional double step = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_duration;
        break;
      }

      // optional double duration = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_gain;
        break;
      }

      // optional double gain = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_atten;
        break;
      }

      // optional int32 atten = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atten:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atten_)));
          set_has_atten();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_bwMHz;
        break;
      }

      // optional float bwMHz = 8 [default = 20];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bwMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bwmhz_)));
          set_has_bwmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_appID;
        break;
      }

      // repeated int32 appID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_appid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_appid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_appID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TuneRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TUNE_RANGE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double startRf = 2;
  if (has_startrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->startrf(), output);
  }

  // optional double endRf = 3;
  if (has_endrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->endrf(), output);
  }

  // optional double step = 4;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->step(), output);
  }

  // optional double duration = 5;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->duration(), output);
  }

  // optional double gain = 6;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->gain(), output);
  }

  // optional int32 atten = 7;
  if (has_atten()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->atten(), output);
  }

  // optional float bwMHz = 8 [default = 20];
  if (has_bwmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->bwmhz(), output);
  }

  // repeated int32 appID = 9;
  for (int i = 0; i < this->appid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->appid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TuneRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TUNE_RANGE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double startRf = 2;
  if (has_startrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->startrf(), target);
  }

  // optional double endRf = 3;
  if (has_endrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->endrf(), target);
  }

  // optional double step = 4;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->step(), target);
  }

  // optional double duration = 5;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->duration(), target);
  }

  // optional double gain = 6;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->gain(), target);
  }

  // optional int32 atten = 7;
  if (has_atten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->atten(), target);
  }

  // optional float bwMHz = 8 [default = 20];
  if (has_bwmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->bwmhz(), target);
  }

  // repeated int32 appID = 9;
  for (int i = 0; i < this->appid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->appid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TuneRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TUNE_RANGE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double startRf = 2;
    if (has_startrf()) {
      total_size += 1 + 8;
    }

    // optional double endRf = 3;
    if (has_endrf()) {
      total_size += 1 + 8;
    }

    // optional double step = 4;
    if (has_step()) {
      total_size += 1 + 8;
    }

    // optional double duration = 5;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional double gain = 6;
    if (has_gain()) {
      total_size += 1 + 8;
    }

    // optional int32 atten = 7;
    if (has_atten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atten());
    }

    // optional float bwMHz = 8 [default = 20];
    if (has_bwmhz()) {
      total_size += 1 + 4;
    }

  }
  // repeated int32 appID = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->appid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->appid(i));
    }
    total_size += 1 * this->appid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TuneRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TuneRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TuneRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TuneRange::MergeFrom(const TuneRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  appid_.MergeFrom(from.appid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_startrf()) {
      set_startrf(from.startrf());
    }
    if (from.has_endrf()) {
      set_endrf(from.endrf());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
    if (from.has_atten()) {
      set_atten(from.atten());
    }
    if (from.has_bwmhz()) {
      set_bwmhz(from.bwmhz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TuneRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuneRange::CopyFrom(const TuneRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuneRange::IsInitialized() const {

  return true;
}

void TuneRange::Swap(TuneRange* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(startrf_, other->startrf_);
    std::swap(endrf_, other->endrf_);
    std::swap(step_, other->step_);
    std::swap(duration_, other->duration_);
    std::swap(gain_, other->gain_);
    std::swap(atten_, other->atten_);
    std::swap(bwmhz_, other->bwmhz_);
    appid_.Swap(&other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TuneRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TuneRange_descriptor_;
  metadata.reflection = TuneRange_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReceiverStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverStatus_Status_descriptor_;
}
bool ReceiverStatus_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReceiverStatus_Status ReceiverStatus::SCANNING;
const ReceiverStatus_Status ReceiverStatus::DWELLING;
const ReceiverStatus_Status ReceiverStatus::OFF;
const ReceiverStatus_Status ReceiverStatus::Status_MIN;
const ReceiverStatus_Status ReceiverStatus::Status_MAX;
const int ReceiverStatus::Status_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* ReceiverStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ReceiverStatus::kMsgNameFieldNumber;
const int ReceiverStatus::kChannelFieldNumber;
const int ReceiverStatus::kTunePlanFieldNumber;
const int ReceiverStatus::kCurrentFrequencyFieldNumber;
const int ReceiverStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

ReceiverStatus::ReceiverStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiverStatus::InitAsDefaultInstance() {
}

ReceiverStatus::ReceiverStatus(const ReceiverStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiverStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  currentfrequency_ = 0;
  status_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiverStatus::~ReceiverStatus() {
  SharedDtor();
}

void ReceiverStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ReceiverStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiverStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverStatus_descriptor_;
}

const ReceiverStatus& ReceiverStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

ReceiverStatus* ReceiverStatus::default_instance_ = NULL;

ReceiverStatus* ReceiverStatus::New() const {
  return new ReceiverStatus;
}

void ReceiverStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    currentfrequency_ = 0;
    status_ = 3;
  }
  tuneplan_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiverStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RECEIVERSTATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tunePlan;
        break;
      }

      // repeated .tuner_msg.TuneRange tunePlan = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tunePlan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tuneplan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tunePlan;
        if (input->ExpectTag(33)) goto parse_currentFrequency;
        break;
      }

      // optional double currentFrequency = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_currentFrequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currentfrequency_)));
          set_has_currentfrequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional .tuner_msg.ReceiverStatus.Status status = 5 [default = OFF];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tuner_msg::ReceiverStatus_Status_IsValid(value)) {
            set_status(static_cast< ::tuner_msg::ReceiverStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiverStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RECEIVERSTATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // repeated .tuner_msg.TuneRange tunePlan = 3;
  for (int i = 0; i < this->tuneplan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tuneplan(i), output);
  }

  // optional double currentFrequency = 4;
  if (has_currentfrequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->currentfrequency(), output);
  }

  // optional .tuner_msg.ReceiverStatus.Status status = 5 [default = OFF];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiverStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RECEIVERSTATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // repeated .tuner_msg.TuneRange tunePlan = 3;
  for (int i = 0; i < this->tuneplan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tuneplan(i), target);
  }

  // optional double currentFrequency = 4;
  if (has_currentfrequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->currentfrequency(), target);
  }

  // optional .tuner_msg.ReceiverStatus.Status status = 5 [default = OFF];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiverStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RECEIVERSTATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional double currentFrequency = 4;
    if (has_currentfrequency()) {
      total_size += 1 + 8;
    }

    // optional .tuner_msg.ReceiverStatus.Status status = 5 [default = OFF];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .tuner_msg.TuneRange tunePlan = 3;
  total_size += 1 * this->tuneplan_size();
  for (int i = 0; i < this->tuneplan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tuneplan(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiverStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiverStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiverStatus::MergeFrom(const ReceiverStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  tuneplan_.MergeFrom(from.tuneplan_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_currentfrequency()) {
      set_currentfrequency(from.currentfrequency());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiverStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverStatus::CopyFrom(const ReceiverStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverStatus::IsInitialized() const {

  return true;
}

void ReceiverStatus::Swap(ReceiverStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    tuneplan_.Swap(&other->tuneplan_);
    std::swap(currentfrequency_, other->currentfrequency_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiverStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiverStatus_descriptor_;
  metadata.reflection = ReceiverStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* QueryReceiverStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int QueryReceiverStatus::kMsgNameFieldNumber;
const int QueryReceiverStatus::kChannelFieldNumber;
#endif  // !_MSC_VER

QueryReceiverStatus::QueryReceiverStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryReceiverStatus::InitAsDefaultInstance() {
}

QueryReceiverStatus::QueryReceiverStatus(const QueryReceiverStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryReceiverStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryReceiverStatus::~QueryReceiverStatus() {
  SharedDtor();
}

void QueryReceiverStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void QueryReceiverStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryReceiverStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryReceiverStatus_descriptor_;
}

const QueryReceiverStatus& QueryReceiverStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

QueryReceiverStatus* QueryReceiverStatus::default_instance_ = NULL;

QueryReceiverStatus* QueryReceiverStatus::New() const {
  return new QueryReceiverStatus;
}

void QueryReceiverStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryReceiverStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "QUERYRECEIVERSTATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryReceiverStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "QUERYRECEIVERSTATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryReceiverStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "QUERYRECEIVERSTATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryReceiverStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "QUERYRECEIVERSTATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryReceiverStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryReceiverStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryReceiverStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryReceiverStatus::MergeFrom(const QueryReceiverStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryReceiverStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryReceiverStatus::CopyFrom(const QueryReceiverStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryReceiverStatus::IsInitialized() const {

  return true;
}

void QueryReceiverStatus::Swap(QueryReceiverStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryReceiverStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryReceiverStatus_descriptor_;
  metadata.reflection = QueryReceiverStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TimingCheck::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int TimingCheck::kMsgNameFieldNumber;
const int TimingCheck::kChannelFieldNumber;
const int TimingCheck::kTimingFieldNumber;
#endif  // !_MSC_VER

TimingCheck::TimingCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimingCheck::InitAsDefaultInstance() {
}

TimingCheck::TimingCheck(const TimingCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimingCheck::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  timing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimingCheck::~TimingCheck() {
  SharedDtor();
}

void TimingCheck::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (timing_ != &::google::protobuf::internal::kEmptyString) {
    delete timing_;
  }
  if (this != default_instance_) {
  }
}

void TimingCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimingCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimingCheck_descriptor_;
}

const TimingCheck& TimingCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

TimingCheck* TimingCheck::default_instance_ = NULL;

TimingCheck* TimingCheck::New() const {
  return new TimingCheck;
}

void TimingCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    if (has_timing()) {
      if (timing_ != &::google::protobuf::internal::kEmptyString) {
        timing_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimingCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TIMINGCHECK"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timing;
        break;
      }

      // optional string timing = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timing()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timing().data(), this->timing().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimingCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TIMINGCHECK"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional string timing = 3;
  if (has_timing()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timing().data(), this->timing().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->timing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimingCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TIMINGCHECK"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional string timing = 3;
  if (has_timing()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timing().data(), this->timing().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimingCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TIMINGCHECK"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional string timing = 3;
    if (has_timing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimingCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimingCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimingCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimingCheck::MergeFrom(const TimingCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_timing()) {
      set_timing(from.timing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimingCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimingCheck::CopyFrom(const TimingCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimingCheck::IsInitialized() const {

  return true;
}

void TimingCheck::Swap(TimingCheck* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(timing_, other->timing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimingCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimingCheck_descriptor_;
  metadata.reflection = TimingCheck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DwellScan_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DwellScan_State_descriptor_;
}
bool DwellScan_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DwellScan_State DwellScan::START;
const DwellScan_State DwellScan::DWELL;
const DwellScan_State DwellScan::STOP;
const DwellScan_State DwellScan::State_MIN;
const DwellScan_State DwellScan::State_MAX;
const int DwellScan::State_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DwellScan_GainMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DwellScan_GainMode_descriptor_;
}
bool DwellScan_GainMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DwellScan_GainMode DwellScan::AGC;
const DwellScan_GainMode DwellScan::MANUAL;
const DwellScan_GainMode DwellScan::GainMode_MIN;
const DwellScan_GainMode DwellScan::GainMode_MAX;
const int DwellScan::GainMode_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* DwellScan::_default_msgname_ = NULL;
::std::string* DwellScan::_default_hostname_ = NULL;
#ifndef _MSC_VER
const int DwellScan::kMsgNameFieldNumber;
const int DwellScan::kChannelFieldNumber;
const int DwellScan::kFreqMHzFieldNumber;
const int DwellScan::kGaindBFieldNumber;
const int DwellScan::kBwMHzFieldNumber;
const int DwellScan::kDurationFieldNumber;
const int DwellScan::kStateFieldNumber;
const int DwellScan::kAppIDFieldNumber;
const int DwellScan::kMergeFileFieldNumber;
const int DwellScan::kGainModeFieldNumber;
const int DwellScan::kHostnameFieldNumber;
#endif  // !_MSC_VER

DwellScan::DwellScan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DwellScan::InitAsDefaultInstance() {
}

DwellScan::DwellScan(const DwellScan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DwellScan::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  freqmhz_ = 0;
  gaindb_ = 0;
  bwmhz_ = 20;
  duration_ = -1;
  state_ = 1;
  appid_ = 0;
  mergefile_ = false;
  gainmode_ = 0;
  hostname_ = const_cast< ::std::string*>(_default_hostname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DwellScan::~DwellScan() {
  SharedDtor();
}

void DwellScan::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (hostname_ != _default_hostname_) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void DwellScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DwellScan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DwellScan_descriptor_;
}

const DwellScan& DwellScan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

DwellScan* DwellScan::default_instance_ = NULL;

DwellScan* DwellScan::New() const {
  return new DwellScan;
}

void DwellScan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    freqmhz_ = 0;
    gaindb_ = 0;
    bwmhz_ = 20;
    duration_ = -1;
    state_ = 1;
    appid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mergefile_ = false;
    gainmode_ = 0;
    if (has_hostname()) {
      if (hostname_ != _default_hostname_) {
        hostname_->assign(*_default_hostname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DwellScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DWELLSCAN"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_freqMHz;
        break;
      }

      // optional float freqMHz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freqmhz_)));
          set_has_freqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_gaindB;
        break;
      }

      // optional float gaindB = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gaindB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gaindb_)));
          set_has_gaindb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_bwMHz;
        break;
      }

      // optional float bwMHz = 5 [default = 20];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bwMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bwmhz_)));
          set_has_bwmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_duration;
        break;
      }

      // optional float duration = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_state;
        break;
      }

      // optional .tuner_msg.DwellScan.State state = 7 [default = DWELL];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tuner_msg::DwellScan_State_IsValid(value)) {
            set_state(static_cast< ::tuner_msg::DwellScan_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_appID;
        break;
      }

      // optional int32 appID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mergeFile;
        break;
      }

      // optional bool mergeFile = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mergeFile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mergefile_)));
          set_has_mergefile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gainMode;
        break;
      }

      // optional .tuner_msg.DwellScan.GainMode gainMode = 10 [default = AGC];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gainMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tuner_msg::DwellScan_GainMode_IsValid(value)) {
            set_gainmode(static_cast< ::tuner_msg::DwellScan_GainMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_hostname;
        break;
      }

      // optional string hostname = 11 [default = "None"];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DwellScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DWELLSCAN"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional float freqMHz = 3;
  if (has_freqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->freqmhz(), output);
  }

  // optional float gaindB = 4;
  if (has_gaindb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->gaindb(), output);
  }

  // optional float bwMHz = 5 [default = 20];
  if (has_bwmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->bwmhz(), output);
  }

  // optional float duration = 6 [default = -1];
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->duration(), output);
  }

  // optional .tuner_msg.DwellScan.State state = 7 [default = DWELL];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->state(), output);
  }

  // optional int32 appID = 8;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->appid(), output);
  }

  // optional bool mergeFile = 9 [default = false];
  if (has_mergefile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->mergefile(), output);
  }

  // optional .tuner_msg.DwellScan.GainMode gainMode = 10 [default = AGC];
  if (has_gainmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->gainmode(), output);
  }

  // optional string hostname = 11 [default = "None"];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->hostname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DwellScan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DWELLSCAN"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional float freqMHz = 3;
  if (has_freqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->freqmhz(), target);
  }

  // optional float gaindB = 4;
  if (has_gaindb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->gaindb(), target);
  }

  // optional float bwMHz = 5 [default = 20];
  if (has_bwmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->bwmhz(), target);
  }

  // optional float duration = 6 [default = -1];
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->duration(), target);
  }

  // optional .tuner_msg.DwellScan.State state = 7 [default = DWELL];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->state(), target);
  }

  // optional int32 appID = 8;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->appid(), target);
  }

  // optional bool mergeFile = 9 [default = false];
  if (has_mergefile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->mergefile(), target);
  }

  // optional .tuner_msg.DwellScan.GainMode gainMode = 10 [default = AGC];
  if (has_gainmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->gainmode(), target);
  }

  // optional string hostname = 11 [default = "None"];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->hostname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DwellScan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DWELLSCAN"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional float freqMHz = 3;
    if (has_freqmhz()) {
      total_size += 1 + 4;
    }

    // optional float gaindB = 4;
    if (has_gaindb()) {
      total_size += 1 + 4;
    }

    // optional float bwMHz = 5 [default = 20];
    if (has_bwmhz()) {
      total_size += 1 + 4;
    }

    // optional float duration = 6 [default = -1];
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional .tuner_msg.DwellScan.State state = 7 [default = DWELL];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int32 appID = 8;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool mergeFile = 9 [default = false];
    if (has_mergefile()) {
      total_size += 1 + 1;
    }

    // optional .tuner_msg.DwellScan.GainMode gainMode = 10 [default = AGC];
    if (has_gainmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gainmode());
    }

    // optional string hostname = 11 [default = "None"];
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DwellScan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DwellScan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DwellScan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DwellScan::MergeFrom(const DwellScan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_freqmhz()) {
      set_freqmhz(from.freqmhz());
    }
    if (from.has_gaindb()) {
      set_gaindb(from.gaindb());
    }
    if (from.has_bwmhz()) {
      set_bwmhz(from.bwmhz());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mergefile()) {
      set_mergefile(from.mergefile());
    }
    if (from.has_gainmode()) {
      set_gainmode(from.gainmode());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DwellScan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DwellScan::CopyFrom(const DwellScan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DwellScan::IsInitialized() const {

  return true;
}

void DwellScan::Swap(DwellScan* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(freqmhz_, other->freqmhz_);
    std::swap(gaindb_, other->gaindb_);
    std::swap(bwmhz_, other->bwmhz_);
    std::swap(duration_, other->duration_);
    std::swap(state_, other->state_);
    std::swap(appid_, other->appid_);
    std::swap(mergefile_, other->mergefile_);
    std::swap(gainmode_, other->gainmode_);
    std::swap(hostname_, other->hostname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DwellScan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DwellScan_descriptor_;
  metadata.reflection = DwellScan_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TxTune::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int TxTune::kMsgNameFieldNumber;
const int TxTune::kStateFieldNumber;
const int TxTune::kChannelFieldNumber;
const int TxTune::kFreqMHzFieldNumber;
const int TxTune::kGaindBFieldNumber;
const int TxTune::kSampleRateFieldNumber;
const int TxTune::kConfigFieldNumber;
const int TxTune::kCapeStateFieldNumber;
#endif  // !_MSC_VER

TxTune::TxTune()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxTune::InitAsDefaultInstance() {
}

TxTune::TxTune(const TxTune& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxTune::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  state_ = false;
  channel_ = 0;
  freqmhz_ = 0;
  gaindb_ = 0;
  samplerate_ = 0;
  config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  capestate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxTune::~TxTune() {
  SharedDtor();
}

void TxTune::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    delete config_;
  }
  if (this != default_instance_) {
  }
}

void TxTune::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxTune::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxTune_descriptor_;
}

const TxTune& TxTune::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

TxTune* TxTune::default_instance_ = NULL;

TxTune* TxTune::New() const {
  return new TxTune;
}

void TxTune::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    state_ = false;
    channel_ = 0;
    freqmhz_ = 0;
    gaindb_ = 0;
    samplerate_ = 0;
    if (has_config()) {
      if (config_ != &::google::protobuf::internal::kEmptyString) {
        config_->clear();
      }
    }
    capestate_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxTune::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TXTUNE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional bool state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel;
        break;
      }

      // optional int32 channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_freqMHz;
        break;
      }

      // optional float freqMHz = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freqmhz_)));
          set_has_freqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_gaindB;
        break;
      }

      // optional float gaindB = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gaindB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gaindb_)));
          set_has_gaindb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_sampleRate;
        break;
      }

      // optional float sampleRate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sampleRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &samplerate_)));
          set_has_samplerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_config;
        break;
      }

      // optional string config = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_capeState;
        break;
      }

      // optional bool capeState = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capeState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &capestate_)));
          set_has_capestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxTune::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TXTUNE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->state(), output);
  }

  // optional int32 channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel(), output);
  }

  // optional float freqMHz = 4;
  if (has_freqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->freqmhz(), output);
  }

  // optional float gaindB = 5;
  if (has_gaindb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gaindb(), output);
  }

  // optional float sampleRate = 6;
  if (has_samplerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->samplerate(), output);
  }

  // optional string config = 7;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->config(), output);
  }

  // optional bool capeState = 8;
  if (has_capestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->capestate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxTune::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TXTUNE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->state(), target);
  }

  // optional int32 channel = 3;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel(), target);
  }

  // optional float freqMHz = 4;
  if (has_freqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->freqmhz(), target);
  }

  // optional float gaindB = 5;
  if (has_gaindb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gaindb(), target);
  }

  // optional float sampleRate = 6;
  if (has_samplerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->samplerate(), target);
  }

  // optional string config = 7;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->config(), target);
  }

  // optional bool capeState = 8;
  if (has_capestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->capestate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxTune::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TXTUNE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool state = 2;
    if (has_state()) {
      total_size += 1 + 1;
    }

    // optional int32 channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional float freqMHz = 4;
    if (has_freqmhz()) {
      total_size += 1 + 4;
    }

    // optional float gaindB = 5;
    if (has_gaindb()) {
      total_size += 1 + 4;
    }

    // optional float sampleRate = 6;
    if (has_samplerate()) {
      total_size += 1 + 4;
    }

    // optional string config = 7;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config());
    }

    // optional bool capeState = 8;
    if (has_capestate()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxTune::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxTune* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxTune*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxTune::MergeFrom(const TxTune& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_freqmhz()) {
      set_freqmhz(from.freqmhz());
    }
    if (from.has_gaindb()) {
      set_gaindb(from.gaindb());
    }
    if (from.has_samplerate()) {
      set_samplerate(from.samplerate());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
    if (from.has_capestate()) {
      set_capestate(from.capestate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxTune::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxTune::CopyFrom(const TxTune& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxTune::IsInitialized() const {

  return true;
}

void TxTune::Swap(TxTune* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(state_, other->state_);
    std::swap(channel_, other->channel_);
    std::swap(freqmhz_, other->freqmhz_);
    std::swap(gaindb_, other->gaindb_);
    std::swap(samplerate_, other->samplerate_);
    std::swap(config_, other->config_);
    std::swap(capestate_, other->capestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxTune::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxTune_descriptor_;
  metadata.reflection = TxTune_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ReactiveJam::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ReactiveJam::kMsgNameFieldNumber;
const int ReactiveJam::kStateFieldNumber;
#endif  // !_MSC_VER

ReactiveJam::ReactiveJam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReactiveJam::InitAsDefaultInstance() {
}

ReactiveJam::ReactiveJam(const ReactiveJam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReactiveJam::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReactiveJam::~ReactiveJam() {
  SharedDtor();
}

void ReactiveJam::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ReactiveJam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReactiveJam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReactiveJam_descriptor_;
}

const ReactiveJam& ReactiveJam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

ReactiveJam* ReactiveJam::default_instance_ = NULL;

ReactiveJam* ReactiveJam::New() const {
  return new ReactiveJam;
}

void ReactiveJam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    state_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReactiveJam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "REACTIVEJAM"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional bool state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReactiveJam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "REACTIVEJAM"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReactiveJam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "REACTIVEJAM"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReactiveJam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "REACTIVEJAM"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool state = 2;
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReactiveJam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReactiveJam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReactiveJam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReactiveJam::MergeFrom(const ReactiveJam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReactiveJam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReactiveJam::CopyFrom(const ReactiveJam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReactiveJam::IsInitialized() const {

  return true;
}

void ReactiveJam::Swap(ReactiveJam* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReactiveJam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReactiveJam_descriptor_;
  metadata.reflection = ReactiveJam_reflection_;
  return metadata;
}


// ===================================================================

::std::string* diskSnapAvailable::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int diskSnapAvailable::kMsgNameFieldNumber;
const int diskSnapAvailable::kDiskSnapIDFieldNumber;
const int diskSnapAvailable::kFilenameFieldNumber;
const int diskSnapAvailable::kHostnameFieldNumber;
#endif  // !_MSC_VER

diskSnapAvailable::diskSnapAvailable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void diskSnapAvailable::InitAsDefaultInstance() {
}

diskSnapAvailable::diskSnapAvailable(const diskSnapAvailable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void diskSnapAvailable::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  disksnapid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

diskSnapAvailable::~diskSnapAvailable() {
  SharedDtor();
}

void diskSnapAvailable::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (disksnapid_ != &::google::protobuf::internal::kEmptyString) {
    delete disksnapid_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void diskSnapAvailable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* diskSnapAvailable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return diskSnapAvailable_descriptor_;
}

const diskSnapAvailable& diskSnapAvailable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

diskSnapAvailable* diskSnapAvailable::default_instance_ = NULL;

diskSnapAvailable* diskSnapAvailable::New() const {
  return new diskSnapAvailable;
}

void diskSnapAvailable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_disksnapid()) {
      if (disksnapid_ != &::google::protobuf::internal::kEmptyString) {
        disksnapid_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool diskSnapAvailable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DISKSNAPAVAILABLE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_diskSnapID;
        break;
      }

      // optional string diskSnapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diskSnapID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disksnapid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disksnapid().data(), this->disksnapid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filename;
        break;
      }

      // optional string filename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hostname;
        break;
      }

      // optional string hostname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void diskSnapAvailable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DISKSNAPAVAILABLE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string diskSnapID = 2;
  if (has_disksnapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disksnapid().data(), this->disksnapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->disksnapid(), output);
  }

  // optional string filename = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(), output);
  }

  // optional string hostname = 4;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hostname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* diskSnapAvailable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DISKSNAPAVAILABLE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string diskSnapID = 2;
  if (has_disksnapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disksnapid().data(), this->disksnapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->disksnapid(), target);
  }

  // optional string filename = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // optional string hostname = 4;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hostname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int diskSnapAvailable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DISKSNAPAVAILABLE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string diskSnapID = 2;
    if (has_disksnapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disksnapid());
    }

    // optional string filename = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string hostname = 4;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void diskSnapAvailable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const diskSnapAvailable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const diskSnapAvailable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void diskSnapAvailable::MergeFrom(const diskSnapAvailable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_disksnapid()) {
      set_disksnapid(from.disksnapid());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void diskSnapAvailable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void diskSnapAvailable::CopyFrom(const diskSnapAvailable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool diskSnapAvailable::IsInitialized() const {

  return true;
}

void diskSnapAvailable::Swap(diskSnapAvailable* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(disksnapid_, other->disksnapid_);
    std::swap(filename_, other->filename_);
    std::swap(hostname_, other->hostname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata diskSnapAvailable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = diskSnapAvailable_descriptor_;
  metadata.reflection = diskSnapAvailable_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SnapBroadcast_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapBroadcast_State_descriptor_;
}
bool SnapBroadcast_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SnapBroadcast_State SnapBroadcast::START;
const SnapBroadcast_State SnapBroadcast::STOP;
const SnapBroadcast_State SnapBroadcast::State_MIN;
const SnapBroadcast_State SnapBroadcast::State_MAX;
const int SnapBroadcast::State_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* SnapBroadcast::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SnapBroadcast::kMsgNameFieldNumber;
const int SnapBroadcast::kFreqMHzFieldNumber;
const int SnapBroadcast::kStateFieldNumber;
#endif  // !_MSC_VER

SnapBroadcast::SnapBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnapBroadcast::InitAsDefaultInstance() {
}

SnapBroadcast::SnapBroadcast(const SnapBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnapBroadcast::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  freqmhz_ = 0;
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapBroadcast::~SnapBroadcast() {
  SharedDtor();
}

void SnapBroadcast::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void SnapBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapBroadcast_descriptor_;
}

const SnapBroadcast& SnapBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

SnapBroadcast* SnapBroadcast::default_instance_ = NULL;

SnapBroadcast* SnapBroadcast::New() const {
  return new SnapBroadcast;
}

void SnapBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    freqmhz_ = 0;
    state_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SNAPBROADCAST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_freqMHz;
        break;
      }

      // optional float freqMHz = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freqmhz_)));
          set_has_freqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .tuner_msg.SnapBroadcast.State state = 3 [default = STOP];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tuner_msg::SnapBroadcast_State_IsValid(value)) {
            set_state(static_cast< ::tuner_msg::SnapBroadcast_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnapBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SNAPBROADCAST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional float freqMHz = 2;
  if (has_freqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->freqmhz(), output);
  }

  // optional .tuner_msg.SnapBroadcast.State state = 3 [default = STOP];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnapBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SNAPBROADCAST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional float freqMHz = 2;
  if (has_freqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->freqmhz(), target);
  }

  // optional .tuner_msg.SnapBroadcast.State state = 3 [default = STOP];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnapBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SNAPBROADCAST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional float freqMHz = 2;
    if (has_freqmhz()) {
      total_size += 1 + 4;
    }

    // optional .tuner_msg.SnapBroadcast.State state = 3 [default = STOP];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapBroadcast::MergeFrom(const SnapBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_freqmhz()) {
      set_freqmhz(from.freqmhz());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapBroadcast::CopyFrom(const SnapBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapBroadcast::IsInitialized() const {

  return true;
}

void SnapBroadcast::Swap(SnapBroadcast* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(freqmhz_, other->freqmhz_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapBroadcast_descriptor_;
  metadata.reflection = SnapBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiverRequest::kAppIDFieldNumber;
#endif  // !_MSC_VER

ReceiverRequest::ReceiverRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiverRequest::InitAsDefaultInstance() {
}

ReceiverRequest::ReceiverRequest(const ReceiverRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiverRequest::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiverRequest::~ReceiverRequest() {
  SharedDtor();
}

void ReceiverRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReceiverRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiverRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverRequest_descriptor_;
}

const ReceiverRequest& ReceiverRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

ReceiverRequest* ReceiverRequest::default_instance_ = NULL;

ReceiverRequest* ReceiverRequest::New() const {
  return new ReceiverRequest;
}

void ReceiverRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiverRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 appID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiverRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 appID = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiverRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 appID = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiverRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 appID = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiverRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiverRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiverRequest::MergeFrom(const ReceiverRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiverRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverRequest::CopyFrom(const ReceiverRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverRequest::IsInitialized() const {

  return true;
}

void ReceiverRequest::Swap(ReceiverRequest* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiverRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiverRequest_descriptor_;
  metadata.reflection = ReceiverRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiverRelease::kAppIDFieldNumber;
const int ReceiverRelease::kChannelFieldNumber;
#endif  // !_MSC_VER

ReceiverRelease::ReceiverRelease()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiverRelease::InitAsDefaultInstance() {
}

ReceiverRelease::ReceiverRelease(const ReceiverRelease& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiverRelease::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0;
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiverRelease::~ReceiverRelease() {
  SharedDtor();
}

void ReceiverRelease::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReceiverRelease::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiverRelease::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverRelease_descriptor_;
}

const ReceiverRelease& ReceiverRelease::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

ReceiverRelease* ReceiverRelease::default_instance_ = NULL;

ReceiverRelease* ReceiverRelease::New() const {
  return new ReceiverRelease;
}

void ReceiverRelease::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0;
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiverRelease::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 appID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiverRelease::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 appID = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->appid(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiverRelease::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 appID = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->appid(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiverRelease::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 appID = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverRelease::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiverRelease* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiverRelease*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiverRelease::MergeFrom(const ReceiverRelease& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiverRelease::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverRelease::CopyFrom(const ReceiverRelease& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverRelease::IsInitialized() const {

  return true;
}

void ReceiverRelease::Swap(ReceiverRelease* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiverRelease::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiverRelease_descriptor_;
  metadata.reflection = ReceiverRelease_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiverAcquired::kAppIDFieldNumber;
const int ReceiverAcquired::kChannelFieldNumber;
#endif  // !_MSC_VER

ReceiverAcquired::ReceiverAcquired()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiverAcquired::InitAsDefaultInstance() {
}

ReceiverAcquired::ReceiverAcquired(const ReceiverAcquired& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiverAcquired::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0;
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiverAcquired::~ReceiverAcquired() {
  SharedDtor();
}

void ReceiverAcquired::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReceiverAcquired::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiverAcquired::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverAcquired_descriptor_;
}

const ReceiverAcquired& ReceiverAcquired::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

ReceiverAcquired* ReceiverAcquired::default_instance_ = NULL;

ReceiverAcquired* ReceiverAcquired::New() const {
  return new ReceiverAcquired;
}

void ReceiverAcquired::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0;
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiverAcquired::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 appID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiverAcquired::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 appID = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->appid(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiverAcquired::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 appID = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->appid(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiverAcquired::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 appID = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverAcquired::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiverAcquired* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiverAcquired*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiverAcquired::MergeFrom(const ReceiverAcquired& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiverAcquired::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverAcquired::CopyFrom(const ReceiverAcquired& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverAcquired::IsInitialized() const {

  return true;
}

void ReceiverAcquired::Swap(ReceiverAcquired* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiverAcquired::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiverAcquired_descriptor_;
  metadata.reflection = ReceiverAcquired_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiverReleased::kAppIDFieldNumber;
const int ReceiverReleased::kChannelFieldNumber;
#endif  // !_MSC_VER

ReceiverReleased::ReceiverReleased()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiverReleased::InitAsDefaultInstance() {
}

ReceiverReleased::ReceiverReleased(const ReceiverReleased& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiverReleased::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0;
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiverReleased::~ReceiverReleased() {
  SharedDtor();
}

void ReceiverReleased::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReceiverReleased::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiverReleased::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverReleased_descriptor_;
}

const ReceiverReleased& ReceiverReleased::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

ReceiverReleased* ReceiverReleased::default_instance_ = NULL;

ReceiverReleased* ReceiverReleased::New() const {
  return new ReceiverReleased;
}

void ReceiverReleased::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0;
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiverReleased::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 appID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiverReleased::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 appID = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->appid(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiverReleased::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 appID = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->appid(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiverReleased::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 appID = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverReleased::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiverReleased* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiverReleased*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiverReleased::MergeFrom(const ReceiverReleased& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiverReleased::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverReleased::CopyFrom(const ReceiverReleased& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverReleased::IsInitialized() const {

  return true;
}

void ReceiverReleased::Swap(ReceiverReleased* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiverReleased::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiverReleased_descriptor_;
  metadata.reflection = ReceiverReleased_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ChangeRXTxConfig::_default_msgname_ = NULL;
::std::string* ChangeRXTxConfig::_default_config_ = NULL;
#ifndef _MSC_VER
const int ChangeRXTxConfig::kMsgNameFieldNumber;
const int ChangeRXTxConfig::kConfigFieldNumber;
#endif  // !_MSC_VER

ChangeRXTxConfig::ChangeRXTxConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeRXTxConfig::InitAsDefaultInstance() {
}

ChangeRXTxConfig::ChangeRXTxConfig(const ChangeRXTxConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeRXTxConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  config_ = const_cast< ::std::string*>(_default_config_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeRXTxConfig::~ChangeRXTxConfig() {
  SharedDtor();
}

void ChangeRXTxConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (config_ != _default_config_) {
    delete config_;
  }
  if (this != default_instance_) {
  }
}

void ChangeRXTxConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeRXTxConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeRXTxConfig_descriptor_;
}

const ChangeRXTxConfig& ChangeRXTxConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TunerMessages_2eproto();
  return *default_instance_;
}

ChangeRXTxConfig* ChangeRXTxConfig::default_instance_ = NULL;

ChangeRXTxConfig* ChangeRXTxConfig::New() const {
  return new ChangeRXTxConfig;
}

void ChangeRXTxConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_config()) {
      if (config_ != _default_config_) {
        config_->assign(*_default_config_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeRXTxConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ChangeRXTxConfig"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_config;
        break;
      }

      // optional string config = 2 [default = "RCH3"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeRXTxConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ChangeRXTxConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string config = 2 [default = "RCH3"];
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeRXTxConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ChangeRXTxConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string config = 2 [default = "RCH3"];
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeRXTxConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ChangeRXTxConfig"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string config = 2 [default = "RCH3"];
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeRXTxConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeRXTxConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeRXTxConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeRXTxConfig::MergeFrom(const ChangeRXTxConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeRXTxConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeRXTxConfig::CopyFrom(const ChangeRXTxConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeRXTxConfig::IsInitialized() const {

  return true;
}

void ChangeRXTxConfig::Swap(ChangeRXTxConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeRXTxConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeRXTxConfig_descriptor_;
  metadata.reflection = ChangeRXTxConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tuner_msg

// @@protoc_insertion_point(global_scope)
