// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FalconFastMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FalconFastMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace falcon_fast_msg {

namespace {

const ::google::protobuf::Descriptor* AntennaMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AntennaMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* SatelliteMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SatelliteMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchTop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchTop_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartScan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartScan_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRAC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRAC_reflection_ = NULL;
const ::google::protobuf::Descriptor* QSTAT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QSTAT_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPosist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPosist_reflection_ = NULL;
const ::google::protobuf::Descriptor* Posist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Posist_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSOIList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSOIList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSignals_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSignals_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFiltList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFiltList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TipDone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TipDone_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalSignalAddition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalSignalAddition_reflection_ = NULL;
const ::google::protobuf::Descriptor* AntScnStps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AntScnStps_reflection_ = NULL;
const ::google::protobuf::Descriptor* AntennaPointInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AntennaPointInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Switching_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Switching_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDetectionIDs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDetectionIDs_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapExtraRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapExtraRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapExtraResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapExtraResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FalconFastMessages_2eproto() {
  protobuf_AddDesc_FalconFastMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FalconFastMessages.proto");
  GOOGLE_CHECK(file != NULL);
  AntennaMap_descriptor_ = file->message_type(0);
  static const int AntennaMap_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaMap, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaMap, chan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaMap, ant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaMap, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaMap, slaved_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaMap, min_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaMap, max_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaMap, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaMap, dwncnvt_lo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaMap, beamwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaMap, ant_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaMap, ant_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaMap, ant_el_),
  };
  AntennaMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AntennaMap_descriptor_,
      AntennaMap::default_instance_,
      AntennaMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AntennaMap));
  SatelliteMap_descriptor_ = file->message_type(1);
  static const int SatelliteMap_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteMap, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteMap, chan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteMap, ant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteMap, min_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteMap, max_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteMap, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteMap, dwncnvt_lo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteMap, satname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteMap, ssc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteMap, band_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteMap, pol_),
  };
  SatelliteMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SatelliteMap_descriptor_,
      SatelliteMap::default_instance_,
      SatelliteMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SatelliteMap));
  SearchTop_descriptor_ = file->message_type(2);
  static const int SearchTop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchTop, msgname_),
  };
  SearchTop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchTop_descriptor_,
      SearchTop::default_instance_,
      SearchTop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchTop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchTop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchTop));
  StartScan_descriptor_ = file->message_type(3);
  static const int StartScan_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartScan, msgname_),
  };
  StartScan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartScan_descriptor_,
      StartScan::default_instance_,
      StartScan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartScan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartScan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartScan));
  SRAC_descriptor_ = file->message_type(4);
  static const int SRAC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRAC, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRAC, chan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRAC, action_),
  };
  SRAC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRAC_descriptor_,
      SRAC::default_instance_,
      SRAC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRAC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRAC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRAC));
  QSTAT_descriptor_ = file->message_type(5);
  static const int QSTAT_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QSTAT, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QSTAT, status_),
  };
  QSTAT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QSTAT_descriptor_,
      QSTAT::default_instance_,
      QSTAT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QSTAT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QSTAT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QSTAT));
  QueryPosist_descriptor_ = file->message_type(6);
  static const int QueryPosist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPosist, msgname_),
  };
  QueryPosist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPosist_descriptor_,
      QueryPosist::default_instance_,
      QueryPosist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPosist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPosist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPosist));
  Posist_descriptor_ = file->message_type(7);
  static const int Posist_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Posist, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Posist, chan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Posist, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Posist, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Posist, velocity_),
  };
  Posist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Posist_descriptor_,
      Posist::default_instance_,
      Posist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Posist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Posist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Posist));
  UpdateSOIList_descriptor_ = file->message_type(8);
  static const int UpdateSOIList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSOIList, msgname_),
  };
  UpdateSOIList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSOIList_descriptor_,
      UpdateSOIList::default_instance_,
      UpdateSOIList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSOIList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSOIList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSOIList));
  UpdateSignal_descriptor_ = file->message_type(9);
  static const int UpdateSignal_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSignal, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSignal, startfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSignal, stopfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSignal, stepfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSignal, dwell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSignal, threshold_),
  };
  UpdateSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSignal_descriptor_,
      UpdateSignal::default_instance_,
      UpdateSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSignal));
  UpdateSignals_descriptor_ = file->message_type(10);
  static const int UpdateSignals_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSignals, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSignals, freqlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSignals, mode_),
  };
  UpdateSignals_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSignals_descriptor_,
      UpdateSignals::default_instance_,
      UpdateSignals_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSignals, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSignals, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSignals));
  UpdateFiltList_descriptor_ = file->message_type(11);
  static const int UpdateFiltList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFiltList, msgname_),
  };
  UpdateFiltList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFiltList_descriptor_,
      UpdateFiltList::default_instance_,
      UpdateFiltList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFiltList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFiltList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFiltList));
  TipDone_descriptor_ = file->message_type(12);
  static const int TipDone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TipDone, msgname_),
  };
  TipDone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TipDone_descriptor_,
      TipDone::default_instance_,
      TipDone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TipDone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TipDone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TipDone));
  GlobalSignalAddition_descriptor_ = file->message_type(13);
  static const int GlobalSignalAddition_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSignalAddition, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSignalAddition, feed_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSignalAddition, uuids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSignalAddition, signal_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSignalAddition, old_uuids_),
  };
  GlobalSignalAddition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalSignalAddition_descriptor_,
      GlobalSignalAddition::default_instance_,
      GlobalSignalAddition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSignalAddition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSignalAddition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalSignalAddition));
  AntScnStps_descriptor_ = file->message_type(14);
  static const int AntScnStps_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntScnStps, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntScnStps, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntScnStps, steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntScnStps, chan_),
  };
  AntScnStps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AntScnStps_descriptor_,
      AntScnStps::default_instance_,
      AntScnStps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntScnStps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntScnStps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AntScnStps));
  AntennaPointInfo_descriptor_ = file->message_type(15);
  static const int AntennaPointInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaPointInfo, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaPointInfo, done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaPointInfo, chan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaPointInfo, pos_),
  };
  AntennaPointInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AntennaPointInfo_descriptor_,
      AntennaPointInfo::default_instance_,
      AntennaPointInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaPointInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaPointInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AntennaPointInfo));
  Switching_descriptor_ = file->message_type(16);
  static const int Switching_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Switching, msgname_),
  };
  Switching_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Switching_descriptor_,
      Switching::default_instance_,
      Switching_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Switching, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Switching, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Switching));
  UpdateDetectionIDs_descriptor_ = file->message_type(17);
  static const int UpdateDetectionIDs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDetectionIDs, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDetectionIDs, detids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDetectionIDs, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDetectionIDs, machine_),
  };
  UpdateDetectionIDs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDetectionIDs_descriptor_,
      UpdateDetectionIDs::default_instance_,
      UpdateDetectionIDs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDetectionIDs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDetectionIDs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDetectionIDs));
  SnapExtraRequest_descriptor_ = file->message_type(18);
  static const int SnapExtraRequest_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraRequest, archfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraRequest, tables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraRequest, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraRequest, bw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraRequest, berth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraRequest, nframesth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraRequest, ratelines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraRequest, chiprate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraRequest, ofdm_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraRequest, uniquefieldthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraRequest, pristring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraRequest, mod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraRequest, revisitid_),
  };
  SnapExtraRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapExtraRequest_descriptor_,
      SnapExtraRequest::default_instance_,
      SnapExtraRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapExtraRequest));
  SnapExtraResponse_descriptor_ = file->message_type(19);
  static const int SnapExtraResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraResponse, revisitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraResponse, response_),
  };
  SnapExtraResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapExtraResponse_descriptor_,
      SnapExtraResponse::default_instance_,
      SnapExtraResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapExtraResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapExtraResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FalconFastMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AntennaMap_descriptor_, &AntennaMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SatelliteMap_descriptor_, &SatelliteMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchTop_descriptor_, &SearchTop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartScan_descriptor_, &StartScan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRAC_descriptor_, &SRAC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QSTAT_descriptor_, &QSTAT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPosist_descriptor_, &QueryPosist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Posist_descriptor_, &Posist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSOIList_descriptor_, &UpdateSOIList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSignal_descriptor_, &UpdateSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSignals_descriptor_, &UpdateSignals::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFiltList_descriptor_, &UpdateFiltList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TipDone_descriptor_, &TipDone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalSignalAddition_descriptor_, &GlobalSignalAddition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AntScnStps_descriptor_, &AntScnStps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AntennaPointInfo_descriptor_, &AntennaPointInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Switching_descriptor_, &Switching::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDetectionIDs_descriptor_, &UpdateDetectionIDs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapExtraRequest_descriptor_, &SnapExtraRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapExtraResponse_descriptor_, &SnapExtraResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FalconFastMessages_2eproto() {
  delete AntennaMap::default_instance_;
  delete AntennaMap_reflection_;
  delete AntennaMap::_default_msgname_;
  delete SatelliteMap::default_instance_;
  delete SatelliteMap_reflection_;
  delete SatelliteMap::_default_msgname_;
  delete SearchTop::default_instance_;
  delete SearchTop_reflection_;
  delete SearchTop::_default_msgname_;
  delete StartScan::default_instance_;
  delete StartScan_reflection_;
  delete StartScan::_default_msgname_;
  delete SRAC::default_instance_;
  delete SRAC_reflection_;
  delete SRAC::_default_msgname_;
  delete QSTAT::default_instance_;
  delete QSTAT_reflection_;
  delete QSTAT::_default_msgname_;
  delete QueryPosist::default_instance_;
  delete QueryPosist_reflection_;
  delete QueryPosist::_default_msgname_;
  delete Posist::default_instance_;
  delete Posist_reflection_;
  delete Posist::_default_msgname_;
  delete UpdateSOIList::default_instance_;
  delete UpdateSOIList_reflection_;
  delete UpdateSOIList::_default_msgname_;
  delete UpdateSignal::default_instance_;
  delete UpdateSignal_reflection_;
  delete UpdateSignal::_default_msgname_;
  delete UpdateSignals::default_instance_;
  delete UpdateSignals_reflection_;
  delete UpdateSignals::_default_msgname_;
  delete UpdateFiltList::default_instance_;
  delete UpdateFiltList_reflection_;
  delete UpdateFiltList::_default_msgname_;
  delete TipDone::default_instance_;
  delete TipDone_reflection_;
  delete TipDone::_default_msgname_;
  delete GlobalSignalAddition::default_instance_;
  delete GlobalSignalAddition_reflection_;
  delete GlobalSignalAddition::_default_msgname_;
  delete AntScnStps::default_instance_;
  delete AntScnStps_reflection_;
  delete AntScnStps::_default_msgname_;
  delete AntennaPointInfo::default_instance_;
  delete AntennaPointInfo_reflection_;
  delete AntennaPointInfo::_default_msgname_;
  delete Switching::default_instance_;
  delete Switching_reflection_;
  delete Switching::_default_msgname_;
  delete UpdateDetectionIDs::default_instance_;
  delete UpdateDetectionIDs_reflection_;
  delete UpdateDetectionIDs::_default_msgname_;
  delete SnapExtraRequest::default_instance_;
  delete SnapExtraRequest_reflection_;
  delete SnapExtraRequest::_default_msgname_;
  delete SnapExtraResponse::default_instance_;
  delete SnapExtraResponse_reflection_;
  delete SnapExtraResponse::_default_msgname_;
}

void protobuf_AddDesc_FalconFastMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030FalconFastMessages.proto\022\017falcon_fast_"
    "msg\"\364\001\n\nAntennaMap\022\034\n\007msgName\030\001 \001(\t:\013ANT"
    "ENNA_MAP\022\014\n\004chan\030\002 \001(\005\022\013\n\003ant\030\003 \001(\005\022\014\n\004m"
    "ode\030\004 \001(\005\022\021\n\tslaved_to\030\005 \001(\005\022\020\n\010min_freq"
    "\030\006 \001(\001\022\020\n\010max_freq\030\007 \001(\001\022\014\n\004type\030\010 \001(\005\022\022"
    "\n\ndwncnvt_lo\030\t \001(\002\022\021\n\tbeamwidth\030\n \001(\002\022\020\n"
    "\010ant_name\030\013 \001(\t\022\021\n\tant_angle\030\014 \001(\001\022\016\n\006an"
    "t_el\030\r \001(\001\"\310\001\n\014SatelliteMap\022\036\n\007msgName\030\001"
    " \001(\t:\rSATELLITE_MAP\022\014\n\004chan\030\002 \001(\005\022\013\n\003ant"
    "\030\003 \001(\005\022\020\n\010min_freq\030\004 \001(\001\022\020\n\010max_freq\030\005 \001"
    "(\001\022\014\n\004type\030\006 \001(\005\022\022\n\ndwncnvt_lo\030\007 \001(\002\022\017\n\007"
    "satname\030\010 \001(\t\022\013\n\003ssc\030\t \001(\005\022\014\n\004band\030\n \001(\t"
    "\022\013\n\003pol\030\013 \001(\t\"(\n\tSearchTop\022\033\n\007msgName\030\001 "
    "\001(\t:\nSEARCH_TOP\"(\n\tStartScan\022\033\n\007msgName\030"
    "\001 \001(\t:\nSTART_SCAN\";\n\004SRAC\022\025\n\007msgName\030\001 \001"
    "(\t:\004SRAC\022\014\n\004chan\030\002 \001(\005\022\016\n\006action\030\003 \001(\005\"/"
    "\n\005QSTAT\022\026\n\007msgName\030\001 \001(\t:\005QSTAT\022\016\n\006statu"
    "s\030\002 \001(\005\",\n\013QueryPosist\022\035\n\007msgName\030\001 \001(\t:"
    "\014QUERY_POSIST\"e\n\006Posist\022\027\n\007msgName\030\001 \001(\t"
    ":\006POSIST\022\014\n\004chan\030\002 \001(\005\022\017\n\007azimuth\030\003 \001(\002\022"
    "\021\n\televation\030\004 \001(\002\022\020\n\010velocity\030\005 \001(\002\"0\n\r"
    "UpdateSOIList\022\037\n\007msgName\030\001 \001(\t:\016UPDATE_S"
    "OILIST\"\216\001\n\014UpdateSignal\022\036\n\007msgName\030\001 \001(\t"
    ":\rUPDATE_SIGNAL\022\021\n\tstartFreq\030\002 \001(\001\022\020\n\010st"
    "opFreq\030\003 \001(\001\022\020\n\010stepFreq\030\004 \001(\001\022\021\n\005dwell\030"
    "\005 \001(\001:\002-1\022\024\n\tthreshold\030\006 \001(\001:\0014\"r\n\rUpdat"
    "eSignals\022\037\n\007msgName\030\001 \001(\t:\016UPDATE_SIGNAL"
    "S\022/\n\010freqList\030\002 \003(\0132\035.falcon_fast_msg.Up"
    "dateSignal\022\017\n\004mode\030\003 \001(\005:\0010\"2\n\016UpdateFil"
    "tList\022 \n\007msgName\030\001 \001(\t:\017UPDATE_FILTLIST\""
    "$\n\007TipDone\022\031\n\007msgName\030\001 \001(\t:\010TIP_DONE\"\206\001"
    "\n\024GlobalSignalAddition\022\'\n\007msgName\030\001 \001(\t:"
    "\026GLOBAL_SIGNAL_ADDITION\022\017\n\007feed_id\030\002 \001(\005"
    "\022\r\n\005uuids\030\003 \003(\t\022\022\n\nsignal_ids\030\004 \003(\005\022\021\n\to"
    "ld_uuids\030\005 \003(\t\"W\n\nAntScnStps\022\035\n\007msgName\030"
    "\001 \001(\t:\014ANT_SCN_STPS\022\r\n\005appid\030\002 \001(\005\022\r\n\005st"
    "eps\030\003 \001(\005\022\014\n\004chan\030\004 \001(\005\"`\n\020AntennaPointI"
    "nfo\022#\n\007msgName\030\001 \001(\t:\022ANTENNA_POINT_INFO"
    "\022\014\n\004done\030\002 \001(\005\022\014\n\004chan\030\003 \001(\005\022\013\n\003pos\030\004 \001("
    "\002\"\'\n\tSwitching\022\032\n\007msgName\030\001 \001(\t:\tSWITCHI"
    "NG\"r\n\022UpdateDetectionIDs\022%\n\007msgName\030\001 \001("
    "\t:\024UPDATE_DETECTION_IDS\022\016\n\006detIDs\030\002 \003(\005\022"
    "\022\n\010filename\030\003 \001(\t:\000\022\021\n\007machine\030\004 \001(\t:\000\"\237"
    "\002\n\020SnapExtraRequest\022#\n\007msgName\030\001 \001(\t:\022SN"
    "AP_EXTRA_REQUEST\022\020\n\010archfile\030\002 \001(\t\022\016\n\006ta"
    "bles\030\003 \003(\t\022\014\n\004freq\030\004 \003(\002\022\n\n\002bw\030\005 \003(\002\022\r\n\005"
    "berth\030\006 \003(\002\022\021\n\tnframesth\030\007 \003(\005\022\021\n\trateli"
    "nes\030\010 \003(\002\022\020\n\010chiprate\030\t \003(\002\022\022\n\nofdm_name"
    "s\030\n \003(\t\022\034\n\024uniquefieldthreshold\030\013 \001(\005\022\021\n"
    "\tpristring\030\014 \001(\t\022\013\n\003mod\030\r \001(\t\022\021\n\trevisit"
    "ID\030\016 \001(\t\"^\n\021SnapExtraResponse\022$\n\007msgName"
    "\030\001 \001(\t:\023SNAP_EXTRA_RESPONSE\022\021\n\trevisitID"
    "\030\002 \001(\t\022\020\n\010response\030\003 \001(\tB\025\n\023fv.protos.ke"
    "psvisor", 2127);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FalconFastMessages.proto", &protobuf_RegisterTypes);
  AntennaMap::_default_msgname_ =
      new ::std::string("ANTENNA_MAP", 11);
  AntennaMap::default_instance_ = new AntennaMap();
  SatelliteMap::_default_msgname_ =
      new ::std::string("SATELLITE_MAP", 13);
  SatelliteMap::default_instance_ = new SatelliteMap();
  SearchTop::_default_msgname_ =
      new ::std::string("SEARCH_TOP", 10);
  SearchTop::default_instance_ = new SearchTop();
  StartScan::_default_msgname_ =
      new ::std::string("START_SCAN", 10);
  StartScan::default_instance_ = new StartScan();
  SRAC::_default_msgname_ =
      new ::std::string("SRAC", 4);
  SRAC::default_instance_ = new SRAC();
  QSTAT::_default_msgname_ =
      new ::std::string("QSTAT", 5);
  QSTAT::default_instance_ = new QSTAT();
  QueryPosist::_default_msgname_ =
      new ::std::string("QUERY_POSIST", 12);
  QueryPosist::default_instance_ = new QueryPosist();
  Posist::_default_msgname_ =
      new ::std::string("POSIST", 6);
  Posist::default_instance_ = new Posist();
  UpdateSOIList::_default_msgname_ =
      new ::std::string("UPDATE_SOILIST", 14);
  UpdateSOIList::default_instance_ = new UpdateSOIList();
  UpdateSignal::_default_msgname_ =
      new ::std::string("UPDATE_SIGNAL", 13);
  UpdateSignal::default_instance_ = new UpdateSignal();
  UpdateSignals::_default_msgname_ =
      new ::std::string("UPDATE_SIGNALS", 14);
  UpdateSignals::default_instance_ = new UpdateSignals();
  UpdateFiltList::_default_msgname_ =
      new ::std::string("UPDATE_FILTLIST", 15);
  UpdateFiltList::default_instance_ = new UpdateFiltList();
  TipDone::_default_msgname_ =
      new ::std::string("TIP_DONE", 8);
  TipDone::default_instance_ = new TipDone();
  GlobalSignalAddition::_default_msgname_ =
      new ::std::string("GLOBAL_SIGNAL_ADDITION", 22);
  GlobalSignalAddition::default_instance_ = new GlobalSignalAddition();
  AntScnStps::_default_msgname_ =
      new ::std::string("ANT_SCN_STPS", 12);
  AntScnStps::default_instance_ = new AntScnStps();
  AntennaPointInfo::_default_msgname_ =
      new ::std::string("ANTENNA_POINT_INFO", 18);
  AntennaPointInfo::default_instance_ = new AntennaPointInfo();
  Switching::_default_msgname_ =
      new ::std::string("SWITCHING", 9);
  Switching::default_instance_ = new Switching();
  UpdateDetectionIDs::_default_msgname_ =
      new ::std::string("UPDATE_DETECTION_IDS", 20);
  UpdateDetectionIDs::default_instance_ = new UpdateDetectionIDs();
  SnapExtraRequest::_default_msgname_ =
      new ::std::string("SNAP_EXTRA_REQUEST", 18);
  SnapExtraRequest::default_instance_ = new SnapExtraRequest();
  SnapExtraResponse::_default_msgname_ =
      new ::std::string("SNAP_EXTRA_RESPONSE", 19);
  SnapExtraResponse::default_instance_ = new SnapExtraResponse();
  AntennaMap::default_instance_->InitAsDefaultInstance();
  SatelliteMap::default_instance_->InitAsDefaultInstance();
  SearchTop::default_instance_->InitAsDefaultInstance();
  StartScan::default_instance_->InitAsDefaultInstance();
  SRAC::default_instance_->InitAsDefaultInstance();
  QSTAT::default_instance_->InitAsDefaultInstance();
  QueryPosist::default_instance_->InitAsDefaultInstance();
  Posist::default_instance_->InitAsDefaultInstance();
  UpdateSOIList::default_instance_->InitAsDefaultInstance();
  UpdateSignal::default_instance_->InitAsDefaultInstance();
  UpdateSignals::default_instance_->InitAsDefaultInstance();
  UpdateFiltList::default_instance_->InitAsDefaultInstance();
  TipDone::default_instance_->InitAsDefaultInstance();
  GlobalSignalAddition::default_instance_->InitAsDefaultInstance();
  AntScnStps::default_instance_->InitAsDefaultInstance();
  AntennaPointInfo::default_instance_->InitAsDefaultInstance();
  Switching::default_instance_->InitAsDefaultInstance();
  UpdateDetectionIDs::default_instance_->InitAsDefaultInstance();
  SnapExtraRequest::default_instance_->InitAsDefaultInstance();
  SnapExtraResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FalconFastMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FalconFastMessages_2eproto {
  StaticDescriptorInitializer_FalconFastMessages_2eproto() {
    protobuf_AddDesc_FalconFastMessages_2eproto();
  }
} static_descriptor_initializer_FalconFastMessages_2eproto_;

// ===================================================================

::std::string* AntennaMap::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int AntennaMap::kMsgNameFieldNumber;
const int AntennaMap::kChanFieldNumber;
const int AntennaMap::kAntFieldNumber;
const int AntennaMap::kModeFieldNumber;
const int AntennaMap::kSlavedToFieldNumber;
const int AntennaMap::kMinFreqFieldNumber;
const int AntennaMap::kMaxFreqFieldNumber;
const int AntennaMap::kTypeFieldNumber;
const int AntennaMap::kDwncnvtLoFieldNumber;
const int AntennaMap::kBeamwidthFieldNumber;
const int AntennaMap::kAntNameFieldNumber;
const int AntennaMap::kAntAngleFieldNumber;
const int AntennaMap::kAntElFieldNumber;
#endif  // !_MSC_VER

AntennaMap::AntennaMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AntennaMap::InitAsDefaultInstance() {
}

AntennaMap::AntennaMap(const AntennaMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AntennaMap::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  chan_ = 0;
  ant_ = 0;
  mode_ = 0;
  slaved_to_ = 0;
  min_freq_ = 0;
  max_freq_ = 0;
  type_ = 0;
  dwncnvt_lo_ = 0;
  beamwidth_ = 0;
  ant_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ant_angle_ = 0;
  ant_el_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AntennaMap::~AntennaMap() {
  SharedDtor();
}

void AntennaMap::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (ant_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ant_name_;
  }
  if (this != default_instance_) {
  }
}

void AntennaMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AntennaMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AntennaMap_descriptor_;
}

const AntennaMap& AntennaMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

AntennaMap* AntennaMap::default_instance_ = NULL;

AntennaMap* AntennaMap::New() const {
  return new AntennaMap;
}

void AntennaMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    chan_ = 0;
    ant_ = 0;
    mode_ = 0;
    slaved_to_ = 0;
    min_freq_ = 0;
    max_freq_ = 0;
    type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dwncnvt_lo_ = 0;
    beamwidth_ = 0;
    if (has_ant_name()) {
      if (ant_name_ != &::google::protobuf::internal::kEmptyString) {
        ant_name_->clear();
      }
    }
    ant_angle_ = 0;
    ant_el_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AntennaMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ANTENNA_MAP"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chan;
        break;
      }

      // optional int32 chan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chan_)));
          set_has_chan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ant;
        break;
      }

      // optional int32 ant = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ant_)));
          set_has_ant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mode;
        break;
      }

      // optional int32 mode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_slaved_to;
        break;
      }

      // optional int32 slaved_to = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slaved_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slaved_to_)));
          set_has_slaved_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_min_freq;
        break;
      }

      // optional double min_freq = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_freq_)));
          set_has_min_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_max_freq;
        break;
      }

      // optional double max_freq = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_freq_)));
          set_has_max_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // optional int32 type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_dwncnvt_lo;
        break;
      }

      // optional float dwncnvt_lo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dwncnvt_lo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dwncnvt_lo_)));
          set_has_dwncnvt_lo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_beamwidth;
        break;
      }

      // optional float beamwidth = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_beamwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beamwidth_)));
          set_has_beamwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ant_name;
        break;
      }

      // optional string ant_name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ant_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ant_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ant_name().data(), this->ant_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_ant_angle;
        break;
      }

      // optional double ant_angle = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ant_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ant_angle_)));
          set_has_ant_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_ant_el;
        break;
      }

      // optional double ant_el = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ant_el:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ant_el_)));
          set_has_ant_el();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AntennaMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ANTENNA_MAP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 chan = 2;
  if (has_chan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chan(), output);
  }

  // optional int32 ant = 3;
  if (has_ant()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ant(), output);
  }

  // optional int32 mode = 4;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mode(), output);
  }

  // optional int32 slaved_to = 5;
  if (has_slaved_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->slaved_to(), output);
  }

  // optional double min_freq = 6;
  if (has_min_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->min_freq(), output);
  }

  // optional double max_freq = 7;
  if (has_max_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->max_freq(), output);
  }

  // optional int32 type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->type(), output);
  }

  // optional float dwncnvt_lo = 9;
  if (has_dwncnvt_lo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->dwncnvt_lo(), output);
  }

  // optional float beamwidth = 10;
  if (has_beamwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->beamwidth(), output);
  }

  // optional string ant_name = 11;
  if (has_ant_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ant_name().data(), this->ant_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->ant_name(), output);
  }

  // optional double ant_angle = 12;
  if (has_ant_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->ant_angle(), output);
  }

  // optional double ant_el = 13;
  if (has_ant_el()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->ant_el(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AntennaMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ANTENNA_MAP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 chan = 2;
  if (has_chan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chan(), target);
  }

  // optional int32 ant = 3;
  if (has_ant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ant(), target);
  }

  // optional int32 mode = 4;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mode(), target);
  }

  // optional int32 slaved_to = 5;
  if (has_slaved_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->slaved_to(), target);
  }

  // optional double min_freq = 6;
  if (has_min_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->min_freq(), target);
  }

  // optional double max_freq = 7;
  if (has_max_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->max_freq(), target);
  }

  // optional int32 type = 8;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->type(), target);
  }

  // optional float dwncnvt_lo = 9;
  if (has_dwncnvt_lo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->dwncnvt_lo(), target);
  }

  // optional float beamwidth = 10;
  if (has_beamwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->beamwidth(), target);
  }

  // optional string ant_name = 11;
  if (has_ant_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ant_name().data(), this->ant_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->ant_name(), target);
  }

  // optional double ant_angle = 12;
  if (has_ant_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->ant_angle(), target);
  }

  // optional double ant_el = 13;
  if (has_ant_el()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->ant_el(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AntennaMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ANTENNA_MAP"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 chan = 2;
    if (has_chan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chan());
    }

    // optional int32 ant = 3;
    if (has_ant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ant());
    }

    // optional int32 mode = 4;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional int32 slaved_to = 5;
    if (has_slaved_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slaved_to());
    }

    // optional double min_freq = 6;
    if (has_min_freq()) {
      total_size += 1 + 8;
    }

    // optional double max_freq = 7;
    if (has_max_freq()) {
      total_size += 1 + 8;
    }

    // optional int32 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float dwncnvt_lo = 9;
    if (has_dwncnvt_lo()) {
      total_size += 1 + 4;
    }

    // optional float beamwidth = 10;
    if (has_beamwidth()) {
      total_size += 1 + 4;
    }

    // optional string ant_name = 11;
    if (has_ant_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ant_name());
    }

    // optional double ant_angle = 12;
    if (has_ant_angle()) {
      total_size += 1 + 8;
    }

    // optional double ant_el = 13;
    if (has_ant_el()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AntennaMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AntennaMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AntennaMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AntennaMap::MergeFrom(const AntennaMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_chan()) {
      set_chan(from.chan());
    }
    if (from.has_ant()) {
      set_ant(from.ant());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_slaved_to()) {
      set_slaved_to(from.slaved_to());
    }
    if (from.has_min_freq()) {
      set_min_freq(from.min_freq());
    }
    if (from.has_max_freq()) {
      set_max_freq(from.max_freq());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dwncnvt_lo()) {
      set_dwncnvt_lo(from.dwncnvt_lo());
    }
    if (from.has_beamwidth()) {
      set_beamwidth(from.beamwidth());
    }
    if (from.has_ant_name()) {
      set_ant_name(from.ant_name());
    }
    if (from.has_ant_angle()) {
      set_ant_angle(from.ant_angle());
    }
    if (from.has_ant_el()) {
      set_ant_el(from.ant_el());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AntennaMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AntennaMap::CopyFrom(const AntennaMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaMap::IsInitialized() const {

  return true;
}

void AntennaMap::Swap(AntennaMap* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(chan_, other->chan_);
    std::swap(ant_, other->ant_);
    std::swap(mode_, other->mode_);
    std::swap(slaved_to_, other->slaved_to_);
    std::swap(min_freq_, other->min_freq_);
    std::swap(max_freq_, other->max_freq_);
    std::swap(type_, other->type_);
    std::swap(dwncnvt_lo_, other->dwncnvt_lo_);
    std::swap(beamwidth_, other->beamwidth_);
    std::swap(ant_name_, other->ant_name_);
    std::swap(ant_angle_, other->ant_angle_);
    std::swap(ant_el_, other->ant_el_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AntennaMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AntennaMap_descriptor_;
  metadata.reflection = AntennaMap_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SatelliteMap::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SatelliteMap::kMsgNameFieldNumber;
const int SatelliteMap::kChanFieldNumber;
const int SatelliteMap::kAntFieldNumber;
const int SatelliteMap::kMinFreqFieldNumber;
const int SatelliteMap::kMaxFreqFieldNumber;
const int SatelliteMap::kTypeFieldNumber;
const int SatelliteMap::kDwncnvtLoFieldNumber;
const int SatelliteMap::kSatnameFieldNumber;
const int SatelliteMap::kSscFieldNumber;
const int SatelliteMap::kBandFieldNumber;
const int SatelliteMap::kPolFieldNumber;
#endif  // !_MSC_VER

SatelliteMap::SatelliteMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SatelliteMap::InitAsDefaultInstance() {
}

SatelliteMap::SatelliteMap(const SatelliteMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SatelliteMap::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  chan_ = 0;
  ant_ = 0;
  min_freq_ = 0;
  max_freq_ = 0;
  type_ = 0;
  dwncnvt_lo_ = 0;
  satname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ssc_ = 0;
  band_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SatelliteMap::~SatelliteMap() {
  SharedDtor();
}

void SatelliteMap::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (satname_ != &::google::protobuf::internal::kEmptyString) {
    delete satname_;
  }
  if (band_ != &::google::protobuf::internal::kEmptyString) {
    delete band_;
  }
  if (pol_ != &::google::protobuf::internal::kEmptyString) {
    delete pol_;
  }
  if (this != default_instance_) {
  }
}

void SatelliteMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SatelliteMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SatelliteMap_descriptor_;
}

const SatelliteMap& SatelliteMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

SatelliteMap* SatelliteMap::default_instance_ = NULL;

SatelliteMap* SatelliteMap::New() const {
  return new SatelliteMap;
}

void SatelliteMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    chan_ = 0;
    ant_ = 0;
    min_freq_ = 0;
    max_freq_ = 0;
    type_ = 0;
    dwncnvt_lo_ = 0;
    if (has_satname()) {
      if (satname_ != &::google::protobuf::internal::kEmptyString) {
        satname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ssc_ = 0;
    if (has_band()) {
      if (band_ != &::google::protobuf::internal::kEmptyString) {
        band_->clear();
      }
    }
    if (has_pol()) {
      if (pol_ != &::google::protobuf::internal::kEmptyString) {
        pol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SatelliteMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SATELLITE_MAP"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chan;
        break;
      }

      // optional int32 chan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chan_)));
          set_has_chan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ant;
        break;
      }

      // optional int32 ant = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ant_)));
          set_has_ant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_min_freq;
        break;
      }

      // optional double min_freq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_freq_)));
          set_has_min_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_max_freq;
        break;
      }

      // optional double max_freq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_freq_)));
          set_has_max_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_dwncnvt_lo;
        break;
      }

      // optional float dwncnvt_lo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dwncnvt_lo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dwncnvt_lo_)));
          set_has_dwncnvt_lo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_satname;
        break;
      }

      // optional string satname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_satname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_satname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->satname().data(), this->satname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ssc;
        break;
      }

      // optional int32 ssc = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ssc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssc_)));
          set_has_ssc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_band;
        break;
      }

      // optional string band = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_band:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_band()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->band().data(), this->band().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_pol;
        break;
      }

      // optional string pol = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pol().data(), this->pol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SatelliteMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SATELLITE_MAP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 chan = 2;
  if (has_chan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chan(), output);
  }

  // optional int32 ant = 3;
  if (has_ant()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ant(), output);
  }

  // optional double min_freq = 4;
  if (has_min_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_freq(), output);
  }

  // optional double max_freq = 5;
  if (has_max_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_freq(), output);
  }

  // optional int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  // optional float dwncnvt_lo = 7;
  if (has_dwncnvt_lo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->dwncnvt_lo(), output);
  }

  // optional string satname = 8;
  if (has_satname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->satname().data(), this->satname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->satname(), output);
  }

  // optional int32 ssc = 9;
  if (has_ssc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ssc(), output);
  }

  // optional string band = 10;
  if (has_band()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->band().data(), this->band().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->band(), output);
  }

  // optional string pol = 11;
  if (has_pol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pol().data(), this->pol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->pol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SatelliteMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SATELLITE_MAP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 chan = 2;
  if (has_chan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chan(), target);
  }

  // optional int32 ant = 3;
  if (has_ant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ant(), target);
  }

  // optional double min_freq = 4;
  if (has_min_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_freq(), target);
  }

  // optional double max_freq = 5;
  if (has_max_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_freq(), target);
  }

  // optional int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }

  // optional float dwncnvt_lo = 7;
  if (has_dwncnvt_lo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->dwncnvt_lo(), target);
  }

  // optional string satname = 8;
  if (has_satname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->satname().data(), this->satname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->satname(), target);
  }

  // optional int32 ssc = 9;
  if (has_ssc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ssc(), target);
  }

  // optional string band = 10;
  if (has_band()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->band().data(), this->band().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->band(), target);
  }

  // optional string pol = 11;
  if (has_pol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pol().data(), this->pol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->pol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SatelliteMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SATELLITE_MAP"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 chan = 2;
    if (has_chan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chan());
    }

    // optional int32 ant = 3;
    if (has_ant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ant());
    }

    // optional double min_freq = 4;
    if (has_min_freq()) {
      total_size += 1 + 8;
    }

    // optional double max_freq = 5;
    if (has_max_freq()) {
      total_size += 1 + 8;
    }

    // optional int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional float dwncnvt_lo = 7;
    if (has_dwncnvt_lo()) {
      total_size += 1 + 4;
    }

    // optional string satname = 8;
    if (has_satname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->satname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 ssc = 9;
    if (has_ssc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssc());
    }

    // optional string band = 10;
    if (has_band()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->band());
    }

    // optional string pol = 11;
    if (has_pol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pol());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SatelliteMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SatelliteMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SatelliteMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SatelliteMap::MergeFrom(const SatelliteMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_chan()) {
      set_chan(from.chan());
    }
    if (from.has_ant()) {
      set_ant(from.ant());
    }
    if (from.has_min_freq()) {
      set_min_freq(from.min_freq());
    }
    if (from.has_max_freq()) {
      set_max_freq(from.max_freq());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dwncnvt_lo()) {
      set_dwncnvt_lo(from.dwncnvt_lo());
    }
    if (from.has_satname()) {
      set_satname(from.satname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ssc()) {
      set_ssc(from.ssc());
    }
    if (from.has_band()) {
      set_band(from.band());
    }
    if (from.has_pol()) {
      set_pol(from.pol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SatelliteMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SatelliteMap::CopyFrom(const SatelliteMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SatelliteMap::IsInitialized() const {

  return true;
}

void SatelliteMap::Swap(SatelliteMap* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(chan_, other->chan_);
    std::swap(ant_, other->ant_);
    std::swap(min_freq_, other->min_freq_);
    std::swap(max_freq_, other->max_freq_);
    std::swap(type_, other->type_);
    std::swap(dwncnvt_lo_, other->dwncnvt_lo_);
    std::swap(satname_, other->satname_);
    std::swap(ssc_, other->ssc_);
    std::swap(band_, other->band_);
    std::swap(pol_, other->pol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SatelliteMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SatelliteMap_descriptor_;
  metadata.reflection = SatelliteMap_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SearchTop::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SearchTop::kMsgNameFieldNumber;
#endif  // !_MSC_VER

SearchTop::SearchTop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchTop::InitAsDefaultInstance() {
}

SearchTop::SearchTop(const SearchTop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchTop::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchTop::~SearchTop() {
  SharedDtor();
}

void SearchTop::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void SearchTop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchTop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchTop_descriptor_;
}

const SearchTop& SearchTop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

SearchTop* SearchTop::default_instance_ = NULL;

SearchTop* SearchTop::New() const {
  return new SearchTop;
}

void SearchTop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchTop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SEARCH_TOP"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchTop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SEARCH_TOP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchTop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SEARCH_TOP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchTop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SEARCH_TOP"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchTop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchTop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchTop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchTop::MergeFrom(const SearchTop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchTop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchTop::CopyFrom(const SearchTop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchTop::IsInitialized() const {

  return true;
}

void SearchTop::Swap(SearchTop* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchTop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchTop_descriptor_;
  metadata.reflection = SearchTop_reflection_;
  return metadata;
}


// ===================================================================

::std::string* StartScan::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int StartScan::kMsgNameFieldNumber;
#endif  // !_MSC_VER

StartScan::StartScan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartScan::InitAsDefaultInstance() {
}

StartScan::StartScan(const StartScan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartScan::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartScan::~StartScan() {
  SharedDtor();
}

void StartScan::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void StartScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartScan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartScan_descriptor_;
}

const StartScan& StartScan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

StartScan* StartScan::default_instance_ = NULL;

StartScan* StartScan::New() const {
  return new StartScan;
}

void StartScan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "START_SCAN"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "START_SCAN"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartScan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "START_SCAN"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartScan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "START_SCAN"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartScan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartScan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartScan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartScan::MergeFrom(const StartScan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartScan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartScan::CopyFrom(const StartScan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartScan::IsInitialized() const {

  return true;
}

void StartScan::Swap(StartScan* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartScan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartScan_descriptor_;
  metadata.reflection = StartScan_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SRAC::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SRAC::kMsgNameFieldNumber;
const int SRAC::kChanFieldNumber;
const int SRAC::kActionFieldNumber;
#endif  // !_MSC_VER

SRAC::SRAC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRAC::InitAsDefaultInstance() {
}

SRAC::SRAC(const SRAC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRAC::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  chan_ = 0;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRAC::~SRAC() {
  SharedDtor();
}

void SRAC::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void SRAC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRAC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRAC_descriptor_;
}

const SRAC& SRAC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

SRAC* SRAC::default_instance_ = NULL;

SRAC* SRAC::New() const {
  return new SRAC;
}

void SRAC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    chan_ = 0;
    action_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRAC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SRAC"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chan;
        break;
      }

      // optional int32 chan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chan_)));
          set_has_chan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional int32 action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRAC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SRAC"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 chan = 2;
  if (has_chan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chan(), output);
  }

  // optional int32 action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRAC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SRAC"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 chan = 2;
  if (has_chan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chan(), target);
  }

  // optional int32 action = 3;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRAC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SRAC"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 chan = 2;
    if (has_chan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chan());
    }

    // optional int32 action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRAC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRAC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRAC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRAC::MergeFrom(const SRAC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_chan()) {
      set_chan(from.chan());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRAC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRAC::CopyFrom(const SRAC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRAC::IsInitialized() const {

  return true;
}

void SRAC::Swap(SRAC* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(chan_, other->chan_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRAC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRAC_descriptor_;
  metadata.reflection = SRAC_reflection_;
  return metadata;
}


// ===================================================================

::std::string* QSTAT::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int QSTAT::kMsgNameFieldNumber;
const int QSTAT::kStatusFieldNumber;
#endif  // !_MSC_VER

QSTAT::QSTAT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QSTAT::InitAsDefaultInstance() {
}

QSTAT::QSTAT(const QSTAT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QSTAT::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QSTAT::~QSTAT() {
  SharedDtor();
}

void QSTAT::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void QSTAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QSTAT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QSTAT_descriptor_;
}

const QSTAT& QSTAT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

QSTAT* QSTAT::default_instance_ = NULL;

QSTAT* QSTAT::New() const {
  return new QSTAT;
}

void QSTAT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QSTAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "QSTAT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QSTAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "QSTAT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QSTAT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "QSTAT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QSTAT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "QSTAT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QSTAT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QSTAT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QSTAT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QSTAT::MergeFrom(const QSTAT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QSTAT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QSTAT::CopyFrom(const QSTAT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QSTAT::IsInitialized() const {

  return true;
}

void QSTAT::Swap(QSTAT* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QSTAT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QSTAT_descriptor_;
  metadata.reflection = QSTAT_reflection_;
  return metadata;
}


// ===================================================================

::std::string* QueryPosist::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int QueryPosist::kMsgNameFieldNumber;
#endif  // !_MSC_VER

QueryPosist::QueryPosist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryPosist::InitAsDefaultInstance() {
}

QueryPosist::QueryPosist(const QueryPosist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryPosist::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPosist::~QueryPosist() {
  SharedDtor();
}

void QueryPosist::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void QueryPosist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPosist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPosist_descriptor_;
}

const QueryPosist& QueryPosist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

QueryPosist* QueryPosist::default_instance_ = NULL;

QueryPosist* QueryPosist::New() const {
  return new QueryPosist;
}

void QueryPosist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPosist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "QUERY_POSIST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryPosist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "QUERY_POSIST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryPosist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "QUERY_POSIST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryPosist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "QUERY_POSIST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPosist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPosist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPosist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPosist::MergeFrom(const QueryPosist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPosist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPosist::CopyFrom(const QueryPosist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPosist::IsInitialized() const {

  return true;
}

void QueryPosist::Swap(QueryPosist* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPosist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPosist_descriptor_;
  metadata.reflection = QueryPosist_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Posist::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int Posist::kMsgNameFieldNumber;
const int Posist::kChanFieldNumber;
const int Posist::kAzimuthFieldNumber;
const int Posist::kElevationFieldNumber;
const int Posist::kVelocityFieldNumber;
#endif  // !_MSC_VER

Posist::Posist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Posist::InitAsDefaultInstance() {
}

Posist::Posist(const Posist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Posist::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  chan_ = 0;
  azimuth_ = 0;
  elevation_ = 0;
  velocity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Posist::~Posist() {
  SharedDtor();
}

void Posist::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void Posist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Posist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Posist_descriptor_;
}

const Posist& Posist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

Posist* Posist::default_instance_ = NULL;

Posist* Posist::New() const {
  return new Posist;
}

void Posist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    chan_ = 0;
    azimuth_ = 0;
    elevation_ = 0;
    velocity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Posist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "POSIST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chan;
        break;
      }

      // optional int32 chan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chan_)));
          set_has_chan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_azimuth;
        break;
      }

      // optional float azimuth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_elevation;
        break;
      }

      // optional float elevation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_velocity;
        break;
      }

      // optional float velocity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Posist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "POSIST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 chan = 2;
  if (has_chan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chan(), output);
  }

  // optional float azimuth = 3;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->azimuth(), output);
  }

  // optional float elevation = 4;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->elevation(), output);
  }

  // optional float velocity = 5;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->velocity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Posist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "POSIST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 chan = 2;
  if (has_chan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chan(), target);
  }

  // optional float azimuth = 3;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->azimuth(), target);
  }

  // optional float elevation = 4;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->elevation(), target);
  }

  // optional float velocity = 5;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->velocity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Posist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "POSIST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 chan = 2;
    if (has_chan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chan());
    }

    // optional float azimuth = 3;
    if (has_azimuth()) {
      total_size += 1 + 4;
    }

    // optional float elevation = 4;
    if (has_elevation()) {
      total_size += 1 + 4;
    }

    // optional float velocity = 5;
    if (has_velocity()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Posist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Posist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Posist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Posist::MergeFrom(const Posist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_chan()) {
      set_chan(from.chan());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Posist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Posist::CopyFrom(const Posist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Posist::IsInitialized() const {

  return true;
}

void Posist::Swap(Posist* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(chan_, other->chan_);
    std::swap(azimuth_, other->azimuth_);
    std::swap(elevation_, other->elevation_);
    std::swap(velocity_, other->velocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Posist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Posist_descriptor_;
  metadata.reflection = Posist_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UpdateSOIList::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UpdateSOIList::kMsgNameFieldNumber;
#endif  // !_MSC_VER

UpdateSOIList::UpdateSOIList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateSOIList::InitAsDefaultInstance() {
}

UpdateSOIList::UpdateSOIList(const UpdateSOIList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateSOIList::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSOIList::~UpdateSOIList() {
  SharedDtor();
}

void UpdateSOIList::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void UpdateSOIList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSOIList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSOIList_descriptor_;
}

const UpdateSOIList& UpdateSOIList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

UpdateSOIList* UpdateSOIList::default_instance_ = NULL;

UpdateSOIList* UpdateSOIList::New() const {
  return new UpdateSOIList;
}

void UpdateSOIList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSOIList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UPDATE_SOILIST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateSOIList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UPDATE_SOILIST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateSOIList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UPDATE_SOILIST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateSOIList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UPDATE_SOILIST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSOIList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSOIList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSOIList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSOIList::MergeFrom(const UpdateSOIList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSOIList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSOIList::CopyFrom(const UpdateSOIList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSOIList::IsInitialized() const {

  return true;
}

void UpdateSOIList::Swap(UpdateSOIList* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateSOIList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSOIList_descriptor_;
  metadata.reflection = UpdateSOIList_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UpdateSignal::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UpdateSignal::kMsgNameFieldNumber;
const int UpdateSignal::kStartFreqFieldNumber;
const int UpdateSignal::kStopFreqFieldNumber;
const int UpdateSignal::kStepFreqFieldNumber;
const int UpdateSignal::kDwellFieldNumber;
const int UpdateSignal::kThresholdFieldNumber;
#endif  // !_MSC_VER

UpdateSignal::UpdateSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateSignal::InitAsDefaultInstance() {
}

UpdateSignal::UpdateSignal(const UpdateSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateSignal::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  startfreq_ = 0;
  stopfreq_ = 0;
  stepfreq_ = 0;
  dwell_ = -1;
  threshold_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSignal::~UpdateSignal() {
  SharedDtor();
}

void UpdateSignal::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void UpdateSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSignal_descriptor_;
}

const UpdateSignal& UpdateSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

UpdateSignal* UpdateSignal::default_instance_ = NULL;

UpdateSignal* UpdateSignal::New() const {
  return new UpdateSignal;
}

void UpdateSignal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    startfreq_ = 0;
    stopfreq_ = 0;
    stepfreq_ = 0;
    dwell_ = -1;
    threshold_ = 4;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UPDATE_SIGNAL"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_startFreq;
        break;
      }

      // optional double startFreq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_startFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startfreq_)));
          set_has_startfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_stopFreq;
        break;
      }

      // optional double stopFreq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stopFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stopfreq_)));
          set_has_stopfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_stepFreq;
        break;
      }

      // optional double stepFreq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stepFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stepfreq_)));
          set_has_stepfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_dwell;
        break;
      }

      // optional double dwell = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dwell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwell_)));
          set_has_dwell();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_threshold;
        break;
      }

      // optional double threshold = 6 [default = 4];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UPDATE_SIGNAL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double startFreq = 2;
  if (has_startfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->startfreq(), output);
  }

  // optional double stopFreq = 3;
  if (has_stopfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->stopfreq(), output);
  }

  // optional double stepFreq = 4;
  if (has_stepfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->stepfreq(), output);
  }

  // optional double dwell = 5 [default = -1];
  if (has_dwell()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->dwell(), output);
  }

  // optional double threshold = 6 [default = 4];
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->threshold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UPDATE_SIGNAL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double startFreq = 2;
  if (has_startfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->startfreq(), target);
  }

  // optional double stopFreq = 3;
  if (has_stopfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->stopfreq(), target);
  }

  // optional double stepFreq = 4;
  if (has_stepfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->stepfreq(), target);
  }

  // optional double dwell = 5 [default = -1];
  if (has_dwell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->dwell(), target);
  }

  // optional double threshold = 6 [default = 4];
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->threshold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateSignal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UPDATE_SIGNAL"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double startFreq = 2;
    if (has_startfreq()) {
      total_size += 1 + 8;
    }

    // optional double stopFreq = 3;
    if (has_stopfreq()) {
      total_size += 1 + 8;
    }

    // optional double stepFreq = 4;
    if (has_stepfreq()) {
      total_size += 1 + 8;
    }

    // optional double dwell = 5 [default = -1];
    if (has_dwell()) {
      total_size += 1 + 8;
    }

    // optional double threshold = 6 [default = 4];
    if (has_threshold()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSignal::MergeFrom(const UpdateSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_startfreq()) {
      set_startfreq(from.startfreq());
    }
    if (from.has_stopfreq()) {
      set_stopfreq(from.stopfreq());
    }
    if (from.has_stepfreq()) {
      set_stepfreq(from.stepfreq());
    }
    if (from.has_dwell()) {
      set_dwell(from.dwell());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSignal::CopyFrom(const UpdateSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSignal::IsInitialized() const {

  return true;
}

void UpdateSignal::Swap(UpdateSignal* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(startfreq_, other->startfreq_);
    std::swap(stopfreq_, other->stopfreq_);
    std::swap(stepfreq_, other->stepfreq_);
    std::swap(dwell_, other->dwell_);
    std::swap(threshold_, other->threshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSignal_descriptor_;
  metadata.reflection = UpdateSignal_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UpdateSignals::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UpdateSignals::kMsgNameFieldNumber;
const int UpdateSignals::kFreqListFieldNumber;
const int UpdateSignals::kModeFieldNumber;
#endif  // !_MSC_VER

UpdateSignals::UpdateSignals()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateSignals::InitAsDefaultInstance() {
}

UpdateSignals::UpdateSignals(const UpdateSignals& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateSignals::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSignals::~UpdateSignals() {
  SharedDtor();
}

void UpdateSignals::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void UpdateSignals::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSignals::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSignals_descriptor_;
}

const UpdateSignals& UpdateSignals::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

UpdateSignals* UpdateSignals::default_instance_ = NULL;

UpdateSignals* UpdateSignals::New() const {
  return new UpdateSignals;
}

void UpdateSignals::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    mode_ = 0;
  }
  freqlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSignals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UPDATE_SIGNALS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_freqList;
        break;
      }

      // repeated .falcon_fast_msg.UpdateSignal freqList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_freqList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_freqlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_freqList;
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // optional int32 mode = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateSignals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UPDATE_SIGNALS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated .falcon_fast_msg.UpdateSignal freqList = 2;
  for (int i = 0; i < this->freqlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->freqlist(i), output);
  }

  // optional int32 mode = 3 [default = 0];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateSignals::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UPDATE_SIGNALS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated .falcon_fast_msg.UpdateSignal freqList = 2;
  for (int i = 0; i < this->freqlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->freqlist(i), target);
  }

  // optional int32 mode = 3 [default = 0];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateSignals::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UPDATE_SIGNALS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 mode = 3 [default = 0];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

  }
  // repeated .falcon_fast_msg.UpdateSignal freqList = 2;
  total_size += 1 * this->freqlist_size();
  for (int i = 0; i < this->freqlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->freqlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSignals::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSignals* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSignals*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSignals::MergeFrom(const UpdateSignals& from) {
  GOOGLE_CHECK_NE(&from, this);
  freqlist_.MergeFrom(from.freqlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSignals::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSignals::CopyFrom(const UpdateSignals& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSignals::IsInitialized() const {

  return true;
}

void UpdateSignals::Swap(UpdateSignals* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    freqlist_.Swap(&other->freqlist_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateSignals::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSignals_descriptor_;
  metadata.reflection = UpdateSignals_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UpdateFiltList::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UpdateFiltList::kMsgNameFieldNumber;
#endif  // !_MSC_VER

UpdateFiltList::UpdateFiltList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateFiltList::InitAsDefaultInstance() {
}

UpdateFiltList::UpdateFiltList(const UpdateFiltList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateFiltList::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFiltList::~UpdateFiltList() {
  SharedDtor();
}

void UpdateFiltList::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void UpdateFiltList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFiltList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFiltList_descriptor_;
}

const UpdateFiltList& UpdateFiltList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

UpdateFiltList* UpdateFiltList::default_instance_ = NULL;

UpdateFiltList* UpdateFiltList::New() const {
  return new UpdateFiltList;
}

void UpdateFiltList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFiltList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UPDATE_FILTLIST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateFiltList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UPDATE_FILTLIST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateFiltList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UPDATE_FILTLIST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateFiltList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UPDATE_FILTLIST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFiltList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFiltList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFiltList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFiltList::MergeFrom(const UpdateFiltList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFiltList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFiltList::CopyFrom(const UpdateFiltList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFiltList::IsInitialized() const {

  return true;
}

void UpdateFiltList::Swap(UpdateFiltList* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFiltList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFiltList_descriptor_;
  metadata.reflection = UpdateFiltList_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TipDone::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int TipDone::kMsgNameFieldNumber;
#endif  // !_MSC_VER

TipDone::TipDone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TipDone::InitAsDefaultInstance() {
}

TipDone::TipDone(const TipDone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TipDone::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TipDone::~TipDone() {
  SharedDtor();
}

void TipDone::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void TipDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TipDone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TipDone_descriptor_;
}

const TipDone& TipDone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

TipDone* TipDone::default_instance_ = NULL;

TipDone* TipDone::New() const {
  return new TipDone;
}

void TipDone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TipDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TIP_DONE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TipDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TIP_DONE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TipDone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TIP_DONE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TipDone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TIP_DONE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TipDone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TipDone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TipDone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TipDone::MergeFrom(const TipDone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TipDone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TipDone::CopyFrom(const TipDone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TipDone::IsInitialized() const {

  return true;
}

void TipDone::Swap(TipDone* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TipDone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TipDone_descriptor_;
  metadata.reflection = TipDone_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GlobalSignalAddition::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GlobalSignalAddition::kMsgNameFieldNumber;
const int GlobalSignalAddition::kFeedIdFieldNumber;
const int GlobalSignalAddition::kUuidsFieldNumber;
const int GlobalSignalAddition::kSignalIdsFieldNumber;
const int GlobalSignalAddition::kOldUuidsFieldNumber;
#endif  // !_MSC_VER

GlobalSignalAddition::GlobalSignalAddition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalSignalAddition::InitAsDefaultInstance() {
}

GlobalSignalAddition::GlobalSignalAddition(const GlobalSignalAddition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalSignalAddition::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  feed_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalSignalAddition::~GlobalSignalAddition() {
  SharedDtor();
}

void GlobalSignalAddition::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void GlobalSignalAddition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalSignalAddition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalSignalAddition_descriptor_;
}

const GlobalSignalAddition& GlobalSignalAddition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

GlobalSignalAddition* GlobalSignalAddition::default_instance_ = NULL;

GlobalSignalAddition* GlobalSignalAddition::New() const {
  return new GlobalSignalAddition;
}

void GlobalSignalAddition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    feed_id_ = 0;
  }
  uuids_.Clear();
  signal_ids_.Clear();
  old_uuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalSignalAddition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GLOBAL_SIGNAL_ADDITION"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_feed_id;
        break;
      }

      // optional int32 feed_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feed_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feed_id_)));
          set_has_feed_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uuids;
        break;
      }

      // repeated string uuids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_uuids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuids(this->uuids_size() - 1).data(),
            this->uuids(this->uuids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uuids;
        if (input->ExpectTag(32)) goto parse_signal_ids;
        break;
      }

      // repeated int32 signal_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signal_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_signal_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_signal_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_signal_ids;
        if (input->ExpectTag(42)) goto parse_old_uuids;
        break;
      }

      // repeated string old_uuids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_uuids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_old_uuids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_uuids(this->old_uuids_size() - 1).data(),
            this->old_uuids(this->old_uuids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_old_uuids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalSignalAddition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GLOBAL_SIGNAL_ADDITION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 feed_id = 2;
  if (has_feed_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->feed_id(), output);
  }

  // repeated string uuids = 3;
  for (int i = 0; i < this->uuids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->uuids(i).data(), this->uuids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uuids(i), output);
  }

  // repeated int32 signal_ids = 4;
  for (int i = 0; i < this->signal_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->signal_ids(i), output);
  }

  // repeated string old_uuids = 5;
  for (int i = 0; i < this->old_uuids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->old_uuids(i).data(), this->old_uuids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->old_uuids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalSignalAddition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GLOBAL_SIGNAL_ADDITION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 feed_id = 2;
  if (has_feed_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->feed_id(), target);
  }

  // repeated string uuids = 3;
  for (int i = 0; i < this->uuids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuids(i).data(), this->uuids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->uuids(i), target);
  }

  // repeated int32 signal_ids = 4;
  for (int i = 0; i < this->signal_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->signal_ids(i), target);
  }

  // repeated string old_uuids = 5;
  for (int i = 0; i < this->old_uuids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_uuids(i).data(), this->old_uuids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->old_uuids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalSignalAddition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GLOBAL_SIGNAL_ADDITION"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 feed_id = 2;
    if (has_feed_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->feed_id());
    }

  }
  // repeated string uuids = 3;
  total_size += 1 * this->uuids_size();
  for (int i = 0; i < this->uuids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->uuids(i));
  }

  // repeated int32 signal_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->signal_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->signal_ids(i));
    }
    total_size += 1 * this->signal_ids_size() + data_size;
  }

  // repeated string old_uuids = 5;
  total_size += 1 * this->old_uuids_size();
  for (int i = 0; i < this->old_uuids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->old_uuids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalSignalAddition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalSignalAddition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalSignalAddition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalSignalAddition::MergeFrom(const GlobalSignalAddition& from) {
  GOOGLE_CHECK_NE(&from, this);
  uuids_.MergeFrom(from.uuids_);
  signal_ids_.MergeFrom(from.signal_ids_);
  old_uuids_.MergeFrom(from.old_uuids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_feed_id()) {
      set_feed_id(from.feed_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalSignalAddition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalSignalAddition::CopyFrom(const GlobalSignalAddition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSignalAddition::IsInitialized() const {

  return true;
}

void GlobalSignalAddition::Swap(GlobalSignalAddition* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(feed_id_, other->feed_id_);
    uuids_.Swap(&other->uuids_);
    signal_ids_.Swap(&other->signal_ids_);
    old_uuids_.Swap(&other->old_uuids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalSignalAddition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalSignalAddition_descriptor_;
  metadata.reflection = GlobalSignalAddition_reflection_;
  return metadata;
}


// ===================================================================

::std::string* AntScnStps::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int AntScnStps::kMsgNameFieldNumber;
const int AntScnStps::kAppidFieldNumber;
const int AntScnStps::kStepsFieldNumber;
const int AntScnStps::kChanFieldNumber;
#endif  // !_MSC_VER

AntScnStps::AntScnStps()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AntScnStps::InitAsDefaultInstance() {
}

AntScnStps::AntScnStps(const AntScnStps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AntScnStps::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  appid_ = 0;
  steps_ = 0;
  chan_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AntScnStps::~AntScnStps() {
  SharedDtor();
}

void AntScnStps::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void AntScnStps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AntScnStps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AntScnStps_descriptor_;
}

const AntScnStps& AntScnStps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

AntScnStps* AntScnStps::default_instance_ = NULL;

AntScnStps* AntScnStps::New() const {
  return new AntScnStps;
}

void AntScnStps::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    appid_ = 0;
    steps_ = 0;
    chan_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AntScnStps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ANT_SCN_STPS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional int32 appid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_steps;
        break;
      }

      // optional int32 steps = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steps_)));
          set_has_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chan;
        break;
      }

      // optional int32 chan = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chan_)));
          set_has_chan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AntScnStps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ANT_SCN_STPS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  // optional int32 steps = 3;
  if (has_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->steps(), output);
  }

  // optional int32 chan = 4;
  if (has_chan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AntScnStps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ANT_SCN_STPS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  // optional int32 steps = 3;
  if (has_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->steps(), target);
  }

  // optional int32 chan = 4;
  if (has_chan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AntScnStps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ANT_SCN_STPS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional int32 steps = 3;
    if (has_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->steps());
    }

    // optional int32 chan = 4;
    if (has_chan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chan());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AntScnStps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AntScnStps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AntScnStps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AntScnStps::MergeFrom(const AntScnStps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_steps()) {
      set_steps(from.steps());
    }
    if (from.has_chan()) {
      set_chan(from.chan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AntScnStps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AntScnStps::CopyFrom(const AntScnStps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntScnStps::IsInitialized() const {

  return true;
}

void AntScnStps::Swap(AntScnStps* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(appid_, other->appid_);
    std::swap(steps_, other->steps_);
    std::swap(chan_, other->chan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AntScnStps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AntScnStps_descriptor_;
  metadata.reflection = AntScnStps_reflection_;
  return metadata;
}


// ===================================================================

::std::string* AntennaPointInfo::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int AntennaPointInfo::kMsgNameFieldNumber;
const int AntennaPointInfo::kDoneFieldNumber;
const int AntennaPointInfo::kChanFieldNumber;
const int AntennaPointInfo::kPosFieldNumber;
#endif  // !_MSC_VER

AntennaPointInfo::AntennaPointInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AntennaPointInfo::InitAsDefaultInstance() {
}

AntennaPointInfo::AntennaPointInfo(const AntennaPointInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AntennaPointInfo::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  done_ = 0;
  chan_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AntennaPointInfo::~AntennaPointInfo() {
  SharedDtor();
}

void AntennaPointInfo::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void AntennaPointInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AntennaPointInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AntennaPointInfo_descriptor_;
}

const AntennaPointInfo& AntennaPointInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

AntennaPointInfo* AntennaPointInfo::default_instance_ = NULL;

AntennaPointInfo* AntennaPointInfo::New() const {
  return new AntennaPointInfo;
}

void AntennaPointInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    done_ = 0;
    chan_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AntennaPointInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ANTENNA_POINT_INFO"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_done;
        break;
      }

      // optional int32 done = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chan;
        break;
      }

      // optional int32 chan = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chan_)));
          set_has_chan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_pos;
        break;
      }

      // optional float pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AntennaPointInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ANTENNA_POINT_INFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 done = 2;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->done(), output);
  }

  // optional int32 chan = 3;
  if (has_chan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chan(), output);
  }

  // optional float pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AntennaPointInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ANTENNA_POINT_INFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 done = 2;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->done(), target);
  }

  // optional int32 chan = 3;
  if (has_chan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chan(), target);
  }

  // optional float pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AntennaPointInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ANTENNA_POINT_INFO"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 done = 2;
    if (has_done()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->done());
    }

    // optional int32 chan = 3;
    if (has_chan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chan());
    }

    // optional float pos = 4;
    if (has_pos()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AntennaPointInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AntennaPointInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AntennaPointInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AntennaPointInfo::MergeFrom(const AntennaPointInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
    if (from.has_chan()) {
      set_chan(from.chan());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AntennaPointInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AntennaPointInfo::CopyFrom(const AntennaPointInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPointInfo::IsInitialized() const {

  return true;
}

void AntennaPointInfo::Swap(AntennaPointInfo* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(done_, other->done_);
    std::swap(chan_, other->chan_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AntennaPointInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AntennaPointInfo_descriptor_;
  metadata.reflection = AntennaPointInfo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Switching::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int Switching::kMsgNameFieldNumber;
#endif  // !_MSC_VER

Switching::Switching()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Switching::InitAsDefaultInstance() {
}

Switching::Switching(const Switching& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Switching::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Switching::~Switching() {
  SharedDtor();
}

void Switching::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void Switching::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Switching::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Switching_descriptor_;
}

const Switching& Switching::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

Switching* Switching::default_instance_ = NULL;

Switching* Switching::New() const {
  return new Switching;
}

void Switching::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Switching::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SWITCHING"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Switching::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SWITCHING"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Switching::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SWITCHING"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Switching::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SWITCHING"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Switching::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Switching* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Switching*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Switching::MergeFrom(const Switching& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Switching::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Switching::CopyFrom(const Switching& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Switching::IsInitialized() const {

  return true;
}

void Switching::Swap(Switching* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Switching::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Switching_descriptor_;
  metadata.reflection = Switching_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UpdateDetectionIDs::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UpdateDetectionIDs::kMsgNameFieldNumber;
const int UpdateDetectionIDs::kDetIDsFieldNumber;
const int UpdateDetectionIDs::kFilenameFieldNumber;
const int UpdateDetectionIDs::kMachineFieldNumber;
#endif  // !_MSC_VER

UpdateDetectionIDs::UpdateDetectionIDs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateDetectionIDs::InitAsDefaultInstance() {
}

UpdateDetectionIDs::UpdateDetectionIDs(const UpdateDetectionIDs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateDetectionIDs::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDetectionIDs::~UpdateDetectionIDs() {
  SharedDtor();
}

void UpdateDetectionIDs::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (machine_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_;
  }
  if (this != default_instance_) {
  }
}

void UpdateDetectionIDs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDetectionIDs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDetectionIDs_descriptor_;
}

const UpdateDetectionIDs& UpdateDetectionIDs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

UpdateDetectionIDs* UpdateDetectionIDs::default_instance_ = NULL;

UpdateDetectionIDs* UpdateDetectionIDs::New() const {
  return new UpdateDetectionIDs;
}

void UpdateDetectionIDs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_machine()) {
      if (machine_ != &::google::protobuf::internal::kEmptyString) {
        machine_->clear();
      }
    }
  }
  detids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDetectionIDs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UPDATE_DETECTION_IDS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_detIDs;
        break;
      }

      // repeated int32 detIDs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_detIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_detids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_detids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_detIDs;
        if (input->ExpectTag(26)) goto parse_filename;
        break;
      }

      // optional string filename = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_machine;
        break;
      }

      // optional string machine = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine().data(), this->machine().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateDetectionIDs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UPDATE_DETECTION_IDS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated int32 detIDs = 2;
  for (int i = 0; i < this->detids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->detids(i), output);
  }

  // optional string filename = 3 [default = ""];
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(), output);
  }

  // optional string machine = 4 [default = ""];
  if (has_machine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine().data(), this->machine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->machine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateDetectionIDs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UPDATE_DETECTION_IDS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated int32 detIDs = 2;
  for (int i = 0; i < this->detids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->detids(i), target);
  }

  // optional string filename = 3 [default = ""];
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // optional string machine = 4 [default = ""];
  if (has_machine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine().data(), this->machine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->machine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateDetectionIDs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UPDATE_DETECTION_IDS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string filename = 3 [default = ""];
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string machine = 4 [default = ""];
    if (has_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine());
    }

  }
  // repeated int32 detIDs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->detids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->detids(i));
    }
    total_size += 1 * this->detids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDetectionIDs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDetectionIDs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDetectionIDs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDetectionIDs::MergeFrom(const UpdateDetectionIDs& from) {
  GOOGLE_CHECK_NE(&from, this);
  detids_.MergeFrom(from.detids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_machine()) {
      set_machine(from.machine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDetectionIDs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDetectionIDs::CopyFrom(const UpdateDetectionIDs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDetectionIDs::IsInitialized() const {

  return true;
}

void UpdateDetectionIDs::Swap(UpdateDetectionIDs* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    detids_.Swap(&other->detids_);
    std::swap(filename_, other->filename_);
    std::swap(machine_, other->machine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDetectionIDs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDetectionIDs_descriptor_;
  metadata.reflection = UpdateDetectionIDs_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SnapExtraRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SnapExtraRequest::kMsgNameFieldNumber;
const int SnapExtraRequest::kArchfileFieldNumber;
const int SnapExtraRequest::kTablesFieldNumber;
const int SnapExtraRequest::kFreqFieldNumber;
const int SnapExtraRequest::kBwFieldNumber;
const int SnapExtraRequest::kBerthFieldNumber;
const int SnapExtraRequest::kNframesthFieldNumber;
const int SnapExtraRequest::kRatelinesFieldNumber;
const int SnapExtraRequest::kChiprateFieldNumber;
const int SnapExtraRequest::kOfdmNamesFieldNumber;
const int SnapExtraRequest::kUniquefieldthresholdFieldNumber;
const int SnapExtraRequest::kPristringFieldNumber;
const int SnapExtraRequest::kModFieldNumber;
const int SnapExtraRequest::kRevisitIDFieldNumber;
#endif  // !_MSC_VER

SnapExtraRequest::SnapExtraRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnapExtraRequest::InitAsDefaultInstance() {
}

SnapExtraRequest::SnapExtraRequest(const SnapExtraRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnapExtraRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  archfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uniquefieldthreshold_ = 0;
  pristring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mod_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  revisitid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapExtraRequest::~SnapExtraRequest() {
  SharedDtor();
}

void SnapExtraRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (archfile_ != &::google::protobuf::internal::kEmptyString) {
    delete archfile_;
  }
  if (pristring_ != &::google::protobuf::internal::kEmptyString) {
    delete pristring_;
  }
  if (mod_ != &::google::protobuf::internal::kEmptyString) {
    delete mod_;
  }
  if (revisitid_ != &::google::protobuf::internal::kEmptyString) {
    delete revisitid_;
  }
  if (this != default_instance_) {
  }
}

void SnapExtraRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapExtraRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapExtraRequest_descriptor_;
}

const SnapExtraRequest& SnapExtraRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

SnapExtraRequest* SnapExtraRequest::default_instance_ = NULL;

SnapExtraRequest* SnapExtraRequest::New() const {
  return new SnapExtraRequest;
}

void SnapExtraRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_archfile()) {
      if (archfile_ != &::google::protobuf::internal::kEmptyString) {
        archfile_->clear();
      }
    }
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    uniquefieldthreshold_ = 0;
    if (has_pristring()) {
      if (pristring_ != &::google::protobuf::internal::kEmptyString) {
        pristring_->clear();
      }
    }
    if (has_mod()) {
      if (mod_ != &::google::protobuf::internal::kEmptyString) {
        mod_->clear();
      }
    }
    if (has_revisitid()) {
      if (revisitid_ != &::google::protobuf::internal::kEmptyString) {
        revisitid_->clear();
      }
    }
  }
  tables_.Clear();
  freq_.Clear();
  bw_.Clear();
  berth_.Clear();
  nframesth_.Clear();
  ratelines_.Clear();
  chiprate_.Clear();
  ofdm_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapExtraRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SNAP_EXTRA_REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_archfile;
        break;
      }

      // optional string archfile = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_archfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->archfile().data(), this->archfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tables;
        break;
      }

      // repeated string tables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tables()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tables(this->tables_size() - 1).data(),
            this->tables(this->tables_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tables;
        if (input->ExpectTag(37)) goto parse_freq;
        break;
      }

      // repeated float freq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_freq())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_freq())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_freq;
        if (input->ExpectTag(45)) goto parse_bw;
        break;
      }

      // repeated float bw = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_bw())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_bw())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_bw;
        if (input->ExpectTag(53)) goto parse_berth;
        break;
      }

      // repeated float berth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_berth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_berth())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_berth())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_berth;
        if (input->ExpectTag(56)) goto parse_nframesth;
        break;
      }

      // repeated int32 nframesth = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nframesth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_nframesth())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nframesth())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nframesth;
        if (input->ExpectTag(69)) goto parse_ratelines;
        break;
      }

      // repeated float ratelines = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ratelines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69, input, this->mutable_ratelines())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ratelines())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_ratelines;
        if (input->ExpectTag(77)) goto parse_chiprate;
        break;
      }

      // repeated float chiprate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_chiprate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77, input, this->mutable_chiprate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_chiprate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_chiprate;
        if (input->ExpectTag(82)) goto parse_ofdm_names;
        break;
      }

      // repeated string ofdm_names = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ofdm_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ofdm_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ofdm_names(this->ofdm_names_size() - 1).data(),
            this->ofdm_names(this->ofdm_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ofdm_names;
        if (input->ExpectTag(88)) goto parse_uniquefieldthreshold;
        break;
      }

      // optional int32 uniquefieldthreshold = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uniquefieldthreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniquefieldthreshold_)));
          set_has_uniquefieldthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_pristring;
        break;
      }

      // optional string pristring = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pristring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pristring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pristring().data(), this->pristring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_mod;
        break;
      }

      // optional string mod = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mod:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mod()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mod().data(), this->mod().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_revisitID;
        break;
      }

      // optional string revisitID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revisitID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revisitid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->revisitid().data(), this->revisitid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnapExtraRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SNAP_EXTRA_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string archfile = 2;
  if (has_archfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->archfile().data(), this->archfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->archfile(), output);
  }

  // repeated string tables = 3;
  for (int i = 0; i < this->tables_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->tables(i).data(), this->tables(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tables(i), output);
  }

  // repeated float freq = 4;
  for (int i = 0; i < this->freq_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->freq(i), output);
  }

  // repeated float bw = 5;
  for (int i = 0; i < this->bw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->bw(i), output);
  }

  // repeated float berth = 6;
  for (int i = 0; i < this->berth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->berth(i), output);
  }

  // repeated int32 nframesth = 7;
  for (int i = 0; i < this->nframesth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->nframesth(i), output);
  }

  // repeated float ratelines = 8;
  for (int i = 0; i < this->ratelines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->ratelines(i), output);
  }

  // repeated float chiprate = 9;
  for (int i = 0; i < this->chiprate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->chiprate(i), output);
  }

  // repeated string ofdm_names = 10;
  for (int i = 0; i < this->ofdm_names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ofdm_names(i).data(), this->ofdm_names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->ofdm_names(i), output);
  }

  // optional int32 uniquefieldthreshold = 11;
  if (has_uniquefieldthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->uniquefieldthreshold(), output);
  }

  // optional string pristring = 12;
  if (has_pristring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pristring().data(), this->pristring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->pristring(), output);
  }

  // optional string mod = 13;
  if (has_mod()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mod().data(), this->mod().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->mod(), output);
  }

  // optional string revisitID = 14;
  if (has_revisitid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->revisitid().data(), this->revisitid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->revisitid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnapExtraRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SNAP_EXTRA_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string archfile = 2;
  if (has_archfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->archfile().data(), this->archfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->archfile(), target);
  }

  // repeated string tables = 3;
  for (int i = 0; i < this->tables_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tables(i).data(), this->tables(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->tables(i), target);
  }

  // repeated float freq = 4;
  for (int i = 0; i < this->freq_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->freq(i), target);
  }

  // repeated float bw = 5;
  for (int i = 0; i < this->bw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->bw(i), target);
  }

  // repeated float berth = 6;
  for (int i = 0; i < this->berth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->berth(i), target);
  }

  // repeated int32 nframesth = 7;
  for (int i = 0; i < this->nframesth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->nframesth(i), target);
  }

  // repeated float ratelines = 8;
  for (int i = 0; i < this->ratelines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(8, this->ratelines(i), target);
  }

  // repeated float chiprate = 9;
  for (int i = 0; i < this->chiprate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(9, this->chiprate(i), target);
  }

  // repeated string ofdm_names = 10;
  for (int i = 0; i < this->ofdm_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ofdm_names(i).data(), this->ofdm_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->ofdm_names(i), target);
  }

  // optional int32 uniquefieldthreshold = 11;
  if (has_uniquefieldthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->uniquefieldthreshold(), target);
  }

  // optional string pristring = 12;
  if (has_pristring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pristring().data(), this->pristring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->pristring(), target);
  }

  // optional string mod = 13;
  if (has_mod()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mod().data(), this->mod().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->mod(), target);
  }

  // optional string revisitID = 14;
  if (has_revisitid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->revisitid().data(), this->revisitid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->revisitid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnapExtraRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SNAP_EXTRA_REQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string archfile = 2;
    if (has_archfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->archfile());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int32 uniquefieldthreshold = 11;
    if (has_uniquefieldthreshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uniquefieldthreshold());
    }

    // optional string pristring = 12;
    if (has_pristring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pristring());
    }

    // optional string mod = 13;
    if (has_mod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mod());
    }

    // optional string revisitID = 14;
    if (has_revisitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->revisitid());
    }

  }
  // repeated string tables = 3;
  total_size += 1 * this->tables_size();
  for (int i = 0; i < this->tables_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tables(i));
  }

  // repeated float freq = 4;
  {
    int data_size = 0;
    data_size = 4 * this->freq_size();
    total_size += 1 * this->freq_size() + data_size;
  }

  // repeated float bw = 5;
  {
    int data_size = 0;
    data_size = 4 * this->bw_size();
    total_size += 1 * this->bw_size() + data_size;
  }

  // repeated float berth = 6;
  {
    int data_size = 0;
    data_size = 4 * this->berth_size();
    total_size += 1 * this->berth_size() + data_size;
  }

  // repeated int32 nframesth = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->nframesth_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nframesth(i));
    }
    total_size += 1 * this->nframesth_size() + data_size;
  }

  // repeated float ratelines = 8;
  {
    int data_size = 0;
    data_size = 4 * this->ratelines_size();
    total_size += 1 * this->ratelines_size() + data_size;
  }

  // repeated float chiprate = 9;
  {
    int data_size = 0;
    data_size = 4 * this->chiprate_size();
    total_size += 1 * this->chiprate_size() + data_size;
  }

  // repeated string ofdm_names = 10;
  total_size += 1 * this->ofdm_names_size();
  for (int i = 0; i < this->ofdm_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ofdm_names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapExtraRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapExtraRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapExtraRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapExtraRequest::MergeFrom(const SnapExtraRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  tables_.MergeFrom(from.tables_);
  freq_.MergeFrom(from.freq_);
  bw_.MergeFrom(from.bw_);
  berth_.MergeFrom(from.berth_);
  nframesth_.MergeFrom(from.nframesth_);
  ratelines_.MergeFrom(from.ratelines_);
  chiprate_.MergeFrom(from.chiprate_);
  ofdm_names_.MergeFrom(from.ofdm_names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_archfile()) {
      set_archfile(from.archfile());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_uniquefieldthreshold()) {
      set_uniquefieldthreshold(from.uniquefieldthreshold());
    }
    if (from.has_pristring()) {
      set_pristring(from.pristring());
    }
    if (from.has_mod()) {
      set_mod(from.mod());
    }
    if (from.has_revisitid()) {
      set_revisitid(from.revisitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapExtraRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapExtraRequest::CopyFrom(const SnapExtraRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapExtraRequest::IsInitialized() const {

  return true;
}

void SnapExtraRequest::Swap(SnapExtraRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(archfile_, other->archfile_);
    tables_.Swap(&other->tables_);
    freq_.Swap(&other->freq_);
    bw_.Swap(&other->bw_);
    berth_.Swap(&other->berth_);
    nframesth_.Swap(&other->nframesth_);
    ratelines_.Swap(&other->ratelines_);
    chiprate_.Swap(&other->chiprate_);
    ofdm_names_.Swap(&other->ofdm_names_);
    std::swap(uniquefieldthreshold_, other->uniquefieldthreshold_);
    std::swap(pristring_, other->pristring_);
    std::swap(mod_, other->mod_);
    std::swap(revisitid_, other->revisitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapExtraRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapExtraRequest_descriptor_;
  metadata.reflection = SnapExtraRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SnapExtraResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SnapExtraResponse::kMsgNameFieldNumber;
const int SnapExtraResponse::kRevisitIDFieldNumber;
const int SnapExtraResponse::kResponseFieldNumber;
#endif  // !_MSC_VER

SnapExtraResponse::SnapExtraResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnapExtraResponse::InitAsDefaultInstance() {
}

SnapExtraResponse::SnapExtraResponse(const SnapExtraResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnapExtraResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  revisitid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapExtraResponse::~SnapExtraResponse() {
  SharedDtor();
}

void SnapExtraResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (revisitid_ != &::google::protobuf::internal::kEmptyString) {
    delete revisitid_;
  }
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    delete response_;
  }
  if (this != default_instance_) {
  }
}

void SnapExtraResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapExtraResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapExtraResponse_descriptor_;
}

const SnapExtraResponse& SnapExtraResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconFastMessages_2eproto();
  return *default_instance_;
}

SnapExtraResponse* SnapExtraResponse::default_instance_ = NULL;

SnapExtraResponse* SnapExtraResponse::New() const {
  return new SnapExtraResponse;
}

void SnapExtraResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_revisitid()) {
      if (revisitid_ != &::google::protobuf::internal::kEmptyString) {
        revisitid_->clear();
      }
    }
    if (has_response()) {
      if (response_ != &::google::protobuf::internal::kEmptyString) {
        response_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapExtraResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SNAP_EXTRA_RESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_revisitID;
        break;
      }

      // optional string revisitID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revisitID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revisitid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->revisitid().data(), this->revisitid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_response;
        break;
      }

      // optional string response = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response().data(), this->response().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnapExtraResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SNAP_EXTRA_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string revisitID = 2;
  if (has_revisitid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->revisitid().data(), this->revisitid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->revisitid(), output);
  }

  // optional string response = 3;
  if (has_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnapExtraResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SNAP_EXTRA_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string revisitID = 2;
  if (has_revisitid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->revisitid().data(), this->revisitid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->revisitid(), target);
  }

  // optional string response = 3;
  if (has_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnapExtraResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SNAP_EXTRA_RESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string revisitID = 2;
    if (has_revisitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->revisitid());
    }

    // optional string response = 3;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapExtraResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapExtraResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapExtraResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapExtraResponse::MergeFrom(const SnapExtraResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_revisitid()) {
      set_revisitid(from.revisitid());
    }
    if (from.has_response()) {
      set_response(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapExtraResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapExtraResponse::CopyFrom(const SnapExtraResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapExtraResponse::IsInitialized() const {

  return true;
}

void SnapExtraResponse::Swap(SnapExtraResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(revisitid_, other->revisitid_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapExtraResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapExtraResponse_descriptor_;
  metadata.reflection = SnapExtraResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace falcon_fast_msg

// @@protoc_insertion_point(global_scope)
