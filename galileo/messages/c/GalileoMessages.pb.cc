// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GalileoMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GalileoMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace galileo_msg {

namespace {

const ::google::protobuf::Descriptor* Cluster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cluster_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessorResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessorResults_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterMapping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterMapping_reflection_ = NULL;
const ::google::protobuf::Descriptor* AggregatorResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AggregatorResults_reflection_ = NULL;
const ::google::protobuf::Descriptor* LearnEmitter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LearnEmitter_reflection_ = NULL;
const ::google::protobuf::Descriptor* AggregatorStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AggregatorStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* AggregatorClear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AggregatorClear_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GalileoMessages_2eproto() {
  protobuf_AddDesc_GalileoMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GalileoMessages.proto");
  GOOGLE_CHECK(file != NULL);
  Cluster_descriptor_ = file->message_type(0);
  static const int Cluster_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, incomingcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, indices_),
  };
  Cluster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cluster_descriptor_,
      Cluster::default_instance_,
      Cluster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cluster));
  ProcessorResults_descriptor_ = file->message_type(1);
  static const int ProcessorResults_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorResults, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorResults, procinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorResults, metafile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorResults, iqindexfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorResults, subgraphfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorResults, incomingclusters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorResults, cyclodisabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorResults, timeres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorResults, freqres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorResults, segmentername_),
  };
  ProcessorResults_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessorResults_descriptor_,
      ProcessorResults::default_instance_,
      ProcessorResults_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorResults, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorResults, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessorResults));
  ClusterMapping_descriptor_ = file->message_type(2);
  static const int ClusterMapping_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMapping, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMapping, incomingcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMapping, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMapping, newcluster_),
  };
  ClusterMapping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClusterMapping_descriptor_,
      ClusterMapping::default_instance_,
      ClusterMapping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMapping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMapping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClusterMapping));
  AggregatorResults_descriptor_ = file->message_type(3);
  static const int AggregatorResults_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorResults, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorResults, clustermap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorResults, procinstanceid_),
  };
  AggregatorResults_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AggregatorResults_descriptor_,
      AggregatorResults::default_instance_,
      AggregatorResults_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorResults, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorResults, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AggregatorResults));
  LearnEmitter_descriptor_ = file->message_type(4);
  static const int LearnEmitter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnEmitter, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnEmitter, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnEmitter, emittername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnEmitter, designation_),
  };
  LearnEmitter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LearnEmitter_descriptor_,
      LearnEmitter::default_instance_,
      LearnEmitter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnEmitter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnEmitter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LearnEmitter));
  AggregatorStatus_descriptor_ = file->message_type(5);
  static const int AggregatorStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorStatus, shouldexit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorStatus, exited_),
  };
  AggregatorStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AggregatorStatus_descriptor_,
      AggregatorStatus::default_instance_,
      AggregatorStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AggregatorStatus));
  AggregatorClear_descriptor_ = file->message_type(6);
  static const int AggregatorClear_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorClear, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorClear, shouldclear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorClear, cleared_),
  };
  AggregatorClear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AggregatorClear_descriptor_,
      AggregatorClear::default_instance_,
      AggregatorClear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorClear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorClear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AggregatorClear));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GalileoMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cluster_descriptor_, &Cluster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessorResults_descriptor_, &ProcessorResults::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClusterMapping_descriptor_, &ClusterMapping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AggregatorResults_descriptor_, &AggregatorResults::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LearnEmitter_descriptor_, &LearnEmitter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AggregatorStatus_descriptor_, &AggregatorStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AggregatorClear_descriptor_, &AggregatorClear::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GalileoMessages_2eproto() {
  delete Cluster::default_instance_;
  delete Cluster_reflection_;
  delete Cluster::_default_msgname_;
  delete ProcessorResults::default_instance_;
  delete ProcessorResults_reflection_;
  delete ProcessorResults::_default_msgname_;
  delete ClusterMapping::default_instance_;
  delete ClusterMapping_reflection_;
  delete ClusterMapping::_default_msgname_;
  delete AggregatorResults::default_instance_;
  delete AggregatorResults_reflection_;
  delete AggregatorResults::_default_msgname_;
  delete LearnEmitter::default_instance_;
  delete LearnEmitter_reflection_;
  delete LearnEmitter::_default_msgname_;
  delete LearnEmitter::_default_emittername_;
  delete LearnEmitter::_default_designation_;
  delete AggregatorStatus::default_instance_;
  delete AggregatorStatus_reflection_;
  delete AggregatorStatus::_default_msgname_;
  delete AggregatorClear::default_instance_;
  delete AggregatorClear_reflection_;
  delete AggregatorClear::_default_msgname_;
}

void protobuf_AddDesc_GalileoMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025GalileoMessages.proto\022\013galileo_msg\"X\n\007"
    "Cluster\022\030\n\007msgName\030\001 \001(\t:\007CLUSTER\022\023\n\013inc"
    "omingCID\030\002 \001(\005\022\r\n\005label\030\003 \001(\005\022\017\n\007indices"
    "\030\004 \003(\005\"\213\002\n\020ProcessorResults\022\"\n\007msgName\030\001"
    " \001(\t:\021PROCESSOR_RESULTS\022\026\n\016procInstanceI"
    "D\030\002 \001(\t\022\020\n\010metaFile\030\003 \001(\t\022\023\n\013IQIndexFile"
    "\030\004 \001(\t\022\024\n\014subGraphFile\030\005 \001(\t\022.\n\020incoming"
    "Clusters\030\006 \003(\0132\024.galileo_msg.Cluster\022\025\n\r"
    "cycloDisabled\030\007 \001(\010\022\017\n\007timeRes\030\010 \001(\001\022\017\n\007"
    "freqRes\030\t \001(\001\022\025\n\rsegmenterName\030\n \001(\t\"z\n\016"
    "ClusterMapping\022 \n\007msgName\030\001 \001(\t:\017CLUSTER"
    "_MAPPING\022\026\n\013incomingCID\030\002 \001(\005:\0010\022\023\n\tclus"
    "terID\030\003 \001(\t:\000\022\031\n\nnewCluster\030\004 \001(\010:\005false"
    "\"\201\001\n\021AggregatorResults\022#\n\007msgName\030\001 \001(\t:"
    "\022AGGREGATOR_RESULTS\022/\n\nclusterMap\030\002 \003(\0132"
    "\033.galileo_msg.ClusterMapping\022\026\n\016procInst"
    "anceID\030\003 \001(\t\"|\n\014LearnEmitter\022\036\n\007msgName\030"
    "\001 \001(\t:\rLEARN_EMITTER\022\023\n\tclusterID\030\002 \001(\t:"
    "\000\022\034\n\013emitterName\030\003 \001(\t:\007DEFAULT\022\031\n\013desig"
    "nation\030\004 \001(\t:\004gray\"Z\n\020AggregatorStatus\022\""
    "\n\007msgName\030\001 \001(\t:\021AGGREGATOR_STATUS\022\022\n\nsh"
    "ouldExit\030\002 \001(\010\022\016\n\006exited\030\003 \001(\010\"Z\n\017Aggreg"
    "atorClear\022!\n\007msgName\030\001 \001(\t:\020AGGREGATOR_C"
    "LEAR\022\023\n\013shouldClear\030\002 \001(\010\022\017\n\007cleared\030\003 \001"
    "(\010B\025\n\023fv.protos.kepsvisor", 985);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GalileoMessages.proto", &protobuf_RegisterTypes);
  Cluster::_default_msgname_ =
      new ::std::string("CLUSTER", 7);
  Cluster::default_instance_ = new Cluster();
  ProcessorResults::_default_msgname_ =
      new ::std::string("PROCESSOR_RESULTS", 17);
  ProcessorResults::default_instance_ = new ProcessorResults();
  ClusterMapping::_default_msgname_ =
      new ::std::string("CLUSTER_MAPPING", 15);
  ClusterMapping::default_instance_ = new ClusterMapping();
  AggregatorResults::_default_msgname_ =
      new ::std::string("AGGREGATOR_RESULTS", 18);
  AggregatorResults::default_instance_ = new AggregatorResults();
  LearnEmitter::_default_msgname_ =
      new ::std::string("LEARN_EMITTER", 13);
  LearnEmitter::_default_emittername_ =
      new ::std::string("DEFAULT", 7);
  LearnEmitter::_default_designation_ =
      new ::std::string("gray", 4);
  LearnEmitter::default_instance_ = new LearnEmitter();
  AggregatorStatus::_default_msgname_ =
      new ::std::string("AGGREGATOR_STATUS", 17);
  AggregatorStatus::default_instance_ = new AggregatorStatus();
  AggregatorClear::_default_msgname_ =
      new ::std::string("AGGREGATOR_CLEAR", 16);
  AggregatorClear::default_instance_ = new AggregatorClear();
  Cluster::default_instance_->InitAsDefaultInstance();
  ProcessorResults::default_instance_->InitAsDefaultInstance();
  ClusterMapping::default_instance_->InitAsDefaultInstance();
  AggregatorResults::default_instance_->InitAsDefaultInstance();
  LearnEmitter::default_instance_->InitAsDefaultInstance();
  AggregatorStatus::default_instance_->InitAsDefaultInstance();
  AggregatorClear::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GalileoMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GalileoMessages_2eproto {
  StaticDescriptorInitializer_GalileoMessages_2eproto() {
    protobuf_AddDesc_GalileoMessages_2eproto();
  }
} static_descriptor_initializer_GalileoMessages_2eproto_;

// ===================================================================

::std::string* Cluster::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int Cluster::kMsgNameFieldNumber;
const int Cluster::kIncomingCIDFieldNumber;
const int Cluster::kLabelFieldNumber;
const int Cluster::kIndicesFieldNumber;
#endif  // !_MSC_VER

Cluster::Cluster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cluster::InitAsDefaultInstance() {
}

Cluster::Cluster(const Cluster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cluster::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  incomingcid_ = 0;
  label_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cluster::~Cluster() {
  SharedDtor();
}

void Cluster::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void Cluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cluster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cluster_descriptor_;
}

const Cluster& Cluster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalileoMessages_2eproto();
  return *default_instance_;
}

Cluster* Cluster::default_instance_ = NULL;

Cluster* Cluster::New() const {
  return new Cluster;
}

void Cluster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    incomingcid_ = 0;
    label_ = 0;
  }
  indices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "CLUSTER"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_incomingCID;
        break;
      }

      // optional int32 incomingCID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incomingCID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &incomingcid_)));
          set_has_incomingcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_label;
        break;
      }

      // optional int32 label = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_indices;
        break;
      }

      // repeated int32 indices = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_indices())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_indices())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_indices;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "CLUSTER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 incomingCID = 2;
  if (has_incomingcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->incomingcid(), output);
  }

  // optional int32 label = 3;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->label(), output);
  }

  // repeated int32 indices = 4;
  for (int i = 0; i < this->indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->indices(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cluster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "CLUSTER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 incomingCID = 2;
  if (has_incomingcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->incomingcid(), target);
  }

  // optional int32 label = 3;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->label(), target);
  }

  // repeated int32 indices = 4;
  for (int i = 0; i < this->indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->indices(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cluster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "CLUSTER"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 incomingCID = 2;
    if (has_incomingcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->incomingcid());
    }

    // optional int32 label = 3;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

  }
  // repeated int32 indices = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->indices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->indices(i));
    }
    total_size += 1 * this->indices_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cluster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cluster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cluster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cluster::MergeFrom(const Cluster& from) {
  GOOGLE_CHECK_NE(&from, this);
  indices_.MergeFrom(from.indices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_incomingcid()) {
      set_incomingcid(from.incomingcid());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cluster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cluster::CopyFrom(const Cluster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cluster::IsInitialized() const {

  return true;
}

void Cluster::Swap(Cluster* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(incomingcid_, other->incomingcid_);
    std::swap(label_, other->label_);
    indices_.Swap(&other->indices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cluster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cluster_descriptor_;
  metadata.reflection = Cluster_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ProcessorResults::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ProcessorResults::kMsgNameFieldNumber;
const int ProcessorResults::kProcInstanceIDFieldNumber;
const int ProcessorResults::kMetaFileFieldNumber;
const int ProcessorResults::kIQIndexFileFieldNumber;
const int ProcessorResults::kSubGraphFileFieldNumber;
const int ProcessorResults::kIncomingClustersFieldNumber;
const int ProcessorResults::kCycloDisabledFieldNumber;
const int ProcessorResults::kTimeResFieldNumber;
const int ProcessorResults::kFreqResFieldNumber;
const int ProcessorResults::kSegmenterNameFieldNumber;
#endif  // !_MSC_VER

ProcessorResults::ProcessorResults()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessorResults::InitAsDefaultInstance() {
}

ProcessorResults::ProcessorResults(const ProcessorResults& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessorResults::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  procinstanceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  metafile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iqindexfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subgraphfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cyclodisabled_ = false;
  timeres_ = 0;
  freqres_ = 0;
  segmentername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessorResults::~ProcessorResults() {
  SharedDtor();
}

void ProcessorResults::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (procinstanceid_ != &::google::protobuf::internal::kEmptyString) {
    delete procinstanceid_;
  }
  if (metafile_ != &::google::protobuf::internal::kEmptyString) {
    delete metafile_;
  }
  if (iqindexfile_ != &::google::protobuf::internal::kEmptyString) {
    delete iqindexfile_;
  }
  if (subgraphfile_ != &::google::protobuf::internal::kEmptyString) {
    delete subgraphfile_;
  }
  if (segmentername_ != &::google::protobuf::internal::kEmptyString) {
    delete segmentername_;
  }
  if (this != default_instance_) {
  }
}

void ProcessorResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessorResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessorResults_descriptor_;
}

const ProcessorResults& ProcessorResults::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalileoMessages_2eproto();
  return *default_instance_;
}

ProcessorResults* ProcessorResults::default_instance_ = NULL;

ProcessorResults* ProcessorResults::New() const {
  return new ProcessorResults;
}

void ProcessorResults::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_procinstanceid()) {
      if (procinstanceid_ != &::google::protobuf::internal::kEmptyString) {
        procinstanceid_->clear();
      }
    }
    if (has_metafile()) {
      if (metafile_ != &::google::protobuf::internal::kEmptyString) {
        metafile_->clear();
      }
    }
    if (has_iqindexfile()) {
      if (iqindexfile_ != &::google::protobuf::internal::kEmptyString) {
        iqindexfile_->clear();
      }
    }
    if (has_subgraphfile()) {
      if (subgraphfile_ != &::google::protobuf::internal::kEmptyString) {
        subgraphfile_->clear();
      }
    }
    cyclodisabled_ = false;
    timeres_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    freqres_ = 0;
    if (has_segmentername()) {
      if (segmentername_ != &::google::protobuf::internal::kEmptyString) {
        segmentername_->clear();
      }
    }
  }
  incomingclusters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessorResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "PROCESSOR_RESULTS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_procInstanceID;
        break;
      }

      // optional string procInstanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_procInstanceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_procinstanceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->procinstanceid().data(), this->procinstanceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_metaFile;
        break;
      }

      // optional string metaFile = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metaFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metafile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->metafile().data(), this->metafile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_IQIndexFile;
        break;
      }

      // optional string IQIndexFile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IQIndexFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iqindexfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iqindexfile().data(), this->iqindexfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_subGraphFile;
        break;
      }

      // optional string subGraphFile = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subGraphFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subgraphfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subgraphfile().data(), this->subgraphfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_incomingClusters;
        break;
      }

      // repeated .galileo_msg.Cluster incomingClusters = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_incomingClusters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_incomingclusters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_incomingClusters;
        if (input->ExpectTag(56)) goto parse_cycloDisabled;
        break;
      }

      // optional bool cycloDisabled = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cycloDisabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cyclodisabled_)));
          set_has_cyclodisabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_timeRes;
        break;
      }

      // optional double timeRes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timeRes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timeres_)));
          set_has_timeres();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_freqRes;
        break;
      }

      // optional double freqRes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freqRes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freqres_)));
          set_has_freqres();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_segmenterName;
        break;
      }

      // optional string segmenterName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_segmenterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_segmentername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->segmentername().data(), this->segmentername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessorResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "PROCESSOR_RESULTS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string procInstanceID = 2;
  if (has_procinstanceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->procinstanceid().data(), this->procinstanceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->procinstanceid(), output);
  }

  // optional string metaFile = 3;
  if (has_metafile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metafile().data(), this->metafile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->metafile(), output);
  }

  // optional string IQIndexFile = 4;
  if (has_iqindexfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iqindexfile().data(), this->iqindexfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->iqindexfile(), output);
  }

  // optional string subGraphFile = 5;
  if (has_subgraphfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subgraphfile().data(), this->subgraphfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->subgraphfile(), output);
  }

  // repeated .galileo_msg.Cluster incomingClusters = 6;
  for (int i = 0; i < this->incomingclusters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->incomingclusters(i), output);
  }

  // optional bool cycloDisabled = 7;
  if (has_cyclodisabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->cyclodisabled(), output);
  }

  // optional double timeRes = 8;
  if (has_timeres()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->timeres(), output);
  }

  // optional double freqRes = 9;
  if (has_freqres()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->freqres(), output);
  }

  // optional string segmenterName = 10;
  if (has_segmentername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->segmentername().data(), this->segmentername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->segmentername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessorResults::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "PROCESSOR_RESULTS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string procInstanceID = 2;
  if (has_procinstanceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->procinstanceid().data(), this->procinstanceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->procinstanceid(), target);
  }

  // optional string metaFile = 3;
  if (has_metafile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metafile().data(), this->metafile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->metafile(), target);
  }

  // optional string IQIndexFile = 4;
  if (has_iqindexfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iqindexfile().data(), this->iqindexfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->iqindexfile(), target);
  }

  // optional string subGraphFile = 5;
  if (has_subgraphfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subgraphfile().data(), this->subgraphfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->subgraphfile(), target);
  }

  // repeated .galileo_msg.Cluster incomingClusters = 6;
  for (int i = 0; i < this->incomingclusters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->incomingclusters(i), target);
  }

  // optional bool cycloDisabled = 7;
  if (has_cyclodisabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->cyclodisabled(), target);
  }

  // optional double timeRes = 8;
  if (has_timeres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->timeres(), target);
  }

  // optional double freqRes = 9;
  if (has_freqres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->freqres(), target);
  }

  // optional string segmenterName = 10;
  if (has_segmentername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->segmentername().data(), this->segmentername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->segmentername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessorResults::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "PROCESSOR_RESULTS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string procInstanceID = 2;
    if (has_procinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->procinstanceid());
    }

    // optional string metaFile = 3;
    if (has_metafile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metafile());
    }

    // optional string IQIndexFile = 4;
    if (has_iqindexfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iqindexfile());
    }

    // optional string subGraphFile = 5;
    if (has_subgraphfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subgraphfile());
    }

    // optional bool cycloDisabled = 7;
    if (has_cyclodisabled()) {
      total_size += 1 + 1;
    }

    // optional double timeRes = 8;
    if (has_timeres()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double freqRes = 9;
    if (has_freqres()) {
      total_size += 1 + 8;
    }

    // optional string segmenterName = 10;
    if (has_segmentername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->segmentername());
    }

  }
  // repeated .galileo_msg.Cluster incomingClusters = 6;
  total_size += 1 * this->incomingclusters_size();
  for (int i = 0; i < this->incomingclusters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->incomingclusters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessorResults::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessorResults* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessorResults*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessorResults::MergeFrom(const ProcessorResults& from) {
  GOOGLE_CHECK_NE(&from, this);
  incomingclusters_.MergeFrom(from.incomingclusters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_procinstanceid()) {
      set_procinstanceid(from.procinstanceid());
    }
    if (from.has_metafile()) {
      set_metafile(from.metafile());
    }
    if (from.has_iqindexfile()) {
      set_iqindexfile(from.iqindexfile());
    }
    if (from.has_subgraphfile()) {
      set_subgraphfile(from.subgraphfile());
    }
    if (from.has_cyclodisabled()) {
      set_cyclodisabled(from.cyclodisabled());
    }
    if (from.has_timeres()) {
      set_timeres(from.timeres());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_freqres()) {
      set_freqres(from.freqres());
    }
    if (from.has_segmentername()) {
      set_segmentername(from.segmentername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessorResults::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorResults::CopyFrom(const ProcessorResults& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorResults::IsInitialized() const {

  return true;
}

void ProcessorResults::Swap(ProcessorResults* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(procinstanceid_, other->procinstanceid_);
    std::swap(metafile_, other->metafile_);
    std::swap(iqindexfile_, other->iqindexfile_);
    std::swap(subgraphfile_, other->subgraphfile_);
    incomingclusters_.Swap(&other->incomingclusters_);
    std::swap(cyclodisabled_, other->cyclodisabled_);
    std::swap(timeres_, other->timeres_);
    std::swap(freqres_, other->freqres_);
    std::swap(segmentername_, other->segmentername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessorResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessorResults_descriptor_;
  metadata.reflection = ProcessorResults_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ClusterMapping::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ClusterMapping::kMsgNameFieldNumber;
const int ClusterMapping::kIncomingCIDFieldNumber;
const int ClusterMapping::kClusterIDFieldNumber;
const int ClusterMapping::kNewClusterFieldNumber;
#endif  // !_MSC_VER

ClusterMapping::ClusterMapping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClusterMapping::InitAsDefaultInstance() {
}

ClusterMapping::ClusterMapping(const ClusterMapping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClusterMapping::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  incomingcid_ = 0;
  clusterid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newcluster_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClusterMapping::~ClusterMapping() {
  SharedDtor();
}

void ClusterMapping::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (clusterid_ != &::google::protobuf::internal::kEmptyString) {
    delete clusterid_;
  }
  if (this != default_instance_) {
  }
}

void ClusterMapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterMapping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterMapping_descriptor_;
}

const ClusterMapping& ClusterMapping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalileoMessages_2eproto();
  return *default_instance_;
}

ClusterMapping* ClusterMapping::default_instance_ = NULL;

ClusterMapping* ClusterMapping::New() const {
  return new ClusterMapping;
}

void ClusterMapping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    incomingcid_ = 0;
    if (has_clusterid()) {
      if (clusterid_ != &::google::protobuf::internal::kEmptyString) {
        clusterid_->clear();
      }
    }
    newcluster_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClusterMapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "CLUSTER_MAPPING"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_incomingCID;
        break;
      }

      // optional int32 incomingCID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incomingCID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &incomingcid_)));
          set_has_incomingcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clusterID;
        break;
      }

      // optional string clusterID = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clusterID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clusterid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clusterid().data(), this->clusterid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_newCluster;
        break;
      }

      // optional bool newCluster = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newCluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newcluster_)));
          set_has_newcluster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClusterMapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "CLUSTER_MAPPING"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 incomingCID = 2 [default = 0];
  if (has_incomingcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->incomingcid(), output);
  }

  // optional string clusterID = 3 [default = ""];
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clusterid().data(), this->clusterid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->clusterid(), output);
  }

  // optional bool newCluster = 4 [default = false];
  if (has_newcluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->newcluster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClusterMapping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "CLUSTER_MAPPING"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 incomingCID = 2 [default = 0];
  if (has_incomingcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->incomingcid(), target);
  }

  // optional string clusterID = 3 [default = ""];
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clusterid().data(), this->clusterid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clusterid(), target);
  }

  // optional bool newCluster = 4 [default = false];
  if (has_newcluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->newcluster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClusterMapping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "CLUSTER_MAPPING"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 incomingCID = 2 [default = 0];
    if (has_incomingcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->incomingcid());
    }

    // optional string clusterID = 3 [default = ""];
    if (has_clusterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clusterid());
    }

    // optional bool newCluster = 4 [default = false];
    if (has_newcluster()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterMapping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClusterMapping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClusterMapping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClusterMapping::MergeFrom(const ClusterMapping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_incomingcid()) {
      set_incomingcid(from.incomingcid());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_newcluster()) {
      set_newcluster(from.newcluster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClusterMapping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterMapping::CopyFrom(const ClusterMapping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterMapping::IsInitialized() const {

  return true;
}

void ClusterMapping::Swap(ClusterMapping* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(incomingcid_, other->incomingcid_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(newcluster_, other->newcluster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClusterMapping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterMapping_descriptor_;
  metadata.reflection = ClusterMapping_reflection_;
  return metadata;
}


// ===================================================================

::std::string* AggregatorResults::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int AggregatorResults::kMsgNameFieldNumber;
const int AggregatorResults::kClusterMapFieldNumber;
const int AggregatorResults::kProcInstanceIDFieldNumber;
#endif  // !_MSC_VER

AggregatorResults::AggregatorResults()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AggregatorResults::InitAsDefaultInstance() {
}

AggregatorResults::AggregatorResults(const AggregatorResults& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AggregatorResults::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  procinstanceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AggregatorResults::~AggregatorResults() {
  SharedDtor();
}

void AggregatorResults::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (procinstanceid_ != &::google::protobuf::internal::kEmptyString) {
    delete procinstanceid_;
  }
  if (this != default_instance_) {
  }
}

void AggregatorResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AggregatorResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AggregatorResults_descriptor_;
}

const AggregatorResults& AggregatorResults::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalileoMessages_2eproto();
  return *default_instance_;
}

AggregatorResults* AggregatorResults::default_instance_ = NULL;

AggregatorResults* AggregatorResults::New() const {
  return new AggregatorResults;
}

void AggregatorResults::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_procinstanceid()) {
      if (procinstanceid_ != &::google::protobuf::internal::kEmptyString) {
        procinstanceid_->clear();
      }
    }
  }
  clustermap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AggregatorResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "AGGREGATOR_RESULTS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clusterMap;
        break;
      }

      // repeated .galileo_msg.ClusterMapping clusterMap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clusterMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clustermap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clusterMap;
        if (input->ExpectTag(26)) goto parse_procInstanceID;
        break;
      }

      // optional string procInstanceID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_procInstanceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_procinstanceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->procinstanceid().data(), this->procinstanceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AggregatorResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "AGGREGATOR_RESULTS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated .galileo_msg.ClusterMapping clusterMap = 2;
  for (int i = 0; i < this->clustermap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->clustermap(i), output);
  }

  // optional string procInstanceID = 3;
  if (has_procinstanceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->procinstanceid().data(), this->procinstanceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->procinstanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AggregatorResults::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "AGGREGATOR_RESULTS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated .galileo_msg.ClusterMapping clusterMap = 2;
  for (int i = 0; i < this->clustermap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->clustermap(i), target);
  }

  // optional string procInstanceID = 3;
  if (has_procinstanceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->procinstanceid().data(), this->procinstanceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->procinstanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AggregatorResults::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "AGGREGATOR_RESULTS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string procInstanceID = 3;
    if (has_procinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->procinstanceid());
    }

  }
  // repeated .galileo_msg.ClusterMapping clusterMap = 2;
  total_size += 1 * this->clustermap_size();
  for (int i = 0; i < this->clustermap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clustermap(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AggregatorResults::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AggregatorResults* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AggregatorResults*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AggregatorResults::MergeFrom(const AggregatorResults& from) {
  GOOGLE_CHECK_NE(&from, this);
  clustermap_.MergeFrom(from.clustermap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_procinstanceid()) {
      set_procinstanceid(from.procinstanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AggregatorResults::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregatorResults::CopyFrom(const AggregatorResults& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatorResults::IsInitialized() const {

  return true;
}

void AggregatorResults::Swap(AggregatorResults* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    clustermap_.Swap(&other->clustermap_);
    std::swap(procinstanceid_, other->procinstanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AggregatorResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AggregatorResults_descriptor_;
  metadata.reflection = AggregatorResults_reflection_;
  return metadata;
}


// ===================================================================

::std::string* LearnEmitter::_default_msgname_ = NULL;
::std::string* LearnEmitter::_default_emittername_ = NULL;
::std::string* LearnEmitter::_default_designation_ = NULL;
#ifndef _MSC_VER
const int LearnEmitter::kMsgNameFieldNumber;
const int LearnEmitter::kClusterIDFieldNumber;
const int LearnEmitter::kEmitterNameFieldNumber;
const int LearnEmitter::kDesignationFieldNumber;
#endif  // !_MSC_VER

LearnEmitter::LearnEmitter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LearnEmitter::InitAsDefaultInstance() {
}

LearnEmitter::LearnEmitter(const LearnEmitter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LearnEmitter::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  clusterid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  emittername_ = const_cast< ::std::string*>(_default_emittername_);
  designation_ = const_cast< ::std::string*>(_default_designation_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LearnEmitter::~LearnEmitter() {
  SharedDtor();
}

void LearnEmitter::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (clusterid_ != &::google::protobuf::internal::kEmptyString) {
    delete clusterid_;
  }
  if (emittername_ != _default_emittername_) {
    delete emittername_;
  }
  if (designation_ != _default_designation_) {
    delete designation_;
  }
  if (this != default_instance_) {
  }
}

void LearnEmitter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearnEmitter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LearnEmitter_descriptor_;
}

const LearnEmitter& LearnEmitter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalileoMessages_2eproto();
  return *default_instance_;
}

LearnEmitter* LearnEmitter::default_instance_ = NULL;

LearnEmitter* LearnEmitter::New() const {
  return new LearnEmitter;
}

void LearnEmitter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_clusterid()) {
      if (clusterid_ != &::google::protobuf::internal::kEmptyString) {
        clusterid_->clear();
      }
    }
    if (has_emittername()) {
      if (emittername_ != _default_emittername_) {
        emittername_->assign(*_default_emittername_);
      }
    }
    if (has_designation()) {
      if (designation_ != _default_designation_) {
        designation_->assign(*_default_designation_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LearnEmitter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "LEARN_EMITTER"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clusterID;
        break;
      }

      // optional string clusterID = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clusterID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clusterid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clusterid().data(), this->clusterid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_emitterName;
        break;
      }

      // optional string emitterName = 3 [default = "DEFAULT"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emitterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emittername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->emittername().data(), this->emittername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_designation;
        break;
      }

      // optional string designation = 4 [default = "gray"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_designation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_designation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->designation().data(), this->designation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LearnEmitter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "LEARN_EMITTER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string clusterID = 2 [default = ""];
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clusterid().data(), this->clusterid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->clusterid(), output);
  }

  // optional string emitterName = 3 [default = "DEFAULT"];
  if (has_emittername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emittername().data(), this->emittername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->emittername(), output);
  }

  // optional string designation = 4 [default = "gray"];
  if (has_designation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->designation().data(), this->designation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->designation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LearnEmitter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "LEARN_EMITTER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string clusterID = 2 [default = ""];
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clusterid().data(), this->clusterid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clusterid(), target);
  }

  // optional string emitterName = 3 [default = "DEFAULT"];
  if (has_emittername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emittername().data(), this->emittername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->emittername(), target);
  }

  // optional string designation = 4 [default = "gray"];
  if (has_designation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->designation().data(), this->designation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->designation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LearnEmitter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "LEARN_EMITTER"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string clusterID = 2 [default = ""];
    if (has_clusterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clusterid());
    }

    // optional string emitterName = 3 [default = "DEFAULT"];
    if (has_emittername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->emittername());
    }

    // optional string designation = 4 [default = "gray"];
    if (has_designation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->designation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearnEmitter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LearnEmitter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LearnEmitter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LearnEmitter::MergeFrom(const LearnEmitter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_emittername()) {
      set_emittername(from.emittername());
    }
    if (from.has_designation()) {
      set_designation(from.designation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LearnEmitter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearnEmitter::CopyFrom(const LearnEmitter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearnEmitter::IsInitialized() const {

  return true;
}

void LearnEmitter::Swap(LearnEmitter* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(emittername_, other->emittername_);
    std::swap(designation_, other->designation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LearnEmitter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LearnEmitter_descriptor_;
  metadata.reflection = LearnEmitter_reflection_;
  return metadata;
}


// ===================================================================

::std::string* AggregatorStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int AggregatorStatus::kMsgNameFieldNumber;
const int AggregatorStatus::kShouldExitFieldNumber;
const int AggregatorStatus::kExitedFieldNumber;
#endif  // !_MSC_VER

AggregatorStatus::AggregatorStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AggregatorStatus::InitAsDefaultInstance() {
}

AggregatorStatus::AggregatorStatus(const AggregatorStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AggregatorStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  shouldexit_ = false;
  exited_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AggregatorStatus::~AggregatorStatus() {
  SharedDtor();
}

void AggregatorStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void AggregatorStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AggregatorStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AggregatorStatus_descriptor_;
}

const AggregatorStatus& AggregatorStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalileoMessages_2eproto();
  return *default_instance_;
}

AggregatorStatus* AggregatorStatus::default_instance_ = NULL;

AggregatorStatus* AggregatorStatus::New() const {
  return new AggregatorStatus;
}

void AggregatorStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    shouldexit_ = false;
    exited_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AggregatorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "AGGREGATOR_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shouldExit;
        break;
      }

      // optional bool shouldExit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shouldExit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shouldexit_)));
          set_has_shouldexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exited;
        break;
      }

      // optional bool exited = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exited_)));
          set_has_exited();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AggregatorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "AGGREGATOR_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool shouldExit = 2;
  if (has_shouldexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->shouldexit(), output);
  }

  // optional bool exited = 3;
  if (has_exited()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->exited(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AggregatorStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "AGGREGATOR_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool shouldExit = 2;
  if (has_shouldexit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->shouldexit(), target);
  }

  // optional bool exited = 3;
  if (has_exited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->exited(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AggregatorStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "AGGREGATOR_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool shouldExit = 2;
    if (has_shouldexit()) {
      total_size += 1 + 1;
    }

    // optional bool exited = 3;
    if (has_exited()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AggregatorStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AggregatorStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AggregatorStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AggregatorStatus::MergeFrom(const AggregatorStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_shouldexit()) {
      set_shouldexit(from.shouldexit());
    }
    if (from.has_exited()) {
      set_exited(from.exited());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AggregatorStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregatorStatus::CopyFrom(const AggregatorStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatorStatus::IsInitialized() const {

  return true;
}

void AggregatorStatus::Swap(AggregatorStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(shouldexit_, other->shouldexit_);
    std::swap(exited_, other->exited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AggregatorStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AggregatorStatus_descriptor_;
  metadata.reflection = AggregatorStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* AggregatorClear::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int AggregatorClear::kMsgNameFieldNumber;
const int AggregatorClear::kShouldClearFieldNumber;
const int AggregatorClear::kClearedFieldNumber;
#endif  // !_MSC_VER

AggregatorClear::AggregatorClear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AggregatorClear::InitAsDefaultInstance() {
}

AggregatorClear::AggregatorClear(const AggregatorClear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AggregatorClear::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  shouldclear_ = false;
  cleared_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AggregatorClear::~AggregatorClear() {
  SharedDtor();
}

void AggregatorClear::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void AggregatorClear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AggregatorClear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AggregatorClear_descriptor_;
}

const AggregatorClear& AggregatorClear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalileoMessages_2eproto();
  return *default_instance_;
}

AggregatorClear* AggregatorClear::default_instance_ = NULL;

AggregatorClear* AggregatorClear::New() const {
  return new AggregatorClear;
}

void AggregatorClear::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    shouldclear_ = false;
    cleared_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AggregatorClear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "AGGREGATOR_CLEAR"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shouldClear;
        break;
      }

      // optional bool shouldClear = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shouldClear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shouldclear_)));
          set_has_shouldclear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cleared;
        break;
      }

      // optional bool cleared = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleared:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cleared_)));
          set_has_cleared();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AggregatorClear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "AGGREGATOR_CLEAR"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool shouldClear = 2;
  if (has_shouldclear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->shouldclear(), output);
  }

  // optional bool cleared = 3;
  if (has_cleared()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->cleared(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AggregatorClear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "AGGREGATOR_CLEAR"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool shouldClear = 2;
  if (has_shouldclear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->shouldclear(), target);
  }

  // optional bool cleared = 3;
  if (has_cleared()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->cleared(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AggregatorClear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "AGGREGATOR_CLEAR"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool shouldClear = 2;
    if (has_shouldclear()) {
      total_size += 1 + 1;
    }

    // optional bool cleared = 3;
    if (has_cleared()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AggregatorClear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AggregatorClear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AggregatorClear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AggregatorClear::MergeFrom(const AggregatorClear& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_shouldclear()) {
      set_shouldclear(from.shouldclear());
    }
    if (from.has_cleared()) {
      set_cleared(from.cleared());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AggregatorClear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregatorClear::CopyFrom(const AggregatorClear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatorClear::IsInitialized() const {

  return true;
}

void AggregatorClear::Swap(AggregatorClear* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(shouldclear_, other->shouldclear_);
    std::swap(cleared_, other->cleared_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AggregatorClear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AggregatorClear_descriptor_;
  metadata.reflection = AggregatorClear_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace galileo_msg

// @@protoc_insertion_point(global_scope)
