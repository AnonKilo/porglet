// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DSSSMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DSSSMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DSSSProduct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DSSSProduct_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DSSSMessages_2eproto() {
  protobuf_AddDesc_DSSSMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DSSSMessages.proto");
  GOOGLE_CHECK(file != NULL);
  DSSSProduct_descriptor_ = file->message_type(0);
  static const int DSSSProduct_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSSProduct, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSSProduct, rf_hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSSProduct, chiprate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSSProduct, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSSProduct, codelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSSProduct, wholeseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSSProduct, fracseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSSProduct, confidence_),
  };
  DSSSProduct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DSSSProduct_descriptor_,
      DSSSProduct::default_instance_,
      DSSSProduct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSSProduct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSSProduct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DSSSProduct));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DSSSMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DSSSProduct_descriptor_, &DSSSProduct::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DSSSMessages_2eproto() {
  delete DSSSProduct::default_instance_;
  delete DSSSProduct_reflection_;
  delete DSSSProduct::_default_msgname_;
}

void protobuf_AddDesc_DSSSMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022DSSSMessages.proto\"\256\001\n\013DSSSProduct\022\035\n\007"
    "msgName\030\001 \001(\t:\014DSSS_PRODUCT\022\r\n\005rf_hz\030\002 \001"
    "(\001\022\020\n\010chiprate\030\003 \001(\001\022\014\n\004code\030\004 \001(\t\022\022\n\nco"
    "delength\030\005 \001(\005\022\024\n\014wholeSeconds\030\006 \001(\001\022\023\n\013"
    "fracSeconds\030\007 \001(\001\022\022\n\nconfidence\030\010 \001(\002B\025\n"
    "\023fv.protos.kepsvisor", 220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DSSSMessages.proto", &protobuf_RegisterTypes);
  DSSSProduct::_default_msgname_ =
      new ::std::string("DSSS_PRODUCT", 12);
  DSSSProduct::default_instance_ = new DSSSProduct();
  DSSSProduct::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DSSSMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DSSSMessages_2eproto {
  StaticDescriptorInitializer_DSSSMessages_2eproto() {
    protobuf_AddDesc_DSSSMessages_2eproto();
  }
} static_descriptor_initializer_DSSSMessages_2eproto_;

// ===================================================================

::std::string* DSSSProduct::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int DSSSProduct::kMsgNameFieldNumber;
const int DSSSProduct::kRfHzFieldNumber;
const int DSSSProduct::kChiprateFieldNumber;
const int DSSSProduct::kCodeFieldNumber;
const int DSSSProduct::kCodelengthFieldNumber;
const int DSSSProduct::kWholeSecondsFieldNumber;
const int DSSSProduct::kFracSecondsFieldNumber;
const int DSSSProduct::kConfidenceFieldNumber;
#endif  // !_MSC_VER

DSSSProduct::DSSSProduct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DSSSProduct::InitAsDefaultInstance() {
}

DSSSProduct::DSSSProduct(const DSSSProduct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DSSSProduct::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  rf_hz_ = 0;
  chiprate_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  codelength_ = 0;
  wholeseconds_ = 0;
  fracseconds_ = 0;
  confidence_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DSSSProduct::~DSSSProduct() {
  SharedDtor();
}

void DSSSProduct::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void DSSSProduct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DSSSProduct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DSSSProduct_descriptor_;
}

const DSSSProduct& DSSSProduct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DSSSMessages_2eproto();
  return *default_instance_;
}

DSSSProduct* DSSSProduct::default_instance_ = NULL;

DSSSProduct* DSSSProduct::New() const {
  return new DSSSProduct;
}

void DSSSProduct::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    rf_hz_ = 0;
    chiprate_ = 0;
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    codelength_ = 0;
    wholeseconds_ = 0;
    fracseconds_ = 0;
    confidence_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DSSSProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DSSS_PRODUCT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_rf_hz;
        break;
      }

      // optional double rf_hz = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rf_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rf_hz_)));
          set_has_rf_hz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_chiprate;
        break;
      }

      // optional double chiprate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_chiprate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chiprate_)));
          set_has_chiprate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_code;
        break;
      }

      // optional string code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_codelength;
        break;
      }

      // optional int32 codelength = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_codelength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &codelength_)));
          set_has_codelength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_wholeSeconds;
        break;
      }

      // optional double wholeSeconds = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_wholeSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wholeseconds_)));
          set_has_wholeseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_fracSeconds;
        break;
      }

      // optional double fracSeconds = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fracSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fracseconds_)));
          set_has_fracseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_confidence;
        break;
      }

      // optional float confidence = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DSSSProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DSSS_PRODUCT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double rf_hz = 2;
  if (has_rf_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rf_hz(), output);
  }

  // optional double chiprate = 3;
  if (has_chiprate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->chiprate(), output);
  }

  // optional string code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->code(), output);
  }

  // optional int32 codelength = 5;
  if (has_codelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->codelength(), output);
  }

  // optional double wholeSeconds = 6;
  if (has_wholeseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->wholeseconds(), output);
  }

  // optional double fracSeconds = 7;
  if (has_fracseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->fracseconds(), output);
  }

  // optional float confidence = 8;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->confidence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DSSSProduct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DSSS_PRODUCT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double rf_hz = 2;
  if (has_rf_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rf_hz(), target);
  }

  // optional double chiprate = 3;
  if (has_chiprate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->chiprate(), target);
  }

  // optional string code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code(), target);
  }

  // optional int32 codelength = 5;
  if (has_codelength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->codelength(), target);
  }

  // optional double wholeSeconds = 6;
  if (has_wholeseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->wholeseconds(), target);
  }

  // optional double fracSeconds = 7;
  if (has_fracseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->fracseconds(), target);
  }

  // optional float confidence = 8;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->confidence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DSSSProduct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DSSS_PRODUCT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double rf_hz = 2;
    if (has_rf_hz()) {
      total_size += 1 + 8;
    }

    // optional double chiprate = 3;
    if (has_chiprate()) {
      total_size += 1 + 8;
    }

    // optional string code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional int32 codelength = 5;
    if (has_codelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->codelength());
    }

    // optional double wholeSeconds = 6;
    if (has_wholeseconds()) {
      total_size += 1 + 8;
    }

    // optional double fracSeconds = 7;
    if (has_fracseconds()) {
      total_size += 1 + 8;
    }

    // optional float confidence = 8;
    if (has_confidence()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DSSSProduct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DSSSProduct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DSSSProduct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DSSSProduct::MergeFrom(const DSSSProduct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_rf_hz()) {
      set_rf_hz(from.rf_hz());
    }
    if (from.has_chiprate()) {
      set_chiprate(from.chiprate());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_codelength()) {
      set_codelength(from.codelength());
    }
    if (from.has_wholeseconds()) {
      set_wholeseconds(from.wholeseconds());
    }
    if (from.has_fracseconds()) {
      set_fracseconds(from.fracseconds());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DSSSProduct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DSSSProduct::CopyFrom(const DSSSProduct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSSSProduct::IsInitialized() const {

  return true;
}

void DSSSProduct::Swap(DSSSProduct* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(rf_hz_, other->rf_hz_);
    std::swap(chiprate_, other->chiprate_);
    std::swap(code_, other->code_);
    std::swap(codelength_, other->codelength_);
    std::swap(wholeseconds_, other->wholeseconds_);
    std::swap(fracseconds_, other->fracseconds_);
    std::swap(confidence_, other->confidence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DSSSProduct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DSSSProduct_descriptor_;
  metadata.reflection = DSSSProduct_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
