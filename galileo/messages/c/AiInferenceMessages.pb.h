// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AiInferenceMessages.proto

#ifndef PROTOBUF_AiInferenceMessages_2eproto__INCLUDED
#define PROTOBUF_AiInferenceMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ai_inference_msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AiInferenceMessages_2eproto();
void protobuf_AssignDesc_AiInferenceMessages_2eproto();
void protobuf_ShutdownFile_AiInferenceMessages_2eproto();

class SpectrogramInferenceResult;

// ===================================================================

class SpectrogramInferenceResult : public ::google::protobuf::Message {
 public:
  SpectrogramInferenceResult();
  virtual ~SpectrogramInferenceResult();

  SpectrogramInferenceResult(const SpectrogramInferenceResult& from);

  inline SpectrogramInferenceResult& operator=(const SpectrogramInferenceResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpectrogramInferenceResult& default_instance();

  void Swap(SpectrogramInferenceResult* other);

  // implements Message ----------------------------------------------

  SpectrogramInferenceResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpectrogramInferenceResult& from);
  void MergeFrom(const SpectrogramInferenceResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional string ramSnapId = 2;
  inline bool has_ramsnapid() const;
  inline void clear_ramsnapid();
  static const int kRamSnapIdFieldNumber = 2;
  inline const ::std::string& ramsnapid() const;
  inline void set_ramsnapid(const ::std::string& value);
  inline void set_ramsnapid(const char* value);
  inline void set_ramsnapid(const char* value, size_t size);
  inline ::std::string* mutable_ramsnapid();
  inline ::std::string* release_ramsnapid();
  inline void set_allocated_ramsnapid(::std::string* ramsnapid);

  // optional string spectrogramFile = 3;
  inline bool has_spectrogramfile() const;
  inline void clear_spectrogramfile();
  static const int kSpectrogramFileFieldNumber = 3;
  inline const ::std::string& spectrogramfile() const;
  inline void set_spectrogramfile(const ::std::string& value);
  inline void set_spectrogramfile(const char* value);
  inline void set_spectrogramfile(const char* value, size_t size);
  inline ::std::string* mutable_spectrogramfile();
  inline ::std::string* release_spectrogramfile();
  inline void set_allocated_spectrogramfile(::std::string* spectrogramfile);

  // optional double centerFrequencyHz = 4;
  inline bool has_centerfrequencyhz() const;
  inline void clear_centerfrequencyhz();
  static const int kCenterFrequencyHzFieldNumber = 4;
  inline double centerfrequencyhz() const;
  inline void set_centerfrequencyhz(double value);

  // repeated string labels = 5;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 5;
  inline const ::std::string& labels(int index) const;
  inline ::std::string* mutable_labels(int index);
  inline void set_labels(int index, const ::std::string& value);
  inline void set_labels(int index, const char* value);
  inline void set_labels(int index, const char* value, size_t size);
  inline ::std::string* add_labels();
  inline void add_labels(const ::std::string& value);
  inline void add_labels(const char* value);
  inline void add_labels(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // repeated double scores = 6;
  inline int scores_size() const;
  inline void clear_scores();
  static const int kScoresFieldNumber = 6;
  inline double scores(int index) const;
  inline void set_scores(int index, double value);
  inline void add_scores(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      scores() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_scores();

  // optional double scoreThreshold = 7;
  inline bool has_scorethreshold() const;
  inline void clear_scorethreshold();
  static const int kScoreThresholdFieldNumber = 7;
  inline double scorethreshold() const;
  inline void set_scorethreshold(double value);

  // @@protoc_insertion_point(class_scope:ai_inference_msg.SpectrogramInferenceResult)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_ramsnapid();
  inline void clear_has_ramsnapid();
  inline void set_has_spectrogramfile();
  inline void clear_has_spectrogramfile();
  inline void set_has_centerfrequencyhz();
  inline void clear_has_centerfrequencyhz();
  inline void set_has_scorethreshold();
  inline void clear_has_scorethreshold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* ramsnapid_;
  ::std::string* spectrogramfile_;
  double centerfrequencyhz_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  ::google::protobuf::RepeatedField< double > scores_;
  double scorethreshold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_AiInferenceMessages_2eproto();
  friend void protobuf_AssignDesc_AiInferenceMessages_2eproto();
  friend void protobuf_ShutdownFile_AiInferenceMessages_2eproto();

  void InitAsDefaultInstance();
  static SpectrogramInferenceResult* default_instance_;
};
// ===================================================================


// ===================================================================

// SpectrogramInferenceResult

// optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];
inline bool SpectrogramInferenceResult::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpectrogramInferenceResult::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpectrogramInferenceResult::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpectrogramInferenceResult::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& SpectrogramInferenceResult::msgname() const {
  return *msgname_;
}
inline void SpectrogramInferenceResult::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SpectrogramInferenceResult::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SpectrogramInferenceResult::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpectrogramInferenceResult::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* SpectrogramInferenceResult::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void SpectrogramInferenceResult::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional string ramSnapId = 2;
inline bool SpectrogramInferenceResult::has_ramsnapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpectrogramInferenceResult::set_has_ramsnapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpectrogramInferenceResult::clear_has_ramsnapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpectrogramInferenceResult::clear_ramsnapid() {
  if (ramsnapid_ != &::google::protobuf::internal::kEmptyString) {
    ramsnapid_->clear();
  }
  clear_has_ramsnapid();
}
inline const ::std::string& SpectrogramInferenceResult::ramsnapid() const {
  return *ramsnapid_;
}
inline void SpectrogramInferenceResult::set_ramsnapid(const ::std::string& value) {
  set_has_ramsnapid();
  if (ramsnapid_ == &::google::protobuf::internal::kEmptyString) {
    ramsnapid_ = new ::std::string;
  }
  ramsnapid_->assign(value);
}
inline void SpectrogramInferenceResult::set_ramsnapid(const char* value) {
  set_has_ramsnapid();
  if (ramsnapid_ == &::google::protobuf::internal::kEmptyString) {
    ramsnapid_ = new ::std::string;
  }
  ramsnapid_->assign(value);
}
inline void SpectrogramInferenceResult::set_ramsnapid(const char* value, size_t size) {
  set_has_ramsnapid();
  if (ramsnapid_ == &::google::protobuf::internal::kEmptyString) {
    ramsnapid_ = new ::std::string;
  }
  ramsnapid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpectrogramInferenceResult::mutable_ramsnapid() {
  set_has_ramsnapid();
  if (ramsnapid_ == &::google::protobuf::internal::kEmptyString) {
    ramsnapid_ = new ::std::string;
  }
  return ramsnapid_;
}
inline ::std::string* SpectrogramInferenceResult::release_ramsnapid() {
  clear_has_ramsnapid();
  if (ramsnapid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ramsnapid_;
    ramsnapid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SpectrogramInferenceResult::set_allocated_ramsnapid(::std::string* ramsnapid) {
  if (ramsnapid_ != &::google::protobuf::internal::kEmptyString) {
    delete ramsnapid_;
  }
  if (ramsnapid) {
    set_has_ramsnapid();
    ramsnapid_ = ramsnapid;
  } else {
    clear_has_ramsnapid();
    ramsnapid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string spectrogramFile = 3;
inline bool SpectrogramInferenceResult::has_spectrogramfile() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpectrogramInferenceResult::set_has_spectrogramfile() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpectrogramInferenceResult::clear_has_spectrogramfile() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpectrogramInferenceResult::clear_spectrogramfile() {
  if (spectrogramfile_ != &::google::protobuf::internal::kEmptyString) {
    spectrogramfile_->clear();
  }
  clear_has_spectrogramfile();
}
inline const ::std::string& SpectrogramInferenceResult::spectrogramfile() const {
  return *spectrogramfile_;
}
inline void SpectrogramInferenceResult::set_spectrogramfile(const ::std::string& value) {
  set_has_spectrogramfile();
  if (spectrogramfile_ == &::google::protobuf::internal::kEmptyString) {
    spectrogramfile_ = new ::std::string;
  }
  spectrogramfile_->assign(value);
}
inline void SpectrogramInferenceResult::set_spectrogramfile(const char* value) {
  set_has_spectrogramfile();
  if (spectrogramfile_ == &::google::protobuf::internal::kEmptyString) {
    spectrogramfile_ = new ::std::string;
  }
  spectrogramfile_->assign(value);
}
inline void SpectrogramInferenceResult::set_spectrogramfile(const char* value, size_t size) {
  set_has_spectrogramfile();
  if (spectrogramfile_ == &::google::protobuf::internal::kEmptyString) {
    spectrogramfile_ = new ::std::string;
  }
  spectrogramfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpectrogramInferenceResult::mutable_spectrogramfile() {
  set_has_spectrogramfile();
  if (spectrogramfile_ == &::google::protobuf::internal::kEmptyString) {
    spectrogramfile_ = new ::std::string;
  }
  return spectrogramfile_;
}
inline ::std::string* SpectrogramInferenceResult::release_spectrogramfile() {
  clear_has_spectrogramfile();
  if (spectrogramfile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = spectrogramfile_;
    spectrogramfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SpectrogramInferenceResult::set_allocated_spectrogramfile(::std::string* spectrogramfile) {
  if (spectrogramfile_ != &::google::protobuf::internal::kEmptyString) {
    delete spectrogramfile_;
  }
  if (spectrogramfile) {
    set_has_spectrogramfile();
    spectrogramfile_ = spectrogramfile;
  } else {
    clear_has_spectrogramfile();
    spectrogramfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double centerFrequencyHz = 4;
inline bool SpectrogramInferenceResult::has_centerfrequencyhz() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpectrogramInferenceResult::set_has_centerfrequencyhz() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpectrogramInferenceResult::clear_has_centerfrequencyhz() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpectrogramInferenceResult::clear_centerfrequencyhz() {
  centerfrequencyhz_ = 0;
  clear_has_centerfrequencyhz();
}
inline double SpectrogramInferenceResult::centerfrequencyhz() const {
  return centerfrequencyhz_;
}
inline void SpectrogramInferenceResult::set_centerfrequencyhz(double value) {
  set_has_centerfrequencyhz();
  centerfrequencyhz_ = value;
}

// repeated string labels = 5;
inline int SpectrogramInferenceResult::labels_size() const {
  return labels_.size();
}
inline void SpectrogramInferenceResult::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& SpectrogramInferenceResult::labels(int index) const {
  return labels_.Get(index);
}
inline ::std::string* SpectrogramInferenceResult::mutable_labels(int index) {
  return labels_.Mutable(index);
}
inline void SpectrogramInferenceResult::set_labels(int index, const ::std::string& value) {
  labels_.Mutable(index)->assign(value);
}
inline void SpectrogramInferenceResult::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
}
inline void SpectrogramInferenceResult::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpectrogramInferenceResult::add_labels() {
  return labels_.Add();
}
inline void SpectrogramInferenceResult::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
}
inline void SpectrogramInferenceResult::add_labels(const char* value) {
  labels_.Add()->assign(value);
}
inline void SpectrogramInferenceResult::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SpectrogramInferenceResult::labels() const {
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SpectrogramInferenceResult::mutable_labels() {
  return &labels_;
}

// repeated double scores = 6;
inline int SpectrogramInferenceResult::scores_size() const {
  return scores_.size();
}
inline void SpectrogramInferenceResult::clear_scores() {
  scores_.Clear();
}
inline double SpectrogramInferenceResult::scores(int index) const {
  return scores_.Get(index);
}
inline void SpectrogramInferenceResult::set_scores(int index, double value) {
  scores_.Set(index, value);
}
inline void SpectrogramInferenceResult::add_scores(double value) {
  scores_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
SpectrogramInferenceResult::scores() const {
  return scores_;
}
inline ::google::protobuf::RepeatedField< double >*
SpectrogramInferenceResult::mutable_scores() {
  return &scores_;
}

// optional double scoreThreshold = 7;
inline bool SpectrogramInferenceResult::has_scorethreshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SpectrogramInferenceResult::set_has_scorethreshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SpectrogramInferenceResult::clear_has_scorethreshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SpectrogramInferenceResult::clear_scorethreshold() {
  scorethreshold_ = 0;
  clear_has_scorethreshold();
}
inline double SpectrogramInferenceResult::scorethreshold() const {
  return scorethreshold_;
}
inline void SpectrogramInferenceResult::set_scorethreshold(double value) {
  set_has_scorethreshold();
  scorethreshold_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ai_inference_msg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AiInferenceMessages_2eproto__INCLUDED
