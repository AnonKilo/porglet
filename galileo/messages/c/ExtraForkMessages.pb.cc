// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExtraForkMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ExtraForkMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace extra_fork_msg {

namespace {

const ::google::protobuf::Descriptor* ExtraForkLoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraForkLoad_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExtraForkLoad_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExtraForkTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraForkTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtraForkReset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraForkReset_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtraForkKill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraForkKill_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtraForkClean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraForkClean_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtraForkPoll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraForkPoll_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExtraForkPoll_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExtraForkRaw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraForkRaw_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExtraForkRaw_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExtraForkShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraForkShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtraForkPollRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraForkPollRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtraForkPollResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraForkPollResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ExtraForkMessages_2eproto() {
  protobuf_AddDesc_ExtraForkMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ExtraForkMessages.proto");
  GOOGLE_CHECK(file != NULL);
  ExtraForkLoad_descriptor_ = file->message_type(0);
  static const int ExtraForkLoad_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkLoad, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkLoad, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkLoad, inputport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkLoad, outputport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkLoad, videoport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkLoad, tablefile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkLoad, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkLoad, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkLoad, timedelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkLoad, msgid_),
  };
  ExtraForkLoad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraForkLoad_descriptor_,
      ExtraForkLoad::default_instance_,
      ExtraForkLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkLoad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkLoad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraForkLoad));
  ExtraForkLoad_Status_descriptor_ = ExtraForkLoad_descriptor_->enum_type(0);
  ExtraForkTable_descriptor_ = file->message_type(1);
  static const int ExtraForkTable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkTable, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkTable, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkTable, tablefile_),
  };
  ExtraForkTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraForkTable_descriptor_,
      ExtraForkTable::default_instance_,
      ExtraForkTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraForkTable));
  ExtraForkReset_descriptor_ = file->message_type(2);
  static const int ExtraForkReset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkReset, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkReset, channel_),
  };
  ExtraForkReset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraForkReset_descriptor_,
      ExtraForkReset::default_instance_,
      ExtraForkReset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkReset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkReset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraForkReset));
  ExtraForkKill_descriptor_ = file->message_type(3);
  static const int ExtraForkKill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkKill, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkKill, channel_),
  };
  ExtraForkKill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraForkKill_descriptor_,
      ExtraForkKill::default_instance_,
      ExtraForkKill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkKill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkKill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraForkKill));
  ExtraForkClean_descriptor_ = file->message_type(4);
  static const int ExtraForkClean_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkClean, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkClean, channel_),
  };
  ExtraForkClean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraForkClean_descriptor_,
      ExtraForkClean::default_instance_,
      ExtraForkClean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkClean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkClean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraForkClean));
  ExtraForkPoll_descriptor_ = file->message_type(5);
  static const int ExtraForkPoll_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkPoll, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkPoll, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkPoll, parameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkPoll, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkPoll, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkPoll, msgid_),
  };
  ExtraForkPoll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraForkPoll_descriptor_,
      ExtraForkPoll::default_instance_,
      ExtraForkPoll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkPoll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkPoll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraForkPoll));
  ExtraForkPoll_Status_descriptor_ = ExtraForkPoll_descriptor_->enum_type(0);
  ExtraForkRaw_descriptor_ = file->message_type(6);
  static const int ExtraForkRaw_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkRaw, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkRaw, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkRaw, parameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkRaw, resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkRaw, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkRaw, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkRaw, msgid_),
  };
  ExtraForkRaw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraForkRaw_descriptor_,
      ExtraForkRaw::default_instance_,
      ExtraForkRaw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkRaw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkRaw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraForkRaw));
  ExtraForkRaw_Status_descriptor_ = ExtraForkRaw_descriptor_->enum_type(0);
  ExtraForkShow_descriptor_ = file->message_type(7);
  static const int ExtraForkShow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkShow, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkShow, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkShow, show_),
  };
  ExtraForkShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraForkShow_descriptor_,
      ExtraForkShow::default_instance_,
      ExtraForkShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraForkShow));
  ExtraForkPollRequest_descriptor_ = file->message_type(8);
  static const int ExtraForkPollRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkPollRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkPollRequest, properties_),
  };
  ExtraForkPollRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraForkPollRequest_descriptor_,
      ExtraForkPollRequest::default_instance_,
      ExtraForkPollRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkPollRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkPollRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraForkPollRequest));
  ExtraForkPollResponse_descriptor_ = file->message_type(9);
  static const int ExtraForkPollResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkPollResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkPollResponse, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkPollResponse, request_),
  };
  ExtraForkPollResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraForkPollResponse_descriptor_,
      ExtraForkPollResponse::default_instance_,
      ExtraForkPollResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkPollResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkPollResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraForkPollResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ExtraForkMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraForkLoad_descriptor_, &ExtraForkLoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraForkTable_descriptor_, &ExtraForkTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraForkReset_descriptor_, &ExtraForkReset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraForkKill_descriptor_, &ExtraForkKill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraForkClean_descriptor_, &ExtraForkClean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraForkPoll_descriptor_, &ExtraForkPoll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraForkRaw_descriptor_, &ExtraForkRaw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraForkShow_descriptor_, &ExtraForkShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraForkPollRequest_descriptor_, &ExtraForkPollRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraForkPollResponse_descriptor_, &ExtraForkPollResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ExtraForkMessages_2eproto() {
  delete ExtraForkLoad::default_instance_;
  delete ExtraForkLoad_reflection_;
  delete ExtraForkLoad::_default_msgname_;
  delete ExtraForkTable::default_instance_;
  delete ExtraForkTable_reflection_;
  delete ExtraForkTable::_default_msgname_;
  delete ExtraForkReset::default_instance_;
  delete ExtraForkReset_reflection_;
  delete ExtraForkReset::_default_msgname_;
  delete ExtraForkKill::default_instance_;
  delete ExtraForkKill_reflection_;
  delete ExtraForkKill::_default_msgname_;
  delete ExtraForkClean::default_instance_;
  delete ExtraForkClean_reflection_;
  delete ExtraForkClean::_default_msgname_;
  delete ExtraForkPoll::default_instance_;
  delete ExtraForkPoll_reflection_;
  delete ExtraForkPoll::_default_msgname_;
  delete ExtraForkRaw::default_instance_;
  delete ExtraForkRaw_reflection_;
  delete ExtraForkRaw::_default_msgname_;
  delete ExtraForkShow::default_instance_;
  delete ExtraForkShow_reflection_;
  delete ExtraForkShow::_default_msgname_;
  delete ExtraForkPollRequest::default_instance_;
  delete ExtraForkPollRequest_reflection_;
  delete ExtraForkPollRequest::_default_msgname_;
  delete ExtraForkPollResponse::default_instance_;
  delete ExtraForkPollResponse_reflection_;
  delete ExtraForkPollResponse::_default_msgname_;
}

void protobuf_AddDesc_ExtraForkMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ExtraForkMessages.proto\022\016extra_fork_ms"
    "g\"\256\002\n\rExtraForkLoad\022 \n\007msgName\030\001 \001(\t:\017EX"
    "TRA_FORK_LOAD\022\017\n\007channel\030\002 \001(\005\022\021\n\tinputP"
    "ort\030\003 \001(\005\022\022\n\noutputPort\030\004 \001(\005\022\021\n\tvideoPo"
    "rt\030\005 \001(\005\022\021\n\ttableFile\030\006 \001(\t\022\014\n\004show\030\007 \001("
    "\010\0224\n\006status\030\010 \001(\0162$.extra_fork_msg.Extra"
    "ForkLoad.Status\022\021\n\ttimedelta\030\t \001(\001\022\r\n\005ms"
    "gID\030\n \001(\005\"7\n\006Status\022\023\n\006FAILED\020\377\377\377\377\377\377\377\377\377\001"
    "\022\013\n\007REQUEST\020\000\022\013\n\007SUCCESS\020\001\"W\n\016ExtraForkT"
    "able\022!\n\007msgName\030\001 \001(\t:\020EXTRA_FORK_TABLE\022"
    "\017\n\007channel\030\002 \001(\005\022\021\n\ttableFile\030\003 \001(\t\"D\n\016E"
    "xtraForkReset\022!\n\007msgName\030\001 \001(\t:\020EXTRA_FO"
    "RK_RESET\022\017\n\007channel\030\002 \001(\005\"B\n\rExtraForkKi"
    "ll\022 \n\007msgName\030\001 \001(\t:\017EXTRA_FORK_KILL\022\017\n\007"
    "channel\030\002 \001(\005\"D\n\016ExtraForkClean\022!\n\007msgNa"
    "me\030\001 \001(\t:\020EXTRA_FORK_CLEAN\022\017\n\007channel\030\002 "
    "\001(\005\"\342\001\n\rExtraForkPoll\022 \n\007msgName\030\001 \001(\t:\017"
    "EXTRA_FORK_POLL\022\017\n\007channel\030\002 \001(\005\022\021\n\tpara"
    "meter\030\003 \001(\t\022\r\n\005value\030\004 \001(\002\0224\n\006status\030\005 \001"
    "(\0162$.extra_fork_msg.ExtraForkPoll.Status"
    "\022\r\n\005msgID\030\006 \001(\005\"7\n\006Status\022\023\n\006FAILED\020\377\377\377\377"
    "\377\377\377\377\377\001\022\013\n\007REQUEST\020\000\022\013\n\007SUCCESS\020\001\"\355\001\n\014Ext"
    "raForkRaw\022\037\n\007msgName\030\001 \001(\t:\016EXTRA_FORK_R"
    "AW\022\017\n\007channel\030\002 \001(\005\022\021\n\tparameter\030\003 \001(\t\022\014"
    "\n\004resp\030\004 \001(\t\022\r\n\005value\030\005 \001(\002\0223\n\006status\030\006 "
    "\001(\0162#.extra_fork_msg.ExtraForkRaw.Status"
    "\022\r\n\005msgID\030\007 \001(\005\"7\n\006Status\022\023\n\006FAILED\020\377\377\377\377"
    "\377\377\377\377\377\001\022\013\n\007REQUEST\020\000\022\013\n\007SUCCESS\020\001\"P\n\rExtr"
    "aForkShow\022 \n\007msgName\030\001 \001(\t:\017EXTRA_FORK_S"
    "HOW\022\017\n\007channel\030\002 \001(\005\022\014\n\004show\030\003 \001(\010\"T\n\024Ex"
    "traForkPollRequest\022(\n\007msgName\030\001 \001(\t:\027EXT"
    "RA_FORK_POLL_REQUEST\022\022\n\nproperties\030\002 \003(\t"
    "\"\215\001\n\025ExtraForkPollResponse\022)\n\007msgName\030\001 "
    "\001(\t:\030EXTRA_FORK_POLL_RESPONSE\022\022\n\npropert"
    "ies\030\002 \003(\t\0225\n\007request\030\003 \001(\0132$.extra_fork_"
    "msg.ExtraForkPollRequestB\025\n\023fv.protos.ke"
    "psvisor", 1447);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ExtraForkMessages.proto", &protobuf_RegisterTypes);
  ExtraForkLoad::_default_msgname_ =
      new ::std::string("EXTRA_FORK_LOAD", 15);
  ExtraForkLoad::default_instance_ = new ExtraForkLoad();
  ExtraForkTable::_default_msgname_ =
      new ::std::string("EXTRA_FORK_TABLE", 16);
  ExtraForkTable::default_instance_ = new ExtraForkTable();
  ExtraForkReset::_default_msgname_ =
      new ::std::string("EXTRA_FORK_RESET", 16);
  ExtraForkReset::default_instance_ = new ExtraForkReset();
  ExtraForkKill::_default_msgname_ =
      new ::std::string("EXTRA_FORK_KILL", 15);
  ExtraForkKill::default_instance_ = new ExtraForkKill();
  ExtraForkClean::_default_msgname_ =
      new ::std::string("EXTRA_FORK_CLEAN", 16);
  ExtraForkClean::default_instance_ = new ExtraForkClean();
  ExtraForkPoll::_default_msgname_ =
      new ::std::string("EXTRA_FORK_POLL", 15);
  ExtraForkPoll::default_instance_ = new ExtraForkPoll();
  ExtraForkRaw::_default_msgname_ =
      new ::std::string("EXTRA_FORK_RAW", 14);
  ExtraForkRaw::default_instance_ = new ExtraForkRaw();
  ExtraForkShow::_default_msgname_ =
      new ::std::string("EXTRA_FORK_SHOW", 15);
  ExtraForkShow::default_instance_ = new ExtraForkShow();
  ExtraForkPollRequest::_default_msgname_ =
      new ::std::string("EXTRA_FORK_POLL_REQUEST", 23);
  ExtraForkPollRequest::default_instance_ = new ExtraForkPollRequest();
  ExtraForkPollResponse::_default_msgname_ =
      new ::std::string("EXTRA_FORK_POLL_RESPONSE", 24);
  ExtraForkPollResponse::default_instance_ = new ExtraForkPollResponse();
  ExtraForkLoad::default_instance_->InitAsDefaultInstance();
  ExtraForkTable::default_instance_->InitAsDefaultInstance();
  ExtraForkReset::default_instance_->InitAsDefaultInstance();
  ExtraForkKill::default_instance_->InitAsDefaultInstance();
  ExtraForkClean::default_instance_->InitAsDefaultInstance();
  ExtraForkPoll::default_instance_->InitAsDefaultInstance();
  ExtraForkRaw::default_instance_->InitAsDefaultInstance();
  ExtraForkShow::default_instance_->InitAsDefaultInstance();
  ExtraForkPollRequest::default_instance_->InitAsDefaultInstance();
  ExtraForkPollResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ExtraForkMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ExtraForkMessages_2eproto {
  StaticDescriptorInitializer_ExtraForkMessages_2eproto() {
    protobuf_AddDesc_ExtraForkMessages_2eproto();
  }
} static_descriptor_initializer_ExtraForkMessages_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ExtraForkLoad_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraForkLoad_Status_descriptor_;
}
bool ExtraForkLoad_Status_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExtraForkLoad_Status ExtraForkLoad::FAILED;
const ExtraForkLoad_Status ExtraForkLoad::REQUEST;
const ExtraForkLoad_Status ExtraForkLoad::SUCCESS;
const ExtraForkLoad_Status ExtraForkLoad::Status_MIN;
const ExtraForkLoad_Status ExtraForkLoad::Status_MAX;
const int ExtraForkLoad::Status_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* ExtraForkLoad::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ExtraForkLoad::kMsgNameFieldNumber;
const int ExtraForkLoad::kChannelFieldNumber;
const int ExtraForkLoad::kInputPortFieldNumber;
const int ExtraForkLoad::kOutputPortFieldNumber;
const int ExtraForkLoad::kVideoPortFieldNumber;
const int ExtraForkLoad::kTableFileFieldNumber;
const int ExtraForkLoad::kShowFieldNumber;
const int ExtraForkLoad::kStatusFieldNumber;
const int ExtraForkLoad::kTimedeltaFieldNumber;
const int ExtraForkLoad::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ExtraForkLoad::ExtraForkLoad()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtraForkLoad::InitAsDefaultInstance() {
}

ExtraForkLoad::ExtraForkLoad(const ExtraForkLoad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraForkLoad::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  inputport_ = 0;
  outputport_ = 0;
  videoport_ = 0;
  tablefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  show_ = false;
  status_ = -1;
  timedelta_ = 0;
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraForkLoad::~ExtraForkLoad() {
  SharedDtor();
}

void ExtraForkLoad::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (tablefile_ != &::google::protobuf::internal::kEmptyString) {
    delete tablefile_;
  }
  if (this != default_instance_) {
  }
}

void ExtraForkLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraForkLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraForkLoad_descriptor_;
}

const ExtraForkLoad& ExtraForkLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExtraForkMessages_2eproto();
  return *default_instance_;
}

ExtraForkLoad* ExtraForkLoad::default_instance_ = NULL;

ExtraForkLoad* ExtraForkLoad::New() const {
  return new ExtraForkLoad;
}

void ExtraForkLoad::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    inputport_ = 0;
    outputport_ = 0;
    videoport_ = 0;
    if (has_tablefile()) {
      if (tablefile_ != &::google::protobuf::internal::kEmptyString) {
        tablefile_->clear();
      }
    }
    show_ = false;
    status_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    timedelta_ = 0;
    msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraForkLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EXTRA_FORK_LOAD"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inputPort;
        break;
      }

      // optional int32 inputPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inputport_)));
          set_has_inputport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outputPort;
        break;
      }

      // optional int32 outputPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outputPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outputport_)));
          set_has_outputport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_videoPort;
        break;
      }

      // optional int32 videoPort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_videoPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoport_)));
          set_has_videoport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tableFile;
        break;
      }

      // optional string tableFile = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablefile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablefile().data(), this->tablefile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_show;
        break;
      }

      // optional bool show = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // optional .extra_fork_msg.ExtraForkLoad.Status status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extra_fork_msg::ExtraForkLoad_Status_IsValid(value)) {
            set_status(static_cast< ::extra_fork_msg::ExtraForkLoad_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_timedelta;
        break;
      }

      // optional double timedelta = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timedelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timedelta_)));
          set_has_timedelta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_msgID;
        break;
      }

      // optional int32 msgID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraForkLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_LOAD"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional int32 inputPort = 3;
  if (has_inputport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inputport(), output);
  }

  // optional int32 outputPort = 4;
  if (has_outputport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outputport(), output);
  }

  // optional int32 videoPort = 5;
  if (has_videoport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->videoport(), output);
  }

  // optional string tableFile = 6;
  if (has_tablefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablefile().data(), this->tablefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->tablefile(), output);
  }

  // optional bool show = 7;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->show(), output);
  }

  // optional .extra_fork_msg.ExtraForkLoad.Status status = 8;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->status(), output);
  }

  // optional double timedelta = 9;
  if (has_timedelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->timedelta(), output);
  }

  // optional int32 msgID = 10;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtraForkLoad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_LOAD"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional int32 inputPort = 3;
  if (has_inputport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inputport(), target);
  }

  // optional int32 outputPort = 4;
  if (has_outputport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outputport(), target);
  }

  // optional int32 videoPort = 5;
  if (has_videoport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->videoport(), target);
  }

  // optional string tableFile = 6;
  if (has_tablefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablefile().data(), this->tablefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tablefile(), target);
  }

  // optional bool show = 7;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->show(), target);
  }

  // optional .extra_fork_msg.ExtraForkLoad.Status status = 8;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->status(), target);
  }

  // optional double timedelta = 9;
  if (has_timedelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->timedelta(), target);
  }

  // optional int32 msgID = 10;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtraForkLoad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EXTRA_FORK_LOAD"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 inputPort = 3;
    if (has_inputport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inputport());
    }

    // optional int32 outputPort = 4;
    if (has_outputport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outputport());
    }

    // optional int32 videoPort = 5;
    if (has_videoport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videoport());
    }

    // optional string tableFile = 6;
    if (has_tablefile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablefile());
    }

    // optional bool show = 7;
    if (has_show()) {
      total_size += 1 + 1;
    }

    // optional .extra_fork_msg.ExtraForkLoad.Status status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double timedelta = 9;
    if (has_timedelta()) {
      total_size += 1 + 8;
    }

    // optional int32 msgID = 10;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraForkLoad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraForkLoad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraForkLoad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraForkLoad::MergeFrom(const ExtraForkLoad& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_inputport()) {
      set_inputport(from.inputport());
    }
    if (from.has_outputport()) {
      set_outputport(from.outputport());
    }
    if (from.has_videoport()) {
      set_videoport(from.videoport());
    }
    if (from.has_tablefile()) {
      set_tablefile(from.tablefile());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timedelta()) {
      set_timedelta(from.timedelta());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraForkLoad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraForkLoad::CopyFrom(const ExtraForkLoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraForkLoad::IsInitialized() const {

  return true;
}

void ExtraForkLoad::Swap(ExtraForkLoad* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(inputport_, other->inputport_);
    std::swap(outputport_, other->outputport_);
    std::swap(videoport_, other->videoport_);
    std::swap(tablefile_, other->tablefile_);
    std::swap(show_, other->show_);
    std::swap(status_, other->status_);
    std::swap(timedelta_, other->timedelta_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraForkLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraForkLoad_descriptor_;
  metadata.reflection = ExtraForkLoad_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ExtraForkTable::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ExtraForkTable::kMsgNameFieldNumber;
const int ExtraForkTable::kChannelFieldNumber;
const int ExtraForkTable::kTableFileFieldNumber;
#endif  // !_MSC_VER

ExtraForkTable::ExtraForkTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtraForkTable::InitAsDefaultInstance() {
}

ExtraForkTable::ExtraForkTable(const ExtraForkTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraForkTable::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  tablefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraForkTable::~ExtraForkTable() {
  SharedDtor();
}

void ExtraForkTable::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (tablefile_ != &::google::protobuf::internal::kEmptyString) {
    delete tablefile_;
  }
  if (this != default_instance_) {
  }
}

void ExtraForkTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraForkTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraForkTable_descriptor_;
}

const ExtraForkTable& ExtraForkTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExtraForkMessages_2eproto();
  return *default_instance_;
}

ExtraForkTable* ExtraForkTable::default_instance_ = NULL;

ExtraForkTable* ExtraForkTable::New() const {
  return new ExtraForkTable;
}

void ExtraForkTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    if (has_tablefile()) {
      if (tablefile_ != &::google::protobuf::internal::kEmptyString) {
        tablefile_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraForkTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EXTRA_FORK_TABLE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tableFile;
        break;
      }

      // optional string tableFile = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablefile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablefile().data(), this->tablefile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraForkTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_TABLE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional string tableFile = 3;
  if (has_tablefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablefile().data(), this->tablefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tablefile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtraForkTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_TABLE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional string tableFile = 3;
  if (has_tablefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablefile().data(), this->tablefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tablefile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtraForkTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EXTRA_FORK_TABLE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional string tableFile = 3;
    if (has_tablefile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablefile());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraForkTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraForkTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraForkTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraForkTable::MergeFrom(const ExtraForkTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_tablefile()) {
      set_tablefile(from.tablefile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraForkTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraForkTable::CopyFrom(const ExtraForkTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraForkTable::IsInitialized() const {

  return true;
}

void ExtraForkTable::Swap(ExtraForkTable* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(tablefile_, other->tablefile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraForkTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraForkTable_descriptor_;
  metadata.reflection = ExtraForkTable_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ExtraForkReset::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ExtraForkReset::kMsgNameFieldNumber;
const int ExtraForkReset::kChannelFieldNumber;
#endif  // !_MSC_VER

ExtraForkReset::ExtraForkReset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtraForkReset::InitAsDefaultInstance() {
}

ExtraForkReset::ExtraForkReset(const ExtraForkReset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraForkReset::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraForkReset::~ExtraForkReset() {
  SharedDtor();
}

void ExtraForkReset::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ExtraForkReset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraForkReset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraForkReset_descriptor_;
}

const ExtraForkReset& ExtraForkReset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExtraForkMessages_2eproto();
  return *default_instance_;
}

ExtraForkReset* ExtraForkReset::default_instance_ = NULL;

ExtraForkReset* ExtraForkReset::New() const {
  return new ExtraForkReset;
}

void ExtraForkReset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraForkReset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EXTRA_FORK_RESET"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraForkReset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_RESET"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtraForkReset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_RESET"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtraForkReset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EXTRA_FORK_RESET"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraForkReset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraForkReset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraForkReset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraForkReset::MergeFrom(const ExtraForkReset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraForkReset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraForkReset::CopyFrom(const ExtraForkReset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraForkReset::IsInitialized() const {

  return true;
}

void ExtraForkReset::Swap(ExtraForkReset* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraForkReset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraForkReset_descriptor_;
  metadata.reflection = ExtraForkReset_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ExtraForkKill::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ExtraForkKill::kMsgNameFieldNumber;
const int ExtraForkKill::kChannelFieldNumber;
#endif  // !_MSC_VER

ExtraForkKill::ExtraForkKill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtraForkKill::InitAsDefaultInstance() {
}

ExtraForkKill::ExtraForkKill(const ExtraForkKill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraForkKill::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraForkKill::~ExtraForkKill() {
  SharedDtor();
}

void ExtraForkKill::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ExtraForkKill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraForkKill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraForkKill_descriptor_;
}

const ExtraForkKill& ExtraForkKill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExtraForkMessages_2eproto();
  return *default_instance_;
}

ExtraForkKill* ExtraForkKill::default_instance_ = NULL;

ExtraForkKill* ExtraForkKill::New() const {
  return new ExtraForkKill;
}

void ExtraForkKill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraForkKill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EXTRA_FORK_KILL"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraForkKill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_KILL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtraForkKill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_KILL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtraForkKill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EXTRA_FORK_KILL"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraForkKill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraForkKill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraForkKill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraForkKill::MergeFrom(const ExtraForkKill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraForkKill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraForkKill::CopyFrom(const ExtraForkKill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraForkKill::IsInitialized() const {

  return true;
}

void ExtraForkKill::Swap(ExtraForkKill* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraForkKill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraForkKill_descriptor_;
  metadata.reflection = ExtraForkKill_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ExtraForkClean::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ExtraForkClean::kMsgNameFieldNumber;
const int ExtraForkClean::kChannelFieldNumber;
#endif  // !_MSC_VER

ExtraForkClean::ExtraForkClean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtraForkClean::InitAsDefaultInstance() {
}

ExtraForkClean::ExtraForkClean(const ExtraForkClean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraForkClean::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraForkClean::~ExtraForkClean() {
  SharedDtor();
}

void ExtraForkClean::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ExtraForkClean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraForkClean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraForkClean_descriptor_;
}

const ExtraForkClean& ExtraForkClean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExtraForkMessages_2eproto();
  return *default_instance_;
}

ExtraForkClean* ExtraForkClean::default_instance_ = NULL;

ExtraForkClean* ExtraForkClean::New() const {
  return new ExtraForkClean;
}

void ExtraForkClean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraForkClean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EXTRA_FORK_CLEAN"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraForkClean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_CLEAN"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtraForkClean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_CLEAN"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtraForkClean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EXTRA_FORK_CLEAN"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraForkClean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraForkClean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraForkClean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraForkClean::MergeFrom(const ExtraForkClean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraForkClean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraForkClean::CopyFrom(const ExtraForkClean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraForkClean::IsInitialized() const {

  return true;
}

void ExtraForkClean::Swap(ExtraForkClean* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraForkClean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraForkClean_descriptor_;
  metadata.reflection = ExtraForkClean_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ExtraForkPoll_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraForkPoll_Status_descriptor_;
}
bool ExtraForkPoll_Status_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExtraForkPoll_Status ExtraForkPoll::FAILED;
const ExtraForkPoll_Status ExtraForkPoll::REQUEST;
const ExtraForkPoll_Status ExtraForkPoll::SUCCESS;
const ExtraForkPoll_Status ExtraForkPoll::Status_MIN;
const ExtraForkPoll_Status ExtraForkPoll::Status_MAX;
const int ExtraForkPoll::Status_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* ExtraForkPoll::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ExtraForkPoll::kMsgNameFieldNumber;
const int ExtraForkPoll::kChannelFieldNumber;
const int ExtraForkPoll::kParameterFieldNumber;
const int ExtraForkPoll::kValueFieldNumber;
const int ExtraForkPoll::kStatusFieldNumber;
const int ExtraForkPoll::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ExtraForkPoll::ExtraForkPoll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtraForkPoll::InitAsDefaultInstance() {
}

ExtraForkPoll::ExtraForkPoll(const ExtraForkPoll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraForkPoll::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  status_ = -1;
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraForkPoll::~ExtraForkPoll() {
  SharedDtor();
}

void ExtraForkPoll::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (parameter_ != &::google::protobuf::internal::kEmptyString) {
    delete parameter_;
  }
  if (this != default_instance_) {
  }
}

void ExtraForkPoll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraForkPoll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraForkPoll_descriptor_;
}

const ExtraForkPoll& ExtraForkPoll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExtraForkMessages_2eproto();
  return *default_instance_;
}

ExtraForkPoll* ExtraForkPoll::default_instance_ = NULL;

ExtraForkPoll* ExtraForkPoll::New() const {
  return new ExtraForkPoll;
}

void ExtraForkPoll::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    if (has_parameter()) {
      if (parameter_ != &::google::protobuf::internal::kEmptyString) {
        parameter_->clear();
      }
    }
    value_ = 0;
    status_ = -1;
    msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraForkPoll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EXTRA_FORK_POLL"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parameter;
        break;
      }

      // optional string parameter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parameter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parameter().data(), this->parameter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_value;
        break;
      }

      // optional float value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional .extra_fork_msg.ExtraForkPoll.Status status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extra_fork_msg::ExtraForkPoll_Status_IsValid(value)) {
            set_status(static_cast< ::extra_fork_msg::ExtraForkPoll_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_msgID;
        break;
      }

      // optional int32 msgID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraForkPoll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_POLL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional string parameter = 3;
  if (has_parameter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parameter().data(), this->parameter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->parameter(), output);
  }

  // optional float value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->value(), output);
  }

  // optional .extra_fork_msg.ExtraForkPoll.Status status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // optional int32 msgID = 6;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtraForkPoll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_POLL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional string parameter = 3;
  if (has_parameter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parameter().data(), this->parameter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parameter(), target);
  }

  // optional float value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->value(), target);
  }

  // optional .extra_fork_msg.ExtraForkPoll.Status status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // optional int32 msgID = 6;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtraForkPoll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EXTRA_FORK_POLL"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional string parameter = 3;
    if (has_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parameter());
    }

    // optional float value = 4;
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional .extra_fork_msg.ExtraForkPoll.Status status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 msgID = 6;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraForkPoll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraForkPoll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraForkPoll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraForkPoll::MergeFrom(const ExtraForkPoll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_parameter()) {
      set_parameter(from.parameter());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraForkPoll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraForkPoll::CopyFrom(const ExtraForkPoll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraForkPoll::IsInitialized() const {

  return true;
}

void ExtraForkPoll::Swap(ExtraForkPoll* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(parameter_, other->parameter_);
    std::swap(value_, other->value_);
    std::swap(status_, other->status_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraForkPoll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraForkPoll_descriptor_;
  metadata.reflection = ExtraForkPoll_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ExtraForkRaw_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraForkRaw_Status_descriptor_;
}
bool ExtraForkRaw_Status_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExtraForkRaw_Status ExtraForkRaw::FAILED;
const ExtraForkRaw_Status ExtraForkRaw::REQUEST;
const ExtraForkRaw_Status ExtraForkRaw::SUCCESS;
const ExtraForkRaw_Status ExtraForkRaw::Status_MIN;
const ExtraForkRaw_Status ExtraForkRaw::Status_MAX;
const int ExtraForkRaw::Status_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* ExtraForkRaw::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ExtraForkRaw::kMsgNameFieldNumber;
const int ExtraForkRaw::kChannelFieldNumber;
const int ExtraForkRaw::kParameterFieldNumber;
const int ExtraForkRaw::kRespFieldNumber;
const int ExtraForkRaw::kValueFieldNumber;
const int ExtraForkRaw::kStatusFieldNumber;
const int ExtraForkRaw::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ExtraForkRaw::ExtraForkRaw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtraForkRaw::InitAsDefaultInstance() {
}

ExtraForkRaw::ExtraForkRaw(const ExtraForkRaw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraForkRaw::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  status_ = -1;
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraForkRaw::~ExtraForkRaw() {
  SharedDtor();
}

void ExtraForkRaw::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (parameter_ != &::google::protobuf::internal::kEmptyString) {
    delete parameter_;
  }
  if (resp_ != &::google::protobuf::internal::kEmptyString) {
    delete resp_;
  }
  if (this != default_instance_) {
  }
}

void ExtraForkRaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraForkRaw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraForkRaw_descriptor_;
}

const ExtraForkRaw& ExtraForkRaw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExtraForkMessages_2eproto();
  return *default_instance_;
}

ExtraForkRaw* ExtraForkRaw::default_instance_ = NULL;

ExtraForkRaw* ExtraForkRaw::New() const {
  return new ExtraForkRaw;
}

void ExtraForkRaw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    if (has_parameter()) {
      if (parameter_ != &::google::protobuf::internal::kEmptyString) {
        parameter_->clear();
      }
    }
    if (has_resp()) {
      if (resp_ != &::google::protobuf::internal::kEmptyString) {
        resp_->clear();
      }
    }
    value_ = 0;
    status_ = -1;
    msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraForkRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EXTRA_FORK_RAW"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parameter;
        break;
      }

      // optional string parameter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parameter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parameter().data(), this->parameter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resp;
        break;
      }

      // optional string resp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resp().data(), this->resp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_value;
        break;
      }

      // optional float value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional .extra_fork_msg.ExtraForkRaw.Status status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extra_fork_msg::ExtraForkRaw_Status_IsValid(value)) {
            set_status(static_cast< ::extra_fork_msg::ExtraForkRaw_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_msgID;
        break;
      }

      // optional int32 msgID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraForkRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_RAW"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional string parameter = 3;
  if (has_parameter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parameter().data(), this->parameter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->parameter(), output);
  }

  // optional string resp = 4;
  if (has_resp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resp().data(), this->resp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->resp(), output);
  }

  // optional float value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->value(), output);
  }

  // optional .extra_fork_msg.ExtraForkRaw.Status status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  // optional int32 msgID = 7;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtraForkRaw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_RAW"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional string parameter = 3;
  if (has_parameter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parameter().data(), this->parameter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parameter(), target);
  }

  // optional string resp = 4;
  if (has_resp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resp().data(), this->resp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->resp(), target);
  }

  // optional float value = 5;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->value(), target);
  }

  // optional .extra_fork_msg.ExtraForkRaw.Status status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  // optional int32 msgID = 7;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtraForkRaw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EXTRA_FORK_RAW"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional string parameter = 3;
    if (has_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parameter());
    }

    // optional string resp = 4;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resp());
    }

    // optional float value = 5;
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional .extra_fork_msg.ExtraForkRaw.Status status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 msgID = 7;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraForkRaw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraForkRaw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraForkRaw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraForkRaw::MergeFrom(const ExtraForkRaw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_parameter()) {
      set_parameter(from.parameter());
    }
    if (from.has_resp()) {
      set_resp(from.resp());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraForkRaw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraForkRaw::CopyFrom(const ExtraForkRaw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraForkRaw::IsInitialized() const {

  return true;
}

void ExtraForkRaw::Swap(ExtraForkRaw* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(parameter_, other->parameter_);
    std::swap(resp_, other->resp_);
    std::swap(value_, other->value_);
    std::swap(status_, other->status_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraForkRaw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraForkRaw_descriptor_;
  metadata.reflection = ExtraForkRaw_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ExtraForkShow::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ExtraForkShow::kMsgNameFieldNumber;
const int ExtraForkShow::kChannelFieldNumber;
const int ExtraForkShow::kShowFieldNumber;
#endif  // !_MSC_VER

ExtraForkShow::ExtraForkShow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtraForkShow::InitAsDefaultInstance() {
}

ExtraForkShow::ExtraForkShow(const ExtraForkShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraForkShow::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  show_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraForkShow::~ExtraForkShow() {
  SharedDtor();
}

void ExtraForkShow::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ExtraForkShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraForkShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraForkShow_descriptor_;
}

const ExtraForkShow& ExtraForkShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExtraForkMessages_2eproto();
  return *default_instance_;
}

ExtraForkShow* ExtraForkShow::default_instance_ = NULL;

ExtraForkShow* ExtraForkShow::New() const {
  return new ExtraForkShow;
}

void ExtraForkShow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    show_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraForkShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EXTRA_FORK_SHOW"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show;
        break;
      }

      // optional bool show = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraForkShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_SHOW"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional bool show = 3;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->show(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtraForkShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_SHOW"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional bool show = 3;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->show(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtraForkShow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EXTRA_FORK_SHOW"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional bool show = 3;
    if (has_show()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraForkShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraForkShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraForkShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraForkShow::MergeFrom(const ExtraForkShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraForkShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraForkShow::CopyFrom(const ExtraForkShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraForkShow::IsInitialized() const {

  return true;
}

void ExtraForkShow::Swap(ExtraForkShow* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(show_, other->show_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraForkShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraForkShow_descriptor_;
  metadata.reflection = ExtraForkShow_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ExtraForkPollRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ExtraForkPollRequest::kMsgNameFieldNumber;
const int ExtraForkPollRequest::kPropertiesFieldNumber;
#endif  // !_MSC_VER

ExtraForkPollRequest::ExtraForkPollRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtraForkPollRequest::InitAsDefaultInstance() {
}

ExtraForkPollRequest::ExtraForkPollRequest(const ExtraForkPollRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraForkPollRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraForkPollRequest::~ExtraForkPollRequest() {
  SharedDtor();
}

void ExtraForkPollRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ExtraForkPollRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraForkPollRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraForkPollRequest_descriptor_;
}

const ExtraForkPollRequest& ExtraForkPollRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExtraForkMessages_2eproto();
  return *default_instance_;
}

ExtraForkPollRequest* ExtraForkPollRequest::default_instance_ = NULL;

ExtraForkPollRequest* ExtraForkPollRequest::New() const {
  return new ExtraForkPollRequest;
}

void ExtraForkPollRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraForkPollRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EXTRA_FORK_POLL_REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_properties;
        break;
      }

      // repeated string properties = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_properties()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->properties(this->properties_size() - 1).data(),
            this->properties(this->properties_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_properties;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraForkPollRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_POLL_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated string properties = 2;
  for (int i = 0; i < this->properties_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->properties(i).data(), this->properties(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->properties(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtraForkPollRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_POLL_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated string properties = 2;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->properties(i).data(), this->properties(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->properties(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtraForkPollRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EXTRA_FORK_POLL_REQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  // repeated string properties = 2;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->properties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraForkPollRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraForkPollRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraForkPollRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraForkPollRequest::MergeFrom(const ExtraForkPollRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraForkPollRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraForkPollRequest::CopyFrom(const ExtraForkPollRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraForkPollRequest::IsInitialized() const {

  return true;
}

void ExtraForkPollRequest::Swap(ExtraForkPollRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    properties_.Swap(&other->properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraForkPollRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraForkPollRequest_descriptor_;
  metadata.reflection = ExtraForkPollRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ExtraForkPollResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ExtraForkPollResponse::kMsgNameFieldNumber;
const int ExtraForkPollResponse::kPropertiesFieldNumber;
const int ExtraForkPollResponse::kRequestFieldNumber;
#endif  // !_MSC_VER

ExtraForkPollResponse::ExtraForkPollResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtraForkPollResponse::InitAsDefaultInstance() {
  request_ = const_cast< ::extra_fork_msg::ExtraForkPollRequest*>(&::extra_fork_msg::ExtraForkPollRequest::default_instance());
}

ExtraForkPollResponse::ExtraForkPollResponse(const ExtraForkPollResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraForkPollResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraForkPollResponse::~ExtraForkPollResponse() {
  SharedDtor();
}

void ExtraForkPollResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete request_;
  }
}

void ExtraForkPollResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraForkPollResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraForkPollResponse_descriptor_;
}

const ExtraForkPollResponse& ExtraForkPollResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExtraForkMessages_2eproto();
  return *default_instance_;
}

ExtraForkPollResponse* ExtraForkPollResponse::default_instance_ = NULL;

ExtraForkPollResponse* ExtraForkPollResponse::New() const {
  return new ExtraForkPollResponse;
}

void ExtraForkPollResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_request()) {
      if (request_ != NULL) request_->::extra_fork_msg::ExtraForkPollRequest::Clear();
    }
  }
  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraForkPollResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EXTRA_FORK_POLL_RESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_properties;
        break;
      }

      // repeated string properties = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_properties()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->properties(this->properties_size() - 1).data(),
            this->properties(this->properties_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_properties;
        if (input->ExpectTag(26)) goto parse_request;
        break;
      }

      // optional .extra_fork_msg.ExtraForkPollRequest request = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraForkPollResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_POLL_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated string properties = 2;
  for (int i = 0; i < this->properties_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->properties(i).data(), this->properties(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->properties(i), output);
  }

  // optional .extra_fork_msg.ExtraForkPollRequest request = 3;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtraForkPollResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_POLL_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated string properties = 2;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->properties(i).data(), this->properties(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->properties(i), target);
  }

  // optional .extra_fork_msg.ExtraForkPollRequest request = 3;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtraForkPollResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EXTRA_FORK_POLL_RESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .extra_fork_msg.ExtraForkPollRequest request = 3;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

  }
  // repeated string properties = 2;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->properties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraForkPollResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraForkPollResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraForkPollResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraForkPollResponse::MergeFrom(const ExtraForkPollResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_request()) {
      mutable_request()->::extra_fork_msg::ExtraForkPollRequest::MergeFrom(from.request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraForkPollResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraForkPollResponse::CopyFrom(const ExtraForkPollResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraForkPollResponse::IsInitialized() const {

  return true;
}

void ExtraForkPollResponse::Swap(ExtraForkPollResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    properties_.Swap(&other->properties_);
    std::swap(request_, other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraForkPollResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraForkPollResponse_descriptor_;
  metadata.reflection = ExtraForkPollResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace extra_fork_msg

// @@protoc_insertion_point(global_scope)
