// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BitMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BitMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bit_protos {

namespace {

const ::google::protobuf::Descriptor* BitRequestTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitRequestTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* BitResponseTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitResponseTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* BITTestReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BITTestReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* BITTestRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BITTestRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BitMessages_2eproto() {
  protobuf_AddDesc_BitMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BitMessages.proto");
  GOOGLE_CHECK(file != NULL);
  BitRequestTopic_descriptor_ = file->message_type(0);
  static const int BitRequestTopic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitRequestTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitRequestTopic, bit_request_),
  };
  BitRequestTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BitRequestTopic_descriptor_,
      BitRequestTopic::default_instance_,
      BitRequestTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitRequestTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitRequestTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BitRequestTopic));
  BitResponseTopic_descriptor_ = file->message_type(1);
  static const int BitResponseTopic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitResponseTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitResponseTopic, bit_report_),
  };
  BitResponseTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BitResponseTopic_descriptor_,
      BitResponseTopic::default_instance_,
      BitResponseTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitResponseTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitResponseTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BitResponseTopic));
  BITTestReport_descriptor_ = file->message_type(2);
  static const int BITTestReport_offsets_[1] = {
  };
  BITTestReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BITTestReport_descriptor_,
      BITTestReport::default_instance_,
      BITTestReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BITTestReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BITTestReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BITTestReport));
  BITTestRequest_descriptor_ = file->message_type(3);
  static const int BITTestRequest_offsets_[1] = {
  };
  BITTestRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BITTestRequest_descriptor_,
      BITTestRequest::default_instance_,
      BITTestRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BITTestRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BITTestRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BITTestRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BitMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BitRequestTopic_descriptor_, &BitRequestTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BitResponseTopic_descriptor_, &BitResponseTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BITTestReport_descriptor_, &BITTestReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BITTestRequest_descriptor_, &BITTestRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BitMessages_2eproto() {
  delete BitRequestTopic::default_instance_;
  delete BitRequestTopic_reflection_;
  delete BitResponseTopic::default_instance_;
  delete BitResponseTopic_reflection_;
  delete BITTestReport::default_instance_;
  delete BITTestReport_reflection_;
  delete BITTestRequest::default_instance_;
  delete BITTestRequest_reflection_;
}

void protobuf_AddDesc_BitMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::service_infrastructure::protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021BitMessages.proto\022\nbit_protos\032!Service"
    "InfrastructureCommon.proto\"r\n\017BitRequest"
    "Topic\022.\n\006header\030d \001(\0132\036.service_infrastr"
    "ucture.Header\022/\n\013bit_request\030\001 \001(\0132\032.bit"
    "_protos.BITTestRequest\"q\n\020BitResponseTop"
    "ic\022.\n\006header\030d \001(\0132\036.service_infrastruct"
    "ure.Header\022-\n\nbit_report\030\001 \001(\0132\031.bit_pro"
    "tos.BITTestReport\"\017\n\rBITTestReport\"\020\n\016BI"
    "TTestRequestB\014\n\nbit_protos", 346);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BitMessages.proto", &protobuf_RegisterTypes);
  BitRequestTopic::default_instance_ = new BitRequestTopic();
  BitResponseTopic::default_instance_ = new BitResponseTopic();
  BITTestReport::default_instance_ = new BITTestReport();
  BITTestRequest::default_instance_ = new BITTestRequest();
  BitRequestTopic::default_instance_->InitAsDefaultInstance();
  BitResponseTopic::default_instance_->InitAsDefaultInstance();
  BITTestReport::default_instance_->InitAsDefaultInstance();
  BITTestRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BitMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BitMessages_2eproto {
  StaticDescriptorInitializer_BitMessages_2eproto() {
    protobuf_AddDesc_BitMessages_2eproto();
  }
} static_descriptor_initializer_BitMessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BitRequestTopic::kHeaderFieldNumber;
const int BitRequestTopic::kBitRequestFieldNumber;
#endif  // !_MSC_VER

BitRequestTopic::BitRequestTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BitRequestTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  bit_request_ = const_cast< ::bit_protos::BITTestRequest*>(&::bit_protos::BITTestRequest::default_instance());
}

BitRequestTopic::BitRequestTopic(const BitRequestTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BitRequestTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  bit_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitRequestTopic::~BitRequestTopic() {
  SharedDtor();
}

void BitRequestTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete bit_request_;
  }
}

void BitRequestTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitRequestTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitRequestTopic_descriptor_;
}

const BitRequestTopic& BitRequestTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BitMessages_2eproto();
  return *default_instance_;
}

BitRequestTopic* BitRequestTopic::default_instance_ = NULL;

BitRequestTopic* BitRequestTopic::New() const {
  return new BitRequestTopic;
}

void BitRequestTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_bit_request()) {
      if (bit_request_ != NULL) bit_request_->::bit_protos::BITTestRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BitRequestTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bit_protos.BITTestRequest bit_request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bit_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BitRequestTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bit_protos.BITTestRequest bit_request = 1;
  if (has_bit_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bit_request(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BitRequestTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bit_protos.BITTestRequest bit_request = 1;
  if (has_bit_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bit_request(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BitRequestTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .bit_protos.BITTestRequest bit_request = 1;
    if (has_bit_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bit_request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitRequestTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BitRequestTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BitRequestTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitRequestTopic::MergeFrom(const BitRequestTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_bit_request()) {
      mutable_bit_request()->::bit_protos::BITTestRequest::MergeFrom(from.bit_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BitRequestTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitRequestTopic::CopyFrom(const BitRequestTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitRequestTopic::IsInitialized() const {

  return true;
}

void BitRequestTopic::Swap(BitRequestTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(bit_request_, other->bit_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BitRequestTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitRequestTopic_descriptor_;
  metadata.reflection = BitRequestTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BitResponseTopic::kHeaderFieldNumber;
const int BitResponseTopic::kBitReportFieldNumber;
#endif  // !_MSC_VER

BitResponseTopic::BitResponseTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BitResponseTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  bit_report_ = const_cast< ::bit_protos::BITTestReport*>(&::bit_protos::BITTestReport::default_instance());
}

BitResponseTopic::BitResponseTopic(const BitResponseTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BitResponseTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  bit_report_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitResponseTopic::~BitResponseTopic() {
  SharedDtor();
}

void BitResponseTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete bit_report_;
  }
}

void BitResponseTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitResponseTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitResponseTopic_descriptor_;
}

const BitResponseTopic& BitResponseTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BitMessages_2eproto();
  return *default_instance_;
}

BitResponseTopic* BitResponseTopic::default_instance_ = NULL;

BitResponseTopic* BitResponseTopic::New() const {
  return new BitResponseTopic;
}

void BitResponseTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_bit_report()) {
      if (bit_report_ != NULL) bit_report_->::bit_protos::BITTestReport::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BitResponseTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bit_protos.BITTestReport bit_report = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bit_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BitResponseTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bit_protos.BITTestReport bit_report = 1;
  if (has_bit_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bit_report(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BitResponseTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bit_protos.BITTestReport bit_report = 1;
  if (has_bit_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bit_report(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BitResponseTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .bit_protos.BITTestReport bit_report = 1;
    if (has_bit_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bit_report());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitResponseTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BitResponseTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BitResponseTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitResponseTopic::MergeFrom(const BitResponseTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_bit_report()) {
      mutable_bit_report()->::bit_protos::BITTestReport::MergeFrom(from.bit_report());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BitResponseTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitResponseTopic::CopyFrom(const BitResponseTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitResponseTopic::IsInitialized() const {

  return true;
}

void BitResponseTopic::Swap(BitResponseTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(bit_report_, other->bit_report_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BitResponseTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitResponseTopic_descriptor_;
  metadata.reflection = BitResponseTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BITTestReport::BITTestReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BITTestReport::InitAsDefaultInstance() {
}

BITTestReport::BITTestReport(const BITTestReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BITTestReport::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BITTestReport::~BITTestReport() {
  SharedDtor();
}

void BITTestReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BITTestReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BITTestReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BITTestReport_descriptor_;
}

const BITTestReport& BITTestReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BitMessages_2eproto();
  return *default_instance_;
}

BITTestReport* BITTestReport::default_instance_ = NULL;

BITTestReport* BITTestReport::New() const {
  return new BITTestReport;
}

void BITTestReport::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BITTestReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void BITTestReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BITTestReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BITTestReport::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BITTestReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BITTestReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BITTestReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BITTestReport::MergeFrom(const BITTestReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BITTestReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BITTestReport::CopyFrom(const BITTestReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BITTestReport::IsInitialized() const {

  return true;
}

void BITTestReport::Swap(BITTestReport* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BITTestReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BITTestReport_descriptor_;
  metadata.reflection = BITTestReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BITTestRequest::BITTestRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BITTestRequest::InitAsDefaultInstance() {
}

BITTestRequest::BITTestRequest(const BITTestRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BITTestRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BITTestRequest::~BITTestRequest() {
  SharedDtor();
}

void BITTestRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BITTestRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BITTestRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BITTestRequest_descriptor_;
}

const BITTestRequest& BITTestRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BitMessages_2eproto();
  return *default_instance_;
}

BITTestRequest* BITTestRequest::default_instance_ = NULL;

BITTestRequest* BITTestRequest::New() const {
  return new BITTestRequest;
}

void BITTestRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BITTestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void BITTestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BITTestRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BITTestRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BITTestRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BITTestRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BITTestRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BITTestRequest::MergeFrom(const BITTestRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BITTestRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BITTestRequest::CopyFrom(const BITTestRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BITTestRequest::IsInitialized() const {

  return true;
}

void BITTestRequest::Swap(BITTestRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BITTestRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BITTestRequest_descriptor_;
  metadata.reflection = BITTestRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bit_protos

// @@protoc_insertion_point(global_scope)
