// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PinpointMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PinpointMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pinpoint_msg {

namespace {

const ::google::protobuf::Descriptor* SignalHitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalHitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalHit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalHit_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalHitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalHitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetSNRThresholdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetSNRThresholdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetSNRThresholdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetSNRThresholdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalSolutionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalSolutionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalSolution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalSolution_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalSolutionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalSolutionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TunePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TunePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTunePlanRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTunePlanRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TunePlanActiveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TunePlanActiveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TunePlanUpdateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TunePlanUpdateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGHzModeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGHzModeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGHzModeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGHzModeResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PinpointMessages_2eproto() {
  protobuf_AddDesc_PinpointMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PinpointMessages.proto");
  GOOGLE_CHECK(file != NULL);
  SignalHitRequest_descriptor_ = file->message_type(0);
  static const int SignalHitRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitRequest, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitRequest, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitRequest, timetol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitRequest, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitRequest, freqtol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitRequest, globalid_),
  };
  SignalHitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalHitRequest_descriptor_,
      SignalHitRequest::default_instance_,
      SignalHitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalHitRequest));
  SignalHit_descriptor_ = file->message_type(1);
  static const int SignalHit_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHit, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHit, bytesamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHit, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHit, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHit, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHit, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHit, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHit, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHit, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHit, hittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHit, globalid_),
  };
  SignalHit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalHit_descriptor_,
      SignalHit::default_instance_,
      SignalHit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalHit));
  SignalHitResponse_descriptor_ = file->message_type(2);
  static const int SignalHitResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitResponse, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitResponse, sighits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitResponse, continue__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitResponse, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitResponse, globalid_),
  };
  SignalHitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalHitResponse_descriptor_,
      SignalHitResponse::default_instance_,
      SignalHitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalHitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalHitResponse));
  SetSNRThresholdRequest_descriptor_ = file->message_type(3);
  static const int SetSNRThresholdRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSNRThresholdRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSNRThresholdRequest, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSNRThresholdRequest, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSNRThresholdRequest, startfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSNRThresholdRequest, stopfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSNRThresholdRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSNRThresholdRequest, globalid_),
  };
  SetSNRThresholdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetSNRThresholdRequest_descriptor_,
      SetSNRThresholdRequest::default_instance_,
      SetSNRThresholdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSNRThresholdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSNRThresholdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetSNRThresholdRequest));
  SetSNRThresholdResponse_descriptor_ = file->message_type(4);
  static const int SetSNRThresholdResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSNRThresholdResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSNRThresholdResponse, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSNRThresholdResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSNRThresholdResponse, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSNRThresholdResponse, globalid_),
  };
  SetSNRThresholdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetSNRThresholdResponse_descriptor_,
      SetSNRThresholdResponse::default_instance_,
      SetSNRThresholdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSNRThresholdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSNRThresholdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetSNRThresholdResponse));
  SignalSolutionRequest_descriptor_ = file->message_type(5);
  static const int SignalSolutionRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionRequest, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionRequest, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionRequest, timetol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionRequest, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionRequest, freqtol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionRequest, globalid_),
  };
  SignalSolutionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalSolutionRequest_descriptor_,
      SignalSolutionRequest::default_instance_,
      SignalSolutionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalSolutionRequest));
  SignalSolution_descriptor_ = file->message_type(6);
  static const int SignalSolution_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolution, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolution, byteamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolution, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolution, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolution, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolution, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolution, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolution, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolution, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolution, stoptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolution, hittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolution, globalid_),
  };
  SignalSolution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalSolution_descriptor_,
      SignalSolution::default_instance_,
      SignalSolution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalSolution));
  SignalSolutionResponse_descriptor_ = file->message_type(7);
  static const int SignalSolutionResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionResponse, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionResponse, sigsolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionResponse, continue__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionResponse, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionResponse, globalid_),
  };
  SignalSolutionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalSolutionResponse_descriptor_,
      SignalSolutionResponse::default_instance_,
      SignalSolutionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalSolutionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalSolutionResponse));
  TunePoint_descriptor_ = file->message_type(8);
  static const int TunePoint_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePoint, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePoint, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePoint, centerfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePoint, dwelltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePoint, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePoint, globalid_),
  };
  TunePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TunePoint_descriptor_,
      TunePoint::default_instance_,
      TunePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TunePoint));
  SetTunePlanRequest_descriptor_ = file->message_type(9);
  static const int SetTunePlanRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTunePlanRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTunePlanRequest, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTunePlanRequest, repeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTunePlanRequest, tuneplan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTunePlanRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTunePlanRequest, globalid_),
  };
  SetTunePlanRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTunePlanRequest_descriptor_,
      SetTunePlanRequest::default_instance_,
      SetTunePlanRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTunePlanRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTunePlanRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTunePlanRequest));
  TunePlanActiveResponse_descriptor_ = file->message_type(10);
  static const int TunePlanActiveResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePlanActiveResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePlanActiveResponse, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePlanActiveResponse, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePlanActiveResponse, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePlanActiveResponse, globalid_),
  };
  TunePlanActiveResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TunePlanActiveResponse_descriptor_,
      TunePlanActiveResponse::default_instance_,
      TunePlanActiveResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePlanActiveResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePlanActiveResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TunePlanActiveResponse));
  TunePlanUpdateResponse_descriptor_ = file->message_type(11);
  static const int TunePlanUpdateResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePlanUpdateResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePlanUpdateResponse, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePlanUpdateResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePlanUpdateResponse, lowfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePlanUpdateResponse, hifreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePlanUpdateResponse, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePlanUpdateResponse, globalid_),
  };
  TunePlanUpdateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TunePlanUpdateResponse_descriptor_,
      TunePlanUpdateResponse::default_instance_,
      TunePlanUpdateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePlanUpdateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunePlanUpdateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TunePlanUpdateResponse));
  SetGHzModeRequest_descriptor_ = file->message_type(12);
  static const int SetGHzModeRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGHzModeRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGHzModeRequest, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGHzModeRequest, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGHzModeRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGHzModeRequest, globalid_),
  };
  SetGHzModeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGHzModeRequest_descriptor_,
      SetGHzModeRequest::default_instance_,
      SetGHzModeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGHzModeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGHzModeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGHzModeRequest));
  SetGHzModeResponse_descriptor_ = file->message_type(13);
  static const int SetGHzModeResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGHzModeResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGHzModeResponse, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGHzModeResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGHzModeResponse, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGHzModeResponse, globalid_),
  };
  SetGHzModeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGHzModeResponse_descriptor_,
      SetGHzModeResponse::default_instance_,
      SetGHzModeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGHzModeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGHzModeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGHzModeResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PinpointMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalHitRequest_descriptor_, &SignalHitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalHit_descriptor_, &SignalHit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalHitResponse_descriptor_, &SignalHitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetSNRThresholdRequest_descriptor_, &SetSNRThresholdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetSNRThresholdResponse_descriptor_, &SetSNRThresholdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalSolutionRequest_descriptor_, &SignalSolutionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalSolution_descriptor_, &SignalSolution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalSolutionResponse_descriptor_, &SignalSolutionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TunePoint_descriptor_, &TunePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTunePlanRequest_descriptor_, &SetTunePlanRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TunePlanActiveResponse_descriptor_, &TunePlanActiveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TunePlanUpdateResponse_descriptor_, &TunePlanUpdateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGHzModeRequest_descriptor_, &SetGHzModeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGHzModeResponse_descriptor_, &SetGHzModeResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PinpointMessages_2eproto() {
  delete SignalHitRequest::default_instance_;
  delete SignalHitRequest_reflection_;
  delete SignalHitRequest::_default_msgname_;
  delete SignalHit::default_instance_;
  delete SignalHit_reflection_;
  delete SignalHit::_default_msgname_;
  delete SignalHitResponse::default_instance_;
  delete SignalHitResponse_reflection_;
  delete SignalHitResponse::_default_msgname_;
  delete SetSNRThresholdRequest::default_instance_;
  delete SetSNRThresholdRequest_reflection_;
  delete SetSNRThresholdRequest::_default_msgname_;
  delete SetSNRThresholdResponse::default_instance_;
  delete SetSNRThresholdResponse_reflection_;
  delete SetSNRThresholdResponse::_default_msgname_;
  delete SignalSolutionRequest::default_instance_;
  delete SignalSolutionRequest_reflection_;
  delete SignalSolutionRequest::_default_msgname_;
  delete SignalSolution::default_instance_;
  delete SignalSolution_reflection_;
  delete SignalSolution::_default_msgname_;
  delete SignalSolutionResponse::default_instance_;
  delete SignalSolutionResponse_reflection_;
  delete SignalSolutionResponse::_default_msgname_;
  delete TunePoint::default_instance_;
  delete TunePoint_reflection_;
  delete TunePoint::_default_msgname_;
  delete SetTunePlanRequest::default_instance_;
  delete SetTunePlanRequest_reflection_;
  delete SetTunePlanRequest::_default_msgname_;
  delete TunePlanActiveResponse::default_instance_;
  delete TunePlanActiveResponse_reflection_;
  delete TunePlanActiveResponse::_default_msgname_;
  delete TunePlanUpdateResponse::default_instance_;
  delete TunePlanUpdateResponse_reflection_;
  delete TunePlanUpdateResponse::_default_msgname_;
  delete SetGHzModeRequest::default_instance_;
  delete SetGHzModeRequest_reflection_;
  delete SetGHzModeRequest::_default_msgname_;
  delete SetGHzModeResponse::default_instance_;
  delete SetGHzModeResponse_reflection_;
  delete SetGHzModeResponse::_default_msgname_;
}

void protobuf_AddDesc_PinpointMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026PinpointMessages.proto\022\014pinpoint_msg\"\246"
    "\001\n\020SignalHitRequest\022!\n\007msgName\030\001 \001(\t:\020SI"
    "GNALHITREQUEST\022\021\n\tmessageID\030\002 \001(\005\022\014\n\004tim"
    "e\030\003 \001(\003\022\017\n\007timeTol\030\004 \001(\003\022\014\n\004freq\030\005 \001(\003\022\017"
    "\n\007freqTol\030\006 \001(\003\022\014\n\004user\030\007 \001(\t\022\020\n\010globalI"
    "D\030\010 \001(\t\"\330\001\n\tSignalHit\022\032\n\007msgName\030\001 \001(\t:\t"
    "SIGNALHIT\022\023\n\013bytesAmount\030\002 \001(\005\022\014\n\004freq\030\003"
    " \001(\003\022\017\n\007azimuth\030\004 \001(\002\022\021\n\televation\030\005 \001(\002"
    "\022\022\n\nconfidence\030\006 \001(\002\022\021\n\tlongitude\030\007 \001(\001\022"
    "\020\n\010latitude\030\010 \001(\001\022\014\n\004time\030\t \001(\003\022\017\n\007hitTy"
    "pe\030\n \001(\005\022\020\n\010globalID\030\013 \001(\t\"\246\001\n\021SignalHit"
    "Response\022\"\n\007msgName\030\001 \001(\t:\021SIGNALHITRESP"
    "ONSE\022\021\n\tmessageID\030\002 \001(\005\022(\n\007sigHits\030\003 \003(\013"
    "2\027.pinpoint_msg.SignalHit\022\020\n\010continue\030\004 "
    "\001(\010\022\014\n\004user\030\005 \001(\t\022\020\n\010globalID\030\006 \001(\t\"\254\001\n\026"
    "SetSNRThresholdRequest\022\'\n\007msgName\030\001 \001(\t:"
    "\026SETSNRTHRESHOLDREQUEST\022\021\n\tmessageID\030\002 \001"
    "(\005\022\021\n\tthreshold\030\003 \001(\003\022\021\n\tstartFreq\030\004 \001(\003"
    "\022\020\n\010stopFreq\030\005 \001(\003\022\014\n\004user\030\006 \001(\t\022\020\n\010glob"
    "alID\030\007 \001(\t\"\207\001\n\027SetSNRThresholdResponse\022("
    "\n\007msgName\030\001 \001(\t:\027SETSNRTHRESHOLDRESPONSE"
    "\022\021\n\tmessageID\030\002 \001(\005\022\017\n\007success\030\003 \001(\010\022\014\n\004"
    "user\030\004 \001(\t\022\020\n\010globalID\030\005 \001(\t\"\260\001\n\025SignalS"
    "olutionRequest\022&\n\007msgName\030\001 \001(\t:\025SIGNALS"
    "OLUTIONREQUEST\022\021\n\tmessageID\030\002 \001(\005\022\014\n\004tim"
    "e\030\003 \001(\003\022\017\n\007timeTol\030\004 \001(\003\022\014\n\004freq\030\005 \001(\003\022\017"
    "\n\007freqTol\030\006 \001(\003\022\014\n\004user\030\007 \001(\t\022\020\n\010globalI"
    "D\030\010 \001(\t\"\370\001\n\016SignalSolution\022\037\n\007msgName\030\001 "
    "\001(\t:\016SIGNALSOLUTION\022\022\n\nbyteAmount\030\002 \001(\005\022"
    "\014\n\004freq\030\003 \001(\003\022\017\n\007azimuth\030\004 \001(\002\022\021\n\televat"
    "ion\030\005 \001(\002\022\022\n\nconfidence\030\006 \001(\002\022\021\n\tlongitu"
    "de\030\007 \001(\001\022\020\n\010latitude\030\010 \001(\001\022\021\n\tstartTime\030"
    "\t \001(\003\022\020\n\010stopTime\030\n \001(\003\022\017\n\007hitType\030\013 \001(\003"
    "\022\020\n\010globalID\030\014 \001(\t\"\271\001\n\026SignalSolutionRes"
    "ponse\022\'\n\007msgName\030\001 \001(\t:\026SIGNALSOLUTIONRE"
    "SPONSE\022\021\n\tmessageID\030\002 \001(\005\0221\n\013sigSolution"
    "\030\003 \003(\0132\034.pinpoint_msg.SignalSolution\022\020\n\010"
    "continue\030\004 \001(\010\022\014\n\004user\030\005 \001(\t\022\020\n\010globalID"
    "\030\006 \001(\t\"\201\001\n\tTunePoint\022\032\n\007msgName\030\001 \001(\t:\tT"
    "UNEPOINT\022\021\n\tmessageID\030\002 \001(\005\022\022\n\ncenterFre"
    "q\030\003 \001(\003\022\021\n\tdwellTime\030\004 \001(\003\022\014\n\004user\030\005 \001(\t"
    "\022\020\n\010globalID\030\006 \001(\t\"\247\001\n\022SetTunePlanReques"
    "t\022#\n\007msgName\030\001 \001(\t:\022SETTUNEPLANREQUEST\022\021"
    "\n\tmessageID\030\002 \001(\005\022\016\n\006repeat\030\003 \001(\010\022)\n\010tun"
    "ePlan\030\004 \003(\0132\027.pinpoint_msg.TunePoint\022\014\n\004"
    "user\030\005 \001(\t\022\020\n\010globalID\030\006 \001(\t\"\204\001\n\026TunePla"
    "nActiveResponse\022\'\n\007msgName\030\001 \001(\t:\026TUNEPL"
    "ANACTIVERESPONSE\022\021\n\tmessageID\030\002 \001(\005\022\016\n\006a"
    "ctive\030\003 \001(\010\022\014\n\004user\030\004 \001(\t\022\020\n\010globalID\030\005 "
    "\001(\t\"\246\001\n\026TunePlanUpdateResponse\022\'\n\007msgNam"
    "e\030\001 \001(\t:\026TUNEPLANUPDATERESPONSE\022\021\n\tmessa"
    "geID\030\002 \001(\005\022\017\n\007success\030\003 \001(\010\022\017\n\007lowFreq\030\004"
    " \001(\003\022\016\n\006hiFreq\030\005 \001(\003\022\014\n\004user\030\006 \001(\t\022\020\n\010gl"
    "obalID\030\007 \001(\t\"x\n\021SetGHzModeRequest\022\"\n\007msg"
    "Name\030\001 \001(\t:\021SETGHZMODEREQUEST\022\021\n\tmessage"
    "ID\030\002 \001(\005\022\014\n\004mode\030\003 \001(\005\022\014\n\004user\030\004 \001(\t\022\020\n\010"
    "globalID\030\005 \001(\t\"}\n\022SetGHzModeResponse\022#\n\007"
    "msgName\030\001 \001(\t:\022SETGHZMODERESPONSE\022\021\n\tmes"
    "sageID\030\002 \001(\005\022\017\n\007success\030\003 \001(\010\022\014\n\004user\030\004 "
    "\001(\t\022\020\n\010globalID\030\005 \001(\tB\025\n\023fv.protos.kepsv"
    "isor", 2404);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PinpointMessages.proto", &protobuf_RegisterTypes);
  SignalHitRequest::_default_msgname_ =
      new ::std::string("SIGNALHITREQUEST", 16);
  SignalHitRequest::default_instance_ = new SignalHitRequest();
  SignalHit::_default_msgname_ =
      new ::std::string("SIGNALHIT", 9);
  SignalHit::default_instance_ = new SignalHit();
  SignalHitResponse::_default_msgname_ =
      new ::std::string("SIGNALHITRESPONSE", 17);
  SignalHitResponse::default_instance_ = new SignalHitResponse();
  SetSNRThresholdRequest::_default_msgname_ =
      new ::std::string("SETSNRTHRESHOLDREQUEST", 22);
  SetSNRThresholdRequest::default_instance_ = new SetSNRThresholdRequest();
  SetSNRThresholdResponse::_default_msgname_ =
      new ::std::string("SETSNRTHRESHOLDRESPONSE", 23);
  SetSNRThresholdResponse::default_instance_ = new SetSNRThresholdResponse();
  SignalSolutionRequest::_default_msgname_ =
      new ::std::string("SIGNALSOLUTIONREQUEST", 21);
  SignalSolutionRequest::default_instance_ = new SignalSolutionRequest();
  SignalSolution::_default_msgname_ =
      new ::std::string("SIGNALSOLUTION", 14);
  SignalSolution::default_instance_ = new SignalSolution();
  SignalSolutionResponse::_default_msgname_ =
      new ::std::string("SIGNALSOLUTIONRESPONSE", 22);
  SignalSolutionResponse::default_instance_ = new SignalSolutionResponse();
  TunePoint::_default_msgname_ =
      new ::std::string("TUNEPOINT", 9);
  TunePoint::default_instance_ = new TunePoint();
  SetTunePlanRequest::_default_msgname_ =
      new ::std::string("SETTUNEPLANREQUEST", 18);
  SetTunePlanRequest::default_instance_ = new SetTunePlanRequest();
  TunePlanActiveResponse::_default_msgname_ =
      new ::std::string("TUNEPLANACTIVERESPONSE", 22);
  TunePlanActiveResponse::default_instance_ = new TunePlanActiveResponse();
  TunePlanUpdateResponse::_default_msgname_ =
      new ::std::string("TUNEPLANUPDATERESPONSE", 22);
  TunePlanUpdateResponse::default_instance_ = new TunePlanUpdateResponse();
  SetGHzModeRequest::_default_msgname_ =
      new ::std::string("SETGHZMODEREQUEST", 17);
  SetGHzModeRequest::default_instance_ = new SetGHzModeRequest();
  SetGHzModeResponse::_default_msgname_ =
      new ::std::string("SETGHZMODERESPONSE", 18);
  SetGHzModeResponse::default_instance_ = new SetGHzModeResponse();
  SignalHitRequest::default_instance_->InitAsDefaultInstance();
  SignalHit::default_instance_->InitAsDefaultInstance();
  SignalHitResponse::default_instance_->InitAsDefaultInstance();
  SetSNRThresholdRequest::default_instance_->InitAsDefaultInstance();
  SetSNRThresholdResponse::default_instance_->InitAsDefaultInstance();
  SignalSolutionRequest::default_instance_->InitAsDefaultInstance();
  SignalSolution::default_instance_->InitAsDefaultInstance();
  SignalSolutionResponse::default_instance_->InitAsDefaultInstance();
  TunePoint::default_instance_->InitAsDefaultInstance();
  SetTunePlanRequest::default_instance_->InitAsDefaultInstance();
  TunePlanActiveResponse::default_instance_->InitAsDefaultInstance();
  TunePlanUpdateResponse::default_instance_->InitAsDefaultInstance();
  SetGHzModeRequest::default_instance_->InitAsDefaultInstance();
  SetGHzModeResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PinpointMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PinpointMessages_2eproto {
  StaticDescriptorInitializer_PinpointMessages_2eproto() {
    protobuf_AddDesc_PinpointMessages_2eproto();
  }
} static_descriptor_initializer_PinpointMessages_2eproto_;

// ===================================================================

::std::string* SignalHitRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SignalHitRequest::kMsgNameFieldNumber;
const int SignalHitRequest::kMessageIDFieldNumber;
const int SignalHitRequest::kTimeFieldNumber;
const int SignalHitRequest::kTimeTolFieldNumber;
const int SignalHitRequest::kFreqFieldNumber;
const int SignalHitRequest::kFreqTolFieldNumber;
const int SignalHitRequest::kUserFieldNumber;
const int SignalHitRequest::kGlobalIDFieldNumber;
#endif  // !_MSC_VER

SignalHitRequest::SignalHitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalHitRequest::InitAsDefaultInstance() {
}

SignalHitRequest::SignalHitRequest(const SignalHitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalHitRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  messageid_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  timetol_ = GOOGLE_LONGLONG(0);
  freq_ = GOOGLE_LONGLONG(0);
  freqtol_ = GOOGLE_LONGLONG(0);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalHitRequest::~SignalHitRequest() {
  SharedDtor();
}

void SignalHitRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void SignalHitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalHitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalHitRequest_descriptor_;
}

const SignalHitRequest& SignalHitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PinpointMessages_2eproto();
  return *default_instance_;
}

SignalHitRequest* SignalHitRequest::default_instance_ = NULL;

SignalHitRequest* SignalHitRequest::New() const {
  return new SignalHitRequest;
}

void SignalHitRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    messageid_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    timetol_ = GOOGLE_LONGLONG(0);
    freq_ = GOOGLE_LONGLONG(0);
    freqtol_ = GOOGLE_LONGLONG(0);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalHitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SIGNALHITREQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_messageID;
        break;
      }

      // optional int32 messageID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeTol;
        break;
      }

      // optional int64 timeTol = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeTol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timetol_)));
          set_has_timetol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_freq;
        break;
      }

      // optional int64 freq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_freqTol;
        break;
      }

      // optional int64 freqTol = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freqTol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freqtol_)));
          set_has_freqtol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_user;
        break;
      }

      // optional string user = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_globalID;
        break;
      }

      // optional string globalID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalHitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SIGNALHITREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messageid(), output);
  }

  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // optional int64 timeTol = 4;
  if (has_timetol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timetol(), output);
  }

  // optional int64 freq = 5;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->freq(), output);
  }

  // optional int64 freqTol = 6;
  if (has_freqtol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->freqtol(), output);
  }

  // optional string user = 7;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->user(), output);
  }

  // optional string globalID = 8;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalHitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SIGNALHITREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messageid(), target);
  }

  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // optional int64 timeTol = 4;
  if (has_timetol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timetol(), target);
  }

  // optional int64 freq = 5;
  if (has_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->freq(), target);
  }

  // optional int64 freqTol = 6;
  if (has_freqtol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->freqtol(), target);
  }

  // optional string user = 7;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->user(), target);
  }

  // optional string globalID = 8;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalHitRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SIGNALHITREQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 messageID = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int64 timeTol = 4;
    if (has_timetol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timetol());
    }

    // optional int64 freq = 5;
    if (has_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freq());
    }

    // optional int64 freqTol = 6;
    if (has_freqtol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freqtol());
    }

    // optional string user = 7;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string globalID = 8;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalHitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalHitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalHitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalHitRequest::MergeFrom(const SignalHitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_timetol()) {
      set_timetol(from.timetol());
    }
    if (from.has_freq()) {
      set_freq(from.freq());
    }
    if (from.has_freqtol()) {
      set_freqtol(from.freqtol());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalHitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalHitRequest::CopyFrom(const SignalHitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalHitRequest::IsInitialized() const {

  return true;
}

void SignalHitRequest::Swap(SignalHitRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(messageid_, other->messageid_);
    std::swap(time_, other->time_);
    std::swap(timetol_, other->timetol_);
    std::swap(freq_, other->freq_);
    std::swap(freqtol_, other->freqtol_);
    std::swap(user_, other->user_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalHitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalHitRequest_descriptor_;
  metadata.reflection = SignalHitRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SignalHit::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SignalHit::kMsgNameFieldNumber;
const int SignalHit::kBytesAmountFieldNumber;
const int SignalHit::kFreqFieldNumber;
const int SignalHit::kAzimuthFieldNumber;
const int SignalHit::kElevationFieldNumber;
const int SignalHit::kConfidenceFieldNumber;
const int SignalHit::kLongitudeFieldNumber;
const int SignalHit::kLatitudeFieldNumber;
const int SignalHit::kTimeFieldNumber;
const int SignalHit::kHitTypeFieldNumber;
const int SignalHit::kGlobalIDFieldNumber;
#endif  // !_MSC_VER

SignalHit::SignalHit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalHit::InitAsDefaultInstance() {
}

SignalHit::SignalHit(const SignalHit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalHit::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  bytesamount_ = 0;
  freq_ = GOOGLE_LONGLONG(0);
  azimuth_ = 0;
  elevation_ = 0;
  confidence_ = 0;
  longitude_ = 0;
  latitude_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  hittype_ = 0;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalHit::~SignalHit() {
  SharedDtor();
}

void SignalHit::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void SignalHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalHit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalHit_descriptor_;
}

const SignalHit& SignalHit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PinpointMessages_2eproto();
  return *default_instance_;
}

SignalHit* SignalHit::default_instance_ = NULL;

SignalHit* SignalHit::New() const {
  return new SignalHit;
}

void SignalHit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    bytesamount_ = 0;
    freq_ = GOOGLE_LONGLONG(0);
    azimuth_ = 0;
    elevation_ = 0;
    confidence_ = 0;
    longitude_ = 0;
    latitude_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    hittype_ = 0;
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SIGNALHIT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bytesAmount;
        break;
      }

      // optional int32 bytesAmount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytesAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytesamount_)));
          set_has_bytesamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_freq;
        break;
      }

      // optional int64 freq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_azimuth;
        break;
      }

      // optional float azimuth = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_elevation;
        break;
      }

      // optional float elevation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_confidence;
        break;
      }

      // optional float confidence = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_longitude;
        break;
      }

      // optional double longitude = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_latitude;
        break;
      }

      // optional double latitude = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional int64 time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hitType;
        break;
      }

      // optional int32 hitType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hittype_)));
          set_has_hittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_globalID;
        break;
      }

      // optional string globalID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SIGNALHIT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 bytesAmount = 2;
  if (has_bytesamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bytesamount(), output);
  }

  // optional int64 freq = 3;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->freq(), output);
  }

  // optional float azimuth = 4;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->azimuth(), output);
  }

  // optional float elevation = 5;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->elevation(), output);
  }

  // optional float confidence = 6;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->confidence(), output);
  }

  // optional double longitude = 7;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->longitude(), output);
  }

  // optional double latitude = 8;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->latitude(), output);
  }

  // optional int64 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->time(), output);
  }

  // optional int32 hitType = 10;
  if (has_hittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hittype(), output);
  }

  // optional string globalID = 11;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalHit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SIGNALHIT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 bytesAmount = 2;
  if (has_bytesamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bytesamount(), target);
  }

  // optional int64 freq = 3;
  if (has_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->freq(), target);
  }

  // optional float azimuth = 4;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->azimuth(), target);
  }

  // optional float elevation = 5;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->elevation(), target);
  }

  // optional float confidence = 6;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->confidence(), target);
  }

  // optional double longitude = 7;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->longitude(), target);
  }

  // optional double latitude = 8;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->latitude(), target);
  }

  // optional int64 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->time(), target);
  }

  // optional int32 hitType = 10;
  if (has_hittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hittype(), target);
  }

  // optional string globalID = 11;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalHit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SIGNALHIT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 bytesAmount = 2;
    if (has_bytesamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytesamount());
    }

    // optional int64 freq = 3;
    if (has_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freq());
    }

    // optional float azimuth = 4;
    if (has_azimuth()) {
      total_size += 1 + 4;
    }

    // optional float elevation = 5;
    if (has_elevation()) {
      total_size += 1 + 4;
    }

    // optional float confidence = 6;
    if (has_confidence()) {
      total_size += 1 + 4;
    }

    // optional double longitude = 7;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double latitude = 8;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 hitType = 10;
    if (has_hittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hittype());
    }

    // optional string globalID = 11;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalHit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalHit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalHit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalHit::MergeFrom(const SignalHit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_bytesamount()) {
      set_bytesamount(from.bytesamount());
    }
    if (from.has_freq()) {
      set_freq(from.freq());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_hittype()) {
      set_hittype(from.hittype());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalHit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalHit::CopyFrom(const SignalHit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalHit::IsInitialized() const {

  return true;
}

void SignalHit::Swap(SignalHit* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(bytesamount_, other->bytesamount_);
    std::swap(freq_, other->freq_);
    std::swap(azimuth_, other->azimuth_);
    std::swap(elevation_, other->elevation_);
    std::swap(confidence_, other->confidence_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(time_, other->time_);
    std::swap(hittype_, other->hittype_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalHit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalHit_descriptor_;
  metadata.reflection = SignalHit_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SignalHitResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SignalHitResponse::kMsgNameFieldNumber;
const int SignalHitResponse::kMessageIDFieldNumber;
const int SignalHitResponse::kSigHitsFieldNumber;
const int SignalHitResponse::kContinueFieldNumber;
const int SignalHitResponse::kUserFieldNumber;
const int SignalHitResponse::kGlobalIDFieldNumber;
#endif  // !_MSC_VER

SignalHitResponse::SignalHitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalHitResponse::InitAsDefaultInstance() {
}

SignalHitResponse::SignalHitResponse(const SignalHitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalHitResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  messageid_ = 0;
  continue__ = false;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalHitResponse::~SignalHitResponse() {
  SharedDtor();
}

void SignalHitResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void SignalHitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalHitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalHitResponse_descriptor_;
}

const SignalHitResponse& SignalHitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PinpointMessages_2eproto();
  return *default_instance_;
}

SignalHitResponse* SignalHitResponse::default_instance_ = NULL;

SignalHitResponse* SignalHitResponse::New() const {
  return new SignalHitResponse;
}

void SignalHitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    messageid_ = 0;
    continue__ = false;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  sighits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalHitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SIGNALHITRESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_messageID;
        break;
      }

      // optional int32 messageID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sigHits;
        break;
      }

      // repeated .pinpoint_msg.SignalHit sigHits = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigHits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sighits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sigHits;
        if (input->ExpectTag(32)) goto parse_continue;
        break;
      }

      // optional bool continue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &continue__)));
          set_has_continue_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional string user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_globalID;
        break;
      }

      // optional string globalID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalHitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SIGNALHITRESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messageid(), output);
  }

  // repeated .pinpoint_msg.SignalHit sigHits = 3;
  for (int i = 0; i < this->sighits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sighits(i), output);
  }

  // optional bool continue = 4;
  if (has_continue_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->continue_(), output);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user(), output);
  }

  // optional string globalID = 6;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalHitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SIGNALHITRESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messageid(), target);
  }

  // repeated .pinpoint_msg.SignalHit sigHits = 3;
  for (int i = 0; i < this->sighits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sighits(i), target);
  }

  // optional bool continue = 4;
  if (has_continue_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->continue_(), target);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  // optional string globalID = 6;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalHitResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SIGNALHITRESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 messageID = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

    // optional bool continue = 4;
    if (has_continue_()) {
      total_size += 1 + 1;
    }

    // optional string user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string globalID = 6;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  // repeated .pinpoint_msg.SignalHit sigHits = 3;
  total_size += 1 * this->sighits_size();
  for (int i = 0; i < this->sighits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sighits(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalHitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalHitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalHitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalHitResponse::MergeFrom(const SignalHitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  sighits_.MergeFrom(from.sighits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_continue_()) {
      set_continue_(from.continue_());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalHitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalHitResponse::CopyFrom(const SignalHitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalHitResponse::IsInitialized() const {

  return true;
}

void SignalHitResponse::Swap(SignalHitResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(messageid_, other->messageid_);
    sighits_.Swap(&other->sighits_);
    std::swap(continue__, other->continue__);
    std::swap(user_, other->user_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalHitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalHitResponse_descriptor_;
  metadata.reflection = SignalHitResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SetSNRThresholdRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SetSNRThresholdRequest::kMsgNameFieldNumber;
const int SetSNRThresholdRequest::kMessageIDFieldNumber;
const int SetSNRThresholdRequest::kThresholdFieldNumber;
const int SetSNRThresholdRequest::kStartFreqFieldNumber;
const int SetSNRThresholdRequest::kStopFreqFieldNumber;
const int SetSNRThresholdRequest::kUserFieldNumber;
const int SetSNRThresholdRequest::kGlobalIDFieldNumber;
#endif  // !_MSC_VER

SetSNRThresholdRequest::SetSNRThresholdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetSNRThresholdRequest::InitAsDefaultInstance() {
}

SetSNRThresholdRequest::SetSNRThresholdRequest(const SetSNRThresholdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetSNRThresholdRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  messageid_ = 0;
  threshold_ = GOOGLE_LONGLONG(0);
  startfreq_ = GOOGLE_LONGLONG(0);
  stopfreq_ = GOOGLE_LONGLONG(0);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetSNRThresholdRequest::~SetSNRThresholdRequest() {
  SharedDtor();
}

void SetSNRThresholdRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void SetSNRThresholdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetSNRThresholdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetSNRThresholdRequest_descriptor_;
}

const SetSNRThresholdRequest& SetSNRThresholdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PinpointMessages_2eproto();
  return *default_instance_;
}

SetSNRThresholdRequest* SetSNRThresholdRequest::default_instance_ = NULL;

SetSNRThresholdRequest* SetSNRThresholdRequest::New() const {
  return new SetSNRThresholdRequest;
}

void SetSNRThresholdRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    messageid_ = 0;
    threshold_ = GOOGLE_LONGLONG(0);
    startfreq_ = GOOGLE_LONGLONG(0);
    stopfreq_ = GOOGLE_LONGLONG(0);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetSNRThresholdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SETSNRTHRESHOLDREQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_messageID;
        break;
      }

      // optional int32 messageID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_threshold;
        break;
      }

      // optional int64 threshold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_startFreq;
        break;
      }

      // optional int64 startFreq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &startfreq_)));
          set_has_startfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stopFreq;
        break;
      }

      // optional int64 stopFreq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stopFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stopfreq_)));
          set_has_stopfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user;
        break;
      }

      // optional string user = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_globalID;
        break;
      }

      // optional string globalID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetSNRThresholdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SETSNRTHRESHOLDREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messageid(), output);
  }

  // optional int64 threshold = 3;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->threshold(), output);
  }

  // optional int64 startFreq = 4;
  if (has_startfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->startfreq(), output);
  }

  // optional int64 stopFreq = 5;
  if (has_stopfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->stopfreq(), output);
  }

  // optional string user = 6;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user(), output);
  }

  // optional string globalID = 7;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetSNRThresholdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SETSNRTHRESHOLDREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messageid(), target);
  }

  // optional int64 threshold = 3;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->threshold(), target);
  }

  // optional int64 startFreq = 4;
  if (has_startfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->startfreq(), target);
  }

  // optional int64 stopFreq = 5;
  if (has_stopfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->stopfreq(), target);
  }

  // optional string user = 6;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user(), target);
  }

  // optional string globalID = 7;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetSNRThresholdRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SETSNRTHRESHOLDREQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 messageID = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

    // optional int64 threshold = 3;
    if (has_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->threshold());
    }

    // optional int64 startFreq = 4;
    if (has_startfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->startfreq());
    }

    // optional int64 stopFreq = 5;
    if (has_stopfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stopfreq());
    }

    // optional string user = 6;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string globalID = 7;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetSNRThresholdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetSNRThresholdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetSNRThresholdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetSNRThresholdRequest::MergeFrom(const SetSNRThresholdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
    if (from.has_startfreq()) {
      set_startfreq(from.startfreq());
    }
    if (from.has_stopfreq()) {
      set_stopfreq(from.stopfreq());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetSNRThresholdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSNRThresholdRequest::CopyFrom(const SetSNRThresholdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSNRThresholdRequest::IsInitialized() const {

  return true;
}

void SetSNRThresholdRequest::Swap(SetSNRThresholdRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(messageid_, other->messageid_);
    std::swap(threshold_, other->threshold_);
    std::swap(startfreq_, other->startfreq_);
    std::swap(stopfreq_, other->stopfreq_);
    std::swap(user_, other->user_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetSNRThresholdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetSNRThresholdRequest_descriptor_;
  metadata.reflection = SetSNRThresholdRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SetSNRThresholdResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SetSNRThresholdResponse::kMsgNameFieldNumber;
const int SetSNRThresholdResponse::kMessageIDFieldNumber;
const int SetSNRThresholdResponse::kSuccessFieldNumber;
const int SetSNRThresholdResponse::kUserFieldNumber;
const int SetSNRThresholdResponse::kGlobalIDFieldNumber;
#endif  // !_MSC_VER

SetSNRThresholdResponse::SetSNRThresholdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetSNRThresholdResponse::InitAsDefaultInstance() {
}

SetSNRThresholdResponse::SetSNRThresholdResponse(const SetSNRThresholdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetSNRThresholdResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  messageid_ = 0;
  success_ = false;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetSNRThresholdResponse::~SetSNRThresholdResponse() {
  SharedDtor();
}

void SetSNRThresholdResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void SetSNRThresholdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetSNRThresholdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetSNRThresholdResponse_descriptor_;
}

const SetSNRThresholdResponse& SetSNRThresholdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PinpointMessages_2eproto();
  return *default_instance_;
}

SetSNRThresholdResponse* SetSNRThresholdResponse::default_instance_ = NULL;

SetSNRThresholdResponse* SetSNRThresholdResponse::New() const {
  return new SetSNRThresholdResponse;
}

void SetSNRThresholdResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    messageid_ = 0;
    success_ = false;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetSNRThresholdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SETSNRTHRESHOLDRESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_messageID;
        break;
      }

      // optional int32 messageID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_success;
        break;
      }

      // optional bool success = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // optional string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_globalID;
        break;
      }

      // optional string globalID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetSNRThresholdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SETSNRTHRESHOLDRESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messageid(), output);
  }

  // optional bool success = 3;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }

  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }

  // optional string globalID = 5;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetSNRThresholdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SETSNRTHRESHOLDRESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messageid(), target);
  }

  // optional bool success = 3;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->success(), target);
  }

  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  // optional string globalID = 5;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetSNRThresholdResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SETSNRTHRESHOLDRESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 messageID = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

    // optional bool success = 3;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string globalID = 5;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetSNRThresholdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetSNRThresholdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetSNRThresholdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetSNRThresholdResponse::MergeFrom(const SetSNRThresholdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetSNRThresholdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSNRThresholdResponse::CopyFrom(const SetSNRThresholdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSNRThresholdResponse::IsInitialized() const {

  return true;
}

void SetSNRThresholdResponse::Swap(SetSNRThresholdResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(messageid_, other->messageid_);
    std::swap(success_, other->success_);
    std::swap(user_, other->user_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetSNRThresholdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetSNRThresholdResponse_descriptor_;
  metadata.reflection = SetSNRThresholdResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SignalSolutionRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SignalSolutionRequest::kMsgNameFieldNumber;
const int SignalSolutionRequest::kMessageIDFieldNumber;
const int SignalSolutionRequest::kTimeFieldNumber;
const int SignalSolutionRequest::kTimeTolFieldNumber;
const int SignalSolutionRequest::kFreqFieldNumber;
const int SignalSolutionRequest::kFreqTolFieldNumber;
const int SignalSolutionRequest::kUserFieldNumber;
const int SignalSolutionRequest::kGlobalIDFieldNumber;
#endif  // !_MSC_VER

SignalSolutionRequest::SignalSolutionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalSolutionRequest::InitAsDefaultInstance() {
}

SignalSolutionRequest::SignalSolutionRequest(const SignalSolutionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalSolutionRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  messageid_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  timetol_ = GOOGLE_LONGLONG(0);
  freq_ = GOOGLE_LONGLONG(0);
  freqtol_ = GOOGLE_LONGLONG(0);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalSolutionRequest::~SignalSolutionRequest() {
  SharedDtor();
}

void SignalSolutionRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void SignalSolutionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalSolutionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalSolutionRequest_descriptor_;
}

const SignalSolutionRequest& SignalSolutionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PinpointMessages_2eproto();
  return *default_instance_;
}

SignalSolutionRequest* SignalSolutionRequest::default_instance_ = NULL;

SignalSolutionRequest* SignalSolutionRequest::New() const {
  return new SignalSolutionRequest;
}

void SignalSolutionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    messageid_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    timetol_ = GOOGLE_LONGLONG(0);
    freq_ = GOOGLE_LONGLONG(0);
    freqtol_ = GOOGLE_LONGLONG(0);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalSolutionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SIGNALSOLUTIONREQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_messageID;
        break;
      }

      // optional int32 messageID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeTol;
        break;
      }

      // optional int64 timeTol = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeTol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timetol_)));
          set_has_timetol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_freq;
        break;
      }

      // optional int64 freq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_freqTol;
        break;
      }

      // optional int64 freqTol = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freqTol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freqtol_)));
          set_has_freqtol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_user;
        break;
      }

      // optional string user = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_globalID;
        break;
      }

      // optional string globalID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalSolutionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SIGNALSOLUTIONREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messageid(), output);
  }

  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // optional int64 timeTol = 4;
  if (has_timetol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timetol(), output);
  }

  // optional int64 freq = 5;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->freq(), output);
  }

  // optional int64 freqTol = 6;
  if (has_freqtol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->freqtol(), output);
  }

  // optional string user = 7;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->user(), output);
  }

  // optional string globalID = 8;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalSolutionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SIGNALSOLUTIONREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messageid(), target);
  }

  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // optional int64 timeTol = 4;
  if (has_timetol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timetol(), target);
  }

  // optional int64 freq = 5;
  if (has_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->freq(), target);
  }

  // optional int64 freqTol = 6;
  if (has_freqtol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->freqtol(), target);
  }

  // optional string user = 7;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->user(), target);
  }

  // optional string globalID = 8;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalSolutionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SIGNALSOLUTIONREQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 messageID = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int64 timeTol = 4;
    if (has_timetol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timetol());
    }

    // optional int64 freq = 5;
    if (has_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freq());
    }

    // optional int64 freqTol = 6;
    if (has_freqtol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freqtol());
    }

    // optional string user = 7;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string globalID = 8;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalSolutionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalSolutionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalSolutionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalSolutionRequest::MergeFrom(const SignalSolutionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_timetol()) {
      set_timetol(from.timetol());
    }
    if (from.has_freq()) {
      set_freq(from.freq());
    }
    if (from.has_freqtol()) {
      set_freqtol(from.freqtol());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalSolutionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalSolutionRequest::CopyFrom(const SignalSolutionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalSolutionRequest::IsInitialized() const {

  return true;
}

void SignalSolutionRequest::Swap(SignalSolutionRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(messageid_, other->messageid_);
    std::swap(time_, other->time_);
    std::swap(timetol_, other->timetol_);
    std::swap(freq_, other->freq_);
    std::swap(freqtol_, other->freqtol_);
    std::swap(user_, other->user_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalSolutionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalSolutionRequest_descriptor_;
  metadata.reflection = SignalSolutionRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SignalSolution::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SignalSolution::kMsgNameFieldNumber;
const int SignalSolution::kByteAmountFieldNumber;
const int SignalSolution::kFreqFieldNumber;
const int SignalSolution::kAzimuthFieldNumber;
const int SignalSolution::kElevationFieldNumber;
const int SignalSolution::kConfidenceFieldNumber;
const int SignalSolution::kLongitudeFieldNumber;
const int SignalSolution::kLatitudeFieldNumber;
const int SignalSolution::kStartTimeFieldNumber;
const int SignalSolution::kStopTimeFieldNumber;
const int SignalSolution::kHitTypeFieldNumber;
const int SignalSolution::kGlobalIDFieldNumber;
#endif  // !_MSC_VER

SignalSolution::SignalSolution()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalSolution::InitAsDefaultInstance() {
}

SignalSolution::SignalSolution(const SignalSolution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalSolution::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  byteamount_ = 0;
  freq_ = GOOGLE_LONGLONG(0);
  azimuth_ = 0;
  elevation_ = 0;
  confidence_ = 0;
  longitude_ = 0;
  latitude_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  stoptime_ = GOOGLE_LONGLONG(0);
  hittype_ = GOOGLE_LONGLONG(0);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalSolution::~SignalSolution() {
  SharedDtor();
}

void SignalSolution::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void SignalSolution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalSolution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalSolution_descriptor_;
}

const SignalSolution& SignalSolution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PinpointMessages_2eproto();
  return *default_instance_;
}

SignalSolution* SignalSolution::default_instance_ = NULL;

SignalSolution* SignalSolution::New() const {
  return new SignalSolution;
}

void SignalSolution::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    byteamount_ = 0;
    freq_ = GOOGLE_LONGLONG(0);
    azimuth_ = 0;
    elevation_ = 0;
    confidence_ = 0;
    longitude_ = 0;
    latitude_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    starttime_ = GOOGLE_LONGLONG(0);
    stoptime_ = GOOGLE_LONGLONG(0);
    hittype_ = GOOGLE_LONGLONG(0);
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalSolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SIGNALSOLUTION"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_byteAmount;
        break;
      }

      // optional int32 byteAmount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_byteAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &byteamount_)));
          set_has_byteamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_freq;
        break;
      }

      // optional int64 freq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_azimuth;
        break;
      }

      // optional float azimuth = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_elevation;
        break;
      }

      // optional float elevation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_confidence;
        break;
      }

      // optional float confidence = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_longitude;
        break;
      }

      // optional double longitude = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_latitude;
        break;
      }

      // optional double latitude = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_startTime;
        break;
      }

      // optional int64 startTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_stopTime;
        break;
      }

      // optional int64 stopTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stoptime_)));
          set_has_stoptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hitType;
        break;
      }

      // optional int64 hitType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hittype_)));
          set_has_hittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_globalID;
        break;
      }

      // optional string globalID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalSolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SIGNALSOLUTION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 byteAmount = 2;
  if (has_byteamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->byteamount(), output);
  }

  // optional int64 freq = 3;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->freq(), output);
  }

  // optional float azimuth = 4;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->azimuth(), output);
  }

  // optional float elevation = 5;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->elevation(), output);
  }

  // optional float confidence = 6;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->confidence(), output);
  }

  // optional double longitude = 7;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->longitude(), output);
  }

  // optional double latitude = 8;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->latitude(), output);
  }

  // optional int64 startTime = 9;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->starttime(), output);
  }

  // optional int64 stopTime = 10;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->stoptime(), output);
  }

  // optional int64 hitType = 11;
  if (has_hittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->hittype(), output);
  }

  // optional string globalID = 12;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalSolution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SIGNALSOLUTION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 byteAmount = 2;
  if (has_byteamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->byteamount(), target);
  }

  // optional int64 freq = 3;
  if (has_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->freq(), target);
  }

  // optional float azimuth = 4;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->azimuth(), target);
  }

  // optional float elevation = 5;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->elevation(), target);
  }

  // optional float confidence = 6;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->confidence(), target);
  }

  // optional double longitude = 7;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->longitude(), target);
  }

  // optional double latitude = 8;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->latitude(), target);
  }

  // optional int64 startTime = 9;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->starttime(), target);
  }

  // optional int64 stopTime = 10;
  if (has_stoptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->stoptime(), target);
  }

  // optional int64 hitType = 11;
  if (has_hittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->hittype(), target);
  }

  // optional string globalID = 12;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalSolution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SIGNALSOLUTION"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 byteAmount = 2;
    if (has_byteamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->byteamount());
    }

    // optional int64 freq = 3;
    if (has_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freq());
    }

    // optional float azimuth = 4;
    if (has_azimuth()) {
      total_size += 1 + 4;
    }

    // optional float elevation = 5;
    if (has_elevation()) {
      total_size += 1 + 4;
    }

    // optional float confidence = 6;
    if (has_confidence()) {
      total_size += 1 + 4;
    }

    // optional double longitude = 7;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double latitude = 8;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 startTime = 9;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int64 stopTime = 10;
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stoptime());
    }

    // optional int64 hitType = 11;
    if (has_hittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hittype());
    }

    // optional string globalID = 12;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalSolution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalSolution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalSolution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalSolution::MergeFrom(const SignalSolution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_byteamount()) {
      set_byteamount(from.byteamount());
    }
    if (from.has_freq()) {
      set_freq(from.freq());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
    if (from.has_hittype()) {
      set_hittype(from.hittype());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalSolution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalSolution::CopyFrom(const SignalSolution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalSolution::IsInitialized() const {

  return true;
}

void SignalSolution::Swap(SignalSolution* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(byteamount_, other->byteamount_);
    std::swap(freq_, other->freq_);
    std::swap(azimuth_, other->azimuth_);
    std::swap(elevation_, other->elevation_);
    std::swap(confidence_, other->confidence_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(hittype_, other->hittype_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalSolution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalSolution_descriptor_;
  metadata.reflection = SignalSolution_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SignalSolutionResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SignalSolutionResponse::kMsgNameFieldNumber;
const int SignalSolutionResponse::kMessageIDFieldNumber;
const int SignalSolutionResponse::kSigSolutionFieldNumber;
const int SignalSolutionResponse::kContinueFieldNumber;
const int SignalSolutionResponse::kUserFieldNumber;
const int SignalSolutionResponse::kGlobalIDFieldNumber;
#endif  // !_MSC_VER

SignalSolutionResponse::SignalSolutionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalSolutionResponse::InitAsDefaultInstance() {
}

SignalSolutionResponse::SignalSolutionResponse(const SignalSolutionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalSolutionResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  messageid_ = 0;
  continue__ = false;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalSolutionResponse::~SignalSolutionResponse() {
  SharedDtor();
}

void SignalSolutionResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void SignalSolutionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalSolutionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalSolutionResponse_descriptor_;
}

const SignalSolutionResponse& SignalSolutionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PinpointMessages_2eproto();
  return *default_instance_;
}

SignalSolutionResponse* SignalSolutionResponse::default_instance_ = NULL;

SignalSolutionResponse* SignalSolutionResponse::New() const {
  return new SignalSolutionResponse;
}

void SignalSolutionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    messageid_ = 0;
    continue__ = false;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  sigsolution_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalSolutionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SIGNALSOLUTIONRESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_messageID;
        break;
      }

      // optional int32 messageID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sigSolution;
        break;
      }

      // repeated .pinpoint_msg.SignalSolution sigSolution = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigSolution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sigsolution()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sigSolution;
        if (input->ExpectTag(32)) goto parse_continue;
        break;
      }

      // optional bool continue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &continue__)));
          set_has_continue_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional string user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_globalID;
        break;
      }

      // optional string globalID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalSolutionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SIGNALSOLUTIONRESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messageid(), output);
  }

  // repeated .pinpoint_msg.SignalSolution sigSolution = 3;
  for (int i = 0; i < this->sigsolution_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sigsolution(i), output);
  }

  // optional bool continue = 4;
  if (has_continue_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->continue_(), output);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user(), output);
  }

  // optional string globalID = 6;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalSolutionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SIGNALSOLUTIONRESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messageid(), target);
  }

  // repeated .pinpoint_msg.SignalSolution sigSolution = 3;
  for (int i = 0; i < this->sigsolution_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sigsolution(i), target);
  }

  // optional bool continue = 4;
  if (has_continue_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->continue_(), target);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  // optional string globalID = 6;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalSolutionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SIGNALSOLUTIONRESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 messageID = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

    // optional bool continue = 4;
    if (has_continue_()) {
      total_size += 1 + 1;
    }

    // optional string user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string globalID = 6;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  // repeated .pinpoint_msg.SignalSolution sigSolution = 3;
  total_size += 1 * this->sigsolution_size();
  for (int i = 0; i < this->sigsolution_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sigsolution(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalSolutionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalSolutionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalSolutionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalSolutionResponse::MergeFrom(const SignalSolutionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  sigsolution_.MergeFrom(from.sigsolution_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_continue_()) {
      set_continue_(from.continue_());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalSolutionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalSolutionResponse::CopyFrom(const SignalSolutionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalSolutionResponse::IsInitialized() const {

  return true;
}

void SignalSolutionResponse::Swap(SignalSolutionResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(messageid_, other->messageid_);
    sigsolution_.Swap(&other->sigsolution_);
    std::swap(continue__, other->continue__);
    std::swap(user_, other->user_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalSolutionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalSolutionResponse_descriptor_;
  metadata.reflection = SignalSolutionResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TunePoint::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int TunePoint::kMsgNameFieldNumber;
const int TunePoint::kMessageIDFieldNumber;
const int TunePoint::kCenterFreqFieldNumber;
const int TunePoint::kDwellTimeFieldNumber;
const int TunePoint::kUserFieldNumber;
const int TunePoint::kGlobalIDFieldNumber;
#endif  // !_MSC_VER

TunePoint::TunePoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TunePoint::InitAsDefaultInstance() {
}

TunePoint::TunePoint(const TunePoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TunePoint::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  messageid_ = 0;
  centerfreq_ = GOOGLE_LONGLONG(0);
  dwelltime_ = GOOGLE_LONGLONG(0);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TunePoint::~TunePoint() {
  SharedDtor();
}

void TunePoint::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void TunePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TunePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TunePoint_descriptor_;
}

const TunePoint& TunePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PinpointMessages_2eproto();
  return *default_instance_;
}

TunePoint* TunePoint::default_instance_ = NULL;

TunePoint* TunePoint::New() const {
  return new TunePoint;
}

void TunePoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    messageid_ = 0;
    centerfreq_ = GOOGLE_LONGLONG(0);
    dwelltime_ = GOOGLE_LONGLONG(0);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TunePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TUNEPOINT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_messageID;
        break;
      }

      // optional int32 messageID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_centerFreq;
        break;
      }

      // optional int64 centerFreq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_centerFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &centerfreq_)));
          set_has_centerfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dwellTime;
        break;
      }

      // optional int64 dwellTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwellTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwelltime_)));
          set_has_dwelltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional string user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_globalID;
        break;
      }

      // optional string globalID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TunePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TUNEPOINT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messageid(), output);
  }

  // optional int64 centerFreq = 3;
  if (has_centerfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->centerfreq(), output);
  }

  // optional int64 dwellTime = 4;
  if (has_dwelltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->dwelltime(), output);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user(), output);
  }

  // optional string globalID = 6;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TunePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TUNEPOINT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messageid(), target);
  }

  // optional int64 centerFreq = 3;
  if (has_centerfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->centerfreq(), target);
  }

  // optional int64 dwellTime = 4;
  if (has_dwelltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->dwelltime(), target);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  // optional string globalID = 6;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TunePoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TUNEPOINT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 messageID = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

    // optional int64 centerFreq = 3;
    if (has_centerfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->centerfreq());
    }

    // optional int64 dwellTime = 4;
    if (has_dwelltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwelltime());
    }

    // optional string user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string globalID = 6;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TunePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TunePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TunePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TunePoint::MergeFrom(const TunePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_centerfreq()) {
      set_centerfreq(from.centerfreq());
    }
    if (from.has_dwelltime()) {
      set_dwelltime(from.dwelltime());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TunePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunePoint::CopyFrom(const TunePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunePoint::IsInitialized() const {

  return true;
}

void TunePoint::Swap(TunePoint* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(messageid_, other->messageid_);
    std::swap(centerfreq_, other->centerfreq_);
    std::swap(dwelltime_, other->dwelltime_);
    std::swap(user_, other->user_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TunePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TunePoint_descriptor_;
  metadata.reflection = TunePoint_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SetTunePlanRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SetTunePlanRequest::kMsgNameFieldNumber;
const int SetTunePlanRequest::kMessageIDFieldNumber;
const int SetTunePlanRequest::kRepeatFieldNumber;
const int SetTunePlanRequest::kTunePlanFieldNumber;
const int SetTunePlanRequest::kUserFieldNumber;
const int SetTunePlanRequest::kGlobalIDFieldNumber;
#endif  // !_MSC_VER

SetTunePlanRequest::SetTunePlanRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetTunePlanRequest::InitAsDefaultInstance() {
}

SetTunePlanRequest::SetTunePlanRequest(const SetTunePlanRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetTunePlanRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  messageid_ = 0;
  repeat_ = false;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTunePlanRequest::~SetTunePlanRequest() {
  SharedDtor();
}

void SetTunePlanRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void SetTunePlanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTunePlanRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTunePlanRequest_descriptor_;
}

const SetTunePlanRequest& SetTunePlanRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PinpointMessages_2eproto();
  return *default_instance_;
}

SetTunePlanRequest* SetTunePlanRequest::default_instance_ = NULL;

SetTunePlanRequest* SetTunePlanRequest::New() const {
  return new SetTunePlanRequest;
}

void SetTunePlanRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    messageid_ = 0;
    repeat_ = false;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  tuneplan_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTunePlanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SETTUNEPLANREQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_messageID;
        break;
      }

      // optional int32 messageID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_repeat;
        break;
      }

      // optional bool repeat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &repeat_)));
          set_has_repeat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tunePlan;
        break;
      }

      // repeated .pinpoint_msg.TunePoint tunePlan = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tunePlan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tuneplan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tunePlan;
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional string user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_globalID;
        break;
      }

      // optional string globalID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetTunePlanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SETTUNEPLANREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messageid(), output);
  }

  // optional bool repeat = 3;
  if (has_repeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->repeat(), output);
  }

  // repeated .pinpoint_msg.TunePoint tunePlan = 4;
  for (int i = 0; i < this->tuneplan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tuneplan(i), output);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user(), output);
  }

  // optional string globalID = 6;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetTunePlanRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SETTUNEPLANREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messageid(), target);
  }

  // optional bool repeat = 3;
  if (has_repeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->repeat(), target);
  }

  // repeated .pinpoint_msg.TunePoint tunePlan = 4;
  for (int i = 0; i < this->tuneplan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tuneplan(i), target);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  // optional string globalID = 6;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetTunePlanRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SETTUNEPLANREQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 messageID = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

    // optional bool repeat = 3;
    if (has_repeat()) {
      total_size += 1 + 1;
    }

    // optional string user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string globalID = 6;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  // repeated .pinpoint_msg.TunePoint tunePlan = 4;
  total_size += 1 * this->tuneplan_size();
  for (int i = 0; i < this->tuneplan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tuneplan(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTunePlanRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTunePlanRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTunePlanRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetTunePlanRequest::MergeFrom(const SetTunePlanRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  tuneplan_.MergeFrom(from.tuneplan_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_repeat()) {
      set_repeat(from.repeat());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTunePlanRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTunePlanRequest::CopyFrom(const SetTunePlanRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTunePlanRequest::IsInitialized() const {

  return true;
}

void SetTunePlanRequest::Swap(SetTunePlanRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(messageid_, other->messageid_);
    std::swap(repeat_, other->repeat_);
    tuneplan_.Swap(&other->tuneplan_);
    std::swap(user_, other->user_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTunePlanRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTunePlanRequest_descriptor_;
  metadata.reflection = SetTunePlanRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TunePlanActiveResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int TunePlanActiveResponse::kMsgNameFieldNumber;
const int TunePlanActiveResponse::kMessageIDFieldNumber;
const int TunePlanActiveResponse::kActiveFieldNumber;
const int TunePlanActiveResponse::kUserFieldNumber;
const int TunePlanActiveResponse::kGlobalIDFieldNumber;
#endif  // !_MSC_VER

TunePlanActiveResponse::TunePlanActiveResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TunePlanActiveResponse::InitAsDefaultInstance() {
}

TunePlanActiveResponse::TunePlanActiveResponse(const TunePlanActiveResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TunePlanActiveResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  messageid_ = 0;
  active_ = false;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TunePlanActiveResponse::~TunePlanActiveResponse() {
  SharedDtor();
}

void TunePlanActiveResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void TunePlanActiveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TunePlanActiveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TunePlanActiveResponse_descriptor_;
}

const TunePlanActiveResponse& TunePlanActiveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PinpointMessages_2eproto();
  return *default_instance_;
}

TunePlanActiveResponse* TunePlanActiveResponse::default_instance_ = NULL;

TunePlanActiveResponse* TunePlanActiveResponse::New() const {
  return new TunePlanActiveResponse;
}

void TunePlanActiveResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    messageid_ = 0;
    active_ = false;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TunePlanActiveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TUNEPLANACTIVERESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_messageID;
        break;
      }

      // optional int32 messageID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active;
        break;
      }

      // optional bool active = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // optional string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_globalID;
        break;
      }

      // optional string globalID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TunePlanActiveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TUNEPLANACTIVERESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messageid(), output);
  }

  // optional bool active = 3;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->active(), output);
  }

  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }

  // optional string globalID = 5;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TunePlanActiveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TUNEPLANACTIVERESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messageid(), target);
  }

  // optional bool active = 3;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->active(), target);
  }

  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  // optional string globalID = 5;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TunePlanActiveResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TUNEPLANACTIVERESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 messageID = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

    // optional bool active = 3;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string globalID = 5;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TunePlanActiveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TunePlanActiveResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TunePlanActiveResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TunePlanActiveResponse::MergeFrom(const TunePlanActiveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TunePlanActiveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunePlanActiveResponse::CopyFrom(const TunePlanActiveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunePlanActiveResponse::IsInitialized() const {

  return true;
}

void TunePlanActiveResponse::Swap(TunePlanActiveResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(messageid_, other->messageid_);
    std::swap(active_, other->active_);
    std::swap(user_, other->user_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TunePlanActiveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TunePlanActiveResponse_descriptor_;
  metadata.reflection = TunePlanActiveResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TunePlanUpdateResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int TunePlanUpdateResponse::kMsgNameFieldNumber;
const int TunePlanUpdateResponse::kMessageIDFieldNumber;
const int TunePlanUpdateResponse::kSuccessFieldNumber;
const int TunePlanUpdateResponse::kLowFreqFieldNumber;
const int TunePlanUpdateResponse::kHiFreqFieldNumber;
const int TunePlanUpdateResponse::kUserFieldNumber;
const int TunePlanUpdateResponse::kGlobalIDFieldNumber;
#endif  // !_MSC_VER

TunePlanUpdateResponse::TunePlanUpdateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TunePlanUpdateResponse::InitAsDefaultInstance() {
}

TunePlanUpdateResponse::TunePlanUpdateResponse(const TunePlanUpdateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TunePlanUpdateResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  messageid_ = 0;
  success_ = false;
  lowfreq_ = GOOGLE_LONGLONG(0);
  hifreq_ = GOOGLE_LONGLONG(0);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TunePlanUpdateResponse::~TunePlanUpdateResponse() {
  SharedDtor();
}

void TunePlanUpdateResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void TunePlanUpdateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TunePlanUpdateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TunePlanUpdateResponse_descriptor_;
}

const TunePlanUpdateResponse& TunePlanUpdateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PinpointMessages_2eproto();
  return *default_instance_;
}

TunePlanUpdateResponse* TunePlanUpdateResponse::default_instance_ = NULL;

TunePlanUpdateResponse* TunePlanUpdateResponse::New() const {
  return new TunePlanUpdateResponse;
}

void TunePlanUpdateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    messageid_ = 0;
    success_ = false;
    lowfreq_ = GOOGLE_LONGLONG(0);
    hifreq_ = GOOGLE_LONGLONG(0);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TunePlanUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TUNEPLANUPDATERESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_messageID;
        break;
      }

      // optional int32 messageID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_success;
        break;
      }

      // optional bool success = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lowFreq;
        break;
      }

      // optional int64 lowFreq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lowFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lowfreq_)));
          set_has_lowfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hiFreq;
        break;
      }

      // optional int64 hiFreq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hiFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hifreq_)));
          set_has_hifreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user;
        break;
      }

      // optional string user = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_globalID;
        break;
      }

      // optional string globalID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TunePlanUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TUNEPLANUPDATERESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messageid(), output);
  }

  // optional bool success = 3;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }

  // optional int64 lowFreq = 4;
  if (has_lowfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->lowfreq(), output);
  }

  // optional int64 hiFreq = 5;
  if (has_hifreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->hifreq(), output);
  }

  // optional string user = 6;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user(), output);
  }

  // optional string globalID = 7;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TunePlanUpdateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TUNEPLANUPDATERESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messageid(), target);
  }

  // optional bool success = 3;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->success(), target);
  }

  // optional int64 lowFreq = 4;
  if (has_lowfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->lowfreq(), target);
  }

  // optional int64 hiFreq = 5;
  if (has_hifreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->hifreq(), target);
  }

  // optional string user = 6;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user(), target);
  }

  // optional string globalID = 7;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TunePlanUpdateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TUNEPLANUPDATERESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 messageID = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

    // optional bool success = 3;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional int64 lowFreq = 4;
    if (has_lowfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lowfreq());
    }

    // optional int64 hiFreq = 5;
    if (has_hifreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hifreq());
    }

    // optional string user = 6;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string globalID = 7;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TunePlanUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TunePlanUpdateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TunePlanUpdateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TunePlanUpdateResponse::MergeFrom(const TunePlanUpdateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_lowfreq()) {
      set_lowfreq(from.lowfreq());
    }
    if (from.has_hifreq()) {
      set_hifreq(from.hifreq());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TunePlanUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunePlanUpdateResponse::CopyFrom(const TunePlanUpdateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunePlanUpdateResponse::IsInitialized() const {

  return true;
}

void TunePlanUpdateResponse::Swap(TunePlanUpdateResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(messageid_, other->messageid_);
    std::swap(success_, other->success_);
    std::swap(lowfreq_, other->lowfreq_);
    std::swap(hifreq_, other->hifreq_);
    std::swap(user_, other->user_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TunePlanUpdateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TunePlanUpdateResponse_descriptor_;
  metadata.reflection = TunePlanUpdateResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SetGHzModeRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SetGHzModeRequest::kMsgNameFieldNumber;
const int SetGHzModeRequest::kMessageIDFieldNumber;
const int SetGHzModeRequest::kModeFieldNumber;
const int SetGHzModeRequest::kUserFieldNumber;
const int SetGHzModeRequest::kGlobalIDFieldNumber;
#endif  // !_MSC_VER

SetGHzModeRequest::SetGHzModeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetGHzModeRequest::InitAsDefaultInstance() {
}

SetGHzModeRequest::SetGHzModeRequest(const SetGHzModeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetGHzModeRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  messageid_ = 0;
  mode_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGHzModeRequest::~SetGHzModeRequest() {
  SharedDtor();
}

void SetGHzModeRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void SetGHzModeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGHzModeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGHzModeRequest_descriptor_;
}

const SetGHzModeRequest& SetGHzModeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PinpointMessages_2eproto();
  return *default_instance_;
}

SetGHzModeRequest* SetGHzModeRequest::default_instance_ = NULL;

SetGHzModeRequest* SetGHzModeRequest::New() const {
  return new SetGHzModeRequest;
}

void SetGHzModeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    messageid_ = 0;
    mode_ = 0;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGHzModeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SETGHZMODEREQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_messageID;
        break;
      }

      // optional int32 messageID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // optional int32 mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // optional string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_globalID;
        break;
      }

      // optional string globalID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetGHzModeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SETGHZMODEREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messageid(), output);
  }

  // optional int32 mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mode(), output);
  }

  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }

  // optional string globalID = 5;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetGHzModeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SETGHZMODEREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messageid(), target);
  }

  // optional int32 mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mode(), target);
  }

  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  // optional string globalID = 5;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetGHzModeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SETGHZMODEREQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 messageID = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

    // optional int32 mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string globalID = 5;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGHzModeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGHzModeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGHzModeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGHzModeRequest::MergeFrom(const SetGHzModeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGHzModeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGHzModeRequest::CopyFrom(const SetGHzModeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGHzModeRequest::IsInitialized() const {

  return true;
}

void SetGHzModeRequest::Swap(SetGHzModeRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(messageid_, other->messageid_);
    std::swap(mode_, other->mode_);
    std::swap(user_, other->user_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGHzModeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGHzModeRequest_descriptor_;
  metadata.reflection = SetGHzModeRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SetGHzModeResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SetGHzModeResponse::kMsgNameFieldNumber;
const int SetGHzModeResponse::kMessageIDFieldNumber;
const int SetGHzModeResponse::kSuccessFieldNumber;
const int SetGHzModeResponse::kUserFieldNumber;
const int SetGHzModeResponse::kGlobalIDFieldNumber;
#endif  // !_MSC_VER

SetGHzModeResponse::SetGHzModeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetGHzModeResponse::InitAsDefaultInstance() {
}

SetGHzModeResponse::SetGHzModeResponse(const SetGHzModeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetGHzModeResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  messageid_ = 0;
  success_ = false;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGHzModeResponse::~SetGHzModeResponse() {
  SharedDtor();
}

void SetGHzModeResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void SetGHzModeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGHzModeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGHzModeResponse_descriptor_;
}

const SetGHzModeResponse& SetGHzModeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PinpointMessages_2eproto();
  return *default_instance_;
}

SetGHzModeResponse* SetGHzModeResponse::default_instance_ = NULL;

SetGHzModeResponse* SetGHzModeResponse::New() const {
  return new SetGHzModeResponse;
}

void SetGHzModeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    messageid_ = 0;
    success_ = false;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGHzModeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SETGHZMODERESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_messageID;
        break;
      }

      // optional int32 messageID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_success;
        break;
      }

      // optional bool success = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // optional string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_globalID;
        break;
      }

      // optional string globalID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetGHzModeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SETGHZMODERESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messageid(), output);
  }

  // optional bool success = 3;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }

  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }

  // optional string globalID = 5;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetGHzModeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SETGHZMODERESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messageid(), target);
  }

  // optional bool success = 3;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->success(), target);
  }

  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  // optional string globalID = 5;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetGHzModeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SETGHZMODERESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 messageID = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

    // optional bool success = 3;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string globalID = 5;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGHzModeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGHzModeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGHzModeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGHzModeResponse::MergeFrom(const SetGHzModeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGHzModeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGHzModeResponse::CopyFrom(const SetGHzModeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGHzModeResponse::IsInitialized() const {

  return true;
}

void SetGHzModeResponse::Swap(SetGHzModeResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(messageid_, other->messageid_);
    std::swap(success_, other->success_);
    std::swap(user_, other->user_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGHzModeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGHzModeResponse_descriptor_;
  metadata.reflection = SetGHzModeResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pinpoint_msg

// @@protoc_insertion_point(global_scope)
