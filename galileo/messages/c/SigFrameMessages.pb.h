// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SigFrameMessages.proto

#ifndef PROTOBUF_SigFrameMessages_2eproto__INCLUDED
#define PROTOBUF_SigFrameMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fv {
namespace sf {
namespace protos {
namespace SFProtos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SigFrameMessages_2eproto();
void protobuf_AssignDesc_SigFrameMessages_2eproto();
void protobuf_ShutdownFile_SigFrameMessages_2eproto();

class SIGFrame;

// ===================================================================

class SIGFrame : public ::google::protobuf::Message {
 public:
  SIGFrame();
  virtual ~SIGFrame();

  SIGFrame(const SIGFrame& from);

  inline SIGFrame& operator=(const SIGFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SIGFrame& default_instance();

  void Swap(SIGFrame* other);

  // implements Message ----------------------------------------------

  SIGFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SIGFrame& from);
  void MergeFrom(const SIGFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "SIGFRAME"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional string signal_id = 2;
  inline bool has_signal_id() const;
  inline void clear_signal_id();
  static const int kSignalIdFieldNumber = 2;
  inline const ::std::string& signal_id() const;
  inline void set_signal_id(const ::std::string& value);
  inline void set_signal_id(const char* value);
  inline void set_signal_id(const char* value, size_t size);
  inline ::std::string* mutable_signal_id();
  inline ::std::string* release_signal_id();
  inline void set_allocated_signal_id(::std::string* signal_id);

  // optional double wholeSeconds = 3;
  inline bool has_wholeseconds() const;
  inline void clear_wholeseconds();
  static const int kWholeSecondsFieldNumber = 3;
  inline double wholeseconds() const;
  inline void set_wholeseconds(double value);

  // optional double fractionalSeconds = 4;
  inline bool has_fractionalseconds() const;
  inline void clear_fractionalseconds();
  static const int kFractionalSecondsFieldNumber = 4;
  inline double fractionalseconds() const;
  inline void set_fractionalseconds(double value);

  // optional double duration = 5;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 5;
  inline double duration() const;
  inline void set_duration(double value);

  // optional double center_frequency = 6;
  inline bool has_center_frequency() const;
  inline void clear_center_frequency();
  static const int kCenterFrequencyFieldNumber = 6;
  inline double center_frequency() const;
  inline void set_center_frequency(double value);

  // optional double center_freq_offset = 7;
  inline bool has_center_freq_offset() const;
  inline void clear_center_freq_offset();
  static const int kCenterFreqOffsetFieldNumber = 7;
  inline double center_freq_offset() const;
  inline void set_center_freq_offset(double value);

  // optional double sample_rate = 8;
  inline bool has_sample_rate() const;
  inline void clear_sample_rate();
  static const int kSampleRateFieldNumber = 8;
  inline double sample_rate() const;
  inline void set_sample_rate(double value);

  // optional double bandwidth = 9;
  inline bool has_bandwidth() const;
  inline void clear_bandwidth();
  static const int kBandwidthFieldNumber = 9;
  inline double bandwidth() const;
  inline void set_bandwidth(double value);

  // optional double power = 10;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 10;
  inline double power() const;
  inline void set_power(double value);

  // optional double ber = 11;
  inline bool has_ber() const;
  inline void clear_ber();
  static const int kBerFieldNumber = 11;
  inline double ber() const;
  inline void set_ber(double value);

  // optional int32 frame_length = 12 [default = 0];
  inline bool has_frame_length() const;
  inline void clear_frame_length();
  static const int kFrameLengthFieldNumber = 12;
  inline ::google::protobuf::int32 frame_length() const;
  inline void set_frame_length(::google::protobuf::int32 value);

  // optional bytes frame = 13;
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 13;
  inline const ::std::string& frame() const;
  inline void set_frame(const ::std::string& value);
  inline void set_frame(const char* value);
  inline void set_frame(const void* value, size_t size);
  inline ::std::string* mutable_frame();
  inline ::std::string* release_frame();
  inline void set_allocated_frame(::std::string* frame);

  // optional int32 tail_id = 14;
  inline bool has_tail_id() const;
  inline void clear_tail_id();
  static const int kTailIdFieldNumber = 14;
  inline ::google::protobuf::int32 tail_id() const;
  inline void set_tail_id(::google::protobuf::int32 value);

  // optional string sensorName = 15 [default = ""];
  inline bool has_sensorname() const;
  inline void clear_sensorname();
  static const int kSensorNameFieldNumber = 15;
  inline const ::std::string& sensorname() const;
  inline void set_sensorname(const ::std::string& value);
  inline void set_sensorname(const char* value);
  inline void set_sensorname(const char* value, size_t size);
  inline ::std::string* mutable_sensorname();
  inline ::std::string* release_sensorname();
  inline void set_allocated_sensorname(::std::string* sensorname);

  // optional string uuid = 16;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 16;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:fv.sf.protos.SFProtos.SIGFrame)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_signal_id();
  inline void clear_has_signal_id();
  inline void set_has_wholeseconds();
  inline void clear_has_wholeseconds();
  inline void set_has_fractionalseconds();
  inline void clear_has_fractionalseconds();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_center_frequency();
  inline void clear_has_center_frequency();
  inline void set_has_center_freq_offset();
  inline void clear_has_center_freq_offset();
  inline void set_has_sample_rate();
  inline void clear_has_sample_rate();
  inline void set_has_bandwidth();
  inline void clear_has_bandwidth();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_ber();
  inline void clear_has_ber();
  inline void set_has_frame_length();
  inline void clear_has_frame_length();
  inline void set_has_frame();
  inline void clear_has_frame();
  inline void set_has_tail_id();
  inline void clear_has_tail_id();
  inline void set_has_sensorname();
  inline void clear_has_sensorname();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* signal_id_;
  double wholeseconds_;
  double fractionalseconds_;
  double duration_;
  double center_frequency_;
  double center_freq_offset_;
  double sample_rate_;
  double bandwidth_;
  double power_;
  double ber_;
  ::std::string* frame_;
  ::google::protobuf::int32 frame_length_;
  ::google::protobuf::int32 tail_id_;
  ::std::string* sensorname_;
  ::std::string* uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_SigFrameMessages_2eproto();
  friend void protobuf_AssignDesc_SigFrameMessages_2eproto();
  friend void protobuf_ShutdownFile_SigFrameMessages_2eproto();

  void InitAsDefaultInstance();
  static SIGFrame* default_instance_;
};
// ===================================================================


// ===================================================================

// SIGFrame

// optional string msgName = 1 [default = "SIGFRAME"];
inline bool SIGFrame::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SIGFrame::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SIGFrame::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SIGFrame::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& SIGFrame::msgname() const {
  return *msgname_;
}
inline void SIGFrame::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SIGFrame::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SIGFrame::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SIGFrame::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* SIGFrame::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void SIGFrame::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional string signal_id = 2;
inline bool SIGFrame::has_signal_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SIGFrame::set_has_signal_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SIGFrame::clear_has_signal_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SIGFrame::clear_signal_id() {
  if (signal_id_ != &::google::protobuf::internal::kEmptyString) {
    signal_id_->clear();
  }
  clear_has_signal_id();
}
inline const ::std::string& SIGFrame::signal_id() const {
  return *signal_id_;
}
inline void SIGFrame::set_signal_id(const ::std::string& value) {
  set_has_signal_id();
  if (signal_id_ == &::google::protobuf::internal::kEmptyString) {
    signal_id_ = new ::std::string;
  }
  signal_id_->assign(value);
}
inline void SIGFrame::set_signal_id(const char* value) {
  set_has_signal_id();
  if (signal_id_ == &::google::protobuf::internal::kEmptyString) {
    signal_id_ = new ::std::string;
  }
  signal_id_->assign(value);
}
inline void SIGFrame::set_signal_id(const char* value, size_t size) {
  set_has_signal_id();
  if (signal_id_ == &::google::protobuf::internal::kEmptyString) {
    signal_id_ = new ::std::string;
  }
  signal_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SIGFrame::mutable_signal_id() {
  set_has_signal_id();
  if (signal_id_ == &::google::protobuf::internal::kEmptyString) {
    signal_id_ = new ::std::string;
  }
  return signal_id_;
}
inline ::std::string* SIGFrame::release_signal_id() {
  clear_has_signal_id();
  if (signal_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signal_id_;
    signal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SIGFrame::set_allocated_signal_id(::std::string* signal_id) {
  if (signal_id_ != &::google::protobuf::internal::kEmptyString) {
    delete signal_id_;
  }
  if (signal_id) {
    set_has_signal_id();
    signal_id_ = signal_id;
  } else {
    clear_has_signal_id();
    signal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double wholeSeconds = 3;
inline bool SIGFrame::has_wholeseconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SIGFrame::set_has_wholeseconds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SIGFrame::clear_has_wholeseconds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SIGFrame::clear_wholeseconds() {
  wholeseconds_ = 0;
  clear_has_wholeseconds();
}
inline double SIGFrame::wholeseconds() const {
  return wholeseconds_;
}
inline void SIGFrame::set_wholeseconds(double value) {
  set_has_wholeseconds();
  wholeseconds_ = value;
}

// optional double fractionalSeconds = 4;
inline bool SIGFrame::has_fractionalseconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SIGFrame::set_has_fractionalseconds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SIGFrame::clear_has_fractionalseconds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SIGFrame::clear_fractionalseconds() {
  fractionalseconds_ = 0;
  clear_has_fractionalseconds();
}
inline double SIGFrame::fractionalseconds() const {
  return fractionalseconds_;
}
inline void SIGFrame::set_fractionalseconds(double value) {
  set_has_fractionalseconds();
  fractionalseconds_ = value;
}

// optional double duration = 5;
inline bool SIGFrame::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SIGFrame::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SIGFrame::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SIGFrame::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline double SIGFrame::duration() const {
  return duration_;
}
inline void SIGFrame::set_duration(double value) {
  set_has_duration();
  duration_ = value;
}

// optional double center_frequency = 6;
inline bool SIGFrame::has_center_frequency() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SIGFrame::set_has_center_frequency() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SIGFrame::clear_has_center_frequency() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SIGFrame::clear_center_frequency() {
  center_frequency_ = 0;
  clear_has_center_frequency();
}
inline double SIGFrame::center_frequency() const {
  return center_frequency_;
}
inline void SIGFrame::set_center_frequency(double value) {
  set_has_center_frequency();
  center_frequency_ = value;
}

// optional double center_freq_offset = 7;
inline bool SIGFrame::has_center_freq_offset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SIGFrame::set_has_center_freq_offset() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SIGFrame::clear_has_center_freq_offset() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SIGFrame::clear_center_freq_offset() {
  center_freq_offset_ = 0;
  clear_has_center_freq_offset();
}
inline double SIGFrame::center_freq_offset() const {
  return center_freq_offset_;
}
inline void SIGFrame::set_center_freq_offset(double value) {
  set_has_center_freq_offset();
  center_freq_offset_ = value;
}

// optional double sample_rate = 8;
inline bool SIGFrame::has_sample_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SIGFrame::set_has_sample_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SIGFrame::clear_has_sample_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SIGFrame::clear_sample_rate() {
  sample_rate_ = 0;
  clear_has_sample_rate();
}
inline double SIGFrame::sample_rate() const {
  return sample_rate_;
}
inline void SIGFrame::set_sample_rate(double value) {
  set_has_sample_rate();
  sample_rate_ = value;
}

// optional double bandwidth = 9;
inline bool SIGFrame::has_bandwidth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SIGFrame::set_has_bandwidth() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SIGFrame::clear_has_bandwidth() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SIGFrame::clear_bandwidth() {
  bandwidth_ = 0;
  clear_has_bandwidth();
}
inline double SIGFrame::bandwidth() const {
  return bandwidth_;
}
inline void SIGFrame::set_bandwidth(double value) {
  set_has_bandwidth();
  bandwidth_ = value;
}

// optional double power = 10;
inline bool SIGFrame::has_power() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SIGFrame::set_has_power() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SIGFrame::clear_has_power() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SIGFrame::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline double SIGFrame::power() const {
  return power_;
}
inline void SIGFrame::set_power(double value) {
  set_has_power();
  power_ = value;
}

// optional double ber = 11;
inline bool SIGFrame::has_ber() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SIGFrame::set_has_ber() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SIGFrame::clear_has_ber() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SIGFrame::clear_ber() {
  ber_ = 0;
  clear_has_ber();
}
inline double SIGFrame::ber() const {
  return ber_;
}
inline void SIGFrame::set_ber(double value) {
  set_has_ber();
  ber_ = value;
}

// optional int32 frame_length = 12 [default = 0];
inline bool SIGFrame::has_frame_length() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SIGFrame::set_has_frame_length() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SIGFrame::clear_has_frame_length() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SIGFrame::clear_frame_length() {
  frame_length_ = 0;
  clear_has_frame_length();
}
inline ::google::protobuf::int32 SIGFrame::frame_length() const {
  return frame_length_;
}
inline void SIGFrame::set_frame_length(::google::protobuf::int32 value) {
  set_has_frame_length();
  frame_length_ = value;
}

// optional bytes frame = 13;
inline bool SIGFrame::has_frame() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SIGFrame::set_has_frame() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SIGFrame::clear_has_frame() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SIGFrame::clear_frame() {
  if (frame_ != &::google::protobuf::internal::kEmptyString) {
    frame_->clear();
  }
  clear_has_frame();
}
inline const ::std::string& SIGFrame::frame() const {
  return *frame_;
}
inline void SIGFrame::set_frame(const ::std::string& value) {
  set_has_frame();
  if (frame_ == &::google::protobuf::internal::kEmptyString) {
    frame_ = new ::std::string;
  }
  frame_->assign(value);
}
inline void SIGFrame::set_frame(const char* value) {
  set_has_frame();
  if (frame_ == &::google::protobuf::internal::kEmptyString) {
    frame_ = new ::std::string;
  }
  frame_->assign(value);
}
inline void SIGFrame::set_frame(const void* value, size_t size) {
  set_has_frame();
  if (frame_ == &::google::protobuf::internal::kEmptyString) {
    frame_ = new ::std::string;
  }
  frame_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SIGFrame::mutable_frame() {
  set_has_frame();
  if (frame_ == &::google::protobuf::internal::kEmptyString) {
    frame_ = new ::std::string;
  }
  return frame_;
}
inline ::std::string* SIGFrame::release_frame() {
  clear_has_frame();
  if (frame_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = frame_;
    frame_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SIGFrame::set_allocated_frame(::std::string* frame) {
  if (frame_ != &::google::protobuf::internal::kEmptyString) {
    delete frame_;
  }
  if (frame) {
    set_has_frame();
    frame_ = frame;
  } else {
    clear_has_frame();
    frame_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 tail_id = 14;
inline bool SIGFrame::has_tail_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SIGFrame::set_has_tail_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SIGFrame::clear_has_tail_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SIGFrame::clear_tail_id() {
  tail_id_ = 0;
  clear_has_tail_id();
}
inline ::google::protobuf::int32 SIGFrame::tail_id() const {
  return tail_id_;
}
inline void SIGFrame::set_tail_id(::google::protobuf::int32 value) {
  set_has_tail_id();
  tail_id_ = value;
}

// optional string sensorName = 15 [default = ""];
inline bool SIGFrame::has_sensorname() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SIGFrame::set_has_sensorname() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SIGFrame::clear_has_sensorname() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SIGFrame::clear_sensorname() {
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    sensorname_->clear();
  }
  clear_has_sensorname();
}
inline const ::std::string& SIGFrame::sensorname() const {
  return *sensorname_;
}
inline void SIGFrame::set_sensorname(const ::std::string& value) {
  set_has_sensorname();
  if (sensorname_ == &::google::protobuf::internal::kEmptyString) {
    sensorname_ = new ::std::string;
  }
  sensorname_->assign(value);
}
inline void SIGFrame::set_sensorname(const char* value) {
  set_has_sensorname();
  if (sensorname_ == &::google::protobuf::internal::kEmptyString) {
    sensorname_ = new ::std::string;
  }
  sensorname_->assign(value);
}
inline void SIGFrame::set_sensorname(const char* value, size_t size) {
  set_has_sensorname();
  if (sensorname_ == &::google::protobuf::internal::kEmptyString) {
    sensorname_ = new ::std::string;
  }
  sensorname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SIGFrame::mutable_sensorname() {
  set_has_sensorname();
  if (sensorname_ == &::google::protobuf::internal::kEmptyString) {
    sensorname_ = new ::std::string;
  }
  return sensorname_;
}
inline ::std::string* SIGFrame::release_sensorname() {
  clear_has_sensorname();
  if (sensorname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sensorname_;
    sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SIGFrame::set_allocated_sensorname(::std::string* sensorname) {
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (sensorname) {
    set_has_sensorname();
    sensorname_ = sensorname;
  } else {
    clear_has_sensorname();
    sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string uuid = 16;
inline bool SIGFrame::has_uuid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SIGFrame::set_has_uuid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SIGFrame::clear_has_uuid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SIGFrame::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& SIGFrame::uuid() const {
  return *uuid_;
}
inline void SIGFrame::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void SIGFrame::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void SIGFrame::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SIGFrame::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* SIGFrame::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SIGFrame::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SFProtos
}  // namespace protos
}  // namespace sf
}  // namespace fv

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SigFrameMessages_2eproto__INCLUDED
