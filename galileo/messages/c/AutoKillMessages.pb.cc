// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AutoKillMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AutoKillMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace auto_kill_msg {

namespace {

const ::google::protobuf::Descriptor* StateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OverrideState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OverrideState_reflection_ = NULL;
const ::google::protobuf::Descriptor* COAConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  COAConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoKillGUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoKillGUI_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AutoKillMessages_2eproto() {
  protobuf_AddDesc_AutoKillMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AutoKillMessages.proto");
  GOOGLE_CHECK(file != NULL);
  StateResponse_descriptor_ = file->message_type(0);
  static const int StateResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateResponse, errorvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateResponse, taskname_),
  };
  StateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateResponse_descriptor_,
      StateResponse::default_instance_,
      StateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateResponse));
  OverrideState_descriptor_ = file->message_type(1);
  static const int OverrideState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverrideState, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverrideState, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverrideState, newstate_),
  };
  OverrideState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OverrideState_descriptor_,
      OverrideState::default_instance_,
      OverrideState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverrideState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverrideState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OverrideState));
  COAConfig_descriptor_ = file->message_type(2);
  static const int COAConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COAConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COAConfig, xmlcoa_),
  };
  COAConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      COAConfig_descriptor_,
      COAConfig::default_instance_,
      COAConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COAConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COAConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(COAConfig));
  AutoKillGUI_descriptor_ = file->message_type(3);
  static const int AutoKillGUI_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoKillGUI, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoKillGUI, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoKillGUI, transition_),
  };
  AutoKillGUI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoKillGUI_descriptor_,
      AutoKillGUI::default_instance_,
      AutoKillGUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoKillGUI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoKillGUI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoKillGUI));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AutoKillMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateResponse_descriptor_, &StateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OverrideState_descriptor_, &OverrideState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    COAConfig_descriptor_, &COAConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoKillGUI_descriptor_, &AutoKillGUI::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AutoKillMessages_2eproto() {
  delete StateResponse::default_instance_;
  delete StateResponse_reflection_;
  delete StateResponse::_default_msgname_;
  delete OverrideState::default_instance_;
  delete OverrideState_reflection_;
  delete OverrideState::_default_msgname_;
  delete COAConfig::default_instance_;
  delete COAConfig_reflection_;
  delete COAConfig::_default_msgname_;
  delete AutoKillGUI::default_instance_;
  delete AutoKillGUI_reflection_;
  delete AutoKillGUI::_default_msgname_;
}

void protobuf_AddDesc_AutoKillMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026AutoKillMessages.proto\022\rauto_kill_msg\""
    "p\n\rStateResponse\022\036\n\007msgName\030\001 \001(\t:\rSTATE"
    "RESPONSE\022\026\n\007success\030\002 \001(\010:\005false\022\025\n\nerro"
    "rValue\030\003 \001(\005:\0010\022\020\n\010taskName\030\004 \001(\t\"P\n\rOve"
    "rrideState\022\036\n\007msgName\030\001 \001(\t:\rOVERRIDESTA"
    "TE\022\r\n\005appID\030\002 \001(\005\022\020\n\010newState\030\003 \001(\t\"7\n\tC"
    "OAConfig\022\032\n\007msgName\030\001 \001(\t:\tCOACONFIG\022\016\n\006"
    "xmlCOA\030\002 \003(\t\"N\n\013AutoKillGUI\022\034\n\007msgName\030\001"
    " \001(\t:\013AUTOKILLGUI\022\r\n\005state\030\002 \001(\t\022\022\n\ntran"
    "sition\030\003 \001(\tB\025\n\023fv.protos.kepsvisor", 395);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AutoKillMessages.proto", &protobuf_RegisterTypes);
  StateResponse::_default_msgname_ =
      new ::std::string("STATERESPONSE", 13);
  StateResponse::default_instance_ = new StateResponse();
  OverrideState::_default_msgname_ =
      new ::std::string("OVERRIDESTATE", 13);
  OverrideState::default_instance_ = new OverrideState();
  COAConfig::_default_msgname_ =
      new ::std::string("COACONFIG", 9);
  COAConfig::default_instance_ = new COAConfig();
  AutoKillGUI::_default_msgname_ =
      new ::std::string("AUTOKILLGUI", 11);
  AutoKillGUI::default_instance_ = new AutoKillGUI();
  StateResponse::default_instance_->InitAsDefaultInstance();
  OverrideState::default_instance_->InitAsDefaultInstance();
  COAConfig::default_instance_->InitAsDefaultInstance();
  AutoKillGUI::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AutoKillMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AutoKillMessages_2eproto {
  StaticDescriptorInitializer_AutoKillMessages_2eproto() {
    protobuf_AddDesc_AutoKillMessages_2eproto();
  }
} static_descriptor_initializer_AutoKillMessages_2eproto_;

// ===================================================================

::std::string* StateResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int StateResponse::kMsgNameFieldNumber;
const int StateResponse::kSuccessFieldNumber;
const int StateResponse::kErrorValueFieldNumber;
const int StateResponse::kTaskNameFieldNumber;
#endif  // !_MSC_VER

StateResponse::StateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StateResponse::InitAsDefaultInstance() {
}

StateResponse::StateResponse(const StateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StateResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  success_ = false;
  errorvalue_ = 0;
  taskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateResponse::~StateResponse() {
  SharedDtor();
}

void StateResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (taskname_ != &::google::protobuf::internal::kEmptyString) {
    delete taskname_;
  }
  if (this != default_instance_) {
  }
}

void StateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateResponse_descriptor_;
}

const StateResponse& StateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AutoKillMessages_2eproto();
  return *default_instance_;
}

StateResponse* StateResponse::default_instance_ = NULL;

StateResponse* StateResponse::New() const {
  return new StateResponse;
}

void StateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    success_ = false;
    errorvalue_ = 0;
    if (has_taskname()) {
      if (taskname_ != &::google::protobuf::internal::kEmptyString) {
        taskname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "STATERESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // optional bool success = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_errorValue;
        break;
      }

      // optional int32 errorValue = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorvalue_)));
          set_has_errorvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_taskName;
        break;
      }

      // optional string taskName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskname().data(), this->taskname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "STATERESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool success = 2 [default = false];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // optional int32 errorValue = 3 [default = 0];
  if (has_errorvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorvalue(), output);
  }

  // optional string taskName = 4;
  if (has_taskname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskname().data(), this->taskname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->taskname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "STATERESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool success = 2 [default = false];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // optional int32 errorValue = 3 [default = 0];
  if (has_errorvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errorvalue(), target);
  }

  // optional string taskName = 4;
  if (has_taskname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskname().data(), this->taskname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->taskname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "STATERESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool success = 2 [default = false];
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional int32 errorValue = 3 [default = 0];
    if (has_errorvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorvalue());
    }

    // optional string taskName = 4;
    if (has_taskname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateResponse::MergeFrom(const StateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_errorvalue()) {
      set_errorvalue(from.errorvalue());
    }
    if (from.has_taskname()) {
      set_taskname(from.taskname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateResponse::CopyFrom(const StateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateResponse::IsInitialized() const {

  return true;
}

void StateResponse::Swap(StateResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(success_, other->success_);
    std::swap(errorvalue_, other->errorvalue_);
    std::swap(taskname_, other->taskname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateResponse_descriptor_;
  metadata.reflection = StateResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* OverrideState::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int OverrideState::kMsgNameFieldNumber;
const int OverrideState::kAppIDFieldNumber;
const int OverrideState::kNewStateFieldNumber;
#endif  // !_MSC_VER

OverrideState::OverrideState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OverrideState::InitAsDefaultInstance() {
}

OverrideState::OverrideState(const OverrideState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OverrideState::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  appid_ = 0;
  newstate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OverrideState::~OverrideState() {
  SharedDtor();
}

void OverrideState::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (newstate_ != &::google::protobuf::internal::kEmptyString) {
    delete newstate_;
  }
  if (this != default_instance_) {
  }
}

void OverrideState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OverrideState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OverrideState_descriptor_;
}

const OverrideState& OverrideState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AutoKillMessages_2eproto();
  return *default_instance_;
}

OverrideState* OverrideState::default_instance_ = NULL;

OverrideState* OverrideState::New() const {
  return new OverrideState;
}

void OverrideState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    appid_ = 0;
    if (has_newstate()) {
      if (newstate_ != &::google::protobuf::internal::kEmptyString) {
        newstate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OverrideState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "OVERRIDESTATE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appID;
        break;
      }

      // optional int32 appID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_newState;
        break;
      }

      // optional string newState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newstate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newstate().data(), this->newstate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OverrideState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "OVERRIDESTATE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  // optional string newState = 3;
  if (has_newstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newstate().data(), this->newstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->newstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OverrideState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "OVERRIDESTATE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  // optional string newState = 3;
  if (has_newstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newstate().data(), this->newstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->newstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OverrideState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "OVERRIDESTATE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 appID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional string newState = 3;
    if (has_newstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OverrideState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OverrideState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OverrideState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OverrideState::MergeFrom(const OverrideState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_newstate()) {
      set_newstate(from.newstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OverrideState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OverrideState::CopyFrom(const OverrideState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverrideState::IsInitialized() const {

  return true;
}

void OverrideState::Swap(OverrideState* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(appid_, other->appid_);
    std::swap(newstate_, other->newstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OverrideState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OverrideState_descriptor_;
  metadata.reflection = OverrideState_reflection_;
  return metadata;
}


// ===================================================================

::std::string* COAConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int COAConfig::kMsgNameFieldNumber;
const int COAConfig::kXmlCOAFieldNumber;
#endif  // !_MSC_VER

COAConfig::COAConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void COAConfig::InitAsDefaultInstance() {
}

COAConfig::COAConfig(const COAConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void COAConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

COAConfig::~COAConfig() {
  SharedDtor();
}

void COAConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void COAConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* COAConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COAConfig_descriptor_;
}

const COAConfig& COAConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AutoKillMessages_2eproto();
  return *default_instance_;
}

COAConfig* COAConfig::default_instance_ = NULL;

COAConfig* COAConfig::New() const {
  return new COAConfig;
}

void COAConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  xmlcoa_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool COAConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "COACONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xmlCOA;
        break;
      }

      // repeated string xmlCOA = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xmlCOA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_xmlcoa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xmlcoa(this->xmlcoa_size() - 1).data(),
            this->xmlcoa(this->xmlcoa_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xmlCOA;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void COAConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "COACONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated string xmlCOA = 2;
  for (int i = 0; i < this->xmlcoa_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->xmlcoa(i).data(), this->xmlcoa(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->xmlcoa(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* COAConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "COACONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated string xmlCOA = 2;
  for (int i = 0; i < this->xmlcoa_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlcoa(i).data(), this->xmlcoa(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->xmlcoa(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int COAConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "COACONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  // repeated string xmlCOA = 2;
  total_size += 1 * this->xmlcoa_size();
  for (int i = 0; i < this->xmlcoa_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->xmlcoa(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COAConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const COAConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const COAConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void COAConfig::MergeFrom(const COAConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  xmlcoa_.MergeFrom(from.xmlcoa_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void COAConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COAConfig::CopyFrom(const COAConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COAConfig::IsInitialized() const {

  return true;
}

void COAConfig::Swap(COAConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    xmlcoa_.Swap(&other->xmlcoa_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata COAConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = COAConfig_descriptor_;
  metadata.reflection = COAConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* AutoKillGUI::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int AutoKillGUI::kMsgNameFieldNumber;
const int AutoKillGUI::kStateFieldNumber;
const int AutoKillGUI::kTransitionFieldNumber;
#endif  // !_MSC_VER

AutoKillGUI::AutoKillGUI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AutoKillGUI::InitAsDefaultInstance() {
}

AutoKillGUI::AutoKillGUI(const AutoKillGUI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AutoKillGUI::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoKillGUI::~AutoKillGUI() {
  SharedDtor();
}

void AutoKillGUI::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    delete state_;
  }
  if (transition_ != &::google::protobuf::internal::kEmptyString) {
    delete transition_;
  }
  if (this != default_instance_) {
  }
}

void AutoKillGUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoKillGUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoKillGUI_descriptor_;
}

const AutoKillGUI& AutoKillGUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AutoKillMessages_2eproto();
  return *default_instance_;
}

AutoKillGUI* AutoKillGUI::default_instance_ = NULL;

AutoKillGUI* AutoKillGUI::New() const {
  return new AutoKillGUI;
}

void AutoKillGUI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::kEmptyString) {
        state_->clear();
      }
    }
    if (has_transition()) {
      if (transition_ != &::google::protobuf::internal::kEmptyString) {
        transition_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoKillGUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "AUTOKILLGUI"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // optional string state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_transition;
        break;
      }

      // optional string transition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transition().data(), this->transition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutoKillGUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "AUTOKILLGUI"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->state(), output);
  }

  // optional string transition = 3;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transition().data(), this->transition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->transition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutoKillGUI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "AUTOKILLGUI"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->state(), target);
  }

  // optional string transition = 3;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transition().data(), this->transition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->transition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutoKillGUI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "AUTOKILLGUI"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional string transition = 3;
    if (has_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transition());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoKillGUI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoKillGUI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoKillGUI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoKillGUI::MergeFrom(const AutoKillGUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_transition()) {
      set_transition(from.transition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoKillGUI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoKillGUI::CopyFrom(const AutoKillGUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoKillGUI::IsInitialized() const {

  return true;
}

void AutoKillGUI::Swap(AutoKillGUI* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(state_, other->state_);
    std::swap(transition_, other->transition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoKillGUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoKillGUI_descriptor_;
  metadata.reflection = AutoKillGUI_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace auto_kill_msg

// @@protoc_insertion_point(global_scope)
