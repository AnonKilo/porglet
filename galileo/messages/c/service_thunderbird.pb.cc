// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_thunderbird.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service_thunderbird.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace service_thunderbird {

namespace {

const ::google::protobuf::Descriptor* ThunderbirdConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThunderbirdConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThunderbirdConfig_MuxtxConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThunderbirdConfig_MuxtxConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThunderbirdConfig_ThrottleHeadersConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThunderbirdConfig_ThrottleHeadersConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThunderbirdConfig_TBChannelConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThunderbirdConfig_TBChannelConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_5fthunderbird_2eproto() {
  protobuf_AddDesc_service_5fthunderbird_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service_thunderbird.proto");
  GOOGLE_CHECK(file != NULL);
  ThunderbirdConfig_descriptor_ = file->message_type(0);
  static const int ThunderbirdConfig_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig, script_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig, gaindb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig, numberzpipeportsperchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig, ewcapabilitiesrebroadcastcooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig, ewtransmittingrebroadcastcooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig, plotoutputspectrumenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig, plotoutputspectrumthinned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig, xpipemonitorenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig, muxtxconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig, throttleheadersconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig, tbchannels_),
  };
  ThunderbirdConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThunderbirdConfig_descriptor_,
      ThunderbirdConfig::default_instance_,
      ThunderbirdConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThunderbirdConfig));
  ThunderbirdConfig_MuxtxConfig_descriptor_ = ThunderbirdConfig_descriptor_->nested_type(0);
  static const int ThunderbirdConfig_MuxtxConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig_MuxtxConfig, midasprocesspriority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig_MuxtxConfig, outputsamplesperheader_),
  };
  ThunderbirdConfig_MuxtxConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThunderbirdConfig_MuxtxConfig_descriptor_,
      ThunderbirdConfig_MuxtxConfig::default_instance_,
      ThunderbirdConfig_MuxtxConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig_MuxtxConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig_MuxtxConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThunderbirdConfig_MuxtxConfig));
  ThunderbirdConfig_ThrottleHeadersConfig_descriptor_ = ThunderbirdConfig_descriptor_->nested_type(1);
  static const int ThunderbirdConfig_ThrottleHeadersConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig_ThrottleHeadersConfig, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig_ThrottleHeadersConfig, throttletimeoffset_),
  };
  ThunderbirdConfig_ThrottleHeadersConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThunderbirdConfig_ThrottleHeadersConfig_descriptor_,
      ThunderbirdConfig_ThrottleHeadersConfig::default_instance_,
      ThunderbirdConfig_ThrottleHeadersConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig_ThrottleHeadersConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig_ThrottleHeadersConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThunderbirdConfig_ThrottleHeadersConfig));
  ThunderbirdConfig_TBChannelConfig_descriptor_ = ThunderbirdConfig_descriptor_->nested_type(2);
  static const int ThunderbirdConfig_TBChannelConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig_TBChannelConfig, channelnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig_TBChannelConfig, samplerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig_TBChannelConfig, minfreqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig_TBChannelConfig, maxfreqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig_TBChannelConfig, zpipeport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig_TBChannelConfig, device_),
  };
  ThunderbirdConfig_TBChannelConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThunderbirdConfig_TBChannelConfig_descriptor_,
      ThunderbirdConfig_TBChannelConfig::default_instance_,
      ThunderbirdConfig_TBChannelConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig_TBChannelConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThunderbirdConfig_TBChannelConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThunderbirdConfig_TBChannelConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_5fthunderbird_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThunderbirdConfig_descriptor_, &ThunderbirdConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThunderbirdConfig_MuxtxConfig_descriptor_, &ThunderbirdConfig_MuxtxConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThunderbirdConfig_ThrottleHeadersConfig_descriptor_, &ThunderbirdConfig_ThrottleHeadersConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThunderbirdConfig_TBChannelConfig_descriptor_, &ThunderbirdConfig_TBChannelConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_5fthunderbird_2eproto() {
  delete ThunderbirdConfig::default_instance_;
  delete ThunderbirdConfig_reflection_;
  delete ThunderbirdConfig::_default_msgname_;
  delete ThunderbirdConfig_MuxtxConfig::default_instance_;
  delete ThunderbirdConfig_MuxtxConfig_reflection_;
  delete ThunderbirdConfig_ThrottleHeadersConfig::default_instance_;
  delete ThunderbirdConfig_ThrottleHeadersConfig_reflection_;
  delete ThunderbirdConfig_TBChannelConfig::default_instance_;
  delete ThunderbirdConfig_TBChannelConfig_reflection_;
  delete ThunderbirdConfig_TBChannelConfig::_default_device_;
}

void protobuf_AddDesc_service_5fthunderbird_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031service_thunderbird.proto\022\023service_thu"
    "nderbird\"\320\007\n\021ThunderbirdConfig\0226\n\007msgNam"
    "e\030\001 \001(\t:%service_thunderbird.Thunderbird"
    "Config\022\016\n\006script\030\002 \001(\t\022\022\n\006gaindb\030\004 \001(\002:\002"
    "30\022&\n\032numberZPipePortsPerChannel\030\006 \001(\005:\002"
    "30\022\020\n\005index\030\010 \001(\005:\0012\022,\n!ewCapabilitiesRe"
    "broadcastCooldown\030e \001(\001:\0015\022,\n!ewTransmit"
    "tingRebroadcastCooldown\030f \001(\001:\0015\022(\n\031plot"
    "OutputSpectrumEnabled\030\013 \001(\010:\005false\022\'\n\031pl"
    "otOutputSpectrumThinned\030\014 \001(\010:\004true\022!\n\023x"
    "pipemonitorEnabled\030\r \001(\010:\004true\022G\n\013muxtxC"
    "onfig\030\016 \001(\01322.service_thunderbird.Thunde"
    "rbirdConfig.MuxtxConfig\022[\n\025throttleHeade"
    "rsConfig\030\017 \001(\0132<.service_thunderbird.Thu"
    "nderbirdConfig.ThrottleHeadersConfig\022J\n\n"
    "tbChannels\030\020 \003(\01326.service_thunderbird.T"
    "hunderbirdConfig.TBChannelConfig\032`\n\013Muxt"
    "xConfig\022)\n\024midasProcessPriority\030\001 \001(\005:\013-"
    "2147483648\022&\n\026outputSamplesPerHeader\030\002 \001"
    "(\005:\006262144\032O\n\025ThrottleHeadersConfig\022\026\n\007e"
    "nabled\030\001 \001(\010:\005false\022\036\n\022throttleTimeOffse"
    "t\030\002 \001(\001:\00220\032\255\001\n\017TBChannelConfig\022\030\n\rchann"
    "elNumber\030\001 \001(\005:\0011\022\035\n\nsampleRate\030\002 \001(\001:\t1"
    "00000000\022\026\n\nminFreqMHz\030\003 \001(\001:\00220\022\030\n\nmaxF"
    "reqMHz\030\004 \001(\001:\0046000\022\030\n\tzpipeport\030\005 \001(\005:\0053"
    "8599\022\025\n\006device\030\006 \001(\t:\005ZPIPE", 1027);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service_thunderbird.proto", &protobuf_RegisterTypes);
  ThunderbirdConfig::_default_msgname_ =
      new ::std::string("service_thunderbird.ThunderbirdConfig", 37);
  ThunderbirdConfig::default_instance_ = new ThunderbirdConfig();
  ThunderbirdConfig_MuxtxConfig::default_instance_ = new ThunderbirdConfig_MuxtxConfig();
  ThunderbirdConfig_ThrottleHeadersConfig::default_instance_ = new ThunderbirdConfig_ThrottleHeadersConfig();
  ThunderbirdConfig_TBChannelConfig::_default_device_ =
      new ::std::string("ZPIPE", 5);
  ThunderbirdConfig_TBChannelConfig::default_instance_ = new ThunderbirdConfig_TBChannelConfig();
  ThunderbirdConfig::default_instance_->InitAsDefaultInstance();
  ThunderbirdConfig_MuxtxConfig::default_instance_->InitAsDefaultInstance();
  ThunderbirdConfig_ThrottleHeadersConfig::default_instance_->InitAsDefaultInstance();
  ThunderbirdConfig_TBChannelConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_5fthunderbird_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_5fthunderbird_2eproto {
  StaticDescriptorInitializer_service_5fthunderbird_2eproto() {
    protobuf_AddDesc_service_5fthunderbird_2eproto();
  }
} static_descriptor_initializer_service_5fthunderbird_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ThunderbirdConfig_MuxtxConfig::kMidasProcessPriorityFieldNumber;
const int ThunderbirdConfig_MuxtxConfig::kOutputSamplesPerHeaderFieldNumber;
#endif  // !_MSC_VER

ThunderbirdConfig_MuxtxConfig::ThunderbirdConfig_MuxtxConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThunderbirdConfig_MuxtxConfig::InitAsDefaultInstance() {
}

ThunderbirdConfig_MuxtxConfig::ThunderbirdConfig_MuxtxConfig(const ThunderbirdConfig_MuxtxConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThunderbirdConfig_MuxtxConfig::SharedCtor() {
  _cached_size_ = 0;
  midasprocesspriority_ = -0x80000000;
  outputsamplesperheader_ = 262144;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThunderbirdConfig_MuxtxConfig::~ThunderbirdConfig_MuxtxConfig() {
  SharedDtor();
}

void ThunderbirdConfig_MuxtxConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThunderbirdConfig_MuxtxConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThunderbirdConfig_MuxtxConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThunderbirdConfig_MuxtxConfig_descriptor_;
}

const ThunderbirdConfig_MuxtxConfig& ThunderbirdConfig_MuxtxConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fthunderbird_2eproto();
  return *default_instance_;
}

ThunderbirdConfig_MuxtxConfig* ThunderbirdConfig_MuxtxConfig::default_instance_ = NULL;

ThunderbirdConfig_MuxtxConfig* ThunderbirdConfig_MuxtxConfig::New() const {
  return new ThunderbirdConfig_MuxtxConfig;
}

void ThunderbirdConfig_MuxtxConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    midasprocesspriority_ = -0x80000000;
    outputsamplesperheader_ = 262144;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThunderbirdConfig_MuxtxConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 midasProcessPriority = 1 [default = -2147483648];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &midasprocesspriority_)));
          set_has_midasprocesspriority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outputSamplesPerHeader;
        break;
      }

      // optional int32 outputSamplesPerHeader = 2 [default = 262144];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outputSamplesPerHeader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outputsamplesperheader_)));
          set_has_outputsamplesperheader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThunderbirdConfig_MuxtxConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 midasProcessPriority = 1 [default = -2147483648];
  if (has_midasprocesspriority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->midasprocesspriority(), output);
  }

  // optional int32 outputSamplesPerHeader = 2 [default = 262144];
  if (has_outputsamplesperheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->outputsamplesperheader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThunderbirdConfig_MuxtxConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 midasProcessPriority = 1 [default = -2147483648];
  if (has_midasprocesspriority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->midasprocesspriority(), target);
  }

  // optional int32 outputSamplesPerHeader = 2 [default = 262144];
  if (has_outputsamplesperheader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->outputsamplesperheader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThunderbirdConfig_MuxtxConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 midasProcessPriority = 1 [default = -2147483648];
    if (has_midasprocesspriority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->midasprocesspriority());
    }

    // optional int32 outputSamplesPerHeader = 2 [default = 262144];
    if (has_outputsamplesperheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outputsamplesperheader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThunderbirdConfig_MuxtxConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThunderbirdConfig_MuxtxConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThunderbirdConfig_MuxtxConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThunderbirdConfig_MuxtxConfig::MergeFrom(const ThunderbirdConfig_MuxtxConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_midasprocesspriority()) {
      set_midasprocesspriority(from.midasprocesspriority());
    }
    if (from.has_outputsamplesperheader()) {
      set_outputsamplesperheader(from.outputsamplesperheader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThunderbirdConfig_MuxtxConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThunderbirdConfig_MuxtxConfig::CopyFrom(const ThunderbirdConfig_MuxtxConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThunderbirdConfig_MuxtxConfig::IsInitialized() const {

  return true;
}

void ThunderbirdConfig_MuxtxConfig::Swap(ThunderbirdConfig_MuxtxConfig* other) {
  if (other != this) {
    std::swap(midasprocesspriority_, other->midasprocesspriority_);
    std::swap(outputsamplesperheader_, other->outputsamplesperheader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThunderbirdConfig_MuxtxConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThunderbirdConfig_MuxtxConfig_descriptor_;
  metadata.reflection = ThunderbirdConfig_MuxtxConfig_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ThunderbirdConfig_ThrottleHeadersConfig::kEnabledFieldNumber;
const int ThunderbirdConfig_ThrottleHeadersConfig::kThrottleTimeOffsetFieldNumber;
#endif  // !_MSC_VER

ThunderbirdConfig_ThrottleHeadersConfig::ThunderbirdConfig_ThrottleHeadersConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThunderbirdConfig_ThrottleHeadersConfig::InitAsDefaultInstance() {
}

ThunderbirdConfig_ThrottleHeadersConfig::ThunderbirdConfig_ThrottleHeadersConfig(const ThunderbirdConfig_ThrottleHeadersConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThunderbirdConfig_ThrottleHeadersConfig::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  throttletimeoffset_ = 20;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThunderbirdConfig_ThrottleHeadersConfig::~ThunderbirdConfig_ThrottleHeadersConfig() {
  SharedDtor();
}

void ThunderbirdConfig_ThrottleHeadersConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThunderbirdConfig_ThrottleHeadersConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThunderbirdConfig_ThrottleHeadersConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThunderbirdConfig_ThrottleHeadersConfig_descriptor_;
}

const ThunderbirdConfig_ThrottleHeadersConfig& ThunderbirdConfig_ThrottleHeadersConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fthunderbird_2eproto();
  return *default_instance_;
}

ThunderbirdConfig_ThrottleHeadersConfig* ThunderbirdConfig_ThrottleHeadersConfig::default_instance_ = NULL;

ThunderbirdConfig_ThrottleHeadersConfig* ThunderbirdConfig_ThrottleHeadersConfig::New() const {
  return new ThunderbirdConfig_ThrottleHeadersConfig;
}

void ThunderbirdConfig_ThrottleHeadersConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enabled_ = false;
    throttletimeoffset_ = 20;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThunderbirdConfig_ThrottleHeadersConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_throttleTimeOffset;
        break;
      }

      // optional double throttleTimeOffset = 2 [default = 20];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_throttleTimeOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttletimeoffset_)));
          set_has_throttletimeoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThunderbirdConfig_ThrottleHeadersConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool enabled = 1 [default = false];
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional double throttleTimeOffset = 2 [default = 20];
  if (has_throttletimeoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->throttletimeoffset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThunderbirdConfig_ThrottleHeadersConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool enabled = 1 [default = false];
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional double throttleTimeOffset = 2 [default = 20];
  if (has_throttletimeoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->throttletimeoffset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThunderbirdConfig_ThrottleHeadersConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1 [default = false];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional double throttleTimeOffset = 2 [default = 20];
    if (has_throttletimeoffset()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThunderbirdConfig_ThrottleHeadersConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThunderbirdConfig_ThrottleHeadersConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThunderbirdConfig_ThrottleHeadersConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThunderbirdConfig_ThrottleHeadersConfig::MergeFrom(const ThunderbirdConfig_ThrottleHeadersConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_throttletimeoffset()) {
      set_throttletimeoffset(from.throttletimeoffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThunderbirdConfig_ThrottleHeadersConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThunderbirdConfig_ThrottleHeadersConfig::CopyFrom(const ThunderbirdConfig_ThrottleHeadersConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThunderbirdConfig_ThrottleHeadersConfig::IsInitialized() const {

  return true;
}

void ThunderbirdConfig_ThrottleHeadersConfig::Swap(ThunderbirdConfig_ThrottleHeadersConfig* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(throttletimeoffset_, other->throttletimeoffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThunderbirdConfig_ThrottleHeadersConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThunderbirdConfig_ThrottleHeadersConfig_descriptor_;
  metadata.reflection = ThunderbirdConfig_ThrottleHeadersConfig_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* ThunderbirdConfig_TBChannelConfig::_default_device_ = NULL;
#ifndef _MSC_VER
const int ThunderbirdConfig_TBChannelConfig::kChannelNumberFieldNumber;
const int ThunderbirdConfig_TBChannelConfig::kSampleRateFieldNumber;
const int ThunderbirdConfig_TBChannelConfig::kMinFreqMHzFieldNumber;
const int ThunderbirdConfig_TBChannelConfig::kMaxFreqMHzFieldNumber;
const int ThunderbirdConfig_TBChannelConfig::kZpipeportFieldNumber;
const int ThunderbirdConfig_TBChannelConfig::kDeviceFieldNumber;
#endif  // !_MSC_VER

ThunderbirdConfig_TBChannelConfig::ThunderbirdConfig_TBChannelConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThunderbirdConfig_TBChannelConfig::InitAsDefaultInstance() {
}

ThunderbirdConfig_TBChannelConfig::ThunderbirdConfig_TBChannelConfig(const ThunderbirdConfig_TBChannelConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThunderbirdConfig_TBChannelConfig::SharedCtor() {
  _cached_size_ = 0;
  channelnumber_ = 1;
  samplerate_ = 100000000;
  minfreqmhz_ = 20;
  maxfreqmhz_ = 6000;
  zpipeport_ = 38599;
  device_ = const_cast< ::std::string*>(_default_device_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThunderbirdConfig_TBChannelConfig::~ThunderbirdConfig_TBChannelConfig() {
  SharedDtor();
}

void ThunderbirdConfig_TBChannelConfig::SharedDtor() {
  if (device_ != _default_device_) {
    delete device_;
  }
  if (this != default_instance_) {
  }
}

void ThunderbirdConfig_TBChannelConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThunderbirdConfig_TBChannelConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThunderbirdConfig_TBChannelConfig_descriptor_;
}

const ThunderbirdConfig_TBChannelConfig& ThunderbirdConfig_TBChannelConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fthunderbird_2eproto();
  return *default_instance_;
}

ThunderbirdConfig_TBChannelConfig* ThunderbirdConfig_TBChannelConfig::default_instance_ = NULL;

ThunderbirdConfig_TBChannelConfig* ThunderbirdConfig_TBChannelConfig::New() const {
  return new ThunderbirdConfig_TBChannelConfig;
}

void ThunderbirdConfig_TBChannelConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channelnumber_ = 1;
    samplerate_ = 100000000;
    minfreqmhz_ = 20;
    maxfreqmhz_ = 6000;
    zpipeport_ = 38599;
    if (has_device()) {
      if (device_ != _default_device_) {
        device_->assign(*_default_device_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThunderbirdConfig_TBChannelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channelNumber = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelnumber_)));
          set_has_channelnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sampleRate;
        break;
      }

      // optional double sampleRate = 2 [default = 100000000];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sampleRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &samplerate_)));
          set_has_samplerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_minFreqMHz;
        break;
      }

      // optional double minFreqMHz = 3 [default = 20];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minFreqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minfreqmhz_)));
          set_has_minfreqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_maxFreqMHz;
        break;
      }

      // optional double maxFreqMHz = 4 [default = 6000];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxFreqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxfreqmhz_)));
          set_has_maxfreqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zpipeport;
        break;
      }

      // optional int32 zpipeport = 5 [default = 38599];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zpipeport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zpipeport_)));
          set_has_zpipeport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_device;
        break;
      }

      // optional string device = 6 [default = "ZPIPE"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThunderbirdConfig_TBChannelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 channelNumber = 1 [default = 1];
  if (has_channelnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channelnumber(), output);
  }

  // optional double sampleRate = 2 [default = 100000000];
  if (has_samplerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->samplerate(), output);
  }

  // optional double minFreqMHz = 3 [default = 20];
  if (has_minfreqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->minfreqmhz(), output);
  }

  // optional double maxFreqMHz = 4 [default = 6000];
  if (has_maxfreqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->maxfreqmhz(), output);
  }

  // optional int32 zpipeport = 5 [default = 38599];
  if (has_zpipeport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->zpipeport(), output);
  }

  // optional string device = 6 [default = "ZPIPE"];
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->device(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThunderbirdConfig_TBChannelConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 channelNumber = 1 [default = 1];
  if (has_channelnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channelnumber(), target);
  }

  // optional double sampleRate = 2 [default = 100000000];
  if (has_samplerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->samplerate(), target);
  }

  // optional double minFreqMHz = 3 [default = 20];
  if (has_minfreqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->minfreqmhz(), target);
  }

  // optional double maxFreqMHz = 4 [default = 6000];
  if (has_maxfreqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->maxfreqmhz(), target);
  }

  // optional int32 zpipeport = 5 [default = 38599];
  if (has_zpipeport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->zpipeport(), target);
  }

  // optional string device = 6 [default = "ZPIPE"];
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->device(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThunderbirdConfig_TBChannelConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channelNumber = 1 [default = 1];
    if (has_channelnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelnumber());
    }

    // optional double sampleRate = 2 [default = 100000000];
    if (has_samplerate()) {
      total_size += 1 + 8;
    }

    // optional double minFreqMHz = 3 [default = 20];
    if (has_minfreqmhz()) {
      total_size += 1 + 8;
    }

    // optional double maxFreqMHz = 4 [default = 6000];
    if (has_maxfreqmhz()) {
      total_size += 1 + 8;
    }

    // optional int32 zpipeport = 5 [default = 38599];
    if (has_zpipeport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zpipeport());
    }

    // optional string device = 6 [default = "ZPIPE"];
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThunderbirdConfig_TBChannelConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThunderbirdConfig_TBChannelConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThunderbirdConfig_TBChannelConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThunderbirdConfig_TBChannelConfig::MergeFrom(const ThunderbirdConfig_TBChannelConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channelnumber()) {
      set_channelnumber(from.channelnumber());
    }
    if (from.has_samplerate()) {
      set_samplerate(from.samplerate());
    }
    if (from.has_minfreqmhz()) {
      set_minfreqmhz(from.minfreqmhz());
    }
    if (from.has_maxfreqmhz()) {
      set_maxfreqmhz(from.maxfreqmhz());
    }
    if (from.has_zpipeport()) {
      set_zpipeport(from.zpipeport());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThunderbirdConfig_TBChannelConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThunderbirdConfig_TBChannelConfig::CopyFrom(const ThunderbirdConfig_TBChannelConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThunderbirdConfig_TBChannelConfig::IsInitialized() const {

  return true;
}

void ThunderbirdConfig_TBChannelConfig::Swap(ThunderbirdConfig_TBChannelConfig* other) {
  if (other != this) {
    std::swap(channelnumber_, other->channelnumber_);
    std::swap(samplerate_, other->samplerate_);
    std::swap(minfreqmhz_, other->minfreqmhz_);
    std::swap(maxfreqmhz_, other->maxfreqmhz_);
    std::swap(zpipeport_, other->zpipeport_);
    std::swap(device_, other->device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThunderbirdConfig_TBChannelConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThunderbirdConfig_TBChannelConfig_descriptor_;
  metadata.reflection = ThunderbirdConfig_TBChannelConfig_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* ThunderbirdConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ThunderbirdConfig::kMsgNameFieldNumber;
const int ThunderbirdConfig::kScriptFieldNumber;
const int ThunderbirdConfig::kGaindbFieldNumber;
const int ThunderbirdConfig::kNumberZPipePortsPerChannelFieldNumber;
const int ThunderbirdConfig::kIndexFieldNumber;
const int ThunderbirdConfig::kEwCapabilitiesRebroadcastCooldownFieldNumber;
const int ThunderbirdConfig::kEwTransmittingRebroadcastCooldownFieldNumber;
const int ThunderbirdConfig::kPlotOutputSpectrumEnabledFieldNumber;
const int ThunderbirdConfig::kPlotOutputSpectrumThinnedFieldNumber;
const int ThunderbirdConfig::kXpipemonitorEnabledFieldNumber;
const int ThunderbirdConfig::kMuxtxConfigFieldNumber;
const int ThunderbirdConfig::kThrottleHeadersConfigFieldNumber;
const int ThunderbirdConfig::kTbChannelsFieldNumber;
#endif  // !_MSC_VER

ThunderbirdConfig::ThunderbirdConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThunderbirdConfig::InitAsDefaultInstance() {
  muxtxconfig_ = const_cast< ::service_thunderbird::ThunderbirdConfig_MuxtxConfig*>(&::service_thunderbird::ThunderbirdConfig_MuxtxConfig::default_instance());
  throttleheadersconfig_ = const_cast< ::service_thunderbird::ThunderbirdConfig_ThrottleHeadersConfig*>(&::service_thunderbird::ThunderbirdConfig_ThrottleHeadersConfig::default_instance());
}

ThunderbirdConfig::ThunderbirdConfig(const ThunderbirdConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThunderbirdConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gaindb_ = 30;
  numberzpipeportsperchannel_ = 30;
  index_ = 2;
  ewcapabilitiesrebroadcastcooldown_ = 5;
  ewtransmittingrebroadcastcooldown_ = 5;
  plotoutputspectrumenabled_ = false;
  plotoutputspectrumthinned_ = true;
  xpipemonitorenabled_ = true;
  muxtxconfig_ = NULL;
  throttleheadersconfig_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThunderbirdConfig::~ThunderbirdConfig() {
  SharedDtor();
}

void ThunderbirdConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (script_ != &::google::protobuf::internal::kEmptyString) {
    delete script_;
  }
  if (this != default_instance_) {
    delete muxtxconfig_;
    delete throttleheadersconfig_;
  }
}

void ThunderbirdConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThunderbirdConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThunderbirdConfig_descriptor_;
}

const ThunderbirdConfig& ThunderbirdConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fthunderbird_2eproto();
  return *default_instance_;
}

ThunderbirdConfig* ThunderbirdConfig::default_instance_ = NULL;

ThunderbirdConfig* ThunderbirdConfig::New() const {
  return new ThunderbirdConfig;
}

void ThunderbirdConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::kEmptyString) {
        script_->clear();
      }
    }
    gaindb_ = 30;
    numberzpipeportsperchannel_ = 30;
    index_ = 2;
    ewcapabilitiesrebroadcastcooldown_ = 5;
    ewtransmittingrebroadcastcooldown_ = 5;
    plotoutputspectrumenabled_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    plotoutputspectrumthinned_ = true;
    xpipemonitorenabled_ = true;
    if (has_muxtxconfig()) {
      if (muxtxconfig_ != NULL) muxtxconfig_->::service_thunderbird::ThunderbirdConfig_MuxtxConfig::Clear();
    }
    if (has_throttleheadersconfig()) {
      if (throttleheadersconfig_ != NULL) throttleheadersconfig_->::service_thunderbird::ThunderbirdConfig_ThrottleHeadersConfig::Clear();
    }
  }
  tbchannels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThunderbirdConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_script;
        break;
      }

      // optional string script = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->script().data(), this->script().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_gaindb;
        break;
      }

      // optional float gaindb = 4 [default = 30];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gaindb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gaindb_)));
          set_has_gaindb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_numberZPipePortsPerChannel;
        break;
      }

      // optional int32 numberZPipePortsPerChannel = 6 [default = 30];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numberZPipePortsPerChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberzpipeportsperchannel_)));
          set_has_numberzpipeportsperchannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_index;
        break;
      }

      // optional int32 index = 8 [default = 2];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_plotOutputSpectrumEnabled;
        break;
      }

      // optional bool plotOutputSpectrumEnabled = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plotOutputSpectrumEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &plotoutputspectrumenabled_)));
          set_has_plotoutputspectrumenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_plotOutputSpectrumThinned;
        break;
      }

      // optional bool plotOutputSpectrumThinned = 12 [default = true];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plotOutputSpectrumThinned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &plotoutputspectrumthinned_)));
          set_has_plotoutputspectrumthinned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_xpipemonitorEnabled;
        break;
      }

      // optional bool xpipemonitorEnabled = 13 [default = true];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpipemonitorEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xpipemonitorenabled_)));
          set_has_xpipemonitorenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_muxtxConfig;
        break;
      }

      // optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_muxtxConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_muxtxconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_throttleHeadersConfig;
        break;
      }

      // optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_throttleHeadersConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_throttleheadersconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_tbChannels;
        break;
      }

      // repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tbChannels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tbchannels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_tbChannels;
        if (input->ExpectTag(809)) goto parse_ewCapabilitiesRebroadcastCooldown;
        break;
      }

      // optional double ewCapabilitiesRebroadcastCooldown = 101 [default = 5];
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ewCapabilitiesRebroadcastCooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ewcapabilitiesrebroadcastcooldown_)));
          set_has_ewcapabilitiesrebroadcastcooldown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(817)) goto parse_ewTransmittingRebroadcastCooldown;
        break;
      }

      // optional double ewTransmittingRebroadcastCooldown = 102 [default = 5];
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ewTransmittingRebroadcastCooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ewtransmittingrebroadcastcooldown_)));
          set_has_ewtransmittingrebroadcastcooldown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThunderbirdConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string script = 2;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->script(), output);
  }

  // optional float gaindb = 4 [default = 30];
  if (has_gaindb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->gaindb(), output);
  }

  // optional int32 numberZPipePortsPerChannel = 6 [default = 30];
  if (has_numberzpipeportsperchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->numberzpipeportsperchannel(), output);
  }

  // optional int32 index = 8 [default = 2];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->index(), output);
  }

  // optional bool plotOutputSpectrumEnabled = 11 [default = false];
  if (has_plotoutputspectrumenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->plotoutputspectrumenabled(), output);
  }

  // optional bool plotOutputSpectrumThinned = 12 [default = true];
  if (has_plotoutputspectrumthinned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->plotoutputspectrumthinned(), output);
  }

  // optional bool xpipemonitorEnabled = 13 [default = true];
  if (has_xpipemonitorenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->xpipemonitorenabled(), output);
  }

  // optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;
  if (has_muxtxconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->muxtxconfig(), output);
  }

  // optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;
  if (has_throttleheadersconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->throttleheadersconfig(), output);
  }

  // repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;
  for (int i = 0; i < this->tbchannels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->tbchannels(i), output);
  }

  // optional double ewCapabilitiesRebroadcastCooldown = 101 [default = 5];
  if (has_ewcapabilitiesrebroadcastcooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(101, this->ewcapabilitiesrebroadcastcooldown(), output);
  }

  // optional double ewTransmittingRebroadcastCooldown = 102 [default = 5];
  if (has_ewtransmittingrebroadcastcooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(102, this->ewtransmittingrebroadcastcooldown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThunderbirdConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string script = 2;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->script(), target);
  }

  // optional float gaindb = 4 [default = 30];
  if (has_gaindb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->gaindb(), target);
  }

  // optional int32 numberZPipePortsPerChannel = 6 [default = 30];
  if (has_numberzpipeportsperchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->numberzpipeportsperchannel(), target);
  }

  // optional int32 index = 8 [default = 2];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->index(), target);
  }

  // optional bool plotOutputSpectrumEnabled = 11 [default = false];
  if (has_plotoutputspectrumenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->plotoutputspectrumenabled(), target);
  }

  // optional bool plotOutputSpectrumThinned = 12 [default = true];
  if (has_plotoutputspectrumthinned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->plotoutputspectrumthinned(), target);
  }

  // optional bool xpipemonitorEnabled = 13 [default = true];
  if (has_xpipemonitorenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->xpipemonitorenabled(), target);
  }

  // optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;
  if (has_muxtxconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->muxtxconfig(), target);
  }

  // optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;
  if (has_throttleheadersconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->throttleheadersconfig(), target);
  }

  // repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;
  for (int i = 0; i < this->tbchannels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->tbchannels(i), target);
  }

  // optional double ewCapabilitiesRebroadcastCooldown = 101 [default = 5];
  if (has_ewcapabilitiesrebroadcastcooldown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(101, this->ewcapabilitiesrebroadcastcooldown(), target);
  }

  // optional double ewTransmittingRebroadcastCooldown = 102 [default = 5];
  if (has_ewtransmittingrebroadcastcooldown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(102, this->ewtransmittingrebroadcastcooldown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThunderbirdConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string script = 2;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script());
    }

    // optional float gaindb = 4 [default = 30];
    if (has_gaindb()) {
      total_size += 1 + 4;
    }

    // optional int32 numberZPipePortsPerChannel = 6 [default = 30];
    if (has_numberzpipeportsperchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberzpipeportsperchannel());
    }

    // optional int32 index = 8 [default = 2];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional double ewCapabilitiesRebroadcastCooldown = 101 [default = 5];
    if (has_ewcapabilitiesrebroadcastcooldown()) {
      total_size += 2 + 8;
    }

    // optional double ewTransmittingRebroadcastCooldown = 102 [default = 5];
    if (has_ewtransmittingrebroadcastcooldown()) {
      total_size += 2 + 8;
    }

    // optional bool plotOutputSpectrumEnabled = 11 [default = false];
    if (has_plotoutputspectrumenabled()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool plotOutputSpectrumThinned = 12 [default = true];
    if (has_plotoutputspectrumthinned()) {
      total_size += 1 + 1;
    }

    // optional bool xpipemonitorEnabled = 13 [default = true];
    if (has_xpipemonitorenabled()) {
      total_size += 1 + 1;
    }

    // optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;
    if (has_muxtxconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->muxtxconfig());
    }

    // optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;
    if (has_throttleheadersconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->throttleheadersconfig());
    }

  }
  // repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;
  total_size += 2 * this->tbchannels_size();
  for (int i = 0; i < this->tbchannels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tbchannels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThunderbirdConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThunderbirdConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThunderbirdConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThunderbirdConfig::MergeFrom(const ThunderbirdConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  tbchannels_.MergeFrom(from.tbchannels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
    if (from.has_gaindb()) {
      set_gaindb(from.gaindb());
    }
    if (from.has_numberzpipeportsperchannel()) {
      set_numberzpipeportsperchannel(from.numberzpipeportsperchannel());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_ewcapabilitiesrebroadcastcooldown()) {
      set_ewcapabilitiesrebroadcastcooldown(from.ewcapabilitiesrebroadcastcooldown());
    }
    if (from.has_ewtransmittingrebroadcastcooldown()) {
      set_ewtransmittingrebroadcastcooldown(from.ewtransmittingrebroadcastcooldown());
    }
    if (from.has_plotoutputspectrumenabled()) {
      set_plotoutputspectrumenabled(from.plotoutputspectrumenabled());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_plotoutputspectrumthinned()) {
      set_plotoutputspectrumthinned(from.plotoutputspectrumthinned());
    }
    if (from.has_xpipemonitorenabled()) {
      set_xpipemonitorenabled(from.xpipemonitorenabled());
    }
    if (from.has_muxtxconfig()) {
      mutable_muxtxconfig()->::service_thunderbird::ThunderbirdConfig_MuxtxConfig::MergeFrom(from.muxtxconfig());
    }
    if (from.has_throttleheadersconfig()) {
      mutable_throttleheadersconfig()->::service_thunderbird::ThunderbirdConfig_ThrottleHeadersConfig::MergeFrom(from.throttleheadersconfig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThunderbirdConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThunderbirdConfig::CopyFrom(const ThunderbirdConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThunderbirdConfig::IsInitialized() const {

  return true;
}

void ThunderbirdConfig::Swap(ThunderbirdConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(script_, other->script_);
    std::swap(gaindb_, other->gaindb_);
    std::swap(numberzpipeportsperchannel_, other->numberzpipeportsperchannel_);
    std::swap(index_, other->index_);
    std::swap(ewcapabilitiesrebroadcastcooldown_, other->ewcapabilitiesrebroadcastcooldown_);
    std::swap(ewtransmittingrebroadcastcooldown_, other->ewtransmittingrebroadcastcooldown_);
    std::swap(plotoutputspectrumenabled_, other->plotoutputspectrumenabled_);
    std::swap(plotoutputspectrumthinned_, other->plotoutputspectrumthinned_);
    std::swap(xpipemonitorenabled_, other->xpipemonitorenabled_);
    std::swap(muxtxconfig_, other->muxtxconfig_);
    std::swap(throttleheadersconfig_, other->throttleheadersconfig_);
    tbchannels_.Swap(&other->tbchannels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThunderbirdConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThunderbirdConfig_descriptor_;
  metadata.reflection = ThunderbirdConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_thunderbird

// @@protoc_insertion_point(global_scope)
