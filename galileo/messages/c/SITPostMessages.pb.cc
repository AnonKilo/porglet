// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SITPostMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SITPostMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sit_post_msg {

namespace {

const ::google::protobuf::Descriptor* detectFhopRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  detectFhopRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* add2SoilistRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  add2SoilistRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* generateJamFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  generateJamFileRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SITPostMessages_2eproto() {
  protobuf_AddDesc_SITPostMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SITPostMessages.proto");
  GOOGLE_CHECK(file != NULL);
  detectFhopRequest_descriptor_ = file->message_type(0);
  static const int detectFhopRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detectFhopRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detectFhopRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detectFhopRequest, iqsnap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detectFhopRequest, confidencethreshold_),
  };
  detectFhopRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      detectFhopRequest_descriptor_,
      detectFhopRequest::default_instance_,
      detectFhopRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detectFhopRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detectFhopRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(detectFhopRequest));
  add2SoilistRequest_descriptor_ = file->message_type(1);
  static const int add2SoilistRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add2SoilistRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add2SoilistRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add2SoilistRequest, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add2SoilistRequest, targetidentifier_),
  };
  add2SoilistRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      add2SoilistRequest_descriptor_,
      add2SoilistRequest::default_instance_,
      add2SoilistRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add2SoilistRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add2SoilistRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(add2SoilistRequest));
  generateJamFileRequest_descriptor_ = file->message_type(2);
  static const int generateJamFileRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generateJamFileRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generateJamFileRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generateJamFileRequest, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generateJamFileRequest, targetidentifier_),
  };
  generateJamFileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      generateJamFileRequest_descriptor_,
      generateJamFileRequest::default_instance_,
      generateJamFileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generateJamFileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generateJamFileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(generateJamFileRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SITPostMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    detectFhopRequest_descriptor_, &detectFhopRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    add2SoilistRequest_descriptor_, &add2SoilistRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    generateJamFileRequest_descriptor_, &generateJamFileRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SITPostMessages_2eproto() {
  delete detectFhopRequest::default_instance_;
  delete detectFhopRequest_reflection_;
  delete detectFhopRequest::_default_msgname_;
  delete add2SoilistRequest::default_instance_;
  delete add2SoilistRequest_reflection_;
  delete add2SoilistRequest::_default_msgname_;
  delete generateJamFileRequest::default_instance_;
  delete generateJamFileRequest_reflection_;
  delete generateJamFileRequest::_default_msgname_;
}

void protobuf_AddDesc_SITPostMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025SITPostMessages.proto\022\014sit_post_msg\"w\n"
    "\021detectFhopRequest\022\"\n\007msgName\030\001 \001(\t:\021det"
    "ectFhopRequest\022\021\n\trequestID\030\002 \002(\t\022\016\n\006iqS"
    "nap\030\003 \002(\t\022\033\n\023confidenceThreshold\030\004 \002(\001\"y"
    "\n\022add2SoilistRequest\022#\n\007msgName\030\001 \001(\t:\022a"
    "dd2SoilistRequest\022\021\n\trequestID\030\002 \002(\t\022\021\n\t"
    "clusterID\030\003 \002(\005\022\030\n\020targetIdentifier\030\004 \002("
    "\t\"\201\001\n\026generateJamFileRequest\022\'\n\007msgName\030"
    "\001 \001(\t:\026generateJamFileRequest\022\021\n\trequest"
    "ID\030\002 \002(\t\022\021\n\tclusterID\030\003 \002(\005\022\030\n\020targetIde"
    "ntifier\030\004 \002(\tB\025\n\023fv.protos.kepsvisor", 436);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SITPostMessages.proto", &protobuf_RegisterTypes);
  detectFhopRequest::_default_msgname_ =
      new ::std::string("detectFhopRequest", 17);
  detectFhopRequest::default_instance_ = new detectFhopRequest();
  add2SoilistRequest::_default_msgname_ =
      new ::std::string("add2SoilistRequest", 18);
  add2SoilistRequest::default_instance_ = new add2SoilistRequest();
  generateJamFileRequest::_default_msgname_ =
      new ::std::string("generateJamFileRequest", 22);
  generateJamFileRequest::default_instance_ = new generateJamFileRequest();
  detectFhopRequest::default_instance_->InitAsDefaultInstance();
  add2SoilistRequest::default_instance_->InitAsDefaultInstance();
  generateJamFileRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SITPostMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SITPostMessages_2eproto {
  StaticDescriptorInitializer_SITPostMessages_2eproto() {
    protobuf_AddDesc_SITPostMessages_2eproto();
  }
} static_descriptor_initializer_SITPostMessages_2eproto_;

// ===================================================================

::std::string* detectFhopRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int detectFhopRequest::kMsgNameFieldNumber;
const int detectFhopRequest::kRequestIDFieldNumber;
const int detectFhopRequest::kIqSnapFieldNumber;
const int detectFhopRequest::kConfidenceThresholdFieldNumber;
#endif  // !_MSC_VER

detectFhopRequest::detectFhopRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void detectFhopRequest::InitAsDefaultInstance() {
}

detectFhopRequest::detectFhopRequest(const detectFhopRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void detectFhopRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iqsnap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  confidencethreshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

detectFhopRequest::~detectFhopRequest() {
  SharedDtor();
}

void detectFhopRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    delete requestid_;
  }
  if (iqsnap_ != &::google::protobuf::internal::kEmptyString) {
    delete iqsnap_;
  }
  if (this != default_instance_) {
  }
}

void detectFhopRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* detectFhopRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return detectFhopRequest_descriptor_;
}

const detectFhopRequest& detectFhopRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SITPostMessages_2eproto();
  return *default_instance_;
}

detectFhopRequest* detectFhopRequest::default_instance_ = NULL;

detectFhopRequest* detectFhopRequest::New() const {
  return new detectFhopRequest;
}

void detectFhopRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_requestid()) {
      if (requestid_ != &::google::protobuf::internal::kEmptyString) {
        requestid_->clear();
      }
    }
    if (has_iqsnap()) {
      if (iqsnap_ != &::google::protobuf::internal::kEmptyString) {
        iqsnap_->clear();
      }
    }
    confidencethreshold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool detectFhopRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "detectFhopRequest"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_requestID;
        break;
      }

      // required string requestID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requestID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requestid().data(), this->requestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_iqSnap;
        break;
      }

      // required string iqSnap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iqSnap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iqsnap()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iqsnap().data(), this->iqsnap().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_confidenceThreshold;
        break;
      }

      // required double confidenceThreshold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_confidenceThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidencethreshold_)));
          set_has_confidencethreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void detectFhopRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "detectFhopRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // required string requestID = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->requestid(), output);
  }

  // required string iqSnap = 3;
  if (has_iqsnap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iqsnap().data(), this->iqsnap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->iqsnap(), output);
  }

  // required double confidenceThreshold = 4;
  if (has_confidencethreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->confidencethreshold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* detectFhopRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "detectFhopRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // required string requestID = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requestid(), target);
  }

  // required string iqSnap = 3;
  if (has_iqsnap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iqsnap().data(), this->iqsnap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->iqsnap(), target);
  }

  // required double confidenceThreshold = 4;
  if (has_confidencethreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->confidencethreshold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int detectFhopRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "detectFhopRequest"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // required string requestID = 2;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestid());
    }

    // required string iqSnap = 3;
    if (has_iqsnap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iqsnap());
    }

    // required double confidenceThreshold = 4;
    if (has_confidencethreshold()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void detectFhopRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const detectFhopRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const detectFhopRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void detectFhopRequest::MergeFrom(const detectFhopRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_iqsnap()) {
      set_iqsnap(from.iqsnap());
    }
    if (from.has_confidencethreshold()) {
      set_confidencethreshold(from.confidencethreshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void detectFhopRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void detectFhopRequest::CopyFrom(const detectFhopRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool detectFhopRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void detectFhopRequest::Swap(detectFhopRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(requestid_, other->requestid_);
    std::swap(iqsnap_, other->iqsnap_);
    std::swap(confidencethreshold_, other->confidencethreshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata detectFhopRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = detectFhopRequest_descriptor_;
  metadata.reflection = detectFhopRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* add2SoilistRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int add2SoilistRequest::kMsgNameFieldNumber;
const int add2SoilistRequest::kRequestIDFieldNumber;
const int add2SoilistRequest::kClusterIDFieldNumber;
const int add2SoilistRequest::kTargetIdentifierFieldNumber;
#endif  // !_MSC_VER

add2SoilistRequest::add2SoilistRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void add2SoilistRequest::InitAsDefaultInstance() {
}

add2SoilistRequest::add2SoilistRequest(const add2SoilistRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void add2SoilistRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clusterid_ = 0;
  targetidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

add2SoilistRequest::~add2SoilistRequest() {
  SharedDtor();
}

void add2SoilistRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    delete requestid_;
  }
  if (targetidentifier_ != &::google::protobuf::internal::kEmptyString) {
    delete targetidentifier_;
  }
  if (this != default_instance_) {
  }
}

void add2SoilistRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add2SoilistRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return add2SoilistRequest_descriptor_;
}

const add2SoilistRequest& add2SoilistRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SITPostMessages_2eproto();
  return *default_instance_;
}

add2SoilistRequest* add2SoilistRequest::default_instance_ = NULL;

add2SoilistRequest* add2SoilistRequest::New() const {
  return new add2SoilistRequest;
}

void add2SoilistRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_requestid()) {
      if (requestid_ != &::google::protobuf::internal::kEmptyString) {
        requestid_->clear();
      }
    }
    clusterid_ = 0;
    if (has_targetidentifier()) {
      if (targetidentifier_ != &::google::protobuf::internal::kEmptyString) {
        targetidentifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool add2SoilistRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "add2SoilistRequest"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_requestID;
        break;
      }

      // required string requestID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requestID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requestid().data(), this->requestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clusterID;
        break;
      }

      // required int32 clusterID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clusterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_targetIdentifier;
        break;
      }

      // required string targetIdentifier = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetIdentifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetidentifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetidentifier().data(), this->targetidentifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void add2SoilistRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "add2SoilistRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // required string requestID = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->requestid(), output);
  }

  // required int32 clusterID = 3;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clusterid(), output);
  }

  // required string targetIdentifier = 4;
  if (has_targetidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetidentifier().data(), this->targetidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->targetidentifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* add2SoilistRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "add2SoilistRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // required string requestID = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requestid(), target);
  }

  // required int32 clusterID = 3;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clusterid(), target);
  }

  // required string targetIdentifier = 4;
  if (has_targetidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetidentifier().data(), this->targetidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->targetidentifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int add2SoilistRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "add2SoilistRequest"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // required string requestID = 2;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestid());
    }

    // required int32 clusterID = 3;
    if (has_clusterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clusterid());
    }

    // required string targetIdentifier = 4;
    if (has_targetidentifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetidentifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add2SoilistRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const add2SoilistRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const add2SoilistRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void add2SoilistRequest::MergeFrom(const add2SoilistRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_targetidentifier()) {
      set_targetidentifier(from.targetidentifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void add2SoilistRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add2SoilistRequest::CopyFrom(const add2SoilistRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add2SoilistRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void add2SoilistRequest::Swap(add2SoilistRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(requestid_, other->requestid_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(targetidentifier_, other->targetidentifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata add2SoilistRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = add2SoilistRequest_descriptor_;
  metadata.reflection = add2SoilistRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* generateJamFileRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int generateJamFileRequest::kMsgNameFieldNumber;
const int generateJamFileRequest::kRequestIDFieldNumber;
const int generateJamFileRequest::kClusterIDFieldNumber;
const int generateJamFileRequest::kTargetIdentifierFieldNumber;
#endif  // !_MSC_VER

generateJamFileRequest::generateJamFileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void generateJamFileRequest::InitAsDefaultInstance() {
}

generateJamFileRequest::generateJamFileRequest(const generateJamFileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void generateJamFileRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clusterid_ = 0;
  targetidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

generateJamFileRequest::~generateJamFileRequest() {
  SharedDtor();
}

void generateJamFileRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    delete requestid_;
  }
  if (targetidentifier_ != &::google::protobuf::internal::kEmptyString) {
    delete targetidentifier_;
  }
  if (this != default_instance_) {
  }
}

void generateJamFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* generateJamFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return generateJamFileRequest_descriptor_;
}

const generateJamFileRequest& generateJamFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SITPostMessages_2eproto();
  return *default_instance_;
}

generateJamFileRequest* generateJamFileRequest::default_instance_ = NULL;

generateJamFileRequest* generateJamFileRequest::New() const {
  return new generateJamFileRequest;
}

void generateJamFileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_requestid()) {
      if (requestid_ != &::google::protobuf::internal::kEmptyString) {
        requestid_->clear();
      }
    }
    clusterid_ = 0;
    if (has_targetidentifier()) {
      if (targetidentifier_ != &::google::protobuf::internal::kEmptyString) {
        targetidentifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool generateJamFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "generateJamFileRequest"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_requestID;
        break;
      }

      // required string requestID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requestID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requestid().data(), this->requestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clusterID;
        break;
      }

      // required int32 clusterID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clusterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_targetIdentifier;
        break;
      }

      // required string targetIdentifier = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetIdentifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetidentifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetidentifier().data(), this->targetidentifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void generateJamFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "generateJamFileRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // required string requestID = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->requestid(), output);
  }

  // required int32 clusterID = 3;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clusterid(), output);
  }

  // required string targetIdentifier = 4;
  if (has_targetidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetidentifier().data(), this->targetidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->targetidentifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* generateJamFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "generateJamFileRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // required string requestID = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requestid(), target);
  }

  // required int32 clusterID = 3;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clusterid(), target);
  }

  // required string targetIdentifier = 4;
  if (has_targetidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetidentifier().data(), this->targetidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->targetidentifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int generateJamFileRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "generateJamFileRequest"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // required string requestID = 2;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestid());
    }

    // required int32 clusterID = 3;
    if (has_clusterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clusterid());
    }

    // required string targetIdentifier = 4;
    if (has_targetidentifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetidentifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void generateJamFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const generateJamFileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const generateJamFileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void generateJamFileRequest::MergeFrom(const generateJamFileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_targetidentifier()) {
      set_targetidentifier(from.targetidentifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void generateJamFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void generateJamFileRequest::CopyFrom(const generateJamFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool generateJamFileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void generateJamFileRequest::Swap(generateJamFileRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(requestid_, other->requestid_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(targetidentifier_, other->targetidentifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata generateJamFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = generateJamFileRequest_descriptor_;
  metadata.reflection = generateJamFileRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sit_post_msg

// @@protoc_insertion_point(global_scope)
