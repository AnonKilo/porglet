// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ESProductMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ESProductMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace es_product_msg {

namespace {

const ::google::protobuf::Descriptor* ESProductHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ESProductHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* ESObservablesRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ESObservablesRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* ESObservablesUnregister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ESObservablesUnregister_reflection_ = NULL;
const ::google::protobuf::Descriptor* ESObservables_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ESObservables_reflection_ = NULL;
const ::google::protobuf::Descriptor* ESObservationsBool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ESObservationsBool_reflection_ = NULL;
const ::google::protobuf::Descriptor* ESObservationsTyped_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ESObservationsTyped_reflection_ = NULL;
const ::google::protobuf::Descriptor* IQCollectionParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IQCollectionParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollectionFrontendParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectionFrontendParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SignalEvent_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GPSPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPSPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternalHit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternalHit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExternalHit_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InternalHit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalHit_reflection_ = NULL;
const ::google::protobuf::Descriptor* FisD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FisD_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FisD_FileType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SIGFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SIGFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageAvailable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageAvailable_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ImageAvailable_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AudioAvailable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioAvailable_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AudioAvailable_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DmrMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DmrMeta_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ESProductMessages_2eproto() {
  protobuf_AddDesc_ESProductMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ESProductMessages.proto");
  GOOGLE_CHECK(file != NULL);
  ESProductHeader_descriptor_ = file->message_type(0);
  static const int ESProductHeader_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductHeader, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductHeader, esproductid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductHeader, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductHeader, soinum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductHeader, signalname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductHeader, sensorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductHeader, timestamp_),
  };
  ESProductHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ESProductHeader_descriptor_,
      ESProductHeader::default_instance_,
      ESProductHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ESProductHeader));
  ESObservablesRegister_descriptor_ = file->message_type(1);
  static const int ESObservablesRegister_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservablesRegister, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservablesRegister, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservablesRegister, esobservationsbool_),
  };
  ESObservablesRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ESObservablesRegister_descriptor_,
      ESObservablesRegister::default_instance_,
      ESObservablesRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservablesRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservablesRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ESObservablesRegister));
  ESObservablesUnregister_descriptor_ = file->message_type(2);
  static const int ESObservablesUnregister_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservablesUnregister, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservablesUnregister, esproductid_),
  };
  ESObservablesUnregister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ESObservablesUnregister_descriptor_,
      ESObservablesUnregister::default_instance_,
      ESObservablesUnregister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservablesUnregister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservablesUnregister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ESObservablesUnregister));
  ESObservables_descriptor_ = file->message_type(3);
  static const int ESObservables_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservables, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservables, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservables, esobservationstyped_),
  };
  ESObservables_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ESObservables_descriptor_,
      ESObservables::default_instance_,
      ESObservables_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservables, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservables, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ESObservables));
  ESObservationsBool_descriptor_ = file->message_type(4);
  static const int ESObservationsBool_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsBool, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsBool, iqcollectionparameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsBool, collectionfrontendparameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsBool, signalevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsBool, gpsposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsBool, esexternalhit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsBool, esinternalhit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsBool, fisd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsBool, sigframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsBool, imageavailable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsBool, audioavailable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsBool, dmrmeta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsBool, kvpl_),
  };
  ESObservationsBool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ESObservationsBool_descriptor_,
      ESObservationsBool::default_instance_,
      ESObservationsBool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsBool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsBool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ESObservationsBool));
  ESObservationsTyped_descriptor_ = file->message_type(5);
  static const int ESObservationsTyped_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsTyped, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsTyped, iqcollectionparameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsTyped, collectionfrontendparameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsTyped, signalevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsTyped, gpsposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsTyped, externalhit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsTyped, internalhit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsTyped, fisd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsTyped, sigframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsTyped, imageavailable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsTyped, audioavailable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsTyped, dmrmeta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsTyped, kvps_),
  };
  ESObservationsTyped_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ESObservationsTyped_descriptor_,
      ESObservationsTyped::default_instance_,
      ESObservationsTyped_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsTyped, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESObservationsTyped, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ESObservationsTyped));
  IQCollectionParameters_descriptor_ = file->message_type(6);
  static const int IQCollectionParameters_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQCollectionParameters, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQCollectionParameters, centerfreqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQCollectionParameters, sampleratemhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQCollectionParameters, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQCollectionParameters, timestamp_),
  };
  IQCollectionParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IQCollectionParameters_descriptor_,
      IQCollectionParameters::default_instance_,
      IQCollectionParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQCollectionParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQCollectionParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IQCollectionParameters));
  CollectionFrontendParameters_descriptor_ = file->message_type(7);
  static const int CollectionFrontendParameters_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionFrontendParameters, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionFrontendParameters, antnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionFrontendParameters, antaz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionFrontendParameters, antel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionFrontendParameters, bwmhz_),
  };
  CollectionFrontendParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CollectionFrontendParameters_descriptor_,
      CollectionFrontendParameters::default_instance_,
      CollectionFrontendParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionFrontendParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionFrontendParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CollectionFrontendParameters));
  SignalEvent_descriptor_ = file->message_type(8);
  static const int SignalEvent_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, rfmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, subcarmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, excurkhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, scrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, exportport_),
  };
  SignalEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalEvent_descriptor_,
      SignalEvent::default_instance_,
      SignalEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalEvent));
  SignalEvent_Type_descriptor_ = SignalEvent_descriptor_->enum_type(0);
  GPSPosition_descriptor_ = file->message_type(9);
  static const int GPSPosition_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, wplatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, wplongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, bearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, isprediction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, vector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, appid_),
  };
  GPSPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPSPosition_descriptor_,
      GPSPosition::default_instance_,
      GPSPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPSPosition));
  ExternalHit_descriptor_ = file->message_type(10);
  static const int ExternalHit_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalHit, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalHit, threattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalHit, centerfreqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalHit, pseudouniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalHit, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalHit, istrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalHit, hopdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalHit, fskdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalHit, cwdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalHit, spreaddescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalHit, avdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalHit, dsssdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalHit, updatevalues_),
  };
  ExternalHit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExternalHit_descriptor_,
      ExternalHit::default_instance_,
      ExternalHit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalHit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalHit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExternalHit));
  ExternalHit_Type_descriptor_ = ExternalHit_descriptor_->enum_type(0);
  InternalHit_descriptor_ = file->message_type(11);
  static const int InternalHit_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHit, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHit, centerfreqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHit, pseudouniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHit, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHit, istrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHit, hopdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHit, fskdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHit, cwdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHit, spreaddescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHit, avdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHit, dsssdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHit, updatevalues_),
  };
  InternalHit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalHit_descriptor_,
      InternalHit::default_instance_,
      InternalHit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalHit));
  FisD_descriptor_ = file->message_type(12);
  static const int FisD_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FisD, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FisD, filetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FisD, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FisD, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FisD, eventid_),
  };
  FisD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FisD_descriptor_,
      FisD::default_instance_,
      FisD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FisD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FisD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FisD));
  FisD_FileType_descriptor_ = FisD_descriptor_->enum_type(0);
  SIGFrame_descriptor_ = file->message_type(13);
  static const int SIGFrame_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, signalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, centerfreqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, centerfreqoffsethz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, samplerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, ber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, framelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, tailid_),
  };
  SIGFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SIGFrame_descriptor_,
      SIGFrame::default_instance_,
      SIGFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SIGFrame));
  ImageAvailable_descriptor_ = file->message_type(14);
  static const int ImageAvailable_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, imagewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, imageheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, videoport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, framerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, bytearray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, eventid_),
  };
  ImageAvailable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageAvailable_descriptor_,
      ImageAvailable::default_instance_,
      ImageAvailable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAvailable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageAvailable));
  ImageAvailable_Status_descriptor_ = ImageAvailable_descriptor_->enum_type(0);
  AudioAvailable_descriptor_ = file->message_type(15);
  static const int AudioAvailable_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioAvailable, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioAvailable, centerfreqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioAvailable, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioAvailable, audiofile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioAvailable, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioAvailable, soinum_),
  };
  AudioAvailable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioAvailable_descriptor_,
      AudioAvailable::default_instance_,
      AudioAvailable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioAvailable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioAvailable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioAvailable));
  AudioAvailable_Status_descriptor_ = AudioAvailable_descriptor_->enum_type(0);
  DmrMeta_descriptor_ = file->message_type(16);
  static const int DmrMeta_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, centerfreqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, srctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, srcaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, desttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, destaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, timeslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, calltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, colorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, geo_),
  };
  DmrMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DmrMeta_descriptor_,
      DmrMeta::default_instance_,
      DmrMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DmrMeta));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ESProductMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ESProductHeader_descriptor_, &ESProductHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ESObservablesRegister_descriptor_, &ESObservablesRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ESObservablesUnregister_descriptor_, &ESObservablesUnregister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ESObservables_descriptor_, &ESObservables::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ESObservationsBool_descriptor_, &ESObservationsBool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ESObservationsTyped_descriptor_, &ESObservationsTyped::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IQCollectionParameters_descriptor_, &IQCollectionParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CollectionFrontendParameters_descriptor_, &CollectionFrontendParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalEvent_descriptor_, &SignalEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPSPosition_descriptor_, &GPSPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExternalHit_descriptor_, &ExternalHit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalHit_descriptor_, &InternalHit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FisD_descriptor_, &FisD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SIGFrame_descriptor_, &SIGFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageAvailable_descriptor_, &ImageAvailable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioAvailable_descriptor_, &AudioAvailable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DmrMeta_descriptor_, &DmrMeta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ESProductMessages_2eproto() {
  delete ESProductHeader::default_instance_;
  delete ESProductHeader_reflection_;
  delete ESProductHeader::_default_msgname_;
  delete ESObservablesRegister::default_instance_;
  delete ESObservablesRegister_reflection_;
  delete ESObservablesRegister::_default_msgname_;
  delete ESObservablesUnregister::default_instance_;
  delete ESObservablesUnregister_reflection_;
  delete ESObservablesUnregister::_default_msgname_;
  delete ESObservables::default_instance_;
  delete ESObservables_reflection_;
  delete ESObservables::_default_msgname_;
  delete ESObservationsBool::default_instance_;
  delete ESObservationsBool_reflection_;
  delete ESObservationsBool::_default_msgname_;
  delete ESObservationsTyped::default_instance_;
  delete ESObservationsTyped_reflection_;
  delete ESObservationsTyped::_default_msgname_;
  delete IQCollectionParameters::default_instance_;
  delete IQCollectionParameters_reflection_;
  delete IQCollectionParameters::_default_msgname_;
  delete CollectionFrontendParameters::default_instance_;
  delete CollectionFrontendParameters_reflection_;
  delete CollectionFrontendParameters::_default_msgname_;
  delete SignalEvent::default_instance_;
  delete SignalEvent_reflection_;
  delete SignalEvent::_default_msgname_;
  delete GPSPosition::default_instance_;
  delete GPSPosition_reflection_;
  delete GPSPosition::_default_msgname_;
  delete ExternalHit::default_instance_;
  delete ExternalHit_reflection_;
  delete ExternalHit::_default_msgname_;
  delete InternalHit::default_instance_;
  delete InternalHit_reflection_;
  delete InternalHit::_default_msgname_;
  delete FisD::default_instance_;
  delete FisD_reflection_;
  delete FisD::_default_msgname_;
  delete SIGFrame::default_instance_;
  delete SIGFrame_reflection_;
  delete SIGFrame::_default_msgname_;
  delete ImageAvailable::default_instance_;
  delete ImageAvailable_reflection_;
  delete ImageAvailable::_default_msgname_;
  delete AudioAvailable::default_instance_;
  delete AudioAvailable_reflection_;
  delete AudioAvailable::_default_msgname_;
  delete DmrMeta::default_instance_;
  delete DmrMeta_reflection_;
  delete DmrMeta::_default_msgname_;
}

void protobuf_AddDesc_ESProductMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::falcon_common_msg::protobuf_AddDesc_FalconCommonMessages_2eproto();
  ::falcon_externals_msg::protobuf_AddDesc_FalconExternalsMessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ESProductMessages.proto\022\016es_product_ms"
    "g\032\032FalconCommonMessages.proto\032\035FalconExt"
    "ernalsMessages.proto\"\305\001\n\017ESProductHeader"
    "\022\"\n\007msgName\030\001 \001(\t:\021ES_PRODUCT_HEADER\022\023\n\013"
    "esProductID\030\002 \001(\t\022\020\n\010globalID\030\003 \001(\t\022\016\n\006s"
    "oiNum\030\004 \001(\t\022\022\n\nsignalName\030\005 \001(\t\022\022\n\nsenso"
    "rName\030\006 \001(\t\022/\n\ttimestamp\030\007 \001(\0132\034.falcon_"
    "common_msg.Timestamp\"\262\001\n\025ESObservablesRe"
    "gister\022(\n\007msgName\030\001 \001(\t:\027ES_OBSERVABLES_"
    "REGISTER\022/\n\006header\030\002 \001(\0132\037.es_product_ms"
    "g.ESProductHeader\022>\n\022esObservationsBool\030"
    "\003 \001(\0132\".es_product_msg.ESObservationsBoo"
    "l\"Z\n\027ESObservablesUnregister\022*\n\007msgName\030"
    "\001 \001(\t:\031ES_OBSERVABLES_UNREGISTER\022\023\n\013esPr"
    "oductID\030\002 \001(\t\"\243\001\n\rESObservables\022\037\n\007msgNa"
    "me\030\001 \001(\t:\016ES_OBSERVABLES\022/\n\006header\030\002 \001(\013"
    "2\037.es_product_msg.ESProductHeader\022@\n\023esO"
    "bservationsTyped\030\003 \001(\0132#.es_product_msg."
    "ESObservationsTyped\"\311\002\n\022ESObservationsBo"
    "ol\022%\n\007msgName\030\001 \001(\t:\024ES_OBSERVATIONS_BOO"
    "L\022\036\n\026iqCollectionParameters\030\002 \001(\010\022$\n\034col"
    "lectionFrontendParameters\030\003 \001(\010\022\023\n\013signa"
    "lEvent\030\004 \001(\010\022\023\n\013gpsPosition\030\005 \001(\010\022\025\n\resE"
    "xternalHit\030\006 \001(\010\022\025\n\resInternalHit\030\007 \001(\010\022"
    "\014\n\004fisD\030\010 \001(\010\022\020\n\010sigFrame\030\t \001(\010\022\026\n\016image"
    "Available\030\n \001(\010\022\026\n\016audioAvailable\030\013 \001(\010\022"
    "\017\n\007dmrMeta\030\014 \001(\010\022\r\n\004kvpl\030\364\003 \003(\t\"\272\005\n\023ESOb"
    "servationsTyped\022%\n\007msgName\030\001 \001(\t:\024ES_OBS"
    "ERVATIONS_BOOL\022F\n\026iqCollectionParameters"
    "\030\002 \001(\0132&.es_product_msg.IQCollectionPara"
    "meters\022R\n\034collectionFrontendParameters\030\003"
    " \001(\0132,.es_product_msg.CollectionFrontend"
    "Parameters\0220\n\013signalEvent\030\004 \001(\0132\033.es_pro"
    "duct_msg.SignalEvent\0220\n\013gpsPosition\030\005 \001("
    "\0132\033.es_product_msg.GPSPosition\0220\n\013extern"
    "alHit\030\006 \001(\0132\033.es_product_msg.ExternalHit"
    "\0220\n\013internalHit\030\007 \001(\0132\033.es_product_msg.I"
    "nternalHit\022\"\n\004fisD\030\010 \001(\0132\024.es_product_ms"
    "g.FisD\022*\n\010sigFrame\030\t \001(\0132\030.es_product_ms"
    "g.SIGFrame\0226\n\016imageAvailable\030\n \001(\0132\036.es_"
    "product_msg.ImageAvailable\0226\n\016audioAvail"
    "able\030\013 \001(\0132\036.es_product_msg.AudioAvailab"
    "le\022(\n\007dmrMeta\030\014 \001(\0132\027.es_product_msg.Dmr"
    "Meta\022.\n\004kvps\030\364\003 \003(\0132\037.falcon_common_msg."
    "KeyValuePair\"\263\001\n\026IQCollectionParameters\022"
    ")\n\007msgName\030\001 \001(\t:\030IQ_COLLECTION_PARAMETE"
    "RS\022\025\n\rcenterFreqMHz\030\002 \001(\001\022\025\n\rsampleRateM"
    "Hz\030\003 \001(\001\022\017\n\007channel\030\004 \001(\005\022/\n\ttimestamp\030\005"
    " \001(\0132\034.falcon_common_msg.Timestamp\"\214\001\n\034C"
    "ollectionFrontendParameters\022/\n\007msgName\030\001"
    " \001(\t:\036COLLECTION_FRONTEND_PARAMETERS\022\016\n\006"
    "antNum\030\002 \001(\005\022\r\n\005antAz\030\003 \001(\002\022\r\n\005antEl\030\004 \001"
    "(\002\022\r\n\005bwMHz\030\005 \001(\002\"\306\002\n\013SignalEvent\022\035\n\007msg"
    "Name\030\001 \001(\t:\014SIGNAL_EVENT\0223\n\teventType\030\002 "
    "\001(\0162 .es_product_msg.SignalEvent.Type\022\017\n"
    "\007eventID\030\003 \001(\t\022/\n\ttimestamp\030\004 \001(\0132\034.falc"
    "on_common_msg.Timestamp\022\r\n\005rfMHz\030\005 \001(\002\022\021"
    "\n\tsubcarMHz\030\006 \001(\002\022\020\n\010excurKHz\030\007 \001(\002\022\r\n\005a"
    "ppID\030\010 \001(\005\022\016\n\006scrypt\030\t \001(\t\022\022\n\nexportPort"
    "\030\n \001(\005\":\n\004Type\022\n\n\006SIGDET\020\000\022\t\n\005SIGUP\020\001\022\013\n"
    "\007SIGDOWN\020\002\022\016\n\nSIGTIMEOUT\020\003\"\343\002\n\013GPSPositi"
    "on\022\035\n\007msgName\030\001 \001(\t:\014GPS_POSITION\022\017\n\007eve"
    "ntID\030\002 \001(\t\022\020\n\010latitude\030\003 \001(\002\022\021\n\tlongitud"
    "e\030\004 \001(\002\022\020\n\010altitude\030\005 \001(\002\022\022\n\nwpLatitude\030"
    "\006 \001(\002\022\023\n\013wpLongitude\030\007 \001(\002\022\020\n\010velocity\030\010"
    " \001(\002\022\017\n\007bearing\030\t \001(\002\022\r\n\005range\030\n \001(\002\022/\n\t"
    "timestamp\030\013 \001(\0132\034.falcon_common_msg.Time"
    "stamp\022\016\n\006seqNum\030\014 \001(\002\022\024\n\014isPrediction\030\r "
    "\001(\010\022\r\n\005major\030\016 \001(\002\022\r\n\005minor\030\017 \001(\002\022\016\n\006vec"
    "tor\030\020 \001(\002\022\r\n\005appID\030\021 \001(\005\"\250\005\n\013ExternalHit"
    "\022\035\n\007msgName\030\001 \001(\t:\014EXTERNAL_HIT\0224\n\nthrea"
    "tType\030\002 \001(\0162 .es_product_msg.ExternalHit"
    ".Type\022\025\n\rcenterFreqMHz\030\003 \001(\001\022\026\n\016pseudoUn"
    "iqueId\030\004 \001(\005\022/\n\ttimestamp\030\005 \001(\0132\034.falcon"
    "_common_msg.Timestamp\022\021\n\tisTrigger\030\006 \001(\010"
    "\022:\n\rhopDescriptor\030\007 \001(\0132#.falcon_externa"
    "ls_msg.HopDescriptor\022:\n\rfskDescriptor\030\010 "
    "\001(\0132#.falcon_externals_msg.FSKDescriptor"
    "\0228\n\014cwDescriptor\030\t \001(\0132\".falcon_external"
    "s_msg.CWDescriptor\022@\n\020spreadDescriptor\030\n"
    " \001(\0132&.falcon_externals_msg.SpreadDescri"
    "ptor\0228\n\014avDescriptor\030\013 \001(\0132\".falcon_exte"
    "rnals_msg.AVDescriptor\022<\n\016dsssDescriptor"
    "\030\014 \001(\0132$.falcon_externals_msg.DsssDescri"
    "ptor\022\024\n\014updateValues\030\r \001(\005\"O\n\004Type\022\r\n\tKN"
    "OWN_RED\020\000\022\016\n\nKNOWN_GRAY\020\001\022\016\n\nKNOWN_BLUE\020"
    "\002\022\013\n\007UNKNOWN\020\003\022\013\n\007ANOMALY\020\004\"\241\004\n\013Internal"
    "Hit\022\035\n\007msgName\030\001 \001(\t:\014INTERNAL_HIT\022\025\n\rce"
    "nterFreqMHz\030\002 \001(\001\022\026\n\016pseudoUniqueId\030\003 \001("
    "\005\022/\n\ttimestamp\030\004 \001(\0132\034.falcon_common_msg"
    ".Timestamp\022\021\n\tisTrigger\030\005 \001(\010\022:\n\rhopDesc"
    "riptor\030\006 \001(\0132#.falcon_externals_msg.HopD"
    "escriptor\022:\n\rfskDescriptor\030\007 \001(\0132#.falco"
    "n_externals_msg.FSKDescriptor\0228\n\014cwDescr"
    "iptor\030\010 \001(\0132\".falcon_externals_msg.CWDes"
    "criptor\022@\n\020spreadDescriptor\030\t \001(\0132&.falc"
    "on_externals_msg.SpreadDescriptor\0228\n\014avD"
    "escriptor\030\n \001(\0132\".falcon_externals_msg.A"
    "VDescriptor\022<\n\016dsssDescriptor\030\013 \001(\0132$.fa"
    "lcon_externals_msg.DsssDescriptor\022\024\n\014upd"
    "ateValues\030\014 \001(\005\"\245\001\n\004FisD\022\026\n\007msgName\030\001 \001("
    "\t:\005FIS_D\022/\n\010fileType\030\002 \001(\0162\035.es_product_"
    "msg.FisD.FileType\022\020\n\010fileName\030\003 \001(\t\022\014\n\004f"
    "ile\030\004 \001(\014\022\017\n\007eventID\030\005 \001(\t\"#\n\010FileType\022\006"
    "\n\002FS\020\000\022\006\n\002TC\020\001\022\007\n\003BER\020\002\"\245\002\n\010SIGFrame\022\032\n\007"
    "msgName\030\001 \001(\t:\tSIG_FRAME\022\020\n\010signalID\030\002 \001"
    "(\t\022/\n\ttimestamp\030\003 \001(\0132\034.falcon_common_ms"
    "g.Timestamp\022\020\n\010duration\030\004 \001(\001\022\025\n\rcenterF"
    "reqMHz\030\005 \001(\001\022\032\n\022centerFreqOffsetHz\030\006 \001(\001"
    "\022\022\n\nsampleRate\030\007 \001(\001\022\021\n\tbandwidth\030\010 \001(\001\022"
    "\r\n\005power\030\t \001(\001\022\013\n\003ber\030\n \001(\001\022\023\n\013frameLeng"
    "th\030\013 \001(\005\022\r\n\005frame\030\014 \001(\014\022\016\n\006tailID\030\r \001(\005\""
    "\253\002\n\016ImageAvailable\022 \n\007msgName\030\001 \001(\t:\017IMA"
    "GE_AVAILABLE\022\022\n\nimageWidth\030\002 \001(\005\022\023\n\013imag"
    "eHeight\030\003 \001(\005\022\021\n\tvideoPort\030\004 \001(\005\022\021\n\tfram"
    "erate\030\005 \001(\005\022\021\n\tbyteArray\030\006 \001(\014\0225\n\006status"
    "\030\007 \001(\0162%.es_product_msg.ImageAvailable.S"
    "tatus\022\r\n\005msgID\030\010 \001(\005\022\017\n\007eventID\030\t \001(\t\">\n"
    "\006Status\022\026\n\tAVAILABLE\020\377\377\377\377\377\377\377\377\377\001\022\017\n\013UNAVA"
    "ILABLE\020\000\022\013\n\007PENDING\020\001\"\362\001\n\016AudioAvailable"
    "\022 \n\007msgName\030\001 \001(\t:\017AUDIO_AVAILABLE\022\025\n\rce"
    "nterFreqMHz\030\002 \001(\001\0225\n\006status\030\003 \001(\0162%.es_p"
    "roduct_msg.AudioAvailable.Status\022\021\n\taudi"
    "ofile\030\004 \001(\t\022\r\n\005msgID\030\005 \001(\005\022\016\n\006soiNum\030\006 \001"
    "(\t\">\n\006Status\022\026\n\tAVAILABLE\020\377\377\377\377\377\377\377\377\377\001\022\017\n\013"
    "UNAVAILABLE\020\000\022\013\n\007PENDING\020\001\"\370\001\n\007DmrMeta\022\031"
    "\n\007msgName\030\001 \001(\t:\010DMR_META\022\025\n\rcenterFreqM"
    "Hz\030\002 \001(\001\022\017\n\007srcType\030\003 \001(\t\022\017\n\007srcAddr\030\004 \001"
    "(\005\022\020\n\010destType\030\005 \001(\t\022\020\n\010destAddr\030\006 \001(\005\022\020"
    "\n\010timeSlot\030\007 \001(\005\022\020\n\010callType\030\010 \001(\t\022\021\n\tco"
    "lorCode\030\t \001(\005\022\014\n\004text\030\n \001(\t\0220\n\003geo\030\013 \001(\013"
    "2#.falcon_common_msg.GeodeticPositionB\025\n"
    "\023fv.protos.kepsvisor", 5300);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ESProductMessages.proto", &protobuf_RegisterTypes);
  ESProductHeader::_default_msgname_ =
      new ::std::string("ES_PRODUCT_HEADER", 17);
  ESProductHeader::default_instance_ = new ESProductHeader();
  ESObservablesRegister::_default_msgname_ =
      new ::std::string("ES_OBSERVABLES_REGISTER", 23);
  ESObservablesRegister::default_instance_ = new ESObservablesRegister();
  ESObservablesUnregister::_default_msgname_ =
      new ::std::string("ES_OBSERVABLES_UNREGISTER", 25);
  ESObservablesUnregister::default_instance_ = new ESObservablesUnregister();
  ESObservables::_default_msgname_ =
      new ::std::string("ES_OBSERVABLES", 14);
  ESObservables::default_instance_ = new ESObservables();
  ESObservationsBool::_default_msgname_ =
      new ::std::string("ES_OBSERVATIONS_BOOL", 20);
  ESObservationsBool::default_instance_ = new ESObservationsBool();
  ESObservationsTyped::_default_msgname_ =
      new ::std::string("ES_OBSERVATIONS_BOOL", 20);
  ESObservationsTyped::default_instance_ = new ESObservationsTyped();
  IQCollectionParameters::_default_msgname_ =
      new ::std::string("IQ_COLLECTION_PARAMETERS", 24);
  IQCollectionParameters::default_instance_ = new IQCollectionParameters();
  CollectionFrontendParameters::_default_msgname_ =
      new ::std::string("COLLECTION_FRONTEND_PARAMETERS", 30);
  CollectionFrontendParameters::default_instance_ = new CollectionFrontendParameters();
  SignalEvent::_default_msgname_ =
      new ::std::string("SIGNAL_EVENT", 12);
  SignalEvent::default_instance_ = new SignalEvent();
  GPSPosition::_default_msgname_ =
      new ::std::string("GPS_POSITION", 12);
  GPSPosition::default_instance_ = new GPSPosition();
  ExternalHit::_default_msgname_ =
      new ::std::string("EXTERNAL_HIT", 12);
  ExternalHit::default_instance_ = new ExternalHit();
  InternalHit::_default_msgname_ =
      new ::std::string("INTERNAL_HIT", 12);
  InternalHit::default_instance_ = new InternalHit();
  FisD::_default_msgname_ =
      new ::std::string("FIS_D", 5);
  FisD::default_instance_ = new FisD();
  SIGFrame::_default_msgname_ =
      new ::std::string("SIG_FRAME", 9);
  SIGFrame::default_instance_ = new SIGFrame();
  ImageAvailable::_default_msgname_ =
      new ::std::string("IMAGE_AVAILABLE", 15);
  ImageAvailable::default_instance_ = new ImageAvailable();
  AudioAvailable::_default_msgname_ =
      new ::std::string("AUDIO_AVAILABLE", 15);
  AudioAvailable::default_instance_ = new AudioAvailable();
  DmrMeta::_default_msgname_ =
      new ::std::string("DMR_META", 8);
  DmrMeta::default_instance_ = new DmrMeta();
  ESProductHeader::default_instance_->InitAsDefaultInstance();
  ESObservablesRegister::default_instance_->InitAsDefaultInstance();
  ESObservablesUnregister::default_instance_->InitAsDefaultInstance();
  ESObservables::default_instance_->InitAsDefaultInstance();
  ESObservationsBool::default_instance_->InitAsDefaultInstance();
  ESObservationsTyped::default_instance_->InitAsDefaultInstance();
  IQCollectionParameters::default_instance_->InitAsDefaultInstance();
  CollectionFrontendParameters::default_instance_->InitAsDefaultInstance();
  SignalEvent::default_instance_->InitAsDefaultInstance();
  GPSPosition::default_instance_->InitAsDefaultInstance();
  ExternalHit::default_instance_->InitAsDefaultInstance();
  InternalHit::default_instance_->InitAsDefaultInstance();
  FisD::default_instance_->InitAsDefaultInstance();
  SIGFrame::default_instance_->InitAsDefaultInstance();
  ImageAvailable::default_instance_->InitAsDefaultInstance();
  AudioAvailable::default_instance_->InitAsDefaultInstance();
  DmrMeta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ESProductMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ESProductMessages_2eproto {
  StaticDescriptorInitializer_ESProductMessages_2eproto() {
    protobuf_AddDesc_ESProductMessages_2eproto();
  }
} static_descriptor_initializer_ESProductMessages_2eproto_;

// ===================================================================

::std::string* ESProductHeader::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ESProductHeader::kMsgNameFieldNumber;
const int ESProductHeader::kEsProductIDFieldNumber;
const int ESProductHeader::kGlobalIDFieldNumber;
const int ESProductHeader::kSoiNumFieldNumber;
const int ESProductHeader::kSignalNameFieldNumber;
const int ESProductHeader::kSensorNameFieldNumber;
const int ESProductHeader::kTimestampFieldNumber;
#endif  // !_MSC_VER

ESProductHeader::ESProductHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ESProductHeader::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::falcon_common_msg::Timestamp*>(&::falcon_common_msg::Timestamp::default_instance());
}

ESProductHeader::ESProductHeader(const ESProductHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ESProductHeader::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  esproductid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  soinum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signalname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ESProductHeader::~ESProductHeader() {
  SharedDtor();
}

void ESProductHeader::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (esproductid_ != &::google::protobuf::internal::kEmptyString) {
    delete esproductid_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (soinum_ != &::google::protobuf::internal::kEmptyString) {
    delete soinum_;
  }
  if (signalname_ != &::google::protobuf::internal::kEmptyString) {
    delete signalname_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void ESProductHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ESProductHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESProductHeader_descriptor_;
}

const ESProductHeader& ESProductHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ESProductMessages_2eproto();
  return *default_instance_;
}

ESProductHeader* ESProductHeader::default_instance_ = NULL;

ESProductHeader* ESProductHeader::New() const {
  return new ESProductHeader;
}

void ESProductHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_esproductid()) {
      if (esproductid_ != &::google::protobuf::internal::kEmptyString) {
        esproductid_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    if (has_soinum()) {
      if (soinum_ != &::google::protobuf::internal::kEmptyString) {
        soinum_->clear();
      }
    }
    if (has_signalname()) {
      if (signalname_ != &::google::protobuf::internal::kEmptyString) {
        signalname_->clear();
      }
    }
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::falcon_common_msg::Timestamp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ESProductHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ES_PRODUCT_HEADER"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_esProductID;
        break;
      }

      // optional string esProductID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_esProductID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_esproductid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->esproductid().data(), this->esproductid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_globalID;
        break;
      }

      // optional string globalID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_soiNum;
        break;
      }

      // optional string soiNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soiNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soinum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soinum().data(), this->soinum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_signalName;
        break;
      }

      // optional string signalName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signalName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signalname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signalname().data(), this->signalname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_timestamp;
        break;
      }

      // optional .falcon_common_msg.Timestamp timestamp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ESProductHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ES_PRODUCT_HEADER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string esProductID = 2;
  if (has_esproductid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->esproductid().data(), this->esproductid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->esproductid(), output);
  }

  // optional string globalID = 3;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->globalid(), output);
  }

  // optional string soiNum = 4;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->soinum(), output);
  }

  // optional string signalName = 5;
  if (has_signalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalname().data(), this->signalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->signalname(), output);
  }

  // optional string sensorName = 6;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sensorname(), output);
  }

  // optional .falcon_common_msg.Timestamp timestamp = 7;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ESProductHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ES_PRODUCT_HEADER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string esProductID = 2;
  if (has_esproductid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->esproductid().data(), this->esproductid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->esproductid(), target);
  }

  // optional string globalID = 3;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->globalid(), target);
  }

  // optional string soiNum = 4;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->soinum(), target);
  }

  // optional string signalName = 5;
  if (has_signalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalname().data(), this->signalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->signalname(), target);
  }

  // optional string sensorName = 6;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sensorname(), target);
  }

  // optional .falcon_common_msg.Timestamp timestamp = 7;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ESProductHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ES_PRODUCT_HEADER"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string esProductID = 2;
    if (has_esproductid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->esproductid());
    }

    // optional string globalID = 3;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional string soiNum = 4;
    if (has_soinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soinum());
    }

    // optional string signalName = 5;
    if (has_signalname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signalname());
    }

    // optional string sensorName = 6;
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

    // optional .falcon_common_msg.Timestamp timestamp = 7;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ESProductHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ESProductHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ESProductHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ESProductHeader::MergeFrom(const ESProductHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_esproductid()) {
      set_esproductid(from.esproductid());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_soinum()) {
      set_soinum(from.soinum());
    }
    if (from.has_signalname()) {
      set_signalname(from.signalname());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::falcon_common_msg::Timestamp::MergeFrom(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ESProductHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESProductHeader::CopyFrom(const ESProductHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESProductHeader::IsInitialized() const {

  return true;
}

void ESProductHeader::Swap(ESProductHeader* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(esproductid_, other->esproductid_);
    std::swap(globalid_, other->globalid_);
    std::swap(soinum_, other->soinum_);
    std::swap(signalname_, other->signalname_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ESProductHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ESProductHeader_descriptor_;
  metadata.reflection = ESProductHeader_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ESObservablesRegister::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ESObservablesRegister::kMsgNameFieldNumber;
const int ESObservablesRegister::kHeaderFieldNumber;
const int ESObservablesRegister::kEsObservationsBoolFieldNumber;
#endif  // !_MSC_VER

ESObservablesRegister::ESObservablesRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ESObservablesRegister::InitAsDefaultInstance() {
  header_ = const_cast< ::es_product_msg::ESProductHeader*>(&::es_product_msg::ESProductHeader::default_instance());
  esobservationsbool_ = const_cast< ::es_product_msg::ESObservationsBool*>(&::es_product_msg::ESObservationsBool::default_instance());
}

ESObservablesRegister::ESObservablesRegister(const ESObservablesRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ESObservablesRegister::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  header_ = NULL;
  esobservationsbool_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ESObservablesRegister::~ESObservablesRegister() {
  SharedDtor();
}

void ESObservablesRegister::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete header_;
    delete esobservationsbool_;
  }
}

void ESObservablesRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ESObservablesRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESObservablesRegister_descriptor_;
}

const ESObservablesRegister& ESObservablesRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ESProductMessages_2eproto();
  return *default_instance_;
}

ESObservablesRegister* ESObservablesRegister::default_instance_ = NULL;

ESObservablesRegister* ESObservablesRegister::New() const {
  return new ESObservablesRegister;
}

void ESObservablesRegister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_header()) {
      if (header_ != NULL) header_->::es_product_msg::ESProductHeader::Clear();
    }
    if (has_esobservationsbool()) {
      if (esobservationsbool_ != NULL) esobservationsbool_->::es_product_msg::ESObservationsBool::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ESObservablesRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ES_OBSERVABLES_REGISTER"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_header;
        break;
      }

      // optional .es_product_msg.ESProductHeader header = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_esObservationsBool;
        break;
      }

      // optional .es_product_msg.ESObservationsBool esObservationsBool = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_esObservationsBool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_esobservationsbool()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ESObservablesRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ES_OBSERVABLES_REGISTER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .es_product_msg.ESProductHeader header = 2;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->header(), output);
  }

  // optional .es_product_msg.ESObservationsBool esObservationsBool = 3;
  if (has_esobservationsbool()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->esobservationsbool(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ESObservablesRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ES_OBSERVABLES_REGISTER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .es_product_msg.ESProductHeader header = 2;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->header(), target);
  }

  // optional .es_product_msg.ESObservationsBool esObservationsBool = 3;
  if (has_esobservationsbool()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->esobservationsbool(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ESObservablesRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ES_OBSERVABLES_REGISTER"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .es_product_msg.ESProductHeader header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .es_product_msg.ESObservationsBool esObservationsBool = 3;
    if (has_esobservationsbool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->esobservationsbool());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ESObservablesRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ESObservablesRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ESObservablesRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ESObservablesRegister::MergeFrom(const ESObservablesRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_header()) {
      mutable_header()->::es_product_msg::ESProductHeader::MergeFrom(from.header());
    }
    if (from.has_esobservationsbool()) {
      mutable_esobservationsbool()->::es_product_msg::ESObservationsBool::MergeFrom(from.esobservationsbool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ESObservablesRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESObservablesRegister::CopyFrom(const ESObservablesRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESObservablesRegister::IsInitialized() const {

  return true;
}

void ESObservablesRegister::Swap(ESObservablesRegister* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(header_, other->header_);
    std::swap(esobservationsbool_, other->esobservationsbool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ESObservablesRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ESObservablesRegister_descriptor_;
  metadata.reflection = ESObservablesRegister_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ESObservablesUnregister::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ESObservablesUnregister::kMsgNameFieldNumber;
const int ESObservablesUnregister::kEsProductIDFieldNumber;
#endif  // !_MSC_VER

ESObservablesUnregister::ESObservablesUnregister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ESObservablesUnregister::InitAsDefaultInstance() {
}

ESObservablesUnregister::ESObservablesUnregister(const ESObservablesUnregister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ESObservablesUnregister::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  esproductid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ESObservablesUnregister::~ESObservablesUnregister() {
  SharedDtor();
}

void ESObservablesUnregister::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (esproductid_ != &::google::protobuf::internal::kEmptyString) {
    delete esproductid_;
  }
  if (this != default_instance_) {
  }
}

void ESObservablesUnregister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ESObservablesUnregister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESObservablesUnregister_descriptor_;
}

const ESObservablesUnregister& ESObservablesUnregister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ESProductMessages_2eproto();
  return *default_instance_;
}

ESObservablesUnregister* ESObservablesUnregister::default_instance_ = NULL;

ESObservablesUnregister* ESObservablesUnregister::New() const {
  return new ESObservablesUnregister;
}

void ESObservablesUnregister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_esproductid()) {
      if (esproductid_ != &::google::protobuf::internal::kEmptyString) {
        esproductid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ESObservablesUnregister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ES_OBSERVABLES_UNREGISTER"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_esProductID;
        break;
      }

      // optional string esProductID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_esProductID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_esproductid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->esproductid().data(), this->esproductid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ESObservablesUnregister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ES_OBSERVABLES_UNREGISTER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string esProductID = 2;
  if (has_esproductid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->esproductid().data(), this->esproductid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->esproductid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ESObservablesUnregister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ES_OBSERVABLES_UNREGISTER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string esProductID = 2;
  if (has_esproductid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->esproductid().data(), this->esproductid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->esproductid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ESObservablesUnregister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ES_OBSERVABLES_UNREGISTER"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string esProductID = 2;
    if (has_esproductid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->esproductid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ESObservablesUnregister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ESObservablesUnregister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ESObservablesUnregister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ESObservablesUnregister::MergeFrom(const ESObservablesUnregister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_esproductid()) {
      set_esproductid(from.esproductid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ESObservablesUnregister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESObservablesUnregister::CopyFrom(const ESObservablesUnregister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESObservablesUnregister::IsInitialized() const {

  return true;
}

void ESObservablesUnregister::Swap(ESObservablesUnregister* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(esproductid_, other->esproductid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ESObservablesUnregister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ESObservablesUnregister_descriptor_;
  metadata.reflection = ESObservablesUnregister_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ESObservables::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ESObservables::kMsgNameFieldNumber;
const int ESObservables::kHeaderFieldNumber;
const int ESObservables::kEsObservationsTypedFieldNumber;
#endif  // !_MSC_VER

ESObservables::ESObservables()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ESObservables::InitAsDefaultInstance() {
  header_ = const_cast< ::es_product_msg::ESProductHeader*>(&::es_product_msg::ESProductHeader::default_instance());
  esobservationstyped_ = const_cast< ::es_product_msg::ESObservationsTyped*>(&::es_product_msg::ESObservationsTyped::default_instance());
}

ESObservables::ESObservables(const ESObservables& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ESObservables::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  header_ = NULL;
  esobservationstyped_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ESObservables::~ESObservables() {
  SharedDtor();
}

void ESObservables::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete header_;
    delete esobservationstyped_;
  }
}

void ESObservables::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ESObservables::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESObservables_descriptor_;
}

const ESObservables& ESObservables::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ESProductMessages_2eproto();
  return *default_instance_;
}

ESObservables* ESObservables::default_instance_ = NULL;

ESObservables* ESObservables::New() const {
  return new ESObservables;
}

void ESObservables::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_header()) {
      if (header_ != NULL) header_->::es_product_msg::ESProductHeader::Clear();
    }
    if (has_esobservationstyped()) {
      if (esobservationstyped_ != NULL) esobservationstyped_->::es_product_msg::ESObservationsTyped::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ESObservables::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ES_OBSERVABLES"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_header;
        break;
      }

      // optional .es_product_msg.ESProductHeader header = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_esObservationsTyped;
        break;
      }

      // optional .es_product_msg.ESObservationsTyped esObservationsTyped = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_esObservationsTyped:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_esobservationstyped()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ESObservables::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ES_OBSERVABLES"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .es_product_msg.ESProductHeader header = 2;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->header(), output);
  }

  // optional .es_product_msg.ESObservationsTyped esObservationsTyped = 3;
  if (has_esobservationstyped()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->esobservationstyped(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ESObservables::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ES_OBSERVABLES"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .es_product_msg.ESProductHeader header = 2;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->header(), target);
  }

  // optional .es_product_msg.ESObservationsTyped esObservationsTyped = 3;
  if (has_esobservationstyped()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->esobservationstyped(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ESObservables::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ES_OBSERVABLES"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .es_product_msg.ESProductHeader header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .es_product_msg.ESObservationsTyped esObservationsTyped = 3;
    if (has_esobservationstyped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->esobservationstyped());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ESObservables::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ESObservables* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ESObservables*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ESObservables::MergeFrom(const ESObservables& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_header()) {
      mutable_header()->::es_product_msg::ESProductHeader::MergeFrom(from.header());
    }
    if (from.has_esobservationstyped()) {
      mutable_esobservationstyped()->::es_product_msg::ESObservationsTyped::MergeFrom(from.esobservationstyped());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ESObservables::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESObservables::CopyFrom(const ESObservables& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESObservables::IsInitialized() const {

  return true;
}

void ESObservables::Swap(ESObservables* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(header_, other->header_);
    std::swap(esobservationstyped_, other->esobservationstyped_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ESObservables::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ESObservables_descriptor_;
  metadata.reflection = ESObservables_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ESObservationsBool::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ESObservationsBool::kMsgNameFieldNumber;
const int ESObservationsBool::kIqCollectionParametersFieldNumber;
const int ESObservationsBool::kCollectionFrontendParametersFieldNumber;
const int ESObservationsBool::kSignalEventFieldNumber;
const int ESObservationsBool::kGpsPositionFieldNumber;
const int ESObservationsBool::kEsExternalHitFieldNumber;
const int ESObservationsBool::kEsInternalHitFieldNumber;
const int ESObservationsBool::kFisDFieldNumber;
const int ESObservationsBool::kSigFrameFieldNumber;
const int ESObservationsBool::kImageAvailableFieldNumber;
const int ESObservationsBool::kAudioAvailableFieldNumber;
const int ESObservationsBool::kDmrMetaFieldNumber;
const int ESObservationsBool::kKvplFieldNumber;
#endif  // !_MSC_VER

ESObservationsBool::ESObservationsBool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ESObservationsBool::InitAsDefaultInstance() {
}

ESObservationsBool::ESObservationsBool(const ESObservationsBool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ESObservationsBool::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  iqcollectionparameters_ = false;
  collectionfrontendparameters_ = false;
  signalevent_ = false;
  gpsposition_ = false;
  esexternalhit_ = false;
  esinternalhit_ = false;
  fisd_ = false;
  sigframe_ = false;
  imageavailable_ = false;
  audioavailable_ = false;
  dmrmeta_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ESObservationsBool::~ESObservationsBool() {
  SharedDtor();
}

void ESObservationsBool::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ESObservationsBool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ESObservationsBool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESObservationsBool_descriptor_;
}

const ESObservationsBool& ESObservationsBool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ESProductMessages_2eproto();
  return *default_instance_;
}

ESObservationsBool* ESObservationsBool::default_instance_ = NULL;

ESObservationsBool* ESObservationsBool::New() const {
  return new ESObservationsBool;
}

void ESObservationsBool::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    iqcollectionparameters_ = false;
    collectionfrontendparameters_ = false;
    signalevent_ = false;
    gpsposition_ = false;
    esexternalhit_ = false;
    esinternalhit_ = false;
    fisd_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sigframe_ = false;
    imageavailable_ = false;
    audioavailable_ = false;
    dmrmeta_ = false;
  }
  kvpl_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ESObservationsBool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ES_OBSERVATIONS_BOOL"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iqCollectionParameters;
        break;
      }

      // optional bool iqCollectionParameters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iqCollectionParameters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iqcollectionparameters_)));
          set_has_iqcollectionparameters();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_collectionFrontendParameters;
        break;
      }

      // optional bool collectionFrontendParameters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collectionFrontendParameters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collectionfrontendparameters_)));
          set_has_collectionfrontendparameters();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_signalEvent;
        break;
      }

      // optional bool signalEvent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signalEvent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signalevent_)));
          set_has_signalevent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gpsPosition;
        break;
      }

      // optional bool gpsPosition = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpsPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gpsposition_)));
          set_has_gpsposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_esExternalHit;
        break;
      }

      // optional bool esExternalHit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_esExternalHit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &esexternalhit_)));
          set_has_esexternalhit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_esInternalHit;
        break;
      }

      // optional bool esInternalHit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_esInternalHit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &esinternalhit_)));
          set_has_esinternalhit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fisD;
        break;
      }

      // optional bool fisD = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fisD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fisd_)));
          set_has_fisd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sigFrame;
        break;
      }

      // optional bool sigFrame = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sigFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sigframe_)));
          set_has_sigframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_imageAvailable;
        break;
      }

      // optional bool imageAvailable = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imageAvailable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &imageavailable_)));
          set_has_imageavailable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_audioAvailable;
        break;
      }

      // optional bool audioAvailable = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audioAvailable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &audioavailable_)));
          set_has_audioavailable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_dmrMeta;
        break;
      }

      // optional bool dmrMeta = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dmrMeta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dmrmeta_)));
          set_has_dmrmeta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4002)) goto parse_kvpl;
        break;
      }

      // repeated string kvpl = 500;
      case 500: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvpl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_kvpl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kvpl(this->kvpl_size() - 1).data(),
            this->kvpl(this->kvpl_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4002)) goto parse_kvpl;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ESObservationsBool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ES_OBSERVATIONS_BOOL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool iqCollectionParameters = 2;
  if (has_iqcollectionparameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->iqcollectionparameters(), output);
  }

  // optional bool collectionFrontendParameters = 3;
  if (has_collectionfrontendparameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->collectionfrontendparameters(), output);
  }

  // optional bool signalEvent = 4;
  if (has_signalevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->signalevent(), output);
  }

  // optional bool gpsPosition = 5;
  if (has_gpsposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->gpsposition(), output);
  }

  // optional bool esExternalHit = 6;
  if (has_esexternalhit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->esexternalhit(), output);
  }

  // optional bool esInternalHit = 7;
  if (has_esinternalhit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->esinternalhit(), output);
  }

  // optional bool fisD = 8;
  if (has_fisd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fisd(), output);
  }

  // optional bool sigFrame = 9;
  if (has_sigframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->sigframe(), output);
  }

  // optional bool imageAvailable = 10;
  if (has_imageavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->imageavailable(), output);
  }

  // optional bool audioAvailable = 11;
  if (has_audioavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->audioavailable(), output);
  }

  // optional bool dmrMeta = 12;
  if (has_dmrmeta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->dmrmeta(), output);
  }

  // repeated string kvpl = 500;
  for (int i = 0; i < this->kvpl_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->kvpl(i).data(), this->kvpl(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      500, this->kvpl(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ESObservationsBool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ES_OBSERVATIONS_BOOL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool iqCollectionParameters = 2;
  if (has_iqcollectionparameters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->iqcollectionparameters(), target);
  }

  // optional bool collectionFrontendParameters = 3;
  if (has_collectionfrontendparameters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->collectionfrontendparameters(), target);
  }

  // optional bool signalEvent = 4;
  if (has_signalevent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->signalevent(), target);
  }

  // optional bool gpsPosition = 5;
  if (has_gpsposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->gpsposition(), target);
  }

  // optional bool esExternalHit = 6;
  if (has_esexternalhit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->esexternalhit(), target);
  }

  // optional bool esInternalHit = 7;
  if (has_esinternalhit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->esinternalhit(), target);
  }

  // optional bool fisD = 8;
  if (has_fisd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fisd(), target);
  }

  // optional bool sigFrame = 9;
  if (has_sigframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->sigframe(), target);
  }

  // optional bool imageAvailable = 10;
  if (has_imageavailable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->imageavailable(), target);
  }

  // optional bool audioAvailable = 11;
  if (has_audioavailable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->audioavailable(), target);
  }

  // optional bool dmrMeta = 12;
  if (has_dmrmeta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->dmrmeta(), target);
  }

  // repeated string kvpl = 500;
  for (int i = 0; i < this->kvpl_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kvpl(i).data(), this->kvpl(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(500, this->kvpl(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ESObservationsBool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ES_OBSERVATIONS_BOOL"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool iqCollectionParameters = 2;
    if (has_iqcollectionparameters()) {
      total_size += 1 + 1;
    }

    // optional bool collectionFrontendParameters = 3;
    if (has_collectionfrontendparameters()) {
      total_size += 1 + 1;
    }

    // optional bool signalEvent = 4;
    if (has_signalevent()) {
      total_size += 1 + 1;
    }

    // optional bool gpsPosition = 5;
    if (has_gpsposition()) {
      total_size += 1 + 1;
    }

    // optional bool esExternalHit = 6;
    if (has_esexternalhit()) {
      total_size += 1 + 1;
    }

    // optional bool esInternalHit = 7;
    if (has_esinternalhit()) {
      total_size += 1 + 1;
    }

    // optional bool fisD = 8;
    if (has_fisd()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool sigFrame = 9;
    if (has_sigframe()) {
      total_size += 1 + 1;
    }

    // optional bool imageAvailable = 10;
    if (has_imageavailable()) {
      total_size += 1 + 1;
    }

    // optional bool audioAvailable = 11;
    if (has_audioavailable()) {
      total_size += 1 + 1;
    }

    // optional bool dmrMeta = 12;
    if (has_dmrmeta()) {
      total_size += 1 + 1;
    }

  }
  // repeated string kvpl = 500;
  total_size += 2 * this->kvpl_size();
  for (int i = 0; i < this->kvpl_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->kvpl(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ESObservationsBool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ESObservationsBool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ESObservationsBool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ESObservationsBool::MergeFrom(const ESObservationsBool& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvpl_.MergeFrom(from.kvpl_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_iqcollectionparameters()) {
      set_iqcollectionparameters(from.iqcollectionparameters());
    }
    if (from.has_collectionfrontendparameters()) {
      set_collectionfrontendparameters(from.collectionfrontendparameters());
    }
    if (from.has_signalevent()) {
      set_signalevent(from.signalevent());
    }
    if (from.has_gpsposition()) {
      set_gpsposition(from.gpsposition());
    }
    if (from.has_esexternalhit()) {
      set_esexternalhit(from.esexternalhit());
    }
    if (from.has_esinternalhit()) {
      set_esinternalhit(from.esinternalhit());
    }
    if (from.has_fisd()) {
      set_fisd(from.fisd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sigframe()) {
      set_sigframe(from.sigframe());
    }
    if (from.has_imageavailable()) {
      set_imageavailable(from.imageavailable());
    }
    if (from.has_audioavailable()) {
      set_audioavailable(from.audioavailable());
    }
    if (from.has_dmrmeta()) {
      set_dmrmeta(from.dmrmeta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ESObservationsBool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESObservationsBool::CopyFrom(const ESObservationsBool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESObservationsBool::IsInitialized() const {

  return true;
}

void ESObservationsBool::Swap(ESObservationsBool* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(iqcollectionparameters_, other->iqcollectionparameters_);
    std::swap(collectionfrontendparameters_, other->collectionfrontendparameters_);
    std::swap(signalevent_, other->signalevent_);
    std::swap(gpsposition_, other->gpsposition_);
    std::swap(esexternalhit_, other->esexternalhit_);
    std::swap(esinternalhit_, other->esinternalhit_);
    std::swap(fisd_, other->fisd_);
    std::swap(sigframe_, other->sigframe_);
    std::swap(imageavailable_, other->imageavailable_);
    std::swap(audioavailable_, other->audioavailable_);
    std::swap(dmrmeta_, other->dmrmeta_);
    kvpl_.Swap(&other->kvpl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ESObservationsBool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ESObservationsBool_descriptor_;
  metadata.reflection = ESObservationsBool_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ESObservationsTyped::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ESObservationsTyped::kMsgNameFieldNumber;
const int ESObservationsTyped::kIqCollectionParametersFieldNumber;
const int ESObservationsTyped::kCollectionFrontendParametersFieldNumber;
const int ESObservationsTyped::kSignalEventFieldNumber;
const int ESObservationsTyped::kGpsPositionFieldNumber;
const int ESObservationsTyped::kExternalHitFieldNumber;
const int ESObservationsTyped::kInternalHitFieldNumber;
const int ESObservationsTyped::kFisDFieldNumber;
const int ESObservationsTyped::kSigFrameFieldNumber;
const int ESObservationsTyped::kImageAvailableFieldNumber;
const int ESObservationsTyped::kAudioAvailableFieldNumber;
const int ESObservationsTyped::kDmrMetaFieldNumber;
const int ESObservationsTyped::kKvpsFieldNumber;
#endif  // !_MSC_VER

ESObservationsTyped::ESObservationsTyped()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ESObservationsTyped::InitAsDefaultInstance() {
  iqcollectionparameters_ = const_cast< ::es_product_msg::IQCollectionParameters*>(&::es_product_msg::IQCollectionParameters::default_instance());
  collectionfrontendparameters_ = const_cast< ::es_product_msg::CollectionFrontendParameters*>(&::es_product_msg::CollectionFrontendParameters::default_instance());
  signalevent_ = const_cast< ::es_product_msg::SignalEvent*>(&::es_product_msg::SignalEvent::default_instance());
  gpsposition_ = const_cast< ::es_product_msg::GPSPosition*>(&::es_product_msg::GPSPosition::default_instance());
  externalhit_ = const_cast< ::es_product_msg::ExternalHit*>(&::es_product_msg::ExternalHit::default_instance());
  internalhit_ = const_cast< ::es_product_msg::InternalHit*>(&::es_product_msg::InternalHit::default_instance());
  fisd_ = const_cast< ::es_product_msg::FisD*>(&::es_product_msg::FisD::default_instance());
  sigframe_ = const_cast< ::es_product_msg::SIGFrame*>(&::es_product_msg::SIGFrame::default_instance());
  imageavailable_ = const_cast< ::es_product_msg::ImageAvailable*>(&::es_product_msg::ImageAvailable::default_instance());
  audioavailable_ = const_cast< ::es_product_msg::AudioAvailable*>(&::es_product_msg::AudioAvailable::default_instance());
  dmrmeta_ = const_cast< ::es_product_msg::DmrMeta*>(&::es_product_msg::DmrMeta::default_instance());
}

ESObservationsTyped::ESObservationsTyped(const ESObservationsTyped& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ESObservationsTyped::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  iqcollectionparameters_ = NULL;
  collectionfrontendparameters_ = NULL;
  signalevent_ = NULL;
  gpsposition_ = NULL;
  externalhit_ = NULL;
  internalhit_ = NULL;
  fisd_ = NULL;
  sigframe_ = NULL;
  imageavailable_ = NULL;
  audioavailable_ = NULL;
  dmrmeta_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ESObservationsTyped::~ESObservationsTyped() {
  SharedDtor();
}

void ESObservationsTyped::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete iqcollectionparameters_;
    delete collectionfrontendparameters_;
    delete signalevent_;
    delete gpsposition_;
    delete externalhit_;
    delete internalhit_;
    delete fisd_;
    delete sigframe_;
    delete imageavailable_;
    delete audioavailable_;
    delete dmrmeta_;
  }
}

void ESObservationsTyped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ESObservationsTyped::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESObservationsTyped_descriptor_;
}

const ESObservationsTyped& ESObservationsTyped::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ESProductMessages_2eproto();
  return *default_instance_;
}

ESObservationsTyped* ESObservationsTyped::default_instance_ = NULL;

ESObservationsTyped* ESObservationsTyped::New() const {
  return new ESObservationsTyped;
}

void ESObservationsTyped::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_iqcollectionparameters()) {
      if (iqcollectionparameters_ != NULL) iqcollectionparameters_->::es_product_msg::IQCollectionParameters::Clear();
    }
    if (has_collectionfrontendparameters()) {
      if (collectionfrontendparameters_ != NULL) collectionfrontendparameters_->::es_product_msg::CollectionFrontendParameters::Clear();
    }
    if (has_signalevent()) {
      if (signalevent_ != NULL) signalevent_->::es_product_msg::SignalEvent::Clear();
    }
    if (has_gpsposition()) {
      if (gpsposition_ != NULL) gpsposition_->::es_product_msg::GPSPosition::Clear();
    }
    if (has_externalhit()) {
      if (externalhit_ != NULL) externalhit_->::es_product_msg::ExternalHit::Clear();
    }
    if (has_internalhit()) {
      if (internalhit_ != NULL) internalhit_->::es_product_msg::InternalHit::Clear();
    }
    if (has_fisd()) {
      if (fisd_ != NULL) fisd_->::es_product_msg::FisD::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_sigframe()) {
      if (sigframe_ != NULL) sigframe_->::es_product_msg::SIGFrame::Clear();
    }
    if (has_imageavailable()) {
      if (imageavailable_ != NULL) imageavailable_->::es_product_msg::ImageAvailable::Clear();
    }
    if (has_audioavailable()) {
      if (audioavailable_ != NULL) audioavailable_->::es_product_msg::AudioAvailable::Clear();
    }
    if (has_dmrmeta()) {
      if (dmrmeta_ != NULL) dmrmeta_->::es_product_msg::DmrMeta::Clear();
    }
  }
  kvps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ESObservationsTyped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ES_OBSERVATIONS_BOOL"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_iqCollectionParameters;
        break;
      }

      // optional .es_product_msg.IQCollectionParameters iqCollectionParameters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iqCollectionParameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iqcollectionparameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_collectionFrontendParameters;
        break;
      }

      // optional .es_product_msg.CollectionFrontendParameters collectionFrontendParameters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collectionFrontendParameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collectionfrontendparameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_signalEvent;
        break;
      }

      // optional .es_product_msg.SignalEvent signalEvent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signalEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signalevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gpsPosition;
        break;
      }

      // optional .es_product_msg.GPSPosition gpsPosition = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpsPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gpsposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_externalHit;
        break;
      }

      // optional .es_product_msg.ExternalHit externalHit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_externalHit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_externalhit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_internalHit;
        break;
      }

      // optional .es_product_msg.InternalHit internalHit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internalHit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internalhit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fisD;
        break;
      }

      // optional .es_product_msg.FisD fisD = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fisD:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fisd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sigFrame;
        break;
      }

      // optional .es_product_msg.SIGFrame sigFrame = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigFrame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigframe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_imageAvailable;
        break;
      }

      // optional .es_product_msg.ImageAvailable imageAvailable = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageAvailable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imageavailable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_audioAvailable;
        break;
      }

      // optional .es_product_msg.AudioAvailable audioAvailable = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audioAvailable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audioavailable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_dmrMeta;
        break;
      }

      // optional .es_product_msg.DmrMeta dmrMeta = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dmrMeta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dmrmeta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4002)) goto parse_kvps;
        break;
      }

      // repeated .falcon_common_msg.KeyValuePair kvps = 500;
      case 500: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4002)) goto parse_kvps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ESObservationsTyped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ES_OBSERVATIONS_BOOL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .es_product_msg.IQCollectionParameters iqCollectionParameters = 2;
  if (has_iqcollectionparameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iqcollectionparameters(), output);
  }

  // optional .es_product_msg.CollectionFrontendParameters collectionFrontendParameters = 3;
  if (has_collectionfrontendparameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->collectionfrontendparameters(), output);
  }

  // optional .es_product_msg.SignalEvent signalEvent = 4;
  if (has_signalevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->signalevent(), output);
  }

  // optional .es_product_msg.GPSPosition gpsPosition = 5;
  if (has_gpsposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gpsposition(), output);
  }

  // optional .es_product_msg.ExternalHit externalHit = 6;
  if (has_externalhit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->externalhit(), output);
  }

  // optional .es_product_msg.InternalHit internalHit = 7;
  if (has_internalhit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->internalhit(), output);
  }

  // optional .es_product_msg.FisD fisD = 8;
  if (has_fisd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fisd(), output);
  }

  // optional .es_product_msg.SIGFrame sigFrame = 9;
  if (has_sigframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->sigframe(), output);
  }

  // optional .es_product_msg.ImageAvailable imageAvailable = 10;
  if (has_imageavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->imageavailable(), output);
  }

  // optional .es_product_msg.AudioAvailable audioAvailable = 11;
  if (has_audioavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->audioavailable(), output);
  }

  // optional .es_product_msg.DmrMeta dmrMeta = 12;
  if (has_dmrmeta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->dmrmeta(), output);
  }

  // repeated .falcon_common_msg.KeyValuePair kvps = 500;
  for (int i = 0; i < this->kvps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      500, this->kvps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ESObservationsTyped::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ES_OBSERVATIONS_BOOL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .es_product_msg.IQCollectionParameters iqCollectionParameters = 2;
  if (has_iqcollectionparameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iqcollectionparameters(), target);
  }

  // optional .es_product_msg.CollectionFrontendParameters collectionFrontendParameters = 3;
  if (has_collectionfrontendparameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->collectionfrontendparameters(), target);
  }

  // optional .es_product_msg.SignalEvent signalEvent = 4;
  if (has_signalevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->signalevent(), target);
  }

  // optional .es_product_msg.GPSPosition gpsPosition = 5;
  if (has_gpsposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->gpsposition(), target);
  }

  // optional .es_product_msg.ExternalHit externalHit = 6;
  if (has_externalhit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->externalhit(), target);
  }

  // optional .es_product_msg.InternalHit internalHit = 7;
  if (has_internalhit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->internalhit(), target);
  }

  // optional .es_product_msg.FisD fisD = 8;
  if (has_fisd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fisd(), target);
  }

  // optional .es_product_msg.SIGFrame sigFrame = 9;
  if (has_sigframe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->sigframe(), target);
  }

  // optional .es_product_msg.ImageAvailable imageAvailable = 10;
  if (has_imageavailable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->imageavailable(), target);
  }

  // optional .es_product_msg.AudioAvailable audioAvailable = 11;
  if (has_audioavailable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->audioavailable(), target);
  }

  // optional .es_product_msg.DmrMeta dmrMeta = 12;
  if (has_dmrmeta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->dmrmeta(), target);
  }

  // repeated .falcon_common_msg.KeyValuePair kvps = 500;
  for (int i = 0; i < this->kvps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        500, this->kvps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ESObservationsTyped::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ES_OBSERVATIONS_BOOL"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .es_product_msg.IQCollectionParameters iqCollectionParameters = 2;
    if (has_iqcollectionparameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iqcollectionparameters());
    }

    // optional .es_product_msg.CollectionFrontendParameters collectionFrontendParameters = 3;
    if (has_collectionfrontendparameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collectionfrontendparameters());
    }

    // optional .es_product_msg.SignalEvent signalEvent = 4;
    if (has_signalevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signalevent());
    }

    // optional .es_product_msg.GPSPosition gpsPosition = 5;
    if (has_gpsposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gpsposition());
    }

    // optional .es_product_msg.ExternalHit externalHit = 6;
    if (has_externalhit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->externalhit());
    }

    // optional .es_product_msg.InternalHit internalHit = 7;
    if (has_internalhit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internalhit());
    }

    // optional .es_product_msg.FisD fisD = 8;
    if (has_fisd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fisd());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .es_product_msg.SIGFrame sigFrame = 9;
    if (has_sigframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sigframe());
    }

    // optional .es_product_msg.ImageAvailable imageAvailable = 10;
    if (has_imageavailable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imageavailable());
    }

    // optional .es_product_msg.AudioAvailable audioAvailable = 11;
    if (has_audioavailable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audioavailable());
    }

    // optional .es_product_msg.DmrMeta dmrMeta = 12;
    if (has_dmrmeta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dmrmeta());
    }

  }
  // repeated .falcon_common_msg.KeyValuePair kvps = 500;
  total_size += 2 * this->kvps_size();
  for (int i = 0; i < this->kvps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ESObservationsTyped::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ESObservationsTyped* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ESObservationsTyped*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ESObservationsTyped::MergeFrom(const ESObservationsTyped& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvps_.MergeFrom(from.kvps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_iqcollectionparameters()) {
      mutable_iqcollectionparameters()->::es_product_msg::IQCollectionParameters::MergeFrom(from.iqcollectionparameters());
    }
    if (from.has_collectionfrontendparameters()) {
      mutable_collectionfrontendparameters()->::es_product_msg::CollectionFrontendParameters::MergeFrom(from.collectionfrontendparameters());
    }
    if (from.has_signalevent()) {
      mutable_signalevent()->::es_product_msg::SignalEvent::MergeFrom(from.signalevent());
    }
    if (from.has_gpsposition()) {
      mutable_gpsposition()->::es_product_msg::GPSPosition::MergeFrom(from.gpsposition());
    }
    if (from.has_externalhit()) {
      mutable_externalhit()->::es_product_msg::ExternalHit::MergeFrom(from.externalhit());
    }
    if (from.has_internalhit()) {
      mutable_internalhit()->::es_product_msg::InternalHit::MergeFrom(from.internalhit());
    }
    if (from.has_fisd()) {
      mutable_fisd()->::es_product_msg::FisD::MergeFrom(from.fisd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sigframe()) {
      mutable_sigframe()->::es_product_msg::SIGFrame::MergeFrom(from.sigframe());
    }
    if (from.has_imageavailable()) {
      mutable_imageavailable()->::es_product_msg::ImageAvailable::MergeFrom(from.imageavailable());
    }
    if (from.has_audioavailable()) {
      mutable_audioavailable()->::es_product_msg::AudioAvailable::MergeFrom(from.audioavailable());
    }
    if (from.has_dmrmeta()) {
      mutable_dmrmeta()->::es_product_msg::DmrMeta::MergeFrom(from.dmrmeta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ESObservationsTyped::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESObservationsTyped::CopyFrom(const ESObservationsTyped& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESObservationsTyped::IsInitialized() const {

  return true;
}

void ESObservationsTyped::Swap(ESObservationsTyped* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(iqcollectionparameters_, other->iqcollectionparameters_);
    std::swap(collectionfrontendparameters_, other->collectionfrontendparameters_);
    std::swap(signalevent_, other->signalevent_);
    std::swap(gpsposition_, other->gpsposition_);
    std::swap(externalhit_, other->externalhit_);
    std::swap(internalhit_, other->internalhit_);
    std::swap(fisd_, other->fisd_);
    std::swap(sigframe_, other->sigframe_);
    std::swap(imageavailable_, other->imageavailable_);
    std::swap(audioavailable_, other->audioavailable_);
    std::swap(dmrmeta_, other->dmrmeta_);
    kvps_.Swap(&other->kvps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ESObservationsTyped::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ESObservationsTyped_descriptor_;
  metadata.reflection = ESObservationsTyped_reflection_;
  return metadata;
}


// ===================================================================

::std::string* IQCollectionParameters::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int IQCollectionParameters::kMsgNameFieldNumber;
const int IQCollectionParameters::kCenterFreqMHzFieldNumber;
const int IQCollectionParameters::kSampleRateMHzFieldNumber;
const int IQCollectionParameters::kChannelFieldNumber;
const int IQCollectionParameters::kTimestampFieldNumber;
#endif  // !_MSC_VER

IQCollectionParameters::IQCollectionParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IQCollectionParameters::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::falcon_common_msg::Timestamp*>(&::falcon_common_msg::Timestamp::default_instance());
}

IQCollectionParameters::IQCollectionParameters(const IQCollectionParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IQCollectionParameters::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  centerfreqmhz_ = 0;
  sampleratemhz_ = 0;
  channel_ = 0;
  timestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IQCollectionParameters::~IQCollectionParameters() {
  SharedDtor();
}

void IQCollectionParameters::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void IQCollectionParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IQCollectionParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IQCollectionParameters_descriptor_;
}

const IQCollectionParameters& IQCollectionParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ESProductMessages_2eproto();
  return *default_instance_;
}

IQCollectionParameters* IQCollectionParameters::default_instance_ = NULL;

IQCollectionParameters* IQCollectionParameters::New() const {
  return new IQCollectionParameters;
}

void IQCollectionParameters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    centerfreqmhz_ = 0;
    sampleratemhz_ = 0;
    channel_ = 0;
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::falcon_common_msg::Timestamp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IQCollectionParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "IQ_COLLECTION_PARAMETERS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_centerFreqMHz;
        break;
      }

      // optional double centerFreqMHz = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_centerFreqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerfreqmhz_)));
          set_has_centerfreqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_sampleRateMHz;
        break;
      }

      // optional double sampleRateMHz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sampleRateMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sampleratemhz_)));
          set_has_sampleratemhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channel;
        break;
      }

      // optional int32 channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timestamp;
        break;
      }

      // optional .falcon_common_msg.Timestamp timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IQCollectionParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "IQ_COLLECTION_PARAMETERS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double centerFreqMHz = 2;
  if (has_centerfreqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->centerfreqmhz(), output);
  }

  // optional double sampleRateMHz = 3;
  if (has_sampleratemhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sampleratemhz(), output);
  }

  // optional int32 channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->channel(), output);
  }

  // optional .falcon_common_msg.Timestamp timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IQCollectionParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "IQ_COLLECTION_PARAMETERS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double centerFreqMHz = 2;
  if (has_centerfreqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->centerfreqmhz(), target);
  }

  // optional double sampleRateMHz = 3;
  if (has_sampleratemhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->sampleratemhz(), target);
  }

  // optional int32 channel = 4;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->channel(), target);
  }

  // optional .falcon_common_msg.Timestamp timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IQCollectionParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "IQ_COLLECTION_PARAMETERS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double centerFreqMHz = 2;
    if (has_centerfreqmhz()) {
      total_size += 1 + 8;
    }

    // optional double sampleRateMHz = 3;
    if (has_sampleratemhz()) {
      total_size += 1 + 8;
    }

    // optional int32 channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional .falcon_common_msg.Timestamp timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IQCollectionParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IQCollectionParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IQCollectionParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IQCollectionParameters::MergeFrom(const IQCollectionParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_centerfreqmhz()) {
      set_centerfreqmhz(from.centerfreqmhz());
    }
    if (from.has_sampleratemhz()) {
      set_sampleratemhz(from.sampleratemhz());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::falcon_common_msg::Timestamp::MergeFrom(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IQCollectionParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IQCollectionParameters::CopyFrom(const IQCollectionParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IQCollectionParameters::IsInitialized() const {

  return true;
}

void IQCollectionParameters::Swap(IQCollectionParameters* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(centerfreqmhz_, other->centerfreqmhz_);
    std::swap(sampleratemhz_, other->sampleratemhz_);
    std::swap(channel_, other->channel_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IQCollectionParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IQCollectionParameters_descriptor_;
  metadata.reflection = IQCollectionParameters_reflection_;
  return metadata;
}


// ===================================================================

::std::string* CollectionFrontendParameters::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int CollectionFrontendParameters::kMsgNameFieldNumber;
const int CollectionFrontendParameters::kAntNumFieldNumber;
const int CollectionFrontendParameters::kAntAzFieldNumber;
const int CollectionFrontendParameters::kAntElFieldNumber;
const int CollectionFrontendParameters::kBwMHzFieldNumber;
#endif  // !_MSC_VER

CollectionFrontendParameters::CollectionFrontendParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CollectionFrontendParameters::InitAsDefaultInstance() {
}

CollectionFrontendParameters::CollectionFrontendParameters(const CollectionFrontendParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CollectionFrontendParameters::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  antnum_ = 0;
  antaz_ = 0;
  antel_ = 0;
  bwmhz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectionFrontendParameters::~CollectionFrontendParameters() {
  SharedDtor();
}

void CollectionFrontendParameters::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void CollectionFrontendParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectionFrontendParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectionFrontendParameters_descriptor_;
}

const CollectionFrontendParameters& CollectionFrontendParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ESProductMessages_2eproto();
  return *default_instance_;
}

CollectionFrontendParameters* CollectionFrontendParameters::default_instance_ = NULL;

CollectionFrontendParameters* CollectionFrontendParameters::New() const {
  return new CollectionFrontendParameters;
}

void CollectionFrontendParameters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    antnum_ = 0;
    antaz_ = 0;
    antel_ = 0;
    bwmhz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CollectionFrontendParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "COLLECTION_FRONTEND_PARAMETERS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_antNum;
        break;
      }

      // optional int32 antNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_antNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &antnum_)));
          set_has_antnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_antAz;
        break;
      }

      // optional float antAz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_antAz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &antaz_)));
          set_has_antaz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_antEl;
        break;
      }

      // optional float antEl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_antEl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &antel_)));
          set_has_antel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_bwMHz;
        break;
      }

      // optional float bwMHz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bwMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bwmhz_)));
          set_has_bwmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CollectionFrontendParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "COLLECTION_FRONTEND_PARAMETERS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 antNum = 2;
  if (has_antnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->antnum(), output);
  }

  // optional float antAz = 3;
  if (has_antaz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->antaz(), output);
  }

  // optional float antEl = 4;
  if (has_antel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->antel(), output);
  }

  // optional float bwMHz = 5;
  if (has_bwmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->bwmhz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CollectionFrontendParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "COLLECTION_FRONTEND_PARAMETERS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 antNum = 2;
  if (has_antnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->antnum(), target);
  }

  // optional float antAz = 3;
  if (has_antaz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->antaz(), target);
  }

  // optional float antEl = 4;
  if (has_antel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->antel(), target);
  }

  // optional float bwMHz = 5;
  if (has_bwmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->bwmhz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CollectionFrontendParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "COLLECTION_FRONTEND_PARAMETERS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 antNum = 2;
    if (has_antnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->antnum());
    }

    // optional float antAz = 3;
    if (has_antaz()) {
      total_size += 1 + 4;
    }

    // optional float antEl = 4;
    if (has_antel()) {
      total_size += 1 + 4;
    }

    // optional float bwMHz = 5;
    if (has_bwmhz()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectionFrontendParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CollectionFrontendParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CollectionFrontendParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollectionFrontendParameters::MergeFrom(const CollectionFrontendParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_antnum()) {
      set_antnum(from.antnum());
    }
    if (from.has_antaz()) {
      set_antaz(from.antaz());
    }
    if (from.has_antel()) {
      set_antel(from.antel());
    }
    if (from.has_bwmhz()) {
      set_bwmhz(from.bwmhz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CollectionFrontendParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionFrontendParameters::CopyFrom(const CollectionFrontendParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionFrontendParameters::IsInitialized() const {

  return true;
}

void CollectionFrontendParameters::Swap(CollectionFrontendParameters* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(antnum_, other->antnum_);
    std::swap(antaz_, other->antaz_);
    std::swap(antel_, other->antel_);
    std::swap(bwmhz_, other->bwmhz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CollectionFrontendParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectionFrontendParameters_descriptor_;
  metadata.reflection = CollectionFrontendParameters_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SignalEvent_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalEvent_Type_descriptor_;
}
bool SignalEvent_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SignalEvent_Type SignalEvent::SIGDET;
const SignalEvent_Type SignalEvent::SIGUP;
const SignalEvent_Type SignalEvent::SIGDOWN;
const SignalEvent_Type SignalEvent::SIGTIMEOUT;
const SignalEvent_Type SignalEvent::Type_MIN;
const SignalEvent_Type SignalEvent::Type_MAX;
const int SignalEvent::Type_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* SignalEvent::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SignalEvent::kMsgNameFieldNumber;
const int SignalEvent::kEventTypeFieldNumber;
const int SignalEvent::kEventIDFieldNumber;
const int SignalEvent::kTimestampFieldNumber;
const int SignalEvent::kRfMHzFieldNumber;
const int SignalEvent::kSubcarMHzFieldNumber;
const int SignalEvent::kExcurKHzFieldNumber;
const int SignalEvent::kAppIDFieldNumber;
const int SignalEvent::kScryptFieldNumber;
const int SignalEvent::kExportPortFieldNumber;
#endif  // !_MSC_VER

SignalEvent::SignalEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalEvent::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::falcon_common_msg::Timestamp*>(&::falcon_common_msg::Timestamp::default_instance());
}

SignalEvent::SignalEvent(const SignalEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalEvent::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  eventtype_ = 0;
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = NULL;
  rfmhz_ = 0;
  subcarmhz_ = 0;
  excurkhz_ = 0;
  appid_ = 0;
  scrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exportport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalEvent::~SignalEvent() {
  SharedDtor();
}

void SignalEvent::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (scrypt_ != &::google::protobuf::internal::kEmptyString) {
    delete scrypt_;
  }
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void SignalEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalEvent_descriptor_;
}

const SignalEvent& SignalEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ESProductMessages_2eproto();
  return *default_instance_;
}

SignalEvent* SignalEvent::default_instance_ = NULL;

SignalEvent* SignalEvent::New() const {
  return new SignalEvent;
}

void SignalEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    eventtype_ = 0;
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::falcon_common_msg::Timestamp::Clear();
    }
    rfmhz_ = 0;
    subcarmhz_ = 0;
    excurkhz_ = 0;
    appid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_scrypt()) {
      if (scrypt_ != &::google::protobuf::internal::kEmptyString) {
        scrypt_->clear();
      }
    }
    exportport_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SIGNAL_EVENT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eventType;
        break;
      }

      // optional .es_product_msg.SignalEvent.Type eventType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es_product_msg::SignalEvent_Type_IsValid(value)) {
            set_eventtype(static_cast< ::es_product_msg::SignalEvent_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_eventID;
        break;
      }

      // optional string eventID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_timestamp;
        break;
      }

      // optional .falcon_common_msg.Timestamp timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rfMHz;
        break;
      }

      // optional float rfMHz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rfMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rfmhz_)));
          set_has_rfmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_subcarMHz;
        break;
      }

      // optional float subcarMHz = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_subcarMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &subcarmhz_)));
          set_has_subcarmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_excurKHz;
        break;
      }

      // optional float excurKHz = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_excurKHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &excurkhz_)));
          set_has_excurkhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_appID;
        break;
      }

      // optional int32 appID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_scrypt;
        break;
      }

      // optional string scrypt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scrypt().data(), this->scrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_exportPort;
        break;
      }

      // optional int32 exportPort = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exportPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exportport_)));
          set_has_exportport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SIGNAL_EVENT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .es_product_msg.SignalEvent.Type eventType = 2;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eventtype(), output);
  }

  // optional string eventID = 3;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->eventid(), output);
  }

  // optional .falcon_common_msg.Timestamp timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->timestamp(), output);
  }

  // optional float rfMHz = 5;
  if (has_rfmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rfmhz(), output);
  }

  // optional float subcarMHz = 6;
  if (has_subcarmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->subcarmhz(), output);
  }

  // optional float excurKHz = 7;
  if (has_excurkhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->excurkhz(), output);
  }

  // optional int32 appID = 8;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->appid(), output);
  }

  // optional string scrypt = 9;
  if (has_scrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scrypt().data(), this->scrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->scrypt(), output);
  }

  // optional int32 exportPort = 10;
  if (has_exportport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->exportport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SIGNAL_EVENT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .es_product_msg.SignalEvent.Type eventType = 2;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eventtype(), target);
  }

  // optional string eventID = 3;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->eventid(), target);
  }

  // optional .falcon_common_msg.Timestamp timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->timestamp(), target);
  }

  // optional float rfMHz = 5;
  if (has_rfmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rfmhz(), target);
  }

  // optional float subcarMHz = 6;
  if (has_subcarmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->subcarmhz(), target);
  }

  // optional float excurKHz = 7;
  if (has_excurkhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->excurkhz(), target);
  }

  // optional int32 appID = 8;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->appid(), target);
  }

  // optional string scrypt = 9;
  if (has_scrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scrypt().data(), this->scrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->scrypt(), target);
  }

  // optional int32 exportPort = 10;
  if (has_exportport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->exportport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SIGNAL_EVENT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .es_product_msg.SignalEvent.Type eventType = 2;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
    }

    // optional string eventID = 3;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

    // optional .falcon_common_msg.Timestamp timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // optional float rfMHz = 5;
    if (has_rfmhz()) {
      total_size += 1 + 4;
    }

    // optional float subcarMHz = 6;
    if (has_subcarmhz()) {
      total_size += 1 + 4;
    }

    // optional float excurKHz = 7;
    if (has_excurkhz()) {
      total_size += 1 + 4;
    }

    // optional int32 appID = 8;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string scrypt = 9;
    if (has_scrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scrypt());
    }

    // optional int32 exportPort = 10;
    if (has_exportport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exportport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalEvent::MergeFrom(const SignalEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::falcon_common_msg::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_rfmhz()) {
      set_rfmhz(from.rfmhz());
    }
    if (from.has_subcarmhz()) {
      set_subcarmhz(from.subcarmhz());
    }
    if (from.has_excurkhz()) {
      set_excurkhz(from.excurkhz());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scrypt()) {
      set_scrypt(from.scrypt());
    }
    if (from.has_exportport()) {
      set_exportport(from.exportport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalEvent::CopyFrom(const SignalEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalEvent::IsInitialized() const {

  return true;
}

void SignalEvent::Swap(SignalEvent* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(eventid_, other->eventid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(rfmhz_, other->rfmhz_);
    std::swap(subcarmhz_, other->subcarmhz_);
    std::swap(excurkhz_, other->excurkhz_);
    std::swap(appid_, other->appid_);
    std::swap(scrypt_, other->scrypt_);
    std::swap(exportport_, other->exportport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalEvent_descriptor_;
  metadata.reflection = SignalEvent_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GPSPosition::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GPSPosition::kMsgNameFieldNumber;
const int GPSPosition::kEventIDFieldNumber;
const int GPSPosition::kLatitudeFieldNumber;
const int GPSPosition::kLongitudeFieldNumber;
const int GPSPosition::kAltitudeFieldNumber;
const int GPSPosition::kWpLatitudeFieldNumber;
const int GPSPosition::kWpLongitudeFieldNumber;
const int GPSPosition::kVelocityFieldNumber;
const int GPSPosition::kBearingFieldNumber;
const int GPSPosition::kRangeFieldNumber;
const int GPSPosition::kTimestampFieldNumber;
const int GPSPosition::kSeqNumFieldNumber;
const int GPSPosition::kIsPredictionFieldNumber;
const int GPSPosition::kMajorFieldNumber;
const int GPSPosition::kMinorFieldNumber;
const int GPSPosition::kVectorFieldNumber;
const int GPSPosition::kAppIDFieldNumber;
#endif  // !_MSC_VER

GPSPosition::GPSPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GPSPosition::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::falcon_common_msg::Timestamp*>(&::falcon_common_msg::Timestamp::default_instance());
}

GPSPosition::GPSPosition(const GPSPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GPSPosition::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  latitude_ = 0;
  longitude_ = 0;
  altitude_ = 0;
  wplatitude_ = 0;
  wplongitude_ = 0;
  velocity_ = 0;
  bearing_ = 0;
  range_ = 0;
  timestamp_ = NULL;
  seqnum_ = 0;
  isprediction_ = false;
  major_ = 0;
  minor_ = 0;
  vector_ = 0;
  appid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPSPosition::~GPSPosition() {
  SharedDtor();
}

void GPSPosition::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void GPSPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSPosition_descriptor_;
}

const GPSPosition& GPSPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ESProductMessages_2eproto();
  return *default_instance_;
}

GPSPosition* GPSPosition::default_instance_ = NULL;

GPSPosition* GPSPosition::New() const {
  return new GPSPosition;
}

void GPSPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
    latitude_ = 0;
    longitude_ = 0;
    altitude_ = 0;
    wplatitude_ = 0;
    wplongitude_ = 0;
    velocity_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bearing_ = 0;
    range_ = 0;
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::falcon_common_msg::Timestamp::Clear();
    }
    seqnum_ = 0;
    isprediction_ = false;
    major_ = 0;
    minor_ = 0;
    vector_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    appid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPSPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GPS_POSITION"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eventID;
        break;
      }

      // optional string eventID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_latitude;
        break;
      }

      // optional float latitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_longitude;
        break;
      }

      // optional float longitude = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_altitude;
        break;
      }

      // optional float altitude = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_wpLatitude;
        break;
      }

      // optional float wpLatitude = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wpLatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wplatitude_)));
          set_has_wplatitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_wpLongitude;
        break;
      }

      // optional float wpLongitude = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wpLongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wplongitude_)));
          set_has_wplongitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_velocity;
        break;
      }

      // optional float velocity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_bearing;
        break;
      }

      // optional float bearing = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bearing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bearing_)));
          set_has_bearing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_range;
        break;
      }

      // optional float range = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_timestamp;
        break;
      }

      // optional .falcon_common_msg.Timestamp timestamp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_seqNum;
        break;
      }

      // optional float seqNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_seqNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_isPrediction;
        break;
      }

      // optional bool isPrediction = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPrediction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isprediction_)));
          set_has_isprediction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_major;
        break;
      }

      // optional float major = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &major_)));
          set_has_major();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_minor;
        break;
      }

      // optional float minor = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minor_)));
          set_has_minor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_vector;
        break;
      }

      // optional float vector = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vector_)));
          set_has_vector();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_appID;
        break;
      }

      // optional int32 appID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GPSPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GPS_POSITION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string eventID = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->eventid(), output);
  }

  // optional float latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->latitude(), output);
  }

  // optional float longitude = 4;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->longitude(), output);
  }

  // optional float altitude = 5;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->altitude(), output);
  }

  // optional float wpLatitude = 6;
  if (has_wplatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->wplatitude(), output);
  }

  // optional float wpLongitude = 7;
  if (has_wplongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->wplongitude(), output);
  }

  // optional float velocity = 8;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->velocity(), output);
  }

  // optional float bearing = 9;
  if (has_bearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->bearing(), output);
  }

  // optional float range = 10;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->range(), output);
  }

  // optional .falcon_common_msg.Timestamp timestamp = 11;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->timestamp(), output);
  }

  // optional float seqNum = 12;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->seqnum(), output);
  }

  // optional bool isPrediction = 13;
  if (has_isprediction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isprediction(), output);
  }

  // optional float major = 14;
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->major(), output);
  }

  // optional float minor = 15;
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->minor(), output);
  }

  // optional float vector = 16;
  if (has_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->vector(), output);
  }

  // optional int32 appID = 17;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GPSPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GPS_POSITION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string eventID = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->eventid(), target);
  }

  // optional float latitude = 3;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->latitude(), target);
  }

  // optional float longitude = 4;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->longitude(), target);
  }

  // optional float altitude = 5;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->altitude(), target);
  }

  // optional float wpLatitude = 6;
  if (has_wplatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->wplatitude(), target);
  }

  // optional float wpLongitude = 7;
  if (has_wplongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->wplongitude(), target);
  }

  // optional float velocity = 8;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->velocity(), target);
  }

  // optional float bearing = 9;
  if (has_bearing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->bearing(), target);
  }

  // optional float range = 10;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->range(), target);
  }

  // optional .falcon_common_msg.Timestamp timestamp = 11;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->timestamp(), target);
  }

  // optional float seqNum = 12;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->seqnum(), target);
  }

  // optional bool isPrediction = 13;
  if (has_isprediction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isprediction(), target);
  }

  // optional float major = 14;
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->major(), target);
  }

  // optional float minor = 15;
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->minor(), target);
  }

  // optional float vector = 16;
  if (has_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->vector(), target);
  }

  // optional int32 appID = 17;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GPSPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GPS_POSITION"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string eventID = 2;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

    // optional float latitude = 3;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 4;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional float altitude = 5;
    if (has_altitude()) {
      total_size += 1 + 4;
    }

    // optional float wpLatitude = 6;
    if (has_wplatitude()) {
      total_size += 1 + 4;
    }

    // optional float wpLongitude = 7;
    if (has_wplongitude()) {
      total_size += 1 + 4;
    }

    // optional float velocity = 8;
    if (has_velocity()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float bearing = 9;
    if (has_bearing()) {
      total_size += 1 + 4;
    }

    // optional float range = 10;
    if (has_range()) {
      total_size += 1 + 4;
    }

    // optional .falcon_common_msg.Timestamp timestamp = 11;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // optional float seqNum = 12;
    if (has_seqnum()) {
      total_size += 1 + 4;
    }

    // optional bool isPrediction = 13;
    if (has_isprediction()) {
      total_size += 1 + 1;
    }

    // optional float major = 14;
    if (has_major()) {
      total_size += 1 + 4;
    }

    // optional float minor = 15;
    if (has_minor()) {
      total_size += 1 + 4;
    }

    // optional float vector = 16;
    if (has_vector()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 appID = 17;
    if (has_appid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPSPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPSPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPSPosition::MergeFrom(const GPSPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_wplatitude()) {
      set_wplatitude(from.wplatitude());
    }
    if (from.has_wplongitude()) {
      set_wplongitude(from.wplongitude());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bearing()) {
      set_bearing(from.bearing());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::falcon_common_msg::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
    if (from.has_isprediction()) {
      set_isprediction(from.isprediction());
    }
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
    if (from.has_vector()) {
      set_vector(from.vector());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPSPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSPosition::CopyFrom(const GPSPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSPosition::IsInitialized() const {

  return true;
}

void GPSPosition::Swap(GPSPosition* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(eventid_, other->eventid_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(altitude_, other->altitude_);
    std::swap(wplatitude_, other->wplatitude_);
    std::swap(wplongitude_, other->wplongitude_);
    std::swap(velocity_, other->velocity_);
    std::swap(bearing_, other->bearing_);
    std::swap(range_, other->range_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(isprediction_, other->isprediction_);
    std::swap(major_, other->major_);
    std::swap(minor_, other->minor_);
    std::swap(vector_, other->vector_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPSPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPSPosition_descriptor_;
  metadata.reflection = GPSPosition_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ExternalHit_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalHit_Type_descriptor_;
}
bool ExternalHit_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExternalHit_Type ExternalHit::KNOWN_RED;
const ExternalHit_Type ExternalHit::KNOWN_GRAY;
const ExternalHit_Type ExternalHit::KNOWN_BLUE;
const ExternalHit_Type ExternalHit::UNKNOWN;
const ExternalHit_Type ExternalHit::ANOMALY;
const ExternalHit_Type ExternalHit::Type_MIN;
const ExternalHit_Type ExternalHit::Type_MAX;
const int ExternalHit::Type_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* ExternalHit::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ExternalHit::kMsgNameFieldNumber;
const int ExternalHit::kThreatTypeFieldNumber;
const int ExternalHit::kCenterFreqMHzFieldNumber;
const int ExternalHit::kPseudoUniqueIdFieldNumber;
const int ExternalHit::kTimestampFieldNumber;
const int ExternalHit::kIsTriggerFieldNumber;
const int ExternalHit::kHopDescriptorFieldNumber;
const int ExternalHit::kFskDescriptorFieldNumber;
const int ExternalHit::kCwDescriptorFieldNumber;
const int ExternalHit::kSpreadDescriptorFieldNumber;
const int ExternalHit::kAvDescriptorFieldNumber;
const int ExternalHit::kDsssDescriptorFieldNumber;
const int ExternalHit::kUpdateValuesFieldNumber;
#endif  // !_MSC_VER

ExternalHit::ExternalHit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExternalHit::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::falcon_common_msg::Timestamp*>(&::falcon_common_msg::Timestamp::default_instance());
  hopdescriptor_ = const_cast< ::falcon_externals_msg::HopDescriptor*>(&::falcon_externals_msg::HopDescriptor::default_instance());
  fskdescriptor_ = const_cast< ::falcon_externals_msg::FSKDescriptor*>(&::falcon_externals_msg::FSKDescriptor::default_instance());
  cwdescriptor_ = const_cast< ::falcon_externals_msg::CWDescriptor*>(&::falcon_externals_msg::CWDescriptor::default_instance());
  spreaddescriptor_ = const_cast< ::falcon_externals_msg::SpreadDescriptor*>(&::falcon_externals_msg::SpreadDescriptor::default_instance());
  avdescriptor_ = const_cast< ::falcon_externals_msg::AVDescriptor*>(&::falcon_externals_msg::AVDescriptor::default_instance());
  dsssdescriptor_ = const_cast< ::falcon_externals_msg::DsssDescriptor*>(&::falcon_externals_msg::DsssDescriptor::default_instance());
}

ExternalHit::ExternalHit(const ExternalHit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExternalHit::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  threattype_ = 0;
  centerfreqmhz_ = 0;
  pseudouniqueid_ = 0;
  timestamp_ = NULL;
  istrigger_ = false;
  hopdescriptor_ = NULL;
  fskdescriptor_ = NULL;
  cwdescriptor_ = NULL;
  spreaddescriptor_ = NULL;
  avdescriptor_ = NULL;
  dsssdescriptor_ = NULL;
  updatevalues_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExternalHit::~ExternalHit() {
  SharedDtor();
}

void ExternalHit::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete timestamp_;
    delete hopdescriptor_;
    delete fskdescriptor_;
    delete cwdescriptor_;
    delete spreaddescriptor_;
    delete avdescriptor_;
    delete dsssdescriptor_;
  }
}

void ExternalHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalHit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalHit_descriptor_;
}

const ExternalHit& ExternalHit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ESProductMessages_2eproto();
  return *default_instance_;
}

ExternalHit* ExternalHit::default_instance_ = NULL;

ExternalHit* ExternalHit::New() const {
  return new ExternalHit;
}

void ExternalHit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    threattype_ = 0;
    centerfreqmhz_ = 0;
    pseudouniqueid_ = 0;
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::falcon_common_msg::Timestamp::Clear();
    }
    istrigger_ = false;
    if (has_hopdescriptor()) {
      if (hopdescriptor_ != NULL) hopdescriptor_->::falcon_externals_msg::HopDescriptor::Clear();
    }
    if (has_fskdescriptor()) {
      if (fskdescriptor_ != NULL) fskdescriptor_->::falcon_externals_msg::FSKDescriptor::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_cwdescriptor()) {
      if (cwdescriptor_ != NULL) cwdescriptor_->::falcon_externals_msg::CWDescriptor::Clear();
    }
    if (has_spreaddescriptor()) {
      if (spreaddescriptor_ != NULL) spreaddescriptor_->::falcon_externals_msg::SpreadDescriptor::Clear();
    }
    if (has_avdescriptor()) {
      if (avdescriptor_ != NULL) avdescriptor_->::falcon_externals_msg::AVDescriptor::Clear();
    }
    if (has_dsssdescriptor()) {
      if (dsssdescriptor_ != NULL) dsssdescriptor_->::falcon_externals_msg::DsssDescriptor::Clear();
    }
    updatevalues_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExternalHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EXTERNAL_HIT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_threatType;
        break;
      }

      // optional .es_product_msg.ExternalHit.Type threatType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_threatType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es_product_msg::ExternalHit_Type_IsValid(value)) {
            set_threattype(static_cast< ::es_product_msg::ExternalHit_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_centerFreqMHz;
        break;
      }

      // optional double centerFreqMHz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_centerFreqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerfreqmhz_)));
          set_has_centerfreqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pseudoUniqueId;
        break;
      }

      // optional int32 pseudoUniqueId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pseudoUniqueId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pseudouniqueid_)));
          set_has_pseudouniqueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timestamp;
        break;
      }

      // optional .falcon_common_msg.Timestamp timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_hopDescriptor;
        break;
      }

      // optional .falcon_externals_msg.HopDescriptor hopDescriptor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hopDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hopdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fskDescriptor;
        break;
      }

      // optional .falcon_externals_msg.FSKDescriptor fskDescriptor = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fskDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fskdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_cwDescriptor;
        break;
      }

      // optional .falcon_externals_msg.CWDescriptor cwDescriptor = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cwDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cwdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_spreadDescriptor;
        break;
      }

      // optional .falcon_externals_msg.SpreadDescriptor spreadDescriptor = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spreadDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spreaddescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_avDescriptor;
        break;
      }

      // optional .falcon_externals_msg.AVDescriptor avDescriptor = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_dsssDescriptor;
        break;
      }

      // optional .falcon_externals_msg.DsssDescriptor dsssDescriptor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dsssDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dsssdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_updateValues;
        break;
      }

      // optional int32 updateValues = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updateValues:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatevalues_)));
          set_has_updatevalues();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExternalHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EXTERNAL_HIT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .es_product_msg.ExternalHit.Type threatType = 2;
  if (has_threattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->threattype(), output);
  }

  // optional double centerFreqMHz = 3;
  if (has_centerfreqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->centerfreqmhz(), output);
  }

  // optional int32 pseudoUniqueId = 4;
  if (has_pseudouniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pseudouniqueid(), output);
  }

  // optional .falcon_common_msg.Timestamp timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->timestamp(), output);
  }

  // optional bool isTrigger = 6;
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->istrigger(), output);
  }

  // optional .falcon_externals_msg.HopDescriptor hopDescriptor = 7;
  if (has_hopdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->hopdescriptor(), output);
  }

  // optional .falcon_externals_msg.FSKDescriptor fskDescriptor = 8;
  if (has_fskdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fskdescriptor(), output);
  }

  // optional .falcon_externals_msg.CWDescriptor cwDescriptor = 9;
  if (has_cwdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->cwdescriptor(), output);
  }

  // optional .falcon_externals_msg.SpreadDescriptor spreadDescriptor = 10;
  if (has_spreaddescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->spreaddescriptor(), output);
  }

  // optional .falcon_externals_msg.AVDescriptor avDescriptor = 11;
  if (has_avdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->avdescriptor(), output);
  }

  // optional .falcon_externals_msg.DsssDescriptor dsssDescriptor = 12;
  if (has_dsssdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->dsssdescriptor(), output);
  }

  // optional int32 updateValues = 13;
  if (has_updatevalues()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->updatevalues(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExternalHit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EXTERNAL_HIT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .es_product_msg.ExternalHit.Type threatType = 2;
  if (has_threattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->threattype(), target);
  }

  // optional double centerFreqMHz = 3;
  if (has_centerfreqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->centerfreqmhz(), target);
  }

  // optional int32 pseudoUniqueId = 4;
  if (has_pseudouniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pseudouniqueid(), target);
  }

  // optional .falcon_common_msg.Timestamp timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->timestamp(), target);
  }

  // optional bool isTrigger = 6;
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->istrigger(), target);
  }

  // optional .falcon_externals_msg.HopDescriptor hopDescriptor = 7;
  if (has_hopdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->hopdescriptor(), target);
  }

  // optional .falcon_externals_msg.FSKDescriptor fskDescriptor = 8;
  if (has_fskdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fskdescriptor(), target);
  }

  // optional .falcon_externals_msg.CWDescriptor cwDescriptor = 9;
  if (has_cwdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->cwdescriptor(), target);
  }

  // optional .falcon_externals_msg.SpreadDescriptor spreadDescriptor = 10;
  if (has_spreaddescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->spreaddescriptor(), target);
  }

  // optional .falcon_externals_msg.AVDescriptor avDescriptor = 11;
  if (has_avdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->avdescriptor(), target);
  }

  // optional .falcon_externals_msg.DsssDescriptor dsssDescriptor = 12;
  if (has_dsssdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->dsssdescriptor(), target);
  }

  // optional int32 updateValues = 13;
  if (has_updatevalues()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->updatevalues(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExternalHit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EXTERNAL_HIT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .es_product_msg.ExternalHit.Type threatType = 2;
    if (has_threattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->threattype());
    }

    // optional double centerFreqMHz = 3;
    if (has_centerfreqmhz()) {
      total_size += 1 + 8;
    }

    // optional int32 pseudoUniqueId = 4;
    if (has_pseudouniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pseudouniqueid());
    }

    // optional .falcon_common_msg.Timestamp timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // optional bool isTrigger = 6;
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

    // optional .falcon_externals_msg.HopDescriptor hopDescriptor = 7;
    if (has_hopdescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hopdescriptor());
    }

    // optional .falcon_externals_msg.FSKDescriptor fskDescriptor = 8;
    if (has_fskdescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fskdescriptor());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .falcon_externals_msg.CWDescriptor cwDescriptor = 9;
    if (has_cwdescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cwdescriptor());
    }

    // optional .falcon_externals_msg.SpreadDescriptor spreadDescriptor = 10;
    if (has_spreaddescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spreaddescriptor());
    }

    // optional .falcon_externals_msg.AVDescriptor avDescriptor = 11;
    if (has_avdescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avdescriptor());
    }

    // optional .falcon_externals_msg.DsssDescriptor dsssDescriptor = 12;
    if (has_dsssdescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dsssdescriptor());
    }

    // optional int32 updateValues = 13;
    if (has_updatevalues()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatevalues());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalHit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExternalHit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternalHit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternalHit::MergeFrom(const ExternalHit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_threattype()) {
      set_threattype(from.threattype());
    }
    if (from.has_centerfreqmhz()) {
      set_centerfreqmhz(from.centerfreqmhz());
    }
    if (from.has_pseudouniqueid()) {
      set_pseudouniqueid(from.pseudouniqueid());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::falcon_common_msg::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
    if (from.has_hopdescriptor()) {
      mutable_hopdescriptor()->::falcon_externals_msg::HopDescriptor::MergeFrom(from.hopdescriptor());
    }
    if (from.has_fskdescriptor()) {
      mutable_fskdescriptor()->::falcon_externals_msg::FSKDescriptor::MergeFrom(from.fskdescriptor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cwdescriptor()) {
      mutable_cwdescriptor()->::falcon_externals_msg::CWDescriptor::MergeFrom(from.cwdescriptor());
    }
    if (from.has_spreaddescriptor()) {
      mutable_spreaddescriptor()->::falcon_externals_msg::SpreadDescriptor::MergeFrom(from.spreaddescriptor());
    }
    if (from.has_avdescriptor()) {
      mutable_avdescriptor()->::falcon_externals_msg::AVDescriptor::MergeFrom(from.avdescriptor());
    }
    if (from.has_dsssdescriptor()) {
      mutable_dsssdescriptor()->::falcon_externals_msg::DsssDescriptor::MergeFrom(from.dsssdescriptor());
    }
    if (from.has_updatevalues()) {
      set_updatevalues(from.updatevalues());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExternalHit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalHit::CopyFrom(const ExternalHit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalHit::IsInitialized() const {

  return true;
}

void ExternalHit::Swap(ExternalHit* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(threattype_, other->threattype_);
    std::swap(centerfreqmhz_, other->centerfreqmhz_);
    std::swap(pseudouniqueid_, other->pseudouniqueid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(hopdescriptor_, other->hopdescriptor_);
    std::swap(fskdescriptor_, other->fskdescriptor_);
    std::swap(cwdescriptor_, other->cwdescriptor_);
    std::swap(spreaddescriptor_, other->spreaddescriptor_);
    std::swap(avdescriptor_, other->avdescriptor_);
    std::swap(dsssdescriptor_, other->dsssdescriptor_);
    std::swap(updatevalues_, other->updatevalues_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExternalHit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternalHit_descriptor_;
  metadata.reflection = ExternalHit_reflection_;
  return metadata;
}


// ===================================================================

::std::string* InternalHit::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int InternalHit::kMsgNameFieldNumber;
const int InternalHit::kCenterFreqMHzFieldNumber;
const int InternalHit::kPseudoUniqueIdFieldNumber;
const int InternalHit::kTimestampFieldNumber;
const int InternalHit::kIsTriggerFieldNumber;
const int InternalHit::kHopDescriptorFieldNumber;
const int InternalHit::kFskDescriptorFieldNumber;
const int InternalHit::kCwDescriptorFieldNumber;
const int InternalHit::kSpreadDescriptorFieldNumber;
const int InternalHit::kAvDescriptorFieldNumber;
const int InternalHit::kDsssDescriptorFieldNumber;
const int InternalHit::kUpdateValuesFieldNumber;
#endif  // !_MSC_VER

InternalHit::InternalHit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InternalHit::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::falcon_common_msg::Timestamp*>(&::falcon_common_msg::Timestamp::default_instance());
  hopdescriptor_ = const_cast< ::falcon_externals_msg::HopDescriptor*>(&::falcon_externals_msg::HopDescriptor::default_instance());
  fskdescriptor_ = const_cast< ::falcon_externals_msg::FSKDescriptor*>(&::falcon_externals_msg::FSKDescriptor::default_instance());
  cwdescriptor_ = const_cast< ::falcon_externals_msg::CWDescriptor*>(&::falcon_externals_msg::CWDescriptor::default_instance());
  spreaddescriptor_ = const_cast< ::falcon_externals_msg::SpreadDescriptor*>(&::falcon_externals_msg::SpreadDescriptor::default_instance());
  avdescriptor_ = const_cast< ::falcon_externals_msg::AVDescriptor*>(&::falcon_externals_msg::AVDescriptor::default_instance());
  dsssdescriptor_ = const_cast< ::falcon_externals_msg::DsssDescriptor*>(&::falcon_externals_msg::DsssDescriptor::default_instance());
}

InternalHit::InternalHit(const InternalHit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InternalHit::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  centerfreqmhz_ = 0;
  pseudouniqueid_ = 0;
  timestamp_ = NULL;
  istrigger_ = false;
  hopdescriptor_ = NULL;
  fskdescriptor_ = NULL;
  cwdescriptor_ = NULL;
  spreaddescriptor_ = NULL;
  avdescriptor_ = NULL;
  dsssdescriptor_ = NULL;
  updatevalues_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalHit::~InternalHit() {
  SharedDtor();
}

void InternalHit::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete timestamp_;
    delete hopdescriptor_;
    delete fskdescriptor_;
    delete cwdescriptor_;
    delete spreaddescriptor_;
    delete avdescriptor_;
    delete dsssdescriptor_;
  }
}

void InternalHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalHit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalHit_descriptor_;
}

const InternalHit& InternalHit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ESProductMessages_2eproto();
  return *default_instance_;
}

InternalHit* InternalHit::default_instance_ = NULL;

InternalHit* InternalHit::New() const {
  return new InternalHit;
}

void InternalHit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    centerfreqmhz_ = 0;
    pseudouniqueid_ = 0;
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::falcon_common_msg::Timestamp::Clear();
    }
    istrigger_ = false;
    if (has_hopdescriptor()) {
      if (hopdescriptor_ != NULL) hopdescriptor_->::falcon_externals_msg::HopDescriptor::Clear();
    }
    if (has_fskdescriptor()) {
      if (fskdescriptor_ != NULL) fskdescriptor_->::falcon_externals_msg::FSKDescriptor::Clear();
    }
    if (has_cwdescriptor()) {
      if (cwdescriptor_ != NULL) cwdescriptor_->::falcon_externals_msg::CWDescriptor::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_spreaddescriptor()) {
      if (spreaddescriptor_ != NULL) spreaddescriptor_->::falcon_externals_msg::SpreadDescriptor::Clear();
    }
    if (has_avdescriptor()) {
      if (avdescriptor_ != NULL) avdescriptor_->::falcon_externals_msg::AVDescriptor::Clear();
    }
    if (has_dsssdescriptor()) {
      if (dsssdescriptor_ != NULL) dsssdescriptor_->::falcon_externals_msg::DsssDescriptor::Clear();
    }
    updatevalues_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "INTERNAL_HIT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_centerFreqMHz;
        break;
      }

      // optional double centerFreqMHz = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_centerFreqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerfreqmhz_)));
          set_has_centerfreqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pseudoUniqueId;
        break;
      }

      // optional int32 pseudoUniqueId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pseudoUniqueId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pseudouniqueid_)));
          set_has_pseudouniqueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_timestamp;
        break;
      }

      // optional .falcon_common_msg.Timestamp timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_hopDescriptor;
        break;
      }

      // optional .falcon_externals_msg.HopDescriptor hopDescriptor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hopDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hopdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fskDescriptor;
        break;
      }

      // optional .falcon_externals_msg.FSKDescriptor fskDescriptor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fskDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fskdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cwDescriptor;
        break;
      }

      // optional .falcon_externals_msg.CWDescriptor cwDescriptor = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cwDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cwdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_spreadDescriptor;
        break;
      }

      // optional .falcon_externals_msg.SpreadDescriptor spreadDescriptor = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spreadDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spreaddescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_avDescriptor;
        break;
      }

      // optional .falcon_externals_msg.AVDescriptor avDescriptor = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_dsssDescriptor;
        break;
      }

      // optional .falcon_externals_msg.DsssDescriptor dsssDescriptor = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dsssDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dsssdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_updateValues;
        break;
      }

      // optional int32 updateValues = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updateValues:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatevalues_)));
          set_has_updatevalues();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InternalHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "INTERNAL_HIT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double centerFreqMHz = 2;
  if (has_centerfreqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->centerfreqmhz(), output);
  }

  // optional int32 pseudoUniqueId = 3;
  if (has_pseudouniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pseudouniqueid(), output);
  }

  // optional .falcon_common_msg.Timestamp timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->timestamp(), output);
  }

  // optional bool isTrigger = 5;
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->istrigger(), output);
  }

  // optional .falcon_externals_msg.HopDescriptor hopDescriptor = 6;
  if (has_hopdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->hopdescriptor(), output);
  }

  // optional .falcon_externals_msg.FSKDescriptor fskDescriptor = 7;
  if (has_fskdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fskdescriptor(), output);
  }

  // optional .falcon_externals_msg.CWDescriptor cwDescriptor = 8;
  if (has_cwdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->cwdescriptor(), output);
  }

  // optional .falcon_externals_msg.SpreadDescriptor spreadDescriptor = 9;
  if (has_spreaddescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->spreaddescriptor(), output);
  }

  // optional .falcon_externals_msg.AVDescriptor avDescriptor = 10;
  if (has_avdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->avdescriptor(), output);
  }

  // optional .falcon_externals_msg.DsssDescriptor dsssDescriptor = 11;
  if (has_dsssdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->dsssdescriptor(), output);
  }

  // optional int32 updateValues = 12;
  if (has_updatevalues()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->updatevalues(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InternalHit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "INTERNAL_HIT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double centerFreqMHz = 2;
  if (has_centerfreqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->centerfreqmhz(), target);
  }

  // optional int32 pseudoUniqueId = 3;
  if (has_pseudouniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pseudouniqueid(), target);
  }

  // optional .falcon_common_msg.Timestamp timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->timestamp(), target);
  }

  // optional bool isTrigger = 5;
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->istrigger(), target);
  }

  // optional .falcon_externals_msg.HopDescriptor hopDescriptor = 6;
  if (has_hopdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->hopdescriptor(), target);
  }

  // optional .falcon_externals_msg.FSKDescriptor fskDescriptor = 7;
  if (has_fskdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fskdescriptor(), target);
  }

  // optional .falcon_externals_msg.CWDescriptor cwDescriptor = 8;
  if (has_cwdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->cwdescriptor(), target);
  }

  // optional .falcon_externals_msg.SpreadDescriptor spreadDescriptor = 9;
  if (has_spreaddescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->spreaddescriptor(), target);
  }

  // optional .falcon_externals_msg.AVDescriptor avDescriptor = 10;
  if (has_avdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->avdescriptor(), target);
  }

  // optional .falcon_externals_msg.DsssDescriptor dsssDescriptor = 11;
  if (has_dsssdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->dsssdescriptor(), target);
  }

  // optional int32 updateValues = 12;
  if (has_updatevalues()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->updatevalues(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InternalHit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "INTERNAL_HIT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double centerFreqMHz = 2;
    if (has_centerfreqmhz()) {
      total_size += 1 + 8;
    }

    // optional int32 pseudoUniqueId = 3;
    if (has_pseudouniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pseudouniqueid());
    }

    // optional .falcon_common_msg.Timestamp timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // optional bool isTrigger = 5;
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

    // optional .falcon_externals_msg.HopDescriptor hopDescriptor = 6;
    if (has_hopdescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hopdescriptor());
    }

    // optional .falcon_externals_msg.FSKDescriptor fskDescriptor = 7;
    if (has_fskdescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fskdescriptor());
    }

    // optional .falcon_externals_msg.CWDescriptor cwDescriptor = 8;
    if (has_cwdescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cwdescriptor());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .falcon_externals_msg.SpreadDescriptor spreadDescriptor = 9;
    if (has_spreaddescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spreaddescriptor());
    }

    // optional .falcon_externals_msg.AVDescriptor avDescriptor = 10;
    if (has_avdescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avdescriptor());
    }

    // optional .falcon_externals_msg.DsssDescriptor dsssDescriptor = 11;
    if (has_dsssdescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dsssdescriptor());
    }

    // optional int32 updateValues = 12;
    if (has_updatevalues()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatevalues());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalHit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalHit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalHit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalHit::MergeFrom(const InternalHit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_centerfreqmhz()) {
      set_centerfreqmhz(from.centerfreqmhz());
    }
    if (from.has_pseudouniqueid()) {
      set_pseudouniqueid(from.pseudouniqueid());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::falcon_common_msg::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
    if (from.has_hopdescriptor()) {
      mutable_hopdescriptor()->::falcon_externals_msg::HopDescriptor::MergeFrom(from.hopdescriptor());
    }
    if (from.has_fskdescriptor()) {
      mutable_fskdescriptor()->::falcon_externals_msg::FSKDescriptor::MergeFrom(from.fskdescriptor());
    }
    if (from.has_cwdescriptor()) {
      mutable_cwdescriptor()->::falcon_externals_msg::CWDescriptor::MergeFrom(from.cwdescriptor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_spreaddescriptor()) {
      mutable_spreaddescriptor()->::falcon_externals_msg::SpreadDescriptor::MergeFrom(from.spreaddescriptor());
    }
    if (from.has_avdescriptor()) {
      mutable_avdescriptor()->::falcon_externals_msg::AVDescriptor::MergeFrom(from.avdescriptor());
    }
    if (from.has_dsssdescriptor()) {
      mutable_dsssdescriptor()->::falcon_externals_msg::DsssDescriptor::MergeFrom(from.dsssdescriptor());
    }
    if (from.has_updatevalues()) {
      set_updatevalues(from.updatevalues());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalHit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalHit::CopyFrom(const InternalHit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalHit::IsInitialized() const {

  return true;
}

void InternalHit::Swap(InternalHit* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(centerfreqmhz_, other->centerfreqmhz_);
    std::swap(pseudouniqueid_, other->pseudouniqueid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(hopdescriptor_, other->hopdescriptor_);
    std::swap(fskdescriptor_, other->fskdescriptor_);
    std::swap(cwdescriptor_, other->cwdescriptor_);
    std::swap(spreaddescriptor_, other->spreaddescriptor_);
    std::swap(avdescriptor_, other->avdescriptor_);
    std::swap(dsssdescriptor_, other->dsssdescriptor_);
    std::swap(updatevalues_, other->updatevalues_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalHit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalHit_descriptor_;
  metadata.reflection = InternalHit_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FisD_FileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FisD_FileType_descriptor_;
}
bool FisD_FileType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FisD_FileType FisD::FS;
const FisD_FileType FisD::TC;
const FisD_FileType FisD::BER;
const FisD_FileType FisD::FileType_MIN;
const FisD_FileType FisD::FileType_MAX;
const int FisD::FileType_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* FisD::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int FisD::kMsgNameFieldNumber;
const int FisD::kFileTypeFieldNumber;
const int FisD::kFileNameFieldNumber;
const int FisD::kFileFieldNumber;
const int FisD::kEventIDFieldNumber;
#endif  // !_MSC_VER

FisD::FisD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FisD::InitAsDefaultInstance() {
}

FisD::FisD(const FisD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FisD::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  filetype_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FisD::~FisD() {
  SharedDtor();
}

void FisD::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (this != default_instance_) {
  }
}

void FisD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FisD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FisD_descriptor_;
}

const FisD& FisD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ESProductMessages_2eproto();
  return *default_instance_;
}

FisD* FisD::default_instance_ = NULL;

FisD* FisD::New() const {
  return new FisD;
}

void FisD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    filetype_ = 0;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::kEmptyString) {
        file_->clear();
      }
    }
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FisD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "FIS_D"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fileType;
        break;
      }

      // optional .es_product_msg.FisD.FileType fileType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es_product_msg::FisD_FileType_IsValid(value)) {
            set_filetype(static_cast< ::es_product_msg::FisD_FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fileName;
        break;
      }

      // optional string fileName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_file;
        break;
      }

      // optional bytes file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_eventID;
        break;
      }

      // optional string eventID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FisD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "FIS_D"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .es_product_msg.FisD.FileType fileType = 2;
  if (has_filetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->filetype(), output);
  }

  // optional string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(), output);
  }

  // optional bytes file = 4;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->file(), output);
  }

  // optional string eventID = 5;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->eventid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FisD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "FIS_D"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .es_product_msg.FisD.FileType fileType = 2;
  if (has_filetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->filetype(), target);
  }

  // optional string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // optional bytes file = 4;
  if (has_file()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->file(), target);
  }

  // optional string eventID = 5;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->eventid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FisD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "FIS_D"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .es_product_msg.FisD.FileType fileType = 2;
    if (has_filetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetype());
    }

    // optional string fileName = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional bytes file = 4;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file());
    }

    // optional string eventID = 5;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FisD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FisD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FisD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FisD::MergeFrom(const FisD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_filetype()) {
      set_filetype(from.filetype());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FisD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FisD::CopyFrom(const FisD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FisD::IsInitialized() const {

  return true;
}

void FisD::Swap(FisD* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(filetype_, other->filetype_);
    std::swap(filename_, other->filename_);
    std::swap(file_, other->file_);
    std::swap(eventid_, other->eventid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FisD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FisD_descriptor_;
  metadata.reflection = FisD_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SIGFrame::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SIGFrame::kMsgNameFieldNumber;
const int SIGFrame::kSignalIDFieldNumber;
const int SIGFrame::kTimestampFieldNumber;
const int SIGFrame::kDurationFieldNumber;
const int SIGFrame::kCenterFreqMHzFieldNumber;
const int SIGFrame::kCenterFreqOffsetHzFieldNumber;
const int SIGFrame::kSampleRateFieldNumber;
const int SIGFrame::kBandwidthFieldNumber;
const int SIGFrame::kPowerFieldNumber;
const int SIGFrame::kBerFieldNumber;
const int SIGFrame::kFrameLengthFieldNumber;
const int SIGFrame::kFrameFieldNumber;
const int SIGFrame::kTailIDFieldNumber;
#endif  // !_MSC_VER

SIGFrame::SIGFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SIGFrame::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::falcon_common_msg::Timestamp*>(&::falcon_common_msg::Timestamp::default_instance());
}

SIGFrame::SIGFrame(const SIGFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SIGFrame::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  signalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = NULL;
  duration_ = 0;
  centerfreqmhz_ = 0;
  centerfreqoffsethz_ = 0;
  samplerate_ = 0;
  bandwidth_ = 0;
  power_ = 0;
  ber_ = 0;
  framelength_ = 0;
  frame_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tailid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SIGFrame::~SIGFrame() {
  SharedDtor();
}

void SIGFrame::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (signalid_ != &::google::protobuf::internal::kEmptyString) {
    delete signalid_;
  }
  if (frame_ != &::google::protobuf::internal::kEmptyString) {
    delete frame_;
  }
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void SIGFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SIGFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SIGFrame_descriptor_;
}

const SIGFrame& SIGFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ESProductMessages_2eproto();
  return *default_instance_;
}

SIGFrame* SIGFrame::default_instance_ = NULL;

SIGFrame* SIGFrame::New() const {
  return new SIGFrame;
}

void SIGFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_signalid()) {
      if (signalid_ != &::google::protobuf::internal::kEmptyString) {
        signalid_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::falcon_common_msg::Timestamp::Clear();
    }
    duration_ = 0;
    centerfreqmhz_ = 0;
    centerfreqoffsethz_ = 0;
    samplerate_ = 0;
    bandwidth_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    power_ = 0;
    ber_ = 0;
    framelength_ = 0;
    if (has_frame()) {
      if (frame_ != &::google::protobuf::internal::kEmptyString) {
        frame_->clear();
      }
    }
    tailid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SIGFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SIG_FRAME"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signalID;
        break;
      }

      // optional string signalID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signalid().data(), this->signalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }

      // optional .falcon_common_msg.Timestamp timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_duration;
        break;
      }

      // optional double duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_centerFreqMHz;
        break;
      }

      // optional double centerFreqMHz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_centerFreqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerfreqmhz_)));
          set_has_centerfreqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_centerFreqOffsetHz;
        break;
      }

      // optional double centerFreqOffsetHz = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_centerFreqOffsetHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerfreqoffsethz_)));
          set_has_centerfreqoffsethz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_sampleRate;
        break;
      }

      // optional double sampleRate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sampleRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &samplerate_)));
          set_has_samplerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_bandwidth;
        break;
      }

      // optional double bandwidth = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_power;
        break;
      }

      // optional double power = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_ber;
        break;
      }

      // optional double ber = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ber_)));
          set_has_ber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_frameLength;
        break;
      }

      // optional int32 frameLength = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framelength_)));
          set_has_framelength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_frame;
        break;
      }

      // optional bytes frame = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tailID;
        break;
      }

      // optional int32 tailID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tailID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tailid_)));
          set_has_tailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SIGFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SIG_FRAME"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string signalID = 2;
  if (has_signalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalid().data(), this->signalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->signalid(), output);
  }

  // optional .falcon_common_msg.Timestamp timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->timestamp(), output);
  }

  // optional double duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->duration(), output);
  }

  // optional double centerFreqMHz = 5;
  if (has_centerfreqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->centerfreqmhz(), output);
  }

  // optional double centerFreqOffsetHz = 6;
  if (has_centerfreqoffsethz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->centerfreqoffsethz(), output);
  }

  // optional double sampleRate = 7;
  if (has_samplerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->samplerate(), output);
  }

  // optional double bandwidth = 8;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->bandwidth(), output);
  }

  // optional double power = 9;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->power(), output);
  }

  // optional double ber = 10;
  if (has_ber()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->ber(), output);
  }

  // optional int32 frameLength = 11;
  if (has_framelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->framelength(), output);
  }

  // optional bytes frame = 12;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->frame(), output);
  }

  // optional int32 tailID = 13;
  if (has_tailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SIGFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SIG_FRAME"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string signalID = 2;
  if (has_signalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalid().data(), this->signalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signalid(), target);
  }

  // optional .falcon_common_msg.Timestamp timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->timestamp(), target);
  }

  // optional double duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->duration(), target);
  }

  // optional double centerFreqMHz = 5;
  if (has_centerfreqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->centerfreqmhz(), target);
  }

  // optional double centerFreqOffsetHz = 6;
  if (has_centerfreqoffsethz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->centerfreqoffsethz(), target);
  }

  // optional double sampleRate = 7;
  if (has_samplerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->samplerate(), target);
  }

  // optional double bandwidth = 8;
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->bandwidth(), target);
  }

  // optional double power = 9;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->power(), target);
  }

  // optional double ber = 10;
  if (has_ber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->ber(), target);
  }

  // optional int32 frameLength = 11;
  if (has_framelength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->framelength(), target);
  }

  // optional bytes frame = 12;
  if (has_frame()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->frame(), target);
  }

  // optional int32 tailID = 13;
  if (has_tailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->tailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SIGFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SIG_FRAME"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string signalID = 2;
    if (has_signalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signalid());
    }

    // optional .falcon_common_msg.Timestamp timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // optional double duration = 4;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional double centerFreqMHz = 5;
    if (has_centerfreqmhz()) {
      total_size += 1 + 8;
    }

    // optional double centerFreqOffsetHz = 6;
    if (has_centerfreqoffsethz()) {
      total_size += 1 + 8;
    }

    // optional double sampleRate = 7;
    if (has_samplerate()) {
      total_size += 1 + 8;
    }

    // optional double bandwidth = 8;
    if (has_bandwidth()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double power = 9;
    if (has_power()) {
      total_size += 1 + 8;
    }

    // optional double ber = 10;
    if (has_ber()) {
      total_size += 1 + 8;
    }

    // optional int32 frameLength = 11;
    if (has_framelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->framelength());
    }

    // optional bytes frame = 12;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->frame());
    }

    // optional int32 tailID = 13;
    if (has_tailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SIGFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SIGFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SIGFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SIGFrame::MergeFrom(const SIGFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_signalid()) {
      set_signalid(from.signalid());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::falcon_common_msg::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_centerfreqmhz()) {
      set_centerfreqmhz(from.centerfreqmhz());
    }
    if (from.has_centerfreqoffsethz()) {
      set_centerfreqoffsethz(from.centerfreqoffsethz());
    }
    if (from.has_samplerate()) {
      set_samplerate(from.samplerate());
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_ber()) {
      set_ber(from.ber());
    }
    if (from.has_framelength()) {
      set_framelength(from.framelength());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_tailid()) {
      set_tailid(from.tailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SIGFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SIGFrame::CopyFrom(const SIGFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIGFrame::IsInitialized() const {

  return true;
}

void SIGFrame::Swap(SIGFrame* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(signalid_, other->signalid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(duration_, other->duration_);
    std::swap(centerfreqmhz_, other->centerfreqmhz_);
    std::swap(centerfreqoffsethz_, other->centerfreqoffsethz_);
    std::swap(samplerate_, other->samplerate_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(power_, other->power_);
    std::swap(ber_, other->ber_);
    std::swap(framelength_, other->framelength_);
    std::swap(frame_, other->frame_);
    std::swap(tailid_, other->tailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SIGFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SIGFrame_descriptor_;
  metadata.reflection = SIGFrame_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ImageAvailable_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageAvailable_Status_descriptor_;
}
bool ImageAvailable_Status_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ImageAvailable_Status ImageAvailable::AVAILABLE;
const ImageAvailable_Status ImageAvailable::UNAVAILABLE;
const ImageAvailable_Status ImageAvailable::PENDING;
const ImageAvailable_Status ImageAvailable::Status_MIN;
const ImageAvailable_Status ImageAvailable::Status_MAX;
const int ImageAvailable::Status_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* ImageAvailable::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ImageAvailable::kMsgNameFieldNumber;
const int ImageAvailable::kImageWidthFieldNumber;
const int ImageAvailable::kImageHeightFieldNumber;
const int ImageAvailable::kVideoPortFieldNumber;
const int ImageAvailable::kFramerateFieldNumber;
const int ImageAvailable::kByteArrayFieldNumber;
const int ImageAvailable::kStatusFieldNumber;
const int ImageAvailable::kMsgIDFieldNumber;
const int ImageAvailable::kEventIDFieldNumber;
#endif  // !_MSC_VER

ImageAvailable::ImageAvailable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageAvailable::InitAsDefaultInstance() {
}

ImageAvailable::ImageAvailable(const ImageAvailable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageAvailable::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  imagewidth_ = 0;
  imageheight_ = 0;
  videoport_ = 0;
  framerate_ = 0;
  bytearray_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = -1;
  msgid_ = 0;
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageAvailable::~ImageAvailable() {
  SharedDtor();
}

void ImageAvailable::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (bytearray_ != &::google::protobuf::internal::kEmptyString) {
    delete bytearray_;
  }
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (this != default_instance_) {
  }
}

void ImageAvailable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageAvailable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageAvailable_descriptor_;
}

const ImageAvailable& ImageAvailable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ESProductMessages_2eproto();
  return *default_instance_;
}

ImageAvailable* ImageAvailable::default_instance_ = NULL;

ImageAvailable* ImageAvailable::New() const {
  return new ImageAvailable;
}

void ImageAvailable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    imagewidth_ = 0;
    imageheight_ = 0;
    videoport_ = 0;
    framerate_ = 0;
    if (has_bytearray()) {
      if (bytearray_ != &::google::protobuf::internal::kEmptyString) {
        bytearray_->clear();
      }
    }
    status_ = -1;
    msgid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageAvailable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "IMAGE_AVAILABLE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_imageWidth;
        break;
      }

      // optional int32 imageWidth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imageWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imagewidth_)));
          set_has_imagewidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_imageHeight;
        break;
      }

      // optional int32 imageHeight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imageHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imageheight_)));
          set_has_imageheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_videoPort;
        break;
      }

      // optional int32 videoPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_videoPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoport_)));
          set_has_videoport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_framerate;
        break;
      }

      // optional int32 framerate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_framerate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framerate_)));
          set_has_framerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_byteArray;
        break;
      }

      // optional bytes byteArray = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_byteArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytearray()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional .es_product_msg.ImageAvailable.Status status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es_product_msg::ImageAvailable_Status_IsValid(value)) {
            set_status(static_cast< ::es_product_msg::ImageAvailable_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_msgID;
        break;
      }

      // optional int32 msgID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_eventID;
        break;
      }

      // optional string eventID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageAvailable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "IMAGE_AVAILABLE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 imageWidth = 2;
  if (has_imagewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->imagewidth(), output);
  }

  // optional int32 imageHeight = 3;
  if (has_imageheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->imageheight(), output);
  }

  // optional int32 videoPort = 4;
  if (has_videoport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->videoport(), output);
  }

  // optional int32 framerate = 5;
  if (has_framerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->framerate(), output);
  }

  // optional bytes byteArray = 6;
  if (has_bytearray()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->bytearray(), output);
  }

  // optional .es_product_msg.ImageAvailable.Status status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->status(), output);
  }

  // optional int32 msgID = 8;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->msgid(), output);
  }

  // optional string eventID = 9;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->eventid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageAvailable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "IMAGE_AVAILABLE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 imageWidth = 2;
  if (has_imagewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->imagewidth(), target);
  }

  // optional int32 imageHeight = 3;
  if (has_imageheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->imageheight(), target);
  }

  // optional int32 videoPort = 4;
  if (has_videoport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->videoport(), target);
  }

  // optional int32 framerate = 5;
  if (has_framerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->framerate(), target);
  }

  // optional bytes byteArray = 6;
  if (has_bytearray()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->bytearray(), target);
  }

  // optional .es_product_msg.ImageAvailable.Status status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->status(), target);
  }

  // optional int32 msgID = 8;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->msgid(), target);
  }

  // optional string eventID = 9;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->eventid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageAvailable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "IMAGE_AVAILABLE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 imageWidth = 2;
    if (has_imagewidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imagewidth());
    }

    // optional int32 imageHeight = 3;
    if (has_imageheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imageheight());
    }

    // optional int32 videoPort = 4;
    if (has_videoport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videoport());
    }

    // optional int32 framerate = 5;
    if (has_framerate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->framerate());
    }

    // optional bytes byteArray = 6;
    if (has_bytearray()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytearray());
    }

    // optional .es_product_msg.ImageAvailable.Status status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 msgID = 8;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string eventID = 9;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageAvailable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageAvailable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageAvailable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageAvailable::MergeFrom(const ImageAvailable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_imagewidth()) {
      set_imagewidth(from.imagewidth());
    }
    if (from.has_imageheight()) {
      set_imageheight(from.imageheight());
    }
    if (from.has_videoport()) {
      set_videoport(from.videoport());
    }
    if (from.has_framerate()) {
      set_framerate(from.framerate());
    }
    if (from.has_bytearray()) {
      set_bytearray(from.bytearray());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageAvailable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageAvailable::CopyFrom(const ImageAvailable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageAvailable::IsInitialized() const {

  return true;
}

void ImageAvailable::Swap(ImageAvailable* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(imagewidth_, other->imagewidth_);
    std::swap(imageheight_, other->imageheight_);
    std::swap(videoport_, other->videoport_);
    std::swap(framerate_, other->framerate_);
    std::swap(bytearray_, other->bytearray_);
    std::swap(status_, other->status_);
    std::swap(msgid_, other->msgid_);
    std::swap(eventid_, other->eventid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageAvailable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageAvailable_descriptor_;
  metadata.reflection = ImageAvailable_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AudioAvailable_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioAvailable_Status_descriptor_;
}
bool AudioAvailable_Status_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AudioAvailable_Status AudioAvailable::AVAILABLE;
const AudioAvailable_Status AudioAvailable::UNAVAILABLE;
const AudioAvailable_Status AudioAvailable::PENDING;
const AudioAvailable_Status AudioAvailable::Status_MIN;
const AudioAvailable_Status AudioAvailable::Status_MAX;
const int AudioAvailable::Status_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* AudioAvailable::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int AudioAvailable::kMsgNameFieldNumber;
const int AudioAvailable::kCenterFreqMHzFieldNumber;
const int AudioAvailable::kStatusFieldNumber;
const int AudioAvailable::kAudiofileFieldNumber;
const int AudioAvailable::kMsgIDFieldNumber;
const int AudioAvailable::kSoiNumFieldNumber;
#endif  // !_MSC_VER

AudioAvailable::AudioAvailable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AudioAvailable::InitAsDefaultInstance() {
}

AudioAvailable::AudioAvailable(const AudioAvailable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AudioAvailable::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  centerfreqmhz_ = 0;
  status_ = -1;
  audiofile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msgid_ = 0;
  soinum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioAvailable::~AudioAvailable() {
  SharedDtor();
}

void AudioAvailable::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (audiofile_ != &::google::protobuf::internal::kEmptyString) {
    delete audiofile_;
  }
  if (soinum_ != &::google::protobuf::internal::kEmptyString) {
    delete soinum_;
  }
  if (this != default_instance_) {
  }
}

void AudioAvailable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioAvailable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioAvailable_descriptor_;
}

const AudioAvailable& AudioAvailable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ESProductMessages_2eproto();
  return *default_instance_;
}

AudioAvailable* AudioAvailable::default_instance_ = NULL;

AudioAvailable* AudioAvailable::New() const {
  return new AudioAvailable;
}

void AudioAvailable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    centerfreqmhz_ = 0;
    status_ = -1;
    if (has_audiofile()) {
      if (audiofile_ != &::google::protobuf::internal::kEmptyString) {
        audiofile_->clear();
      }
    }
    msgid_ = 0;
    if (has_soinum()) {
      if (soinum_ != &::google::protobuf::internal::kEmptyString) {
        soinum_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioAvailable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "AUDIO_AVAILABLE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_centerFreqMHz;
        break;
      }

      // optional double centerFreqMHz = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_centerFreqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerfreqmhz_)));
          set_has_centerfreqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .es_product_msg.AudioAvailable.Status status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es_product_msg::AudioAvailable_Status_IsValid(value)) {
            set_status(static_cast< ::es_product_msg::AudioAvailable_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_audiofile;
        break;
      }

      // optional string audiofile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audiofile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audiofile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->audiofile().data(), this->audiofile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_msgID;
        break;
      }

      // optional int32 msgID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_soiNum;
        break;
      }

      // optional string soiNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soiNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soinum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soinum().data(), this->soinum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AudioAvailable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "AUDIO_AVAILABLE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double centerFreqMHz = 2;
  if (has_centerfreqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->centerfreqmhz(), output);
  }

  // optional .es_product_msg.AudioAvailable.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional string audiofile = 4;
  if (has_audiofile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audiofile().data(), this->audiofile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->audiofile(), output);
  }

  // optional int32 msgID = 5;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->msgid(), output);
  }

  // optional string soiNum = 6;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->soinum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AudioAvailable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "AUDIO_AVAILABLE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double centerFreqMHz = 2;
  if (has_centerfreqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->centerfreqmhz(), target);
  }

  // optional .es_product_msg.AudioAvailable.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional string audiofile = 4;
  if (has_audiofile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audiofile().data(), this->audiofile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->audiofile(), target);
  }

  // optional int32 msgID = 5;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->msgid(), target);
  }

  // optional string soiNum = 6;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->soinum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AudioAvailable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "AUDIO_AVAILABLE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double centerFreqMHz = 2;
    if (has_centerfreqmhz()) {
      total_size += 1 + 8;
    }

    // optional .es_product_msg.AudioAvailable.Status status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string audiofile = 4;
    if (has_audiofile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audiofile());
    }

    // optional int32 msgID = 5;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }

    // optional string soiNum = 6;
    if (has_soinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soinum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioAvailable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioAvailable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioAvailable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioAvailable::MergeFrom(const AudioAvailable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_centerfreqmhz()) {
      set_centerfreqmhz(from.centerfreqmhz());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_audiofile()) {
      set_audiofile(from.audiofile());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_soinum()) {
      set_soinum(from.soinum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioAvailable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioAvailable::CopyFrom(const AudioAvailable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioAvailable::IsInitialized() const {

  return true;
}

void AudioAvailable::Swap(AudioAvailable* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(centerfreqmhz_, other->centerfreqmhz_);
    std::swap(status_, other->status_);
    std::swap(audiofile_, other->audiofile_);
    std::swap(msgid_, other->msgid_);
    std::swap(soinum_, other->soinum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioAvailable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioAvailable_descriptor_;
  metadata.reflection = AudioAvailable_reflection_;
  return metadata;
}


// ===================================================================

::std::string* DmrMeta::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int DmrMeta::kMsgNameFieldNumber;
const int DmrMeta::kCenterFreqMHzFieldNumber;
const int DmrMeta::kSrcTypeFieldNumber;
const int DmrMeta::kSrcAddrFieldNumber;
const int DmrMeta::kDestTypeFieldNumber;
const int DmrMeta::kDestAddrFieldNumber;
const int DmrMeta::kTimeSlotFieldNumber;
const int DmrMeta::kCallTypeFieldNumber;
const int DmrMeta::kColorCodeFieldNumber;
const int DmrMeta::kTextFieldNumber;
const int DmrMeta::kGeoFieldNumber;
#endif  // !_MSC_VER

DmrMeta::DmrMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DmrMeta::InitAsDefaultInstance() {
  geo_ = const_cast< ::falcon_common_msg::GeodeticPosition*>(&::falcon_common_msg::GeodeticPosition::default_instance());
}

DmrMeta::DmrMeta(const DmrMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DmrMeta::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  centerfreqmhz_ = 0;
  srctype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srcaddr_ = 0;
  desttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  destaddr_ = 0;
  timeslot_ = 0;
  calltype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  colorcode_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  geo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DmrMeta::~DmrMeta() {
  SharedDtor();
}

void DmrMeta::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (srctype_ != &::google::protobuf::internal::kEmptyString) {
    delete srctype_;
  }
  if (desttype_ != &::google::protobuf::internal::kEmptyString) {
    delete desttype_;
  }
  if (calltype_ != &::google::protobuf::internal::kEmptyString) {
    delete calltype_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
    delete geo_;
  }
}

void DmrMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DmrMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DmrMeta_descriptor_;
}

const DmrMeta& DmrMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ESProductMessages_2eproto();
  return *default_instance_;
}

DmrMeta* DmrMeta::default_instance_ = NULL;

DmrMeta* DmrMeta::New() const {
  return new DmrMeta;
}

void DmrMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    centerfreqmhz_ = 0;
    if (has_srctype()) {
      if (srctype_ != &::google::protobuf::internal::kEmptyString) {
        srctype_->clear();
      }
    }
    srcaddr_ = 0;
    if (has_desttype()) {
      if (desttype_ != &::google::protobuf::internal::kEmptyString) {
        desttype_->clear();
      }
    }
    destaddr_ = 0;
    timeslot_ = 0;
    if (has_calltype()) {
      if (calltype_ != &::google::protobuf::internal::kEmptyString) {
        calltype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    colorcode_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::falcon_common_msg::GeodeticPosition::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DmrMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DMR_META"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_centerFreqMHz;
        break;
      }

      // optional double centerFreqMHz = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_centerFreqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerfreqmhz_)));
          set_has_centerfreqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_srcType;
        break;
      }

      // optional string srcType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srcType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srctype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srctype().data(), this->srctype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_srcAddr;
        break;
      }

      // optional int32 srcAddr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcAddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcaddr_)));
          set_has_srcaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_destType;
        break;
      }

      // optional string destType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desttype().data(), this->desttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_destAddr;
        break;
      }

      // optional int32 destAddr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destAddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destaddr_)));
          set_has_destaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timeSlot;
        break;
      }

      // optional int32 timeSlot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeSlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeslot_)));
          set_has_timeslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_callType;
        break;
      }

      // optional string callType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_calltype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->calltype().data(), this->calltype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_colorCode;
        break;
      }

      // optional int32 colorCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colorcode_)));
          set_has_colorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_text;
        break;
      }

      // optional string text = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_geo;
        break;
      }

      // optional .falcon_common_msg.GeodeticPosition geo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DmrMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DMR_META"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double centerFreqMHz = 2;
  if (has_centerfreqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->centerfreqmhz(), output);
  }

  // optional string srcType = 3;
  if (has_srctype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srctype().data(), this->srctype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->srctype(), output);
  }

  // optional int32 srcAddr = 4;
  if (has_srcaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->srcaddr(), output);
  }

  // optional string destType = 5;
  if (has_desttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desttype().data(), this->desttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->desttype(), output);
  }

  // optional int32 destAddr = 6;
  if (has_destaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->destaddr(), output);
  }

  // optional int32 timeSlot = 7;
  if (has_timeslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->timeslot(), output);
  }

  // optional string callType = 8;
  if (has_calltype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->calltype().data(), this->calltype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->calltype(), output);
  }

  // optional int32 colorCode = 9;
  if (has_colorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->colorcode(), output);
  }

  // optional string text = 10;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->text(), output);
  }

  // optional .falcon_common_msg.GeodeticPosition geo = 11;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->geo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DmrMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DMR_META"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double centerFreqMHz = 2;
  if (has_centerfreqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->centerfreqmhz(), target);
  }

  // optional string srcType = 3;
  if (has_srctype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srctype().data(), this->srctype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->srctype(), target);
  }

  // optional int32 srcAddr = 4;
  if (has_srcaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->srcaddr(), target);
  }

  // optional string destType = 5;
  if (has_desttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desttype().data(), this->desttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desttype(), target);
  }

  // optional int32 destAddr = 6;
  if (has_destaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->destaddr(), target);
  }

  // optional int32 timeSlot = 7;
  if (has_timeslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->timeslot(), target);
  }

  // optional string callType = 8;
  if (has_calltype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->calltype().data(), this->calltype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->calltype(), target);
  }

  // optional int32 colorCode = 9;
  if (has_colorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->colorcode(), target);
  }

  // optional string text = 10;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->text(), target);
  }

  // optional .falcon_common_msg.GeodeticPosition geo = 11;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->geo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DmrMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DMR_META"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double centerFreqMHz = 2;
    if (has_centerfreqmhz()) {
      total_size += 1 + 8;
    }

    // optional string srcType = 3;
    if (has_srctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srctype());
    }

    // optional int32 srcAddr = 4;
    if (has_srcaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcaddr());
    }

    // optional string destType = 5;
    if (has_desttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desttype());
    }

    // optional int32 destAddr = 6;
    if (has_destaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destaddr());
    }

    // optional int32 timeSlot = 7;
    if (has_timeslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeslot());
    }

    // optional string callType = 8;
    if (has_calltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->calltype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 colorCode = 9;
    if (has_colorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colorcode());
    }

    // optional string text = 10;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .falcon_common_msg.GeodeticPosition geo = 11;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmrMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DmrMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DmrMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DmrMeta::MergeFrom(const DmrMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_centerfreqmhz()) {
      set_centerfreqmhz(from.centerfreqmhz());
    }
    if (from.has_srctype()) {
      set_srctype(from.srctype());
    }
    if (from.has_srcaddr()) {
      set_srcaddr(from.srcaddr());
    }
    if (from.has_desttype()) {
      set_desttype(from.desttype());
    }
    if (from.has_destaddr()) {
      set_destaddr(from.destaddr());
    }
    if (from.has_timeslot()) {
      set_timeslot(from.timeslot());
    }
    if (from.has_calltype()) {
      set_calltype(from.calltype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_colorcode()) {
      set_colorcode(from.colorcode());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_geo()) {
      mutable_geo()->::falcon_common_msg::GeodeticPosition::MergeFrom(from.geo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DmrMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DmrMeta::CopyFrom(const DmrMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmrMeta::IsInitialized() const {

  return true;
}

void DmrMeta::Swap(DmrMeta* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(centerfreqmhz_, other->centerfreqmhz_);
    std::swap(srctype_, other->srctype_);
    std::swap(srcaddr_, other->srcaddr_);
    std::swap(desttype_, other->desttype_);
    std::swap(destaddr_, other->destaddr_);
    std::swap(timeslot_, other->timeslot_);
    std::swap(calltype_, other->calltype_);
    std::swap(colorcode_, other->colorcode_);
    std::swap(text_, other->text_);
    std::swap(geo_, other->geo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DmrMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DmrMeta_descriptor_;
  metadata.reflection = DmrMeta_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace es_product_msg

// @@protoc_insertion_point(global_scope)
