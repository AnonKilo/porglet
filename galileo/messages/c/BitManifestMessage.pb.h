// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BitManifestMessage.proto

#ifndef PROTOBUF_BitManifestMessage_2eproto__INCLUDED
#define PROTOBUF_BitManifestMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Users.pb.h"
#include "ServiceInfrastructureCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace srcinc {
namespace ngi {
namespace data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BitManifestMessage_2eproto();
void protobuf_AssignDesc_BitManifestMessage_2eproto();
void protobuf_ShutdownFile_BitManifestMessage_2eproto();

class BitManifest;
class BitManifest_BitProperty;
class BitManifest_BitProperty_Thresholds;
class BitManifest_BitNode;
class BitManifestTopic;

enum BitManifest_BitProperty_Units {
  BitManifest_BitProperty_Units_UNITS_UNKNOWN = 0,
  BitManifest_BitProperty_Units_UNITS_VOLTS = 1,
  BitManifest_BitProperty_Units_UNITS_AMPS = 2,
  BitManifest_BitProperty_Units_UNITS_DB = 3,
  BitManifest_BitProperty_Units_UNITS_CELSIUS = 4,
  BitManifest_BitProperty_Units_UNITS_HZ = 5,
  BitManifest_BitProperty_Units_UNITS_TIMESPAN = 6,
  BitManifest_BitProperty_Units_UNITS_TIMESPEC = 7,
  BitManifest_BitProperty_Units_UNITS_RADIANS = 8,
  BitManifest_BitProperty_Units_UNITS_KBPS = 9,
  BitManifest_BitProperty_Units_UNITS_PERCENT = 10,
  BitManifest_BitProperty_Units_UNITS_ECEF = 11
};
bool BitManifest_BitProperty_Units_IsValid(int value);
const BitManifest_BitProperty_Units BitManifest_BitProperty_Units_Units_MIN = BitManifest_BitProperty_Units_UNITS_UNKNOWN;
const BitManifest_BitProperty_Units BitManifest_BitProperty_Units_Units_MAX = BitManifest_BitProperty_Units_UNITS_ECEF;
const int BitManifest_BitProperty_Units_Units_ARRAYSIZE = BitManifest_BitProperty_Units_Units_MAX + 1;

const ::google::protobuf::EnumDescriptor* BitManifest_BitProperty_Units_descriptor();
inline const ::std::string& BitManifest_BitProperty_Units_Name(BitManifest_BitProperty_Units value) {
  return ::google::protobuf::internal::NameOfEnum(
    BitManifest_BitProperty_Units_descriptor(), value);
}
inline bool BitManifest_BitProperty_Units_Parse(
    const ::std::string& name, BitManifest_BitProperty_Units* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BitManifest_BitProperty_Units>(
    BitManifest_BitProperty_Units_descriptor(), name, value);
}
enum BitManifest_BitProperty_Types {
  BitManifest_BitProperty_Types_TYPE_UNKNOWN = 0,
  BitManifest_BitProperty_Types_TYPE_BOOL = 1,
  BitManifest_BitProperty_Types_TYPE_INT = 2,
  BitManifest_BitProperty_Types_TYPE_DOUBLE = 3,
  BitManifest_BitProperty_Types_TYPE_STRING = 4,
  BitManifest_BitProperty_Types_TYPE_DOUBLE_REPEATED = 5
};
bool BitManifest_BitProperty_Types_IsValid(int value);
const BitManifest_BitProperty_Types BitManifest_BitProperty_Types_Types_MIN = BitManifest_BitProperty_Types_TYPE_UNKNOWN;
const BitManifest_BitProperty_Types BitManifest_BitProperty_Types_Types_MAX = BitManifest_BitProperty_Types_TYPE_DOUBLE_REPEATED;
const int BitManifest_BitProperty_Types_Types_ARRAYSIZE = BitManifest_BitProperty_Types_Types_MAX + 1;

const ::google::protobuf::EnumDescriptor* BitManifest_BitProperty_Types_descriptor();
inline const ::std::string& BitManifest_BitProperty_Types_Name(BitManifest_BitProperty_Types value) {
  return ::google::protobuf::internal::NameOfEnum(
    BitManifest_BitProperty_Types_descriptor(), value);
}
inline bool BitManifest_BitProperty_Types_Parse(
    const ::std::string& name, BitManifest_BitProperty_Types* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BitManifest_BitProperty_Types>(
    BitManifest_BitProperty_Types_descriptor(), name, value);
}
// ===================================================================

class BitManifest_BitProperty_Thresholds : public ::google::protobuf::Message {
 public:
  BitManifest_BitProperty_Thresholds();
  virtual ~BitManifest_BitProperty_Thresholds();

  BitManifest_BitProperty_Thresholds(const BitManifest_BitProperty_Thresholds& from);

  inline BitManifest_BitProperty_Thresholds& operator=(const BitManifest_BitProperty_Thresholds& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitManifest_BitProperty_Thresholds& default_instance();

  void Swap(BitManifest_BitProperty_Thresholds* other);

  // implements Message ----------------------------------------------

  BitManifest_BitProperty_Thresholds* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitManifest_BitProperty_Thresholds& from);
  void MergeFrom(const BitManifest_BitProperty_Thresholds& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double max_faulted = 1;
  inline bool has_max_faulted() const;
  inline void clear_max_faulted();
  static const int kMaxFaultedFieldNumber = 1;
  inline double max_faulted() const;
  inline void set_max_faulted(double value);

  // optional double max_degraded = 2;
  inline bool has_max_degraded() const;
  inline void clear_max_degraded();
  static const int kMaxDegradedFieldNumber = 2;
  inline double max_degraded() const;
  inline void set_max_degraded(double value);

  // optional double min_degraded = 3;
  inline bool has_min_degraded() const;
  inline void clear_min_degraded();
  static const int kMinDegradedFieldNumber = 3;
  inline double min_degraded() const;
  inline void set_min_degraded(double value);

  // optional double min_faulted = 4;
  inline bool has_min_faulted() const;
  inline void clear_min_faulted();
  static const int kMinFaultedFieldNumber = 4;
  inline double min_faulted() const;
  inline void set_min_faulted(double value);

  // @@protoc_insertion_point(class_scope:com.srcinc.ngi.data.BitManifest.BitProperty.Thresholds)
 private:
  inline void set_has_max_faulted();
  inline void clear_has_max_faulted();
  inline void set_has_max_degraded();
  inline void clear_has_max_degraded();
  inline void set_has_min_degraded();
  inline void clear_has_min_degraded();
  inline void set_has_min_faulted();
  inline void clear_has_min_faulted();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double max_faulted_;
  double max_degraded_;
  double min_degraded_;
  double min_faulted_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_BitManifestMessage_2eproto();
  friend void protobuf_AssignDesc_BitManifestMessage_2eproto();
  friend void protobuf_ShutdownFile_BitManifestMessage_2eproto();

  void InitAsDefaultInstance();
  static BitManifest_BitProperty_Thresholds* default_instance_;
};
// -------------------------------------------------------------------

class BitManifest_BitProperty : public ::google::protobuf::Message {
 public:
  BitManifest_BitProperty();
  virtual ~BitManifest_BitProperty();

  BitManifest_BitProperty(const BitManifest_BitProperty& from);

  inline BitManifest_BitProperty& operator=(const BitManifest_BitProperty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitManifest_BitProperty& default_instance();

  void Swap(BitManifest_BitProperty* other);

  // implements Message ----------------------------------------------

  BitManifest_BitProperty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitManifest_BitProperty& from);
  void MergeFrom(const BitManifest_BitProperty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BitManifest_BitProperty_Thresholds Thresholds;

  typedef BitManifest_BitProperty_Units Units;
  static const Units UNITS_UNKNOWN = BitManifest_BitProperty_Units_UNITS_UNKNOWN;
  static const Units UNITS_VOLTS = BitManifest_BitProperty_Units_UNITS_VOLTS;
  static const Units UNITS_AMPS = BitManifest_BitProperty_Units_UNITS_AMPS;
  static const Units UNITS_DB = BitManifest_BitProperty_Units_UNITS_DB;
  static const Units UNITS_CELSIUS = BitManifest_BitProperty_Units_UNITS_CELSIUS;
  static const Units UNITS_HZ = BitManifest_BitProperty_Units_UNITS_HZ;
  static const Units UNITS_TIMESPAN = BitManifest_BitProperty_Units_UNITS_TIMESPAN;
  static const Units UNITS_TIMESPEC = BitManifest_BitProperty_Units_UNITS_TIMESPEC;
  static const Units UNITS_RADIANS = BitManifest_BitProperty_Units_UNITS_RADIANS;
  static const Units UNITS_KBPS = BitManifest_BitProperty_Units_UNITS_KBPS;
  static const Units UNITS_PERCENT = BitManifest_BitProperty_Units_UNITS_PERCENT;
  static const Units UNITS_ECEF = BitManifest_BitProperty_Units_UNITS_ECEF;
  static inline bool Units_IsValid(int value) {
    return BitManifest_BitProperty_Units_IsValid(value);
  }
  static const Units Units_MIN =
    BitManifest_BitProperty_Units_Units_MIN;
  static const Units Units_MAX =
    BitManifest_BitProperty_Units_Units_MAX;
  static const int Units_ARRAYSIZE =
    BitManifest_BitProperty_Units_Units_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Units_descriptor() {
    return BitManifest_BitProperty_Units_descriptor();
  }
  static inline const ::std::string& Units_Name(Units value) {
    return BitManifest_BitProperty_Units_Name(value);
  }
  static inline bool Units_Parse(const ::std::string& name,
      Units* value) {
    return BitManifest_BitProperty_Units_Parse(name, value);
  }

  typedef BitManifest_BitProperty_Types Types;
  static const Types TYPE_UNKNOWN = BitManifest_BitProperty_Types_TYPE_UNKNOWN;
  static const Types TYPE_BOOL = BitManifest_BitProperty_Types_TYPE_BOOL;
  static const Types TYPE_INT = BitManifest_BitProperty_Types_TYPE_INT;
  static const Types TYPE_DOUBLE = BitManifest_BitProperty_Types_TYPE_DOUBLE;
  static const Types TYPE_STRING = BitManifest_BitProperty_Types_TYPE_STRING;
  static const Types TYPE_DOUBLE_REPEATED = BitManifest_BitProperty_Types_TYPE_DOUBLE_REPEATED;
  static inline bool Types_IsValid(int value) {
    return BitManifest_BitProperty_Types_IsValid(value);
  }
  static const Types Types_MIN =
    BitManifest_BitProperty_Types_Types_MIN;
  static const Types Types_MAX =
    BitManifest_BitProperty_Types_Types_MAX;
  static const int Types_ARRAYSIZE =
    BitManifest_BitProperty_Types_Types_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Types_descriptor() {
    return BitManifest_BitProperty_Types_descriptor();
  }
  static inline const ::std::string& Types_Name(Types value) {
    return BitManifest_BitProperty_Types_Name(value);
  }
  static inline bool Types_Parse(const ::std::string& name,
      Types* value) {
    return BitManifest_BitProperty_Types_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string display_name = 2;
  inline bool has_display_name() const;
  inline void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  inline const ::std::string& display_name() const;
  inline void set_display_name(const ::std::string& value);
  inline void set_display_name(const char* value);
  inline void set_display_name(const char* value, size_t size);
  inline ::std::string* mutable_display_name();
  inline ::std::string* release_display_name();
  inline void set_allocated_display_name(::std::string* display_name);

  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional .com.srcinc.ngi.data.BitManifest.BitProperty.Units units = 4;
  inline bool has_units() const;
  inline void clear_units();
  static const int kUnitsFieldNumber = 4;
  inline ::com::srcinc::ngi::data::BitManifest_BitProperty_Units units() const;
  inline void set_units(::com::srcinc::ngi::data::BitManifest_BitProperty_Units value);

  // optional .com.srcinc.ngi.data.BitManifest.BitProperty.Types type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::com::srcinc::ngi::data::BitManifest_BitProperty_Types type() const;
  inline void set_type(::com::srcinc::ngi::data::BitManifest_BitProperty_Types value);

  // optional .com.srcinc.ngi.common.UserLevel min_user_level = 6;
  inline bool has_min_user_level() const;
  inline void clear_min_user_level();
  static const int kMinUserLevelFieldNumber = 6;
  inline ::com::srcinc::ngi::common::UserLevel min_user_level() const;
  inline void set_min_user_level(::com::srcinc::ngi::common::UserLevel value);

  // optional .com.srcinc.ngi.data.BitManifest.BitProperty.Thresholds thresholds = 7;
  inline bool has_thresholds() const;
  inline void clear_thresholds();
  static const int kThresholdsFieldNumber = 7;
  inline const ::com::srcinc::ngi::data::BitManifest_BitProperty_Thresholds& thresholds() const;
  inline ::com::srcinc::ngi::data::BitManifest_BitProperty_Thresholds* mutable_thresholds();
  inline ::com::srcinc::ngi::data::BitManifest_BitProperty_Thresholds* release_thresholds();
  inline void set_allocated_thresholds(::com::srcinc::ngi::data::BitManifest_BitProperty_Thresholds* thresholds);

  // optional string group_name = 8;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 8;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // optional int32 history_length = 9;
  inline bool has_history_length() const;
  inline void clear_history_length();
  static const int kHistoryLengthFieldNumber = 9;
  inline ::google::protobuf::int32 history_length() const;
  inline void set_history_length(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.srcinc.ngi.data.BitManifest.BitProperty)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_display_name();
  inline void clear_has_display_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_units();
  inline void clear_has_units();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_min_user_level();
  inline void clear_has_min_user_level();
  inline void set_has_thresholds();
  inline void clear_has_thresholds();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_history_length();
  inline void clear_has_history_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* display_name_;
  ::google::protobuf::int32 id_;
  int units_;
  ::std::string* description_;
  int type_;
  int min_user_level_;
  ::com::srcinc::ngi::data::BitManifest_BitProperty_Thresholds* thresholds_;
  ::std::string* group_name_;
  ::google::protobuf::int32 history_length_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_BitManifestMessage_2eproto();
  friend void protobuf_AssignDesc_BitManifestMessage_2eproto();
  friend void protobuf_ShutdownFile_BitManifestMessage_2eproto();

  void InitAsDefaultInstance();
  static BitManifest_BitProperty* default_instance_;
};
// -------------------------------------------------------------------

class BitManifest_BitNode : public ::google::protobuf::Message {
 public:
  BitManifest_BitNode();
  virtual ~BitManifest_BitNode();

  BitManifest_BitNode(const BitManifest_BitNode& from);

  inline BitManifest_BitNode& operator=(const BitManifest_BitNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitManifest_BitNode& default_instance();

  void Swap(BitManifest_BitNode* other);

  // implements Message ----------------------------------------------

  BitManifest_BitNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitManifest_BitNode& from);
  void MergeFrom(const BitManifest_BitNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string display_name = 2;
  inline bool has_display_name() const;
  inline void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  inline const ::std::string& display_name() const;
  inline void set_display_name(const ::std::string& value);
  inline void set_display_name(const char* value);
  inline void set_display_name(const char* value, size_t size);
  inline ::std::string* mutable_display_name();
  inline ::std::string* release_display_name();
  inline void set_allocated_display_name(::std::string* display_name);

  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional .com.srcinc.ngi.common.UserLevel user_level = 4;
  inline bool has_user_level() const;
  inline void clear_user_level();
  static const int kUserLevelFieldNumber = 4;
  inline ::com::srcinc::ngi::common::UserLevel user_level() const;
  inline void set_user_level(::com::srcinc::ngi::common::UserLevel value);

  // repeated .com.srcinc.ngi.data.BitManifest.BitProperty properties = 5;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 5;
  inline const ::com::srcinc::ngi::data::BitManifest_BitProperty& properties(int index) const;
  inline ::com::srcinc::ngi::data::BitManifest_BitProperty* mutable_properties(int index);
  inline ::com::srcinc::ngi::data::BitManifest_BitProperty* add_properties();
  inline const ::google::protobuf::RepeatedPtrField< ::com::srcinc::ngi::data::BitManifest_BitProperty >&
      properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::srcinc::ngi::data::BitManifest_BitProperty >*
      mutable_properties();

  // repeated .com.srcinc.ngi.data.BitManifest.BitNode nodes = 6;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 6;
  inline const ::com::srcinc::ngi::data::BitManifest_BitNode& nodes(int index) const;
  inline ::com::srcinc::ngi::data::BitManifest_BitNode* mutable_nodes(int index);
  inline ::com::srcinc::ngi::data::BitManifest_BitNode* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::com::srcinc::ngi::data::BitManifest_BitNode >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::srcinc::ngi::data::BitManifest_BitNode >*
      mutable_nodes();

  // optional bool is_top_level_status = 7;
  inline bool has_is_top_level_status() const;
  inline void clear_is_top_level_status();
  static const int kIsTopLevelStatusFieldNumber = 7;
  inline bool is_top_level_status() const;
  inline void set_is_top_level_status(bool value);

  // @@protoc_insertion_point(class_scope:com.srcinc.ngi.data.BitManifest.BitNode)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_display_name();
  inline void clear_has_display_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_user_level();
  inline void clear_has_user_level();
  inline void set_has_is_top_level_status();
  inline void clear_has_is_top_level_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* display_name_;
  ::google::protobuf::int32 id_;
  int user_level_;
  ::std::string* description_;
  ::google::protobuf::RepeatedPtrField< ::com::srcinc::ngi::data::BitManifest_BitProperty > properties_;
  ::google::protobuf::RepeatedPtrField< ::com::srcinc::ngi::data::BitManifest_BitNode > nodes_;
  bool is_top_level_status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_BitManifestMessage_2eproto();
  friend void protobuf_AssignDesc_BitManifestMessage_2eproto();
  friend void protobuf_ShutdownFile_BitManifestMessage_2eproto();

  void InitAsDefaultInstance();
  static BitManifest_BitNode* default_instance_;
};
// -------------------------------------------------------------------

class BitManifest : public ::google::protobuf::Message {
 public:
  BitManifest();
  virtual ~BitManifest();

  BitManifest(const BitManifest& from);

  inline BitManifest& operator=(const BitManifest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitManifest& default_instance();

  void Swap(BitManifest* other);

  // implements Message ----------------------------------------------

  BitManifest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitManifest& from);
  void MergeFrom(const BitManifest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BitManifest_BitProperty BitProperty;
  typedef BitManifest_BitNode BitNode;

  // accessors -------------------------------------------------------

  // repeated .com.srcinc.ngi.data.BitManifest.BitNode root_node = 1;
  inline int root_node_size() const;
  inline void clear_root_node();
  static const int kRootNodeFieldNumber = 1;
  inline const ::com::srcinc::ngi::data::BitManifest_BitNode& root_node(int index) const;
  inline ::com::srcinc::ngi::data::BitManifest_BitNode* mutable_root_node(int index);
  inline ::com::srcinc::ngi::data::BitManifest_BitNode* add_root_node();
  inline const ::google::protobuf::RepeatedPtrField< ::com::srcinc::ngi::data::BitManifest_BitNode >&
      root_node() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::srcinc::ngi::data::BitManifest_BitNode >*
      mutable_root_node();

  // @@protoc_insertion_point(class_scope:com.srcinc.ngi.data.BitManifest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::com::srcinc::ngi::data::BitManifest_BitNode > root_node_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_BitManifestMessage_2eproto();
  friend void protobuf_AssignDesc_BitManifestMessage_2eproto();
  friend void protobuf_ShutdownFile_BitManifestMessage_2eproto();

  void InitAsDefaultInstance();
  static BitManifest* default_instance_;
};
// -------------------------------------------------------------------

class BitManifestTopic : public ::google::protobuf::Message {
 public:
  BitManifestTopic();
  virtual ~BitManifestTopic();

  BitManifestTopic(const BitManifestTopic& from);

  inline BitManifestTopic& operator=(const BitManifestTopic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitManifestTopic& default_instance();

  void Swap(BitManifestTopic* other);

  // implements Message ----------------------------------------------

  BitManifestTopic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitManifestTopic& from);
  void MergeFrom(const BitManifestTopic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_infrastructure.Header header = 100;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 100;
  inline const ::service_infrastructure::Header& header() const;
  inline ::service_infrastructure::Header* mutable_header();
  inline ::service_infrastructure::Header* release_header();
  inline void set_allocated_header(::service_infrastructure::Header* header);

  // optional .com.srcinc.ngi.data.BitManifest bit_manifest = 1;
  inline bool has_bit_manifest() const;
  inline void clear_bit_manifest();
  static const int kBitManifestFieldNumber = 1;
  inline const ::com::srcinc::ngi::data::BitManifest& bit_manifest() const;
  inline ::com::srcinc::ngi::data::BitManifest* mutable_bit_manifest();
  inline ::com::srcinc::ngi::data::BitManifest* release_bit_manifest();
  inline void set_allocated_bit_manifest(::com::srcinc::ngi::data::BitManifest* bit_manifest);

  // @@protoc_insertion_point(class_scope:com.srcinc.ngi.data.BitManifestTopic)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_bit_manifest();
  inline void clear_has_bit_manifest();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::service_infrastructure::Header* header_;
  ::com::srcinc::ngi::data::BitManifest* bit_manifest_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_BitManifestMessage_2eproto();
  friend void protobuf_AssignDesc_BitManifestMessage_2eproto();
  friend void protobuf_ShutdownFile_BitManifestMessage_2eproto();

  void InitAsDefaultInstance();
  static BitManifestTopic* default_instance_;
};
// ===================================================================


// ===================================================================

// BitManifest_BitProperty_Thresholds

// optional double max_faulted = 1;
inline bool BitManifest_BitProperty_Thresholds::has_max_faulted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BitManifest_BitProperty_Thresholds::set_has_max_faulted() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BitManifest_BitProperty_Thresholds::clear_has_max_faulted() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BitManifest_BitProperty_Thresholds::clear_max_faulted() {
  max_faulted_ = 0;
  clear_has_max_faulted();
}
inline double BitManifest_BitProperty_Thresholds::max_faulted() const {
  return max_faulted_;
}
inline void BitManifest_BitProperty_Thresholds::set_max_faulted(double value) {
  set_has_max_faulted();
  max_faulted_ = value;
}

// optional double max_degraded = 2;
inline bool BitManifest_BitProperty_Thresholds::has_max_degraded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BitManifest_BitProperty_Thresholds::set_has_max_degraded() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BitManifest_BitProperty_Thresholds::clear_has_max_degraded() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BitManifest_BitProperty_Thresholds::clear_max_degraded() {
  max_degraded_ = 0;
  clear_has_max_degraded();
}
inline double BitManifest_BitProperty_Thresholds::max_degraded() const {
  return max_degraded_;
}
inline void BitManifest_BitProperty_Thresholds::set_max_degraded(double value) {
  set_has_max_degraded();
  max_degraded_ = value;
}

// optional double min_degraded = 3;
inline bool BitManifest_BitProperty_Thresholds::has_min_degraded() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BitManifest_BitProperty_Thresholds::set_has_min_degraded() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BitManifest_BitProperty_Thresholds::clear_has_min_degraded() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BitManifest_BitProperty_Thresholds::clear_min_degraded() {
  min_degraded_ = 0;
  clear_has_min_degraded();
}
inline double BitManifest_BitProperty_Thresholds::min_degraded() const {
  return min_degraded_;
}
inline void BitManifest_BitProperty_Thresholds::set_min_degraded(double value) {
  set_has_min_degraded();
  min_degraded_ = value;
}

// optional double min_faulted = 4;
inline bool BitManifest_BitProperty_Thresholds::has_min_faulted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BitManifest_BitProperty_Thresholds::set_has_min_faulted() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BitManifest_BitProperty_Thresholds::clear_has_min_faulted() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BitManifest_BitProperty_Thresholds::clear_min_faulted() {
  min_faulted_ = 0;
  clear_has_min_faulted();
}
inline double BitManifest_BitProperty_Thresholds::min_faulted() const {
  return min_faulted_;
}
inline void BitManifest_BitProperty_Thresholds::set_min_faulted(double value) {
  set_has_min_faulted();
  min_faulted_ = value;
}

// -------------------------------------------------------------------

// BitManifest_BitProperty

// required int32 id = 1;
inline bool BitManifest_BitProperty::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BitManifest_BitProperty::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BitManifest_BitProperty::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BitManifest_BitProperty::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BitManifest_BitProperty::id() const {
  return id_;
}
inline void BitManifest_BitProperty::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string display_name = 2;
inline bool BitManifest_BitProperty::has_display_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BitManifest_BitProperty::set_has_display_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BitManifest_BitProperty::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BitManifest_BitProperty::clear_display_name() {
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    display_name_->clear();
  }
  clear_has_display_name();
}
inline const ::std::string& BitManifest_BitProperty::display_name() const {
  return *display_name_;
}
inline void BitManifest_BitProperty::set_display_name(const ::std::string& value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
}
inline void BitManifest_BitProperty::set_display_name(const char* value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
}
inline void BitManifest_BitProperty::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BitManifest_BitProperty::mutable_display_name() {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  return display_name_;
}
inline ::std::string* BitManifest_BitProperty::release_display_name() {
  clear_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = display_name_;
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BitManifest_BitProperty::set_allocated_display_name(::std::string* display_name) {
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (display_name) {
    set_has_display_name();
    display_name_ = display_name;
  } else {
    clear_has_display_name();
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string description = 3;
inline bool BitManifest_BitProperty::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BitManifest_BitProperty::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BitManifest_BitProperty::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BitManifest_BitProperty::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& BitManifest_BitProperty::description() const {
  return *description_;
}
inline void BitManifest_BitProperty::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void BitManifest_BitProperty::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void BitManifest_BitProperty::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BitManifest_BitProperty::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* BitManifest_BitProperty::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BitManifest_BitProperty::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.srcinc.ngi.data.BitManifest.BitProperty.Units units = 4;
inline bool BitManifest_BitProperty::has_units() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BitManifest_BitProperty::set_has_units() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BitManifest_BitProperty::clear_has_units() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BitManifest_BitProperty::clear_units() {
  units_ = 0;
  clear_has_units();
}
inline ::com::srcinc::ngi::data::BitManifest_BitProperty_Units BitManifest_BitProperty::units() const {
  return static_cast< ::com::srcinc::ngi::data::BitManifest_BitProperty_Units >(units_);
}
inline void BitManifest_BitProperty::set_units(::com::srcinc::ngi::data::BitManifest_BitProperty_Units value) {
  assert(::com::srcinc::ngi::data::BitManifest_BitProperty_Units_IsValid(value));
  set_has_units();
  units_ = value;
}

// optional .com.srcinc.ngi.data.BitManifest.BitProperty.Types type = 5;
inline bool BitManifest_BitProperty::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BitManifest_BitProperty::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BitManifest_BitProperty::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BitManifest_BitProperty::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::com::srcinc::ngi::data::BitManifest_BitProperty_Types BitManifest_BitProperty::type() const {
  return static_cast< ::com::srcinc::ngi::data::BitManifest_BitProperty_Types >(type_);
}
inline void BitManifest_BitProperty::set_type(::com::srcinc::ngi::data::BitManifest_BitProperty_Types value) {
  assert(::com::srcinc::ngi::data::BitManifest_BitProperty_Types_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .com.srcinc.ngi.common.UserLevel min_user_level = 6;
inline bool BitManifest_BitProperty::has_min_user_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BitManifest_BitProperty::set_has_min_user_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BitManifest_BitProperty::clear_has_min_user_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BitManifest_BitProperty::clear_min_user_level() {
  min_user_level_ = 0;
  clear_has_min_user_level();
}
inline ::com::srcinc::ngi::common::UserLevel BitManifest_BitProperty::min_user_level() const {
  return static_cast< ::com::srcinc::ngi::common::UserLevel >(min_user_level_);
}
inline void BitManifest_BitProperty::set_min_user_level(::com::srcinc::ngi::common::UserLevel value) {
  assert(::com::srcinc::ngi::common::UserLevel_IsValid(value));
  set_has_min_user_level();
  min_user_level_ = value;
}

// optional .com.srcinc.ngi.data.BitManifest.BitProperty.Thresholds thresholds = 7;
inline bool BitManifest_BitProperty::has_thresholds() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BitManifest_BitProperty::set_has_thresholds() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BitManifest_BitProperty::clear_has_thresholds() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BitManifest_BitProperty::clear_thresholds() {
  if (thresholds_ != NULL) thresholds_->::com::srcinc::ngi::data::BitManifest_BitProperty_Thresholds::Clear();
  clear_has_thresholds();
}
inline const ::com::srcinc::ngi::data::BitManifest_BitProperty_Thresholds& BitManifest_BitProperty::thresholds() const {
  return thresholds_ != NULL ? *thresholds_ : *default_instance_->thresholds_;
}
inline ::com::srcinc::ngi::data::BitManifest_BitProperty_Thresholds* BitManifest_BitProperty::mutable_thresholds() {
  set_has_thresholds();
  if (thresholds_ == NULL) thresholds_ = new ::com::srcinc::ngi::data::BitManifest_BitProperty_Thresholds;
  return thresholds_;
}
inline ::com::srcinc::ngi::data::BitManifest_BitProperty_Thresholds* BitManifest_BitProperty::release_thresholds() {
  clear_has_thresholds();
  ::com::srcinc::ngi::data::BitManifest_BitProperty_Thresholds* temp = thresholds_;
  thresholds_ = NULL;
  return temp;
}
inline void BitManifest_BitProperty::set_allocated_thresholds(::com::srcinc::ngi::data::BitManifest_BitProperty_Thresholds* thresholds) {
  delete thresholds_;
  thresholds_ = thresholds;
  if (thresholds) {
    set_has_thresholds();
  } else {
    clear_has_thresholds();
  }
}

// optional string group_name = 8;
inline bool BitManifest_BitProperty::has_group_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BitManifest_BitProperty::set_has_group_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BitManifest_BitProperty::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BitManifest_BitProperty::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& BitManifest_BitProperty::group_name() const {
  return *group_name_;
}
inline void BitManifest_BitProperty::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
}
inline void BitManifest_BitProperty::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
}
inline void BitManifest_BitProperty::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BitManifest_BitProperty::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  return group_name_;
}
inline ::std::string* BitManifest_BitProperty::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BitManifest_BitProperty::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 history_length = 9;
inline bool BitManifest_BitProperty::has_history_length() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BitManifest_BitProperty::set_has_history_length() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BitManifest_BitProperty::clear_has_history_length() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BitManifest_BitProperty::clear_history_length() {
  history_length_ = 0;
  clear_has_history_length();
}
inline ::google::protobuf::int32 BitManifest_BitProperty::history_length() const {
  return history_length_;
}
inline void BitManifest_BitProperty::set_history_length(::google::protobuf::int32 value) {
  set_has_history_length();
  history_length_ = value;
}

// -------------------------------------------------------------------

// BitManifest_BitNode

// required int32 id = 1;
inline bool BitManifest_BitNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BitManifest_BitNode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BitManifest_BitNode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BitManifest_BitNode::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BitManifest_BitNode::id() const {
  return id_;
}
inline void BitManifest_BitNode::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string display_name = 2;
inline bool BitManifest_BitNode::has_display_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BitManifest_BitNode::set_has_display_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BitManifest_BitNode::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BitManifest_BitNode::clear_display_name() {
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    display_name_->clear();
  }
  clear_has_display_name();
}
inline const ::std::string& BitManifest_BitNode::display_name() const {
  return *display_name_;
}
inline void BitManifest_BitNode::set_display_name(const ::std::string& value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
}
inline void BitManifest_BitNode::set_display_name(const char* value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
}
inline void BitManifest_BitNode::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BitManifest_BitNode::mutable_display_name() {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  return display_name_;
}
inline ::std::string* BitManifest_BitNode::release_display_name() {
  clear_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = display_name_;
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BitManifest_BitNode::set_allocated_display_name(::std::string* display_name) {
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (display_name) {
    set_has_display_name();
    display_name_ = display_name;
  } else {
    clear_has_display_name();
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string description = 3;
inline bool BitManifest_BitNode::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BitManifest_BitNode::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BitManifest_BitNode::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BitManifest_BitNode::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& BitManifest_BitNode::description() const {
  return *description_;
}
inline void BitManifest_BitNode::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void BitManifest_BitNode::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void BitManifest_BitNode::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BitManifest_BitNode::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* BitManifest_BitNode::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BitManifest_BitNode::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.srcinc.ngi.common.UserLevel user_level = 4;
inline bool BitManifest_BitNode::has_user_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BitManifest_BitNode::set_has_user_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BitManifest_BitNode::clear_has_user_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BitManifest_BitNode::clear_user_level() {
  user_level_ = 0;
  clear_has_user_level();
}
inline ::com::srcinc::ngi::common::UserLevel BitManifest_BitNode::user_level() const {
  return static_cast< ::com::srcinc::ngi::common::UserLevel >(user_level_);
}
inline void BitManifest_BitNode::set_user_level(::com::srcinc::ngi::common::UserLevel value) {
  assert(::com::srcinc::ngi::common::UserLevel_IsValid(value));
  set_has_user_level();
  user_level_ = value;
}

// repeated .com.srcinc.ngi.data.BitManifest.BitProperty properties = 5;
inline int BitManifest_BitNode::properties_size() const {
  return properties_.size();
}
inline void BitManifest_BitNode::clear_properties() {
  properties_.Clear();
}
inline const ::com::srcinc::ngi::data::BitManifest_BitProperty& BitManifest_BitNode::properties(int index) const {
  return properties_.Get(index);
}
inline ::com::srcinc::ngi::data::BitManifest_BitProperty* BitManifest_BitNode::mutable_properties(int index) {
  return properties_.Mutable(index);
}
inline ::com::srcinc::ngi::data::BitManifest_BitProperty* BitManifest_BitNode::add_properties() {
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::srcinc::ngi::data::BitManifest_BitProperty >&
BitManifest_BitNode::properties() const {
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::srcinc::ngi::data::BitManifest_BitProperty >*
BitManifest_BitNode::mutable_properties() {
  return &properties_;
}

// repeated .com.srcinc.ngi.data.BitManifest.BitNode nodes = 6;
inline int BitManifest_BitNode::nodes_size() const {
  return nodes_.size();
}
inline void BitManifest_BitNode::clear_nodes() {
  nodes_.Clear();
}
inline const ::com::srcinc::ngi::data::BitManifest_BitNode& BitManifest_BitNode::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::com::srcinc::ngi::data::BitManifest_BitNode* BitManifest_BitNode::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::com::srcinc::ngi::data::BitManifest_BitNode* BitManifest_BitNode::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::srcinc::ngi::data::BitManifest_BitNode >&
BitManifest_BitNode::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::srcinc::ngi::data::BitManifest_BitNode >*
BitManifest_BitNode::mutable_nodes() {
  return &nodes_;
}

// optional bool is_top_level_status = 7;
inline bool BitManifest_BitNode::has_is_top_level_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BitManifest_BitNode::set_has_is_top_level_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BitManifest_BitNode::clear_has_is_top_level_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BitManifest_BitNode::clear_is_top_level_status() {
  is_top_level_status_ = false;
  clear_has_is_top_level_status();
}
inline bool BitManifest_BitNode::is_top_level_status() const {
  return is_top_level_status_;
}
inline void BitManifest_BitNode::set_is_top_level_status(bool value) {
  set_has_is_top_level_status();
  is_top_level_status_ = value;
}

// -------------------------------------------------------------------

// BitManifest

// repeated .com.srcinc.ngi.data.BitManifest.BitNode root_node = 1;
inline int BitManifest::root_node_size() const {
  return root_node_.size();
}
inline void BitManifest::clear_root_node() {
  root_node_.Clear();
}
inline const ::com::srcinc::ngi::data::BitManifest_BitNode& BitManifest::root_node(int index) const {
  return root_node_.Get(index);
}
inline ::com::srcinc::ngi::data::BitManifest_BitNode* BitManifest::mutable_root_node(int index) {
  return root_node_.Mutable(index);
}
inline ::com::srcinc::ngi::data::BitManifest_BitNode* BitManifest::add_root_node() {
  return root_node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::srcinc::ngi::data::BitManifest_BitNode >&
BitManifest::root_node() const {
  return root_node_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::srcinc::ngi::data::BitManifest_BitNode >*
BitManifest::mutable_root_node() {
  return &root_node_;
}

// -------------------------------------------------------------------

// BitManifestTopic

// optional .service_infrastructure.Header header = 100;
inline bool BitManifestTopic::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BitManifestTopic::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BitManifestTopic::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BitManifestTopic::clear_header() {
  if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
  clear_has_header();
}
inline const ::service_infrastructure::Header& BitManifestTopic::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::service_infrastructure::Header* BitManifestTopic::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::service_infrastructure::Header;
  return header_;
}
inline ::service_infrastructure::Header* BitManifestTopic::release_header() {
  clear_has_header();
  ::service_infrastructure::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void BitManifestTopic::set_allocated_header(::service_infrastructure::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional .com.srcinc.ngi.data.BitManifest bit_manifest = 1;
inline bool BitManifestTopic::has_bit_manifest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BitManifestTopic::set_has_bit_manifest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BitManifestTopic::clear_has_bit_manifest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BitManifestTopic::clear_bit_manifest() {
  if (bit_manifest_ != NULL) bit_manifest_->::com::srcinc::ngi::data::BitManifest::Clear();
  clear_has_bit_manifest();
}
inline const ::com::srcinc::ngi::data::BitManifest& BitManifestTopic::bit_manifest() const {
  return bit_manifest_ != NULL ? *bit_manifest_ : *default_instance_->bit_manifest_;
}
inline ::com::srcinc::ngi::data::BitManifest* BitManifestTopic::mutable_bit_manifest() {
  set_has_bit_manifest();
  if (bit_manifest_ == NULL) bit_manifest_ = new ::com::srcinc::ngi::data::BitManifest;
  return bit_manifest_;
}
inline ::com::srcinc::ngi::data::BitManifest* BitManifestTopic::release_bit_manifest() {
  clear_has_bit_manifest();
  ::com::srcinc::ngi::data::BitManifest* temp = bit_manifest_;
  bit_manifest_ = NULL;
  return temp;
}
inline void BitManifestTopic::set_allocated_bit_manifest(::com::srcinc::ngi::data::BitManifest* bit_manifest) {
  delete bit_manifest_;
  bit_manifest_ = bit_manifest;
  if (bit_manifest) {
    set_has_bit_manifest();
  } else {
    clear_has_bit_manifest();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace ngi
}  // namespace srcinc
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::srcinc::ngi::data::BitManifest_BitProperty_Units>() {
  return ::com::srcinc::ngi::data::BitManifest_BitProperty_Units_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::srcinc::ngi::data::BitManifest_BitProperty_Types>() {
  return ::com::srcinc::ngi::data::BitManifest_BitProperty_Types_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BitManifestMessage_2eproto__INCLUDED
