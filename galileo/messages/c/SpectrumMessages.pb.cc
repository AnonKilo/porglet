// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SpectrumMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SpectrumMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fv {
namespace spectrums {
namespace protos {
namespace SpectrumsProtos {

namespace {

const ::google::protobuf::Descriptor* SpectrumTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpectrumTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Spectrum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Spectrum_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SpectrumMessages_2eproto() {
  protobuf_AddDesc_SpectrumMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SpectrumMessages.proto");
  GOOGLE_CHECK(file != NULL);
  SpectrumTopic_descriptor_ = file->message_type(0);
  static const int SpectrumTopic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrumTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrumTopic, spectrum_),
  };
  SpectrumTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpectrumTopic_descriptor_,
      SpectrumTopic::default_instance_,
      SpectrumTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrumTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrumTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpectrumTopic));
  Spectrum_descriptor_ = file->message_type(1);
  static const int Spectrum_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, wholesec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, fracsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, framelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, minfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, binres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, binvalue_),
  };
  Spectrum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Spectrum_descriptor_,
      Spectrum::default_instance_,
      Spectrum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Spectrum));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SpectrumMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpectrumTopic_descriptor_, &SpectrumTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Spectrum_descriptor_, &Spectrum::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SpectrumMessages_2eproto() {
  delete SpectrumTopic::default_instance_;
  delete SpectrumTopic_reflection_;
  delete Spectrum::default_instance_;
  delete Spectrum_reflection_;
  delete Spectrum::_default_msgname_;
  delete Spectrum::_default_hostname_;
}

void protobuf_AddDesc_SpectrumMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::service_infrastructure::protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026SpectrumMessages.proto\022#fv.spectrums.p"
    "rotos.SpectrumsProtos\032!ServiceInfrastruc"
    "tureCommon.proto\"\200\001\n\rSpectrumTopic\022.\n\006he"
    "ader\030d \001(\0132\036.service_infrastructure.Head"
    "er\022\?\n\010spectrum\030\001 \001(\0132-.fv.spectrums.prot"
    "os.SpectrumsProtos.Spectrum\"\312\001\n\010Spectrum"
    "\022\031\n\007msgName\030\001 \001(\t:\010SPECTRUM\022\033\n\010hostname\030"
    "\002 \001(\t:\tlocalhost\022\023\n\010wholesec\030\003 \001(\002:\0010\022\022\n"
    "\007fracsec\030\004 \001(\002:\0010\022\031\n\013framelength\030\005 \001(\005:\004"
    "2048\022\017\n\007minfreq\030\006 \001(\002\022\016\n\006binres\030\007 \001(\002\022\017\n"
    "\007channel\030\010 \001(\005\022\020\n\010binvalue\030\t \003(\002B%\n\023fv.s"
    "pectrums.protosB\016SpectrumProtos", 471);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SpectrumMessages.proto", &protobuf_RegisterTypes);
  SpectrumTopic::default_instance_ = new SpectrumTopic();
  Spectrum::_default_msgname_ =
      new ::std::string("SPECTRUM", 8);
  Spectrum::_default_hostname_ =
      new ::std::string("localhost", 9);
  Spectrum::default_instance_ = new Spectrum();
  SpectrumTopic::default_instance_->InitAsDefaultInstance();
  Spectrum::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SpectrumMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SpectrumMessages_2eproto {
  StaticDescriptorInitializer_SpectrumMessages_2eproto() {
    protobuf_AddDesc_SpectrumMessages_2eproto();
  }
} static_descriptor_initializer_SpectrumMessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SpectrumTopic::kHeaderFieldNumber;
const int SpectrumTopic::kSpectrumFieldNumber;
#endif  // !_MSC_VER

SpectrumTopic::SpectrumTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpectrumTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  spectrum_ = const_cast< ::fv::spectrums::protos::SpectrumsProtos::Spectrum*>(&::fv::spectrums::protos::SpectrumsProtos::Spectrum::default_instance());
}

SpectrumTopic::SpectrumTopic(const SpectrumTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpectrumTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  spectrum_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpectrumTopic::~SpectrumTopic() {
  SharedDtor();
}

void SpectrumTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete spectrum_;
  }
}

void SpectrumTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpectrumTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpectrumTopic_descriptor_;
}

const SpectrumTopic& SpectrumTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpectrumMessages_2eproto();
  return *default_instance_;
}

SpectrumTopic* SpectrumTopic::default_instance_ = NULL;

SpectrumTopic* SpectrumTopic::New() const {
  return new SpectrumTopic;
}

void SpectrumTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_spectrum()) {
      if (spectrum_ != NULL) spectrum_->::fv::spectrums::protos::SpectrumsProtos::Spectrum::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpectrumTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fv.spectrums.protos.SpectrumsProtos.Spectrum spectrum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spectrum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpectrumTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fv.spectrums.protos.SpectrumsProtos.Spectrum spectrum = 1;
  if (has_spectrum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->spectrum(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpectrumTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fv.spectrums.protos.SpectrumsProtos.Spectrum spectrum = 1;
  if (has_spectrum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->spectrum(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpectrumTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .fv.spectrums.protos.SpectrumsProtos.Spectrum spectrum = 1;
    if (has_spectrum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spectrum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpectrumTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpectrumTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpectrumTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpectrumTopic::MergeFrom(const SpectrumTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_spectrum()) {
      mutable_spectrum()->::fv::spectrums::protos::SpectrumsProtos::Spectrum::MergeFrom(from.spectrum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpectrumTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpectrumTopic::CopyFrom(const SpectrumTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpectrumTopic::IsInitialized() const {

  return true;
}

void SpectrumTopic::Swap(SpectrumTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(spectrum_, other->spectrum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpectrumTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpectrumTopic_descriptor_;
  metadata.reflection = SpectrumTopic_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Spectrum::_default_msgname_ = NULL;
::std::string* Spectrum::_default_hostname_ = NULL;
#ifndef _MSC_VER
const int Spectrum::kMsgNameFieldNumber;
const int Spectrum::kHostnameFieldNumber;
const int Spectrum::kWholesecFieldNumber;
const int Spectrum::kFracsecFieldNumber;
const int Spectrum::kFramelengthFieldNumber;
const int Spectrum::kMinfreqFieldNumber;
const int Spectrum::kBinresFieldNumber;
const int Spectrum::kChannelFieldNumber;
const int Spectrum::kBinvalueFieldNumber;
#endif  // !_MSC_VER

Spectrum::Spectrum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Spectrum::InitAsDefaultInstance() {
}

Spectrum::Spectrum(const Spectrum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Spectrum::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  hostname_ = const_cast< ::std::string*>(_default_hostname_);
  wholesec_ = 0;
  fracsec_ = 0;
  framelength_ = 2048;
  minfreq_ = 0;
  binres_ = 0;
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Spectrum::~Spectrum() {
  SharedDtor();
}

void Spectrum::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (hostname_ != _default_hostname_) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void Spectrum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Spectrum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Spectrum_descriptor_;
}

const Spectrum& Spectrum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpectrumMessages_2eproto();
  return *default_instance_;
}

Spectrum* Spectrum::default_instance_ = NULL;

Spectrum* Spectrum::New() const {
  return new Spectrum;
}

void Spectrum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_hostname()) {
      if (hostname_ != _default_hostname_) {
        hostname_->assign(*_default_hostname_);
      }
    }
    wholesec_ = 0;
    fracsec_ = 0;
    framelength_ = 2048;
    minfreq_ = 0;
    binres_ = 0;
    channel_ = 0;
  }
  binvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Spectrum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SPECTRUM"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hostname;
        break;
      }

      // optional string hostname = 2 [default = "localhost"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_wholesec;
        break;
      }

      // optional float wholesec = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wholesec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wholesec_)));
          set_has_wholesec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_fracsec;
        break;
      }

      // optional float fracsec = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fracsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fracsec_)));
          set_has_fracsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_framelength;
        break;
      }

      // optional int32 framelength = 5 [default = 2048];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_framelength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framelength_)));
          set_has_framelength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_minfreq;
        break;
      }

      // optional float minfreq = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minfreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minfreq_)));
          set_has_minfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_binres;
        break;
      }

      // optional float binres = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_binres:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &binres_)));
          set_has_binres();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_channel;
        break;
      }

      // optional int32 channel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_binvalue;
        break;
      }

      // repeated float binvalue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_binvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77, input, this->mutable_binvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_binvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_binvalue;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Spectrum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SPECTRUM"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string hostname = 2 [default = "localhost"];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hostname(), output);
  }

  // optional float wholesec = 3 [default = 0];
  if (has_wholesec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->wholesec(), output);
  }

  // optional float fracsec = 4 [default = 0];
  if (has_fracsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fracsec(), output);
  }

  // optional int32 framelength = 5 [default = 2048];
  if (has_framelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->framelength(), output);
  }

  // optional float minfreq = 6;
  if (has_minfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->minfreq(), output);
  }

  // optional float binres = 7;
  if (has_binres()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->binres(), output);
  }

  // optional int32 channel = 8;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->channel(), output);
  }

  // repeated float binvalue = 9;
  for (int i = 0; i < this->binvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->binvalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Spectrum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SPECTRUM"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string hostname = 2 [default = "localhost"];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // optional float wholesec = 3 [default = 0];
  if (has_wholesec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->wholesec(), target);
  }

  // optional float fracsec = 4 [default = 0];
  if (has_fracsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fracsec(), target);
  }

  // optional int32 framelength = 5 [default = 2048];
  if (has_framelength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->framelength(), target);
  }

  // optional float minfreq = 6;
  if (has_minfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->minfreq(), target);
  }

  // optional float binres = 7;
  if (has_binres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->binres(), target);
  }

  // optional int32 channel = 8;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->channel(), target);
  }

  // repeated float binvalue = 9;
  for (int i = 0; i < this->binvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(9, this->binvalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Spectrum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SPECTRUM"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string hostname = 2 [default = "localhost"];
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional float wholesec = 3 [default = 0];
    if (has_wholesec()) {
      total_size += 1 + 4;
    }

    // optional float fracsec = 4 [default = 0];
    if (has_fracsec()) {
      total_size += 1 + 4;
    }

    // optional int32 framelength = 5 [default = 2048];
    if (has_framelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->framelength());
    }

    // optional float minfreq = 6;
    if (has_minfreq()) {
      total_size += 1 + 4;
    }

    // optional float binres = 7;
    if (has_binres()) {
      total_size += 1 + 4;
    }

    // optional int32 channel = 8;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  // repeated float binvalue = 9;
  {
    int data_size = 0;
    data_size = 4 * this->binvalue_size();
    total_size += 1 * this->binvalue_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Spectrum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Spectrum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Spectrum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Spectrum::MergeFrom(const Spectrum& from) {
  GOOGLE_CHECK_NE(&from, this);
  binvalue_.MergeFrom(from.binvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_wholesec()) {
      set_wholesec(from.wholesec());
    }
    if (from.has_fracsec()) {
      set_fracsec(from.fracsec());
    }
    if (from.has_framelength()) {
      set_framelength(from.framelength());
    }
    if (from.has_minfreq()) {
      set_minfreq(from.minfreq());
    }
    if (from.has_binres()) {
      set_binres(from.binres());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Spectrum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spectrum::CopyFrom(const Spectrum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spectrum::IsInitialized() const {

  return true;
}

void Spectrum::Swap(Spectrum* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(hostname_, other->hostname_);
    std::swap(wholesec_, other->wholesec_);
    std::swap(fracsec_, other->fracsec_);
    std::swap(framelength_, other->framelength_);
    std::swap(minfreq_, other->minfreq_);
    std::swap(binres_, other->binres_);
    std::swap(channel_, other->channel_);
    binvalue_.Swap(&other->binvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Spectrum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Spectrum_descriptor_;
  metadata.reflection = Spectrum_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SpectrumsProtos
}  // namespace protos
}  // namespace spectrums
}  // namespace fv

// @@protoc_insertion_point(global_scope)
