// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AiInferenceMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AiInferenceMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ai_inference_msg {

namespace {

const ::google::protobuf::Descriptor* SpectrogramInferenceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpectrogramInferenceResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AiInferenceMessages_2eproto() {
  protobuf_AddDesc_AiInferenceMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AiInferenceMessages.proto");
  GOOGLE_CHECK(file != NULL);
  SpectrogramInferenceResult_descriptor_ = file->message_type(0);
  static const int SpectrogramInferenceResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInferenceResult, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInferenceResult, ramsnapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInferenceResult, spectrogramfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInferenceResult, centerfrequencyhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInferenceResult, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInferenceResult, scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInferenceResult, scorethreshold_),
  };
  SpectrogramInferenceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpectrogramInferenceResult_descriptor_,
      SpectrogramInferenceResult::default_instance_,
      SpectrogramInferenceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInferenceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInferenceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpectrogramInferenceResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AiInferenceMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpectrogramInferenceResult_descriptor_, &SpectrogramInferenceResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AiInferenceMessages_2eproto() {
  delete SpectrogramInferenceResult::default_instance_;
  delete SpectrogramInferenceResult_reflection_;
  delete SpectrogramInferenceResult::_default_msgname_;
}

void protobuf_AddDesc_AiInferenceMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031AiInferenceMessages.proto\022\020ai_inferenc"
    "e_msg\"\312\001\n\032SpectrogramInferenceResult\022-\n\007"
    "msgName\030\001 \001(\t:\034SPECTROGRAM_INFERENCE_RES"
    "ULT\022\021\n\tramSnapId\030\002 \001(\t\022\027\n\017spectrogramFil"
    "e\030\003 \001(\t\022\031\n\021centerFrequencyHz\030\004 \001(\001\022\016\n\006la"
    "bels\030\005 \003(\t\022\016\n\006scores\030\006 \003(\001\022\026\n\016scoreThres"
    "hold\030\007 \001(\001B\025\n\023fv.protos.kepsvisor", 273);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AiInferenceMessages.proto", &protobuf_RegisterTypes);
  SpectrogramInferenceResult::_default_msgname_ =
      new ::std::string("SPECTROGRAM_INFERENCE_RESULT", 28);
  SpectrogramInferenceResult::default_instance_ = new SpectrogramInferenceResult();
  SpectrogramInferenceResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AiInferenceMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AiInferenceMessages_2eproto {
  StaticDescriptorInitializer_AiInferenceMessages_2eproto() {
    protobuf_AddDesc_AiInferenceMessages_2eproto();
  }
} static_descriptor_initializer_AiInferenceMessages_2eproto_;

// ===================================================================

::std::string* SpectrogramInferenceResult::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SpectrogramInferenceResult::kMsgNameFieldNumber;
const int SpectrogramInferenceResult::kRamSnapIdFieldNumber;
const int SpectrogramInferenceResult::kSpectrogramFileFieldNumber;
const int SpectrogramInferenceResult::kCenterFrequencyHzFieldNumber;
const int SpectrogramInferenceResult::kLabelsFieldNumber;
const int SpectrogramInferenceResult::kScoresFieldNumber;
const int SpectrogramInferenceResult::kScoreThresholdFieldNumber;
#endif  // !_MSC_VER

SpectrogramInferenceResult::SpectrogramInferenceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpectrogramInferenceResult::InitAsDefaultInstance() {
}

SpectrogramInferenceResult::SpectrogramInferenceResult(const SpectrogramInferenceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpectrogramInferenceResult::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ramsnapid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  spectrogramfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  centerfrequencyhz_ = 0;
  scorethreshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpectrogramInferenceResult::~SpectrogramInferenceResult() {
  SharedDtor();
}

void SpectrogramInferenceResult::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (ramsnapid_ != &::google::protobuf::internal::kEmptyString) {
    delete ramsnapid_;
  }
  if (spectrogramfile_ != &::google::protobuf::internal::kEmptyString) {
    delete spectrogramfile_;
  }
  if (this != default_instance_) {
  }
}

void SpectrogramInferenceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpectrogramInferenceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpectrogramInferenceResult_descriptor_;
}

const SpectrogramInferenceResult& SpectrogramInferenceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AiInferenceMessages_2eproto();
  return *default_instance_;
}

SpectrogramInferenceResult* SpectrogramInferenceResult::default_instance_ = NULL;

SpectrogramInferenceResult* SpectrogramInferenceResult::New() const {
  return new SpectrogramInferenceResult;
}

void SpectrogramInferenceResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_ramsnapid()) {
      if (ramsnapid_ != &::google::protobuf::internal::kEmptyString) {
        ramsnapid_->clear();
      }
    }
    if (has_spectrogramfile()) {
      if (spectrogramfile_ != &::google::protobuf::internal::kEmptyString) {
        spectrogramfile_->clear();
      }
    }
    centerfrequencyhz_ = 0;
    scorethreshold_ = 0;
  }
  labels_.Clear();
  scores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpectrogramInferenceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ramSnapId;
        break;
      }

      // optional string ramSnapId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ramSnapId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ramsnapid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ramsnapid().data(), this->ramsnapid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_spectrogramFile;
        break;
      }

      // optional string spectrogramFile = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spectrogramFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spectrogramfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spectrogramfile().data(), this->spectrogramfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_centerFrequencyHz;
        break;
      }

      // optional double centerFrequencyHz = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_centerFrequencyHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerfrequencyhz_)));
          set_has_centerfrequencyhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_labels;
        break;
      }

      // repeated string labels = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_labels;
        if (input->ExpectTag(49)) goto parse_scores;
        break;
      }

      // repeated double scores = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_scores())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_scores())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_scores;
        if (input->ExpectTag(57)) goto parse_scoreThreshold;
        break;
      }

      // optional double scoreThreshold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_scoreThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scorethreshold_)));
          set_has_scorethreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpectrogramInferenceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string ramSnapId = 2;
  if (has_ramsnapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ramsnapid().data(), this->ramsnapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ramsnapid(), output);
  }

  // optional string spectrogramFile = 3;
  if (has_spectrogramfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spectrogramfile().data(), this->spectrogramfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->spectrogramfile(), output);
  }

  // optional double centerFrequencyHz = 4;
  if (has_centerfrequencyhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->centerfrequencyhz(), output);
  }

  // repeated string labels = 5;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->labels(i), output);
  }

  // repeated double scores = 6;
  for (int i = 0; i < this->scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->scores(i), output);
  }

  // optional double scoreThreshold = 7;
  if (has_scorethreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->scorethreshold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpectrogramInferenceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string ramSnapId = 2;
  if (has_ramsnapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ramsnapid().data(), this->ramsnapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ramsnapid(), target);
  }

  // optional string spectrogramFile = 3;
  if (has_spectrogramfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spectrogramfile().data(), this->spectrogramfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->spectrogramfile(), target);
  }

  // optional double centerFrequencyHz = 4;
  if (has_centerfrequencyhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->centerfrequencyhz(), target);
  }

  // repeated string labels = 5;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->labels(i), target);
  }

  // repeated double scores = 6;
  for (int i = 0; i < this->scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->scores(i), target);
  }

  // optional double scoreThreshold = 7;
  if (has_scorethreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->scorethreshold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpectrogramInferenceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SPECTROGRAM_INFERENCE_RESULT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string ramSnapId = 2;
    if (has_ramsnapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ramsnapid());
    }

    // optional string spectrogramFile = 3;
    if (has_spectrogramfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spectrogramfile());
    }

    // optional double centerFrequencyHz = 4;
    if (has_centerfrequencyhz()) {
      total_size += 1 + 8;
    }

    // optional double scoreThreshold = 7;
    if (has_scorethreshold()) {
      total_size += 1 + 8;
    }

  }
  // repeated string labels = 5;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  // repeated double scores = 6;
  {
    int data_size = 0;
    data_size = 8 * this->scores_size();
    total_size += 1 * this->scores_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpectrogramInferenceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpectrogramInferenceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpectrogramInferenceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpectrogramInferenceResult::MergeFrom(const SpectrogramInferenceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  scores_.MergeFrom(from.scores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_ramsnapid()) {
      set_ramsnapid(from.ramsnapid());
    }
    if (from.has_spectrogramfile()) {
      set_spectrogramfile(from.spectrogramfile());
    }
    if (from.has_centerfrequencyhz()) {
      set_centerfrequencyhz(from.centerfrequencyhz());
    }
    if (from.has_scorethreshold()) {
      set_scorethreshold(from.scorethreshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpectrogramInferenceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpectrogramInferenceResult::CopyFrom(const SpectrogramInferenceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpectrogramInferenceResult::IsInitialized() const {

  return true;
}

void SpectrogramInferenceResult::Swap(SpectrogramInferenceResult* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(ramsnapid_, other->ramsnapid_);
    std::swap(spectrogramfile_, other->spectrogramfile_);
    std::swap(centerfrequencyhz_, other->centerfrequencyhz_);
    labels_.Swap(&other->labels_);
    scores_.Swap(&other->scores_);
    std::swap(scorethreshold_, other->scorethreshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpectrogramInferenceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpectrogramInferenceResult_descriptor_;
  metadata.reflection = SpectrogramInferenceResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ai_inference_msg

// @@protoc_insertion_point(global_scope)
