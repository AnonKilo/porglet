// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FalconCommonMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FalconCommonMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace falcon_common_msg {

namespace {

const ::google::protobuf::Descriptor* BlacklistEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlacklistEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtraForkChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraForkChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* InterceptGoActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InterceptGoActive_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeoTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoTip_reflection_ = NULL;
const ::google::protobuf::Descriptor* PreDSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PreDSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClipRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClipRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClipResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClipResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectionTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectionTip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Burst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Burst_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiverStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiverStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Timestamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Timestamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceReinitialize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceReinitialize_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorHeading_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorHeading_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValuePair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValuePair_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValueContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValueContainer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeodeticPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeodeticPosition_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FalconCommonMessages_2eproto() {
  protobuf_AddDesc_FalconCommonMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FalconCommonMessages.proto");
  GOOGLE_CHECK(file != NULL);
  BlacklistEntry_descriptor_ = file->message_type(0);
  static const int BlacklistEntry_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistEntry, minrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistEntry, maxrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistEntry, scrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistEntry, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistEntry, uniqueid_),
  };
  BlacklistEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlacklistEntry_descriptor_,
      BlacklistEntry::default_instance_,
      BlacklistEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlacklistEntry));
  ExtraForkChannel_descriptor_ = file->message_type(1);
  static const int ExtraForkChannel_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkChannel, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkChannel, inputport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkChannel, outputport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkChannel, videoport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkChannel, launch_on_start_),
  };
  ExtraForkChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraForkChannel_descriptor_,
      ExtraForkChannel::default_instance_,
      ExtraForkChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraForkChannel));
  InterceptGoActive_descriptor_ = file->message_type(2);
  static const int InterceptGoActive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptGoActive, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptGoActive, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptGoActive, j1970time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptGoActive, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptGoActive, jam_),
  };
  InterceptGoActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InterceptGoActive_descriptor_,
      InterceptGoActive::default_instance_,
      InterceptGoActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptGoActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptGoActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InterceptGoActive));
  GeoTip_descriptor_ = file->message_type(3);
  static const int GeoTip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTip, pred_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTip, tip_id_),
  };
  GeoTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoTip_descriptor_,
      GeoTip::default_instance_,
      GeoTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoTip));
  PreDSource_descriptor_ = file->message_type(4);
  static const int PreDSource_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreDSource, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreDSource, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreDSource, meta_data_),
  };
  PreDSource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PreDSource_descriptor_,
      PreDSource::default_instance_,
      PreDSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreDSource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreDSource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PreDSource));
  MetaData_descriptor_ = file->message_type(5);
  static const int MetaData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, wholesec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, fracsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, centerfrequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, samplerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, eltex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, soinum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, globalid_),
  };
  MetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaData_descriptor_,
      MetaData::default_instance_,
      MetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaData));
  GeoResult_descriptor_ = file->message_type(6);
  static const int GeoResult_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, j1970time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, semimajor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, semiminor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, soi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, wplatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, wplongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, bearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, cep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, freq_hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, bw_hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, combining_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, diagnostic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, qualifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, tip_id_),
  };
  GeoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoResult_descriptor_,
      GeoResult::default_instance_,
      GeoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoResult));
  ClipRequest_descriptor_ = file->message_type(7);
  static const int ClipRequest_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipRequest, timewhole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipRequest, timefractional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipRequest, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipRequest, centerfrequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipRequest, freqoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipRequest, samplerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipRequest, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipRequest, soinum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipRequest, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipRequest, idnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipRequest, sensorname_),
  };
  ClipRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClipRequest_descriptor_,
      ClipRequest::default_instance_,
      ClipRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClipRequest));
  ClipResponse_descriptor_ = file->message_type(8);
  static const int ClipResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipResponse, geotip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipResponse, idnumber_),
  };
  ClipResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClipResponse_descriptor_,
      ClipResponse::default_instance_,
      ClipResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClipResponse));
  DetectionTip_descriptor_ = file->message_type(9);
  static const int DetectionTip_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionTip, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionTip, det_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionTip, sensor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionTip, has_pred_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionTip, file_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionTip, start_time_whole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionTip, start_time_frac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionTip, duration_millisec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionTip, center_tune_freq_hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionTip, bandwidth_hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionTip, hops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionTip, bursts_),
  };
  DetectionTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectionTip_descriptor_,
      DetectionTip::default_instance_,
      DetectionTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectionTip));
  Hop_descriptor_ = file->message_type(10);
  static const int Hop_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hop, hop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hop, start_time_whole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hop, start_time_frac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hop, duration_millisec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hop, hop_center_freq_hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hop, hop_bw_hz_),
  };
  Hop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hop_descriptor_,
      Hop::default_instance_,
      Hop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hop));
  Burst_descriptor_ = file->message_type(11);
  static const int Burst_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Burst, burst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Burst, start_time_whole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Burst, start_time_frac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Burst, duration_millisec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Burst, burst_center_freq_hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Burst, burst_bw_hz_),
  };
  Burst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Burst_descriptor_,
      Burst::default_instance_,
      Burst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Burst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Burst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Burst));
  SensorStatus_descriptor_ = file->message_type(12);
  static const int SensorStatus_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatus, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatus, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatus, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatus, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatus, sensorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatus, rxstatus_),
  };
  SensorStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorStatus_descriptor_,
      SensorStatus::default_instance_,
      SensorStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorStatus));
  ReceiverStatus_descriptor_ = file->message_type(13);
  static const int ReceiverStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, idnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, rxfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, rxbandwidth_),
  };
  ReceiverStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiverStatus_descriptor_,
      ReceiverStatus::default_instance_,
      ReceiverStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiverStatus));
  Timestamp_descriptor_ = file->message_type(14);
  static const int Timestamp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, fseconds_),
  };
  Timestamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Timestamp_descriptor_,
      Timestamp::default_instance_,
      Timestamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Timestamp));
  ServiceReinitialize_descriptor_ = file->message_type(15);
  static const int ServiceReinitialize_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReinitialize, msgname_),
  };
  ServiceReinitialize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceReinitialize_descriptor_,
      ServiceReinitialize::default_instance_,
      ServiceReinitialize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReinitialize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReinitialize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceReinitialize));
  SensorHeading_descriptor_ = file->message_type(16);
  static const int SensorHeading_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHeading, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHeading, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHeading, j1970time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHeading, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHeading, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHeading, roll_),
  };
  SensorHeading_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorHeading_descriptor_,
      SensorHeading::default_instance_,
      SensorHeading_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHeading, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHeading, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorHeading));
  KeyValuePair_descriptor_ = file->message_type(17);
  static const int KeyValuePair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, value_),
  };
  KeyValuePair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValuePair_descriptor_,
      KeyValuePair::default_instance_,
      KeyValuePair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValuePair));
  ValueContainer_descriptor_ = file->message_type(18);
  static const int ValueContainer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueContainer, bool_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueContainer, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueContainer, float_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueContainer, string_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueContainer, position_value_),
  };
  ValueContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ValueContainer_descriptor_,
      ValueContainer::default_instance_,
      ValueContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueContainer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ValueContainer));
  GeodeticPosition_descriptor_ = file->message_type(19);
  static const int GeodeticPosition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeodeticPosition, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeodeticPosition, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeodeticPosition, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeodeticPosition, alt_meters_hae_),
  };
  GeodeticPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeodeticPosition_descriptor_,
      GeodeticPosition::default_instance_,
      GeodeticPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeodeticPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeodeticPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeodeticPosition));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FalconCommonMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlacklistEntry_descriptor_, &BlacklistEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraForkChannel_descriptor_, &ExtraForkChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InterceptGoActive_descriptor_, &InterceptGoActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoTip_descriptor_, &GeoTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PreDSource_descriptor_, &PreDSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaData_descriptor_, &MetaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoResult_descriptor_, &GeoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClipRequest_descriptor_, &ClipRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClipResponse_descriptor_, &ClipResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectionTip_descriptor_, &DetectionTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hop_descriptor_, &Hop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Burst_descriptor_, &Burst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorStatus_descriptor_, &SensorStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiverStatus_descriptor_, &ReceiverStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Timestamp_descriptor_, &Timestamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceReinitialize_descriptor_, &ServiceReinitialize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorHeading_descriptor_, &SensorHeading::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValuePair_descriptor_, &KeyValuePair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ValueContainer_descriptor_, &ValueContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeodeticPosition_descriptor_, &GeodeticPosition::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FalconCommonMessages_2eproto() {
  delete BlacklistEntry::default_instance_;
  delete BlacklistEntry_reflection_;
  delete ExtraForkChannel::default_instance_;
  delete ExtraForkChannel_reflection_;
  delete InterceptGoActive::default_instance_;
  delete InterceptGoActive_reflection_;
  delete InterceptGoActive::_default_msgname_;
  delete GeoTip::default_instance_;
  delete GeoTip_reflection_;
  delete PreDSource::default_instance_;
  delete PreDSource_reflection_;
  delete MetaData::default_instance_;
  delete MetaData_reflection_;
  delete GeoResult::default_instance_;
  delete GeoResult_reflection_;
  delete GeoResult::_default_msgname_;
  delete ClipRequest::default_instance_;
  delete ClipRequest_reflection_;
  delete ClipRequest::_default_msgname_;
  delete ClipResponse::default_instance_;
  delete ClipResponse_reflection_;
  delete ClipResponse::_default_msgname_;
  delete DetectionTip::default_instance_;
  delete DetectionTip_reflection_;
  delete DetectionTip::_default_msgname_;
  delete Hop::default_instance_;
  delete Hop_reflection_;
  delete Burst::default_instance_;
  delete Burst_reflection_;
  delete SensorStatus::default_instance_;
  delete SensorStatus_reflection_;
  delete SensorStatus::_default_msgname_;
  delete ReceiverStatus::default_instance_;
  delete ReceiverStatus_reflection_;
  delete ReceiverStatus::_default_msgname_;
  delete Timestamp::default_instance_;
  delete Timestamp_reflection_;
  delete ServiceReinitialize::default_instance_;
  delete ServiceReinitialize_reflection_;
  delete ServiceReinitialize::_default_msgname_;
  delete SensorHeading::default_instance_;
  delete SensorHeading_reflection_;
  delete SensorHeading::_default_msgname_;
  delete KeyValuePair::default_instance_;
  delete KeyValuePair_reflection_;
  delete ValueContainer::default_instance_;
  delete ValueContainer_reflection_;
  delete GeodeticPosition::default_instance_;
  delete GeodeticPosition_reflection_;
}

void protobuf_AddDesc_FalconCommonMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032FalconCommonMessages.proto\022\021falcon_com"
    "mon_msg\"}\n\016BlacklistEntry\022\014\n\004name\030\001 \001(\t\022"
    "\021\n\005minRF\030\002 \001(\001:\002-1\022\021\n\005maxRF\030\003 \001(\001:\002-1\022\016\n"
    "\006scrypt\030\004 \001(\t\022\023\n\007timeout\030\005 \001(\002:\002-1\022\022\n\010un"
    "iqueID\030\006 \001(\t:\000\"x\n\020ExtraForkChannel\022\021\n\tch"
    "annelID\030\001 \001(\005\022\021\n\tinputPort\030\002 \001(\005\022\022\n\noutp"
    "utPort\030\003 \001(\005\022\021\n\tvideoPort\030\004 \001(\005\022\027\n\017launc"
    "h_on_start\030\005 \001(\005\"\210\001\n\021InterceptGoActive\022$"
    "\n\007msgName\030\001 \001(\t:\023INTERCEPT_GO_ACTIVE\022\022\n\010"
    "hostname\030\002 \001(\t:\000\022\021\n\tj1970Time\030\003 \001(\001\022\022\n\010u"
    "niqueID\030\004 \001(\t:\000\022\022\n\003jam\030\005 \001(\010:\005false\"L\n\006G"
    "eoTip\0222\n\013pred_source\030\001 \003(\0132\035.falcon_comm"
    "on_msg.PreDSource\022\016\n\006tip_id\030\004 \001(\t\"`\n\nPre"
    "DSource\022\020\n\010filename\030\001 \001(\t\022\020\n\010hostname\030\002 "
    "\001(\t\022.\n\tmeta_data\030\003 \001(\0132\033.falcon_common_m"
    "sg.MetaData\"\260\001\n\010MetaData\022\020\n\010wholeSec\030\001 \001"
    "(\001\022\017\n\007fracSec\030\002 \001(\001\022\020\n\010duration\030\003 \001(\001\022\027\n"
    "\017centerFrequency\030\n \001(\001\022\022\n\nsampleRate\030\013 \001"
    "(\001\022\021\n\tbandwidth\030\014 \001(\001\022\r\n\005eltex\030\024 \001(\t\022\016\n\006"
    "soiNum\030\025 \001(\t\022\020\n\010globalId\030\026 \001(\t\"\375\003\n\tGeoRe"
    "sult\022\033\n\007msgName\030\001 \001(\t:\nGEO_RESULT\022\020\n\010hos"
    "tname\030\002 \001(\t\022\021\n\tj1970Time\030\003 \001(\001\022\t\n\001x\030\004 \001("
    "\001\022\t\n\001y\030\005 \001(\001\022\t\n\001z\030\006 \001(\001\022\013\n\003alt\030\007 \001(\001\022\013\n\003"
    "lat\030\010 \001(\001\022\013\n\003lon\030\t \001(\001\022\021\n\tsemiMajor\030\n \001("
    "\001\022\021\n\tsemiMinor\030\013 \001(\001\022\023\n\013orientation\030\014 \001("
    "\001\022\013\n\003soi\030\r \001(\t\022\022\n\010uniqueID\030\016 \001(\t:\000\022\022\n\007ch"
    "annel\030\017 \001(\005:\0011\022\017\n\007eventID\030\020 \001(\t\022\022\n\nwpLat"
    "itude\030\021 \001(\002\022\023\n\013wpLongitude\030\022 \001(\002\022\020\n\010velo"
    "city\030\023 \001(\002\022\017\n\007bearing\030\024 \001(\002\022\016\n\006seqnum\030\025 "
    "\001(\002\022\r\n\005valid\030\032 \001(\010\022\013\n\003cep\030\033 \001(\001\022\017\n\007freq_"
    "hz\030\034 \001(\001\022\r\n\005bw_hz\030\035 \001(\001\022\026\n\016combining_typ"
    "e\030\036 \001(\t\022\022\n\ndiagnostic\030\037 \001(\t\022\021\n\tqualifier"
    "\030  \001(\t\022\016\n\006tip_id\030! \001(\t\"\204\002\n\013ClipRequest\022\034"
    "\n\007msgName\030\001 \001(\t:\013CLIPREQUEST\022\021\n\ttimeWhol"
    "e\030\002 \001(\001\022\026\n\016timeFractional\030\003 \001(\001\022\020\n\010durat"
    "ion\030\004 \001(\001\022\027\n\017centerFrequency\030\005 \001(\001\022\022\n\nfr"
    "eqOffset\030\006 \001(\001\022\022\n\nsampleRate\030\007 \001(\001\022\021\n\tba"
    "ndwidth\030\010 \001(\001\022\016\n\006soiNum\030\t \001(\t\022\020\n\010globalI"
    "d\030\n \001(\t\022\020\n\010idNumber\030\013 \001(\003\022\022\n\nsensorName\030"
    "\014 \001(\t\"j\n\014ClipResponse\022\035\n\007msgName\030\001 \001(\t:\014"
    "CLIPRESPONSE\022)\n\006geoTip\030\002 \001(\0132\031.falcon_co"
    "mmon_msg.GeoTip\022\020\n\010idNumber\030\003 \001(\003\"\312\002\n\014De"
    "tectionTip\022\035\n\007msgName\030\001 \001(\t:\014DETECTIONTI"
    "P\022\016\n\006det_id\030\002 \001(\t\022\021\n\tsensor_id\030\003 \001(\t\022\020\n\010"
    "has_pred\030\004 \001(\010\022\025\n\rfile_location\030\005 \001(\t\022\030\n"
    "\020start_time_whole\030\006 \001(\001\022\027\n\017start_time_fr"
    "ac\030\007 \001(\001\022\031\n\021duration_millisec\030\010 \001(\001\022\033\n\023c"
    "enter_tune_freq_hz\030\t \001(\001\022\024\n\014bandwidth_hz"
    "\030\n \001(\001\022$\n\004hops\030\013 \003(\0132\026.falcon_common_msg"
    ".Hop\022(\n\006bursts\030\014 \003(\0132\030.falcon_common_msg"
    ".Burst\"\222\001\n\003Hop\022\016\n\006hop_id\030\001 \001(\t\022\030\n\020start_"
    "time_whole\030\002 \001(\001\022\027\n\017start_time_frac\030\003 \001("
    "\001\022\031\n\021duration_millisec\030\004 \001(\001\022\032\n\022hop_cent"
    "er_freq_hz\030\005 \001(\001\022\021\n\thop_bw_hz\030\006 \001(\001\"\232\001\n\005"
    "Burst\022\020\n\010burst_id\030\001 \001(\t\022\030\n\020start_time_wh"
    "ole\030\002 \001(\001\022\027\n\017start_time_frac\030\003 \001(\001\022\031\n\021du"
    "ration_millisec\030\004 \001(\001\022\034\n\024burst_center_fr"
    "eq_hz\030\005 \001(\001\022\023\n\013burst_bw_hz\030\006 \001(\001\"\263\001\n\014Sen"
    "sorStatus\022\036\n\007msgName\030\001 \001(\t:\rSENSOR_STATU"
    "S\022\013\n\003lat\030\002 \001(\002\022\013\n\003lon\030\003 \001(\002\022\013\n\003alt\030\004 \001(\002"
    "\022\021\n\ttimestamp\030\005 \001(\003\022\024\n\nsensorName\030\006 \001(\t:"
    "\000\0223\n\010rxStatus\030\007 \003(\0132!.falcon_common_msg."
    "ReceiverStatus\"\202\001\n\016ReceiverStatus\022 \n\007msg"
    "Name\030\001 \001(\t:\017RECEIVER_STATUS\022\r\n\005idNum\030\002 \001"
    "(\005\022\014\n\004name\030\003 \001(\t\022\014\n\004type\030\004 \001(\t\022\016\n\006rxFreq"
    "\030\005 \001(\002\022\023\n\013rxBandwidth\030\006 \001(\002\".\n\tTimestamp"
    "\022\017\n\007seconds\030\001 \001(\003\022\020\n\010fseconds\030\002 \001(\002\"<\n\023S"
    "erviceReinitialize\022%\n\007msgName\030\001 \001(\t:\024SER"
    "VICE_REINITIALIZE\"\203\001\n\rSensorHeading\022\037\n\007m"
    "sgName\030\001 \001(\t:\016SENSOR_HEADING\022\020\n\010hostname"
    "\030\002 \001(\t\022\021\n\tj1970Time\030\003 \001(\001\022\017\n\007heading\030\004 \001"
    "(\001\022\r\n\005pitch\030\005 \001(\001\022\014\n\004roll\030\006 \001(\001\"O\n\014KeyVa"
    "luePair\022\r\n\005label\030\001 \001(\t\0220\n\005value\030\002 \001(\0132!."
    "falcon_common_msg.ValueContainer\"\237\001\n\016Val"
    "ueContainer\022\022\n\nbool_value\030\001 \001(\010\022\021\n\tint_v"
    "alue\030\002 \001(\005\022\023\n\013float_value\030\003 \001(\002\022\024\n\014strin"
    "g_value\030\004 \001(\t\022;\n\016position_value\030\005 \001(\0132#."
    "falcon_common_msg.GeodeticPosition\"Q\n\020Ge"
    "odeticPosition\022\013\n\003lat\030\001 \001(\002\022\013\n\003lon\030\002 \001(\002"
    "\022\013\n\003alt\030\003 \001(\003\022\026\n\016alt_meters_hae\030\004 \001(\003B\025\n"
    "\023fv.protos.kepsvisor", 3220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FalconCommonMessages.proto", &protobuf_RegisterTypes);
  BlacklistEntry::default_instance_ = new BlacklistEntry();
  ExtraForkChannel::default_instance_ = new ExtraForkChannel();
  InterceptGoActive::_default_msgname_ =
      new ::std::string("INTERCEPT_GO_ACTIVE", 19);
  InterceptGoActive::default_instance_ = new InterceptGoActive();
  GeoTip::default_instance_ = new GeoTip();
  PreDSource::default_instance_ = new PreDSource();
  MetaData::default_instance_ = new MetaData();
  GeoResult::_default_msgname_ =
      new ::std::string("GEO_RESULT", 10);
  GeoResult::default_instance_ = new GeoResult();
  ClipRequest::_default_msgname_ =
      new ::std::string("CLIPREQUEST", 11);
  ClipRequest::default_instance_ = new ClipRequest();
  ClipResponse::_default_msgname_ =
      new ::std::string("CLIPRESPONSE", 12);
  ClipResponse::default_instance_ = new ClipResponse();
  DetectionTip::_default_msgname_ =
      new ::std::string("DETECTIONTIP", 12);
  DetectionTip::default_instance_ = new DetectionTip();
  Hop::default_instance_ = new Hop();
  Burst::default_instance_ = new Burst();
  SensorStatus::_default_msgname_ =
      new ::std::string("SENSOR_STATUS", 13);
  SensorStatus::default_instance_ = new SensorStatus();
  ReceiverStatus::_default_msgname_ =
      new ::std::string("RECEIVER_STATUS", 15);
  ReceiverStatus::default_instance_ = new ReceiverStatus();
  Timestamp::default_instance_ = new Timestamp();
  ServiceReinitialize::_default_msgname_ =
      new ::std::string("SERVICE_REINITIALIZE", 20);
  ServiceReinitialize::default_instance_ = new ServiceReinitialize();
  SensorHeading::_default_msgname_ =
      new ::std::string("SENSOR_HEADING", 14);
  SensorHeading::default_instance_ = new SensorHeading();
  KeyValuePair::default_instance_ = new KeyValuePair();
  ValueContainer::default_instance_ = new ValueContainer();
  GeodeticPosition::default_instance_ = new GeodeticPosition();
  BlacklistEntry::default_instance_->InitAsDefaultInstance();
  ExtraForkChannel::default_instance_->InitAsDefaultInstance();
  InterceptGoActive::default_instance_->InitAsDefaultInstance();
  GeoTip::default_instance_->InitAsDefaultInstance();
  PreDSource::default_instance_->InitAsDefaultInstance();
  MetaData::default_instance_->InitAsDefaultInstance();
  GeoResult::default_instance_->InitAsDefaultInstance();
  ClipRequest::default_instance_->InitAsDefaultInstance();
  ClipResponse::default_instance_->InitAsDefaultInstance();
  DetectionTip::default_instance_->InitAsDefaultInstance();
  Hop::default_instance_->InitAsDefaultInstance();
  Burst::default_instance_->InitAsDefaultInstance();
  SensorStatus::default_instance_->InitAsDefaultInstance();
  ReceiverStatus::default_instance_->InitAsDefaultInstance();
  Timestamp::default_instance_->InitAsDefaultInstance();
  ServiceReinitialize::default_instance_->InitAsDefaultInstance();
  SensorHeading::default_instance_->InitAsDefaultInstance();
  KeyValuePair::default_instance_->InitAsDefaultInstance();
  ValueContainer::default_instance_->InitAsDefaultInstance();
  GeodeticPosition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FalconCommonMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FalconCommonMessages_2eproto {
  StaticDescriptorInitializer_FalconCommonMessages_2eproto() {
    protobuf_AddDesc_FalconCommonMessages_2eproto();
  }
} static_descriptor_initializer_FalconCommonMessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BlacklistEntry::kNameFieldNumber;
const int BlacklistEntry::kMinRFFieldNumber;
const int BlacklistEntry::kMaxRFFieldNumber;
const int BlacklistEntry::kScryptFieldNumber;
const int BlacklistEntry::kTimeoutFieldNumber;
const int BlacklistEntry::kUniqueIDFieldNumber;
#endif  // !_MSC_VER

BlacklistEntry::BlacklistEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlacklistEntry::InitAsDefaultInstance() {
}

BlacklistEntry::BlacklistEntry(const BlacklistEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlacklistEntry::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minrf_ = -1;
  maxrf_ = -1;
  scrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timeout_ = -1;
  uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlacklistEntry::~BlacklistEntry() {
  SharedDtor();
}

void BlacklistEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (scrypt_ != &::google::protobuf::internal::kEmptyString) {
    delete scrypt_;
  }
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (this != default_instance_) {
  }
}

void BlacklistEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlacklistEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlacklistEntry_descriptor_;
}

const BlacklistEntry& BlacklistEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

BlacklistEntry* BlacklistEntry::default_instance_ = NULL;

BlacklistEntry* BlacklistEntry::New() const {
  return new BlacklistEntry;
}

void BlacklistEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    minrf_ = -1;
    maxrf_ = -1;
    if (has_scrypt()) {
      if (scrypt_ != &::google::protobuf::internal::kEmptyString) {
        scrypt_->clear();
      }
    }
    timeout_ = -1;
    if (has_uniqueid()) {
      if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
        uniqueid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlacklistEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_minRF;
        break;
      }

      // optional double minRF = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minrf_)));
          set_has_minrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_maxRF;
        break;
      }

      // optional double maxRF = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxrf_)));
          set_has_maxrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_scrypt;
        break;
      }

      // optional string scrypt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scrypt().data(), this->scrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_timeout;
        break;
      }

      // optional float timeout = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_uniqueID;
        break;
      }

      // optional string uniqueID = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqueID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqueid().data(), this->uniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlacklistEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional double minRF = 2 [default = -1];
  if (has_minrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->minrf(), output);
  }

  // optional double maxRF = 3 [default = -1];
  if (has_maxrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->maxrf(), output);
  }

  // optional string scrypt = 4;
  if (has_scrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scrypt().data(), this->scrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->scrypt(), output);
  }

  // optional float timeout = 5 [default = -1];
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->timeout(), output);
  }

  // optional string uniqueID = 6 [default = ""];
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->uniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlacklistEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional double minRF = 2 [default = -1];
  if (has_minrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->minrf(), target);
  }

  // optional double maxRF = 3 [default = -1];
  if (has_maxrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->maxrf(), target);
  }

  // optional string scrypt = 4;
  if (has_scrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scrypt().data(), this->scrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->scrypt(), target);
  }

  // optional float timeout = 5 [default = -1];
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->timeout(), target);
  }

  // optional string uniqueID = 6 [default = ""];
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->uniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlacklistEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double minRF = 2 [default = -1];
    if (has_minrf()) {
      total_size += 1 + 8;
    }

    // optional double maxRF = 3 [default = -1];
    if (has_maxrf()) {
      total_size += 1 + 8;
    }

    // optional string scrypt = 4;
    if (has_scrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scrypt());
    }

    // optional float timeout = 5 [default = -1];
    if (has_timeout()) {
      total_size += 1 + 4;
    }

    // optional string uniqueID = 6 [default = ""];
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlacklistEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlacklistEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlacklistEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlacklistEntry::MergeFrom(const BlacklistEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_minrf()) {
      set_minrf(from.minrf());
    }
    if (from.has_maxrf()) {
      set_maxrf(from.maxrf());
    }
    if (from.has_scrypt()) {
      set_scrypt(from.scrypt());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlacklistEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlacklistEntry::CopyFrom(const BlacklistEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlacklistEntry::IsInitialized() const {

  return true;
}

void BlacklistEntry::Swap(BlacklistEntry* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(minrf_, other->minrf_);
    std::swap(maxrf_, other->maxrf_);
    std::swap(scrypt_, other->scrypt_);
    std::swap(timeout_, other->timeout_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlacklistEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlacklistEntry_descriptor_;
  metadata.reflection = BlacklistEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExtraForkChannel::kChannelIDFieldNumber;
const int ExtraForkChannel::kInputPortFieldNumber;
const int ExtraForkChannel::kOutputPortFieldNumber;
const int ExtraForkChannel::kVideoPortFieldNumber;
const int ExtraForkChannel::kLaunchOnStartFieldNumber;
#endif  // !_MSC_VER

ExtraForkChannel::ExtraForkChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtraForkChannel::InitAsDefaultInstance() {
}

ExtraForkChannel::ExtraForkChannel(const ExtraForkChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraForkChannel::SharedCtor() {
  _cached_size_ = 0;
  channelid_ = 0;
  inputport_ = 0;
  outputport_ = 0;
  videoport_ = 0;
  launch_on_start_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraForkChannel::~ExtraForkChannel() {
  SharedDtor();
}

void ExtraForkChannel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExtraForkChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraForkChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraForkChannel_descriptor_;
}

const ExtraForkChannel& ExtraForkChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

ExtraForkChannel* ExtraForkChannel::default_instance_ = NULL;

ExtraForkChannel* ExtraForkChannel::New() const {
  return new ExtraForkChannel;
}

void ExtraForkChannel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channelid_ = 0;
    inputport_ = 0;
    outputport_ = 0;
    videoport_ = 0;
    launch_on_start_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraForkChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inputPort;
        break;
      }

      // optional int32 inputPort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inputport_)));
          set_has_inputport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outputPort;
        break;
      }

      // optional int32 outputPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outputPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outputport_)));
          set_has_outputport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_videoPort;
        break;
      }

      // optional int32 videoPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_videoPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoport_)));
          set_has_videoport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_launch_on_start;
        break;
      }

      // optional int32 launch_on_start = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_launch_on_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &launch_on_start_)));
          set_has_launch_on_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraForkChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 channelID = 1;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channelid(), output);
  }

  // optional int32 inputPort = 2;
  if (has_inputport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inputport(), output);
  }

  // optional int32 outputPort = 3;
  if (has_outputport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->outputport(), output);
  }

  // optional int32 videoPort = 4;
  if (has_videoport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->videoport(), output);
  }

  // optional int32 launch_on_start = 5;
  if (has_launch_on_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->launch_on_start(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtraForkChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 channelID = 1;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channelid(), target);
  }

  // optional int32 inputPort = 2;
  if (has_inputport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inputport(), target);
  }

  // optional int32 outputPort = 3;
  if (has_outputport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->outputport(), target);
  }

  // optional int32 videoPort = 4;
  if (has_videoport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->videoport(), target);
  }

  // optional int32 launch_on_start = 5;
  if (has_launch_on_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->launch_on_start(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtraForkChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channelID = 1;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelid());
    }

    // optional int32 inputPort = 2;
    if (has_inputport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inputport());
    }

    // optional int32 outputPort = 3;
    if (has_outputport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outputport());
    }

    // optional int32 videoPort = 4;
    if (has_videoport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videoport());
    }

    // optional int32 launch_on_start = 5;
    if (has_launch_on_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->launch_on_start());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraForkChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraForkChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraForkChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraForkChannel::MergeFrom(const ExtraForkChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_inputport()) {
      set_inputport(from.inputport());
    }
    if (from.has_outputport()) {
      set_outputport(from.outputport());
    }
    if (from.has_videoport()) {
      set_videoport(from.videoport());
    }
    if (from.has_launch_on_start()) {
      set_launch_on_start(from.launch_on_start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraForkChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraForkChannel::CopyFrom(const ExtraForkChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraForkChannel::IsInitialized() const {

  return true;
}

void ExtraForkChannel::Swap(ExtraForkChannel* other) {
  if (other != this) {
    std::swap(channelid_, other->channelid_);
    std::swap(inputport_, other->inputport_);
    std::swap(outputport_, other->outputport_);
    std::swap(videoport_, other->videoport_);
    std::swap(launch_on_start_, other->launch_on_start_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraForkChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraForkChannel_descriptor_;
  metadata.reflection = ExtraForkChannel_reflection_;
  return metadata;
}


// ===================================================================

::std::string* InterceptGoActive::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int InterceptGoActive::kMsgNameFieldNumber;
const int InterceptGoActive::kHostnameFieldNumber;
const int InterceptGoActive::kJ1970TimeFieldNumber;
const int InterceptGoActive::kUniqueIDFieldNumber;
const int InterceptGoActive::kJamFieldNumber;
#endif  // !_MSC_VER

InterceptGoActive::InterceptGoActive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InterceptGoActive::InitAsDefaultInstance() {
}

InterceptGoActive::InterceptGoActive(const InterceptGoActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InterceptGoActive::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  j1970time_ = 0;
  uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jam_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InterceptGoActive::~InterceptGoActive() {
  SharedDtor();
}

void InterceptGoActive::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (this != default_instance_) {
  }
}

void InterceptGoActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterceptGoActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InterceptGoActive_descriptor_;
}

const InterceptGoActive& InterceptGoActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

InterceptGoActive* InterceptGoActive::default_instance_ = NULL;

InterceptGoActive* InterceptGoActive::New() const {
  return new InterceptGoActive;
}

void InterceptGoActive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    j1970time_ = 0;
    if (has_uniqueid()) {
      if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
        uniqueid_->clear();
      }
    }
    jam_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InterceptGoActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "INTERCEPT_GO_ACTIVE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hostname;
        break;
      }

      // optional string hostname = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_j1970Time;
        break;
      }

      // optional double j1970Time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_j1970Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &j1970time_)));
          set_has_j1970time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uniqueID;
        break;
      }

      // optional string uniqueID = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqueID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqueid().data(), this->uniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_jam;
        break;
      }

      // optional bool jam = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &jam_)));
          set_has_jam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InterceptGoActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "INTERCEPT_GO_ACTIVE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string hostname = 2 [default = ""];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hostname(), output);
  }

  // optional double j1970Time = 3;
  if (has_j1970time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->j1970time(), output);
  }

  // optional string uniqueID = 4 [default = ""];
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uniqueid(), output);
  }

  // optional bool jam = 5 [default = false];
  if (has_jam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->jam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InterceptGoActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "INTERCEPT_GO_ACTIVE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string hostname = 2 [default = ""];
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // optional double j1970Time = 3;
  if (has_j1970time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->j1970time(), target);
  }

  // optional string uniqueID = 4 [default = ""];
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uniqueid(), target);
  }

  // optional bool jam = 5 [default = false];
  if (has_jam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->jam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InterceptGoActive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "INTERCEPT_GO_ACTIVE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string hostname = 2 [default = ""];
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional double j1970Time = 3;
    if (has_j1970time()) {
      total_size += 1 + 8;
    }

    // optional string uniqueID = 4 [default = ""];
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueid());
    }

    // optional bool jam = 5 [default = false];
    if (has_jam()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterceptGoActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InterceptGoActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InterceptGoActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InterceptGoActive::MergeFrom(const InterceptGoActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_j1970time()) {
      set_j1970time(from.j1970time());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_jam()) {
      set_jam(from.jam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InterceptGoActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterceptGoActive::CopyFrom(const InterceptGoActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterceptGoActive::IsInitialized() const {

  return true;
}

void InterceptGoActive::Swap(InterceptGoActive* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(hostname_, other->hostname_);
    std::swap(j1970time_, other->j1970time_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(jam_, other->jam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InterceptGoActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InterceptGoActive_descriptor_;
  metadata.reflection = InterceptGoActive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GeoTip::kPredSourceFieldNumber;
const int GeoTip::kTipIdFieldNumber;
#endif  // !_MSC_VER

GeoTip::GeoTip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeoTip::InitAsDefaultInstance() {
}

GeoTip::GeoTip(const GeoTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeoTip::SharedCtor() {
  _cached_size_ = 0;
  tip_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoTip::~GeoTip() {
  SharedDtor();
}

void GeoTip::SharedDtor() {
  if (tip_id_ != &::google::protobuf::internal::kEmptyString) {
    delete tip_id_;
  }
  if (this != default_instance_) {
  }
}

void GeoTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoTip_descriptor_;
}

const GeoTip& GeoTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

GeoTip* GeoTip::default_instance_ = NULL;

GeoTip* GeoTip::New() const {
  return new GeoTip;
}

void GeoTip::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_tip_id()) {
      if (tip_id_ != &::google::protobuf::internal::kEmptyString) {
        tip_id_->clear();
      }
    }
  }
  pred_source_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .falcon_common_msg.PreDSource pred_source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pred_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pred_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pred_source;
        if (input->ExpectTag(34)) goto parse_tip_id;
        break;
      }

      // optional string tip_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tip_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tip_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tip_id().data(), this->tip_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeoTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .falcon_common_msg.PreDSource pred_source = 1;
  for (int i = 0; i < this->pred_source_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pred_source(i), output);
  }

  // optional string tip_id = 4;
  if (has_tip_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tip_id().data(), this->tip_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tip_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeoTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .falcon_common_msg.PreDSource pred_source = 1;
  for (int i = 0; i < this->pred_source_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pred_source(i), target);
  }

  // optional string tip_id = 4;
  if (has_tip_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tip_id().data(), this->tip_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tip_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeoTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string tip_id = 4;
    if (has_tip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tip_id());
    }

  }
  // repeated .falcon_common_msg.PreDSource pred_source = 1;
  total_size += 1 * this->pred_source_size();
  for (int i = 0; i < this->pred_source_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pred_source(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoTip::MergeFrom(const GeoTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  pred_source_.MergeFrom(from.pred_source_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tip_id()) {
      set_tip_id(from.tip_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoTip::CopyFrom(const GeoTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoTip::IsInitialized() const {

  return true;
}

void GeoTip::Swap(GeoTip* other) {
  if (other != this) {
    pred_source_.Swap(&other->pred_source_);
    std::swap(tip_id_, other->tip_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoTip_descriptor_;
  metadata.reflection = GeoTip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PreDSource::kFilenameFieldNumber;
const int PreDSource::kHostnameFieldNumber;
const int PreDSource::kMetaDataFieldNumber;
#endif  // !_MSC_VER

PreDSource::PreDSource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PreDSource::InitAsDefaultInstance() {
  meta_data_ = const_cast< ::falcon_common_msg::MetaData*>(&::falcon_common_msg::MetaData::default_instance());
}

PreDSource::PreDSource(const PreDSource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PreDSource::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  meta_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreDSource::~PreDSource() {
  SharedDtor();
}

void PreDSource::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
    delete meta_data_;
  }
}

void PreDSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreDSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreDSource_descriptor_;
}

const PreDSource& PreDSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

PreDSource* PreDSource::default_instance_ = NULL;

PreDSource* PreDSource::New() const {
  return new PreDSource;
}

void PreDSource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_meta_data()) {
      if (meta_data_ != NULL) meta_data_->::falcon_common_msg::MetaData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PreDSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hostname;
        break;
      }

      // optional string hostname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_meta_data;
        break;
      }

      // optional .falcon_common_msg.MetaData meta_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meta_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PreDSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // optional string hostname = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hostname(), output);
  }

  // optional .falcon_common_msg.MetaData meta_data = 3;
  if (has_meta_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->meta_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PreDSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional string hostname = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // optional .falcon_common_msg.MetaData meta_data = 3;
  if (has_meta_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->meta_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PreDSource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string hostname = 2;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional .falcon_common_msg.MetaData meta_data = 3;
    if (has_meta_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->meta_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreDSource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PreDSource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PreDSource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PreDSource::MergeFrom(const PreDSource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_meta_data()) {
      mutable_meta_data()->::falcon_common_msg::MetaData::MergeFrom(from.meta_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PreDSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreDSource::CopyFrom(const PreDSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreDSource::IsInitialized() const {

  return true;
}

void PreDSource::Swap(PreDSource* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(hostname_, other->hostname_);
    std::swap(meta_data_, other->meta_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PreDSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PreDSource_descriptor_;
  metadata.reflection = PreDSource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetaData::kWholeSecFieldNumber;
const int MetaData::kFracSecFieldNumber;
const int MetaData::kDurationFieldNumber;
const int MetaData::kCenterFrequencyFieldNumber;
const int MetaData::kSampleRateFieldNumber;
const int MetaData::kBandwidthFieldNumber;
const int MetaData::kEltexFieldNumber;
const int MetaData::kSoiNumFieldNumber;
const int MetaData::kGlobalIdFieldNumber;
#endif  // !_MSC_VER

MetaData::MetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaData::InitAsDefaultInstance() {
}

MetaData::MetaData(const MetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaData::SharedCtor() {
  _cached_size_ = 0;
  wholesec_ = 0;
  fracsec_ = 0;
  duration_ = 0;
  centerfrequency_ = 0;
  samplerate_ = 0;
  bandwidth_ = 0;
  eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  soinum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaData::~MetaData() {
  SharedDtor();
}

void MetaData::SharedDtor() {
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    delete eltex_;
  }
  if (soinum_ != &::google::protobuf::internal::kEmptyString) {
    delete soinum_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void MetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaData_descriptor_;
}

const MetaData& MetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

MetaData* MetaData::default_instance_ = NULL;

MetaData* MetaData::New() const {
  return new MetaData;
}

void MetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wholesec_ = 0;
    fracsec_ = 0;
    duration_ = 0;
    centerfrequency_ = 0;
    samplerate_ = 0;
    bandwidth_ = 0;
    if (has_eltex()) {
      if (eltex_ != &::google::protobuf::internal::kEmptyString) {
        eltex_->clear();
      }
    }
    if (has_soinum()) {
      if (soinum_ != &::google::protobuf::internal::kEmptyString) {
        soinum_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double wholeSec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wholesec_)));
          set_has_wholesec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_fracSec;
        break;
      }

      // optional double fracSec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fracSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fracsec_)));
          set_has_fracsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_duration;
        break;
      }

      // optional double duration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_centerFrequency;
        break;
      }

      // optional double centerFrequency = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_centerFrequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerfrequency_)));
          set_has_centerfrequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_sampleRate;
        break;
      }

      // optional double sampleRate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sampleRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &samplerate_)));
          set_has_samplerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_bandwidth;
        break;
      }

      // optional double bandwidth = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_eltex;
        break;
      }

      // optional string eltex = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eltex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eltex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eltex().data(), this->eltex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_soiNum;
        break;
      }

      // optional string soiNum = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soiNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soinum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soinum().data(), this->soinum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_globalId;
        break;
      }

      // optional string globalId = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double wholeSec = 1;
  if (has_wholesec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->wholesec(), output);
  }

  // optional double fracSec = 2;
  if (has_fracsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fracsec(), output);
  }

  // optional double duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->duration(), output);
  }

  // optional double centerFrequency = 10;
  if (has_centerfrequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->centerfrequency(), output);
  }

  // optional double sampleRate = 11;
  if (has_samplerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->samplerate(), output);
  }

  // optional double bandwidth = 12;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->bandwidth(), output);
  }

  // optional string eltex = 20;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->eltex(), output);
  }

  // optional string soiNum = 21;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->soinum(), output);
  }

  // optional string globalId = 22;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double wholeSec = 1;
  if (has_wholesec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->wholesec(), target);
  }

  // optional double fracSec = 2;
  if (has_fracsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fracsec(), target);
  }

  // optional double duration = 3;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->duration(), target);
  }

  // optional double centerFrequency = 10;
  if (has_centerfrequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->centerfrequency(), target);
  }

  // optional double sampleRate = 11;
  if (has_samplerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->samplerate(), target);
  }

  // optional double bandwidth = 12;
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->bandwidth(), target);
  }

  // optional string eltex = 20;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->eltex(), target);
  }

  // optional string soiNum = 21;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->soinum(), target);
  }

  // optional string globalId = 22;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double wholeSec = 1;
    if (has_wholesec()) {
      total_size += 1 + 8;
    }

    // optional double fracSec = 2;
    if (has_fracsec()) {
      total_size += 1 + 8;
    }

    // optional double duration = 3;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional double centerFrequency = 10;
    if (has_centerfrequency()) {
      total_size += 1 + 8;
    }

    // optional double sampleRate = 11;
    if (has_samplerate()) {
      total_size += 1 + 8;
    }

    // optional double bandwidth = 12;
    if (has_bandwidth()) {
      total_size += 1 + 8;
    }

    // optional string eltex = 20;
    if (has_eltex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eltex());
    }

    // optional string soiNum = 21;
    if (has_soinum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soinum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string globalId = 22;
    if (has_globalid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaData::MergeFrom(const MetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wholesec()) {
      set_wholesec(from.wholesec());
    }
    if (from.has_fracsec()) {
      set_fracsec(from.fracsec());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_centerfrequency()) {
      set_centerfrequency(from.centerfrequency());
    }
    if (from.has_samplerate()) {
      set_samplerate(from.samplerate());
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
    if (from.has_eltex()) {
      set_eltex(from.eltex());
    }
    if (from.has_soinum()) {
      set_soinum(from.soinum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaData::CopyFrom(const MetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaData::IsInitialized() const {

  return true;
}

void MetaData::Swap(MetaData* other) {
  if (other != this) {
    std::swap(wholesec_, other->wholesec_);
    std::swap(fracsec_, other->fracsec_);
    std::swap(duration_, other->duration_);
    std::swap(centerfrequency_, other->centerfrequency_);
    std::swap(samplerate_, other->samplerate_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(eltex_, other->eltex_);
    std::swap(soinum_, other->soinum_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaData_descriptor_;
  metadata.reflection = MetaData_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GeoResult::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GeoResult::kMsgNameFieldNumber;
const int GeoResult::kHostnameFieldNumber;
const int GeoResult::kJ1970TimeFieldNumber;
const int GeoResult::kXFieldNumber;
const int GeoResult::kYFieldNumber;
const int GeoResult::kZFieldNumber;
const int GeoResult::kAltFieldNumber;
const int GeoResult::kLatFieldNumber;
const int GeoResult::kLonFieldNumber;
const int GeoResult::kSemiMajorFieldNumber;
const int GeoResult::kSemiMinorFieldNumber;
const int GeoResult::kOrientationFieldNumber;
const int GeoResult::kSoiFieldNumber;
const int GeoResult::kUniqueIDFieldNumber;
const int GeoResult::kChannelFieldNumber;
const int GeoResult::kEventIDFieldNumber;
const int GeoResult::kWpLatitudeFieldNumber;
const int GeoResult::kWpLongitudeFieldNumber;
const int GeoResult::kVelocityFieldNumber;
const int GeoResult::kBearingFieldNumber;
const int GeoResult::kSeqnumFieldNumber;
const int GeoResult::kValidFieldNumber;
const int GeoResult::kCepFieldNumber;
const int GeoResult::kFreqHzFieldNumber;
const int GeoResult::kBwHzFieldNumber;
const int GeoResult::kCombiningTypeFieldNumber;
const int GeoResult::kDiagnosticFieldNumber;
const int GeoResult::kQualifierFieldNumber;
const int GeoResult::kTipIdFieldNumber;
#endif  // !_MSC_VER

GeoResult::GeoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeoResult::InitAsDefaultInstance() {
}

GeoResult::GeoResult(const GeoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeoResult::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  j1970time_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  alt_ = 0;
  lat_ = 0;
  lon_ = 0;
  semimajor_ = 0;
  semiminor_ = 0;
  orientation_ = 0;
  soi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = 1;
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wplatitude_ = 0;
  wplongitude_ = 0;
  velocity_ = 0;
  bearing_ = 0;
  seqnum_ = 0;
  valid_ = false;
  cep_ = 0;
  freq_hz_ = 0;
  bw_hz_ = 0;
  combining_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  diagnostic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qualifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tip_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoResult::~GeoResult() {
  SharedDtor();
}

void GeoResult::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (soi_ != &::google::protobuf::internal::kEmptyString) {
    delete soi_;
  }
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (combining_type_ != &::google::protobuf::internal::kEmptyString) {
    delete combining_type_;
  }
  if (diagnostic_ != &::google::protobuf::internal::kEmptyString) {
    delete diagnostic_;
  }
  if (qualifier_ != &::google::protobuf::internal::kEmptyString) {
    delete qualifier_;
  }
  if (tip_id_ != &::google::protobuf::internal::kEmptyString) {
    delete tip_id_;
  }
  if (this != default_instance_) {
  }
}

void GeoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoResult_descriptor_;
}

const GeoResult& GeoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

GeoResult* GeoResult::default_instance_ = NULL;

GeoResult* GeoResult::New() const {
  return new GeoResult;
}

void GeoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    j1970time_ = 0;
    x_ = 0;
    y_ = 0;
    z_ = 0;
    alt_ = 0;
    lat_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lon_ = 0;
    semimajor_ = 0;
    semiminor_ = 0;
    orientation_ = 0;
    if (has_soi()) {
      if (soi_ != &::google::protobuf::internal::kEmptyString) {
        soi_->clear();
      }
    }
    if (has_uniqueid()) {
      if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
        uniqueid_->clear();
      }
    }
    channel_ = 1;
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    wplatitude_ = 0;
    wplongitude_ = 0;
    velocity_ = 0;
    bearing_ = 0;
    seqnum_ = 0;
    valid_ = false;
    cep_ = 0;
    freq_hz_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    bw_hz_ = 0;
    if (has_combining_type()) {
      if (combining_type_ != &::google::protobuf::internal::kEmptyString) {
        combining_type_->clear();
      }
    }
    if (has_diagnostic()) {
      if (diagnostic_ != &::google::protobuf::internal::kEmptyString) {
        diagnostic_->clear();
      }
    }
    if (has_qualifier()) {
      if (qualifier_ != &::google::protobuf::internal::kEmptyString) {
        qualifier_->clear();
      }
    }
    if (has_tip_id()) {
      if (tip_id_ != &::google::protobuf::internal::kEmptyString) {
        tip_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GEO_RESULT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hostname;
        break;
      }

      // optional string hostname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_j1970Time;
        break;
      }

      // optional double j1970Time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_j1970Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &j1970time_)));
          set_has_j1970time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_x;
        break;
      }

      // optional double x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_y;
        break;
      }

      // optional double y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_z;
        break;
      }

      // optional double z = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_alt;
        break;
      }

      // optional double alt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_lat;
        break;
      }

      // optional double lat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_lon;
        break;
      }

      // optional double lon = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_semiMajor;
        break;
      }

      // optional double semiMajor = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_semiMajor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &semimajor_)));
          set_has_semimajor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_semiMinor;
        break;
      }

      // optional double semiMinor = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_semiMinor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &semiminor_)));
          set_has_semiminor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_orientation;
        break;
      }

      // optional double orientation = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_soi;
        break;
      }

      // optional string soi = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soi().data(), this->soi().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_uniqueID;
        break;
      }

      // optional string uniqueID = 14 [default = ""];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqueID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqueid().data(), this->uniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_channel;
        break;
      }

      // optional int32 channel = 15 [default = 1];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_eventID;
        break;
      }

      // optional string eventID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_wpLatitude;
        break;
      }

      // optional float wpLatitude = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wpLatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wplatitude_)));
          set_has_wplatitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_wpLongitude;
        break;
      }

      // optional float wpLongitude = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wpLongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wplongitude_)));
          set_has_wplongitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_velocity;
        break;
      }

      // optional float velocity = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_bearing;
        break;
      }

      // optional float bearing = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bearing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bearing_)));
          set_has_bearing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_seqnum;
        break;
      }

      // optional float seqnum = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_valid;
        break;
      }

      // optional bool valid = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_cep;
        break;
      }

      // optional double cep = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cep_)));
          set_has_cep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_freq_hz;
        break;
      }

      // optional double freq_hz = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freq_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freq_hz_)));
          set_has_freq_hz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_bw_hz;
        break;
      }

      // optional double bw_hz = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bw_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bw_hz_)));
          set_has_bw_hz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_combining_type;
        break;
      }

      // optional string combining_type = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_combining_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_combining_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->combining_type().data(), this->combining_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_diagnostic;
        break;
      }

      // optional string diagnostic = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diagnostic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnostic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->diagnostic().data(), this->diagnostic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_qualifier;
        break;
      }

      // optional string qualifier = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qualifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qualifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qualifier().data(), this->qualifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_tip_id;
        break;
      }

      // optional string tip_id = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tip_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tip_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tip_id().data(), this->tip_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GEO_RESULT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string hostname = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hostname(), output);
  }

  // optional double j1970Time = 3;
  if (has_j1970time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->j1970time(), output);
  }

  // optional double x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x(), output);
  }

  // optional double y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y(), output);
  }

  // optional double z = 6;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->z(), output);
  }

  // optional double alt = 7;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->alt(), output);
  }

  // optional double lat = 8;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->lat(), output);
  }

  // optional double lon = 9;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->lon(), output);
  }

  // optional double semiMajor = 10;
  if (has_semimajor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->semimajor(), output);
  }

  // optional double semiMinor = 11;
  if (has_semiminor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->semiminor(), output);
  }

  // optional double orientation = 12;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->orientation(), output);
  }

  // optional string soi = 13;
  if (has_soi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soi().data(), this->soi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->soi(), output);
  }

  // optional string uniqueID = 14 [default = ""];
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->uniqueid(), output);
  }

  // optional int32 channel = 15 [default = 1];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->channel(), output);
  }

  // optional string eventID = 16;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->eventid(), output);
  }

  // optional float wpLatitude = 17;
  if (has_wplatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->wplatitude(), output);
  }

  // optional float wpLongitude = 18;
  if (has_wplongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->wplongitude(), output);
  }

  // optional float velocity = 19;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->velocity(), output);
  }

  // optional float bearing = 20;
  if (has_bearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->bearing(), output);
  }

  // optional float seqnum = 21;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->seqnum(), output);
  }

  // optional bool valid = 26;
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->valid(), output);
  }

  // optional double cep = 27;
  if (has_cep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->cep(), output);
  }

  // optional double freq_hz = 28;
  if (has_freq_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->freq_hz(), output);
  }

  // optional double bw_hz = 29;
  if (has_bw_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->bw_hz(), output);
  }

  // optional string combining_type = 30;
  if (has_combining_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->combining_type().data(), this->combining_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->combining_type(), output);
  }

  // optional string diagnostic = 31;
  if (has_diagnostic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diagnostic().data(), this->diagnostic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->diagnostic(), output);
  }

  // optional string qualifier = 32;
  if (has_qualifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qualifier().data(), this->qualifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->qualifier(), output);
  }

  // optional string tip_id = 33;
  if (has_tip_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tip_id().data(), this->tip_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->tip_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GEO_RESULT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string hostname = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // optional double j1970Time = 3;
  if (has_j1970time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->j1970time(), target);
  }

  // optional double x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x(), target);
  }

  // optional double y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y(), target);
  }

  // optional double z = 6;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->z(), target);
  }

  // optional double alt = 7;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->alt(), target);
  }

  // optional double lat = 8;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->lat(), target);
  }

  // optional double lon = 9;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->lon(), target);
  }

  // optional double semiMajor = 10;
  if (has_semimajor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->semimajor(), target);
  }

  // optional double semiMinor = 11;
  if (has_semiminor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->semiminor(), target);
  }

  // optional double orientation = 12;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->orientation(), target);
  }

  // optional string soi = 13;
  if (has_soi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soi().data(), this->soi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->soi(), target);
  }

  // optional string uniqueID = 14 [default = ""];
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->uniqueid(), target);
  }

  // optional int32 channel = 15 [default = 1];
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->channel(), target);
  }

  // optional string eventID = 16;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->eventid(), target);
  }

  // optional float wpLatitude = 17;
  if (has_wplatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->wplatitude(), target);
  }

  // optional float wpLongitude = 18;
  if (has_wplongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->wplongitude(), target);
  }

  // optional float velocity = 19;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->velocity(), target);
  }

  // optional float bearing = 20;
  if (has_bearing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->bearing(), target);
  }

  // optional float seqnum = 21;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->seqnum(), target);
  }

  // optional bool valid = 26;
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->valid(), target);
  }

  // optional double cep = 27;
  if (has_cep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->cep(), target);
  }

  // optional double freq_hz = 28;
  if (has_freq_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->freq_hz(), target);
  }

  // optional double bw_hz = 29;
  if (has_bw_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->bw_hz(), target);
  }

  // optional string combining_type = 30;
  if (has_combining_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->combining_type().data(), this->combining_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->combining_type(), target);
  }

  // optional string diagnostic = 31;
  if (has_diagnostic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diagnostic().data(), this->diagnostic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->diagnostic(), target);
  }

  // optional string qualifier = 32;
  if (has_qualifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qualifier().data(), this->qualifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->qualifier(), target);
  }

  // optional string tip_id = 33;
  if (has_tip_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tip_id().data(), this->tip_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->tip_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeoResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GEO_RESULT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string hostname = 2;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional double j1970Time = 3;
    if (has_j1970time()) {
      total_size += 1 + 8;
    }

    // optional double x = 4;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 5;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 6;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double alt = 7;
    if (has_alt()) {
      total_size += 1 + 8;
    }

    // optional double lat = 8;
    if (has_lat()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double lon = 9;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // optional double semiMajor = 10;
    if (has_semimajor()) {
      total_size += 1 + 8;
    }

    // optional double semiMinor = 11;
    if (has_semiminor()) {
      total_size += 1 + 8;
    }

    // optional double orientation = 12;
    if (has_orientation()) {
      total_size += 1 + 8;
    }

    // optional string soi = 13;
    if (has_soi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soi());
    }

    // optional string uniqueID = 14 [default = ""];
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueid());
    }

    // optional int32 channel = 15 [default = 1];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional string eventID = 16;
    if (has_eventid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float wpLatitude = 17;
    if (has_wplatitude()) {
      total_size += 2 + 4;
    }

    // optional float wpLongitude = 18;
    if (has_wplongitude()) {
      total_size += 2 + 4;
    }

    // optional float velocity = 19;
    if (has_velocity()) {
      total_size += 2 + 4;
    }

    // optional float bearing = 20;
    if (has_bearing()) {
      total_size += 2 + 4;
    }

    // optional float seqnum = 21;
    if (has_seqnum()) {
      total_size += 2 + 4;
    }

    // optional bool valid = 26;
    if (has_valid()) {
      total_size += 2 + 1;
    }

    // optional double cep = 27;
    if (has_cep()) {
      total_size += 2 + 8;
    }

    // optional double freq_hz = 28;
    if (has_freq_hz()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional double bw_hz = 29;
    if (has_bw_hz()) {
      total_size += 2 + 8;
    }

    // optional string combining_type = 30;
    if (has_combining_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->combining_type());
    }

    // optional string diagnostic = 31;
    if (has_diagnostic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->diagnostic());
    }

    // optional string qualifier = 32;
    if (has_qualifier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qualifier());
    }

    // optional string tip_id = 33;
    if (has_tip_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tip_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoResult::MergeFrom(const GeoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_j1970time()) {
      set_j1970time(from.j1970time());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_semimajor()) {
      set_semimajor(from.semimajor());
    }
    if (from.has_semiminor()) {
      set_semiminor(from.semiminor());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_soi()) {
      set_soi(from.soi());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_wplatitude()) {
      set_wplatitude(from.wplatitude());
    }
    if (from.has_wplongitude()) {
      set_wplongitude(from.wplongitude());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_bearing()) {
      set_bearing(from.bearing());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
    if (from.has_valid()) {
      set_valid(from.valid());
    }
    if (from.has_cep()) {
      set_cep(from.cep());
    }
    if (from.has_freq_hz()) {
      set_freq_hz(from.freq_hz());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_bw_hz()) {
      set_bw_hz(from.bw_hz());
    }
    if (from.has_combining_type()) {
      set_combining_type(from.combining_type());
    }
    if (from.has_diagnostic()) {
      set_diagnostic(from.diagnostic());
    }
    if (from.has_qualifier()) {
      set_qualifier(from.qualifier());
    }
    if (from.has_tip_id()) {
      set_tip_id(from.tip_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoResult::CopyFrom(const GeoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoResult::IsInitialized() const {

  return true;
}

void GeoResult::Swap(GeoResult* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(hostname_, other->hostname_);
    std::swap(j1970time_, other->j1970time_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(alt_, other->alt_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(semimajor_, other->semimajor_);
    std::swap(semiminor_, other->semiminor_);
    std::swap(orientation_, other->orientation_);
    std::swap(soi_, other->soi_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(channel_, other->channel_);
    std::swap(eventid_, other->eventid_);
    std::swap(wplatitude_, other->wplatitude_);
    std::swap(wplongitude_, other->wplongitude_);
    std::swap(velocity_, other->velocity_);
    std::swap(bearing_, other->bearing_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(valid_, other->valid_);
    std::swap(cep_, other->cep_);
    std::swap(freq_hz_, other->freq_hz_);
    std::swap(bw_hz_, other->bw_hz_);
    std::swap(combining_type_, other->combining_type_);
    std::swap(diagnostic_, other->diagnostic_);
    std::swap(qualifier_, other->qualifier_);
    std::swap(tip_id_, other->tip_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoResult_descriptor_;
  metadata.reflection = GeoResult_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ClipRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ClipRequest::kMsgNameFieldNumber;
const int ClipRequest::kTimeWholeFieldNumber;
const int ClipRequest::kTimeFractionalFieldNumber;
const int ClipRequest::kDurationFieldNumber;
const int ClipRequest::kCenterFrequencyFieldNumber;
const int ClipRequest::kFreqOffsetFieldNumber;
const int ClipRequest::kSampleRateFieldNumber;
const int ClipRequest::kBandwidthFieldNumber;
const int ClipRequest::kSoiNumFieldNumber;
const int ClipRequest::kGlobalIdFieldNumber;
const int ClipRequest::kIdNumberFieldNumber;
const int ClipRequest::kSensorNameFieldNumber;
#endif  // !_MSC_VER

ClipRequest::ClipRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClipRequest::InitAsDefaultInstance() {
}

ClipRequest::ClipRequest(const ClipRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClipRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  timewhole_ = 0;
  timefractional_ = 0;
  duration_ = 0;
  centerfrequency_ = 0;
  freqoffset_ = 0;
  samplerate_ = 0;
  bandwidth_ = 0;
  soinum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idnumber_ = GOOGLE_LONGLONG(0);
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClipRequest::~ClipRequest() {
  SharedDtor();
}

void ClipRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (soinum_ != &::google::protobuf::internal::kEmptyString) {
    delete soinum_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (this != default_instance_) {
  }
}

void ClipRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClipRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClipRequest_descriptor_;
}

const ClipRequest& ClipRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

ClipRequest* ClipRequest::default_instance_ = NULL;

ClipRequest* ClipRequest::New() const {
  return new ClipRequest;
}

void ClipRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    timewhole_ = 0;
    timefractional_ = 0;
    duration_ = 0;
    centerfrequency_ = 0;
    freqoffset_ = 0;
    samplerate_ = 0;
    bandwidth_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_soinum()) {
      if (soinum_ != &::google::protobuf::internal::kEmptyString) {
        soinum_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    idnumber_ = GOOGLE_LONGLONG(0);
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClipRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "CLIPREQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_timeWhole;
        break;
      }

      // optional double timeWhole = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timeWhole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timewhole_)));
          set_has_timewhole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_timeFractional;
        break;
      }

      // optional double timeFractional = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timeFractional:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timefractional_)));
          set_has_timefractional();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_duration;
        break;
      }

      // optional double duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_centerFrequency;
        break;
      }

      // optional double centerFrequency = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_centerFrequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerfrequency_)));
          set_has_centerfrequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_freqOffset;
        break;
      }

      // optional double freqOffset = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freqOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freqoffset_)));
          set_has_freqoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_sampleRate;
        break;
      }

      // optional double sampleRate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sampleRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &samplerate_)));
          set_has_samplerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_bandwidth;
        break;
      }

      // optional double bandwidth = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_soiNum;
        break;
      }

      // optional string soiNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soiNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soinum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soinum().data(), this->soinum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_globalId;
        break;
      }

      // optional string globalId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_idNumber;
        break;
      }

      // optional int64 idNumber = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &idnumber_)));
          set_has_idnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClipRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "CLIPREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double timeWhole = 2;
  if (has_timewhole()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timewhole(), output);
  }

  // optional double timeFractional = 3;
  if (has_timefractional()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->timefractional(), output);
  }

  // optional double duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->duration(), output);
  }

  // optional double centerFrequency = 5;
  if (has_centerfrequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->centerfrequency(), output);
  }

  // optional double freqOffset = 6;
  if (has_freqoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->freqoffset(), output);
  }

  // optional double sampleRate = 7;
  if (has_samplerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->samplerate(), output);
  }

  // optional double bandwidth = 8;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->bandwidth(), output);
  }

  // optional string soiNum = 9;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->soinum(), output);
  }

  // optional string globalId = 10;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->globalid(), output);
  }

  // optional int64 idNumber = 11;
  if (has_idnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->idnumber(), output);
  }

  // optional string sensorName = 12;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->sensorname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClipRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "CLIPREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double timeWhole = 2;
  if (has_timewhole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timewhole(), target);
  }

  // optional double timeFractional = 3;
  if (has_timefractional()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->timefractional(), target);
  }

  // optional double duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->duration(), target);
  }

  // optional double centerFrequency = 5;
  if (has_centerfrequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->centerfrequency(), target);
  }

  // optional double freqOffset = 6;
  if (has_freqoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->freqoffset(), target);
  }

  // optional double sampleRate = 7;
  if (has_samplerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->samplerate(), target);
  }

  // optional double bandwidth = 8;
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->bandwidth(), target);
  }

  // optional string soiNum = 9;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->soinum(), target);
  }

  // optional string globalId = 10;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->globalid(), target);
  }

  // optional int64 idNumber = 11;
  if (has_idnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->idnumber(), target);
  }

  // optional string sensorName = 12;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->sensorname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClipRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "CLIPREQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double timeWhole = 2;
    if (has_timewhole()) {
      total_size += 1 + 8;
    }

    // optional double timeFractional = 3;
    if (has_timefractional()) {
      total_size += 1 + 8;
    }

    // optional double duration = 4;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional double centerFrequency = 5;
    if (has_centerfrequency()) {
      total_size += 1 + 8;
    }

    // optional double freqOffset = 6;
    if (has_freqoffset()) {
      total_size += 1 + 8;
    }

    // optional double sampleRate = 7;
    if (has_samplerate()) {
      total_size += 1 + 8;
    }

    // optional double bandwidth = 8;
    if (has_bandwidth()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string soiNum = 9;
    if (has_soinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soinum());
    }

    // optional string globalId = 10;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional int64 idNumber = 11;
    if (has_idnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->idnumber());
    }

    // optional string sensorName = 12;
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClipRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClipRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClipRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClipRequest::MergeFrom(const ClipRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_timewhole()) {
      set_timewhole(from.timewhole());
    }
    if (from.has_timefractional()) {
      set_timefractional(from.timefractional());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_centerfrequency()) {
      set_centerfrequency(from.centerfrequency());
    }
    if (from.has_freqoffset()) {
      set_freqoffset(from.freqoffset());
    }
    if (from.has_samplerate()) {
      set_samplerate(from.samplerate());
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_soinum()) {
      set_soinum(from.soinum());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_idnumber()) {
      set_idnumber(from.idnumber());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClipRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClipRequest::CopyFrom(const ClipRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipRequest::IsInitialized() const {

  return true;
}

void ClipRequest::Swap(ClipRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(timewhole_, other->timewhole_);
    std::swap(timefractional_, other->timefractional_);
    std::swap(duration_, other->duration_);
    std::swap(centerfrequency_, other->centerfrequency_);
    std::swap(freqoffset_, other->freqoffset_);
    std::swap(samplerate_, other->samplerate_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(soinum_, other->soinum_);
    std::swap(globalid_, other->globalid_);
    std::swap(idnumber_, other->idnumber_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClipRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClipRequest_descriptor_;
  metadata.reflection = ClipRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ClipResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ClipResponse::kMsgNameFieldNumber;
const int ClipResponse::kGeoTipFieldNumber;
const int ClipResponse::kIdNumberFieldNumber;
#endif  // !_MSC_VER

ClipResponse::ClipResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClipResponse::InitAsDefaultInstance() {
  geotip_ = const_cast< ::falcon_common_msg::GeoTip*>(&::falcon_common_msg::GeoTip::default_instance());
}

ClipResponse::ClipResponse(const ClipResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClipResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  geotip_ = NULL;
  idnumber_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClipResponse::~ClipResponse() {
  SharedDtor();
}

void ClipResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete geotip_;
  }
}

void ClipResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClipResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClipResponse_descriptor_;
}

const ClipResponse& ClipResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

ClipResponse* ClipResponse::default_instance_ = NULL;

ClipResponse* ClipResponse::New() const {
  return new ClipResponse;
}

void ClipResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_geotip()) {
      if (geotip_ != NULL) geotip_->::falcon_common_msg::GeoTip::Clear();
    }
    idnumber_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClipResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "CLIPRESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_geoTip;
        break;
      }

      // optional .falcon_common_msg.GeoTip geoTip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geoTip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geotip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_idNumber;
        break;
      }

      // optional int64 idNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &idnumber_)));
          set_has_idnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClipResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "CLIPRESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .falcon_common_msg.GeoTip geoTip = 2;
  if (has_geotip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->geotip(), output);
  }

  // optional int64 idNumber = 3;
  if (has_idnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->idnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClipResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "CLIPRESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .falcon_common_msg.GeoTip geoTip = 2;
  if (has_geotip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->geotip(), target);
  }

  // optional int64 idNumber = 3;
  if (has_idnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->idnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClipResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "CLIPRESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .falcon_common_msg.GeoTip geoTip = 2;
    if (has_geotip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geotip());
    }

    // optional int64 idNumber = 3;
    if (has_idnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->idnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClipResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClipResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClipResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClipResponse::MergeFrom(const ClipResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_geotip()) {
      mutable_geotip()->::falcon_common_msg::GeoTip::MergeFrom(from.geotip());
    }
    if (from.has_idnumber()) {
      set_idnumber(from.idnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClipResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClipResponse::CopyFrom(const ClipResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipResponse::IsInitialized() const {

  return true;
}

void ClipResponse::Swap(ClipResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(geotip_, other->geotip_);
    std::swap(idnumber_, other->idnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClipResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClipResponse_descriptor_;
  metadata.reflection = ClipResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* DetectionTip::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int DetectionTip::kMsgNameFieldNumber;
const int DetectionTip::kDetIdFieldNumber;
const int DetectionTip::kSensorIdFieldNumber;
const int DetectionTip::kHasPredFieldNumber;
const int DetectionTip::kFileLocationFieldNumber;
const int DetectionTip::kStartTimeWholeFieldNumber;
const int DetectionTip::kStartTimeFracFieldNumber;
const int DetectionTip::kDurationMillisecFieldNumber;
const int DetectionTip::kCenterTuneFreqHzFieldNumber;
const int DetectionTip::kBandwidthHzFieldNumber;
const int DetectionTip::kHopsFieldNumber;
const int DetectionTip::kBurstsFieldNumber;
#endif  // !_MSC_VER

DetectionTip::DetectionTip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DetectionTip::InitAsDefaultInstance() {
}

DetectionTip::DetectionTip(const DetectionTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DetectionTip::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  det_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sensor_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  has_pred_ = false;
  file_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_time_whole_ = 0;
  start_time_frac_ = 0;
  duration_millisec_ = 0;
  center_tune_freq_hz_ = 0;
  bandwidth_hz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectionTip::~DetectionTip() {
  SharedDtor();
}

void DetectionTip::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (det_id_ != &::google::protobuf::internal::kEmptyString) {
    delete det_id_;
  }
  if (sensor_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sensor_id_;
  }
  if (file_location_ != &::google::protobuf::internal::kEmptyString) {
    delete file_location_;
  }
  if (this != default_instance_) {
  }
}

void DetectionTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectionTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectionTip_descriptor_;
}

const DetectionTip& DetectionTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

DetectionTip* DetectionTip::default_instance_ = NULL;

DetectionTip* DetectionTip::New() const {
  return new DetectionTip;
}

void DetectionTip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_det_id()) {
      if (det_id_ != &::google::protobuf::internal::kEmptyString) {
        det_id_->clear();
      }
    }
    if (has_sensor_id()) {
      if (sensor_id_ != &::google::protobuf::internal::kEmptyString) {
        sensor_id_->clear();
      }
    }
    has_pred_ = false;
    if (has_file_location()) {
      if (file_location_ != &::google::protobuf::internal::kEmptyString) {
        file_location_->clear();
      }
    }
    start_time_whole_ = 0;
    start_time_frac_ = 0;
    duration_millisec_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    center_tune_freq_hz_ = 0;
    bandwidth_hz_ = 0;
  }
  hops_.Clear();
  bursts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectionTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DETECTIONTIP"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_det_id;
        break;
      }

      // optional string det_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_det_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->det_id().data(), this->det_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sensor_id;
        break;
      }

      // optional string sensor_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensor_id().data(), this->sensor_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_has_pred;
        break;
      }

      // optional bool has_pred = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_pred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_pred_)));
          set_has_has_pred();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_file_location;
        break;
      }

      // optional string file_location = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_location().data(), this->file_location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_start_time_whole;
        break;
      }

      // optional double start_time_whole = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start_time_whole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_whole_)));
          set_has_start_time_whole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_start_time_frac;
        break;
      }

      // optional double start_time_frac = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start_time_frac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_frac_)));
          set_has_start_time_frac();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_duration_millisec;
        break;
      }

      // optional double duration_millisec = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration_millisec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_millisec_)));
          set_has_duration_millisec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_center_tune_freq_hz;
        break;
      }

      // optional double center_tune_freq_hz = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_center_tune_freq_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &center_tune_freq_hz_)));
          set_has_center_tune_freq_hz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_bandwidth_hz;
        break;
      }

      // optional double bandwidth_hz = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bandwidth_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bandwidth_hz_)));
          set_has_bandwidth_hz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_hops;
        break;
      }

      // repeated .falcon_common_msg.Hop hops = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_hops;
        if (input->ExpectTag(98)) goto parse_bursts;
        break;
      }

      // repeated .falcon_common_msg.Burst bursts = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bursts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bursts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_bursts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DetectionTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DETECTIONTIP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string det_id = 2;
  if (has_det_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->det_id().data(), this->det_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->det_id(), output);
  }

  // optional string sensor_id = 3;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensor_id().data(), this->sensor_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sensor_id(), output);
  }

  // optional bool has_pred = 4;
  if (has_has_pred()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_pred(), output);
  }

  // optional string file_location = 5;
  if (has_file_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_location().data(), this->file_location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->file_location(), output);
  }

  // optional double start_time_whole = 6;
  if (has_start_time_whole()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->start_time_whole(), output);
  }

  // optional double start_time_frac = 7;
  if (has_start_time_frac()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->start_time_frac(), output);
  }

  // optional double duration_millisec = 8;
  if (has_duration_millisec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->duration_millisec(), output);
  }

  // optional double center_tune_freq_hz = 9;
  if (has_center_tune_freq_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->center_tune_freq_hz(), output);
  }

  // optional double bandwidth_hz = 10;
  if (has_bandwidth_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->bandwidth_hz(), output);
  }

  // repeated .falcon_common_msg.Hop hops = 11;
  for (int i = 0; i < this->hops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->hops(i), output);
  }

  // repeated .falcon_common_msg.Burst bursts = 12;
  for (int i = 0; i < this->bursts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->bursts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DetectionTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DETECTIONTIP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string det_id = 2;
  if (has_det_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->det_id().data(), this->det_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->det_id(), target);
  }

  // optional string sensor_id = 3;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensor_id().data(), this->sensor_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sensor_id(), target);
  }

  // optional bool has_pred = 4;
  if (has_has_pred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->has_pred(), target);
  }

  // optional string file_location = 5;
  if (has_file_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_location().data(), this->file_location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->file_location(), target);
  }

  // optional double start_time_whole = 6;
  if (has_start_time_whole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->start_time_whole(), target);
  }

  // optional double start_time_frac = 7;
  if (has_start_time_frac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->start_time_frac(), target);
  }

  // optional double duration_millisec = 8;
  if (has_duration_millisec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->duration_millisec(), target);
  }

  // optional double center_tune_freq_hz = 9;
  if (has_center_tune_freq_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->center_tune_freq_hz(), target);
  }

  // optional double bandwidth_hz = 10;
  if (has_bandwidth_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->bandwidth_hz(), target);
  }

  // repeated .falcon_common_msg.Hop hops = 11;
  for (int i = 0; i < this->hops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->hops(i), target);
  }

  // repeated .falcon_common_msg.Burst bursts = 12;
  for (int i = 0; i < this->bursts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->bursts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DetectionTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DETECTIONTIP"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string det_id = 2;
    if (has_det_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det_id());
    }

    // optional string sensor_id = 3;
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensor_id());
    }

    // optional bool has_pred = 4;
    if (has_has_pred()) {
      total_size += 1 + 1;
    }

    // optional string file_location = 5;
    if (has_file_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_location());
    }

    // optional double start_time_whole = 6;
    if (has_start_time_whole()) {
      total_size += 1 + 8;
    }

    // optional double start_time_frac = 7;
    if (has_start_time_frac()) {
      total_size += 1 + 8;
    }

    // optional double duration_millisec = 8;
    if (has_duration_millisec()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double center_tune_freq_hz = 9;
    if (has_center_tune_freq_hz()) {
      total_size += 1 + 8;
    }

    // optional double bandwidth_hz = 10;
    if (has_bandwidth_hz()) {
      total_size += 1 + 8;
    }

  }
  // repeated .falcon_common_msg.Hop hops = 11;
  total_size += 1 * this->hops_size();
  for (int i = 0; i < this->hops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hops(i));
  }

  // repeated .falcon_common_msg.Burst bursts = 12;
  total_size += 1 * this->bursts_size();
  for (int i = 0; i < this->bursts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bursts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectionTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectionTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectionTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectionTip::MergeFrom(const DetectionTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  hops_.MergeFrom(from.hops_);
  bursts_.MergeFrom(from.bursts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_det_id()) {
      set_det_id(from.det_id());
    }
    if (from.has_sensor_id()) {
      set_sensor_id(from.sensor_id());
    }
    if (from.has_has_pred()) {
      set_has_pred(from.has_pred());
    }
    if (from.has_file_location()) {
      set_file_location(from.file_location());
    }
    if (from.has_start_time_whole()) {
      set_start_time_whole(from.start_time_whole());
    }
    if (from.has_start_time_frac()) {
      set_start_time_frac(from.start_time_frac());
    }
    if (from.has_duration_millisec()) {
      set_duration_millisec(from.duration_millisec());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_center_tune_freq_hz()) {
      set_center_tune_freq_hz(from.center_tune_freq_hz());
    }
    if (from.has_bandwidth_hz()) {
      set_bandwidth_hz(from.bandwidth_hz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectionTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionTip::CopyFrom(const DetectionTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionTip::IsInitialized() const {

  return true;
}

void DetectionTip::Swap(DetectionTip* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(det_id_, other->det_id_);
    std::swap(sensor_id_, other->sensor_id_);
    std::swap(has_pred_, other->has_pred_);
    std::swap(file_location_, other->file_location_);
    std::swap(start_time_whole_, other->start_time_whole_);
    std::swap(start_time_frac_, other->start_time_frac_);
    std::swap(duration_millisec_, other->duration_millisec_);
    std::swap(center_tune_freq_hz_, other->center_tune_freq_hz_);
    std::swap(bandwidth_hz_, other->bandwidth_hz_);
    hops_.Swap(&other->hops_);
    bursts_.Swap(&other->bursts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectionTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectionTip_descriptor_;
  metadata.reflection = DetectionTip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Hop::kHopIdFieldNumber;
const int Hop::kStartTimeWholeFieldNumber;
const int Hop::kStartTimeFracFieldNumber;
const int Hop::kDurationMillisecFieldNumber;
const int Hop::kHopCenterFreqHzFieldNumber;
const int Hop::kHopBwHzFieldNumber;
#endif  // !_MSC_VER

Hop::Hop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hop::InitAsDefaultInstance() {
}

Hop::Hop(const Hop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hop::SharedCtor() {
  _cached_size_ = 0;
  hop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_time_whole_ = 0;
  start_time_frac_ = 0;
  duration_millisec_ = 0;
  hop_center_freq_hz_ = 0;
  hop_bw_hz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hop::~Hop() {
  SharedDtor();
}

void Hop::SharedDtor() {
  if (hop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete hop_id_;
  }
  if (this != default_instance_) {
  }
}

void Hop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hop_descriptor_;
}

const Hop& Hop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

Hop* Hop::default_instance_ = NULL;

Hop* Hop::New() const {
  return new Hop;
}

void Hop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hop_id()) {
      if (hop_id_ != &::google::protobuf::internal::kEmptyString) {
        hop_id_->clear();
      }
    }
    start_time_whole_ = 0;
    start_time_frac_ = 0;
    duration_millisec_ = 0;
    hop_center_freq_hz_ = 0;
    hop_bw_hz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hop_id().data(), this->hop_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_start_time_whole;
        break;
      }

      // optional double start_time_whole = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start_time_whole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_whole_)));
          set_has_start_time_whole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_start_time_frac;
        break;
      }

      // optional double start_time_frac = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start_time_frac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_frac_)));
          set_has_start_time_frac();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_duration_millisec;
        break;
      }

      // optional double duration_millisec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration_millisec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_millisec_)));
          set_has_duration_millisec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_hop_center_freq_hz;
        break;
      }

      // optional double hop_center_freq_hz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_hop_center_freq_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hop_center_freq_hz_)));
          set_has_hop_center_freq_hz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_hop_bw_hz;
        break;
      }

      // optional double hop_bw_hz = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_hop_bw_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hop_bw_hz_)));
          set_has_hop_bw_hz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string hop_id = 1;
  if (has_hop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hop_id().data(), this->hop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hop_id(), output);
  }

  // optional double start_time_whole = 2;
  if (has_start_time_whole()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_time_whole(), output);
  }

  // optional double start_time_frac = 3;
  if (has_start_time_frac()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->start_time_frac(), output);
  }

  // optional double duration_millisec = 4;
  if (has_duration_millisec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->duration_millisec(), output);
  }

  // optional double hop_center_freq_hz = 5;
  if (has_hop_center_freq_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->hop_center_freq_hz(), output);
  }

  // optional double hop_bw_hz = 6;
  if (has_hop_bw_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->hop_bw_hz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string hop_id = 1;
  if (has_hop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hop_id().data(), this->hop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hop_id(), target);
  }

  // optional double start_time_whole = 2;
  if (has_start_time_whole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_time_whole(), target);
  }

  // optional double start_time_frac = 3;
  if (has_start_time_frac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->start_time_frac(), target);
  }

  // optional double duration_millisec = 4;
  if (has_duration_millisec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->duration_millisec(), target);
  }

  // optional double hop_center_freq_hz = 5;
  if (has_hop_center_freq_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->hop_center_freq_hz(), target);
  }

  // optional double hop_bw_hz = 6;
  if (has_hop_bw_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->hop_bw_hz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string hop_id = 1;
    if (has_hop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hop_id());
    }

    // optional double start_time_whole = 2;
    if (has_start_time_whole()) {
      total_size += 1 + 8;
    }

    // optional double start_time_frac = 3;
    if (has_start_time_frac()) {
      total_size += 1 + 8;
    }

    // optional double duration_millisec = 4;
    if (has_duration_millisec()) {
      total_size += 1 + 8;
    }

    // optional double hop_center_freq_hz = 5;
    if (has_hop_center_freq_hz()) {
      total_size += 1 + 8;
    }

    // optional double hop_bw_hz = 6;
    if (has_hop_bw_hz()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hop::MergeFrom(const Hop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hop_id()) {
      set_hop_id(from.hop_id());
    }
    if (from.has_start_time_whole()) {
      set_start_time_whole(from.start_time_whole());
    }
    if (from.has_start_time_frac()) {
      set_start_time_frac(from.start_time_frac());
    }
    if (from.has_duration_millisec()) {
      set_duration_millisec(from.duration_millisec());
    }
    if (from.has_hop_center_freq_hz()) {
      set_hop_center_freq_hz(from.hop_center_freq_hz());
    }
    if (from.has_hop_bw_hz()) {
      set_hop_bw_hz(from.hop_bw_hz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hop::CopyFrom(const Hop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hop::IsInitialized() const {

  return true;
}

void Hop::Swap(Hop* other) {
  if (other != this) {
    std::swap(hop_id_, other->hop_id_);
    std::swap(start_time_whole_, other->start_time_whole_);
    std::swap(start_time_frac_, other->start_time_frac_);
    std::swap(duration_millisec_, other->duration_millisec_);
    std::swap(hop_center_freq_hz_, other->hop_center_freq_hz_);
    std::swap(hop_bw_hz_, other->hop_bw_hz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hop_descriptor_;
  metadata.reflection = Hop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Burst::kBurstIdFieldNumber;
const int Burst::kStartTimeWholeFieldNumber;
const int Burst::kStartTimeFracFieldNumber;
const int Burst::kDurationMillisecFieldNumber;
const int Burst::kBurstCenterFreqHzFieldNumber;
const int Burst::kBurstBwHzFieldNumber;
#endif  // !_MSC_VER

Burst::Burst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Burst::InitAsDefaultInstance() {
}

Burst::Burst(const Burst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Burst::SharedCtor() {
  _cached_size_ = 0;
  burst_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_time_whole_ = 0;
  start_time_frac_ = 0;
  duration_millisec_ = 0;
  burst_center_freq_hz_ = 0;
  burst_bw_hz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Burst::~Burst() {
  SharedDtor();
}

void Burst::SharedDtor() {
  if (burst_id_ != &::google::protobuf::internal::kEmptyString) {
    delete burst_id_;
  }
  if (this != default_instance_) {
  }
}

void Burst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Burst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Burst_descriptor_;
}

const Burst& Burst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

Burst* Burst::default_instance_ = NULL;

Burst* Burst::New() const {
  return new Burst;
}

void Burst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_burst_id()) {
      if (burst_id_ != &::google::protobuf::internal::kEmptyString) {
        burst_id_->clear();
      }
    }
    start_time_whole_ = 0;
    start_time_frac_ = 0;
    duration_millisec_ = 0;
    burst_center_freq_hz_ = 0;
    burst_bw_hz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Burst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string burst_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_burst_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->burst_id().data(), this->burst_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_start_time_whole;
        break;
      }

      // optional double start_time_whole = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start_time_whole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_whole_)));
          set_has_start_time_whole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_start_time_frac;
        break;
      }

      // optional double start_time_frac = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start_time_frac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_frac_)));
          set_has_start_time_frac();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_duration_millisec;
        break;
      }

      // optional double duration_millisec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration_millisec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_millisec_)));
          set_has_duration_millisec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_burst_center_freq_hz;
        break;
      }

      // optional double burst_center_freq_hz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_burst_center_freq_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &burst_center_freq_hz_)));
          set_has_burst_center_freq_hz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_burst_bw_hz;
        break;
      }

      // optional double burst_bw_hz = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_burst_bw_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &burst_bw_hz_)));
          set_has_burst_bw_hz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Burst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string burst_id = 1;
  if (has_burst_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->burst_id().data(), this->burst_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->burst_id(), output);
  }

  // optional double start_time_whole = 2;
  if (has_start_time_whole()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_time_whole(), output);
  }

  // optional double start_time_frac = 3;
  if (has_start_time_frac()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->start_time_frac(), output);
  }

  // optional double duration_millisec = 4;
  if (has_duration_millisec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->duration_millisec(), output);
  }

  // optional double burst_center_freq_hz = 5;
  if (has_burst_center_freq_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->burst_center_freq_hz(), output);
  }

  // optional double burst_bw_hz = 6;
  if (has_burst_bw_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->burst_bw_hz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Burst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string burst_id = 1;
  if (has_burst_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->burst_id().data(), this->burst_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->burst_id(), target);
  }

  // optional double start_time_whole = 2;
  if (has_start_time_whole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_time_whole(), target);
  }

  // optional double start_time_frac = 3;
  if (has_start_time_frac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->start_time_frac(), target);
  }

  // optional double duration_millisec = 4;
  if (has_duration_millisec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->duration_millisec(), target);
  }

  // optional double burst_center_freq_hz = 5;
  if (has_burst_center_freq_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->burst_center_freq_hz(), target);
  }

  // optional double burst_bw_hz = 6;
  if (has_burst_bw_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->burst_bw_hz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Burst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string burst_id = 1;
    if (has_burst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->burst_id());
    }

    // optional double start_time_whole = 2;
    if (has_start_time_whole()) {
      total_size += 1 + 8;
    }

    // optional double start_time_frac = 3;
    if (has_start_time_frac()) {
      total_size += 1 + 8;
    }

    // optional double duration_millisec = 4;
    if (has_duration_millisec()) {
      total_size += 1 + 8;
    }

    // optional double burst_center_freq_hz = 5;
    if (has_burst_center_freq_hz()) {
      total_size += 1 + 8;
    }

    // optional double burst_bw_hz = 6;
    if (has_burst_bw_hz()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Burst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Burst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Burst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Burst::MergeFrom(const Burst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_burst_id()) {
      set_burst_id(from.burst_id());
    }
    if (from.has_start_time_whole()) {
      set_start_time_whole(from.start_time_whole());
    }
    if (from.has_start_time_frac()) {
      set_start_time_frac(from.start_time_frac());
    }
    if (from.has_duration_millisec()) {
      set_duration_millisec(from.duration_millisec());
    }
    if (from.has_burst_center_freq_hz()) {
      set_burst_center_freq_hz(from.burst_center_freq_hz());
    }
    if (from.has_burst_bw_hz()) {
      set_burst_bw_hz(from.burst_bw_hz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Burst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Burst::CopyFrom(const Burst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Burst::IsInitialized() const {

  return true;
}

void Burst::Swap(Burst* other) {
  if (other != this) {
    std::swap(burst_id_, other->burst_id_);
    std::swap(start_time_whole_, other->start_time_whole_);
    std::swap(start_time_frac_, other->start_time_frac_);
    std::swap(duration_millisec_, other->duration_millisec_);
    std::swap(burst_center_freq_hz_, other->burst_center_freq_hz_);
    std::swap(burst_bw_hz_, other->burst_bw_hz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Burst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Burst_descriptor_;
  metadata.reflection = Burst_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SensorStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SensorStatus::kMsgNameFieldNumber;
const int SensorStatus::kLatFieldNumber;
const int SensorStatus::kLonFieldNumber;
const int SensorStatus::kAltFieldNumber;
const int SensorStatus::kTimestampFieldNumber;
const int SensorStatus::kSensorNameFieldNumber;
const int SensorStatus::kRxStatusFieldNumber;
#endif  // !_MSC_VER

SensorStatus::SensorStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorStatus::InitAsDefaultInstance() {
}

SensorStatus::SensorStatus(const SensorStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  lat_ = 0;
  lon_ = 0;
  alt_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorStatus::~SensorStatus() {
  SharedDtor();
}

void SensorStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (this != default_instance_) {
  }
}

void SensorStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorStatus_descriptor_;
}

const SensorStatus& SensorStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

SensorStatus* SensorStatus::default_instance_ = NULL;

SensorStatus* SensorStatus::New() const {
  return new SensorStatus;
}

void SensorStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    lat_ = 0;
    lon_ = 0;
    alt_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
  }
  rxstatus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SENSOR_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_lat;
        break;
      }

      // optional float lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_lon;
        break;
      }

      // optional float lon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_alt;
        break;
      }

      // optional float alt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rxStatus;
        break;
      }

      // repeated .falcon_common_msg.ReceiverStatus rxStatus = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rxStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rxstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rxStatus;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SENSOR_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional float lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lat(), output);
  }

  // optional float lon = 3;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lon(), output);
  }

  // optional float alt = 4;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->alt(), output);
  }

  // optional int64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->timestamp(), output);
  }

  // optional string sensorName = 6 [default = ""];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sensorname(), output);
  }

  // repeated .falcon_common_msg.ReceiverStatus rxStatus = 7;
  for (int i = 0; i < this->rxstatus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rxstatus(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SENSOR_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional float lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lat(), target);
  }

  // optional float lon = 3;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lon(), target);
  }

  // optional float alt = 4;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->alt(), target);
  }

  // optional int64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->timestamp(), target);
  }

  // optional string sensorName = 6 [default = ""];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sensorname(), target);
  }

  // repeated .falcon_common_msg.ReceiverStatus rxStatus = 7;
  for (int i = 0; i < this->rxstatus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rxstatus(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SENSOR_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional float lat = 2;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float lon = 3;
    if (has_lon()) {
      total_size += 1 + 4;
    }

    // optional float alt = 4;
    if (has_alt()) {
      total_size += 1 + 4;
    }

    // optional int64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional string sensorName = 6 [default = ""];
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

  }
  // repeated .falcon_common_msg.ReceiverStatus rxStatus = 7;
  total_size += 1 * this->rxstatus_size();
  for (int i = 0; i < this->rxstatus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rxstatus(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorStatus::MergeFrom(const SensorStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  rxstatus_.MergeFrom(from.rxstatus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorStatus::CopyFrom(const SensorStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorStatus::IsInitialized() const {

  return true;
}

void SensorStatus::Swap(SensorStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(alt_, other->alt_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(sensorname_, other->sensorname_);
    rxstatus_.Swap(&other->rxstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorStatus_descriptor_;
  metadata.reflection = SensorStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ReceiverStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ReceiverStatus::kMsgNameFieldNumber;
const int ReceiverStatus::kIdNumFieldNumber;
const int ReceiverStatus::kNameFieldNumber;
const int ReceiverStatus::kTypeFieldNumber;
const int ReceiverStatus::kRxFreqFieldNumber;
const int ReceiverStatus::kRxBandwidthFieldNumber;
#endif  // !_MSC_VER

ReceiverStatus::ReceiverStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiverStatus::InitAsDefaultInstance() {
}

ReceiverStatus::ReceiverStatus(const ReceiverStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiverStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  idnum_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rxfreq_ = 0;
  rxbandwidth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiverStatus::~ReceiverStatus() {
  SharedDtor();
}

void ReceiverStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void ReceiverStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiverStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverStatus_descriptor_;
}

const ReceiverStatus& ReceiverStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

ReceiverStatus* ReceiverStatus::default_instance_ = NULL;

ReceiverStatus* ReceiverStatus::New() const {
  return new ReceiverStatus;
}

void ReceiverStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    idnum_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    rxfreq_ = 0;
    rxbandwidth_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiverStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RECEIVER_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idNum;
        break;
      }

      // optional int32 idNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idnum_)));
          set_has_idnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_type;
        break;
      }

      // optional string type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rxFreq;
        break;
      }

      // optional float rxFreq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rxFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rxfreq_)));
          set_has_rxfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_rxBandwidth;
        break;
      }

      // optional float rxBandwidth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rxBandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rxbandwidth_)));
          set_has_rxbandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiverStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RECEIVER_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 idNum = 2;
  if (has_idnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->idnum(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->type(), output);
  }

  // optional float rxFreq = 5;
  if (has_rxfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rxfreq(), output);
  }

  // optional float rxBandwidth = 6;
  if (has_rxbandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rxbandwidth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiverStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RECEIVER_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 idNum = 2;
  if (has_idnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->idnum(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  // optional float rxFreq = 5;
  if (has_rxfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rxfreq(), target);
  }

  // optional float rxBandwidth = 6;
  if (has_rxbandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->rxbandwidth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiverStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RECEIVER_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 idNum = 2;
    if (has_idnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idnum());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional float rxFreq = 5;
    if (has_rxfreq()) {
      total_size += 1 + 4;
    }

    // optional float rxBandwidth = 6;
    if (has_rxbandwidth()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiverStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiverStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiverStatus::MergeFrom(const ReceiverStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_idnum()) {
      set_idnum(from.idnum());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_rxfreq()) {
      set_rxfreq(from.rxfreq());
    }
    if (from.has_rxbandwidth()) {
      set_rxbandwidth(from.rxbandwidth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiverStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverStatus::CopyFrom(const ReceiverStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverStatus::IsInitialized() const {

  return true;
}

void ReceiverStatus::Swap(ReceiverStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(idnum_, other->idnum_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(rxfreq_, other->rxfreq_);
    std::swap(rxbandwidth_, other->rxbandwidth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiverStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiverStatus_descriptor_;
  metadata.reflection = ReceiverStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Timestamp::kSecondsFieldNumber;
const int Timestamp::kFsecondsFieldNumber;
#endif  // !_MSC_VER

Timestamp::Timestamp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Timestamp::InitAsDefaultInstance() {
}

Timestamp::Timestamp(const Timestamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Timestamp::SharedCtor() {
  _cached_size_ = 0;
  seconds_ = GOOGLE_LONGLONG(0);
  fseconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Timestamp::~Timestamp() {
  SharedDtor();
}

void Timestamp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Timestamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Timestamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Timestamp_descriptor_;
}

const Timestamp& Timestamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

Timestamp* Timestamp::default_instance_ = NULL;

Timestamp* Timestamp::New() const {
  return new Timestamp;
}

void Timestamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seconds_ = GOOGLE_LONGLONG(0);
    fseconds_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 seconds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_fseconds;
        break;
      }

      // optional float fseconds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fseconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fseconds_)));
          set_has_fseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 seconds = 1;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->seconds(), output);
  }

  // optional float fseconds = 2;
  if (has_fseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fseconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Timestamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 seconds = 1;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->seconds(), target);
  }

  // optional float fseconds = 2;
  if (has_fseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fseconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Timestamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 seconds = 1;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seconds());
    }

    // optional float fseconds = 2;
    if (has_fseconds()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timestamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Timestamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Timestamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_fseconds()) {
      set_fseconds(from.fseconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Timestamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {

  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other != this) {
    std::swap(seconds_, other->seconds_);
    std::swap(fseconds_, other->fseconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Timestamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Timestamp_descriptor_;
  metadata.reflection = Timestamp_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ServiceReinitialize::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ServiceReinitialize::kMsgNameFieldNumber;
#endif  // !_MSC_VER

ServiceReinitialize::ServiceReinitialize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceReinitialize::InitAsDefaultInstance() {
}

ServiceReinitialize::ServiceReinitialize(const ServiceReinitialize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceReinitialize::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceReinitialize::~ServiceReinitialize() {
  SharedDtor();
}

void ServiceReinitialize::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ServiceReinitialize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceReinitialize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceReinitialize_descriptor_;
}

const ServiceReinitialize& ServiceReinitialize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

ServiceReinitialize* ServiceReinitialize::default_instance_ = NULL;

ServiceReinitialize* ServiceReinitialize::New() const {
  return new ServiceReinitialize;
}

void ServiceReinitialize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceReinitialize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SERVICE_REINITIALIZE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceReinitialize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SERVICE_REINITIALIZE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceReinitialize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SERVICE_REINITIALIZE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceReinitialize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SERVICE_REINITIALIZE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceReinitialize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceReinitialize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceReinitialize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceReinitialize::MergeFrom(const ServiceReinitialize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceReinitialize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceReinitialize::CopyFrom(const ServiceReinitialize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceReinitialize::IsInitialized() const {

  return true;
}

void ServiceReinitialize::Swap(ServiceReinitialize* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceReinitialize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceReinitialize_descriptor_;
  metadata.reflection = ServiceReinitialize_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SensorHeading::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SensorHeading::kMsgNameFieldNumber;
const int SensorHeading::kHostnameFieldNumber;
const int SensorHeading::kJ1970TimeFieldNumber;
const int SensorHeading::kHeadingFieldNumber;
const int SensorHeading::kPitchFieldNumber;
const int SensorHeading::kRollFieldNumber;
#endif  // !_MSC_VER

SensorHeading::SensorHeading()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorHeading::InitAsDefaultInstance() {
}

SensorHeading::SensorHeading(const SensorHeading& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorHeading::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  j1970time_ = 0;
  heading_ = 0;
  pitch_ = 0;
  roll_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorHeading::~SensorHeading() {
  SharedDtor();
}

void SensorHeading::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void SensorHeading::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorHeading::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorHeading_descriptor_;
}

const SensorHeading& SensorHeading::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

SensorHeading* SensorHeading::default_instance_ = NULL;

SensorHeading* SensorHeading::New() const {
  return new SensorHeading;
}

void SensorHeading::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    j1970time_ = 0;
    heading_ = 0;
    pitch_ = 0;
    roll_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorHeading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SENSOR_HEADING"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hostname;
        break;
      }

      // optional string hostname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_j1970Time;
        break;
      }

      // optional double j1970Time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_j1970Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &j1970time_)));
          set_has_j1970time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_heading;
        break;
      }

      // optional double heading = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_pitch;
        break;
      }

      // optional double pitch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_roll;
        break;
      }

      // optional double roll = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorHeading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SENSOR_HEADING"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string hostname = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hostname(), output);
  }

  // optional double j1970Time = 3;
  if (has_j1970time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->j1970time(), output);
  }

  // optional double heading = 4;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heading(), output);
  }

  // optional double pitch = 5;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pitch(), output);
  }

  // optional double roll = 6;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->roll(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorHeading::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SENSOR_HEADING"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string hostname = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // optional double j1970Time = 3;
  if (has_j1970time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->j1970time(), target);
  }

  // optional double heading = 4;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heading(), target);
  }

  // optional double pitch = 5;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pitch(), target);
  }

  // optional double roll = 6;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->roll(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorHeading::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SENSOR_HEADING"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string hostname = 2;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional double j1970Time = 3;
    if (has_j1970time()) {
      total_size += 1 + 8;
    }

    // optional double heading = 4;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double pitch = 5;
    if (has_pitch()) {
      total_size += 1 + 8;
    }

    // optional double roll = 6;
    if (has_roll()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorHeading::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorHeading* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorHeading*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorHeading::MergeFrom(const SensorHeading& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_j1970time()) {
      set_j1970time(from.j1970time());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorHeading::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorHeading::CopyFrom(const SensorHeading& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorHeading::IsInitialized() const {

  return true;
}

void SensorHeading::Swap(SensorHeading* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(hostname_, other->hostname_);
    std::swap(j1970time_, other->j1970time_);
    std::swap(heading_, other->heading_);
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorHeading::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorHeading_descriptor_;
  metadata.reflection = SensorHeading_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValuePair::kLabelFieldNumber;
const int KeyValuePair::kValueFieldNumber;
#endif  // !_MSC_VER

KeyValuePair::KeyValuePair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyValuePair::InitAsDefaultInstance() {
  value_ = const_cast< ::falcon_common_msg::ValueContainer*>(&::falcon_common_msg::ValueContainer::default_instance());
}

KeyValuePair::KeyValuePair(const KeyValuePair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyValuePair::SharedCtor() {
  _cached_size_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValuePair::~KeyValuePair() {
  SharedDtor();
}

void KeyValuePair::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (this != default_instance_) {
    delete value_;
  }
}

void KeyValuePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValuePair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValuePair_descriptor_;
}

const KeyValuePair& KeyValuePair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

KeyValuePair* KeyValuePair::default_instance_ = NULL;

KeyValuePair* KeyValuePair::New() const {
  return new KeyValuePair;
}

void KeyValuePair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
    if (has_value()) {
      if (value_ != NULL) value_->::falcon_common_msg::ValueContainer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValuePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .falcon_common_msg.ValueContainer value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyValuePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->label(), output);
  }

  // optional .falcon_common_msg.ValueContainer value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyValuePair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // optional .falcon_common_msg.ValueContainer value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyValuePair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional .falcon_common_msg.ValueContainer value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValuePair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValuePair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValuePair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValuePair::MergeFrom(const KeyValuePair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_value()) {
      mutable_value()->::falcon_common_msg::ValueContainer::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValuePair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValuePair::CopyFrom(const KeyValuePair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValuePair::IsInitialized() const {

  return true;
}

void KeyValuePair::Swap(KeyValuePair* other) {
  if (other != this) {
    std::swap(label_, other->label_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValuePair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValuePair_descriptor_;
  metadata.reflection = KeyValuePair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ValueContainer::kBoolValueFieldNumber;
const int ValueContainer::kIntValueFieldNumber;
const int ValueContainer::kFloatValueFieldNumber;
const int ValueContainer::kStringValueFieldNumber;
const int ValueContainer::kPositionValueFieldNumber;
#endif  // !_MSC_VER

ValueContainer::ValueContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ValueContainer::InitAsDefaultInstance() {
  position_value_ = const_cast< ::falcon_common_msg::GeodeticPosition*>(&::falcon_common_msg::GeodeticPosition::default_instance());
}

ValueContainer::ValueContainer(const ValueContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ValueContainer::SharedCtor() {
  _cached_size_ = 0;
  bool_value_ = false;
  int_value_ = 0;
  float_value_ = 0;
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValueContainer::~ValueContainer() {
  SharedDtor();
}

void ValueContainer::SharedDtor() {
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    delete string_value_;
  }
  if (this != default_instance_) {
    delete position_value_;
  }
}

void ValueContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValueContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValueContainer_descriptor_;
}

const ValueContainer& ValueContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

ValueContainer* ValueContainer::default_instance_ = NULL;

ValueContainer* ValueContainer::New() const {
  return new ValueContainer;
}

void ValueContainer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bool_value_ = false;
    int_value_ = 0;
    float_value_ = 0;
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::kEmptyString) {
        string_value_->clear();
      }
    }
    if (has_position_value()) {
      if (position_value_ != NULL) position_value_->::falcon_common_msg::GeodeticPosition::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ValueContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bool_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int_value;
        break;
      }

      // optional int32 int_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_value_)));
          set_has_int_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_float_value;
        break;
      }

      // optional float float_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_float_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
          set_has_float_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_string_value;
        break;
      }

      // optional string string_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_position_value;
        break;
      }

      // optional .falcon_common_msg.GeodeticPosition position_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ValueContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bool_value = 1;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bool_value(), output);
  }

  // optional int32 int_value = 2;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int_value(), output);
  }

  // optional float float_value = 3;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->float_value(), output);
  }

  // optional string string_value = 4;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->string_value(), output);
  }

  // optional .falcon_common_msg.GeodeticPosition position_value = 5;
  if (has_position_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->position_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ValueContainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bool_value = 1;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bool_value(), target);
  }

  // optional int32 int_value = 2;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->int_value(), target);
  }

  // optional float float_value = 3;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->float_value(), target);
  }

  // optional string string_value = 4;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->string_value(), target);
  }

  // optional .falcon_common_msg.GeodeticPosition position_value = 5;
  if (has_position_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->position_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ValueContainer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bool_value = 1;
    if (has_bool_value()) {
      total_size += 1 + 1;
    }

    // optional int32 int_value = 2;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
    }

    // optional float float_value = 3;
    if (has_float_value()) {
      total_size += 1 + 4;
    }

    // optional string string_value = 4;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional .falcon_common_msg.GeodeticPosition position_value = 5;
    if (has_position_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValueContainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ValueContainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ValueContainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ValueContainer::MergeFrom(const ValueContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bool_value()) {
      set_bool_value(from.bool_value());
    }
    if (from.has_int_value()) {
      set_int_value(from.int_value());
    }
    if (from.has_float_value()) {
      set_float_value(from.float_value());
    }
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
    if (from.has_position_value()) {
      mutable_position_value()->::falcon_common_msg::GeodeticPosition::MergeFrom(from.position_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ValueContainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueContainer::CopyFrom(const ValueContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueContainer::IsInitialized() const {

  return true;
}

void ValueContainer::Swap(ValueContainer* other) {
  if (other != this) {
    std::swap(bool_value_, other->bool_value_);
    std::swap(int_value_, other->int_value_);
    std::swap(float_value_, other->float_value_);
    std::swap(string_value_, other->string_value_);
    std::swap(position_value_, other->position_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ValueContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValueContainer_descriptor_;
  metadata.reflection = ValueContainer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GeodeticPosition::kLatFieldNumber;
const int GeodeticPosition::kLonFieldNumber;
const int GeodeticPosition::kAltFieldNumber;
const int GeodeticPosition::kAltMetersHaeFieldNumber;
#endif  // !_MSC_VER

GeodeticPosition::GeodeticPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeodeticPosition::InitAsDefaultInstance() {
}

GeodeticPosition::GeodeticPosition(const GeodeticPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeodeticPosition::SharedCtor() {
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  alt_ = GOOGLE_LONGLONG(0);
  alt_meters_hae_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeodeticPosition::~GeodeticPosition() {
  SharedDtor();
}

void GeodeticPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GeodeticPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeodeticPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeodeticPosition_descriptor_;
}

const GeodeticPosition& GeodeticPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconCommonMessages_2eproto();
  return *default_instance_;
}

GeodeticPosition* GeodeticPosition::default_instance_ = NULL;

GeodeticPosition* GeodeticPosition::New() const {
  return new GeodeticPosition;
}

void GeodeticPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lat_ = 0;
    lon_ = 0;
    alt_ = GOOGLE_LONGLONG(0);
    alt_meters_hae_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeodeticPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float lat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_lon;
        break;
      }

      // optional float lon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_alt;
        break;
      }

      // optional int64 alt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_alt_meters_hae;
        break;
      }

      // optional int64 alt_meters_hae = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alt_meters_hae:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &alt_meters_hae_)));
          set_has_alt_meters_hae();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeodeticPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lat(), output);
  }

  // optional float lon = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lon(), output);
  }

  // optional int64 alt = 3;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->alt(), output);
  }

  // optional int64 alt_meters_hae = 4;
  if (has_alt_meters_hae()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->alt_meters_hae(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeodeticPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lat(), target);
  }

  // optional float lon = 2;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lon(), target);
  }

  // optional int64 alt = 3;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->alt(), target);
  }

  // optional int64 alt_meters_hae = 4;
  if (has_alt_meters_hae()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->alt_meters_hae(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeodeticPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float lat = 1;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float lon = 2;
    if (has_lon()) {
      total_size += 1 + 4;
    }

    // optional int64 alt = 3;
    if (has_alt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->alt());
    }

    // optional int64 alt_meters_hae = 4;
    if (has_alt_meters_hae()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->alt_meters_hae());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeodeticPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeodeticPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeodeticPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeodeticPosition::MergeFrom(const GeodeticPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_alt_meters_hae()) {
      set_alt_meters_hae(from.alt_meters_hae());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeodeticPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeodeticPosition::CopyFrom(const GeodeticPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeodeticPosition::IsInitialized() const {

  return true;
}

void GeodeticPosition::Swap(GeodeticPosition* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(alt_, other->alt_);
    std::swap(alt_meters_hae_, other->alt_meters_hae_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeodeticPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeodeticPosition_descriptor_;
  metadata.reflection = GeodeticPosition_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace falcon_common_msg

// @@protoc_insertion_point(global_scope)
