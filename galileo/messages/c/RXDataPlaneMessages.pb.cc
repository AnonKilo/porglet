// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RXDataPlaneMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RXDataPlaneMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rxdataplane_msg {

namespace {

const ::google::protobuf::Descriptor* DataPlaneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataPlaneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleChannelInfoEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleChannelInfoEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleChannelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleChannelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpectrogramInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpectrogramInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpectrogramInfoEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpectrogramInfoEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* PSDInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PSDInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PSDInfoEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PSDInfoEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnergyBurstInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnergyBurstInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnergyBurstInfoEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnergyBurstInfoEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* PDWInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PDWInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PDWInfoEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PDWInfoEnvelope_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ModulationType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RXDataPlaneMessages_2eproto() {
  protobuf_AddDesc_RXDataPlaneMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RXDataPlaneMessages.proto");
  GOOGLE_CHECK(file != NULL);
  DataPlaneInfo_descriptor_ = file->message_type(0);
  static const int DataPlaneInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPlaneInfo, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPlaneInfo, iqheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPlaneInfo, snapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPlaneInfo, spectrogramenvelope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPlaneInfo, psdenvelope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPlaneInfo, energyburstenvelope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPlaneInfo, singlechannelenvelope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPlaneInfo, pdwenvelope_),
  };
  DataPlaneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataPlaneInfo_descriptor_,
      DataPlaneInfo::default_instance_,
      DataPlaneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPlaneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPlaneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataPlaneInfo));
  SingleChannelInfoEnvelope_descriptor_ = file->message_type(1);
  static const int SingleChannelInfoEnvelope_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChannelInfoEnvelope, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChannelInfoEnvelope, snapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChannelInfoEnvelope, chaninfo_),
  };
  SingleChannelInfoEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleChannelInfoEnvelope_descriptor_,
      SingleChannelInfoEnvelope::default_instance_,
      SingleChannelInfoEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChannelInfoEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChannelInfoEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleChannelInfoEnvelope));
  SingleChannelInfo_descriptor_ = file->message_type(2);
  static const int SingleChannelInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChannelInfo, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChannelInfo, iqheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChannelInfo, subchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChannelInfo, aux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChannelInfo, fileindex_),
  };
  SingleChannelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleChannelInfo_descriptor_,
      SingleChannelInfo::default_instance_,
      SingleChannelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChannelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChannelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleChannelInfo));
  SpectrogramInfo_descriptor_ = file->message_type(3);
  static const int SpectrogramInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInfo, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInfo, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInfo, freqrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInfo, startfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInfo, stopfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInfo, bins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInfo, binresolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInfo, averages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInfo, spectrogram_time_),
  };
  SpectrogramInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpectrogramInfo_descriptor_,
      SpectrogramInfo::default_instance_,
      SpectrogramInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpectrogramInfo));
  SpectrogramInfoEnvelope_descriptor_ = file->message_type(4);
  static const int SpectrogramInfoEnvelope_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInfoEnvelope, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInfoEnvelope, snapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInfoEnvelope, spectrograminfo_),
  };
  SpectrogramInfoEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpectrogramInfoEnvelope_descriptor_,
      SpectrogramInfoEnvelope::default_instance_,
      SpectrogramInfoEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInfoEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrogramInfoEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpectrogramInfoEnvelope));
  PSDInfo_descriptor_ = file->message_type(5);
  static const int PSDInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSDInfo, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSDInfo, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSDInfo, freqrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSDInfo, startfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSDInfo, stopfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSDInfo, binresolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSDInfo, psd_time_),
  };
  PSDInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PSDInfo_descriptor_,
      PSDInfo::default_instance_,
      PSDInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSDInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSDInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PSDInfo));
  PSDInfoEnvelope_descriptor_ = file->message_type(6);
  static const int PSDInfoEnvelope_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSDInfoEnvelope, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSDInfoEnvelope, snapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSDInfoEnvelope, psdinfo_),
  };
  PSDInfoEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PSDInfoEnvelope_descriptor_,
      PSDInfoEnvelope::default_instance_,
      PSDInfoEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSDInfoEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSDInfoEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PSDInfoEnvelope));
  EnergyBurstInfo_descriptor_ = file->message_type(7);
  static const int EnergyBurstInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfo, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfo, whole_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfo, frac_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfo, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfo, freqrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfo, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfo, snr_),
  };
  EnergyBurstInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnergyBurstInfo_descriptor_,
      EnergyBurstInfo::default_instance_,
      EnergyBurstInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnergyBurstInfo));
  EnergyBurstInfoEnvelope_descriptor_ = file->message_type(8);
  static const int EnergyBurstInfoEnvelope_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfoEnvelope, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfoEnvelope, snapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfoEnvelope, energybursts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfoEnvelope, timeressec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfoEnvelope, freqreshz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfoEnvelope, segmentername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfoEnvelope, metafilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfoEnvelope, iqindexfilename_),
  };
  EnergyBurstInfoEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnergyBurstInfoEnvelope_descriptor_,
      EnergyBurstInfoEnvelope::default_instance_,
      EnergyBurstInfoEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfoEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstInfoEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnergyBurstInfoEnvelope));
  PDWInfo_descriptor_ = file->message_type(9);
  static const int PDWInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfo, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfo, toawholesec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfo, toafracsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfo, pulsedur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfo, gap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfo, freqrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfo, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfo, freqslope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfo, snr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfo, az_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfo, el_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfo, dfq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfo, polar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfo, poltilt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfo, modtype_),
  };
  PDWInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PDWInfo_descriptor_,
      PDWInfo::default_instance_,
      PDWInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PDWInfo));
  PDWInfoEnvelope_descriptor_ = file->message_type(10);
  static const int PDWInfoEnvelope_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfoEnvelope, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfoEnvelope, snapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfoEnvelope, pdws_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfoEnvelope, segmentername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfoEnvelope, metafilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfoEnvelope, iqindexfilename_),
  };
  PDWInfoEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PDWInfoEnvelope_descriptor_,
      PDWInfoEnvelope::default_instance_,
      PDWInfoEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfoEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDWInfoEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PDWInfoEnvelope));
  ModulationType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RXDataPlaneMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataPlaneInfo_descriptor_, &DataPlaneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleChannelInfoEnvelope_descriptor_, &SingleChannelInfoEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleChannelInfo_descriptor_, &SingleChannelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpectrogramInfo_descriptor_, &SpectrogramInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpectrogramInfoEnvelope_descriptor_, &SpectrogramInfoEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PSDInfo_descriptor_, &PSDInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PSDInfoEnvelope_descriptor_, &PSDInfoEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnergyBurstInfo_descriptor_, &EnergyBurstInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnergyBurstInfoEnvelope_descriptor_, &EnergyBurstInfoEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PDWInfo_descriptor_, &PDWInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PDWInfoEnvelope_descriptor_, &PDWInfoEnvelope::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RXDataPlaneMessages_2eproto() {
  delete DataPlaneInfo::default_instance_;
  delete DataPlaneInfo_reflection_;
  delete DataPlaneInfo::_default_msgname_;
  delete SingleChannelInfoEnvelope::default_instance_;
  delete SingleChannelInfoEnvelope_reflection_;
  delete SingleChannelInfoEnvelope::_default_msgname_;
  delete SingleChannelInfo::default_instance_;
  delete SingleChannelInfo_reflection_;
  delete SingleChannelInfo::_default_msgname_;
  delete SpectrogramInfo::default_instance_;
  delete SpectrogramInfo_reflection_;
  delete SpectrogramInfo::_default_msgname_;
  delete SpectrogramInfoEnvelope::default_instance_;
  delete SpectrogramInfoEnvelope_reflection_;
  delete SpectrogramInfoEnvelope::_default_msgname_;
  delete PSDInfo::default_instance_;
  delete PSDInfo_reflection_;
  delete PSDInfo::_default_msgname_;
  delete PSDInfoEnvelope::default_instance_;
  delete PSDInfoEnvelope_reflection_;
  delete PSDInfoEnvelope::_default_msgname_;
  delete EnergyBurstInfo::default_instance_;
  delete EnergyBurstInfo_reflection_;
  delete EnergyBurstInfo::_default_msgname_;
  delete EnergyBurstInfoEnvelope::default_instance_;
  delete EnergyBurstInfoEnvelope_reflection_;
  delete EnergyBurstInfoEnvelope::_default_msgname_;
  delete EnergyBurstInfoEnvelope::_default_metafilename_;
  delete EnergyBurstInfoEnvelope::_default_iqindexfilename_;
  delete PDWInfo::default_instance_;
  delete PDWInfo_reflection_;
  delete PDWInfo::_default_msgname_;
  delete PDWInfoEnvelope::default_instance_;
  delete PDWInfoEnvelope_reflection_;
  delete PDWInfoEnvelope::_default_msgname_;
  delete PDWInfoEnvelope::_default_segmentername_;
  delete PDWInfoEnvelope::_default_metafilename_;
  delete PDWInfoEnvelope::_default_iqindexfilename_;
}

void protobuf_AddDesc_RXDataPlaneMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tuner_msg::protobuf_AddDesc_TunerMessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031RXDataPlaneMessages.proto\022\017rxdataplane"
    "_msg\032\023TunerMessages.proto\"\310\003\n\rDataPlaneI"
    "nfo\022\036\n\007msgName\030\001 \001(\t:\rDATAPLANEINFO\022)\n\010I"
    "QHeader\030\002 \001(\0132\027.tuner_msg.IQHeaderInfo\022%"
    "\n\010snapInfo\030\003 \001(\0132\023.tuner_msg.SnapInfo\022E\n"
    "\023spectrogramEnvelope\030\004 \001(\0132(.rxdataplane"
    "_msg.SpectrogramInfoEnvelope\0225\n\013PSDEnvel"
    "ope\030\005 \001(\0132 .rxdataplane_msg.PSDInfoEnvel"
    "ope\022E\n\023energyBurstEnvelope\030\006 \001(\0132(.rxdat"
    "aplane_msg.EnergyBurstInfoEnvelope\022I\n\025si"
    "ngleChannelEnvelope\030\007 \001(\0132*.rxdataplane_"
    "msg.SingleChannelInfoEnvelope\0225\n\013pdwEnve"
    "lope\030\010 \001(\0132 .rxdataplane_msg.PDWInfoEnve"
    "lope\"\215\001\n\031SingleChannelInfoEnvelope\022*\n\007ms"
    "gName\030\001 \001(\t:\031SINGLECHANNELINFOENVELOPE\022\016"
    "\n\006snapid\030\002 \001(\t\0224\n\010chanInfo\030\003 \003(\0132\".rxdat"
    "aplane_msg.SingleChannelInfo\"\226\001\n\021SingleC"
    "hannelInfo\022\"\n\007msgName\030\001 \001(\t:\021SINGLECHANN"
    "ELINFO\022)\n\010IQHeader\030\002 \001(\0132\027.tuner_msg.IQH"
    "eaderInfo\022\022\n\nsubChannel\030\003 \001(\005\022\013\n\003aux\030\004 \001"
    "(\005\022\021\n\tfileIndex\030\005 \001(\005\"\313\001\n\017SpectrogramInf"
    "o\022 \n\007msgName\030\001 \001(\t:\017SPECTROGRAMINFO\022\020\n\010f"
    "ileName\030\002 \001(\t\022\016\n\006freqRF\030\003 \001(\001\022\021\n\tstartFr"
    "eq\030\004 \001(\001\022\020\n\010stopFreq\030\005 \001(\001\022\014\n\004bins\030\006 \001(\005"
    "\022\025\n\rbinResolution\030\007 \001(\001\022\020\n\010averages\030\010 \001("
    "\001\022\030\n\020spectrogram_time\030\t \001(\t\"\216\001\n\027Spectrog"
    "ramInfoEnvelope\022(\n\007msgName\030\001 \001(\t:\027SPECTR"
    "OGRAMINFOENVELOPE\022\016\n\006snapid\030\002 \001(\t\0229\n\017spe"
    "ctrogramInfo\030\003 \003(\0132 .rxdataplane_msg.Spe"
    "ctrogramInfo\"\223\001\n\007PSDInfo\022\030\n\007msgName\030\001 \001("
    "\t:\007PSDINFO\022\020\n\010fileName\030\002 \001(\t\022\016\n\006freqRF\030\003"
    " \001(\001\022\021\n\tstartFreq\030\004 \001(\001\022\020\n\010stopFreq\030\005 \001("
    "\001\022\025\n\rbinResolution\030\006 \001(\001\022\020\n\010psd_time\030\007 \001"
    "(\t\"n\n\017PSDInfoEnvelope\022 \n\007msgName\030\001 \001(\t:\017"
    "PSDINFOENVELOPE\022\016\n\006snapid\030\002 \001(\t\022)\n\007psdIn"
    "fo\030\003 \003(\0132\030.rxdataplane_msg.PSDInfo\"\232\001\n\017E"
    "nergyBurstInfo\022 \n\007msgName\030\001 \001(\t:\017ENERGYB"
    "URSTINFO\022\021\n\twhole_sec\030\002 \001(\001\022\020\n\010frac_sec\030"
    "\003 \001(\001\022\020\n\010duration\030\004 \001(\001\022\016\n\006freqRF\030\005 \001(\001\022"
    "\021\n\tbandwidth\030\006 \001(\001\022\013\n\003snr\030\007 \001(\001\"\204\002\n\027Ener"
    "gyBurstInfoEnvelope\022(\n\007msgName\030\001 \001(\t:\027EN"
    "ERGYBURSTINFOENVELOPE\022\016\n\006snapid\030\002 \001(\t\0226\n"
    "\014energyBursts\030\003 \003(\0132 .rxdataplane_msg.En"
    "ergyBurstInfo\022\022\n\ntimeResSec\030\004 \001(\001\022\021\n\tfre"
    "qResHz\030\005 \001(\001\022\025\n\rsegmenterName\030\006 \001(\t\022\032\n\014m"
    "etaFilename\030\007 \001(\t:\004NONE\022\035\n\017iqIndexFilena"
    "me\030\010 \001(\t:\004NONE\"\253\002\n\007PDWInfo\022\030\n\007msgName\030\001 "
    "\001(\t:\007PDWINFO\022\023\n\013toaWholeSec\030\002 \001(\004\022\022\n\ntoa"
    "FracSec\030\003 \001(\001\022\020\n\010pulseDur\030\004 \001(\001\022\013\n\003gap\030\005"
    " \001(\001\022\016\n\006freqRF\030\006 \001(\001\022\021\n\tbandwidth\030\007 \001(\001\022"
    "\021\n\tfreqSlope\030\010 \001(\001\022\013\n\003snr\030\t \001(\001\022\n\n\002az\030\n "
    "\001(\001\022\n\n\002el\030\013 \001(\001\022\013\n\003dfQ\030\014 \001(\001\022\r\n\005polAR\030\r "
    "\001(\001\022\017\n\007polTilt\030\016 \001(\001\0226\n\007modType\030\017 \001(\0162\037."
    "rxdataplane_msg.ModulationType:\004NONE\"\304\001\n"
    "\017PDWInfoEnvelope\022 \n\007msgName\030\001 \001(\t:\017PDWIN"
    "FOENVELOPE\022\016\n\006snapid\030\002 \001(\t\022&\n\004pdws\030\003 \003(\013"
    "2\030.rxdataplane_msg.PDWInfo\022\034\n\rsegmenterN"
    "ame\030\004 \001(\t:\005RADAR\022\032\n\014metaFilename\030\005 \001(\t:\004"
    "NONE\022\035\n\017iqIndexFilename\030\006 \001(\t:\004NONE*\?\n\016M"
    "odulationType\022\010\n\004NONE\020\000\022\013\n\007UNKNOWN\020\001\022\n\n\006"
    "LFM_UP\020\002\022\n\n\006LFM_DN\020\003", 2420);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RXDataPlaneMessages.proto", &protobuf_RegisterTypes);
  DataPlaneInfo::_default_msgname_ =
      new ::std::string("DATAPLANEINFO", 13);
  DataPlaneInfo::default_instance_ = new DataPlaneInfo();
  SingleChannelInfoEnvelope::_default_msgname_ =
      new ::std::string("SINGLECHANNELINFOENVELOPE", 25);
  SingleChannelInfoEnvelope::default_instance_ = new SingleChannelInfoEnvelope();
  SingleChannelInfo::_default_msgname_ =
      new ::std::string("SINGLECHANNELINFO", 17);
  SingleChannelInfo::default_instance_ = new SingleChannelInfo();
  SpectrogramInfo::_default_msgname_ =
      new ::std::string("SPECTROGRAMINFO", 15);
  SpectrogramInfo::default_instance_ = new SpectrogramInfo();
  SpectrogramInfoEnvelope::_default_msgname_ =
      new ::std::string("SPECTROGRAMINFOENVELOPE", 23);
  SpectrogramInfoEnvelope::default_instance_ = new SpectrogramInfoEnvelope();
  PSDInfo::_default_msgname_ =
      new ::std::string("PSDINFO", 7);
  PSDInfo::default_instance_ = new PSDInfo();
  PSDInfoEnvelope::_default_msgname_ =
      new ::std::string("PSDINFOENVELOPE", 15);
  PSDInfoEnvelope::default_instance_ = new PSDInfoEnvelope();
  EnergyBurstInfo::_default_msgname_ =
      new ::std::string("ENERGYBURSTINFO", 15);
  EnergyBurstInfo::default_instance_ = new EnergyBurstInfo();
  EnergyBurstInfoEnvelope::_default_msgname_ =
      new ::std::string("ENERGYBURSTINFOENVELOPE", 23);
  EnergyBurstInfoEnvelope::_default_metafilename_ =
      new ::std::string("NONE", 4);
  EnergyBurstInfoEnvelope::_default_iqindexfilename_ =
      new ::std::string("NONE", 4);
  EnergyBurstInfoEnvelope::default_instance_ = new EnergyBurstInfoEnvelope();
  PDWInfo::_default_msgname_ =
      new ::std::string("PDWINFO", 7);
  PDWInfo::default_instance_ = new PDWInfo();
  PDWInfoEnvelope::_default_msgname_ =
      new ::std::string("PDWINFOENVELOPE", 15);
  PDWInfoEnvelope::_default_segmentername_ =
      new ::std::string("RADAR", 5);
  PDWInfoEnvelope::_default_metafilename_ =
      new ::std::string("NONE", 4);
  PDWInfoEnvelope::_default_iqindexfilename_ =
      new ::std::string("NONE", 4);
  PDWInfoEnvelope::default_instance_ = new PDWInfoEnvelope();
  DataPlaneInfo::default_instance_->InitAsDefaultInstance();
  SingleChannelInfoEnvelope::default_instance_->InitAsDefaultInstance();
  SingleChannelInfo::default_instance_->InitAsDefaultInstance();
  SpectrogramInfo::default_instance_->InitAsDefaultInstance();
  SpectrogramInfoEnvelope::default_instance_->InitAsDefaultInstance();
  PSDInfo::default_instance_->InitAsDefaultInstance();
  PSDInfoEnvelope::default_instance_->InitAsDefaultInstance();
  EnergyBurstInfo::default_instance_->InitAsDefaultInstance();
  EnergyBurstInfoEnvelope::default_instance_->InitAsDefaultInstance();
  PDWInfo::default_instance_->InitAsDefaultInstance();
  PDWInfoEnvelope::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RXDataPlaneMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RXDataPlaneMessages_2eproto {
  StaticDescriptorInitializer_RXDataPlaneMessages_2eproto() {
    protobuf_AddDesc_RXDataPlaneMessages_2eproto();
  }
} static_descriptor_initializer_RXDataPlaneMessages_2eproto_;
const ::google::protobuf::EnumDescriptor* ModulationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModulationType_descriptor_;
}
bool ModulationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

::std::string* DataPlaneInfo::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int DataPlaneInfo::kMsgNameFieldNumber;
const int DataPlaneInfo::kIQHeaderFieldNumber;
const int DataPlaneInfo::kSnapInfoFieldNumber;
const int DataPlaneInfo::kSpectrogramEnvelopeFieldNumber;
const int DataPlaneInfo::kPSDEnvelopeFieldNumber;
const int DataPlaneInfo::kEnergyBurstEnvelopeFieldNumber;
const int DataPlaneInfo::kSingleChannelEnvelopeFieldNumber;
const int DataPlaneInfo::kPdwEnvelopeFieldNumber;
#endif  // !_MSC_VER

DataPlaneInfo::DataPlaneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataPlaneInfo::InitAsDefaultInstance() {
  iqheader_ = const_cast< ::tuner_msg::IQHeaderInfo*>(&::tuner_msg::IQHeaderInfo::default_instance());
  snapinfo_ = const_cast< ::tuner_msg::SnapInfo*>(&::tuner_msg::SnapInfo::default_instance());
  spectrogramenvelope_ = const_cast< ::rxdataplane_msg::SpectrogramInfoEnvelope*>(&::rxdataplane_msg::SpectrogramInfoEnvelope::default_instance());
  psdenvelope_ = const_cast< ::rxdataplane_msg::PSDInfoEnvelope*>(&::rxdataplane_msg::PSDInfoEnvelope::default_instance());
  energyburstenvelope_ = const_cast< ::rxdataplane_msg::EnergyBurstInfoEnvelope*>(&::rxdataplane_msg::EnergyBurstInfoEnvelope::default_instance());
  singlechannelenvelope_ = const_cast< ::rxdataplane_msg::SingleChannelInfoEnvelope*>(&::rxdataplane_msg::SingleChannelInfoEnvelope::default_instance());
  pdwenvelope_ = const_cast< ::rxdataplane_msg::PDWInfoEnvelope*>(&::rxdataplane_msg::PDWInfoEnvelope::default_instance());
}

DataPlaneInfo::DataPlaneInfo(const DataPlaneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataPlaneInfo::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  iqheader_ = NULL;
  snapinfo_ = NULL;
  spectrogramenvelope_ = NULL;
  psdenvelope_ = NULL;
  energyburstenvelope_ = NULL;
  singlechannelenvelope_ = NULL;
  pdwenvelope_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataPlaneInfo::~DataPlaneInfo() {
  SharedDtor();
}

void DataPlaneInfo::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete iqheader_;
    delete snapinfo_;
    delete spectrogramenvelope_;
    delete psdenvelope_;
    delete energyburstenvelope_;
    delete singlechannelenvelope_;
    delete pdwenvelope_;
  }
}

void DataPlaneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataPlaneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataPlaneInfo_descriptor_;
}

const DataPlaneInfo& DataPlaneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RXDataPlaneMessages_2eproto();
  return *default_instance_;
}

DataPlaneInfo* DataPlaneInfo::default_instance_ = NULL;

DataPlaneInfo* DataPlaneInfo::New() const {
  return new DataPlaneInfo;
}

void DataPlaneInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_iqheader()) {
      if (iqheader_ != NULL) iqheader_->::tuner_msg::IQHeaderInfo::Clear();
    }
    if (has_snapinfo()) {
      if (snapinfo_ != NULL) snapinfo_->::tuner_msg::SnapInfo::Clear();
    }
    if (has_spectrogramenvelope()) {
      if (spectrogramenvelope_ != NULL) spectrogramenvelope_->::rxdataplane_msg::SpectrogramInfoEnvelope::Clear();
    }
    if (has_psdenvelope()) {
      if (psdenvelope_ != NULL) psdenvelope_->::rxdataplane_msg::PSDInfoEnvelope::Clear();
    }
    if (has_energyburstenvelope()) {
      if (energyburstenvelope_ != NULL) energyburstenvelope_->::rxdataplane_msg::EnergyBurstInfoEnvelope::Clear();
    }
    if (has_singlechannelenvelope()) {
      if (singlechannelenvelope_ != NULL) singlechannelenvelope_->::rxdataplane_msg::SingleChannelInfoEnvelope::Clear();
    }
    if (has_pdwenvelope()) {
      if (pdwenvelope_ != NULL) pdwenvelope_->::rxdataplane_msg::PDWInfoEnvelope::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataPlaneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DATAPLANEINFO"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IQHeader;
        break;
      }

      // optional .tuner_msg.IQHeaderInfo IQHeader = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IQHeader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iqheader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_snapInfo;
        break;
      }

      // optional .tuner_msg.SnapInfo snapInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_spectrogramEnvelope;
        break;
      }

      // optional .rxdataplane_msg.SpectrogramInfoEnvelope spectrogramEnvelope = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spectrogramEnvelope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spectrogramenvelope()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_PSDEnvelope;
        break;
      }

      // optional .rxdataplane_msg.PSDInfoEnvelope PSDEnvelope = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PSDEnvelope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_psdenvelope()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_energyBurstEnvelope;
        break;
      }

      // optional .rxdataplane_msg.EnergyBurstInfoEnvelope energyBurstEnvelope = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_energyBurstEnvelope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_energyburstenvelope()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_singleChannelEnvelope;
        break;
      }

      // optional .rxdataplane_msg.SingleChannelInfoEnvelope singleChannelEnvelope = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_singleChannelEnvelope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_singlechannelenvelope()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pdwEnvelope;
        break;
      }

      // optional .rxdataplane_msg.PDWInfoEnvelope pdwEnvelope = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pdwEnvelope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pdwenvelope()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataPlaneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DATAPLANEINFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .tuner_msg.IQHeaderInfo IQHeader = 2;
  if (has_iqheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iqheader(), output);
  }

  // optional .tuner_msg.SnapInfo snapInfo = 3;
  if (has_snapinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->snapinfo(), output);
  }

  // optional .rxdataplane_msg.SpectrogramInfoEnvelope spectrogramEnvelope = 4;
  if (has_spectrogramenvelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->spectrogramenvelope(), output);
  }

  // optional .rxdataplane_msg.PSDInfoEnvelope PSDEnvelope = 5;
  if (has_psdenvelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->psdenvelope(), output);
  }

  // optional .rxdataplane_msg.EnergyBurstInfoEnvelope energyBurstEnvelope = 6;
  if (has_energyburstenvelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->energyburstenvelope(), output);
  }

  // optional .rxdataplane_msg.SingleChannelInfoEnvelope singleChannelEnvelope = 7;
  if (has_singlechannelenvelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->singlechannelenvelope(), output);
  }

  // optional .rxdataplane_msg.PDWInfoEnvelope pdwEnvelope = 8;
  if (has_pdwenvelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pdwenvelope(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataPlaneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DATAPLANEINFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .tuner_msg.IQHeaderInfo IQHeader = 2;
  if (has_iqheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iqheader(), target);
  }

  // optional .tuner_msg.SnapInfo snapInfo = 3;
  if (has_snapinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->snapinfo(), target);
  }

  // optional .rxdataplane_msg.SpectrogramInfoEnvelope spectrogramEnvelope = 4;
  if (has_spectrogramenvelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->spectrogramenvelope(), target);
  }

  // optional .rxdataplane_msg.PSDInfoEnvelope PSDEnvelope = 5;
  if (has_psdenvelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->psdenvelope(), target);
  }

  // optional .rxdataplane_msg.EnergyBurstInfoEnvelope energyBurstEnvelope = 6;
  if (has_energyburstenvelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->energyburstenvelope(), target);
  }

  // optional .rxdataplane_msg.SingleChannelInfoEnvelope singleChannelEnvelope = 7;
  if (has_singlechannelenvelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->singlechannelenvelope(), target);
  }

  // optional .rxdataplane_msg.PDWInfoEnvelope pdwEnvelope = 8;
  if (has_pdwenvelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pdwenvelope(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataPlaneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DATAPLANEINFO"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .tuner_msg.IQHeaderInfo IQHeader = 2;
    if (has_iqheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iqheader());
    }

    // optional .tuner_msg.SnapInfo snapInfo = 3;
    if (has_snapinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snapinfo());
    }

    // optional .rxdataplane_msg.SpectrogramInfoEnvelope spectrogramEnvelope = 4;
    if (has_spectrogramenvelope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spectrogramenvelope());
    }

    // optional .rxdataplane_msg.PSDInfoEnvelope PSDEnvelope = 5;
    if (has_psdenvelope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->psdenvelope());
    }

    // optional .rxdataplane_msg.EnergyBurstInfoEnvelope energyBurstEnvelope = 6;
    if (has_energyburstenvelope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->energyburstenvelope());
    }

    // optional .rxdataplane_msg.SingleChannelInfoEnvelope singleChannelEnvelope = 7;
    if (has_singlechannelenvelope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->singlechannelenvelope());
    }

    // optional .rxdataplane_msg.PDWInfoEnvelope pdwEnvelope = 8;
    if (has_pdwenvelope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pdwenvelope());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataPlaneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataPlaneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataPlaneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataPlaneInfo::MergeFrom(const DataPlaneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_iqheader()) {
      mutable_iqheader()->::tuner_msg::IQHeaderInfo::MergeFrom(from.iqheader());
    }
    if (from.has_snapinfo()) {
      mutable_snapinfo()->::tuner_msg::SnapInfo::MergeFrom(from.snapinfo());
    }
    if (from.has_spectrogramenvelope()) {
      mutable_spectrogramenvelope()->::rxdataplane_msg::SpectrogramInfoEnvelope::MergeFrom(from.spectrogramenvelope());
    }
    if (from.has_psdenvelope()) {
      mutable_psdenvelope()->::rxdataplane_msg::PSDInfoEnvelope::MergeFrom(from.psdenvelope());
    }
    if (from.has_energyburstenvelope()) {
      mutable_energyburstenvelope()->::rxdataplane_msg::EnergyBurstInfoEnvelope::MergeFrom(from.energyburstenvelope());
    }
    if (from.has_singlechannelenvelope()) {
      mutable_singlechannelenvelope()->::rxdataplane_msg::SingleChannelInfoEnvelope::MergeFrom(from.singlechannelenvelope());
    }
    if (from.has_pdwenvelope()) {
      mutable_pdwenvelope()->::rxdataplane_msg::PDWInfoEnvelope::MergeFrom(from.pdwenvelope());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataPlaneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPlaneInfo::CopyFrom(const DataPlaneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPlaneInfo::IsInitialized() const {

  return true;
}

void DataPlaneInfo::Swap(DataPlaneInfo* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(iqheader_, other->iqheader_);
    std::swap(snapinfo_, other->snapinfo_);
    std::swap(spectrogramenvelope_, other->spectrogramenvelope_);
    std::swap(psdenvelope_, other->psdenvelope_);
    std::swap(energyburstenvelope_, other->energyburstenvelope_);
    std::swap(singlechannelenvelope_, other->singlechannelenvelope_);
    std::swap(pdwenvelope_, other->pdwenvelope_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataPlaneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataPlaneInfo_descriptor_;
  metadata.reflection = DataPlaneInfo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SingleChannelInfoEnvelope::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SingleChannelInfoEnvelope::kMsgNameFieldNumber;
const int SingleChannelInfoEnvelope::kSnapidFieldNumber;
const int SingleChannelInfoEnvelope::kChanInfoFieldNumber;
#endif  // !_MSC_VER

SingleChannelInfoEnvelope::SingleChannelInfoEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleChannelInfoEnvelope::InitAsDefaultInstance() {
}

SingleChannelInfoEnvelope::SingleChannelInfoEnvelope(const SingleChannelInfoEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleChannelInfoEnvelope::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  snapid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleChannelInfoEnvelope::~SingleChannelInfoEnvelope() {
  SharedDtor();
}

void SingleChannelInfoEnvelope::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (snapid_ != &::google::protobuf::internal::kEmptyString) {
    delete snapid_;
  }
  if (this != default_instance_) {
  }
}

void SingleChannelInfoEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleChannelInfoEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleChannelInfoEnvelope_descriptor_;
}

const SingleChannelInfoEnvelope& SingleChannelInfoEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RXDataPlaneMessages_2eproto();
  return *default_instance_;
}

SingleChannelInfoEnvelope* SingleChannelInfoEnvelope::default_instance_ = NULL;

SingleChannelInfoEnvelope* SingleChannelInfoEnvelope::New() const {
  return new SingleChannelInfoEnvelope;
}

void SingleChannelInfoEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_snapid()) {
      if (snapid_ != &::google::protobuf::internal::kEmptyString) {
        snapid_->clear();
      }
    }
  }
  chaninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleChannelInfoEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SINGLECHANNELINFOENVELOPE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_snapid;
        break;
      }

      // optional string snapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapid().data(), this->snapid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chanInfo;
        break;
      }

      // repeated .rxdataplane_msg.SingleChannelInfo chanInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chanInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chaninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chanInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleChannelInfoEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SINGLECHANNELINFOENVELOPE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string snapid = 2;
  if (has_snapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapid().data(), this->snapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->snapid(), output);
  }

  // repeated .rxdataplane_msg.SingleChannelInfo chanInfo = 3;
  for (int i = 0; i < this->chaninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chaninfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleChannelInfoEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SINGLECHANNELINFOENVELOPE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string snapid = 2;
  if (has_snapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapid().data(), this->snapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->snapid(), target);
  }

  // repeated .rxdataplane_msg.SingleChannelInfo chanInfo = 3;
  for (int i = 0; i < this->chaninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chaninfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleChannelInfoEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SINGLECHANNELINFOENVELOPE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string snapid = 2;
    if (has_snapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapid());
    }

  }
  // repeated .rxdataplane_msg.SingleChannelInfo chanInfo = 3;
  total_size += 1 * this->chaninfo_size();
  for (int i = 0; i < this->chaninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chaninfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleChannelInfoEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleChannelInfoEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleChannelInfoEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleChannelInfoEnvelope::MergeFrom(const SingleChannelInfoEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  chaninfo_.MergeFrom(from.chaninfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_snapid()) {
      set_snapid(from.snapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleChannelInfoEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleChannelInfoEnvelope::CopyFrom(const SingleChannelInfoEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleChannelInfoEnvelope::IsInitialized() const {

  return true;
}

void SingleChannelInfoEnvelope::Swap(SingleChannelInfoEnvelope* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(snapid_, other->snapid_);
    chaninfo_.Swap(&other->chaninfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleChannelInfoEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleChannelInfoEnvelope_descriptor_;
  metadata.reflection = SingleChannelInfoEnvelope_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SingleChannelInfo::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SingleChannelInfo::kMsgNameFieldNumber;
const int SingleChannelInfo::kIQHeaderFieldNumber;
const int SingleChannelInfo::kSubChannelFieldNumber;
const int SingleChannelInfo::kAuxFieldNumber;
const int SingleChannelInfo::kFileIndexFieldNumber;
#endif  // !_MSC_VER

SingleChannelInfo::SingleChannelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleChannelInfo::InitAsDefaultInstance() {
  iqheader_ = const_cast< ::tuner_msg::IQHeaderInfo*>(&::tuner_msg::IQHeaderInfo::default_instance());
}

SingleChannelInfo::SingleChannelInfo(const SingleChannelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleChannelInfo::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  iqheader_ = NULL;
  subchannel_ = 0;
  aux_ = 0;
  fileindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleChannelInfo::~SingleChannelInfo() {
  SharedDtor();
}

void SingleChannelInfo::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete iqheader_;
  }
}

void SingleChannelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleChannelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleChannelInfo_descriptor_;
}

const SingleChannelInfo& SingleChannelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RXDataPlaneMessages_2eproto();
  return *default_instance_;
}

SingleChannelInfo* SingleChannelInfo::default_instance_ = NULL;

SingleChannelInfo* SingleChannelInfo::New() const {
  return new SingleChannelInfo;
}

void SingleChannelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_iqheader()) {
      if (iqheader_ != NULL) iqheader_->::tuner_msg::IQHeaderInfo::Clear();
    }
    subchannel_ = 0;
    aux_ = 0;
    fileindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleChannelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SINGLECHANNELINFO"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IQHeader;
        break;
      }

      // optional .tuner_msg.IQHeaderInfo IQHeader = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IQHeader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iqheader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_subChannel;
        break;
      }

      // optional int32 subChannel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subchannel_)));
          set_has_subchannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_aux;
        break;
      }

      // optional int32 aux = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aux:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aux_)));
          set_has_aux();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fileIndex;
        break;
      }

      // optional int32 fileIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fileindex_)));
          set_has_fileindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleChannelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SINGLECHANNELINFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .tuner_msg.IQHeaderInfo IQHeader = 2;
  if (has_iqheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iqheader(), output);
  }

  // optional int32 subChannel = 3;
  if (has_subchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->subchannel(), output);
  }

  // optional int32 aux = 4;
  if (has_aux()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->aux(), output);
  }

  // optional int32 fileIndex = 5;
  if (has_fileindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fileindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleChannelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SINGLECHANNELINFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .tuner_msg.IQHeaderInfo IQHeader = 2;
  if (has_iqheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iqheader(), target);
  }

  // optional int32 subChannel = 3;
  if (has_subchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->subchannel(), target);
  }

  // optional int32 aux = 4;
  if (has_aux()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->aux(), target);
  }

  // optional int32 fileIndex = 5;
  if (has_fileindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fileindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleChannelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SINGLECHANNELINFO"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .tuner_msg.IQHeaderInfo IQHeader = 2;
    if (has_iqheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iqheader());
    }

    // optional int32 subChannel = 3;
    if (has_subchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subchannel());
    }

    // optional int32 aux = 4;
    if (has_aux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aux());
    }

    // optional int32 fileIndex = 5;
    if (has_fileindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fileindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleChannelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleChannelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleChannelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleChannelInfo::MergeFrom(const SingleChannelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_iqheader()) {
      mutable_iqheader()->::tuner_msg::IQHeaderInfo::MergeFrom(from.iqheader());
    }
    if (from.has_subchannel()) {
      set_subchannel(from.subchannel());
    }
    if (from.has_aux()) {
      set_aux(from.aux());
    }
    if (from.has_fileindex()) {
      set_fileindex(from.fileindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleChannelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleChannelInfo::CopyFrom(const SingleChannelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleChannelInfo::IsInitialized() const {

  return true;
}

void SingleChannelInfo::Swap(SingleChannelInfo* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(iqheader_, other->iqheader_);
    std::swap(subchannel_, other->subchannel_);
    std::swap(aux_, other->aux_);
    std::swap(fileindex_, other->fileindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleChannelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleChannelInfo_descriptor_;
  metadata.reflection = SingleChannelInfo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SpectrogramInfo::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SpectrogramInfo::kMsgNameFieldNumber;
const int SpectrogramInfo::kFileNameFieldNumber;
const int SpectrogramInfo::kFreqRFFieldNumber;
const int SpectrogramInfo::kStartFreqFieldNumber;
const int SpectrogramInfo::kStopFreqFieldNumber;
const int SpectrogramInfo::kBinsFieldNumber;
const int SpectrogramInfo::kBinResolutionFieldNumber;
const int SpectrogramInfo::kAveragesFieldNumber;
const int SpectrogramInfo::kSpectrogramTimeFieldNumber;
#endif  // !_MSC_VER

SpectrogramInfo::SpectrogramInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpectrogramInfo::InitAsDefaultInstance() {
}

SpectrogramInfo::SpectrogramInfo(const SpectrogramInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpectrogramInfo::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  freqrf_ = 0;
  startfreq_ = 0;
  stopfreq_ = 0;
  bins_ = 0;
  binresolution_ = 0;
  averages_ = 0;
  spectrogram_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpectrogramInfo::~SpectrogramInfo() {
  SharedDtor();
}

void SpectrogramInfo::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (spectrogram_time_ != &::google::protobuf::internal::kEmptyString) {
    delete spectrogram_time_;
  }
  if (this != default_instance_) {
  }
}

void SpectrogramInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpectrogramInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpectrogramInfo_descriptor_;
}

const SpectrogramInfo& SpectrogramInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RXDataPlaneMessages_2eproto();
  return *default_instance_;
}

SpectrogramInfo* SpectrogramInfo::default_instance_ = NULL;

SpectrogramInfo* SpectrogramInfo::New() const {
  return new SpectrogramInfo;
}

void SpectrogramInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    freqrf_ = 0;
    startfreq_ = 0;
    stopfreq_ = 0;
    bins_ = 0;
    binresolution_ = 0;
    averages_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_spectrogram_time()) {
      if (spectrogram_time_ != &::google::protobuf::internal::kEmptyString) {
        spectrogram_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpectrogramInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SPECTROGRAMINFO"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fileName;
        break;
      }

      // optional string fileName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_freqRF;
        break;
      }

      // optional double freqRF = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freqRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freqrf_)));
          set_has_freqrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_startFreq;
        break;
      }

      // optional double startFreq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_startFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startfreq_)));
          set_has_startfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_stopFreq;
        break;
      }

      // optional double stopFreq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stopFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stopfreq_)));
          set_has_stopfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bins;
        break;
      }

      // optional int32 bins = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bins_)));
          set_has_bins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_binResolution;
        break;
      }

      // optional double binResolution = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_binResolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &binresolution_)));
          set_has_binresolution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_averages;
        break;
      }

      // optional double averages = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_averages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &averages_)));
          set_has_averages();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_spectrogram_time;
        break;
      }

      // optional string spectrogram_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spectrogram_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spectrogram_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spectrogram_time().data(), this->spectrogram_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpectrogramInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SPECTROGRAMINFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string fileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // optional double freqRF = 3;
  if (has_freqrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->freqrf(), output);
  }

  // optional double startFreq = 4;
  if (has_startfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->startfreq(), output);
  }

  // optional double stopFreq = 5;
  if (has_stopfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->stopfreq(), output);
  }

  // optional int32 bins = 6;
  if (has_bins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bins(), output);
  }

  // optional double binResolution = 7;
  if (has_binresolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->binresolution(), output);
  }

  // optional double averages = 8;
  if (has_averages()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->averages(), output);
  }

  // optional string spectrogram_time = 9;
  if (has_spectrogram_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spectrogram_time().data(), this->spectrogram_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->spectrogram_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpectrogramInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SPECTROGRAMINFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string fileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional double freqRF = 3;
  if (has_freqrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->freqrf(), target);
  }

  // optional double startFreq = 4;
  if (has_startfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->startfreq(), target);
  }

  // optional double stopFreq = 5;
  if (has_stopfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->stopfreq(), target);
  }

  // optional int32 bins = 6;
  if (has_bins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bins(), target);
  }

  // optional double binResolution = 7;
  if (has_binresolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->binresolution(), target);
  }

  // optional double averages = 8;
  if (has_averages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->averages(), target);
  }

  // optional string spectrogram_time = 9;
  if (has_spectrogram_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spectrogram_time().data(), this->spectrogram_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->spectrogram_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpectrogramInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SPECTROGRAMINFO"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string fileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional double freqRF = 3;
    if (has_freqrf()) {
      total_size += 1 + 8;
    }

    // optional double startFreq = 4;
    if (has_startfreq()) {
      total_size += 1 + 8;
    }

    // optional double stopFreq = 5;
    if (has_stopfreq()) {
      total_size += 1 + 8;
    }

    // optional int32 bins = 6;
    if (has_bins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bins());
    }

    // optional double binResolution = 7;
    if (has_binresolution()) {
      total_size += 1 + 8;
    }

    // optional double averages = 8;
    if (has_averages()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string spectrogram_time = 9;
    if (has_spectrogram_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spectrogram_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpectrogramInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpectrogramInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpectrogramInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpectrogramInfo::MergeFrom(const SpectrogramInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_freqrf()) {
      set_freqrf(from.freqrf());
    }
    if (from.has_startfreq()) {
      set_startfreq(from.startfreq());
    }
    if (from.has_stopfreq()) {
      set_stopfreq(from.stopfreq());
    }
    if (from.has_bins()) {
      set_bins(from.bins());
    }
    if (from.has_binresolution()) {
      set_binresolution(from.binresolution());
    }
    if (from.has_averages()) {
      set_averages(from.averages());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_spectrogram_time()) {
      set_spectrogram_time(from.spectrogram_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpectrogramInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpectrogramInfo::CopyFrom(const SpectrogramInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpectrogramInfo::IsInitialized() const {

  return true;
}

void SpectrogramInfo::Swap(SpectrogramInfo* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(filename_, other->filename_);
    std::swap(freqrf_, other->freqrf_);
    std::swap(startfreq_, other->startfreq_);
    std::swap(stopfreq_, other->stopfreq_);
    std::swap(bins_, other->bins_);
    std::swap(binresolution_, other->binresolution_);
    std::swap(averages_, other->averages_);
    std::swap(spectrogram_time_, other->spectrogram_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpectrogramInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpectrogramInfo_descriptor_;
  metadata.reflection = SpectrogramInfo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SpectrogramInfoEnvelope::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SpectrogramInfoEnvelope::kMsgNameFieldNumber;
const int SpectrogramInfoEnvelope::kSnapidFieldNumber;
const int SpectrogramInfoEnvelope::kSpectrogramInfoFieldNumber;
#endif  // !_MSC_VER

SpectrogramInfoEnvelope::SpectrogramInfoEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpectrogramInfoEnvelope::InitAsDefaultInstance() {
}

SpectrogramInfoEnvelope::SpectrogramInfoEnvelope(const SpectrogramInfoEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpectrogramInfoEnvelope::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  snapid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpectrogramInfoEnvelope::~SpectrogramInfoEnvelope() {
  SharedDtor();
}

void SpectrogramInfoEnvelope::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (snapid_ != &::google::protobuf::internal::kEmptyString) {
    delete snapid_;
  }
  if (this != default_instance_) {
  }
}

void SpectrogramInfoEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpectrogramInfoEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpectrogramInfoEnvelope_descriptor_;
}

const SpectrogramInfoEnvelope& SpectrogramInfoEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RXDataPlaneMessages_2eproto();
  return *default_instance_;
}

SpectrogramInfoEnvelope* SpectrogramInfoEnvelope::default_instance_ = NULL;

SpectrogramInfoEnvelope* SpectrogramInfoEnvelope::New() const {
  return new SpectrogramInfoEnvelope;
}

void SpectrogramInfoEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_snapid()) {
      if (snapid_ != &::google::protobuf::internal::kEmptyString) {
        snapid_->clear();
      }
    }
  }
  spectrograminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpectrogramInfoEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SPECTROGRAMINFOENVELOPE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_snapid;
        break;
      }

      // optional string snapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapid().data(), this->snapid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_spectrogramInfo;
        break;
      }

      // repeated .rxdataplane_msg.SpectrogramInfo spectrogramInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spectrogramInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spectrograminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_spectrogramInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpectrogramInfoEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SPECTROGRAMINFOENVELOPE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string snapid = 2;
  if (has_snapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapid().data(), this->snapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->snapid(), output);
  }

  // repeated .rxdataplane_msg.SpectrogramInfo spectrogramInfo = 3;
  for (int i = 0; i < this->spectrograminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->spectrograminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpectrogramInfoEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SPECTROGRAMINFOENVELOPE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string snapid = 2;
  if (has_snapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapid().data(), this->snapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->snapid(), target);
  }

  // repeated .rxdataplane_msg.SpectrogramInfo spectrogramInfo = 3;
  for (int i = 0; i < this->spectrograminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->spectrograminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpectrogramInfoEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SPECTROGRAMINFOENVELOPE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string snapid = 2;
    if (has_snapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapid());
    }

  }
  // repeated .rxdataplane_msg.SpectrogramInfo spectrogramInfo = 3;
  total_size += 1 * this->spectrograminfo_size();
  for (int i = 0; i < this->spectrograminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spectrograminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpectrogramInfoEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpectrogramInfoEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpectrogramInfoEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpectrogramInfoEnvelope::MergeFrom(const SpectrogramInfoEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  spectrograminfo_.MergeFrom(from.spectrograminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_snapid()) {
      set_snapid(from.snapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpectrogramInfoEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpectrogramInfoEnvelope::CopyFrom(const SpectrogramInfoEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpectrogramInfoEnvelope::IsInitialized() const {

  return true;
}

void SpectrogramInfoEnvelope::Swap(SpectrogramInfoEnvelope* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(snapid_, other->snapid_);
    spectrograminfo_.Swap(&other->spectrograminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpectrogramInfoEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpectrogramInfoEnvelope_descriptor_;
  metadata.reflection = SpectrogramInfoEnvelope_reflection_;
  return metadata;
}


// ===================================================================

::std::string* PSDInfo::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int PSDInfo::kMsgNameFieldNumber;
const int PSDInfo::kFileNameFieldNumber;
const int PSDInfo::kFreqRFFieldNumber;
const int PSDInfo::kStartFreqFieldNumber;
const int PSDInfo::kStopFreqFieldNumber;
const int PSDInfo::kBinResolutionFieldNumber;
const int PSDInfo::kPsdTimeFieldNumber;
#endif  // !_MSC_VER

PSDInfo::PSDInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PSDInfo::InitAsDefaultInstance() {
}

PSDInfo::PSDInfo(const PSDInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PSDInfo::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  freqrf_ = 0;
  startfreq_ = 0;
  stopfreq_ = 0;
  binresolution_ = 0;
  psd_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PSDInfo::~PSDInfo() {
  SharedDtor();
}

void PSDInfo::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (psd_time_ != &::google::protobuf::internal::kEmptyString) {
    delete psd_time_;
  }
  if (this != default_instance_) {
  }
}

void PSDInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PSDInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PSDInfo_descriptor_;
}

const PSDInfo& PSDInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RXDataPlaneMessages_2eproto();
  return *default_instance_;
}

PSDInfo* PSDInfo::default_instance_ = NULL;

PSDInfo* PSDInfo::New() const {
  return new PSDInfo;
}

void PSDInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    freqrf_ = 0;
    startfreq_ = 0;
    stopfreq_ = 0;
    binresolution_ = 0;
    if (has_psd_time()) {
      if (psd_time_ != &::google::protobuf::internal::kEmptyString) {
        psd_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PSDInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "PSDINFO"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fileName;
        break;
      }

      // optional string fileName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_freqRF;
        break;
      }

      // optional double freqRF = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freqRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freqrf_)));
          set_has_freqrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_startFreq;
        break;
      }

      // optional double startFreq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_startFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startfreq_)));
          set_has_startfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_stopFreq;
        break;
      }

      // optional double stopFreq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stopFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stopfreq_)));
          set_has_stopfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_binResolution;
        break;
      }

      // optional double binResolution = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_binResolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &binresolution_)));
          set_has_binresolution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_psd_time;
        break;
      }

      // optional string psd_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psd_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_psd_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->psd_time().data(), this->psd_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PSDInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "PSDINFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string fileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // optional double freqRF = 3;
  if (has_freqrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->freqrf(), output);
  }

  // optional double startFreq = 4;
  if (has_startfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->startfreq(), output);
  }

  // optional double stopFreq = 5;
  if (has_stopfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->stopfreq(), output);
  }

  // optional double binResolution = 6;
  if (has_binresolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->binresolution(), output);
  }

  // optional string psd_time = 7;
  if (has_psd_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psd_time().data(), this->psd_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->psd_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PSDInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "PSDINFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string fileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional double freqRF = 3;
  if (has_freqrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->freqrf(), target);
  }

  // optional double startFreq = 4;
  if (has_startfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->startfreq(), target);
  }

  // optional double stopFreq = 5;
  if (has_stopfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->stopfreq(), target);
  }

  // optional double binResolution = 6;
  if (has_binresolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->binresolution(), target);
  }

  // optional string psd_time = 7;
  if (has_psd_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psd_time().data(), this->psd_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->psd_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PSDInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "PSDINFO"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string fileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional double freqRF = 3;
    if (has_freqrf()) {
      total_size += 1 + 8;
    }

    // optional double startFreq = 4;
    if (has_startfreq()) {
      total_size += 1 + 8;
    }

    // optional double stopFreq = 5;
    if (has_stopfreq()) {
      total_size += 1 + 8;
    }

    // optional double binResolution = 6;
    if (has_binresolution()) {
      total_size += 1 + 8;
    }

    // optional string psd_time = 7;
    if (has_psd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->psd_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSDInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PSDInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PSDInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PSDInfo::MergeFrom(const PSDInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_freqrf()) {
      set_freqrf(from.freqrf());
    }
    if (from.has_startfreq()) {
      set_startfreq(from.startfreq());
    }
    if (from.has_stopfreq()) {
      set_stopfreq(from.stopfreq());
    }
    if (from.has_binresolution()) {
      set_binresolution(from.binresolution());
    }
    if (from.has_psd_time()) {
      set_psd_time(from.psd_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PSDInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSDInfo::CopyFrom(const PSDInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSDInfo::IsInitialized() const {

  return true;
}

void PSDInfo::Swap(PSDInfo* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(filename_, other->filename_);
    std::swap(freqrf_, other->freqrf_);
    std::swap(startfreq_, other->startfreq_);
    std::swap(stopfreq_, other->stopfreq_);
    std::swap(binresolution_, other->binresolution_);
    std::swap(psd_time_, other->psd_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PSDInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PSDInfo_descriptor_;
  metadata.reflection = PSDInfo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* PSDInfoEnvelope::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int PSDInfoEnvelope::kMsgNameFieldNumber;
const int PSDInfoEnvelope::kSnapidFieldNumber;
const int PSDInfoEnvelope::kPsdInfoFieldNumber;
#endif  // !_MSC_VER

PSDInfoEnvelope::PSDInfoEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PSDInfoEnvelope::InitAsDefaultInstance() {
}

PSDInfoEnvelope::PSDInfoEnvelope(const PSDInfoEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PSDInfoEnvelope::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  snapid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PSDInfoEnvelope::~PSDInfoEnvelope() {
  SharedDtor();
}

void PSDInfoEnvelope::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (snapid_ != &::google::protobuf::internal::kEmptyString) {
    delete snapid_;
  }
  if (this != default_instance_) {
  }
}

void PSDInfoEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PSDInfoEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PSDInfoEnvelope_descriptor_;
}

const PSDInfoEnvelope& PSDInfoEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RXDataPlaneMessages_2eproto();
  return *default_instance_;
}

PSDInfoEnvelope* PSDInfoEnvelope::default_instance_ = NULL;

PSDInfoEnvelope* PSDInfoEnvelope::New() const {
  return new PSDInfoEnvelope;
}

void PSDInfoEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_snapid()) {
      if (snapid_ != &::google::protobuf::internal::kEmptyString) {
        snapid_->clear();
      }
    }
  }
  psdinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PSDInfoEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "PSDINFOENVELOPE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_snapid;
        break;
      }

      // optional string snapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapid().data(), this->snapid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_psdInfo;
        break;
      }

      // repeated .rxdataplane_msg.PSDInfo psdInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psdInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_psdinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_psdInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PSDInfoEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "PSDINFOENVELOPE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string snapid = 2;
  if (has_snapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapid().data(), this->snapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->snapid(), output);
  }

  // repeated .rxdataplane_msg.PSDInfo psdInfo = 3;
  for (int i = 0; i < this->psdinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->psdinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PSDInfoEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "PSDINFOENVELOPE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string snapid = 2;
  if (has_snapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapid().data(), this->snapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->snapid(), target);
  }

  // repeated .rxdataplane_msg.PSDInfo psdInfo = 3;
  for (int i = 0; i < this->psdinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->psdinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PSDInfoEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "PSDINFOENVELOPE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string snapid = 2;
    if (has_snapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapid());
    }

  }
  // repeated .rxdataplane_msg.PSDInfo psdInfo = 3;
  total_size += 1 * this->psdinfo_size();
  for (int i = 0; i < this->psdinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->psdinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSDInfoEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PSDInfoEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PSDInfoEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PSDInfoEnvelope::MergeFrom(const PSDInfoEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  psdinfo_.MergeFrom(from.psdinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_snapid()) {
      set_snapid(from.snapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PSDInfoEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSDInfoEnvelope::CopyFrom(const PSDInfoEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSDInfoEnvelope::IsInitialized() const {

  return true;
}

void PSDInfoEnvelope::Swap(PSDInfoEnvelope* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(snapid_, other->snapid_);
    psdinfo_.Swap(&other->psdinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PSDInfoEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PSDInfoEnvelope_descriptor_;
  metadata.reflection = PSDInfoEnvelope_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EnergyBurstInfo::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EnergyBurstInfo::kMsgNameFieldNumber;
const int EnergyBurstInfo::kWholeSecFieldNumber;
const int EnergyBurstInfo::kFracSecFieldNumber;
const int EnergyBurstInfo::kDurationFieldNumber;
const int EnergyBurstInfo::kFreqRFFieldNumber;
const int EnergyBurstInfo::kBandwidthFieldNumber;
const int EnergyBurstInfo::kSnrFieldNumber;
#endif  // !_MSC_VER

EnergyBurstInfo::EnergyBurstInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnergyBurstInfo::InitAsDefaultInstance() {
}

EnergyBurstInfo::EnergyBurstInfo(const EnergyBurstInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnergyBurstInfo::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  whole_sec_ = 0;
  frac_sec_ = 0;
  duration_ = 0;
  freqrf_ = 0;
  bandwidth_ = 0;
  snr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnergyBurstInfo::~EnergyBurstInfo() {
  SharedDtor();
}

void EnergyBurstInfo::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void EnergyBurstInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnergyBurstInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnergyBurstInfo_descriptor_;
}

const EnergyBurstInfo& EnergyBurstInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RXDataPlaneMessages_2eproto();
  return *default_instance_;
}

EnergyBurstInfo* EnergyBurstInfo::default_instance_ = NULL;

EnergyBurstInfo* EnergyBurstInfo::New() const {
  return new EnergyBurstInfo;
}

void EnergyBurstInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    whole_sec_ = 0;
    frac_sec_ = 0;
    duration_ = 0;
    freqrf_ = 0;
    bandwidth_ = 0;
    snr_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnergyBurstInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ENERGYBURSTINFO"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_whole_sec;
        break;
      }

      // optional double whole_sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_whole_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &whole_sec_)));
          set_has_whole_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_frac_sec;
        break;
      }

      // optional double frac_sec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_frac_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frac_sec_)));
          set_has_frac_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_duration;
        break;
      }

      // optional double duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_freqRF;
        break;
      }

      // optional double freqRF = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freqRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freqrf_)));
          set_has_freqrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_bandwidth;
        break;
      }

      // optional double bandwidth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_snr;
        break;
      }

      // optional double snr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_snr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &snr_)));
          set_has_snr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnergyBurstInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ENERGYBURSTINFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double whole_sec = 2;
  if (has_whole_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->whole_sec(), output);
  }

  // optional double frac_sec = 3;
  if (has_frac_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->frac_sec(), output);
  }

  // optional double duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->duration(), output);
  }

  // optional double freqRF = 5;
  if (has_freqrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->freqrf(), output);
  }

  // optional double bandwidth = 6;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->bandwidth(), output);
  }

  // optional double snr = 7;
  if (has_snr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->snr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnergyBurstInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ENERGYBURSTINFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double whole_sec = 2;
  if (has_whole_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->whole_sec(), target);
  }

  // optional double frac_sec = 3;
  if (has_frac_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->frac_sec(), target);
  }

  // optional double duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->duration(), target);
  }

  // optional double freqRF = 5;
  if (has_freqrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->freqrf(), target);
  }

  // optional double bandwidth = 6;
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->bandwidth(), target);
  }

  // optional double snr = 7;
  if (has_snr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->snr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnergyBurstInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ENERGYBURSTINFO"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double whole_sec = 2;
    if (has_whole_sec()) {
      total_size += 1 + 8;
    }

    // optional double frac_sec = 3;
    if (has_frac_sec()) {
      total_size += 1 + 8;
    }

    // optional double duration = 4;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional double freqRF = 5;
    if (has_freqrf()) {
      total_size += 1 + 8;
    }

    // optional double bandwidth = 6;
    if (has_bandwidth()) {
      total_size += 1 + 8;
    }

    // optional double snr = 7;
    if (has_snr()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnergyBurstInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnergyBurstInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnergyBurstInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnergyBurstInfo::MergeFrom(const EnergyBurstInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_whole_sec()) {
      set_whole_sec(from.whole_sec());
    }
    if (from.has_frac_sec()) {
      set_frac_sec(from.frac_sec());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_freqrf()) {
      set_freqrf(from.freqrf());
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
    if (from.has_snr()) {
      set_snr(from.snr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnergyBurstInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnergyBurstInfo::CopyFrom(const EnergyBurstInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnergyBurstInfo::IsInitialized() const {

  return true;
}

void EnergyBurstInfo::Swap(EnergyBurstInfo* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(whole_sec_, other->whole_sec_);
    std::swap(frac_sec_, other->frac_sec_);
    std::swap(duration_, other->duration_);
    std::swap(freqrf_, other->freqrf_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(snr_, other->snr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnergyBurstInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnergyBurstInfo_descriptor_;
  metadata.reflection = EnergyBurstInfo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EnergyBurstInfoEnvelope::_default_msgname_ = NULL;
::std::string* EnergyBurstInfoEnvelope::_default_metafilename_ = NULL;
::std::string* EnergyBurstInfoEnvelope::_default_iqindexfilename_ = NULL;
#ifndef _MSC_VER
const int EnergyBurstInfoEnvelope::kMsgNameFieldNumber;
const int EnergyBurstInfoEnvelope::kSnapidFieldNumber;
const int EnergyBurstInfoEnvelope::kEnergyBurstsFieldNumber;
const int EnergyBurstInfoEnvelope::kTimeResSecFieldNumber;
const int EnergyBurstInfoEnvelope::kFreqResHzFieldNumber;
const int EnergyBurstInfoEnvelope::kSegmenterNameFieldNumber;
const int EnergyBurstInfoEnvelope::kMetaFilenameFieldNumber;
const int EnergyBurstInfoEnvelope::kIqIndexFilenameFieldNumber;
#endif  // !_MSC_VER

EnergyBurstInfoEnvelope::EnergyBurstInfoEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnergyBurstInfoEnvelope::InitAsDefaultInstance() {
}

EnergyBurstInfoEnvelope::EnergyBurstInfoEnvelope(const EnergyBurstInfoEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnergyBurstInfoEnvelope::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  snapid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timeressec_ = 0;
  freqreshz_ = 0;
  segmentername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  metafilename_ = const_cast< ::std::string*>(_default_metafilename_);
  iqindexfilename_ = const_cast< ::std::string*>(_default_iqindexfilename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnergyBurstInfoEnvelope::~EnergyBurstInfoEnvelope() {
  SharedDtor();
}

void EnergyBurstInfoEnvelope::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (snapid_ != &::google::protobuf::internal::kEmptyString) {
    delete snapid_;
  }
  if (segmentername_ != &::google::protobuf::internal::kEmptyString) {
    delete segmentername_;
  }
  if (metafilename_ != _default_metafilename_) {
    delete metafilename_;
  }
  if (iqindexfilename_ != _default_iqindexfilename_) {
    delete iqindexfilename_;
  }
  if (this != default_instance_) {
  }
}

void EnergyBurstInfoEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnergyBurstInfoEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnergyBurstInfoEnvelope_descriptor_;
}

const EnergyBurstInfoEnvelope& EnergyBurstInfoEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RXDataPlaneMessages_2eproto();
  return *default_instance_;
}

EnergyBurstInfoEnvelope* EnergyBurstInfoEnvelope::default_instance_ = NULL;

EnergyBurstInfoEnvelope* EnergyBurstInfoEnvelope::New() const {
  return new EnergyBurstInfoEnvelope;
}

void EnergyBurstInfoEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_snapid()) {
      if (snapid_ != &::google::protobuf::internal::kEmptyString) {
        snapid_->clear();
      }
    }
    timeressec_ = 0;
    freqreshz_ = 0;
    if (has_segmentername()) {
      if (segmentername_ != &::google::protobuf::internal::kEmptyString) {
        segmentername_->clear();
      }
    }
    if (has_metafilename()) {
      if (metafilename_ != _default_metafilename_) {
        metafilename_->assign(*_default_metafilename_);
      }
    }
    if (has_iqindexfilename()) {
      if (iqindexfilename_ != _default_iqindexfilename_) {
        iqindexfilename_->assign(*_default_iqindexfilename_);
      }
    }
  }
  energybursts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnergyBurstInfoEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ENERGYBURSTINFOENVELOPE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_snapid;
        break;
      }

      // optional string snapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapid().data(), this->snapid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_energyBursts;
        break;
      }

      // repeated .rxdataplane_msg.EnergyBurstInfo energyBursts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_energyBursts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_energybursts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_energyBursts;
        if (input->ExpectTag(33)) goto parse_timeResSec;
        break;
      }

      // optional double timeResSec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timeResSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timeressec_)));
          set_has_timeressec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_freqResHz;
        break;
      }

      // optional double freqResHz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freqResHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freqreshz_)));
          set_has_freqreshz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_segmenterName;
        break;
      }

      // optional string segmenterName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_segmenterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_segmentername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->segmentername().data(), this->segmentername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_metaFilename;
        break;
      }

      // optional string metaFilename = 7 [default = "NONE"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metaFilename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metafilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->metafilename().data(), this->metafilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_iqIndexFilename;
        break;
      }

      // optional string iqIndexFilename = 8 [default = "NONE"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iqIndexFilename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iqindexfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iqindexfilename().data(), this->iqindexfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnergyBurstInfoEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ENERGYBURSTINFOENVELOPE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string snapid = 2;
  if (has_snapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapid().data(), this->snapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->snapid(), output);
  }

  // repeated .rxdataplane_msg.EnergyBurstInfo energyBursts = 3;
  for (int i = 0; i < this->energybursts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->energybursts(i), output);
  }

  // optional double timeResSec = 4;
  if (has_timeressec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->timeressec(), output);
  }

  // optional double freqResHz = 5;
  if (has_freqreshz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->freqreshz(), output);
  }

  // optional string segmenterName = 6;
  if (has_segmentername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->segmentername().data(), this->segmentername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->segmentername(), output);
  }

  // optional string metaFilename = 7 [default = "NONE"];
  if (has_metafilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metafilename().data(), this->metafilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->metafilename(), output);
  }

  // optional string iqIndexFilename = 8 [default = "NONE"];
  if (has_iqindexfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iqindexfilename().data(), this->iqindexfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->iqindexfilename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnergyBurstInfoEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ENERGYBURSTINFOENVELOPE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string snapid = 2;
  if (has_snapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapid().data(), this->snapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->snapid(), target);
  }

  // repeated .rxdataplane_msg.EnergyBurstInfo energyBursts = 3;
  for (int i = 0; i < this->energybursts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->energybursts(i), target);
  }

  // optional double timeResSec = 4;
  if (has_timeressec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->timeressec(), target);
  }

  // optional double freqResHz = 5;
  if (has_freqreshz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->freqreshz(), target);
  }

  // optional string segmenterName = 6;
  if (has_segmentername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->segmentername().data(), this->segmentername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->segmentername(), target);
  }

  // optional string metaFilename = 7 [default = "NONE"];
  if (has_metafilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metafilename().data(), this->metafilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->metafilename(), target);
  }

  // optional string iqIndexFilename = 8 [default = "NONE"];
  if (has_iqindexfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iqindexfilename().data(), this->iqindexfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->iqindexfilename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnergyBurstInfoEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ENERGYBURSTINFOENVELOPE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string snapid = 2;
    if (has_snapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapid());
    }

    // optional double timeResSec = 4;
    if (has_timeressec()) {
      total_size += 1 + 8;
    }

    // optional double freqResHz = 5;
    if (has_freqreshz()) {
      total_size += 1 + 8;
    }

    // optional string segmenterName = 6;
    if (has_segmentername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->segmentername());
    }

    // optional string metaFilename = 7 [default = "NONE"];
    if (has_metafilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metafilename());
    }

    // optional string iqIndexFilename = 8 [default = "NONE"];
    if (has_iqindexfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iqindexfilename());
    }

  }
  // repeated .rxdataplane_msg.EnergyBurstInfo energyBursts = 3;
  total_size += 1 * this->energybursts_size();
  for (int i = 0; i < this->energybursts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->energybursts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnergyBurstInfoEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnergyBurstInfoEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnergyBurstInfoEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnergyBurstInfoEnvelope::MergeFrom(const EnergyBurstInfoEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  energybursts_.MergeFrom(from.energybursts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_snapid()) {
      set_snapid(from.snapid());
    }
    if (from.has_timeressec()) {
      set_timeressec(from.timeressec());
    }
    if (from.has_freqreshz()) {
      set_freqreshz(from.freqreshz());
    }
    if (from.has_segmentername()) {
      set_segmentername(from.segmentername());
    }
    if (from.has_metafilename()) {
      set_metafilename(from.metafilename());
    }
    if (from.has_iqindexfilename()) {
      set_iqindexfilename(from.iqindexfilename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnergyBurstInfoEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnergyBurstInfoEnvelope::CopyFrom(const EnergyBurstInfoEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnergyBurstInfoEnvelope::IsInitialized() const {

  return true;
}

void EnergyBurstInfoEnvelope::Swap(EnergyBurstInfoEnvelope* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(snapid_, other->snapid_);
    energybursts_.Swap(&other->energybursts_);
    std::swap(timeressec_, other->timeressec_);
    std::swap(freqreshz_, other->freqreshz_);
    std::swap(segmentername_, other->segmentername_);
    std::swap(metafilename_, other->metafilename_);
    std::swap(iqindexfilename_, other->iqindexfilename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnergyBurstInfoEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnergyBurstInfoEnvelope_descriptor_;
  metadata.reflection = EnergyBurstInfoEnvelope_reflection_;
  return metadata;
}


// ===================================================================

::std::string* PDWInfo::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int PDWInfo::kMsgNameFieldNumber;
const int PDWInfo::kToaWholeSecFieldNumber;
const int PDWInfo::kToaFracSecFieldNumber;
const int PDWInfo::kPulseDurFieldNumber;
const int PDWInfo::kGapFieldNumber;
const int PDWInfo::kFreqRFFieldNumber;
const int PDWInfo::kBandwidthFieldNumber;
const int PDWInfo::kFreqSlopeFieldNumber;
const int PDWInfo::kSnrFieldNumber;
const int PDWInfo::kAzFieldNumber;
const int PDWInfo::kElFieldNumber;
const int PDWInfo::kDfQFieldNumber;
const int PDWInfo::kPolARFieldNumber;
const int PDWInfo::kPolTiltFieldNumber;
const int PDWInfo::kModTypeFieldNumber;
#endif  // !_MSC_VER

PDWInfo::PDWInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PDWInfo::InitAsDefaultInstance() {
}

PDWInfo::PDWInfo(const PDWInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PDWInfo::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  toawholesec_ = GOOGLE_ULONGLONG(0);
  toafracsec_ = 0;
  pulsedur_ = 0;
  gap_ = 0;
  freqrf_ = 0;
  bandwidth_ = 0;
  freqslope_ = 0;
  snr_ = 0;
  az_ = 0;
  el_ = 0;
  dfq_ = 0;
  polar_ = 0;
  poltilt_ = 0;
  modtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PDWInfo::~PDWInfo() {
  SharedDtor();
}

void PDWInfo::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void PDWInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PDWInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PDWInfo_descriptor_;
}

const PDWInfo& PDWInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RXDataPlaneMessages_2eproto();
  return *default_instance_;
}

PDWInfo* PDWInfo::default_instance_ = NULL;

PDWInfo* PDWInfo::New() const {
  return new PDWInfo;
}

void PDWInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    toawholesec_ = GOOGLE_ULONGLONG(0);
    toafracsec_ = 0;
    pulsedur_ = 0;
    gap_ = 0;
    freqrf_ = 0;
    bandwidth_ = 0;
    freqslope_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    snr_ = 0;
    az_ = 0;
    el_ = 0;
    dfq_ = 0;
    polar_ = 0;
    poltilt_ = 0;
    modtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PDWInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "PDWINFO"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_toaWholeSec;
        break;
      }

      // optional uint64 toaWholeSec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toaWholeSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &toawholesec_)));
          set_has_toawholesec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_toaFracSec;
        break;
      }

      // optional double toaFracSec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_toaFracSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &toafracsec_)));
          set_has_toafracsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_pulseDur;
        break;
      }

      // optional double pulseDur = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pulseDur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pulsedur_)));
          set_has_pulsedur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_gap;
        break;
      }

      // optional double gap = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gap_)));
          set_has_gap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_freqRF;
        break;
      }

      // optional double freqRF = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freqRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freqrf_)));
          set_has_freqrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_bandwidth;
        break;
      }

      // optional double bandwidth = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_freqSlope;
        break;
      }

      // optional double freqSlope = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freqSlope:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freqslope_)));
          set_has_freqslope();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_snr;
        break;
      }

      // optional double snr = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_snr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &snr_)));
          set_has_snr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_az;
        break;
      }

      // optional double az = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_az:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &az_)));
          set_has_az();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_el;
        break;
      }

      // optional double el = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_el:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &el_)));
          set_has_el();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_dfQ;
        break;
      }

      // optional double dfQ = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dfQ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dfq_)));
          set_has_dfq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_polAR;
        break;
      }

      // optional double polAR = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_polAR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &polar_)));
          set_has_polar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_polTilt;
        break;
      }

      // optional double polTilt = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_polTilt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &poltilt_)));
          set_has_poltilt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_modType;
        break;
      }

      // optional .rxdataplane_msg.ModulationType modType = 15 [default = NONE];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rxdataplane_msg::ModulationType_IsValid(value)) {
            set_modtype(static_cast< ::rxdataplane_msg::ModulationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PDWInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "PDWINFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional uint64 toaWholeSec = 2;
  if (has_toawholesec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->toawholesec(), output);
  }

  // optional double toaFracSec = 3;
  if (has_toafracsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->toafracsec(), output);
  }

  // optional double pulseDur = 4;
  if (has_pulsedur()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pulsedur(), output);
  }

  // optional double gap = 5;
  if (has_gap()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->gap(), output);
  }

  // optional double freqRF = 6;
  if (has_freqrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->freqrf(), output);
  }

  // optional double bandwidth = 7;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->bandwidth(), output);
  }

  // optional double freqSlope = 8;
  if (has_freqslope()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->freqslope(), output);
  }

  // optional double snr = 9;
  if (has_snr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->snr(), output);
  }

  // optional double az = 10;
  if (has_az()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->az(), output);
  }

  // optional double el = 11;
  if (has_el()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->el(), output);
  }

  // optional double dfQ = 12;
  if (has_dfq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->dfq(), output);
  }

  // optional double polAR = 13;
  if (has_polar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->polar(), output);
  }

  // optional double polTilt = 14;
  if (has_poltilt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->poltilt(), output);
  }

  // optional .rxdataplane_msg.ModulationType modType = 15 [default = NONE];
  if (has_modtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->modtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PDWInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "PDWINFO"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional uint64 toaWholeSec = 2;
  if (has_toawholesec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->toawholesec(), target);
  }

  // optional double toaFracSec = 3;
  if (has_toafracsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->toafracsec(), target);
  }

  // optional double pulseDur = 4;
  if (has_pulsedur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pulsedur(), target);
  }

  // optional double gap = 5;
  if (has_gap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->gap(), target);
  }

  // optional double freqRF = 6;
  if (has_freqrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->freqrf(), target);
  }

  // optional double bandwidth = 7;
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->bandwidth(), target);
  }

  // optional double freqSlope = 8;
  if (has_freqslope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->freqslope(), target);
  }

  // optional double snr = 9;
  if (has_snr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->snr(), target);
  }

  // optional double az = 10;
  if (has_az()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->az(), target);
  }

  // optional double el = 11;
  if (has_el()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->el(), target);
  }

  // optional double dfQ = 12;
  if (has_dfq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->dfq(), target);
  }

  // optional double polAR = 13;
  if (has_polar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->polar(), target);
  }

  // optional double polTilt = 14;
  if (has_poltilt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->poltilt(), target);
  }

  // optional .rxdataplane_msg.ModulationType modType = 15 [default = NONE];
  if (has_modtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->modtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PDWInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "PDWINFO"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional uint64 toaWholeSec = 2;
    if (has_toawholesec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->toawholesec());
    }

    // optional double toaFracSec = 3;
    if (has_toafracsec()) {
      total_size += 1 + 8;
    }

    // optional double pulseDur = 4;
    if (has_pulsedur()) {
      total_size += 1 + 8;
    }

    // optional double gap = 5;
    if (has_gap()) {
      total_size += 1 + 8;
    }

    // optional double freqRF = 6;
    if (has_freqrf()) {
      total_size += 1 + 8;
    }

    // optional double bandwidth = 7;
    if (has_bandwidth()) {
      total_size += 1 + 8;
    }

    // optional double freqSlope = 8;
    if (has_freqslope()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double snr = 9;
    if (has_snr()) {
      total_size += 1 + 8;
    }

    // optional double az = 10;
    if (has_az()) {
      total_size += 1 + 8;
    }

    // optional double el = 11;
    if (has_el()) {
      total_size += 1 + 8;
    }

    // optional double dfQ = 12;
    if (has_dfq()) {
      total_size += 1 + 8;
    }

    // optional double polAR = 13;
    if (has_polar()) {
      total_size += 1 + 8;
    }

    // optional double polTilt = 14;
    if (has_poltilt()) {
      total_size += 1 + 8;
    }

    // optional .rxdataplane_msg.ModulationType modType = 15 [default = NONE];
    if (has_modtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->modtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PDWInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PDWInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PDWInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PDWInfo::MergeFrom(const PDWInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_toawholesec()) {
      set_toawholesec(from.toawholesec());
    }
    if (from.has_toafracsec()) {
      set_toafracsec(from.toafracsec());
    }
    if (from.has_pulsedur()) {
      set_pulsedur(from.pulsedur());
    }
    if (from.has_gap()) {
      set_gap(from.gap());
    }
    if (from.has_freqrf()) {
      set_freqrf(from.freqrf());
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
    if (from.has_freqslope()) {
      set_freqslope(from.freqslope());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_snr()) {
      set_snr(from.snr());
    }
    if (from.has_az()) {
      set_az(from.az());
    }
    if (from.has_el()) {
      set_el(from.el());
    }
    if (from.has_dfq()) {
      set_dfq(from.dfq());
    }
    if (from.has_polar()) {
      set_polar(from.polar());
    }
    if (from.has_poltilt()) {
      set_poltilt(from.poltilt());
    }
    if (from.has_modtype()) {
      set_modtype(from.modtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PDWInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDWInfo::CopyFrom(const PDWInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDWInfo::IsInitialized() const {

  return true;
}

void PDWInfo::Swap(PDWInfo* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(toawholesec_, other->toawholesec_);
    std::swap(toafracsec_, other->toafracsec_);
    std::swap(pulsedur_, other->pulsedur_);
    std::swap(gap_, other->gap_);
    std::swap(freqrf_, other->freqrf_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(freqslope_, other->freqslope_);
    std::swap(snr_, other->snr_);
    std::swap(az_, other->az_);
    std::swap(el_, other->el_);
    std::swap(dfq_, other->dfq_);
    std::swap(polar_, other->polar_);
    std::swap(poltilt_, other->poltilt_);
    std::swap(modtype_, other->modtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PDWInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PDWInfo_descriptor_;
  metadata.reflection = PDWInfo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* PDWInfoEnvelope::_default_msgname_ = NULL;
::std::string* PDWInfoEnvelope::_default_segmentername_ = NULL;
::std::string* PDWInfoEnvelope::_default_metafilename_ = NULL;
::std::string* PDWInfoEnvelope::_default_iqindexfilename_ = NULL;
#ifndef _MSC_VER
const int PDWInfoEnvelope::kMsgNameFieldNumber;
const int PDWInfoEnvelope::kSnapidFieldNumber;
const int PDWInfoEnvelope::kPdwsFieldNumber;
const int PDWInfoEnvelope::kSegmenterNameFieldNumber;
const int PDWInfoEnvelope::kMetaFilenameFieldNumber;
const int PDWInfoEnvelope::kIqIndexFilenameFieldNumber;
#endif  // !_MSC_VER

PDWInfoEnvelope::PDWInfoEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PDWInfoEnvelope::InitAsDefaultInstance() {
}

PDWInfoEnvelope::PDWInfoEnvelope(const PDWInfoEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PDWInfoEnvelope::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  snapid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  segmentername_ = const_cast< ::std::string*>(_default_segmentername_);
  metafilename_ = const_cast< ::std::string*>(_default_metafilename_);
  iqindexfilename_ = const_cast< ::std::string*>(_default_iqindexfilename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PDWInfoEnvelope::~PDWInfoEnvelope() {
  SharedDtor();
}

void PDWInfoEnvelope::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (snapid_ != &::google::protobuf::internal::kEmptyString) {
    delete snapid_;
  }
  if (segmentername_ != _default_segmentername_) {
    delete segmentername_;
  }
  if (metafilename_ != _default_metafilename_) {
    delete metafilename_;
  }
  if (iqindexfilename_ != _default_iqindexfilename_) {
    delete iqindexfilename_;
  }
  if (this != default_instance_) {
  }
}

void PDWInfoEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PDWInfoEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PDWInfoEnvelope_descriptor_;
}

const PDWInfoEnvelope& PDWInfoEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RXDataPlaneMessages_2eproto();
  return *default_instance_;
}

PDWInfoEnvelope* PDWInfoEnvelope::default_instance_ = NULL;

PDWInfoEnvelope* PDWInfoEnvelope::New() const {
  return new PDWInfoEnvelope;
}

void PDWInfoEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_snapid()) {
      if (snapid_ != &::google::protobuf::internal::kEmptyString) {
        snapid_->clear();
      }
    }
    if (has_segmentername()) {
      if (segmentername_ != _default_segmentername_) {
        segmentername_->assign(*_default_segmentername_);
      }
    }
    if (has_metafilename()) {
      if (metafilename_ != _default_metafilename_) {
        metafilename_->assign(*_default_metafilename_);
      }
    }
    if (has_iqindexfilename()) {
      if (iqindexfilename_ != _default_iqindexfilename_) {
        iqindexfilename_->assign(*_default_iqindexfilename_);
      }
    }
  }
  pdws_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PDWInfoEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "PDWINFOENVELOPE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_snapid;
        break;
      }

      // optional string snapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapid().data(), this->snapid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pdws;
        break;
      }

      // repeated .rxdataplane_msg.PDWInfo pdws = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pdws:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pdws()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pdws;
        if (input->ExpectTag(34)) goto parse_segmenterName;
        break;
      }

      // optional string segmenterName = 4 [default = "RADAR"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_segmenterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_segmentername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->segmentername().data(), this->segmentername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_metaFilename;
        break;
      }

      // optional string metaFilename = 5 [default = "NONE"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metaFilename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metafilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->metafilename().data(), this->metafilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_iqIndexFilename;
        break;
      }

      // optional string iqIndexFilename = 6 [default = "NONE"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iqIndexFilename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iqindexfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iqindexfilename().data(), this->iqindexfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PDWInfoEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "PDWINFOENVELOPE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string snapid = 2;
  if (has_snapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapid().data(), this->snapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->snapid(), output);
  }

  // repeated .rxdataplane_msg.PDWInfo pdws = 3;
  for (int i = 0; i < this->pdws_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pdws(i), output);
  }

  // optional string segmenterName = 4 [default = "RADAR"];
  if (has_segmentername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->segmentername().data(), this->segmentername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->segmentername(), output);
  }

  // optional string metaFilename = 5 [default = "NONE"];
  if (has_metafilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metafilename().data(), this->metafilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->metafilename(), output);
  }

  // optional string iqIndexFilename = 6 [default = "NONE"];
  if (has_iqindexfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iqindexfilename().data(), this->iqindexfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->iqindexfilename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PDWInfoEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "PDWINFOENVELOPE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string snapid = 2;
  if (has_snapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapid().data(), this->snapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->snapid(), target);
  }

  // repeated .rxdataplane_msg.PDWInfo pdws = 3;
  for (int i = 0; i < this->pdws_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pdws(i), target);
  }

  // optional string segmenterName = 4 [default = "RADAR"];
  if (has_segmentername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->segmentername().data(), this->segmentername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->segmentername(), target);
  }

  // optional string metaFilename = 5 [default = "NONE"];
  if (has_metafilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metafilename().data(), this->metafilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->metafilename(), target);
  }

  // optional string iqIndexFilename = 6 [default = "NONE"];
  if (has_iqindexfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iqindexfilename().data(), this->iqindexfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->iqindexfilename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PDWInfoEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "PDWINFOENVELOPE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string snapid = 2;
    if (has_snapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapid());
    }

    // optional string segmenterName = 4 [default = "RADAR"];
    if (has_segmentername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->segmentername());
    }

    // optional string metaFilename = 5 [default = "NONE"];
    if (has_metafilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metafilename());
    }

    // optional string iqIndexFilename = 6 [default = "NONE"];
    if (has_iqindexfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iqindexfilename());
    }

  }
  // repeated .rxdataplane_msg.PDWInfo pdws = 3;
  total_size += 1 * this->pdws_size();
  for (int i = 0; i < this->pdws_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pdws(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PDWInfoEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PDWInfoEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PDWInfoEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PDWInfoEnvelope::MergeFrom(const PDWInfoEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  pdws_.MergeFrom(from.pdws_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_snapid()) {
      set_snapid(from.snapid());
    }
    if (from.has_segmentername()) {
      set_segmentername(from.segmentername());
    }
    if (from.has_metafilename()) {
      set_metafilename(from.metafilename());
    }
    if (from.has_iqindexfilename()) {
      set_iqindexfilename(from.iqindexfilename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PDWInfoEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDWInfoEnvelope::CopyFrom(const PDWInfoEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDWInfoEnvelope::IsInitialized() const {

  return true;
}

void PDWInfoEnvelope::Swap(PDWInfoEnvelope* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(snapid_, other->snapid_);
    pdws_.Swap(&other->pdws_);
    std::swap(segmentername_, other->segmentername_);
    std::swap(metafilename_, other->metafilename_);
    std::swap(iqindexfilename_, other->iqindexfilename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PDWInfoEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PDWInfoEnvelope_descriptor_;
  metadata.reflection = PDWInfoEnvelope_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rxdataplane_msg

// @@protoc_insertion_point(global_scope)
