// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceInfrastructureNetwork.proto

#ifndef PROTOBUF_ServiceInfrastructureNetwork_2eproto__INCLUDED
#define PROTOBUF_ServiceInfrastructureNetwork_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace service_infrastructure {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ServiceInfrastructureNetwork_2eproto();
void protobuf_AssignDesc_ServiceInfrastructureNetwork_2eproto();
void protobuf_ShutdownFile_ServiceInfrastructureNetwork_2eproto();

class NetworkLayout;

// ===================================================================

class NetworkLayout : public ::google::protobuf::Message {
 public:
  NetworkLayout();
  virtual ~NetworkLayout();

  NetworkLayout(const NetworkLayout& from);

  inline NetworkLayout& operator=(const NetworkLayout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkLayout& default_instance();

  void Swap(NetworkLayout* other);

  // implements Message ----------------------------------------------

  NetworkLayout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetworkLayout& from);
  void MergeFrom(const NetworkLayout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 base_port = 1 [default = 8080];
  inline bool has_base_port() const;
  inline void clear_base_port();
  static const int kBasePortFieldNumber = 1;
  inline ::google::protobuf::int64 base_port() const;
  inline void set_base_port(::google::protobuf::int64 value);

  // optional int64 infra_port_offset = 2 [default = 17];
  inline bool has_infra_port_offset() const;
  inline void clear_infra_port_offset();
  static const int kInfraPortOffsetFieldNumber = 2;
  inline ::google::protobuf::int64 infra_port_offset() const;
  inline void set_infra_port_offset(::google::protobuf::int64 value);

  // optional int64 service_port_offset = 3 [default = 19];
  inline bool has_service_port_offset() const;
  inline void clear_service_port_offset();
  static const int kServicePortOffsetFieldNumber = 3;
  inline ::google::protobuf::int64 service_port_offset() const;
  inline void set_service_port_offset(::google::protobuf::int64 value);

  // optional int64 zpipe_port_offset = 4 [default = 27];
  inline bool has_zpipe_port_offset() const;
  inline void clear_zpipe_port_offset();
  static const int kZpipePortOffsetFieldNumber = 4;
  inline ::google::protobuf::int64 zpipe_port_offset() const;
  inline void set_zpipe_port_offset(::google::protobuf::int64 value);

  // optional int64 sub_port = 5 [default = 6686];
  inline bool has_sub_port() const;
  inline void clear_sub_port();
  static const int kSubPortFieldNumber = 5;
  inline ::google::protobuf::int64 sub_port() const;
  inline void set_sub_port(::google::protobuf::int64 value);

  // optional int64 pub_port = 6 [default = 5585];
  inline bool has_pub_port() const;
  inline void clear_pub_port();
  static const int kPubPortFieldNumber = 6;
  inline ::google::protobuf::int64 pub_port() const;
  inline void set_pub_port(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:service_infrastructure.NetworkLayout)
 private:
  inline void set_has_base_port();
  inline void clear_has_base_port();
  inline void set_has_infra_port_offset();
  inline void clear_has_infra_port_offset();
  inline void set_has_service_port_offset();
  inline void clear_has_service_port_offset();
  inline void set_has_zpipe_port_offset();
  inline void clear_has_zpipe_port_offset();
  inline void set_has_sub_port();
  inline void clear_has_sub_port();
  inline void set_has_pub_port();
  inline void clear_has_pub_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 base_port_;
  ::google::protobuf::int64 infra_port_offset_;
  ::google::protobuf::int64 service_port_offset_;
  ::google::protobuf::int64 zpipe_port_offset_;
  ::google::protobuf::int64 sub_port_;
  ::google::protobuf::int64 pub_port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ServiceInfrastructureNetwork_2eproto();
  friend void protobuf_AssignDesc_ServiceInfrastructureNetwork_2eproto();
  friend void protobuf_ShutdownFile_ServiceInfrastructureNetwork_2eproto();

  void InitAsDefaultInstance();
  static NetworkLayout* default_instance_;
};
// ===================================================================


// ===================================================================

// NetworkLayout

// optional int64 base_port = 1 [default = 8080];
inline bool NetworkLayout::has_base_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkLayout::set_has_base_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetworkLayout::clear_has_base_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetworkLayout::clear_base_port() {
  base_port_ = GOOGLE_LONGLONG(8080);
  clear_has_base_port();
}
inline ::google::protobuf::int64 NetworkLayout::base_port() const {
  return base_port_;
}
inline void NetworkLayout::set_base_port(::google::protobuf::int64 value) {
  set_has_base_port();
  base_port_ = value;
}

// optional int64 infra_port_offset = 2 [default = 17];
inline bool NetworkLayout::has_infra_port_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkLayout::set_has_infra_port_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetworkLayout::clear_has_infra_port_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetworkLayout::clear_infra_port_offset() {
  infra_port_offset_ = GOOGLE_LONGLONG(17);
  clear_has_infra_port_offset();
}
inline ::google::protobuf::int64 NetworkLayout::infra_port_offset() const {
  return infra_port_offset_;
}
inline void NetworkLayout::set_infra_port_offset(::google::protobuf::int64 value) {
  set_has_infra_port_offset();
  infra_port_offset_ = value;
}

// optional int64 service_port_offset = 3 [default = 19];
inline bool NetworkLayout::has_service_port_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkLayout::set_has_service_port_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetworkLayout::clear_has_service_port_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetworkLayout::clear_service_port_offset() {
  service_port_offset_ = GOOGLE_LONGLONG(19);
  clear_has_service_port_offset();
}
inline ::google::protobuf::int64 NetworkLayout::service_port_offset() const {
  return service_port_offset_;
}
inline void NetworkLayout::set_service_port_offset(::google::protobuf::int64 value) {
  set_has_service_port_offset();
  service_port_offset_ = value;
}

// optional int64 zpipe_port_offset = 4 [default = 27];
inline bool NetworkLayout::has_zpipe_port_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetworkLayout::set_has_zpipe_port_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetworkLayout::clear_has_zpipe_port_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetworkLayout::clear_zpipe_port_offset() {
  zpipe_port_offset_ = GOOGLE_LONGLONG(27);
  clear_has_zpipe_port_offset();
}
inline ::google::protobuf::int64 NetworkLayout::zpipe_port_offset() const {
  return zpipe_port_offset_;
}
inline void NetworkLayout::set_zpipe_port_offset(::google::protobuf::int64 value) {
  set_has_zpipe_port_offset();
  zpipe_port_offset_ = value;
}

// optional int64 sub_port = 5 [default = 6686];
inline bool NetworkLayout::has_sub_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetworkLayout::set_has_sub_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetworkLayout::clear_has_sub_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetworkLayout::clear_sub_port() {
  sub_port_ = GOOGLE_LONGLONG(6686);
  clear_has_sub_port();
}
inline ::google::protobuf::int64 NetworkLayout::sub_port() const {
  return sub_port_;
}
inline void NetworkLayout::set_sub_port(::google::protobuf::int64 value) {
  set_has_sub_port();
  sub_port_ = value;
}

// optional int64 pub_port = 6 [default = 5585];
inline bool NetworkLayout::has_pub_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetworkLayout::set_has_pub_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetworkLayout::clear_has_pub_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetworkLayout::clear_pub_port() {
  pub_port_ = GOOGLE_LONGLONG(5585);
  clear_has_pub_port();
}
inline ::google::protobuf::int64 NetworkLayout::pub_port() const {
  return pub_port_;
}
inline void NetworkLayout::set_pub_port(::google::protobuf::int64 value) {
  set_has_pub_port();
  pub_port_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_infrastructure

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServiceInfrastructureNetwork_2eproto__INCLUDED
