// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FalconReceiverMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FalconReceiverMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace falcon_receiver_msg {

namespace {

const ::google::protobuf::Descriptor* ReceiverRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiverRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReceiverRequest_Action_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReceiverRequest_Property_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReceiverResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiverResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReceiverResponse_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UniqueRXIDRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniqueRXIDRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UniqueRXIDRequest_Action_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UniqueRXIDResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniqueRXIDResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiverInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiverInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiverInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiverInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiverHealthTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiverHealthTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiverHealthResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiverHealthResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MMSStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MMSStat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FalconReceiverMessages_2eproto() {
  protobuf_AddDesc_FalconReceiverMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FalconReceiverMessages.proto");
  GOOGLE_CHECK(file != NULL);
  ReceiverRequest_descriptor_ = file->message_type(0);
  static const int ReceiverRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRequest, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRequest, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRequest, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRequest, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRequest, value_),
  };
  ReceiverRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiverRequest_descriptor_,
      ReceiverRequest::default_instance_,
      ReceiverRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiverRequest));
  ReceiverRequest_Action_descriptor_ = ReceiverRequest_descriptor_->enum_type(0);
  ReceiverRequest_Property_descriptor_ = ReceiverRequest_descriptor_->enum_type(1);
  ReceiverResponse_descriptor_ = file->message_type(1);
  static const int ReceiverResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverResponse, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverResponse, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverResponse, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverResponse, value_),
  };
  ReceiverResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiverResponse_descriptor_,
      ReceiverResponse::default_instance_,
      ReceiverResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiverResponse));
  ReceiverResponse_Status_descriptor_ = ReceiverResponse_descriptor_->enum_type(0);
  UniqueRXIDRequest_descriptor_ = file->message_type(2);
  static const int UniqueRXIDRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueRXIDRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueRXIDRequest, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueRXIDRequest, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueRXIDRequest, value_),
  };
  UniqueRXIDRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UniqueRXIDRequest_descriptor_,
      UniqueRXIDRequest::default_instance_,
      UniqueRXIDRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueRXIDRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueRXIDRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UniqueRXIDRequest));
  UniqueRXIDRequest_Action_descriptor_ = UniqueRXIDRequest_descriptor_->enum_type(0);
  UniqueRXIDResponse_descriptor_ = file->message_type(3);
  static const int UniqueRXIDResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueRXIDResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueRXIDResponse, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueRXIDResponse, value_),
  };
  UniqueRXIDResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UniqueRXIDResponse_descriptor_,
      UniqueRXIDResponse::default_instance_,
      UniqueRXIDResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueRXIDResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueRXIDResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UniqueRXIDResponse));
  ReceiverInfoRequest_descriptor_ = file->message_type(4);
  static const int ReceiverInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverInfoRequest, msgname_),
  };
  ReceiverInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiverInfoRequest_descriptor_,
      ReceiverInfoRequest::default_instance_,
      ReceiverInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiverInfoRequest));
  ReceiverInfoResponse_descriptor_ = file->message_type(5);
  static const int ReceiverInfoResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverInfoResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverInfoResponse, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverInfoResponse, ntp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverInfoResponse, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverInfoResponse, pps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverInfoResponse, comms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverInfoResponse, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverInfoResponse, raid_),
  };
  ReceiverInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiverInfoResponse_descriptor_,
      ReceiverInfoResponse::default_instance_,
      ReceiverInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiverInfoResponse));
  ReceiverHealthTest_descriptor_ = file->message_type(6);
  static const int ReceiverHealthTest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverHealthTest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverHealthTest, ntp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverHealthTest, raid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverHealthTest, singleraid_),
  };
  ReceiverHealthTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiverHealthTest_descriptor_,
      ReceiverHealthTest::default_instance_,
      ReceiverHealthTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverHealthTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverHealthTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiverHealthTest));
  ReceiverHealthResponse_descriptor_ = file->message_type(7);
  static const int ReceiverHealthResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverHealthResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverHealthResponse, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverHealthResponse, ntp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverHealthResponse, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverHealthResponse, pps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverHealthResponse, rx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverHealthResponse, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverHealthResponse, raid_),
  };
  ReceiverHealthResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiverHealthResponse_descriptor_,
      ReceiverHealthResponse::default_instance_,
      ReceiverHealthResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverHealthResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverHealthResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiverHealthResponse));
  MMSStat_descriptor_ = file->message_type(8);
  static const int MMSStat_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, chans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, conn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, tod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, rcv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, brd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, wbddc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, conn2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, rcv2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, wbddc2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, out2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, wdt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, line_),
  };
  MMSStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MMSStat_descriptor_,
      MMSStat::default_instance_,
      MMSStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MMSStat));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FalconReceiverMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiverRequest_descriptor_, &ReceiverRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiverResponse_descriptor_, &ReceiverResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UniqueRXIDRequest_descriptor_, &UniqueRXIDRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UniqueRXIDResponse_descriptor_, &UniqueRXIDResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiverInfoRequest_descriptor_, &ReceiverInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiverInfoResponse_descriptor_, &ReceiverInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiverHealthTest_descriptor_, &ReceiverHealthTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiverHealthResponse_descriptor_, &ReceiverHealthResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MMSStat_descriptor_, &MMSStat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FalconReceiverMessages_2eproto() {
  delete ReceiverRequest::default_instance_;
  delete ReceiverRequest_reflection_;
  delete ReceiverRequest::_default_msgname_;
  delete ReceiverResponse::default_instance_;
  delete ReceiverResponse_reflection_;
  delete ReceiverResponse::_default_msgname_;
  delete UniqueRXIDRequest::default_instance_;
  delete UniqueRXIDRequest_reflection_;
  delete UniqueRXIDRequest::_default_msgname_;
  delete UniqueRXIDResponse::default_instance_;
  delete UniqueRXIDResponse_reflection_;
  delete UniqueRXIDResponse::_default_msgname_;
  delete ReceiverInfoRequest::default_instance_;
  delete ReceiverInfoRequest_reflection_;
  delete ReceiverInfoRequest::_default_msgname_;
  delete ReceiverInfoResponse::default_instance_;
  delete ReceiverInfoResponse_reflection_;
  delete ReceiverInfoResponse::_default_msgname_;
  delete ReceiverHealthTest::default_instance_;
  delete ReceiverHealthTest_reflection_;
  delete ReceiverHealthTest::_default_msgname_;
  delete ReceiverHealthResponse::default_instance_;
  delete ReceiverHealthResponse_reflection_;
  delete ReceiverHealthResponse::_default_msgname_;
  delete ReceiverHealthResponse::_default_ntp_;
  delete ReceiverHealthResponse::_default_ref_;
  delete ReceiverHealthResponse::_default_pps_;
  delete ReceiverHealthResponse::_default_rx_;
  delete ReceiverHealthResponse::_default_ping_;
  delete ReceiverHealthResponse::_default_raid_;
  delete MMSStat::default_instance_;
  delete MMSStat_reflection_;
  delete MMSStat::_default_msgname_;
}

void protobuf_AddDesc_FalconReceiverMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034FalconReceiverMessages.proto\022\023falcon_r"
    "eceiver_msg\"\270\002\n\017ReceiverRequest\022!\n\007msgNa"
    "me\030\001 \001(\t:\020RECEIVER_REQUEST\022\r\n\005resID\030\002 \001("
    "\t\022\r\n\005appID\030\003 \001(\005\022;\n\006action\030\004 \001(\0162+.falco"
    "n_receiver_msg.ReceiverRequest.Action\022\?\n"
    "\010property\030\005 \001(\0162-.falcon_receiver_msg.Re"
    "ceiverRequest.Property\022\r\n\005value\030\006 \001(\002\"\032\n"
    "\006Action\022\007\n\003SET\020\000\022\007\n\003GET\020\001\";\n\010Property\022\r\n"
    "\tFREQUENCY\020\000\022\r\n\tBANDWIDTH\020\001\022\010\n\004GAIN\020\002\022\007\n"
    "\003REF\020\003\"\246\002\n\020ReceiverResponse\022\"\n\007msgName\030\001"
    " \001(\t:\021RECEIVER_RESPONSE\022\r\n\005resID\030\002 \001(\t\022\r"
    "\n\005appID\030\003 \001(\005\022<\n\006status\030\004 \001(\0162,.falcon_r"
    "eceiver_msg.ReceiverResponse.Status\022\?\n\010p"
    "roperty\030\005 \001(\0162-.falcon_receiver_msg.Rece"
    "iverRequest.Property\022\r\n\005value\030\006 \001(\002\"B\n\006S"
    "tatus\022\013\n\007SUCCESS\020\000\022\010\n\004FAIL\020\001\022\020\n\014DISCONNE"
    "CTED\020\002\022\017\n\013PERMISSIONS\020\003\"\267\001\n\021UniqueRXIDRe"
    "quest\022$\n\007msgName\030\001 \001(\t:\023UNIQUE_RXID_REQU"
    "EST\022\r\n\005resID\030\002 \001(\t\022B\n\006action\030\003 \001(\0162-.fal"
    "con_receiver_msg.UniqueRXIDRequest.Actio"
    "n:\003GET\022\r\n\005value\030\004 \001(\t\"\032\n\006Action\022\007\n\003SET\020\000"
    "\022\007\n\003GET\020\001\"Y\n\022UniqueRXIDResponse\022%\n\007msgNa"
    "me\030\001 \001(\t:\024UNIQUE_RXID_RESPONSE\022\r\n\005resID\030"
    "\002 \001(\t\022\r\n\005value\030\003 \001(\t\"=\n\023ReceiverInfoRequ"
    "est\022&\n\007msgName\030\001 \001(\t:\025RECEIVER_INFO_REQU"
    "EST\"\240\001\n\024ReceiverInfoResponse\022\'\n\007msgName\030"
    "\001 \001(\t:\026RECEIVER_INFO_RESPONSE\022\r\n\005resID\030\002"
    " \001(\t\022\013\n\003ntp\030\003 \001(\t\022\013\n\003ref\030\004 \001(\t\022\013\n\003pps\030\005 "
    "\001(\t\022\r\n\005comms\030\006 \001(\t\022\014\n\004ping\030\007 \001(\t\022\014\n\004raid"
    "\030\010 \001(\t\"j\n\022ReceiverHealthTest\022%\n\007msgName\030"
    "\001 \001(\t:\024RECEIVER_HEALTH_TEST\022\013\n\003ntp\030\002 \001(\005"
    "\022\014\n\004raid\030\003 \001(\005\022\022\n\nsingleraid\030\004 \001(\005\"\263\001\n\026R"
    "eceiverHealthResponse\022)\n\007msgName\030\001 \001(\t:\030"
    "RECEIVER_HEALTH_RESPONSE\022\r\n\005resID\030\002 \001(\t\022"
    "\016\n\003ntp\030\003 \001(\t:\001-\022\016\n\003ref\030\004 \001(\t:\001-\022\016\n\003pps\030\005"
    " \001(\t:\001-\022\r\n\002rx\030\006 \001(\t:\001-\022\017\n\004ping\030\007 \001(\t:\001-\022"
    "\017\n\004raid\030\010 \001(\t:\001-\"\234\002\n\007MMSStat\022\031\n\007msgName\030"
    "\001 \001(\t:\010MMS_STAT\022\r\n\005resID\030\002 \001(\t\022\n\n\002id\030\003 \001"
    "(\005\022\n\n\002sn\030\004 \001(\t\022\r\n\005chans\030\005 \001(\005\022\014\n\004conn\030\006 "
    "\001(\t\022\013\n\003tod\030\007 \001(\t\022\013\n\003rcv\030\010 \001(\t\022\013\n\003brd\030\t \001"
    "(\t\022\r\n\005wbddc\030\n \001(\t\022\013\n\003out\030\013 \001(\t\022\014\n\004temp\030\014"
    " \001(\t\022\013\n\003id2\030\r \001(\005\022\r\n\005conn2\030\016 \001(\t\022\014\n\004rcv2"
    "\030\017 \001(\t\022\016\n\006wbddc2\030\020 \001(\t\022\014\n\004out2\030\021 \001(\t\022\013\n\003"
    "wdt\030\022 \001(\t\022\014\n\004line\030\023 \001(\005B\025\n\023fv.protos.kep"
    "svisor", 1766);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FalconReceiverMessages.proto", &protobuf_RegisterTypes);
  ReceiverRequest::_default_msgname_ =
      new ::std::string("RECEIVER_REQUEST", 16);
  ReceiverRequest::default_instance_ = new ReceiverRequest();
  ReceiverResponse::_default_msgname_ =
      new ::std::string("RECEIVER_RESPONSE", 17);
  ReceiverResponse::default_instance_ = new ReceiverResponse();
  UniqueRXIDRequest::_default_msgname_ =
      new ::std::string("UNIQUE_RXID_REQUEST", 19);
  UniqueRXIDRequest::default_instance_ = new UniqueRXIDRequest();
  UniqueRXIDResponse::_default_msgname_ =
      new ::std::string("UNIQUE_RXID_RESPONSE", 20);
  UniqueRXIDResponse::default_instance_ = new UniqueRXIDResponse();
  ReceiverInfoRequest::_default_msgname_ =
      new ::std::string("RECEIVER_INFO_REQUEST", 21);
  ReceiverInfoRequest::default_instance_ = new ReceiverInfoRequest();
  ReceiverInfoResponse::_default_msgname_ =
      new ::std::string("RECEIVER_INFO_RESPONSE", 22);
  ReceiverInfoResponse::default_instance_ = new ReceiverInfoResponse();
  ReceiverHealthTest::_default_msgname_ =
      new ::std::string("RECEIVER_HEALTH_TEST", 20);
  ReceiverHealthTest::default_instance_ = new ReceiverHealthTest();
  ReceiverHealthResponse::_default_msgname_ =
      new ::std::string("RECEIVER_HEALTH_RESPONSE", 24);
  ReceiverHealthResponse::_default_ntp_ =
      new ::std::string("-", 1);
  ReceiverHealthResponse::_default_ref_ =
      new ::std::string("-", 1);
  ReceiverHealthResponse::_default_pps_ =
      new ::std::string("-", 1);
  ReceiverHealthResponse::_default_rx_ =
      new ::std::string("-", 1);
  ReceiverHealthResponse::_default_ping_ =
      new ::std::string("-", 1);
  ReceiverHealthResponse::_default_raid_ =
      new ::std::string("-", 1);
  ReceiverHealthResponse::default_instance_ = new ReceiverHealthResponse();
  MMSStat::_default_msgname_ =
      new ::std::string("MMS_STAT", 8);
  MMSStat::default_instance_ = new MMSStat();
  ReceiverRequest::default_instance_->InitAsDefaultInstance();
  ReceiverResponse::default_instance_->InitAsDefaultInstance();
  UniqueRXIDRequest::default_instance_->InitAsDefaultInstance();
  UniqueRXIDResponse::default_instance_->InitAsDefaultInstance();
  ReceiverInfoRequest::default_instance_->InitAsDefaultInstance();
  ReceiverInfoResponse::default_instance_->InitAsDefaultInstance();
  ReceiverHealthTest::default_instance_->InitAsDefaultInstance();
  ReceiverHealthResponse::default_instance_->InitAsDefaultInstance();
  MMSStat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FalconReceiverMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FalconReceiverMessages_2eproto {
  StaticDescriptorInitializer_FalconReceiverMessages_2eproto() {
    protobuf_AddDesc_FalconReceiverMessages_2eproto();
  }
} static_descriptor_initializer_FalconReceiverMessages_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReceiverRequest_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverRequest_Action_descriptor_;
}
bool ReceiverRequest_Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReceiverRequest_Action ReceiverRequest::SET;
const ReceiverRequest_Action ReceiverRequest::GET;
const ReceiverRequest_Action ReceiverRequest::Action_MIN;
const ReceiverRequest_Action ReceiverRequest::Action_MAX;
const int ReceiverRequest::Action_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ReceiverRequest_Property_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverRequest_Property_descriptor_;
}
bool ReceiverRequest_Property_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReceiverRequest_Property ReceiverRequest::FREQUENCY;
const ReceiverRequest_Property ReceiverRequest::BANDWIDTH;
const ReceiverRequest_Property ReceiverRequest::GAIN;
const ReceiverRequest_Property ReceiverRequest::REF;
const ReceiverRequest_Property ReceiverRequest::Property_MIN;
const ReceiverRequest_Property ReceiverRequest::Property_MAX;
const int ReceiverRequest::Property_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* ReceiverRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ReceiverRequest::kMsgNameFieldNumber;
const int ReceiverRequest::kResIDFieldNumber;
const int ReceiverRequest::kAppIDFieldNumber;
const int ReceiverRequest::kActionFieldNumber;
const int ReceiverRequest::kPropertyFieldNumber;
const int ReceiverRequest::kValueFieldNumber;
#endif  // !_MSC_VER

ReceiverRequest::ReceiverRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiverRequest::InitAsDefaultInstance() {
}

ReceiverRequest::ReceiverRequest(const ReceiverRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiverRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  action_ = 0;
  property_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiverRequest::~ReceiverRequest() {
  SharedDtor();
}

void ReceiverRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (this != default_instance_) {
  }
}

void ReceiverRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiverRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverRequest_descriptor_;
}

const ReceiverRequest& ReceiverRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconReceiverMessages_2eproto();
  return *default_instance_;
}

ReceiverRequest* ReceiverRequest::default_instance_ = NULL;

ReceiverRequest* ReceiverRequest::New() const {
  return new ReceiverRequest;
}

void ReceiverRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    appid_ = 0;
    action_ = 0;
    property_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiverRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RECEIVER_REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appID;
        break;
      }

      // optional int32 appID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action;
        break;
      }

      // optional .falcon_receiver_msg.ReceiverRequest.Action action = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_receiver_msg::ReceiverRequest_Action_IsValid(value)) {
            set_action(static_cast< ::falcon_receiver_msg::ReceiverRequest_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_property;
        break;
      }

      // optional .falcon_receiver_msg.ReceiverRequest.Property property = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_property:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_receiver_msg::ReceiverRequest_Property_IsValid(value)) {
            set_property(static_cast< ::falcon_receiver_msg::ReceiverRequest_Property >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_value;
        break;
      }

      // optional float value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiverRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RECEIVER_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  // optional .falcon_receiver_msg.ReceiverRequest.Action action = 4;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // optional .falcon_receiver_msg.ReceiverRequest.Property property = 5;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->property(), output);
  }

  // optional float value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiverRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RECEIVER_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  // optional .falcon_receiver_msg.ReceiverRequest.Action action = 4;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  // optional .falcon_receiver_msg.ReceiverRequest.Property property = 5;
  if (has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->property(), target);
  }

  // optional float value = 6;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiverRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RECEIVER_REQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional int32 appID = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional .falcon_receiver_msg.ReceiverRequest.Action action = 4;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .falcon_receiver_msg.ReceiverRequest.Property property = 5;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->property());
    }

    // optional float value = 6;
    if (has_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiverRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiverRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiverRequest::MergeFrom(const ReceiverRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiverRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverRequest::CopyFrom(const ReceiverRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverRequest::IsInitialized() const {

  return true;
}

void ReceiverRequest::Swap(ReceiverRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(appid_, other->appid_);
    std::swap(action_, other->action_);
    std::swap(property_, other->property_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiverRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiverRequest_descriptor_;
  metadata.reflection = ReceiverRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReceiverResponse_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverResponse_Status_descriptor_;
}
bool ReceiverResponse_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReceiverResponse_Status ReceiverResponse::SUCCESS;
const ReceiverResponse_Status ReceiverResponse::FAIL;
const ReceiverResponse_Status ReceiverResponse::DISCONNECTED;
const ReceiverResponse_Status ReceiverResponse::PERMISSIONS;
const ReceiverResponse_Status ReceiverResponse::Status_MIN;
const ReceiverResponse_Status ReceiverResponse::Status_MAX;
const int ReceiverResponse::Status_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* ReceiverResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ReceiverResponse::kMsgNameFieldNumber;
const int ReceiverResponse::kResIDFieldNumber;
const int ReceiverResponse::kAppIDFieldNumber;
const int ReceiverResponse::kStatusFieldNumber;
const int ReceiverResponse::kPropertyFieldNumber;
const int ReceiverResponse::kValueFieldNumber;
#endif  // !_MSC_VER

ReceiverResponse::ReceiverResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiverResponse::InitAsDefaultInstance() {
}

ReceiverResponse::ReceiverResponse(const ReceiverResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiverResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  status_ = 0;
  property_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiverResponse::~ReceiverResponse() {
  SharedDtor();
}

void ReceiverResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (this != default_instance_) {
  }
}

void ReceiverResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiverResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverResponse_descriptor_;
}

const ReceiverResponse& ReceiverResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconReceiverMessages_2eproto();
  return *default_instance_;
}

ReceiverResponse* ReceiverResponse::default_instance_ = NULL;

ReceiverResponse* ReceiverResponse::New() const {
  return new ReceiverResponse;
}

void ReceiverResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    appid_ = 0;
    status_ = 0;
    property_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiverResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RECEIVER_RESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appID;
        break;
      }

      // optional int32 appID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .falcon_receiver_msg.ReceiverResponse.Status status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_receiver_msg::ReceiverResponse_Status_IsValid(value)) {
            set_status(static_cast< ::falcon_receiver_msg::ReceiverResponse_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_property;
        break;
      }

      // optional .falcon_receiver_msg.ReceiverRequest.Property property = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_property:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_receiver_msg::ReceiverRequest_Property_IsValid(value)) {
            set_property(static_cast< ::falcon_receiver_msg::ReceiverRequest_Property >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_value;
        break;
      }

      // optional float value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiverResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RECEIVER_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  // optional .falcon_receiver_msg.ReceiverResponse.Status status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional .falcon_receiver_msg.ReceiverRequest.Property property = 5;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->property(), output);
  }

  // optional float value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiverResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RECEIVER_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  // optional .falcon_receiver_msg.ReceiverResponse.Status status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional .falcon_receiver_msg.ReceiverRequest.Property property = 5;
  if (has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->property(), target);
  }

  // optional float value = 6;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiverResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RECEIVER_RESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional int32 appID = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional .falcon_receiver_msg.ReceiverResponse.Status status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .falcon_receiver_msg.ReceiverRequest.Property property = 5;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->property());
    }

    // optional float value = 6;
    if (has_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiverResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiverResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiverResponse::MergeFrom(const ReceiverResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiverResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverResponse::CopyFrom(const ReceiverResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverResponse::IsInitialized() const {

  return true;
}

void ReceiverResponse::Swap(ReceiverResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(appid_, other->appid_);
    std::swap(status_, other->status_);
    std::swap(property_, other->property_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiverResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiverResponse_descriptor_;
  metadata.reflection = ReceiverResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UniqueRXIDRequest_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniqueRXIDRequest_Action_descriptor_;
}
bool UniqueRXIDRequest_Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UniqueRXIDRequest_Action UniqueRXIDRequest::SET;
const UniqueRXIDRequest_Action UniqueRXIDRequest::GET;
const UniqueRXIDRequest_Action UniqueRXIDRequest::Action_MIN;
const UniqueRXIDRequest_Action UniqueRXIDRequest::Action_MAX;
const int UniqueRXIDRequest::Action_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* UniqueRXIDRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UniqueRXIDRequest::kMsgNameFieldNumber;
const int UniqueRXIDRequest::kResIDFieldNumber;
const int UniqueRXIDRequest::kActionFieldNumber;
const int UniqueRXIDRequest::kValueFieldNumber;
#endif  // !_MSC_VER

UniqueRXIDRequest::UniqueRXIDRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UniqueRXIDRequest::InitAsDefaultInstance() {
}

UniqueRXIDRequest::UniqueRXIDRequest(const UniqueRXIDRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UniqueRXIDRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_ = 1;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UniqueRXIDRequest::~UniqueRXIDRequest() {
  SharedDtor();
}

void UniqueRXIDRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void UniqueRXIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniqueRXIDRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniqueRXIDRequest_descriptor_;
}

const UniqueRXIDRequest& UniqueRXIDRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconReceiverMessages_2eproto();
  return *default_instance_;
}

UniqueRXIDRequest* UniqueRXIDRequest::default_instance_ = NULL;

UniqueRXIDRequest* UniqueRXIDRequest::New() const {
  return new UniqueRXIDRequest;
}

void UniqueRXIDRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    action_ = 1;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UniqueRXIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UNIQUE_RXID_REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional .falcon_receiver_msg.UniqueRXIDRequest.Action action = 3 [default = GET];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_receiver_msg::UniqueRXIDRequest_Action_IsValid(value)) {
            set_action(static_cast< ::falcon_receiver_msg::UniqueRXIDRequest_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // optional string value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UniqueRXIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UNIQUE_RXID_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional .falcon_receiver_msg.UniqueRXIDRequest.Action action = 3 [default = GET];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // optional string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UniqueRXIDRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UNIQUE_RXID_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional .falcon_receiver_msg.UniqueRXIDRequest.Action action = 3 [default = GET];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // optional string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UniqueRXIDRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UNIQUE_RXID_REQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional .falcon_receiver_msg.UniqueRXIDRequest.Action action = 3 [default = GET];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional string value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniqueRXIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UniqueRXIDRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UniqueRXIDRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UniqueRXIDRequest::MergeFrom(const UniqueRXIDRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UniqueRXIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniqueRXIDRequest::CopyFrom(const UniqueRXIDRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniqueRXIDRequest::IsInitialized() const {

  return true;
}

void UniqueRXIDRequest::Swap(UniqueRXIDRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(action_, other->action_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UniqueRXIDRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniqueRXIDRequest_descriptor_;
  metadata.reflection = UniqueRXIDRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UniqueRXIDResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UniqueRXIDResponse::kMsgNameFieldNumber;
const int UniqueRXIDResponse::kResIDFieldNumber;
const int UniqueRXIDResponse::kValueFieldNumber;
#endif  // !_MSC_VER

UniqueRXIDResponse::UniqueRXIDResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UniqueRXIDResponse::InitAsDefaultInstance() {
}

UniqueRXIDResponse::UniqueRXIDResponse(const UniqueRXIDResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UniqueRXIDResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UniqueRXIDResponse::~UniqueRXIDResponse() {
  SharedDtor();
}

void UniqueRXIDResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void UniqueRXIDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniqueRXIDResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniqueRXIDResponse_descriptor_;
}

const UniqueRXIDResponse& UniqueRXIDResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconReceiverMessages_2eproto();
  return *default_instance_;
}

UniqueRXIDResponse* UniqueRXIDResponse::default_instance_ = NULL;

UniqueRXIDResponse* UniqueRXIDResponse::New() const {
  return new UniqueRXIDResponse;
}

void UniqueRXIDResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UniqueRXIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UNIQUE_RXID_RESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UniqueRXIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UNIQUE_RXID_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UniqueRXIDResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UNIQUE_RXID_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UniqueRXIDResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UNIQUE_RXID_RESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniqueRXIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UniqueRXIDResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UniqueRXIDResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UniqueRXIDResponse::MergeFrom(const UniqueRXIDResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UniqueRXIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniqueRXIDResponse::CopyFrom(const UniqueRXIDResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniqueRXIDResponse::IsInitialized() const {

  return true;
}

void UniqueRXIDResponse::Swap(UniqueRXIDResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UniqueRXIDResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniqueRXIDResponse_descriptor_;
  metadata.reflection = UniqueRXIDResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ReceiverInfoRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ReceiverInfoRequest::kMsgNameFieldNumber;
#endif  // !_MSC_VER

ReceiverInfoRequest::ReceiverInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiverInfoRequest::InitAsDefaultInstance() {
}

ReceiverInfoRequest::ReceiverInfoRequest(const ReceiverInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiverInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiverInfoRequest::~ReceiverInfoRequest() {
  SharedDtor();
}

void ReceiverInfoRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ReceiverInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiverInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverInfoRequest_descriptor_;
}

const ReceiverInfoRequest& ReceiverInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconReceiverMessages_2eproto();
  return *default_instance_;
}

ReceiverInfoRequest* ReceiverInfoRequest::default_instance_ = NULL;

ReceiverInfoRequest* ReceiverInfoRequest::New() const {
  return new ReceiverInfoRequest;
}

void ReceiverInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiverInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RECEIVER_INFO_REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiverInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RECEIVER_INFO_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiverInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RECEIVER_INFO_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiverInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RECEIVER_INFO_REQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiverInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiverInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiverInfoRequest::MergeFrom(const ReceiverInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiverInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverInfoRequest::CopyFrom(const ReceiverInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverInfoRequest::IsInitialized() const {

  return true;
}

void ReceiverInfoRequest::Swap(ReceiverInfoRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiverInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiverInfoRequest_descriptor_;
  metadata.reflection = ReceiverInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ReceiverInfoResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ReceiverInfoResponse::kMsgNameFieldNumber;
const int ReceiverInfoResponse::kResIDFieldNumber;
const int ReceiverInfoResponse::kNtpFieldNumber;
const int ReceiverInfoResponse::kRefFieldNumber;
const int ReceiverInfoResponse::kPpsFieldNumber;
const int ReceiverInfoResponse::kCommsFieldNumber;
const int ReceiverInfoResponse::kPingFieldNumber;
const int ReceiverInfoResponse::kRaidFieldNumber;
#endif  // !_MSC_VER

ReceiverInfoResponse::ReceiverInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiverInfoResponse::InitAsDefaultInstance() {
}

ReceiverInfoResponse::ReceiverInfoResponse(const ReceiverInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiverInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ntp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pps_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comms_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ping_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  raid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiverInfoResponse::~ReceiverInfoResponse() {
  SharedDtor();
}

void ReceiverInfoResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (ntp_ != &::google::protobuf::internal::kEmptyString) {
    delete ntp_;
  }
  if (ref_ != &::google::protobuf::internal::kEmptyString) {
    delete ref_;
  }
  if (pps_ != &::google::protobuf::internal::kEmptyString) {
    delete pps_;
  }
  if (comms_ != &::google::protobuf::internal::kEmptyString) {
    delete comms_;
  }
  if (ping_ != &::google::protobuf::internal::kEmptyString) {
    delete ping_;
  }
  if (raid_ != &::google::protobuf::internal::kEmptyString) {
    delete raid_;
  }
  if (this != default_instance_) {
  }
}

void ReceiverInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiverInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverInfoResponse_descriptor_;
}

const ReceiverInfoResponse& ReceiverInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconReceiverMessages_2eproto();
  return *default_instance_;
}

ReceiverInfoResponse* ReceiverInfoResponse::default_instance_ = NULL;

ReceiverInfoResponse* ReceiverInfoResponse::New() const {
  return new ReceiverInfoResponse;
}

void ReceiverInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    if (has_ntp()) {
      if (ntp_ != &::google::protobuf::internal::kEmptyString) {
        ntp_->clear();
      }
    }
    if (has_ref()) {
      if (ref_ != &::google::protobuf::internal::kEmptyString) {
        ref_->clear();
      }
    }
    if (has_pps()) {
      if (pps_ != &::google::protobuf::internal::kEmptyString) {
        pps_->clear();
      }
    }
    if (has_comms()) {
      if (comms_ != &::google::protobuf::internal::kEmptyString) {
        comms_->clear();
      }
    }
    if (has_ping()) {
      if (ping_ != &::google::protobuf::internal::kEmptyString) {
        ping_->clear();
      }
    }
    if (has_raid()) {
      if (raid_ != &::google::protobuf::internal::kEmptyString) {
        raid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiverInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RECEIVER_INFO_RESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ntp;
        break;
      }

      // optional string ntp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ntp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ntp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ntp().data(), this->ntp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ref;
        break;
      }

      // optional string ref = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ref().data(), this->ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pps;
        break;
      }

      // optional string pps = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pps().data(), this->pps().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_comms;
        break;
      }

      // optional string comms = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comms()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comms().data(), this->comms().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ping;
        break;
      }

      // optional string ping = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ping()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ping().data(), this->ping().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_raid;
        break;
      }

      // optional string raid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raid().data(), this->raid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiverInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RECEIVER_INFO_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional string ntp = 3;
  if (has_ntp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ntp().data(), this->ntp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ntp(), output);
  }

  // optional string ref = 4;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ref(), output);
  }

  // optional string pps = 5;
  if (has_pps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pps().data(), this->pps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pps(), output);
  }

  // optional string comms = 6;
  if (has_comms()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comms().data(), this->comms().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->comms(), output);
  }

  // optional string ping = 7;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ping().data(), this->ping().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ping(), output);
  }

  // optional string raid = 8;
  if (has_raid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raid().data(), this->raid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->raid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiverInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RECEIVER_INFO_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional string ntp = 3;
  if (has_ntp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ntp().data(), this->ntp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ntp(), target);
  }

  // optional string ref = 4;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ref(), target);
  }

  // optional string pps = 5;
  if (has_pps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pps().data(), this->pps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pps(), target);
  }

  // optional string comms = 6;
  if (has_comms()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comms().data(), this->comms().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->comms(), target);
  }

  // optional string ping = 7;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ping().data(), this->ping().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ping(), target);
  }

  // optional string raid = 8;
  if (has_raid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raid().data(), this->raid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->raid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiverInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RECEIVER_INFO_RESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional string ntp = 3;
    if (has_ntp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ntp());
    }

    // optional string ref = 4;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref());
    }

    // optional string pps = 5;
    if (has_pps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pps());
    }

    // optional string comms = 6;
    if (has_comms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comms());
    }

    // optional string ping = 7;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ping());
    }

    // optional string raid = 8;
    if (has_raid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiverInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiverInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiverInfoResponse::MergeFrom(const ReceiverInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_ntp()) {
      set_ntp(from.ntp());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
    if (from.has_pps()) {
      set_pps(from.pps());
    }
    if (from.has_comms()) {
      set_comms(from.comms());
    }
    if (from.has_ping()) {
      set_ping(from.ping());
    }
    if (from.has_raid()) {
      set_raid(from.raid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiverInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverInfoResponse::CopyFrom(const ReceiverInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverInfoResponse::IsInitialized() const {

  return true;
}

void ReceiverInfoResponse::Swap(ReceiverInfoResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(ntp_, other->ntp_);
    std::swap(ref_, other->ref_);
    std::swap(pps_, other->pps_);
    std::swap(comms_, other->comms_);
    std::swap(ping_, other->ping_);
    std::swap(raid_, other->raid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiverInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiverInfoResponse_descriptor_;
  metadata.reflection = ReceiverInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ReceiverHealthTest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ReceiverHealthTest::kMsgNameFieldNumber;
const int ReceiverHealthTest::kNtpFieldNumber;
const int ReceiverHealthTest::kRaidFieldNumber;
const int ReceiverHealthTest::kSingleraidFieldNumber;
#endif  // !_MSC_VER

ReceiverHealthTest::ReceiverHealthTest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiverHealthTest::InitAsDefaultInstance() {
}

ReceiverHealthTest::ReceiverHealthTest(const ReceiverHealthTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiverHealthTest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ntp_ = 0;
  raid_ = 0;
  singleraid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiverHealthTest::~ReceiverHealthTest() {
  SharedDtor();
}

void ReceiverHealthTest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ReceiverHealthTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiverHealthTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverHealthTest_descriptor_;
}

const ReceiverHealthTest& ReceiverHealthTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconReceiverMessages_2eproto();
  return *default_instance_;
}

ReceiverHealthTest* ReceiverHealthTest::default_instance_ = NULL;

ReceiverHealthTest* ReceiverHealthTest::New() const {
  return new ReceiverHealthTest;
}

void ReceiverHealthTest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    ntp_ = 0;
    raid_ = 0;
    singleraid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiverHealthTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RECEIVER_HEALTH_TEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ntp;
        break;
      }

      // optional int32 ntp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ntp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntp_)));
          set_has_ntp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_raid;
        break;
      }

      // optional int32 raid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raid_)));
          set_has_raid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_singleraid;
        break;
      }

      // optional int32 singleraid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_singleraid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &singleraid_)));
          set_has_singleraid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiverHealthTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RECEIVER_HEALTH_TEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 ntp = 2;
  if (has_ntp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ntp(), output);
  }

  // optional int32 raid = 3;
  if (has_raid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->raid(), output);
  }

  // optional int32 singleraid = 4;
  if (has_singleraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->singleraid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiverHealthTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RECEIVER_HEALTH_TEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 ntp = 2;
  if (has_ntp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ntp(), target);
  }

  // optional int32 raid = 3;
  if (has_raid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->raid(), target);
  }

  // optional int32 singleraid = 4;
  if (has_singleraid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->singleraid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiverHealthTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RECEIVER_HEALTH_TEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 ntp = 2;
    if (has_ntp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntp());
    }

    // optional int32 raid = 3;
    if (has_raid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raid());
    }

    // optional int32 singleraid = 4;
    if (has_singleraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->singleraid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverHealthTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiverHealthTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiverHealthTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiverHealthTest::MergeFrom(const ReceiverHealthTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_ntp()) {
      set_ntp(from.ntp());
    }
    if (from.has_raid()) {
      set_raid(from.raid());
    }
    if (from.has_singleraid()) {
      set_singleraid(from.singleraid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiverHealthTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverHealthTest::CopyFrom(const ReceiverHealthTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverHealthTest::IsInitialized() const {

  return true;
}

void ReceiverHealthTest::Swap(ReceiverHealthTest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(ntp_, other->ntp_);
    std::swap(raid_, other->raid_);
    std::swap(singleraid_, other->singleraid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiverHealthTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiverHealthTest_descriptor_;
  metadata.reflection = ReceiverHealthTest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ReceiverHealthResponse::_default_msgname_ = NULL;
::std::string* ReceiverHealthResponse::_default_ntp_ = NULL;
::std::string* ReceiverHealthResponse::_default_ref_ = NULL;
::std::string* ReceiverHealthResponse::_default_pps_ = NULL;
::std::string* ReceiverHealthResponse::_default_rx_ = NULL;
::std::string* ReceiverHealthResponse::_default_ping_ = NULL;
::std::string* ReceiverHealthResponse::_default_raid_ = NULL;
#ifndef _MSC_VER
const int ReceiverHealthResponse::kMsgNameFieldNumber;
const int ReceiverHealthResponse::kResIDFieldNumber;
const int ReceiverHealthResponse::kNtpFieldNumber;
const int ReceiverHealthResponse::kRefFieldNumber;
const int ReceiverHealthResponse::kPpsFieldNumber;
const int ReceiverHealthResponse::kRxFieldNumber;
const int ReceiverHealthResponse::kPingFieldNumber;
const int ReceiverHealthResponse::kRaidFieldNumber;
#endif  // !_MSC_VER

ReceiverHealthResponse::ReceiverHealthResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiverHealthResponse::InitAsDefaultInstance() {
}

ReceiverHealthResponse::ReceiverHealthResponse(const ReceiverHealthResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiverHealthResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ntp_ = const_cast< ::std::string*>(_default_ntp_);
  ref_ = const_cast< ::std::string*>(_default_ref_);
  pps_ = const_cast< ::std::string*>(_default_pps_);
  rx_ = const_cast< ::std::string*>(_default_rx_);
  ping_ = const_cast< ::std::string*>(_default_ping_);
  raid_ = const_cast< ::std::string*>(_default_raid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiverHealthResponse::~ReceiverHealthResponse() {
  SharedDtor();
}

void ReceiverHealthResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (ntp_ != _default_ntp_) {
    delete ntp_;
  }
  if (ref_ != _default_ref_) {
    delete ref_;
  }
  if (pps_ != _default_pps_) {
    delete pps_;
  }
  if (rx_ != _default_rx_) {
    delete rx_;
  }
  if (ping_ != _default_ping_) {
    delete ping_;
  }
  if (raid_ != _default_raid_) {
    delete raid_;
  }
  if (this != default_instance_) {
  }
}

void ReceiverHealthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiverHealthResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverHealthResponse_descriptor_;
}

const ReceiverHealthResponse& ReceiverHealthResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconReceiverMessages_2eproto();
  return *default_instance_;
}

ReceiverHealthResponse* ReceiverHealthResponse::default_instance_ = NULL;

ReceiverHealthResponse* ReceiverHealthResponse::New() const {
  return new ReceiverHealthResponse;
}

void ReceiverHealthResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    if (has_ntp()) {
      if (ntp_ != _default_ntp_) {
        ntp_->assign(*_default_ntp_);
      }
    }
    if (has_ref()) {
      if (ref_ != _default_ref_) {
        ref_->assign(*_default_ref_);
      }
    }
    if (has_pps()) {
      if (pps_ != _default_pps_) {
        pps_->assign(*_default_pps_);
      }
    }
    if (has_rx()) {
      if (rx_ != _default_rx_) {
        rx_->assign(*_default_rx_);
      }
    }
    if (has_ping()) {
      if (ping_ != _default_ping_) {
        ping_->assign(*_default_ping_);
      }
    }
    if (has_raid()) {
      if (raid_ != _default_raid_) {
        raid_->assign(*_default_raid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiverHealthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RECEIVER_HEALTH_RESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ntp;
        break;
      }

      // optional string ntp = 3 [default = "-"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ntp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ntp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ntp().data(), this->ntp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ref;
        break;
      }

      // optional string ref = 4 [default = "-"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ref().data(), this->ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pps;
        break;
      }

      // optional string pps = 5 [default = "-"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pps().data(), this->pps().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rx;
        break;
      }

      // optional string rx = 6 [default = "-"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rx().data(), this->rx().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ping;
        break;
      }

      // optional string ping = 7 [default = "-"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ping()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ping().data(), this->ping().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_raid;
        break;
      }

      // optional string raid = 8 [default = "-"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raid().data(), this->raid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiverHealthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RECEIVER_HEALTH_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional string ntp = 3 [default = "-"];
  if (has_ntp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ntp().data(), this->ntp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ntp(), output);
  }

  // optional string ref = 4 [default = "-"];
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ref(), output);
  }

  // optional string pps = 5 [default = "-"];
  if (has_pps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pps().data(), this->pps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pps(), output);
  }

  // optional string rx = 6 [default = "-"];
  if (has_rx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx().data(), this->rx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->rx(), output);
  }

  // optional string ping = 7 [default = "-"];
  if (has_ping()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ping().data(), this->ping().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ping(), output);
  }

  // optional string raid = 8 [default = "-"];
  if (has_raid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raid().data(), this->raid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->raid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiverHealthResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RECEIVER_HEALTH_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional string ntp = 3 [default = "-"];
  if (has_ntp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ntp().data(), this->ntp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ntp(), target);
  }

  // optional string ref = 4 [default = "-"];
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ref(), target);
  }

  // optional string pps = 5 [default = "-"];
  if (has_pps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pps().data(), this->pps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pps(), target);
  }

  // optional string rx = 6 [default = "-"];
  if (has_rx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx().data(), this->rx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->rx(), target);
  }

  // optional string ping = 7 [default = "-"];
  if (has_ping()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ping().data(), this->ping().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ping(), target);
  }

  // optional string raid = 8 [default = "-"];
  if (has_raid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raid().data(), this->raid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->raid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiverHealthResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RECEIVER_HEALTH_RESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional string ntp = 3 [default = "-"];
    if (has_ntp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ntp());
    }

    // optional string ref = 4 [default = "-"];
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref());
    }

    // optional string pps = 5 [default = "-"];
    if (has_pps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pps());
    }

    // optional string rx = 6 [default = "-"];
    if (has_rx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rx());
    }

    // optional string ping = 7 [default = "-"];
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ping());
    }

    // optional string raid = 8 [default = "-"];
    if (has_raid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverHealthResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiverHealthResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiverHealthResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiverHealthResponse::MergeFrom(const ReceiverHealthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_ntp()) {
      set_ntp(from.ntp());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
    if (from.has_pps()) {
      set_pps(from.pps());
    }
    if (from.has_rx()) {
      set_rx(from.rx());
    }
    if (from.has_ping()) {
      set_ping(from.ping());
    }
    if (from.has_raid()) {
      set_raid(from.raid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiverHealthResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverHealthResponse::CopyFrom(const ReceiverHealthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverHealthResponse::IsInitialized() const {

  return true;
}

void ReceiverHealthResponse::Swap(ReceiverHealthResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(ntp_, other->ntp_);
    std::swap(ref_, other->ref_);
    std::swap(pps_, other->pps_);
    std::swap(rx_, other->rx_);
    std::swap(ping_, other->ping_);
    std::swap(raid_, other->raid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiverHealthResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiverHealthResponse_descriptor_;
  metadata.reflection = ReceiverHealthResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* MMSStat::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int MMSStat::kMsgNameFieldNumber;
const int MMSStat::kResIDFieldNumber;
const int MMSStat::kIdFieldNumber;
const int MMSStat::kSnFieldNumber;
const int MMSStat::kChansFieldNumber;
const int MMSStat::kConnFieldNumber;
const int MMSStat::kTodFieldNumber;
const int MMSStat::kRcvFieldNumber;
const int MMSStat::kBrdFieldNumber;
const int MMSStat::kWbddcFieldNumber;
const int MMSStat::kOutFieldNumber;
const int MMSStat::kTempFieldNumber;
const int MMSStat::kId2FieldNumber;
const int MMSStat::kConn2FieldNumber;
const int MMSStat::kRcv2FieldNumber;
const int MMSStat::kWbddc2FieldNumber;
const int MMSStat::kOut2FieldNumber;
const int MMSStat::kWdtFieldNumber;
const int MMSStat::kLineFieldNumber;
#endif  // !_MSC_VER

MMSStat::MMSStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MMSStat::InitAsDefaultInstance() {
}

MMSStat::MMSStat(const MMSStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MMSStat::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chans_ = 0;
  conn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tod_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rcv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wbddc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  out_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  temp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id2_ = 0;
  conn2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rcv2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wbddc2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  out2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wdt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  line_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MMSStat::~MMSStat() {
  SharedDtor();
}

void MMSStat::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (sn_ != &::google::protobuf::internal::kEmptyString) {
    delete sn_;
  }
  if (conn_ != &::google::protobuf::internal::kEmptyString) {
    delete conn_;
  }
  if (tod_ != &::google::protobuf::internal::kEmptyString) {
    delete tod_;
  }
  if (rcv_ != &::google::protobuf::internal::kEmptyString) {
    delete rcv_;
  }
  if (brd_ != &::google::protobuf::internal::kEmptyString) {
    delete brd_;
  }
  if (wbddc_ != &::google::protobuf::internal::kEmptyString) {
    delete wbddc_;
  }
  if (out_ != &::google::protobuf::internal::kEmptyString) {
    delete out_;
  }
  if (temp_ != &::google::protobuf::internal::kEmptyString) {
    delete temp_;
  }
  if (conn2_ != &::google::protobuf::internal::kEmptyString) {
    delete conn2_;
  }
  if (rcv2_ != &::google::protobuf::internal::kEmptyString) {
    delete rcv2_;
  }
  if (wbddc2_ != &::google::protobuf::internal::kEmptyString) {
    delete wbddc2_;
  }
  if (out2_ != &::google::protobuf::internal::kEmptyString) {
    delete out2_;
  }
  if (wdt_ != &::google::protobuf::internal::kEmptyString) {
    delete wdt_;
  }
  if (this != default_instance_) {
  }
}

void MMSStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MMSStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MMSStat_descriptor_;
}

const MMSStat& MMSStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconReceiverMessages_2eproto();
  return *default_instance_;
}

MMSStat* MMSStat::default_instance_ = NULL;

MMSStat* MMSStat::New() const {
  return new MMSStat;
}

void MMSStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    id_ = 0;
    if (has_sn()) {
      if (sn_ != &::google::protobuf::internal::kEmptyString) {
        sn_->clear();
      }
    }
    chans_ = 0;
    if (has_conn()) {
      if (conn_ != &::google::protobuf::internal::kEmptyString) {
        conn_->clear();
      }
    }
    if (has_tod()) {
      if (tod_ != &::google::protobuf::internal::kEmptyString) {
        tod_->clear();
      }
    }
    if (has_rcv()) {
      if (rcv_ != &::google::protobuf::internal::kEmptyString) {
        rcv_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_brd()) {
      if (brd_ != &::google::protobuf::internal::kEmptyString) {
        brd_->clear();
      }
    }
    if (has_wbddc()) {
      if (wbddc_ != &::google::protobuf::internal::kEmptyString) {
        wbddc_->clear();
      }
    }
    if (has_out()) {
      if (out_ != &::google::protobuf::internal::kEmptyString) {
        out_->clear();
      }
    }
    if (has_temp()) {
      if (temp_ != &::google::protobuf::internal::kEmptyString) {
        temp_->clear();
      }
    }
    id2_ = 0;
    if (has_conn2()) {
      if (conn2_ != &::google::protobuf::internal::kEmptyString) {
        conn2_->clear();
      }
    }
    if (has_rcv2()) {
      if (rcv2_ != &::google::protobuf::internal::kEmptyString) {
        rcv2_->clear();
      }
    }
    if (has_wbddc2()) {
      if (wbddc2_ != &::google::protobuf::internal::kEmptyString) {
        wbddc2_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_out2()) {
      if (out2_ != &::google::protobuf::internal::kEmptyString) {
        out2_->clear();
      }
    }
    if (has_wdt()) {
      if (wdt_ != &::google::protobuf::internal::kEmptyString) {
        wdt_->clear();
      }
    }
    line_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MMSStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "MMS_STAT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sn;
        break;
      }

      // optional string sn = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sn().data(), this->sn().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chans;
        break;
      }

      // optional int32 chans = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chans:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chans_)));
          set_has_chans();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_conn;
        break;
      }

      // optional string conn = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->conn().data(), this->conn().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tod;
        break;
      }

      // optional string tod = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tod:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tod()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tod().data(), this->tod().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rcv;
        break;
      }

      // optional string rcv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rcv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rcv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rcv().data(), this->rcv().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_brd;
        break;
      }

      // optional string brd = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brd().data(), this->brd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_wbddc;
        break;
      }

      // optional string wbddc = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wbddc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wbddc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wbddc().data(), this->wbddc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_out;
        break;
      }

      // optional string out = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_out:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->out().data(), this->out().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_temp;
        break;
      }

      // optional string temp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_temp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_temp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->temp().data(), this->temp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_id2;
        break;
      }

      // optional int32 id2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id2_)));
          set_has_id2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_conn2;
        break;
      }

      // optional string conn2 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conn2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conn2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->conn2().data(), this->conn2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_rcv2;
        break;
      }

      // optional string rcv2 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rcv2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rcv2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rcv2().data(), this->rcv2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_wbddc2;
        break;
      }

      // optional string wbddc2 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wbddc2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wbddc2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wbddc2().data(), this->wbddc2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_out2;
        break;
      }

      // optional string out2 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_out2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->out2().data(), this->out2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_wdt;
        break;
      }

      // optional string wdt = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wdt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wdt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wdt().data(), this->wdt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_line;
        break;
      }

      // optional int32 line = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MMSStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "MMS_STAT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional string sn = 4;
  if (has_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sn(), output);
  }

  // optional int32 chans = 5;
  if (has_chans()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chans(), output);
  }

  // optional string conn = 6;
  if (has_conn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conn().data(), this->conn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->conn(), output);
  }

  // optional string tod = 7;
  if (has_tod()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tod().data(), this->tod().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->tod(), output);
  }

  // optional string rcv = 8;
  if (has_rcv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rcv().data(), this->rcv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->rcv(), output);
  }

  // optional string brd = 9;
  if (has_brd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brd().data(), this->brd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->brd(), output);
  }

  // optional string wbddc = 10;
  if (has_wbddc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wbddc().data(), this->wbddc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->wbddc(), output);
  }

  // optional string out = 11;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->out(), output);
  }

  // optional string temp = 12;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->temp().data(), this->temp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->temp(), output);
  }

  // optional int32 id2 = 13;
  if (has_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->id2(), output);
  }

  // optional string conn2 = 14;
  if (has_conn2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conn2().data(), this->conn2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->conn2(), output);
  }

  // optional string rcv2 = 15;
  if (has_rcv2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rcv2().data(), this->rcv2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->rcv2(), output);
  }

  // optional string wbddc2 = 16;
  if (has_wbddc2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wbddc2().data(), this->wbddc2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->wbddc2(), output);
  }

  // optional string out2 = 17;
  if (has_out2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->out2().data(), this->out2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->out2(), output);
  }

  // optional string wdt = 18;
  if (has_wdt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wdt().data(), this->wdt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->wdt(), output);
  }

  // optional int32 line = 19;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->line(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MMSStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "MMS_STAT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional string sn = 4;
  if (has_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sn(), target);
  }

  // optional int32 chans = 5;
  if (has_chans()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chans(), target);
  }

  // optional string conn = 6;
  if (has_conn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conn().data(), this->conn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->conn(), target);
  }

  // optional string tod = 7;
  if (has_tod()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tod().data(), this->tod().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tod(), target);
  }

  // optional string rcv = 8;
  if (has_rcv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rcv().data(), this->rcv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rcv(), target);
  }

  // optional string brd = 9;
  if (has_brd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brd().data(), this->brd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->brd(), target);
  }

  // optional string wbddc = 10;
  if (has_wbddc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wbddc().data(), this->wbddc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->wbddc(), target);
  }

  // optional string out = 11;
  if (has_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->out().data(), this->out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->out(), target);
  }

  // optional string temp = 12;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->temp().data(), this->temp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->temp(), target);
  }

  // optional int32 id2 = 13;
  if (has_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->id2(), target);
  }

  // optional string conn2 = 14;
  if (has_conn2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conn2().data(), this->conn2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->conn2(), target);
  }

  // optional string rcv2 = 15;
  if (has_rcv2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rcv2().data(), this->rcv2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->rcv2(), target);
  }

  // optional string wbddc2 = 16;
  if (has_wbddc2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wbddc2().data(), this->wbddc2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->wbddc2(), target);
  }

  // optional string out2 = 17;
  if (has_out2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->out2().data(), this->out2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->out2(), target);
  }

  // optional string wdt = 18;
  if (has_wdt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wdt().data(), this->wdt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->wdt(), target);
  }

  // optional int32 line = 19;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->line(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MMSStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "MMS_STAT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string sn = 4;
    if (has_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

    // optional int32 chans = 5;
    if (has_chans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chans());
    }

    // optional string conn = 6;
    if (has_conn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conn());
    }

    // optional string tod = 7;
    if (has_tod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tod());
    }

    // optional string rcv = 8;
    if (has_rcv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rcv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string brd = 9;
    if (has_brd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brd());
    }

    // optional string wbddc = 10;
    if (has_wbddc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wbddc());
    }

    // optional string out = 11;
    if (has_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->out());
    }

    // optional string temp = 12;
    if (has_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->temp());
    }

    // optional int32 id2 = 13;
    if (has_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id2());
    }

    // optional string conn2 = 14;
    if (has_conn2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conn2());
    }

    // optional string rcv2 = 15;
    if (has_rcv2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rcv2());
    }

    // optional string wbddc2 = 16;
    if (has_wbddc2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wbddc2());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string out2 = 17;
    if (has_out2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->out2());
    }

    // optional string wdt = 18;
    if (has_wdt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wdt());
    }

    // optional int32 line = 19;
    if (has_line()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MMSStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MMSStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MMSStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MMSStat::MergeFrom(const MMSStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sn()) {
      set_sn(from.sn());
    }
    if (from.has_chans()) {
      set_chans(from.chans());
    }
    if (from.has_conn()) {
      set_conn(from.conn());
    }
    if (from.has_tod()) {
      set_tod(from.tod());
    }
    if (from.has_rcv()) {
      set_rcv(from.rcv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_brd()) {
      set_brd(from.brd());
    }
    if (from.has_wbddc()) {
      set_wbddc(from.wbddc());
    }
    if (from.has_out()) {
      set_out(from.out());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
    if (from.has_id2()) {
      set_id2(from.id2());
    }
    if (from.has_conn2()) {
      set_conn2(from.conn2());
    }
    if (from.has_rcv2()) {
      set_rcv2(from.rcv2());
    }
    if (from.has_wbddc2()) {
      set_wbddc2(from.wbddc2());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_out2()) {
      set_out2(from.out2());
    }
    if (from.has_wdt()) {
      set_wdt(from.wdt());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MMSStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MMSStat::CopyFrom(const MMSStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMSStat::IsInitialized() const {

  return true;
}

void MMSStat::Swap(MMSStat* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(id_, other->id_);
    std::swap(sn_, other->sn_);
    std::swap(chans_, other->chans_);
    std::swap(conn_, other->conn_);
    std::swap(tod_, other->tod_);
    std::swap(rcv_, other->rcv_);
    std::swap(brd_, other->brd_);
    std::swap(wbddc_, other->wbddc_);
    std::swap(out_, other->out_);
    std::swap(temp_, other->temp_);
    std::swap(id2_, other->id2_);
    std::swap(conn2_, other->conn2_);
    std::swap(rcv2_, other->rcv2_);
    std::swap(wbddc2_, other->wbddc2_);
    std::swap(out2_, other->out2_);
    std::swap(wdt_, other->wdt_);
    std::swap(line_, other->line_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MMSStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MMSStat_descriptor_;
  metadata.reflection = MMSStat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace falcon_receiver_msg

// @@protoc_insertion_point(global_scope)
