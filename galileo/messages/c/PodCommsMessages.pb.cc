// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PodCommsMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PodCommsMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fv {
namespace podcomms {
namespace protos {
namespace PodCommsProtos {

namespace {

const ::google::protobuf::Descriptor* NetworkLayout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkLayout_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeplerGroundToAirEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeplerGroundToAirEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeplerAirToGroundEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeplerAirToGroundEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeplerBiDirectionalEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeplerBiDirectionalEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* PodCommsICDVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PodCommsICDVersion_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PodCommsMessages_2eproto() {
  protobuf_AddDesc_PodCommsMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PodCommsMessages.proto");
  GOOGLE_CHECK(file != NULL);
  NetworkLayout_descriptor_ = file->message_type(0);
  static const int NetworkLayout_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, base_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, infrastructure_port_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, service_port_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, air_port_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, ground_port_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, sub_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, pub_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, air_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, ground_port_),
  };
  NetworkLayout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetworkLayout_descriptor_,
      NetworkLayout::default_instance_,
      NetworkLayout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetworkLayout));
  KeplerGroundToAirEnvelope_descriptor_ = file->message_type(1);
  static const int KeplerGroundToAirEnvelope_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerGroundToAirEnvelope, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerGroundToAirEnvelope, handshake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerGroundToAirEnvelope, ew_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerGroundToAirEnvelope, product_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerGroundToAirEnvelope, bit_test_request_),
  };
  KeplerGroundToAirEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeplerGroundToAirEnvelope_descriptor_,
      KeplerGroundToAirEnvelope::default_instance_,
      KeplerGroundToAirEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerGroundToAirEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerGroundToAirEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeplerGroundToAirEnvelope));
  KeplerAirToGroundEnvelope_descriptor_ = file->message_type(2);
  static const int KeplerAirToGroundEnvelope_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerAirToGroundEnvelope, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerAirToGroundEnvelope, handshake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerAirToGroundEnvelope, ew_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerAirToGroundEnvelope, product_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerAirToGroundEnvelope, bit_test_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerAirToGroundEnvelope, debug_topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerAirToGroundEnvelope, sensor_topic_),
  };
  KeplerAirToGroundEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeplerAirToGroundEnvelope_descriptor_,
      KeplerAirToGroundEnvelope::default_instance_,
      KeplerAirToGroundEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerAirToGroundEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerAirToGroundEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeplerAirToGroundEnvelope));
  KeplerBiDirectionalEnvelope_descriptor_ = file->message_type(3);
  static const int KeplerBiDirectionalEnvelope_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerBiDirectionalEnvelope, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerBiDirectionalEnvelope, signal_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerBiDirectionalEnvelope, sigframes_topic_),
  };
  KeplerBiDirectionalEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeplerBiDirectionalEnvelope_descriptor_,
      KeplerBiDirectionalEnvelope::default_instance_,
      KeplerBiDirectionalEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerBiDirectionalEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerBiDirectionalEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeplerBiDirectionalEnvelope));
  PodCommsICDVersion_descriptor_ = file->message_type(4);
  static const int PodCommsICDVersion_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodCommsICDVersion, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodCommsICDVersion, minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodCommsICDVersion, patch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodCommsICDVersion, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodCommsICDVersion, commit_),
  };
  PodCommsICDVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PodCommsICDVersion_descriptor_,
      PodCommsICDVersion::default_instance_,
      PodCommsICDVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodCommsICDVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodCommsICDVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PodCommsICDVersion));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PodCommsMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetworkLayout_descriptor_, &NetworkLayout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeplerGroundToAirEnvelope_descriptor_, &KeplerGroundToAirEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeplerAirToGroundEnvelope_descriptor_, &KeplerAirToGroundEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeplerBiDirectionalEnvelope_descriptor_, &KeplerBiDirectionalEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PodCommsICDVersion_descriptor_, &PodCommsICDVersion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PodCommsMessages_2eproto() {
  delete NetworkLayout::default_instance_;
  delete NetworkLayout_reflection_;
  delete KeplerGroundToAirEnvelope::default_instance_;
  delete KeplerGroundToAirEnvelope_reflection_;
  delete KeplerAirToGroundEnvelope::default_instance_;
  delete KeplerAirToGroundEnvelope_reflection_;
  delete KeplerBiDirectionalEnvelope::default_instance_;
  delete KeplerBiDirectionalEnvelope_reflection_;
  delete PodCommsICDVersion::default_instance_;
  delete PodCommsICDVersion_reflection_;
  delete PodCommsICDVersion::_default_date_;
}

void protobuf_AddDesc_PodCommsMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::fv::tb::protos::TBProtos::protobuf_AddDesc_ThunderbirdMessages_2eproto();
  ::service_infrastructure::protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  ::service_infrastructure::protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  ::bit_protos::protobuf_AddDesc_BitMessages_2eproto();
  ::falcon_debug_msg::protobuf_AddDesc_DebugMessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026PodCommsMessages.proto\022!fv.podcomms.pr"
    "otos.PodCommsProtos\032\031ThunderbirdMessages"
    ".proto\032!ServiceInfrastructureCommon.prot"
    "o\032$ServiceInfrastructureExclusive.proto\032"
    "\021BitMessages.proto\032\023DebugMessages.proto\""
    "\221\002\n\rNetworkLayout\022\027\n\tbase_port\030\001 \001(\003:\00480"
    "70\022&\n\032infrastructure_port_offset\030\002 \001(\003:\002"
    "17\022\037\n\023service_port_offset\030\003 \001(\003:\00219\022\033\n\017a"
    "ir_port_offset\030\004 \001(\003:\00221\022\036\n\022ground_port_"
    "offset\030\005 \001(\003:\00223\022\026\n\010sub_port\030\006 \001(\003:\0048186"
    "\022\026\n\010pub_port\030\007 \001(\003:\0048185\022\026\n\010air_port\030\010 \001"
    "(\003:\0048184\022\031\n\013ground_port\030\t \001(\003:\0048183\"\277\002\n\031"
    "KeplerGroundToAirEnvelope\022.\n\006header\030\001 \001("
    "\0132\036.service_infrastructure.Header\0229\n\than"
    "dshake\030\004 \001(\0132&.service_infrastructure.Ha"
    "ndshakeTopic\022:\n\new_request\030\005 \001(\0132&.servi"
    "ce_infrastructure.EWRequestTopic\022D\n\017prod"
    "uct_request\030\006 \001(\0132+.service_infrastructu"
    "re.ProductRequestTopic\0225\n\020bit_test_reque"
    "st\030\010 \001(\0132\033.bit_protos.BitRequestTopic\"\271\003"
    "\n\031KeplerAirToGroundEnvelope\022.\n\006header\030\001 "
    "\001(\0132\036.service_infrastructure.Header\0229\n\th"
    "andshake\030\004 \001(\0132&.service_infrastructure."
    "HandshakeTopic\022<\n\013ew_response\030\006 \001(\0132\'.se"
    "rvice_infrastructure.EWResponseTopic\022F\n\020"
    "product_response\030\007 \001(\0132,.service_infrast"
    "ructure.ProductResponseTopic\0227\n\021bit_test"
    "_response\030\t \001(\0132\034.bit_protos.BitResponse"
    "Topic\0227\n\013debug_topic\030\n \001(\0132\".service_inf"
    "rastructure.DebugTopic\0229\n\014sensor_topic\030\013"
    " \001(\0132#.service_infrastructure.SensorTopi"
    "c\"\316\001\n\033KeplerBiDirectionalEnvelope\022.\n\006hea"
    "der\030\001 \001(\0132\036.service_infrastructure.Heade"
    "r\022>\n\014signal_event\030\010 \001(\0132(.service_infras"
    "tructure.SignalEventTopic\022\?\n\017sigframes_t"
    "opic\030\014 \001(\0132&.service_infrastructure.SigF"
    "ramesTopic\"t\n\022PodCommsICDVersion\022\020\n\005majo"
    "r\030\001 \001(\005:\0010\022\020\n\005minor\030\002 \001(\005:\0010\022\020\n\005patch\030\003 "
    "\001(\005:\0012\022\030\n\004date\030\004 \001(\t:\n2020-05-22\022\016\n\006comm"
    "it\030\005 \001(\tB$\n\022fv.podcomms.protosB\016PodComms"
    "Protos", 1606);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PodCommsMessages.proto", &protobuf_RegisterTypes);
  NetworkLayout::default_instance_ = new NetworkLayout();
  KeplerGroundToAirEnvelope::default_instance_ = new KeplerGroundToAirEnvelope();
  KeplerAirToGroundEnvelope::default_instance_ = new KeplerAirToGroundEnvelope();
  KeplerBiDirectionalEnvelope::default_instance_ = new KeplerBiDirectionalEnvelope();
  PodCommsICDVersion::_default_date_ =
      new ::std::string("2020-05-22", 10);
  PodCommsICDVersion::default_instance_ = new PodCommsICDVersion();
  NetworkLayout::default_instance_->InitAsDefaultInstance();
  KeplerGroundToAirEnvelope::default_instance_->InitAsDefaultInstance();
  KeplerAirToGroundEnvelope::default_instance_->InitAsDefaultInstance();
  KeplerBiDirectionalEnvelope::default_instance_->InitAsDefaultInstance();
  PodCommsICDVersion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PodCommsMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PodCommsMessages_2eproto {
  StaticDescriptorInitializer_PodCommsMessages_2eproto() {
    protobuf_AddDesc_PodCommsMessages_2eproto();
  }
} static_descriptor_initializer_PodCommsMessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NetworkLayout::kBasePortFieldNumber;
const int NetworkLayout::kInfrastructurePortOffsetFieldNumber;
const int NetworkLayout::kServicePortOffsetFieldNumber;
const int NetworkLayout::kAirPortOffsetFieldNumber;
const int NetworkLayout::kGroundPortOffsetFieldNumber;
const int NetworkLayout::kSubPortFieldNumber;
const int NetworkLayout::kPubPortFieldNumber;
const int NetworkLayout::kAirPortFieldNumber;
const int NetworkLayout::kGroundPortFieldNumber;
#endif  // !_MSC_VER

NetworkLayout::NetworkLayout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetworkLayout::InitAsDefaultInstance() {
}

NetworkLayout::NetworkLayout(const NetworkLayout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetworkLayout::SharedCtor() {
  _cached_size_ = 0;
  base_port_ = GOOGLE_LONGLONG(8070);
  infrastructure_port_offset_ = GOOGLE_LONGLONG(17);
  service_port_offset_ = GOOGLE_LONGLONG(19);
  air_port_offset_ = GOOGLE_LONGLONG(21);
  ground_port_offset_ = GOOGLE_LONGLONG(23);
  sub_port_ = GOOGLE_LONGLONG(8186);
  pub_port_ = GOOGLE_LONGLONG(8185);
  air_port_ = GOOGLE_LONGLONG(8184);
  ground_port_ = GOOGLE_LONGLONG(8183);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkLayout::~NetworkLayout() {
  SharedDtor();
}

void NetworkLayout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetworkLayout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkLayout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkLayout_descriptor_;
}

const NetworkLayout& NetworkLayout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PodCommsMessages_2eproto();
  return *default_instance_;
}

NetworkLayout* NetworkLayout::default_instance_ = NULL;

NetworkLayout* NetworkLayout::New() const {
  return new NetworkLayout;
}

void NetworkLayout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    base_port_ = GOOGLE_LONGLONG(8070);
    infrastructure_port_offset_ = GOOGLE_LONGLONG(17);
    service_port_offset_ = GOOGLE_LONGLONG(19);
    air_port_offset_ = GOOGLE_LONGLONG(21);
    ground_port_offset_ = GOOGLE_LONGLONG(23);
    sub_port_ = GOOGLE_LONGLONG(8186);
    pub_port_ = GOOGLE_LONGLONG(8185);
    air_port_ = GOOGLE_LONGLONG(8184);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ground_port_ = GOOGLE_LONGLONG(8183);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetworkLayout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 base_port = 1 [default = 8070];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &base_port_)));
          set_has_base_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_infrastructure_port_offset;
        break;
      }

      // optional int64 infrastructure_port_offset = 2 [default = 17];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_infrastructure_port_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &infrastructure_port_offset_)));
          set_has_infrastructure_port_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_service_port_offset;
        break;
      }

      // optional int64 service_port_offset = 3 [default = 19];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_port_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &service_port_offset_)));
          set_has_service_port_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_air_port_offset;
        break;
      }

      // optional int64 air_port_offset = 4 [default = 21];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_air_port_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &air_port_offset_)));
          set_has_air_port_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ground_port_offset;
        break;
      }

      // optional int64 ground_port_offset = 5 [default = 23];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ground_port_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ground_port_offset_)));
          set_has_ground_port_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sub_port;
        break;
      }

      // optional int64 sub_port = 6 [default = 8186];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sub_port_)));
          set_has_sub_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pub_port;
        break;
      }

      // optional int64 pub_port = 7 [default = 8185];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pub_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pub_port_)));
          set_has_pub_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_air_port;
        break;
      }

      // optional int64 air_port = 8 [default = 8184];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_air_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &air_port_)));
          set_has_air_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ground_port;
        break;
      }

      // optional int64 ground_port = 9 [default = 8183];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ground_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ground_port_)));
          set_has_ground_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetworkLayout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 base_port = 1 [default = 8070];
  if (has_base_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->base_port(), output);
  }

  // optional int64 infrastructure_port_offset = 2 [default = 17];
  if (has_infrastructure_port_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->infrastructure_port_offset(), output);
  }

  // optional int64 service_port_offset = 3 [default = 19];
  if (has_service_port_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->service_port_offset(), output);
  }

  // optional int64 air_port_offset = 4 [default = 21];
  if (has_air_port_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->air_port_offset(), output);
  }

  // optional int64 ground_port_offset = 5 [default = 23];
  if (has_ground_port_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ground_port_offset(), output);
  }

  // optional int64 sub_port = 6 [default = 8186];
  if (has_sub_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->sub_port(), output);
  }

  // optional int64 pub_port = 7 [default = 8185];
  if (has_pub_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->pub_port(), output);
  }

  // optional int64 air_port = 8 [default = 8184];
  if (has_air_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->air_port(), output);
  }

  // optional int64 ground_port = 9 [default = 8183];
  if (has_ground_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->ground_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetworkLayout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 base_port = 1 [default = 8070];
  if (has_base_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->base_port(), target);
  }

  // optional int64 infrastructure_port_offset = 2 [default = 17];
  if (has_infrastructure_port_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->infrastructure_port_offset(), target);
  }

  // optional int64 service_port_offset = 3 [default = 19];
  if (has_service_port_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->service_port_offset(), target);
  }

  // optional int64 air_port_offset = 4 [default = 21];
  if (has_air_port_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->air_port_offset(), target);
  }

  // optional int64 ground_port_offset = 5 [default = 23];
  if (has_ground_port_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ground_port_offset(), target);
  }

  // optional int64 sub_port = 6 [default = 8186];
  if (has_sub_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->sub_port(), target);
  }

  // optional int64 pub_port = 7 [default = 8185];
  if (has_pub_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->pub_port(), target);
  }

  // optional int64 air_port = 8 [default = 8184];
  if (has_air_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->air_port(), target);
  }

  // optional int64 ground_port = 9 [default = 8183];
  if (has_ground_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->ground_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetworkLayout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 base_port = 1 [default = 8070];
    if (has_base_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->base_port());
    }

    // optional int64 infrastructure_port_offset = 2 [default = 17];
    if (has_infrastructure_port_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->infrastructure_port_offset());
    }

    // optional int64 service_port_offset = 3 [default = 19];
    if (has_service_port_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->service_port_offset());
    }

    // optional int64 air_port_offset = 4 [default = 21];
    if (has_air_port_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->air_port_offset());
    }

    // optional int64 ground_port_offset = 5 [default = 23];
    if (has_ground_port_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ground_port_offset());
    }

    // optional int64 sub_port = 6 [default = 8186];
    if (has_sub_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sub_port());
    }

    // optional int64 pub_port = 7 [default = 8185];
    if (has_pub_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pub_port());
    }

    // optional int64 air_port = 8 [default = 8184];
    if (has_air_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->air_port());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 ground_port = 9 [default = 8183];
    if (has_ground_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ground_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkLayout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetworkLayout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetworkLayout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkLayout::MergeFrom(const NetworkLayout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_port()) {
      set_base_port(from.base_port());
    }
    if (from.has_infrastructure_port_offset()) {
      set_infrastructure_port_offset(from.infrastructure_port_offset());
    }
    if (from.has_service_port_offset()) {
      set_service_port_offset(from.service_port_offset());
    }
    if (from.has_air_port_offset()) {
      set_air_port_offset(from.air_port_offset());
    }
    if (from.has_ground_port_offset()) {
      set_ground_port_offset(from.ground_port_offset());
    }
    if (from.has_sub_port()) {
      set_sub_port(from.sub_port());
    }
    if (from.has_pub_port()) {
      set_pub_port(from.pub_port());
    }
    if (from.has_air_port()) {
      set_air_port(from.air_port());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ground_port()) {
      set_ground_port(from.ground_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetworkLayout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkLayout::CopyFrom(const NetworkLayout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkLayout::IsInitialized() const {

  return true;
}

void NetworkLayout::Swap(NetworkLayout* other) {
  if (other != this) {
    std::swap(base_port_, other->base_port_);
    std::swap(infrastructure_port_offset_, other->infrastructure_port_offset_);
    std::swap(service_port_offset_, other->service_port_offset_);
    std::swap(air_port_offset_, other->air_port_offset_);
    std::swap(ground_port_offset_, other->ground_port_offset_);
    std::swap(sub_port_, other->sub_port_);
    std::swap(pub_port_, other->pub_port_);
    std::swap(air_port_, other->air_port_);
    std::swap(ground_port_, other->ground_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetworkLayout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkLayout_descriptor_;
  metadata.reflection = NetworkLayout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeplerGroundToAirEnvelope::kHeaderFieldNumber;
const int KeplerGroundToAirEnvelope::kHandshakeFieldNumber;
const int KeplerGroundToAirEnvelope::kEwRequestFieldNumber;
const int KeplerGroundToAirEnvelope::kProductRequestFieldNumber;
const int KeplerGroundToAirEnvelope::kBitTestRequestFieldNumber;
#endif  // !_MSC_VER

KeplerGroundToAirEnvelope::KeplerGroundToAirEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeplerGroundToAirEnvelope::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  handshake_ = const_cast< ::service_infrastructure::HandshakeTopic*>(&::service_infrastructure::HandshakeTopic::default_instance());
  ew_request_ = const_cast< ::service_infrastructure::EWRequestTopic*>(&::service_infrastructure::EWRequestTopic::default_instance());
  product_request_ = const_cast< ::service_infrastructure::ProductRequestTopic*>(&::service_infrastructure::ProductRequestTopic::default_instance());
  bit_test_request_ = const_cast< ::bit_protos::BitRequestTopic*>(&::bit_protos::BitRequestTopic::default_instance());
}

KeplerGroundToAirEnvelope::KeplerGroundToAirEnvelope(const KeplerGroundToAirEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeplerGroundToAirEnvelope::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  handshake_ = NULL;
  ew_request_ = NULL;
  product_request_ = NULL;
  bit_test_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeplerGroundToAirEnvelope::~KeplerGroundToAirEnvelope() {
  SharedDtor();
}

void KeplerGroundToAirEnvelope::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete handshake_;
    delete ew_request_;
    delete product_request_;
    delete bit_test_request_;
  }
}

void KeplerGroundToAirEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeplerGroundToAirEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeplerGroundToAirEnvelope_descriptor_;
}

const KeplerGroundToAirEnvelope& KeplerGroundToAirEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PodCommsMessages_2eproto();
  return *default_instance_;
}

KeplerGroundToAirEnvelope* KeplerGroundToAirEnvelope::default_instance_ = NULL;

KeplerGroundToAirEnvelope* KeplerGroundToAirEnvelope::New() const {
  return new KeplerGroundToAirEnvelope;
}

void KeplerGroundToAirEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_handshake()) {
      if (handshake_ != NULL) handshake_->::service_infrastructure::HandshakeTopic::Clear();
    }
    if (has_ew_request()) {
      if (ew_request_ != NULL) ew_request_->::service_infrastructure::EWRequestTopic::Clear();
    }
    if (has_product_request()) {
      if (product_request_ != NULL) product_request_->::service_infrastructure::ProductRequestTopic::Clear();
    }
    if (has_bit_test_request()) {
      if (bit_test_request_ != NULL) bit_test_request_->::bit_protos::BitRequestTopic::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeplerGroundToAirEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_infrastructure.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_handshake;
        break;
      }

      // optional .service_infrastructure.HandshakeTopic handshake = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handshake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handshake()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ew_request;
        break;
      }

      // optional .service_infrastructure.EWRequestTopic ew_request = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_product_request;
        break;
      }

      // optional .service_infrastructure.ProductRequestTopic product_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_product_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_bit_test_request;
        break;
      }

      // optional .bit_protos.BitRequestTopic bit_test_request = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bit_test_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bit_test_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeplerGroundToAirEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .service_infrastructure.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .service_infrastructure.HandshakeTopic handshake = 4;
  if (has_handshake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->handshake(), output);
  }

  // optional .service_infrastructure.EWRequestTopic ew_request = 5;
  if (has_ew_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ew_request(), output);
  }

  // optional .service_infrastructure.ProductRequestTopic product_request = 6;
  if (has_product_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->product_request(), output);
  }

  // optional .bit_protos.BitRequestTopic bit_test_request = 8;
  if (has_bit_test_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->bit_test_request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeplerGroundToAirEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .service_infrastructure.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .service_infrastructure.HandshakeTopic handshake = 4;
  if (has_handshake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->handshake(), target);
  }

  // optional .service_infrastructure.EWRequestTopic ew_request = 5;
  if (has_ew_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ew_request(), target);
  }

  // optional .service_infrastructure.ProductRequestTopic product_request = 6;
  if (has_product_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->product_request(), target);
  }

  // optional .bit_protos.BitRequestTopic bit_test_request = 8;
  if (has_bit_test_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->bit_test_request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeplerGroundToAirEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .service_infrastructure.HandshakeTopic handshake = 4;
    if (has_handshake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handshake());
    }

    // optional .service_infrastructure.EWRequestTopic ew_request = 5;
    if (has_ew_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_request());
    }

    // optional .service_infrastructure.ProductRequestTopic product_request = 6;
    if (has_product_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->product_request());
    }

    // optional .bit_protos.BitRequestTopic bit_test_request = 8;
    if (has_bit_test_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bit_test_request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeplerGroundToAirEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeplerGroundToAirEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeplerGroundToAirEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeplerGroundToAirEnvelope::MergeFrom(const KeplerGroundToAirEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_handshake()) {
      mutable_handshake()->::service_infrastructure::HandshakeTopic::MergeFrom(from.handshake());
    }
    if (from.has_ew_request()) {
      mutable_ew_request()->::service_infrastructure::EWRequestTopic::MergeFrom(from.ew_request());
    }
    if (from.has_product_request()) {
      mutable_product_request()->::service_infrastructure::ProductRequestTopic::MergeFrom(from.product_request());
    }
    if (from.has_bit_test_request()) {
      mutable_bit_test_request()->::bit_protos::BitRequestTopic::MergeFrom(from.bit_test_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeplerGroundToAirEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeplerGroundToAirEnvelope::CopyFrom(const KeplerGroundToAirEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeplerGroundToAirEnvelope::IsInitialized() const {

  return true;
}

void KeplerGroundToAirEnvelope::Swap(KeplerGroundToAirEnvelope* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(handshake_, other->handshake_);
    std::swap(ew_request_, other->ew_request_);
    std::swap(product_request_, other->product_request_);
    std::swap(bit_test_request_, other->bit_test_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeplerGroundToAirEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeplerGroundToAirEnvelope_descriptor_;
  metadata.reflection = KeplerGroundToAirEnvelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeplerAirToGroundEnvelope::kHeaderFieldNumber;
const int KeplerAirToGroundEnvelope::kHandshakeFieldNumber;
const int KeplerAirToGroundEnvelope::kEwResponseFieldNumber;
const int KeplerAirToGroundEnvelope::kProductResponseFieldNumber;
const int KeplerAirToGroundEnvelope::kBitTestResponseFieldNumber;
const int KeplerAirToGroundEnvelope::kDebugTopicFieldNumber;
const int KeplerAirToGroundEnvelope::kSensorTopicFieldNumber;
#endif  // !_MSC_VER

KeplerAirToGroundEnvelope::KeplerAirToGroundEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeplerAirToGroundEnvelope::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  handshake_ = const_cast< ::service_infrastructure::HandshakeTopic*>(&::service_infrastructure::HandshakeTopic::default_instance());
  ew_response_ = const_cast< ::service_infrastructure::EWResponseTopic*>(&::service_infrastructure::EWResponseTopic::default_instance());
  product_response_ = const_cast< ::service_infrastructure::ProductResponseTopic*>(&::service_infrastructure::ProductResponseTopic::default_instance());
  bit_test_response_ = const_cast< ::bit_protos::BitResponseTopic*>(&::bit_protos::BitResponseTopic::default_instance());
  debug_topic_ = const_cast< ::service_infrastructure::DebugTopic*>(&::service_infrastructure::DebugTopic::default_instance());
  sensor_topic_ = const_cast< ::service_infrastructure::SensorTopic*>(&::service_infrastructure::SensorTopic::default_instance());
}

KeplerAirToGroundEnvelope::KeplerAirToGroundEnvelope(const KeplerAirToGroundEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeplerAirToGroundEnvelope::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  handshake_ = NULL;
  ew_response_ = NULL;
  product_response_ = NULL;
  bit_test_response_ = NULL;
  debug_topic_ = NULL;
  sensor_topic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeplerAirToGroundEnvelope::~KeplerAirToGroundEnvelope() {
  SharedDtor();
}

void KeplerAirToGroundEnvelope::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete handshake_;
    delete ew_response_;
    delete product_response_;
    delete bit_test_response_;
    delete debug_topic_;
    delete sensor_topic_;
  }
}

void KeplerAirToGroundEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeplerAirToGroundEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeplerAirToGroundEnvelope_descriptor_;
}

const KeplerAirToGroundEnvelope& KeplerAirToGroundEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PodCommsMessages_2eproto();
  return *default_instance_;
}

KeplerAirToGroundEnvelope* KeplerAirToGroundEnvelope::default_instance_ = NULL;

KeplerAirToGroundEnvelope* KeplerAirToGroundEnvelope::New() const {
  return new KeplerAirToGroundEnvelope;
}

void KeplerAirToGroundEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_handshake()) {
      if (handshake_ != NULL) handshake_->::service_infrastructure::HandshakeTopic::Clear();
    }
    if (has_ew_response()) {
      if (ew_response_ != NULL) ew_response_->::service_infrastructure::EWResponseTopic::Clear();
    }
    if (has_product_response()) {
      if (product_response_ != NULL) product_response_->::service_infrastructure::ProductResponseTopic::Clear();
    }
    if (has_bit_test_response()) {
      if (bit_test_response_ != NULL) bit_test_response_->::bit_protos::BitResponseTopic::Clear();
    }
    if (has_debug_topic()) {
      if (debug_topic_ != NULL) debug_topic_->::service_infrastructure::DebugTopic::Clear();
    }
    if (has_sensor_topic()) {
      if (sensor_topic_ != NULL) sensor_topic_->::service_infrastructure::SensorTopic::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeplerAirToGroundEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_infrastructure.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_handshake;
        break;
      }

      // optional .service_infrastructure.HandshakeTopic handshake = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handshake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handshake()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ew_response;
        break;
      }

      // optional .service_infrastructure.EWResponseTopic ew_response = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_product_response;
        break;
      }

      // optional .service_infrastructure.ProductResponseTopic product_response = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_product_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_bit_test_response;
        break;
      }

      // optional .bit_protos.BitResponseTopic bit_test_response = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bit_test_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bit_test_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_debug_topic;
        break;
      }

      // optional .service_infrastructure.DebugTopic debug_topic = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_topic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_sensor_topic;
        break;
      }

      // optional .service_infrastructure.SensorTopic sensor_topic = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensor_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_topic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeplerAirToGroundEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .service_infrastructure.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .service_infrastructure.HandshakeTopic handshake = 4;
  if (has_handshake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->handshake(), output);
  }

  // optional .service_infrastructure.EWResponseTopic ew_response = 6;
  if (has_ew_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ew_response(), output);
  }

  // optional .service_infrastructure.ProductResponseTopic product_response = 7;
  if (has_product_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->product_response(), output);
  }

  // optional .bit_protos.BitResponseTopic bit_test_response = 9;
  if (has_bit_test_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->bit_test_response(), output);
  }

  // optional .service_infrastructure.DebugTopic debug_topic = 10;
  if (has_debug_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->debug_topic(), output);
  }

  // optional .service_infrastructure.SensorTopic sensor_topic = 11;
  if (has_sensor_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->sensor_topic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeplerAirToGroundEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .service_infrastructure.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .service_infrastructure.HandshakeTopic handshake = 4;
  if (has_handshake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->handshake(), target);
  }

  // optional .service_infrastructure.EWResponseTopic ew_response = 6;
  if (has_ew_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ew_response(), target);
  }

  // optional .service_infrastructure.ProductResponseTopic product_response = 7;
  if (has_product_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->product_response(), target);
  }

  // optional .bit_protos.BitResponseTopic bit_test_response = 9;
  if (has_bit_test_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->bit_test_response(), target);
  }

  // optional .service_infrastructure.DebugTopic debug_topic = 10;
  if (has_debug_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->debug_topic(), target);
  }

  // optional .service_infrastructure.SensorTopic sensor_topic = 11;
  if (has_sensor_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->sensor_topic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeplerAirToGroundEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .service_infrastructure.HandshakeTopic handshake = 4;
    if (has_handshake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handshake());
    }

    // optional .service_infrastructure.EWResponseTopic ew_response = 6;
    if (has_ew_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_response());
    }

    // optional .service_infrastructure.ProductResponseTopic product_response = 7;
    if (has_product_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->product_response());
    }

    // optional .bit_protos.BitResponseTopic bit_test_response = 9;
    if (has_bit_test_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bit_test_response());
    }

    // optional .service_infrastructure.DebugTopic debug_topic = 10;
    if (has_debug_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debug_topic());
    }

    // optional .service_infrastructure.SensorTopic sensor_topic = 11;
    if (has_sensor_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor_topic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeplerAirToGroundEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeplerAirToGroundEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeplerAirToGroundEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeplerAirToGroundEnvelope::MergeFrom(const KeplerAirToGroundEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_handshake()) {
      mutable_handshake()->::service_infrastructure::HandshakeTopic::MergeFrom(from.handshake());
    }
    if (from.has_ew_response()) {
      mutable_ew_response()->::service_infrastructure::EWResponseTopic::MergeFrom(from.ew_response());
    }
    if (from.has_product_response()) {
      mutable_product_response()->::service_infrastructure::ProductResponseTopic::MergeFrom(from.product_response());
    }
    if (from.has_bit_test_response()) {
      mutable_bit_test_response()->::bit_protos::BitResponseTopic::MergeFrom(from.bit_test_response());
    }
    if (from.has_debug_topic()) {
      mutable_debug_topic()->::service_infrastructure::DebugTopic::MergeFrom(from.debug_topic());
    }
    if (from.has_sensor_topic()) {
      mutable_sensor_topic()->::service_infrastructure::SensorTopic::MergeFrom(from.sensor_topic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeplerAirToGroundEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeplerAirToGroundEnvelope::CopyFrom(const KeplerAirToGroundEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeplerAirToGroundEnvelope::IsInitialized() const {

  return true;
}

void KeplerAirToGroundEnvelope::Swap(KeplerAirToGroundEnvelope* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(handshake_, other->handshake_);
    std::swap(ew_response_, other->ew_response_);
    std::swap(product_response_, other->product_response_);
    std::swap(bit_test_response_, other->bit_test_response_);
    std::swap(debug_topic_, other->debug_topic_);
    std::swap(sensor_topic_, other->sensor_topic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeplerAirToGroundEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeplerAirToGroundEnvelope_descriptor_;
  metadata.reflection = KeplerAirToGroundEnvelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeplerBiDirectionalEnvelope::kHeaderFieldNumber;
const int KeplerBiDirectionalEnvelope::kSignalEventFieldNumber;
const int KeplerBiDirectionalEnvelope::kSigframesTopicFieldNumber;
#endif  // !_MSC_VER

KeplerBiDirectionalEnvelope::KeplerBiDirectionalEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeplerBiDirectionalEnvelope::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  signal_event_ = const_cast< ::service_infrastructure::SignalEventTopic*>(&::service_infrastructure::SignalEventTopic::default_instance());
  sigframes_topic_ = const_cast< ::service_infrastructure::SigFramesTopic*>(&::service_infrastructure::SigFramesTopic::default_instance());
}

KeplerBiDirectionalEnvelope::KeplerBiDirectionalEnvelope(const KeplerBiDirectionalEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeplerBiDirectionalEnvelope::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  signal_event_ = NULL;
  sigframes_topic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeplerBiDirectionalEnvelope::~KeplerBiDirectionalEnvelope() {
  SharedDtor();
}

void KeplerBiDirectionalEnvelope::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete signal_event_;
    delete sigframes_topic_;
  }
}

void KeplerBiDirectionalEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeplerBiDirectionalEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeplerBiDirectionalEnvelope_descriptor_;
}

const KeplerBiDirectionalEnvelope& KeplerBiDirectionalEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PodCommsMessages_2eproto();
  return *default_instance_;
}

KeplerBiDirectionalEnvelope* KeplerBiDirectionalEnvelope::default_instance_ = NULL;

KeplerBiDirectionalEnvelope* KeplerBiDirectionalEnvelope::New() const {
  return new KeplerBiDirectionalEnvelope;
}

void KeplerBiDirectionalEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_signal_event()) {
      if (signal_event_ != NULL) signal_event_->::service_infrastructure::SignalEventTopic::Clear();
    }
    if (has_sigframes_topic()) {
      if (sigframes_topic_ != NULL) sigframes_topic_->::service_infrastructure::SigFramesTopic::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeplerBiDirectionalEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_infrastructure.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_signal_event;
        break;
      }

      // optional .service_infrastructure.SignalEventTopic signal_event = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sigframes_topic;
        break;
      }

      // optional .service_infrastructure.SigFramesTopic sigframes_topic = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigframes_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigframes_topic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeplerBiDirectionalEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .service_infrastructure.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .service_infrastructure.SignalEventTopic signal_event = 8;
  if (has_signal_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->signal_event(), output);
  }

  // optional .service_infrastructure.SigFramesTopic sigframes_topic = 12;
  if (has_sigframes_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->sigframes_topic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeplerBiDirectionalEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .service_infrastructure.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .service_infrastructure.SignalEventTopic signal_event = 8;
  if (has_signal_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->signal_event(), target);
  }

  // optional .service_infrastructure.SigFramesTopic sigframes_topic = 12;
  if (has_sigframes_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->sigframes_topic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeplerBiDirectionalEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .service_infrastructure.SignalEventTopic signal_event = 8;
    if (has_signal_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal_event());
    }

    // optional .service_infrastructure.SigFramesTopic sigframes_topic = 12;
    if (has_sigframes_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sigframes_topic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeplerBiDirectionalEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeplerBiDirectionalEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeplerBiDirectionalEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeplerBiDirectionalEnvelope::MergeFrom(const KeplerBiDirectionalEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_signal_event()) {
      mutable_signal_event()->::service_infrastructure::SignalEventTopic::MergeFrom(from.signal_event());
    }
    if (from.has_sigframes_topic()) {
      mutable_sigframes_topic()->::service_infrastructure::SigFramesTopic::MergeFrom(from.sigframes_topic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeplerBiDirectionalEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeplerBiDirectionalEnvelope::CopyFrom(const KeplerBiDirectionalEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeplerBiDirectionalEnvelope::IsInitialized() const {

  return true;
}

void KeplerBiDirectionalEnvelope::Swap(KeplerBiDirectionalEnvelope* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(signal_event_, other->signal_event_);
    std::swap(sigframes_topic_, other->sigframes_topic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeplerBiDirectionalEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeplerBiDirectionalEnvelope_descriptor_;
  metadata.reflection = KeplerBiDirectionalEnvelope_reflection_;
  return metadata;
}


// ===================================================================

::std::string* PodCommsICDVersion::_default_date_ = NULL;
#ifndef _MSC_VER
const int PodCommsICDVersion::kMajorFieldNumber;
const int PodCommsICDVersion::kMinorFieldNumber;
const int PodCommsICDVersion::kPatchFieldNumber;
const int PodCommsICDVersion::kDateFieldNumber;
const int PodCommsICDVersion::kCommitFieldNumber;
#endif  // !_MSC_VER

PodCommsICDVersion::PodCommsICDVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PodCommsICDVersion::InitAsDefaultInstance() {
}

PodCommsICDVersion::PodCommsICDVersion(const PodCommsICDVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PodCommsICDVersion::SharedCtor() {
  _cached_size_ = 0;
  major_ = 0;
  minor_ = 0;
  patch_ = 2;
  date_ = const_cast< ::std::string*>(_default_date_);
  commit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PodCommsICDVersion::~PodCommsICDVersion() {
  SharedDtor();
}

void PodCommsICDVersion::SharedDtor() {
  if (date_ != _default_date_) {
    delete date_;
  }
  if (commit_ != &::google::protobuf::internal::kEmptyString) {
    delete commit_;
  }
  if (this != default_instance_) {
  }
}

void PodCommsICDVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PodCommsICDVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PodCommsICDVersion_descriptor_;
}

const PodCommsICDVersion& PodCommsICDVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PodCommsMessages_2eproto();
  return *default_instance_;
}

PodCommsICDVersion* PodCommsICDVersion::default_instance_ = NULL;

PodCommsICDVersion* PodCommsICDVersion::New() const {
  return new PodCommsICDVersion;
}

void PodCommsICDVersion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    major_ = 0;
    minor_ = 0;
    patch_ = 2;
    if (has_date()) {
      if (date_ != _default_date_) {
        date_->assign(*_default_date_);
      }
    }
    if (has_commit()) {
      if (commit_ != &::google::protobuf::internal::kEmptyString) {
        commit_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PodCommsICDVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 major = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_)));
          set_has_major();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minor;
        break;
      }

      // optional int32 minor = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_)));
          set_has_minor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_patch;
        break;
      }

      // optional int32 patch = 3 [default = 2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patch_)));
          set_has_patch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_date;
        break;
      }

      // optional string date = 4 [default = "2020-05-22"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_commit;
        break;
      }

      // optional string commit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commit().data(), this->commit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PodCommsICDVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 major = 1 [default = 0];
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->major(), output);
  }

  // optional int32 minor = 2 [default = 0];
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minor(), output);
  }

  // optional int32 patch = 3 [default = 2];
  if (has_patch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->patch(), output);
  }

  // optional string date = 4 [default = "2020-05-22"];
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->date(), output);
  }

  // optional string commit = 5;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commit().data(), this->commit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->commit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PodCommsICDVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 major = 1 [default = 0];
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->major(), target);
  }

  // optional int32 minor = 2 [default = 0];
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minor(), target);
  }

  // optional int32 patch = 3 [default = 2];
  if (has_patch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->patch(), target);
  }

  // optional string date = 4 [default = "2020-05-22"];
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->date(), target);
  }

  // optional string commit = 5;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commit().data(), this->commit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->commit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PodCommsICDVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 major = 1 [default = 0];
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major());
    }

    // optional int32 minor = 2 [default = 0];
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor());
    }

    // optional int32 patch = 3 [default = 2];
    if (has_patch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patch());
    }

    // optional string date = 4 [default = "2020-05-22"];
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string commit = 5;
    if (has_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PodCommsICDVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PodCommsICDVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PodCommsICDVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PodCommsICDVersion::MergeFrom(const PodCommsICDVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
    if (from.has_patch()) {
      set_patch(from.patch());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_commit()) {
      set_commit(from.commit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PodCommsICDVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PodCommsICDVersion::CopyFrom(const PodCommsICDVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PodCommsICDVersion::IsInitialized() const {

  return true;
}

void PodCommsICDVersion::Swap(PodCommsICDVersion* other) {
  if (other != this) {
    std::swap(major_, other->major_);
    std::swap(minor_, other->minor_);
    std::swap(patch_, other->patch_);
    std::swap(date_, other->date_);
    std::swap(commit_, other->commit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PodCommsICDVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PodCommsICDVersion_descriptor_;
  metadata.reflection = PodCommsICDVersion_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PodCommsProtos
}  // namespace protos
}  // namespace podcomms
}  // namespace fv

// @@protoc_insertion_point(global_scope)
