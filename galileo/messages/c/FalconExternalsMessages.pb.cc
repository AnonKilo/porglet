// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FalconExternalsMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FalconExternalsMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace falcon_externals_msg {

namespace {

const ::google::protobuf::Descriptor* ExternalsHit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternalsHit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExternalsHit_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InternalsHit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalsHit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DsssDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DsssDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* HopDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HopDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* FSKDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FSKDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpreadDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpreadDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* AVDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AVDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* QSTAT_RT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QSTAT_RT_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternalsRelease_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternalsRelease_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExternalsRelease_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NullHit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NullHit_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FalconExternalsMessages_2eproto() {
  protobuf_AddDesc_FalconExternalsMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FalconExternalsMessages.proto");
  GOOGLE_CHECK(file != NULL);
  ExternalsHit_descriptor_ = file->message_type(0);
  static const int ExternalsHit_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, threattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, freqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, psuedouniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, globalidnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, istrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, hopdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, fskdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, cwdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, spreaddescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, aviddescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, dsssdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, updatevalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, soinum_),
  };
  ExternalsHit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExternalsHit_descriptor_,
      ExternalsHit::default_instance_,
      ExternalsHit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExternalsHit));
  ExternalsHit_Type_descriptor_ = ExternalsHit_descriptor_->enum_type(0);
  InternalsHit_descriptor_ = file->message_type(1);
  static const int InternalsHit_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, freqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, psuedouniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, globalidnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, istrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, hopdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, fskdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, cwdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, spreaddescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, aviddescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, dsssdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, updatevalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, soinum_),
  };
  InternalsHit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalsHit_descriptor_,
      InternalsHit::default_instance_,
      InternalsHit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalsHit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalsHit));
  DsssDescriptor_descriptor_ = file->message_type(2);
  static const int DsssDescriptor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsssDescriptor, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsssDescriptor, mode_),
  };
  DsssDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DsssDescriptor_descriptor_,
      DsssDescriptor::default_instance_,
      DsssDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsssDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsssDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DsssDescriptor));
  HopDescriptor_descriptor_ = file->message_type(3);
  static const int HopDescriptor_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopDescriptor, hoprate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopDescriptor, totalhopbw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopDescriptor, indhopbw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopDescriptor, hopduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopDescriptor, hoppower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopDescriptor, freqsusedblind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopDescriptor, freqsusedcorr_),
  };
  HopDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HopDescriptor_descriptor_,
      HopDescriptor::default_instance_,
      HopDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HopDescriptor));
  FSKDescriptor_descriptor_ = file->message_type(4);
  static const int FSKDescriptor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSKDescriptor, centerfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSKDescriptor, excursion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSKDescriptor, baudrate_),
  };
  FSKDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FSKDescriptor_descriptor_,
      FSKDescriptor::default_instance_,
      FSKDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSKDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSKDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FSKDescriptor));
  CWDescriptor_descriptor_ = file->message_type(5);
  static const int CWDescriptor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDescriptor, centerfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDescriptor, power_),
  };
  CWDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWDescriptor_descriptor_,
      CWDescriptor::default_instance_,
      CWDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWDescriptor));
  SpreadDescriptor_descriptor_ = file->message_type(6);
  static const int SpreadDescriptor_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadDescriptor, centerfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadDescriptor, chiprate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadDescriptor, modulation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadDescriptor, pnseqlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadDescriptor, polynomial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadDescriptor, fill_),
  };
  SpreadDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpreadDescriptor_descriptor_,
      SpreadDescriptor::default_instance_,
      SpreadDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpreadDescriptor));
  AVDescriptor_descriptor_ = file->message_type(7);
  static const int AVDescriptor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AVDescriptor, centerfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AVDescriptor, detected_),
  };
  AVDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AVDescriptor_descriptor_,
      AVDescriptor::default_instance_,
      AVDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AVDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AVDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AVDescriptor));
  QSTAT_RT_descriptor_ = file->message_type(8);
  static const int QSTAT_RT_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QSTAT_RT, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QSTAT_RT, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QSTAT_RT, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QSTAT_RT, appid_),
  };
  QSTAT_RT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QSTAT_RT_descriptor_,
      QSTAT_RT::default_instance_,
      QSTAT_RT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QSTAT_RT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QSTAT_RT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QSTAT_RT));
  ExternalsRelease_descriptor_ = file->message_type(9);
  static const int ExternalsRelease_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsRelease, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsRelease, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsRelease, threattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsRelease, freqmhz_),
  };
  ExternalsRelease_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExternalsRelease_descriptor_,
      ExternalsRelease::default_instance_,
      ExternalsRelease_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsRelease, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsRelease, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExternalsRelease));
  ExternalsRelease_Type_descriptor_ = ExternalsRelease_descriptor_->enum_type(0);
  NullHit_descriptor_ = file->message_type(10);
  static const int NullHit_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullHit, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullHit, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullHit, freqhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullHit, ramsnapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullHit, detectorname_),
  };
  NullHit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NullHit_descriptor_,
      NullHit::default_instance_,
      NullHit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullHit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullHit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NullHit));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FalconExternalsMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExternalsHit_descriptor_, &ExternalsHit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalsHit_descriptor_, &InternalsHit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DsssDescriptor_descriptor_, &DsssDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HopDescriptor_descriptor_, &HopDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FSKDescriptor_descriptor_, &FSKDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWDescriptor_descriptor_, &CWDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpreadDescriptor_descriptor_, &SpreadDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AVDescriptor_descriptor_, &AVDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QSTAT_RT_descriptor_, &QSTAT_RT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExternalsRelease_descriptor_, &ExternalsRelease::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NullHit_descriptor_, &NullHit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FalconExternalsMessages_2eproto() {
  delete ExternalsHit::default_instance_;
  delete ExternalsHit_reflection_;
  delete ExternalsHit::_default_msgname_;
  delete ExternalsHit::_default_globalid_;
  delete ExternalsHit::_default_channel_;
  delete ExternalsHit::_default_soinum_;
  delete InternalsHit::default_instance_;
  delete InternalsHit_reflection_;
  delete InternalsHit::_default_msgname_;
  delete InternalsHit::_default_globalid_;
  delete InternalsHit::_default_channel_;
  delete InternalsHit::_default_soinum_;
  delete DsssDescriptor::default_instance_;
  delete DsssDescriptor_reflection_;
  delete HopDescriptor::default_instance_;
  delete HopDescriptor_reflection_;
  delete FSKDescriptor::default_instance_;
  delete FSKDescriptor_reflection_;
  delete CWDescriptor::default_instance_;
  delete CWDescriptor_reflection_;
  delete SpreadDescriptor::default_instance_;
  delete SpreadDescriptor_reflection_;
  delete AVDescriptor::default_instance_;
  delete AVDescriptor_reflection_;
  delete QSTAT_RT::default_instance_;
  delete QSTAT_RT_reflection_;
  delete QSTAT_RT::_default_msgname_;
  delete ExternalsRelease::default_instance_;
  delete ExternalsRelease_reflection_;
  delete ExternalsRelease::_default_msgname_;
  delete NullHit::default_instance_;
  delete NullHit_reflection_;
  delete NullHit::_default_msgname_;
}

void protobuf_AddDesc_FalconExternalsMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035FalconExternalsMessages.proto\022\024falcon_"
    "externals_msg\"\206\006\n\014ExternalsHit\022\035\n\007msgNam"
    "e\030\001 \001(\t:\014EXTERNALSHIT\022\014\n\004name\030\002 \001(\t\022;\n\nt"
    "hreatType\030\003 \001(\0162\'.falcon_externals_msg.E"
    "xternalsHit.Type\022\017\n\007freqMHz\030\004 \001(\001\022\034\n\010glo"
    "balId\030\005 \001(\t:\nFunctional\022\031\n\016psuedoUniqueI"
    "d\030\006 \001(\005:\0010\022\026\n\013globalIdNum\030\007 \001(\005:\0010\022\021\n\tti"
    "mestamp\030\010 \001(\t\022\022\n\007channel\030\t \001(\t:\0011\022\030\n\tisT"
    "rigger\030\n \001(\010:\005false\022:\n\rhopDescriptor\030\013 \001"
    "(\0132#.falcon_externals_msg.HopDescriptor\022"
    ":\n\rfskDescriptor\030\014 \001(\0132#.falcon_external"
    "s_msg.FSKDescriptor\0228\n\014cwDescriptor\030\r \001("
    "\0132\".falcon_externals_msg.CWDescriptor\022@\n"
    "\020spreadDescriptor\030\016 \001(\0132&.falcon_externa"
    "ls_msg.SpreadDescriptor\022:\n\016AVidDescripto"
    "r\030\017 \001(\0132\".falcon_externals_msg.AVDescrip"
    "tor\022<\n\016DsssDescriptor\030\020 \001(\0132$.falcon_ext"
    "ernals_msg.DsssDescriptor\022\027\n\014updateValue"
    "s\030\021 \001(\005:\0010\022\021\n\006soiNum\030\022 \001(\t:\0010\"O\n\004Type\022\r\n"
    "\tKNOWN_RED\020\000\022\016\n\nKNOWN_GRAY\020\001\022\016\n\nKNOWN_BL"
    "UE\020\002\022\013\n\007UNKNOWN\020\003\022\013\n\007ANOMALY\020\004\"\370\004\n\014Inter"
    "nalsHit\022\035\n\007msgName\030\001 \001(\t:\014INTERNALSHIT\022\014"
    "\n\004name\030\002 \001(\t\022\017\n\007freqMHz\030\003 \001(\001\022\034\n\010globalI"
    "d\030\004 \001(\t:\nFunctional\022\031\n\016psuedoUniqueId\030\005 "
    "\001(\005:\0010\022\026\n\013globalIdNum\030\006 \001(\005:\0010\022\021\n\ttimest"
    "amp\030\007 \001(\t\022\022\n\007channel\030\010 \001(\t:\0011\022\030\n\tisTrigg"
    "er\030\t \001(\010:\005false\022:\n\rhopDescriptor\030\n \001(\0132#"
    ".falcon_externals_msg.HopDescriptor\022:\n\rf"
    "skDescriptor\030\013 \001(\0132#.falcon_externals_ms"
    "g.FSKDescriptor\0228\n\014cwDescriptor\030\014 \001(\0132\"."
    "falcon_externals_msg.CWDescriptor\022@\n\020spr"
    "eadDescriptor\030\r \001(\0132&.falcon_externals_m"
    "sg.SpreadDescriptor\022:\n\016AVidDescriptor\030\016 "
    "\001(\0132\".falcon_externals_msg.AVDescriptor\022"
    "<\n\016DsssDescriptor\030\020 \001(\0132$.falcon_externa"
    "ls_msg.DsssDescriptor\022\027\n\014updateValues\030\021 "
    "\001(\005:\0010\022\021\n\006soiNum\030\022 \001(\t:\0010\"0\n\016DsssDescrip"
    "tor\022\020\n\010fileName\030\001 \001(\t\022\014\n\004mode\030\002 \001(\005\"\234\001\n\r"
    "HopDescriptor\022\017\n\007hopRate\030\001 \001(\001\022\022\n\ntotalH"
    "opBW\030\002 \001(\001\022\020\n\010indHopBW\030\003 \001(\001\022\023\n\013hopDurat"
    "ion\030\004 \001(\001\022\020\n\010hopPower\030\005 \001(\001\022\026\n\016freqsUsed"
    "Blind\030\006 \001(\005\022\025\n\rfreqsUsedCorr\030\007 \001(\005\"H\n\rFS"
    "KDescriptor\022\022\n\ncenterFreq\030\001 \001(\001\022\021\n\texcur"
    "sion\030\002 \001(\001\022\020\n\010baudRate\030\003 \001(\001\"1\n\014CWDescri"
    "ptor\022\022\n\ncenterFreq\030\001 \001(\001\022\r\n\005power\030\002 \001(\001\""
    "\203\001\n\020SpreadDescriptor\022\022\n\ncenterFreq\030\001 \001(\001"
    "\022\020\n\010chipRate\030\002 \001(\001\022\022\n\nmodulation\030\003 \001(\t\022\023"
    "\n\013pnSeqLength\030\004 \001(\005\022\022\n\npolynomial\030\005 \001(\t\022"
    "\014\n\004fill\030\006 \001(\t\"4\n\014AVDescriptor\022\022\n\ncenterF"
    "req\030\001 \001(\001\022\020\n\010detected\030\002 \001(\010\"T\n\010QSTAT_RT\022"
    "\031\n\007msgName\030\001 \001(\t:\010QSTAT_RT\022\016\n\006sender\030\002 \001"
    "(\t\022\016\n\006status\030\003 \001(\t\022\r\n\005appId\030\004 \001(\005\"\346\001\n\020Ex"
    "ternalsRelease\022!\n\007msgName\030\001 \001(\t:\020EXTERNA"
    "LSRELEASE\022\014\n\004name\030\002 \001(\t\022\?\n\nthreatType\030\003 "
    "\001(\0162+.falcon_externals_msg.ExternalsRele"
    "ase.Type\022\017\n\007freqMHz\030\004 \001(\001\"O\n\004Type\022\r\n\tKNO"
    "WN_RED\020\000\022\016\n\nKNOWN_GRAY\020\001\022\016\n\nKNOWN_BLUE\020\002"
    "\022\013\n\007UNKNOWN\020\003\022\013\n\007ANOMALY\020\004\"o\n\007NullHit\022\030\n"
    "\007msgName\030\001 \001(\t:\007NULLHIT\022\021\n\ttimestamp\030\002 \001"
    "(\t\022\016\n\006freqHz\030\003 \001(\001\022\021\n\tramSnapID\030\004 \001(\t\022\024\n"
    "\014detectorName\030\005 \001(\tB\025\n\023fv.protos.kepsvis"
    "or", 2442);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FalconExternalsMessages.proto", &protobuf_RegisterTypes);
  ExternalsHit::_default_msgname_ =
      new ::std::string("EXTERNALSHIT", 12);
  ExternalsHit::_default_globalid_ =
      new ::std::string("Functional", 10);
  ExternalsHit::_default_channel_ =
      new ::std::string("1", 1);
  ExternalsHit::_default_soinum_ =
      new ::std::string("0", 1);
  ExternalsHit::default_instance_ = new ExternalsHit();
  InternalsHit::_default_msgname_ =
      new ::std::string("INTERNALSHIT", 12);
  InternalsHit::_default_globalid_ =
      new ::std::string("Functional", 10);
  InternalsHit::_default_channel_ =
      new ::std::string("1", 1);
  InternalsHit::_default_soinum_ =
      new ::std::string("0", 1);
  InternalsHit::default_instance_ = new InternalsHit();
  DsssDescriptor::default_instance_ = new DsssDescriptor();
  HopDescriptor::default_instance_ = new HopDescriptor();
  FSKDescriptor::default_instance_ = new FSKDescriptor();
  CWDescriptor::default_instance_ = new CWDescriptor();
  SpreadDescriptor::default_instance_ = new SpreadDescriptor();
  AVDescriptor::default_instance_ = new AVDescriptor();
  QSTAT_RT::_default_msgname_ =
      new ::std::string("QSTAT_RT", 8);
  QSTAT_RT::default_instance_ = new QSTAT_RT();
  ExternalsRelease::_default_msgname_ =
      new ::std::string("EXTERNALSRELEASE", 16);
  ExternalsRelease::default_instance_ = new ExternalsRelease();
  NullHit::_default_msgname_ =
      new ::std::string("NULLHIT", 7);
  NullHit::default_instance_ = new NullHit();
  ExternalsHit::default_instance_->InitAsDefaultInstance();
  InternalsHit::default_instance_->InitAsDefaultInstance();
  DsssDescriptor::default_instance_->InitAsDefaultInstance();
  HopDescriptor::default_instance_->InitAsDefaultInstance();
  FSKDescriptor::default_instance_->InitAsDefaultInstance();
  CWDescriptor::default_instance_->InitAsDefaultInstance();
  SpreadDescriptor::default_instance_->InitAsDefaultInstance();
  AVDescriptor::default_instance_->InitAsDefaultInstance();
  QSTAT_RT::default_instance_->InitAsDefaultInstance();
  ExternalsRelease::default_instance_->InitAsDefaultInstance();
  NullHit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FalconExternalsMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FalconExternalsMessages_2eproto {
  StaticDescriptorInitializer_FalconExternalsMessages_2eproto() {
    protobuf_AddDesc_FalconExternalsMessages_2eproto();
  }
} static_descriptor_initializer_FalconExternalsMessages_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ExternalsHit_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalsHit_Type_descriptor_;
}
bool ExternalsHit_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExternalsHit_Type ExternalsHit::KNOWN_RED;
const ExternalsHit_Type ExternalsHit::KNOWN_GRAY;
const ExternalsHit_Type ExternalsHit::KNOWN_BLUE;
const ExternalsHit_Type ExternalsHit::UNKNOWN;
const ExternalsHit_Type ExternalsHit::ANOMALY;
const ExternalsHit_Type ExternalsHit::Type_MIN;
const ExternalsHit_Type ExternalsHit::Type_MAX;
const int ExternalsHit::Type_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* ExternalsHit::_default_msgname_ = NULL;
::std::string* ExternalsHit::_default_globalid_ = NULL;
::std::string* ExternalsHit::_default_channel_ = NULL;
::std::string* ExternalsHit::_default_soinum_ = NULL;
#ifndef _MSC_VER
const int ExternalsHit::kMsgNameFieldNumber;
const int ExternalsHit::kNameFieldNumber;
const int ExternalsHit::kThreatTypeFieldNumber;
const int ExternalsHit::kFreqMHzFieldNumber;
const int ExternalsHit::kGlobalIdFieldNumber;
const int ExternalsHit::kPsuedoUniqueIdFieldNumber;
const int ExternalsHit::kGlobalIdNumFieldNumber;
const int ExternalsHit::kTimestampFieldNumber;
const int ExternalsHit::kChannelFieldNumber;
const int ExternalsHit::kIsTriggerFieldNumber;
const int ExternalsHit::kHopDescriptorFieldNumber;
const int ExternalsHit::kFskDescriptorFieldNumber;
const int ExternalsHit::kCwDescriptorFieldNumber;
const int ExternalsHit::kSpreadDescriptorFieldNumber;
const int ExternalsHit::kAVidDescriptorFieldNumber;
const int ExternalsHit::kDsssDescriptorFieldNumber;
const int ExternalsHit::kUpdateValuesFieldNumber;
const int ExternalsHit::kSoiNumFieldNumber;
#endif  // !_MSC_VER

ExternalsHit::ExternalsHit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExternalsHit::InitAsDefaultInstance() {
  hopdescriptor_ = const_cast< ::falcon_externals_msg::HopDescriptor*>(&::falcon_externals_msg::HopDescriptor::default_instance());
  fskdescriptor_ = const_cast< ::falcon_externals_msg::FSKDescriptor*>(&::falcon_externals_msg::FSKDescriptor::default_instance());
  cwdescriptor_ = const_cast< ::falcon_externals_msg::CWDescriptor*>(&::falcon_externals_msg::CWDescriptor::default_instance());
  spreaddescriptor_ = const_cast< ::falcon_externals_msg::SpreadDescriptor*>(&::falcon_externals_msg::SpreadDescriptor::default_instance());
  aviddescriptor_ = const_cast< ::falcon_externals_msg::AVDescriptor*>(&::falcon_externals_msg::AVDescriptor::default_instance());
  dsssdescriptor_ = const_cast< ::falcon_externals_msg::DsssDescriptor*>(&::falcon_externals_msg::DsssDescriptor::default_instance());
}

ExternalsHit::ExternalsHit(const ExternalsHit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExternalsHit::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  threattype_ = 0;
  freqmhz_ = 0;
  globalid_ = const_cast< ::std::string*>(_default_globalid_);
  psuedouniqueid_ = 0;
  globalidnum_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(_default_channel_);
  istrigger_ = false;
  hopdescriptor_ = NULL;
  fskdescriptor_ = NULL;
  cwdescriptor_ = NULL;
  spreaddescriptor_ = NULL;
  aviddescriptor_ = NULL;
  dsssdescriptor_ = NULL;
  updatevalues_ = 0;
  soinum_ = const_cast< ::std::string*>(_default_soinum_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExternalsHit::~ExternalsHit() {
  SharedDtor();
}

void ExternalsHit::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (globalid_ != _default_globalid_) {
    delete globalid_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (channel_ != _default_channel_) {
    delete channel_;
  }
  if (soinum_ != _default_soinum_) {
    delete soinum_;
  }
  if (this != default_instance_) {
    delete hopdescriptor_;
    delete fskdescriptor_;
    delete cwdescriptor_;
    delete spreaddescriptor_;
    delete aviddescriptor_;
    delete dsssdescriptor_;
  }
}

void ExternalsHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalsHit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalsHit_descriptor_;
}

const ExternalsHit& ExternalsHit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconExternalsMessages_2eproto();
  return *default_instance_;
}

ExternalsHit* ExternalsHit::default_instance_ = NULL;

ExternalsHit* ExternalsHit::New() const {
  return new ExternalsHit;
}

void ExternalsHit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    threattype_ = 0;
    freqmhz_ = 0;
    if (has_globalid()) {
      if (globalid_ != _default_globalid_) {
        globalid_->assign(*_default_globalid_);
      }
    }
    psuedouniqueid_ = 0;
    globalidnum_ = 0;
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_channel()) {
      if (channel_ != _default_channel_) {
        channel_->assign(*_default_channel_);
      }
    }
    istrigger_ = false;
    if (has_hopdescriptor()) {
      if (hopdescriptor_ != NULL) hopdescriptor_->::falcon_externals_msg::HopDescriptor::Clear();
    }
    if (has_fskdescriptor()) {
      if (fskdescriptor_ != NULL) fskdescriptor_->::falcon_externals_msg::FSKDescriptor::Clear();
    }
    if (has_cwdescriptor()) {
      if (cwdescriptor_ != NULL) cwdescriptor_->::falcon_externals_msg::CWDescriptor::Clear();
    }
    if (has_spreaddescriptor()) {
      if (spreaddescriptor_ != NULL) spreaddescriptor_->::falcon_externals_msg::SpreadDescriptor::Clear();
    }
    if (has_aviddescriptor()) {
      if (aviddescriptor_ != NULL) aviddescriptor_->::falcon_externals_msg::AVDescriptor::Clear();
    }
    if (has_dsssdescriptor()) {
      if (dsssdescriptor_ != NULL) dsssdescriptor_->::falcon_externals_msg::DsssDescriptor::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    updatevalues_ = 0;
    if (has_soinum()) {
      if (soinum_ != _default_soinum_) {
        soinum_->assign(*_default_soinum_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExternalsHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EXTERNALSHIT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_threatType;
        break;
      }

      // optional .falcon_externals_msg.ExternalsHit.Type threatType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_threatType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_externals_msg::ExternalsHit_Type_IsValid(value)) {
            set_threattype(static_cast< ::falcon_externals_msg::ExternalsHit_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_freqMHz;
        break;
      }

      // optional double freqMHz = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freqmhz_)));
          set_has_freqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_globalId;
        break;
      }

      // optional string globalId = 5 [default = "Functional"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_psuedoUniqueId;
        break;
      }

      // optional int32 psuedoUniqueId = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_psuedoUniqueId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &psuedouniqueid_)));
          set_has_psuedouniqueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_globalIdNum;
        break;
      }

      // optional int32 globalIdNum = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_globalIdNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &globalidnum_)));
          set_has_globalidnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_channel;
        break;
      }

      // optional string channel = 9 [default = "1"];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_hopDescriptor;
        break;
      }

      // optional .falcon_externals_msg.HopDescriptor hopDescriptor = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hopDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hopdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_fskDescriptor;
        break;
      }

      // optional .falcon_externals_msg.FSKDescriptor fskDescriptor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fskDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fskdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_cwDescriptor;
        break;
      }

      // optional .falcon_externals_msg.CWDescriptor cwDescriptor = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cwDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cwdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_spreadDescriptor;
        break;
      }

      // optional .falcon_externals_msg.SpreadDescriptor spreadDescriptor = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spreadDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spreaddescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_AVidDescriptor;
        break;
      }

      // optional .falcon_externals_msg.AVDescriptor AVidDescriptor = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AVidDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aviddescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_DsssDescriptor;
        break;
      }

      // optional .falcon_externals_msg.DsssDescriptor DsssDescriptor = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DsssDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dsssdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_updateValues;
        break;
      }

      // optional int32 updateValues = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updateValues:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatevalues_)));
          set_has_updatevalues();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_soiNum;
        break;
      }

      // optional string soiNum = 18 [default = "0"];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soiNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soinum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soinum().data(), this->soinum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExternalsHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EXTERNALSHIT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .falcon_externals_msg.ExternalsHit.Type threatType = 3;
  if (has_threattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->threattype(), output);
  }

  // optional double freqMHz = 4;
  if (has_freqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->freqmhz(), output);
  }

  // optional string globalId = 5 [default = "Functional"];
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->globalid(), output);
  }

  // optional int32 psuedoUniqueId = 6 [default = 0];
  if (has_psuedouniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->psuedouniqueid(), output);
  }

  // optional int32 globalIdNum = 7 [default = 0];
  if (has_globalidnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->globalidnum(), output);
  }

  // optional string timestamp = 8;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->timestamp(), output);
  }

  // optional string channel = 9 [default = "1"];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->channel(), output);
  }

  // optional bool isTrigger = 10 [default = false];
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->istrigger(), output);
  }

  // optional .falcon_externals_msg.HopDescriptor hopDescriptor = 11;
  if (has_hopdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->hopdescriptor(), output);
  }

  // optional .falcon_externals_msg.FSKDescriptor fskDescriptor = 12;
  if (has_fskdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->fskdescriptor(), output);
  }

  // optional .falcon_externals_msg.CWDescriptor cwDescriptor = 13;
  if (has_cwdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->cwdescriptor(), output);
  }

  // optional .falcon_externals_msg.SpreadDescriptor spreadDescriptor = 14;
  if (has_spreaddescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->spreaddescriptor(), output);
  }

  // optional .falcon_externals_msg.AVDescriptor AVidDescriptor = 15;
  if (has_aviddescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->aviddescriptor(), output);
  }

  // optional .falcon_externals_msg.DsssDescriptor DsssDescriptor = 16;
  if (has_dsssdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->dsssdescriptor(), output);
  }

  // optional int32 updateValues = 17 [default = 0];
  if (has_updatevalues()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->updatevalues(), output);
  }

  // optional string soiNum = 18 [default = "0"];
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->soinum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExternalsHit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EXTERNALSHIT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .falcon_externals_msg.ExternalsHit.Type threatType = 3;
  if (has_threattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->threattype(), target);
  }

  // optional double freqMHz = 4;
  if (has_freqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->freqmhz(), target);
  }

  // optional string globalId = 5 [default = "Functional"];
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->globalid(), target);
  }

  // optional int32 psuedoUniqueId = 6 [default = 0];
  if (has_psuedouniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->psuedouniqueid(), target);
  }

  // optional int32 globalIdNum = 7 [default = 0];
  if (has_globalidnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->globalidnum(), target);
  }

  // optional string timestamp = 8;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->timestamp(), target);
  }

  // optional string channel = 9 [default = "1"];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->channel(), target);
  }

  // optional bool isTrigger = 10 [default = false];
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->istrigger(), target);
  }

  // optional .falcon_externals_msg.HopDescriptor hopDescriptor = 11;
  if (has_hopdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->hopdescriptor(), target);
  }

  // optional .falcon_externals_msg.FSKDescriptor fskDescriptor = 12;
  if (has_fskdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->fskdescriptor(), target);
  }

  // optional .falcon_externals_msg.CWDescriptor cwDescriptor = 13;
  if (has_cwdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->cwdescriptor(), target);
  }

  // optional .falcon_externals_msg.SpreadDescriptor spreadDescriptor = 14;
  if (has_spreaddescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->spreaddescriptor(), target);
  }

  // optional .falcon_externals_msg.AVDescriptor AVidDescriptor = 15;
  if (has_aviddescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->aviddescriptor(), target);
  }

  // optional .falcon_externals_msg.DsssDescriptor DsssDescriptor = 16;
  if (has_dsssdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->dsssdescriptor(), target);
  }

  // optional int32 updateValues = 17 [default = 0];
  if (has_updatevalues()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->updatevalues(), target);
  }

  // optional string soiNum = 18 [default = "0"];
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->soinum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExternalsHit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EXTERNALSHIT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .falcon_externals_msg.ExternalsHit.Type threatType = 3;
    if (has_threattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->threattype());
    }

    // optional double freqMHz = 4;
    if (has_freqmhz()) {
      total_size += 1 + 8;
    }

    // optional string globalId = 5 [default = "Functional"];
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional int32 psuedoUniqueId = 6 [default = 0];
    if (has_psuedouniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->psuedouniqueid());
    }

    // optional int32 globalIdNum = 7 [default = 0];
    if (has_globalidnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->globalidnum());
    }

    // optional string timestamp = 8;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string channel = 9 [default = "1"];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional bool isTrigger = 10 [default = false];
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

    // optional .falcon_externals_msg.HopDescriptor hopDescriptor = 11;
    if (has_hopdescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hopdescriptor());
    }

    // optional .falcon_externals_msg.FSKDescriptor fskDescriptor = 12;
    if (has_fskdescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fskdescriptor());
    }

    // optional .falcon_externals_msg.CWDescriptor cwDescriptor = 13;
    if (has_cwdescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cwdescriptor());
    }

    // optional .falcon_externals_msg.SpreadDescriptor spreadDescriptor = 14;
    if (has_spreaddescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spreaddescriptor());
    }

    // optional .falcon_externals_msg.AVDescriptor AVidDescriptor = 15;
    if (has_aviddescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aviddescriptor());
    }

    // optional .falcon_externals_msg.DsssDescriptor DsssDescriptor = 16;
    if (has_dsssdescriptor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dsssdescriptor());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 updateValues = 17 [default = 0];
    if (has_updatevalues()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatevalues());
    }

    // optional string soiNum = 18 [default = "0"];
    if (has_soinum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soinum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalsHit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExternalsHit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternalsHit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternalsHit::MergeFrom(const ExternalsHit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_threattype()) {
      set_threattype(from.threattype());
    }
    if (from.has_freqmhz()) {
      set_freqmhz(from.freqmhz());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_psuedouniqueid()) {
      set_psuedouniqueid(from.psuedouniqueid());
    }
    if (from.has_globalidnum()) {
      set_globalidnum(from.globalidnum());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
    if (from.has_hopdescriptor()) {
      mutable_hopdescriptor()->::falcon_externals_msg::HopDescriptor::MergeFrom(from.hopdescriptor());
    }
    if (from.has_fskdescriptor()) {
      mutable_fskdescriptor()->::falcon_externals_msg::FSKDescriptor::MergeFrom(from.fskdescriptor());
    }
    if (from.has_cwdescriptor()) {
      mutable_cwdescriptor()->::falcon_externals_msg::CWDescriptor::MergeFrom(from.cwdescriptor());
    }
    if (from.has_spreaddescriptor()) {
      mutable_spreaddescriptor()->::falcon_externals_msg::SpreadDescriptor::MergeFrom(from.spreaddescriptor());
    }
    if (from.has_aviddescriptor()) {
      mutable_aviddescriptor()->::falcon_externals_msg::AVDescriptor::MergeFrom(from.aviddescriptor());
    }
    if (from.has_dsssdescriptor()) {
      mutable_dsssdescriptor()->::falcon_externals_msg::DsssDescriptor::MergeFrom(from.dsssdescriptor());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_updatevalues()) {
      set_updatevalues(from.updatevalues());
    }
    if (from.has_soinum()) {
      set_soinum(from.soinum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExternalsHit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalsHit::CopyFrom(const ExternalsHit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalsHit::IsInitialized() const {

  return true;
}

void ExternalsHit::Swap(ExternalsHit* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(name_, other->name_);
    std::swap(threattype_, other->threattype_);
    std::swap(freqmhz_, other->freqmhz_);
    std::swap(globalid_, other->globalid_);
    std::swap(psuedouniqueid_, other->psuedouniqueid_);
    std::swap(globalidnum_, other->globalidnum_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(channel_, other->channel_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(hopdescriptor_, other->hopdescriptor_);
    std::swap(fskdescriptor_, other->fskdescriptor_);
    std::swap(cwdescriptor_, other->cwdescriptor_);
    std::swap(spreaddescriptor_, other->spreaddescriptor_);
    std::swap(aviddescriptor_, other->aviddescriptor_);
    std::swap(dsssdescriptor_, other->dsssdescriptor_);
    std::swap(updatevalues_, other->updatevalues_);
    std::swap(soinum_, other->soinum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExternalsHit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternalsHit_descriptor_;
  metadata.reflection = ExternalsHit_reflection_;
  return metadata;
}


// ===================================================================

::std::string* InternalsHit::_default_msgname_ = NULL;
::std::string* InternalsHit::_default_globalid_ = NULL;
::std::string* InternalsHit::_default_channel_ = NULL;
::std::string* InternalsHit::_default_soinum_ = NULL;
#ifndef _MSC_VER
const int InternalsHit::kMsgNameFieldNumber;
const int InternalsHit::kNameFieldNumber;
const int InternalsHit::kFreqMHzFieldNumber;
const int InternalsHit::kGlobalIdFieldNumber;
const int InternalsHit::kPsuedoUniqueIdFieldNumber;
const int InternalsHit::kGlobalIdNumFieldNumber;
const int InternalsHit::kTimestampFieldNumber;
const int InternalsHit::kChannelFieldNumber;
const int InternalsHit::kIsTriggerFieldNumber;
const int InternalsHit::kHopDescriptorFieldNumber;
const int InternalsHit::kFskDescriptorFieldNumber;
const int InternalsHit::kCwDescriptorFieldNumber;
const int InternalsHit::kSpreadDescriptorFieldNumber;
const int InternalsHit::kAVidDescriptorFieldNumber;
const int InternalsHit::kDsssDescriptorFieldNumber;
const int InternalsHit::kUpdateValuesFieldNumber;
const int InternalsHit::kSoiNumFieldNumber;
#endif  // !_MSC_VER

InternalsHit::InternalsHit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InternalsHit::InitAsDefaultInstance() {
  hopdescriptor_ = const_cast< ::falcon_externals_msg::HopDescriptor*>(&::falcon_externals_msg::HopDescriptor::default_instance());
  fskdescriptor_ = const_cast< ::falcon_externals_msg::FSKDescriptor*>(&::falcon_externals_msg::FSKDescriptor::default_instance());
  cwdescriptor_ = const_cast< ::falcon_externals_msg::CWDescriptor*>(&::falcon_externals_msg::CWDescriptor::default_instance());
  spreaddescriptor_ = const_cast< ::falcon_externals_msg::SpreadDescriptor*>(&::falcon_externals_msg::SpreadDescriptor::default_instance());
  aviddescriptor_ = const_cast< ::falcon_externals_msg::AVDescriptor*>(&::falcon_externals_msg::AVDescriptor::default_instance());
  dsssdescriptor_ = const_cast< ::falcon_externals_msg::DsssDescriptor*>(&::falcon_externals_msg::DsssDescriptor::default_instance());
}

InternalsHit::InternalsHit(const InternalsHit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InternalsHit::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  freqmhz_ = 0;
  globalid_ = const_cast< ::std::string*>(_default_globalid_);
  psuedouniqueid_ = 0;
  globalidnum_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(_default_channel_);
  istrigger_ = false;
  hopdescriptor_ = NULL;
  fskdescriptor_ = NULL;
  cwdescriptor_ = NULL;
  spreaddescriptor_ = NULL;
  aviddescriptor_ = NULL;
  dsssdescriptor_ = NULL;
  updatevalues_ = 0;
  soinum_ = const_cast< ::std::string*>(_default_soinum_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalsHit::~InternalsHit() {
  SharedDtor();
}

void InternalsHit::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (globalid_ != _default_globalid_) {
    delete globalid_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (channel_ != _default_channel_) {
    delete channel_;
  }
  if (soinum_ != _default_soinum_) {
    delete soinum_;
  }
  if (this != default_instance_) {
    delete hopdescriptor_;
    delete fskdescriptor_;
    delete cwdescriptor_;
    delete spreaddescriptor_;
    delete aviddescriptor_;
    delete dsssdescriptor_;
  }
}

void InternalsHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalsHit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalsHit_descriptor_;
}

const InternalsHit& InternalsHit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconExternalsMessages_2eproto();
  return *default_instance_;
}

InternalsHit* InternalsHit::default_instance_ = NULL;

InternalsHit* InternalsHit::New() const {
  return new InternalsHit;
}

void InternalsHit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    freqmhz_ = 0;
    if (has_globalid()) {
      if (globalid_ != _default_globalid_) {
        globalid_->assign(*_default_globalid_);
      }
    }
    psuedouniqueid_ = 0;
    globalidnum_ = 0;
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != _default_channel_) {
        channel_->assign(*_default_channel_);
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    istrigger_ = false;
    if (has_hopdescriptor()) {
      if (hopdescriptor_ != NULL) hopdescriptor_->::falcon_externals_msg::HopDescriptor::Clear();
    }
    if (has_fskdescriptor()) {
      if (fskdescriptor_ != NULL) fskdescriptor_->::falcon_externals_msg::FSKDescriptor::Clear();
    }
    if (has_cwdescriptor()) {
      if (cwdescriptor_ != NULL) cwdescriptor_->::falcon_externals_msg::CWDescriptor::Clear();
    }
    if (has_spreaddescriptor()) {
      if (spreaddescriptor_ != NULL) spreaddescriptor_->::falcon_externals_msg::SpreadDescriptor::Clear();
    }
    if (has_aviddescriptor()) {
      if (aviddescriptor_ != NULL) aviddescriptor_->::falcon_externals_msg::AVDescriptor::Clear();
    }
    if (has_dsssdescriptor()) {
      if (dsssdescriptor_ != NULL) dsssdescriptor_->::falcon_externals_msg::DsssDescriptor::Clear();
    }
    updatevalues_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_soinum()) {
      if (soinum_ != _default_soinum_) {
        soinum_->assign(*_default_soinum_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalsHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "INTERNALSHIT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_freqMHz;
        break;
      }

      // optional double freqMHz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freqmhz_)));
          set_has_freqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_globalId;
        break;
      }

      // optional string globalId = 4 [default = "Functional"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_psuedoUniqueId;
        break;
      }

      // optional int32 psuedoUniqueId = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_psuedoUniqueId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &psuedouniqueid_)));
          set_has_psuedouniqueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_globalIdNum;
        break;
      }

      // optional int32 globalIdNum = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_globalIdNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &globalidnum_)));
          set_has_globalidnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_channel;
        break;
      }

      // optional string channel = 8 [default = "1"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isTrigger;
        break;
      }

      // optional bool isTrigger = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrigger_)));
          set_has_istrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hopDescriptor;
        break;
      }

      // optional .falcon_externals_msg.HopDescriptor hopDescriptor = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hopDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hopdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_fskDescriptor;
        break;
      }

      // optional .falcon_externals_msg.FSKDescriptor fskDescriptor = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fskDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fskdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_cwDescriptor;
        break;
      }

      // optional .falcon_externals_msg.CWDescriptor cwDescriptor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cwDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cwdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_spreadDescriptor;
        break;
      }

      // optional .falcon_externals_msg.SpreadDescriptor spreadDescriptor = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spreadDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spreaddescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_AVidDescriptor;
        break;
      }

      // optional .falcon_externals_msg.AVDescriptor AVidDescriptor = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AVidDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aviddescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_DsssDescriptor;
        break;
      }

      // optional .falcon_externals_msg.DsssDescriptor DsssDescriptor = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DsssDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dsssdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_updateValues;
        break;
      }

      // optional int32 updateValues = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updateValues:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatevalues_)));
          set_has_updatevalues();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_soiNum;
        break;
      }

      // optional string soiNum = 18 [default = "0"];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soiNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soinum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soinum().data(), this->soinum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InternalsHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "INTERNALSHIT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional double freqMHz = 3;
  if (has_freqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->freqmhz(), output);
  }

  // optional string globalId = 4 [default = "Functional"];
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->globalid(), output);
  }

  // optional int32 psuedoUniqueId = 5 [default = 0];
  if (has_psuedouniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->psuedouniqueid(), output);
  }

  // optional int32 globalIdNum = 6 [default = 0];
  if (has_globalidnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->globalidnum(), output);
  }

  // optional string timestamp = 7;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->timestamp(), output);
  }

  // optional string channel = 8 [default = "1"];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->channel(), output);
  }

  // optional bool isTrigger = 9 [default = false];
  if (has_istrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->istrigger(), output);
  }

  // optional .falcon_externals_msg.HopDescriptor hopDescriptor = 10;
  if (has_hopdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->hopdescriptor(), output);
  }

  // optional .falcon_externals_msg.FSKDescriptor fskDescriptor = 11;
  if (has_fskdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->fskdescriptor(), output);
  }

  // optional .falcon_externals_msg.CWDescriptor cwDescriptor = 12;
  if (has_cwdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->cwdescriptor(), output);
  }

  // optional .falcon_externals_msg.SpreadDescriptor spreadDescriptor = 13;
  if (has_spreaddescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->spreaddescriptor(), output);
  }

  // optional .falcon_externals_msg.AVDescriptor AVidDescriptor = 14;
  if (has_aviddescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->aviddescriptor(), output);
  }

  // optional .falcon_externals_msg.DsssDescriptor DsssDescriptor = 16;
  if (has_dsssdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->dsssdescriptor(), output);
  }

  // optional int32 updateValues = 17 [default = 0];
  if (has_updatevalues()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->updatevalues(), output);
  }

  // optional string soiNum = 18 [default = "0"];
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->soinum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InternalsHit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "INTERNALSHIT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional double freqMHz = 3;
  if (has_freqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->freqmhz(), target);
  }

  // optional string globalId = 4 [default = "Functional"];
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->globalid(), target);
  }

  // optional int32 psuedoUniqueId = 5 [default = 0];
  if (has_psuedouniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->psuedouniqueid(), target);
  }

  // optional int32 globalIdNum = 6 [default = 0];
  if (has_globalidnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->globalidnum(), target);
  }

  // optional string timestamp = 7;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->timestamp(), target);
  }

  // optional string channel = 8 [default = "1"];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->channel(), target);
  }

  // optional bool isTrigger = 9 [default = false];
  if (has_istrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->istrigger(), target);
  }

  // optional .falcon_externals_msg.HopDescriptor hopDescriptor = 10;
  if (has_hopdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->hopdescriptor(), target);
  }

  // optional .falcon_externals_msg.FSKDescriptor fskDescriptor = 11;
  if (has_fskdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->fskdescriptor(), target);
  }

  // optional .falcon_externals_msg.CWDescriptor cwDescriptor = 12;
  if (has_cwdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->cwdescriptor(), target);
  }

  // optional .falcon_externals_msg.SpreadDescriptor spreadDescriptor = 13;
  if (has_spreaddescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->spreaddescriptor(), target);
  }

  // optional .falcon_externals_msg.AVDescriptor AVidDescriptor = 14;
  if (has_aviddescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->aviddescriptor(), target);
  }

  // optional .falcon_externals_msg.DsssDescriptor DsssDescriptor = 16;
  if (has_dsssdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->dsssdescriptor(), target);
  }

  // optional int32 updateValues = 17 [default = 0];
  if (has_updatevalues()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->updatevalues(), target);
  }

  // optional string soiNum = 18 [default = "0"];
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->soinum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InternalsHit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "INTERNALSHIT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double freqMHz = 3;
    if (has_freqmhz()) {
      total_size += 1 + 8;
    }

    // optional string globalId = 4 [default = "Functional"];
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional int32 psuedoUniqueId = 5 [default = 0];
    if (has_psuedouniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->psuedouniqueid());
    }

    // optional int32 globalIdNum = 6 [default = 0];
    if (has_globalidnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->globalidnum());
    }

    // optional string timestamp = 7;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional string channel = 8 [default = "1"];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isTrigger = 9 [default = false];
    if (has_istrigger()) {
      total_size += 1 + 1;
    }

    // optional .falcon_externals_msg.HopDescriptor hopDescriptor = 10;
    if (has_hopdescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hopdescriptor());
    }

    // optional .falcon_externals_msg.FSKDescriptor fskDescriptor = 11;
    if (has_fskdescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fskdescriptor());
    }

    // optional .falcon_externals_msg.CWDescriptor cwDescriptor = 12;
    if (has_cwdescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cwdescriptor());
    }

    // optional .falcon_externals_msg.SpreadDescriptor spreadDescriptor = 13;
    if (has_spreaddescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spreaddescriptor());
    }

    // optional .falcon_externals_msg.AVDescriptor AVidDescriptor = 14;
    if (has_aviddescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aviddescriptor());
    }

    // optional .falcon_externals_msg.DsssDescriptor DsssDescriptor = 16;
    if (has_dsssdescriptor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dsssdescriptor());
    }

    // optional int32 updateValues = 17 [default = 0];
    if (has_updatevalues()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatevalues());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string soiNum = 18 [default = "0"];
    if (has_soinum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soinum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalsHit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalsHit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalsHit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalsHit::MergeFrom(const InternalsHit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_freqmhz()) {
      set_freqmhz(from.freqmhz());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_psuedouniqueid()) {
      set_psuedouniqueid(from.psuedouniqueid());
    }
    if (from.has_globalidnum()) {
      set_globalidnum(from.globalidnum());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_istrigger()) {
      set_istrigger(from.istrigger());
    }
    if (from.has_hopdescriptor()) {
      mutable_hopdescriptor()->::falcon_externals_msg::HopDescriptor::MergeFrom(from.hopdescriptor());
    }
    if (from.has_fskdescriptor()) {
      mutable_fskdescriptor()->::falcon_externals_msg::FSKDescriptor::MergeFrom(from.fskdescriptor());
    }
    if (from.has_cwdescriptor()) {
      mutable_cwdescriptor()->::falcon_externals_msg::CWDescriptor::MergeFrom(from.cwdescriptor());
    }
    if (from.has_spreaddescriptor()) {
      mutable_spreaddescriptor()->::falcon_externals_msg::SpreadDescriptor::MergeFrom(from.spreaddescriptor());
    }
    if (from.has_aviddescriptor()) {
      mutable_aviddescriptor()->::falcon_externals_msg::AVDescriptor::MergeFrom(from.aviddescriptor());
    }
    if (from.has_dsssdescriptor()) {
      mutable_dsssdescriptor()->::falcon_externals_msg::DsssDescriptor::MergeFrom(from.dsssdescriptor());
    }
    if (from.has_updatevalues()) {
      set_updatevalues(from.updatevalues());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_soinum()) {
      set_soinum(from.soinum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalsHit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalsHit::CopyFrom(const InternalsHit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalsHit::IsInitialized() const {

  return true;
}

void InternalsHit::Swap(InternalsHit* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(name_, other->name_);
    std::swap(freqmhz_, other->freqmhz_);
    std::swap(globalid_, other->globalid_);
    std::swap(psuedouniqueid_, other->psuedouniqueid_);
    std::swap(globalidnum_, other->globalidnum_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(channel_, other->channel_);
    std::swap(istrigger_, other->istrigger_);
    std::swap(hopdescriptor_, other->hopdescriptor_);
    std::swap(fskdescriptor_, other->fskdescriptor_);
    std::swap(cwdescriptor_, other->cwdescriptor_);
    std::swap(spreaddescriptor_, other->spreaddescriptor_);
    std::swap(aviddescriptor_, other->aviddescriptor_);
    std::swap(dsssdescriptor_, other->dsssdescriptor_);
    std::swap(updatevalues_, other->updatevalues_);
    std::swap(soinum_, other->soinum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalsHit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalsHit_descriptor_;
  metadata.reflection = InternalsHit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DsssDescriptor::kFileNameFieldNumber;
const int DsssDescriptor::kModeFieldNumber;
#endif  // !_MSC_VER

DsssDescriptor::DsssDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DsssDescriptor::InitAsDefaultInstance() {
}

DsssDescriptor::DsssDescriptor(const DsssDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DsssDescriptor::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DsssDescriptor::~DsssDescriptor() {
  SharedDtor();
}

void DsssDescriptor::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void DsssDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsssDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DsssDescriptor_descriptor_;
}

const DsssDescriptor& DsssDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconExternalsMessages_2eproto();
  return *default_instance_;
}

DsssDescriptor* DsssDescriptor::default_instance_ = NULL;

DsssDescriptor* DsssDescriptor::New() const {
  return new DsssDescriptor;
}

void DsssDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    mode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DsssDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fileName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional int32 mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DsssDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // optional int32 mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DsssDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional int32 mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DsssDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional int32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsssDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DsssDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DsssDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DsssDescriptor::MergeFrom(const DsssDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DsssDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsssDescriptor::CopyFrom(const DsssDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsssDescriptor::IsInitialized() const {

  return true;
}

void DsssDescriptor::Swap(DsssDescriptor* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DsssDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DsssDescriptor_descriptor_;
  metadata.reflection = DsssDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HopDescriptor::kHopRateFieldNumber;
const int HopDescriptor::kTotalHopBWFieldNumber;
const int HopDescriptor::kIndHopBWFieldNumber;
const int HopDescriptor::kHopDurationFieldNumber;
const int HopDescriptor::kHopPowerFieldNumber;
const int HopDescriptor::kFreqsUsedBlindFieldNumber;
const int HopDescriptor::kFreqsUsedCorrFieldNumber;
#endif  // !_MSC_VER

HopDescriptor::HopDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HopDescriptor::InitAsDefaultInstance() {
}

HopDescriptor::HopDescriptor(const HopDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HopDescriptor::SharedCtor() {
  _cached_size_ = 0;
  hoprate_ = 0;
  totalhopbw_ = 0;
  indhopbw_ = 0;
  hopduration_ = 0;
  hoppower_ = 0;
  freqsusedblind_ = 0;
  freqsusedcorr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HopDescriptor::~HopDescriptor() {
  SharedDtor();
}

void HopDescriptor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HopDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HopDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HopDescriptor_descriptor_;
}

const HopDescriptor& HopDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconExternalsMessages_2eproto();
  return *default_instance_;
}

HopDescriptor* HopDescriptor::default_instance_ = NULL;

HopDescriptor* HopDescriptor::New() const {
  return new HopDescriptor;
}

void HopDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hoprate_ = 0;
    totalhopbw_ = 0;
    indhopbw_ = 0;
    hopduration_ = 0;
    hoppower_ = 0;
    freqsusedblind_ = 0;
    freqsusedcorr_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HopDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double hopRate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hoprate_)));
          set_has_hoprate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_totalHopBW;
        break;
      }

      // optional double totalHopBW = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_totalHopBW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalhopbw_)));
          set_has_totalhopbw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_indHopBW;
        break;
      }

      // optional double indHopBW = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_indHopBW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &indhopbw_)));
          set_has_indhopbw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_hopDuration;
        break;
      }

      // optional double hopDuration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_hopDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hopduration_)));
          set_has_hopduration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_hopPower;
        break;
      }

      // optional double hopPower = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_hopPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hoppower_)));
          set_has_hoppower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_freqsUsedBlind;
        break;
      }

      // optional int32 freqsUsedBlind = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freqsUsedBlind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freqsusedblind_)));
          set_has_freqsusedblind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_freqsUsedCorr;
        break;
      }

      // optional int32 freqsUsedCorr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freqsUsedCorr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freqsusedcorr_)));
          set_has_freqsusedcorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HopDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double hopRate = 1;
  if (has_hoprate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->hoprate(), output);
  }

  // optional double totalHopBW = 2;
  if (has_totalhopbw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->totalhopbw(), output);
  }

  // optional double indHopBW = 3;
  if (has_indhopbw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->indhopbw(), output);
  }

  // optional double hopDuration = 4;
  if (has_hopduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->hopduration(), output);
  }

  // optional double hopPower = 5;
  if (has_hoppower()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->hoppower(), output);
  }

  // optional int32 freqsUsedBlind = 6;
  if (has_freqsusedblind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->freqsusedblind(), output);
  }

  // optional int32 freqsUsedCorr = 7;
  if (has_freqsusedcorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->freqsusedcorr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HopDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double hopRate = 1;
  if (has_hoprate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->hoprate(), target);
  }

  // optional double totalHopBW = 2;
  if (has_totalhopbw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->totalhopbw(), target);
  }

  // optional double indHopBW = 3;
  if (has_indhopbw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->indhopbw(), target);
  }

  // optional double hopDuration = 4;
  if (has_hopduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->hopduration(), target);
  }

  // optional double hopPower = 5;
  if (has_hoppower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->hoppower(), target);
  }

  // optional int32 freqsUsedBlind = 6;
  if (has_freqsusedblind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->freqsusedblind(), target);
  }

  // optional int32 freqsUsedCorr = 7;
  if (has_freqsusedcorr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->freqsusedcorr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HopDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double hopRate = 1;
    if (has_hoprate()) {
      total_size += 1 + 8;
    }

    // optional double totalHopBW = 2;
    if (has_totalhopbw()) {
      total_size += 1 + 8;
    }

    // optional double indHopBW = 3;
    if (has_indhopbw()) {
      total_size += 1 + 8;
    }

    // optional double hopDuration = 4;
    if (has_hopduration()) {
      total_size += 1 + 8;
    }

    // optional double hopPower = 5;
    if (has_hoppower()) {
      total_size += 1 + 8;
    }

    // optional int32 freqsUsedBlind = 6;
    if (has_freqsusedblind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freqsusedblind());
    }

    // optional int32 freqsUsedCorr = 7;
    if (has_freqsusedcorr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freqsusedcorr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HopDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HopDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HopDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HopDescriptor::MergeFrom(const HopDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hoprate()) {
      set_hoprate(from.hoprate());
    }
    if (from.has_totalhopbw()) {
      set_totalhopbw(from.totalhopbw());
    }
    if (from.has_indhopbw()) {
      set_indhopbw(from.indhopbw());
    }
    if (from.has_hopduration()) {
      set_hopduration(from.hopduration());
    }
    if (from.has_hoppower()) {
      set_hoppower(from.hoppower());
    }
    if (from.has_freqsusedblind()) {
      set_freqsusedblind(from.freqsusedblind());
    }
    if (from.has_freqsusedcorr()) {
      set_freqsusedcorr(from.freqsusedcorr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HopDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HopDescriptor::CopyFrom(const HopDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HopDescriptor::IsInitialized() const {

  return true;
}

void HopDescriptor::Swap(HopDescriptor* other) {
  if (other != this) {
    std::swap(hoprate_, other->hoprate_);
    std::swap(totalhopbw_, other->totalhopbw_);
    std::swap(indhopbw_, other->indhopbw_);
    std::swap(hopduration_, other->hopduration_);
    std::swap(hoppower_, other->hoppower_);
    std::swap(freqsusedblind_, other->freqsusedblind_);
    std::swap(freqsusedcorr_, other->freqsusedcorr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HopDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HopDescriptor_descriptor_;
  metadata.reflection = HopDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FSKDescriptor::kCenterFreqFieldNumber;
const int FSKDescriptor::kExcursionFieldNumber;
const int FSKDescriptor::kBaudRateFieldNumber;
#endif  // !_MSC_VER

FSKDescriptor::FSKDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FSKDescriptor::InitAsDefaultInstance() {
}

FSKDescriptor::FSKDescriptor(const FSKDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FSKDescriptor::SharedCtor() {
  _cached_size_ = 0;
  centerfreq_ = 0;
  excursion_ = 0;
  baudrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FSKDescriptor::~FSKDescriptor() {
  SharedDtor();
}

void FSKDescriptor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FSKDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FSKDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FSKDescriptor_descriptor_;
}

const FSKDescriptor& FSKDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconExternalsMessages_2eproto();
  return *default_instance_;
}

FSKDescriptor* FSKDescriptor::default_instance_ = NULL;

FSKDescriptor* FSKDescriptor::New() const {
  return new FSKDescriptor;
}

void FSKDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    centerfreq_ = 0;
    excursion_ = 0;
    baudrate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FSKDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double centerFreq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerfreq_)));
          set_has_centerfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_excursion;
        break;
      }

      // optional double excursion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_excursion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &excursion_)));
          set_has_excursion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_baudRate;
        break;
      }

      // optional double baudRate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_baudRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &baudrate_)));
          set_has_baudrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FSKDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double centerFreq = 1;
  if (has_centerfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->centerfreq(), output);
  }

  // optional double excursion = 2;
  if (has_excursion()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->excursion(), output);
  }

  // optional double baudRate = 3;
  if (has_baudrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->baudrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FSKDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double centerFreq = 1;
  if (has_centerfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->centerfreq(), target);
  }

  // optional double excursion = 2;
  if (has_excursion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->excursion(), target);
  }

  // optional double baudRate = 3;
  if (has_baudrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->baudrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FSKDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double centerFreq = 1;
    if (has_centerfreq()) {
      total_size += 1 + 8;
    }

    // optional double excursion = 2;
    if (has_excursion()) {
      total_size += 1 + 8;
    }

    // optional double baudRate = 3;
    if (has_baudrate()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FSKDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FSKDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FSKDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FSKDescriptor::MergeFrom(const FSKDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_centerfreq()) {
      set_centerfreq(from.centerfreq());
    }
    if (from.has_excursion()) {
      set_excursion(from.excursion());
    }
    if (from.has_baudrate()) {
      set_baudrate(from.baudrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FSKDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FSKDescriptor::CopyFrom(const FSKDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FSKDescriptor::IsInitialized() const {

  return true;
}

void FSKDescriptor::Swap(FSKDescriptor* other) {
  if (other != this) {
    std::swap(centerfreq_, other->centerfreq_);
    std::swap(excursion_, other->excursion_);
    std::swap(baudrate_, other->baudrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FSKDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FSKDescriptor_descriptor_;
  metadata.reflection = FSKDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWDescriptor::kCenterFreqFieldNumber;
const int CWDescriptor::kPowerFieldNumber;
#endif  // !_MSC_VER

CWDescriptor::CWDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWDescriptor::InitAsDefaultInstance() {
}

CWDescriptor::CWDescriptor(const CWDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWDescriptor::SharedCtor() {
  _cached_size_ = 0;
  centerfreq_ = 0;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWDescriptor::~CWDescriptor() {
  SharedDtor();
}

void CWDescriptor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWDescriptor_descriptor_;
}

const CWDescriptor& CWDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconExternalsMessages_2eproto();
  return *default_instance_;
}

CWDescriptor* CWDescriptor::default_instance_ = NULL;

CWDescriptor* CWDescriptor::New() const {
  return new CWDescriptor;
}

void CWDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    centerfreq_ = 0;
    power_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double centerFreq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerfreq_)));
          set_has_centerfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_power;
        break;
      }

      // optional double power = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double centerFreq = 1;
  if (has_centerfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->centerfreq(), output);
  }

  // optional double power = 2;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double centerFreq = 1;
  if (has_centerfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->centerfreq(), target);
  }

  // optional double power = 2;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double centerFreq = 1;
    if (has_centerfreq()) {
      total_size += 1 + 8;
    }

    // optional double power = 2;
    if (has_power()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWDescriptor::MergeFrom(const CWDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_centerfreq()) {
      set_centerfreq(from.centerfreq());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWDescriptor::CopyFrom(const CWDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWDescriptor::IsInitialized() const {

  return true;
}

void CWDescriptor::Swap(CWDescriptor* other) {
  if (other != this) {
    std::swap(centerfreq_, other->centerfreq_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWDescriptor_descriptor_;
  metadata.reflection = CWDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpreadDescriptor::kCenterFreqFieldNumber;
const int SpreadDescriptor::kChipRateFieldNumber;
const int SpreadDescriptor::kModulationFieldNumber;
const int SpreadDescriptor::kPnSeqLengthFieldNumber;
const int SpreadDescriptor::kPolynomialFieldNumber;
const int SpreadDescriptor::kFillFieldNumber;
#endif  // !_MSC_VER

SpreadDescriptor::SpreadDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpreadDescriptor::InitAsDefaultInstance() {
}

SpreadDescriptor::SpreadDescriptor(const SpreadDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpreadDescriptor::SharedCtor() {
  _cached_size_ = 0;
  centerfreq_ = 0;
  chiprate_ = 0;
  modulation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pnseqlength_ = 0;
  polynomial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpreadDescriptor::~SpreadDescriptor() {
  SharedDtor();
}

void SpreadDescriptor::SharedDtor() {
  if (modulation_ != &::google::protobuf::internal::kEmptyString) {
    delete modulation_;
  }
  if (polynomial_ != &::google::protobuf::internal::kEmptyString) {
    delete polynomial_;
  }
  if (fill_ != &::google::protobuf::internal::kEmptyString) {
    delete fill_;
  }
  if (this != default_instance_) {
  }
}

void SpreadDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpreadDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpreadDescriptor_descriptor_;
}

const SpreadDescriptor& SpreadDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconExternalsMessages_2eproto();
  return *default_instance_;
}

SpreadDescriptor* SpreadDescriptor::default_instance_ = NULL;

SpreadDescriptor* SpreadDescriptor::New() const {
  return new SpreadDescriptor;
}

void SpreadDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    centerfreq_ = 0;
    chiprate_ = 0;
    if (has_modulation()) {
      if (modulation_ != &::google::protobuf::internal::kEmptyString) {
        modulation_->clear();
      }
    }
    pnseqlength_ = 0;
    if (has_polynomial()) {
      if (polynomial_ != &::google::protobuf::internal::kEmptyString) {
        polynomial_->clear();
      }
    }
    if (has_fill()) {
      if (fill_ != &::google::protobuf::internal::kEmptyString) {
        fill_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpreadDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double centerFreq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerfreq_)));
          set_has_centerfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_chipRate;
        break;
      }

      // optional double chipRate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_chipRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chiprate_)));
          set_has_chiprate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_modulation;
        break;
      }

      // optional string modulation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modulation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modulation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modulation().data(), this->modulation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pnSeqLength;
        break;
      }

      // optional int32 pnSeqLength = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pnSeqLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pnseqlength_)));
          set_has_pnseqlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_polynomial;
        break;
      }

      // optional string polynomial = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polynomial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_polynomial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->polynomial().data(), this->polynomial().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fill;
        break;
      }

      // optional string fill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fill()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fill().data(), this->fill().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpreadDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double centerFreq = 1;
  if (has_centerfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->centerfreq(), output);
  }

  // optional double chipRate = 2;
  if (has_chiprate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->chiprate(), output);
  }

  // optional string modulation = 3;
  if (has_modulation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modulation().data(), this->modulation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->modulation(), output);
  }

  // optional int32 pnSeqLength = 4;
  if (has_pnseqlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pnseqlength(), output);
  }

  // optional string polynomial = 5;
  if (has_polynomial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->polynomial().data(), this->polynomial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->polynomial(), output);
  }

  // optional string fill = 6;
  if (has_fill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fill().data(), this->fill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->fill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpreadDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double centerFreq = 1;
  if (has_centerfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->centerfreq(), target);
  }

  // optional double chipRate = 2;
  if (has_chiprate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->chiprate(), target);
  }

  // optional string modulation = 3;
  if (has_modulation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modulation().data(), this->modulation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->modulation(), target);
  }

  // optional int32 pnSeqLength = 4;
  if (has_pnseqlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pnseqlength(), target);
  }

  // optional string polynomial = 5;
  if (has_polynomial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->polynomial().data(), this->polynomial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->polynomial(), target);
  }

  // optional string fill = 6;
  if (has_fill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fill().data(), this->fill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpreadDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double centerFreq = 1;
    if (has_centerfreq()) {
      total_size += 1 + 8;
    }

    // optional double chipRate = 2;
    if (has_chiprate()) {
      total_size += 1 + 8;
    }

    // optional string modulation = 3;
    if (has_modulation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modulation());
    }

    // optional int32 pnSeqLength = 4;
    if (has_pnseqlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pnseqlength());
    }

    // optional string polynomial = 5;
    if (has_polynomial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->polynomial());
    }

    // optional string fill = 6;
    if (has_fill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpreadDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpreadDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpreadDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpreadDescriptor::MergeFrom(const SpreadDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_centerfreq()) {
      set_centerfreq(from.centerfreq());
    }
    if (from.has_chiprate()) {
      set_chiprate(from.chiprate());
    }
    if (from.has_modulation()) {
      set_modulation(from.modulation());
    }
    if (from.has_pnseqlength()) {
      set_pnseqlength(from.pnseqlength());
    }
    if (from.has_polynomial()) {
      set_polynomial(from.polynomial());
    }
    if (from.has_fill()) {
      set_fill(from.fill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpreadDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpreadDescriptor::CopyFrom(const SpreadDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpreadDescriptor::IsInitialized() const {

  return true;
}

void SpreadDescriptor::Swap(SpreadDescriptor* other) {
  if (other != this) {
    std::swap(centerfreq_, other->centerfreq_);
    std::swap(chiprate_, other->chiprate_);
    std::swap(modulation_, other->modulation_);
    std::swap(pnseqlength_, other->pnseqlength_);
    std::swap(polynomial_, other->polynomial_);
    std::swap(fill_, other->fill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpreadDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpreadDescriptor_descriptor_;
  metadata.reflection = SpreadDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AVDescriptor::kCenterFreqFieldNumber;
const int AVDescriptor::kDetectedFieldNumber;
#endif  // !_MSC_VER

AVDescriptor::AVDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AVDescriptor::InitAsDefaultInstance() {
}

AVDescriptor::AVDescriptor(const AVDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AVDescriptor::SharedCtor() {
  _cached_size_ = 0;
  centerfreq_ = 0;
  detected_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AVDescriptor::~AVDescriptor() {
  SharedDtor();
}

void AVDescriptor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AVDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AVDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AVDescriptor_descriptor_;
}

const AVDescriptor& AVDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconExternalsMessages_2eproto();
  return *default_instance_;
}

AVDescriptor* AVDescriptor::default_instance_ = NULL;

AVDescriptor* AVDescriptor::New() const {
  return new AVDescriptor;
}

void AVDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    centerfreq_ = 0;
    detected_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AVDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double centerFreq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerfreq_)));
          set_has_centerfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_detected;
        break;
      }

      // optional bool detected = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_detected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &detected_)));
          set_has_detected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AVDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double centerFreq = 1;
  if (has_centerfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->centerfreq(), output);
  }

  // optional bool detected = 2;
  if (has_detected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->detected(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AVDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double centerFreq = 1;
  if (has_centerfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->centerfreq(), target);
  }

  // optional bool detected = 2;
  if (has_detected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->detected(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AVDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double centerFreq = 1;
    if (has_centerfreq()) {
      total_size += 1 + 8;
    }

    // optional bool detected = 2;
    if (has_detected()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AVDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AVDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AVDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AVDescriptor::MergeFrom(const AVDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_centerfreq()) {
      set_centerfreq(from.centerfreq());
    }
    if (from.has_detected()) {
      set_detected(from.detected());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AVDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AVDescriptor::CopyFrom(const AVDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AVDescriptor::IsInitialized() const {

  return true;
}

void AVDescriptor::Swap(AVDescriptor* other) {
  if (other != this) {
    std::swap(centerfreq_, other->centerfreq_);
    std::swap(detected_, other->detected_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AVDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AVDescriptor_descriptor_;
  metadata.reflection = AVDescriptor_reflection_;
  return metadata;
}


// ===================================================================

::std::string* QSTAT_RT::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int QSTAT_RT::kMsgNameFieldNumber;
const int QSTAT_RT::kSenderFieldNumber;
const int QSTAT_RT::kStatusFieldNumber;
const int QSTAT_RT::kAppIdFieldNumber;
#endif  // !_MSC_VER

QSTAT_RT::QSTAT_RT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QSTAT_RT::InitAsDefaultInstance() {
}

QSTAT_RT::QSTAT_RT(const QSTAT_RT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QSTAT_RT::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QSTAT_RT::~QSTAT_RT() {
  SharedDtor();
}

void QSTAT_RT::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (this != default_instance_) {
  }
}

void QSTAT_RT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QSTAT_RT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QSTAT_RT_descriptor_;
}

const QSTAT_RT& QSTAT_RT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconExternalsMessages_2eproto();
  return *default_instance_;
}

QSTAT_RT* QSTAT_RT::default_instance_ = NULL;

QSTAT_RT* QSTAT_RT::New() const {
  return new QSTAT_RT;
}

void QSTAT_RT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::kEmptyString) {
        status_->clear();
      }
    }
    appid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QSTAT_RT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "QSTAT_RT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sender;
        break;
      }

      // optional string sender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // optional string status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_appId;
        break;
      }

      // optional int32 appId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QSTAT_RT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "QSTAT_RT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string sender = 2;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sender(), output);
  }

  // optional string status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->status(), output);
  }

  // optional int32 appId = 4;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QSTAT_RT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "QSTAT_RT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string sender = 2;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sender(), target);
  }

  // optional string status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->status(), target);
  }

  // optional int32 appId = 4;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QSTAT_RT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "QSTAT_RT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string sender = 2;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // optional string status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }

    // optional int32 appId = 4;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QSTAT_RT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QSTAT_RT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QSTAT_RT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QSTAT_RT::MergeFrom(const QSTAT_RT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QSTAT_RT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QSTAT_RT::CopyFrom(const QSTAT_RT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QSTAT_RT::IsInitialized() const {

  return true;
}

void QSTAT_RT::Swap(QSTAT_RT* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(sender_, other->sender_);
    std::swap(status_, other->status_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QSTAT_RT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QSTAT_RT_descriptor_;
  metadata.reflection = QSTAT_RT_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ExternalsRelease_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalsRelease_Type_descriptor_;
}
bool ExternalsRelease_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExternalsRelease_Type ExternalsRelease::KNOWN_RED;
const ExternalsRelease_Type ExternalsRelease::KNOWN_GRAY;
const ExternalsRelease_Type ExternalsRelease::KNOWN_BLUE;
const ExternalsRelease_Type ExternalsRelease::UNKNOWN;
const ExternalsRelease_Type ExternalsRelease::ANOMALY;
const ExternalsRelease_Type ExternalsRelease::Type_MIN;
const ExternalsRelease_Type ExternalsRelease::Type_MAX;
const int ExternalsRelease::Type_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* ExternalsRelease::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ExternalsRelease::kMsgNameFieldNumber;
const int ExternalsRelease::kNameFieldNumber;
const int ExternalsRelease::kThreatTypeFieldNumber;
const int ExternalsRelease::kFreqMHzFieldNumber;
#endif  // !_MSC_VER

ExternalsRelease::ExternalsRelease()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExternalsRelease::InitAsDefaultInstance() {
}

ExternalsRelease::ExternalsRelease(const ExternalsRelease& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExternalsRelease::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  threattype_ = 0;
  freqmhz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExternalsRelease::~ExternalsRelease() {
  SharedDtor();
}

void ExternalsRelease::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ExternalsRelease::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalsRelease::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalsRelease_descriptor_;
}

const ExternalsRelease& ExternalsRelease::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconExternalsMessages_2eproto();
  return *default_instance_;
}

ExternalsRelease* ExternalsRelease::default_instance_ = NULL;

ExternalsRelease* ExternalsRelease::New() const {
  return new ExternalsRelease;
}

void ExternalsRelease::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    threattype_ = 0;
    freqmhz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExternalsRelease::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EXTERNALSRELEASE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_threatType;
        break;
      }

      // optional .falcon_externals_msg.ExternalsRelease.Type threatType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_threatType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_externals_msg::ExternalsRelease_Type_IsValid(value)) {
            set_threattype(static_cast< ::falcon_externals_msg::ExternalsRelease_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_freqMHz;
        break;
      }

      // optional double freqMHz = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freqmhz_)));
          set_has_freqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExternalsRelease::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EXTERNALSRELEASE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .falcon_externals_msg.ExternalsRelease.Type threatType = 3;
  if (has_threattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->threattype(), output);
  }

  // optional double freqMHz = 4;
  if (has_freqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->freqmhz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExternalsRelease::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EXTERNALSRELEASE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .falcon_externals_msg.ExternalsRelease.Type threatType = 3;
  if (has_threattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->threattype(), target);
  }

  // optional double freqMHz = 4;
  if (has_freqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->freqmhz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExternalsRelease::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EXTERNALSRELEASE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .falcon_externals_msg.ExternalsRelease.Type threatType = 3;
    if (has_threattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->threattype());
    }

    // optional double freqMHz = 4;
    if (has_freqmhz()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalsRelease::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExternalsRelease* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternalsRelease*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternalsRelease::MergeFrom(const ExternalsRelease& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_threattype()) {
      set_threattype(from.threattype());
    }
    if (from.has_freqmhz()) {
      set_freqmhz(from.freqmhz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExternalsRelease::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalsRelease::CopyFrom(const ExternalsRelease& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalsRelease::IsInitialized() const {

  return true;
}

void ExternalsRelease::Swap(ExternalsRelease* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(name_, other->name_);
    std::swap(threattype_, other->threattype_);
    std::swap(freqmhz_, other->freqmhz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExternalsRelease::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternalsRelease_descriptor_;
  metadata.reflection = ExternalsRelease_reflection_;
  return metadata;
}


// ===================================================================

::std::string* NullHit::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int NullHit::kMsgNameFieldNumber;
const int NullHit::kTimestampFieldNumber;
const int NullHit::kFreqHzFieldNumber;
const int NullHit::kRamSnapIDFieldNumber;
const int NullHit::kDetectorNameFieldNumber;
#endif  // !_MSC_VER

NullHit::NullHit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NullHit::InitAsDefaultInstance() {
}

NullHit::NullHit(const NullHit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NullHit::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  freqhz_ = 0;
  ramsnapid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  detectorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NullHit::~NullHit() {
  SharedDtor();
}

void NullHit::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (ramsnapid_ != &::google::protobuf::internal::kEmptyString) {
    delete ramsnapid_;
  }
  if (detectorname_ != &::google::protobuf::internal::kEmptyString) {
    delete detectorname_;
  }
  if (this != default_instance_) {
  }
}

void NullHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NullHit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NullHit_descriptor_;
}

const NullHit& NullHit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconExternalsMessages_2eproto();
  return *default_instance_;
}

NullHit* NullHit::default_instance_ = NULL;

NullHit* NullHit::New() const {
  return new NullHit;
}

void NullHit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    freqhz_ = 0;
    if (has_ramsnapid()) {
      if (ramsnapid_ != &::google::protobuf::internal::kEmptyString) {
        ramsnapid_->clear();
      }
    }
    if (has_detectorname()) {
      if (detectorname_ != &::google::protobuf::internal::kEmptyString) {
        detectorname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NullHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "NULLHIT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_freqHz;
        break;
      }

      // optional double freqHz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freqHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freqhz_)));
          set_has_freqhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ramSnapID;
        break;
      }

      // optional string ramSnapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ramSnapID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ramsnapid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ramsnapid().data(), this->ramsnapid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_detectorName;
        break;
      }

      // optional string detectorName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detectorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detectorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->detectorname().data(), this->detectorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NullHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "NULLHIT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->timestamp(), output);
  }

  // optional double freqHz = 3;
  if (has_freqhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->freqhz(), output);
  }

  // optional string ramSnapID = 4;
  if (has_ramsnapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ramsnapid().data(), this->ramsnapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ramsnapid(), output);
  }

  // optional string detectorName = 5;
  if (has_detectorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detectorname().data(), this->detectorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->detectorname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NullHit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "NULLHIT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }

  // optional double freqHz = 3;
  if (has_freqhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->freqhz(), target);
  }

  // optional string ramSnapID = 4;
  if (has_ramsnapid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ramsnapid().data(), this->ramsnapid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ramsnapid(), target);
  }

  // optional string detectorName = 5;
  if (has_detectorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detectorname().data(), this->detectorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->detectorname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NullHit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "NULLHIT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional double freqHz = 3;
    if (has_freqhz()) {
      total_size += 1 + 8;
    }

    // optional string ramSnapID = 4;
    if (has_ramsnapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ramsnapid());
    }

    // optional string detectorName = 5;
    if (has_detectorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detectorname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NullHit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NullHit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NullHit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NullHit::MergeFrom(const NullHit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_freqhz()) {
      set_freqhz(from.freqhz());
    }
    if (from.has_ramsnapid()) {
      set_ramsnapid(from.ramsnapid());
    }
    if (from.has_detectorname()) {
      set_detectorname(from.detectorname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NullHit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NullHit::CopyFrom(const NullHit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullHit::IsInitialized() const {

  return true;
}

void NullHit::Swap(NullHit* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(freqhz_, other->freqhz_);
    std::swap(ramsnapid_, other->ramsnapid_);
    std::swap(detectorname_, other->detectorname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NullHit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NullHit_descriptor_;
  metadata.reflection = NullHit_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace falcon_externals_msg

// @@protoc_insertion_point(global_scope)
