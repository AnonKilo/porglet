// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BitMessages.proto

#ifndef PROTOBUF_BitMessages_2eproto__INCLUDED
#define PROTOBUF_BitMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ServiceInfrastructureCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace bit_protos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BitMessages_2eproto();
void protobuf_AssignDesc_BitMessages_2eproto();
void protobuf_ShutdownFile_BitMessages_2eproto();

class BitRequestTopic;
class BitResponseTopic;
class BITTestReport;
class BITTestRequest;

// ===================================================================

class BitRequestTopic : public ::google::protobuf::Message {
 public:
  BitRequestTopic();
  virtual ~BitRequestTopic();

  BitRequestTopic(const BitRequestTopic& from);

  inline BitRequestTopic& operator=(const BitRequestTopic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitRequestTopic& default_instance();

  void Swap(BitRequestTopic* other);

  // implements Message ----------------------------------------------

  BitRequestTopic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitRequestTopic& from);
  void MergeFrom(const BitRequestTopic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_infrastructure.Header header = 100;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 100;
  inline const ::service_infrastructure::Header& header() const;
  inline ::service_infrastructure::Header* mutable_header();
  inline ::service_infrastructure::Header* release_header();
  inline void set_allocated_header(::service_infrastructure::Header* header);

  // optional .bit_protos.BITTestRequest bit_request = 1;
  inline bool has_bit_request() const;
  inline void clear_bit_request();
  static const int kBitRequestFieldNumber = 1;
  inline const ::bit_protos::BITTestRequest& bit_request() const;
  inline ::bit_protos::BITTestRequest* mutable_bit_request();
  inline ::bit_protos::BITTestRequest* release_bit_request();
  inline void set_allocated_bit_request(::bit_protos::BITTestRequest* bit_request);

  // @@protoc_insertion_point(class_scope:bit_protos.BitRequestTopic)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_bit_request();
  inline void clear_has_bit_request();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::service_infrastructure::Header* header_;
  ::bit_protos::BITTestRequest* bit_request_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_BitMessages_2eproto();
  friend void protobuf_AssignDesc_BitMessages_2eproto();
  friend void protobuf_ShutdownFile_BitMessages_2eproto();

  void InitAsDefaultInstance();
  static BitRequestTopic* default_instance_;
};
// -------------------------------------------------------------------

class BitResponseTopic : public ::google::protobuf::Message {
 public:
  BitResponseTopic();
  virtual ~BitResponseTopic();

  BitResponseTopic(const BitResponseTopic& from);

  inline BitResponseTopic& operator=(const BitResponseTopic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitResponseTopic& default_instance();

  void Swap(BitResponseTopic* other);

  // implements Message ----------------------------------------------

  BitResponseTopic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitResponseTopic& from);
  void MergeFrom(const BitResponseTopic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .service_infrastructure.Header header = 100;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 100;
  inline const ::service_infrastructure::Header& header() const;
  inline ::service_infrastructure::Header* mutable_header();
  inline ::service_infrastructure::Header* release_header();
  inline void set_allocated_header(::service_infrastructure::Header* header);

  // optional .bit_protos.BITTestReport bit_report = 1;
  inline bool has_bit_report() const;
  inline void clear_bit_report();
  static const int kBitReportFieldNumber = 1;
  inline const ::bit_protos::BITTestReport& bit_report() const;
  inline ::bit_protos::BITTestReport* mutable_bit_report();
  inline ::bit_protos::BITTestReport* release_bit_report();
  inline void set_allocated_bit_report(::bit_protos::BITTestReport* bit_report);

  // @@protoc_insertion_point(class_scope:bit_protos.BitResponseTopic)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_bit_report();
  inline void clear_has_bit_report();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::service_infrastructure::Header* header_;
  ::bit_protos::BITTestReport* bit_report_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_BitMessages_2eproto();
  friend void protobuf_AssignDesc_BitMessages_2eproto();
  friend void protobuf_ShutdownFile_BitMessages_2eproto();

  void InitAsDefaultInstance();
  static BitResponseTopic* default_instance_;
};
// -------------------------------------------------------------------

class BITTestReport : public ::google::protobuf::Message {
 public:
  BITTestReport();
  virtual ~BITTestReport();

  BITTestReport(const BITTestReport& from);

  inline BITTestReport& operator=(const BITTestReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BITTestReport& default_instance();

  void Swap(BITTestReport* other);

  // implements Message ----------------------------------------------

  BITTestReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BITTestReport& from);
  void MergeFrom(const BITTestReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bit_protos.BITTestReport)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_BitMessages_2eproto();
  friend void protobuf_AssignDesc_BitMessages_2eproto();
  friend void protobuf_ShutdownFile_BitMessages_2eproto();

  void InitAsDefaultInstance();
  static BITTestReport* default_instance_;
};
// -------------------------------------------------------------------

class BITTestRequest : public ::google::protobuf::Message {
 public:
  BITTestRequest();
  virtual ~BITTestRequest();

  BITTestRequest(const BITTestRequest& from);

  inline BITTestRequest& operator=(const BITTestRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BITTestRequest& default_instance();

  void Swap(BITTestRequest* other);

  // implements Message ----------------------------------------------

  BITTestRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BITTestRequest& from);
  void MergeFrom(const BITTestRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bit_protos.BITTestRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_BitMessages_2eproto();
  friend void protobuf_AssignDesc_BitMessages_2eproto();
  friend void protobuf_ShutdownFile_BitMessages_2eproto();

  void InitAsDefaultInstance();
  static BITTestRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// BitRequestTopic

// optional .service_infrastructure.Header header = 100;
inline bool BitRequestTopic::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BitRequestTopic::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BitRequestTopic::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BitRequestTopic::clear_header() {
  if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
  clear_has_header();
}
inline const ::service_infrastructure::Header& BitRequestTopic::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::service_infrastructure::Header* BitRequestTopic::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::service_infrastructure::Header;
  return header_;
}
inline ::service_infrastructure::Header* BitRequestTopic::release_header() {
  clear_has_header();
  ::service_infrastructure::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void BitRequestTopic::set_allocated_header(::service_infrastructure::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional .bit_protos.BITTestRequest bit_request = 1;
inline bool BitRequestTopic::has_bit_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BitRequestTopic::set_has_bit_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BitRequestTopic::clear_has_bit_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BitRequestTopic::clear_bit_request() {
  if (bit_request_ != NULL) bit_request_->::bit_protos::BITTestRequest::Clear();
  clear_has_bit_request();
}
inline const ::bit_protos::BITTestRequest& BitRequestTopic::bit_request() const {
  return bit_request_ != NULL ? *bit_request_ : *default_instance_->bit_request_;
}
inline ::bit_protos::BITTestRequest* BitRequestTopic::mutable_bit_request() {
  set_has_bit_request();
  if (bit_request_ == NULL) bit_request_ = new ::bit_protos::BITTestRequest;
  return bit_request_;
}
inline ::bit_protos::BITTestRequest* BitRequestTopic::release_bit_request() {
  clear_has_bit_request();
  ::bit_protos::BITTestRequest* temp = bit_request_;
  bit_request_ = NULL;
  return temp;
}
inline void BitRequestTopic::set_allocated_bit_request(::bit_protos::BITTestRequest* bit_request) {
  delete bit_request_;
  bit_request_ = bit_request;
  if (bit_request) {
    set_has_bit_request();
  } else {
    clear_has_bit_request();
  }
}

// -------------------------------------------------------------------

// BitResponseTopic

// optional .service_infrastructure.Header header = 100;
inline bool BitResponseTopic::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BitResponseTopic::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BitResponseTopic::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BitResponseTopic::clear_header() {
  if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
  clear_has_header();
}
inline const ::service_infrastructure::Header& BitResponseTopic::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::service_infrastructure::Header* BitResponseTopic::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::service_infrastructure::Header;
  return header_;
}
inline ::service_infrastructure::Header* BitResponseTopic::release_header() {
  clear_has_header();
  ::service_infrastructure::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void BitResponseTopic::set_allocated_header(::service_infrastructure::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional .bit_protos.BITTestReport bit_report = 1;
inline bool BitResponseTopic::has_bit_report() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BitResponseTopic::set_has_bit_report() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BitResponseTopic::clear_has_bit_report() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BitResponseTopic::clear_bit_report() {
  if (bit_report_ != NULL) bit_report_->::bit_protos::BITTestReport::Clear();
  clear_has_bit_report();
}
inline const ::bit_protos::BITTestReport& BitResponseTopic::bit_report() const {
  return bit_report_ != NULL ? *bit_report_ : *default_instance_->bit_report_;
}
inline ::bit_protos::BITTestReport* BitResponseTopic::mutable_bit_report() {
  set_has_bit_report();
  if (bit_report_ == NULL) bit_report_ = new ::bit_protos::BITTestReport;
  return bit_report_;
}
inline ::bit_protos::BITTestReport* BitResponseTopic::release_bit_report() {
  clear_has_bit_report();
  ::bit_protos::BITTestReport* temp = bit_report_;
  bit_report_ = NULL;
  return temp;
}
inline void BitResponseTopic::set_allocated_bit_report(::bit_protos::BITTestReport* bit_report) {
  delete bit_report_;
  bit_report_ = bit_report;
  if (bit_report) {
    set_has_bit_report();
  } else {
    clear_has_bit_report();
  }
}

// -------------------------------------------------------------------

// BITTestReport

// -------------------------------------------------------------------

// BITTestRequest


// @@protoc_insertion_point(namespace_scope)

}  // namespace bit_protos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BitMessages_2eproto__INCLUDED
