// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_rxdataplane.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service_rxdataplane.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace service_rxdataplane {

namespace {

const ::google::protobuf::Descriptor* RXDataPlaneConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RXDataPlaneConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPPConfigInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPPConfigInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IQIngestFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IQIngestFilter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* implementationTypes_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_5frxdataplane_2eproto() {
  protobuf_AddDesc_service_5frxdataplane_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service_rxdataplane.proto");
  GOOGLE_CHECK(file != NULL);
  RXDataPlaneConfig_descriptor_ = file->message_type(0);
  static const int RXDataPlaneConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RXDataPlaneConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RXDataPlaneConfig, products_),
  };
  RXDataPlaneConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RXDataPlaneConfig_descriptor_,
      RXDataPlaneConfig::default_instance_,
      RXDataPlaneConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RXDataPlaneConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RXDataPlaneConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RXDataPlaneConfig));
  GPPConfigInfo_descriptor_ = file->message_type(1);
  static const int GPPConfigInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPPConfigInfo, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPPConfigInfo, threads_),
  };
  GPPConfigInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPPConfigInfo_descriptor_,
      GPPConfigInfo::default_instance_,
      GPPConfigInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPPConfigInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPPConfigInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPPConfigInfo));
  IQIngestFilter_descriptor_ = file->message_type(2);
  static const int IQIngestFilter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQIngestFilter, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQIngestFilter, minfreqhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQIngestFilter, maxfreqhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQIngestFilter, fixedsamplerate_),
  };
  IQIngestFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IQIngestFilter_descriptor_,
      IQIngestFilter::default_instance_,
      IQIngestFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQIngestFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQIngestFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IQIngestFilter));
  implementationTypes_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_5frxdataplane_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RXDataPlaneConfig_descriptor_, &RXDataPlaneConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPPConfigInfo_descriptor_, &GPPConfigInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IQIngestFilter_descriptor_, &IQIngestFilter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_5frxdataplane_2eproto() {
  delete RXDataPlaneConfig::default_instance_;
  delete RXDataPlaneConfig_reflection_;
  delete RXDataPlaneConfig::_default_msgname_;
  delete GPPConfigInfo::default_instance_;
  delete GPPConfigInfo_reflection_;
  delete GPPConfigInfo::_default_msgname_;
  delete IQIngestFilter::default_instance_;
  delete IQIngestFilter_reflection_;
  delete IQIngestFilter::_default_msgname_;
}

void protobuf_AddDesc_service_5frxdataplane_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031service_rxdataplane.proto\022\023service_rxd"
    "ataplane\"]\n\021RXDataPlaneConfig\0226\n\007msgName"
    "\030\001 \001(\t:%service_rxdataplane.RXDataPlaneC"
    "onfig\022\020\n\010products\030\002 \003(\t\"S\n\rGPPConfigInfo"
    "\022.\n\007msgName\030\001 \001(\t:\035service_rxdataplane.G"
    "PPConfig\022\022\n\007threads\030\002 \001(\005:\0012\"\235\001\n\016IQInges"
    "tFilter\0223\n\007msgName\030\001 \001(\t:\"service_rxdata"
    "plane.IQIngestFilter\022\033\n\tminFreqHz\030\002 \001(\001:"
    "\01030000000\022\035\n\tmaxFreqHz\030\003 \001(\001:\n6000000000"
    "\022\032\n\017fixedSampleRate\030\004 \001(\001:\0010*1\n\023implemen"
    "tationTypes\022\007\n\003GPP\020\001\022\007\n\003GPU\020\002\022\010\n\004FPGA\020\003B"
    "\025\n\023fv.protos.kepsvisor", 462);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service_rxdataplane.proto", &protobuf_RegisterTypes);
  RXDataPlaneConfig::_default_msgname_ =
      new ::std::string("service_rxdataplane.RXDataPlaneConfig", 37);
  RXDataPlaneConfig::default_instance_ = new RXDataPlaneConfig();
  GPPConfigInfo::_default_msgname_ =
      new ::std::string("service_rxdataplane.GPPConfig", 29);
  GPPConfigInfo::default_instance_ = new GPPConfigInfo();
  IQIngestFilter::_default_msgname_ =
      new ::std::string("service_rxdataplane.IQIngestFilter", 34);
  IQIngestFilter::default_instance_ = new IQIngestFilter();
  RXDataPlaneConfig::default_instance_->InitAsDefaultInstance();
  GPPConfigInfo::default_instance_->InitAsDefaultInstance();
  IQIngestFilter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_5frxdataplane_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_5frxdataplane_2eproto {
  StaticDescriptorInitializer_service_5frxdataplane_2eproto() {
    protobuf_AddDesc_service_5frxdataplane_2eproto();
  }
} static_descriptor_initializer_service_5frxdataplane_2eproto_;
const ::google::protobuf::EnumDescriptor* implementationTypes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return implementationTypes_descriptor_;
}
bool implementationTypes_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

::std::string* RXDataPlaneConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RXDataPlaneConfig::kMsgNameFieldNumber;
const int RXDataPlaneConfig::kProductsFieldNumber;
#endif  // !_MSC_VER

RXDataPlaneConfig::RXDataPlaneConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RXDataPlaneConfig::InitAsDefaultInstance() {
}

RXDataPlaneConfig::RXDataPlaneConfig(const RXDataPlaneConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RXDataPlaneConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RXDataPlaneConfig::~RXDataPlaneConfig() {
  SharedDtor();
}

void RXDataPlaneConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void RXDataPlaneConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RXDataPlaneConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RXDataPlaneConfig_descriptor_;
}

const RXDataPlaneConfig& RXDataPlaneConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5frxdataplane_2eproto();
  return *default_instance_;
}

RXDataPlaneConfig* RXDataPlaneConfig::default_instance_ = NULL;

RXDataPlaneConfig* RXDataPlaneConfig::New() const {
  return new RXDataPlaneConfig;
}

void RXDataPlaneConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  products_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RXDataPlaneConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "service_rxdataplane.RXDataPlaneConfig"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_products;
        break;
      }

      // repeated string products = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_products:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_products()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->products(this->products_size() - 1).data(),
            this->products(this->products_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_products;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RXDataPlaneConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "service_rxdataplane.RXDataPlaneConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated string products = 2;
  for (int i = 0; i < this->products_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->products(i).data(), this->products(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->products(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RXDataPlaneConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "service_rxdataplane.RXDataPlaneConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated string products = 2;
  for (int i = 0; i < this->products_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->products(i).data(), this->products(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->products(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RXDataPlaneConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "service_rxdataplane.RXDataPlaneConfig"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  // repeated string products = 2;
  total_size += 1 * this->products_size();
  for (int i = 0; i < this->products_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->products(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RXDataPlaneConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RXDataPlaneConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RXDataPlaneConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RXDataPlaneConfig::MergeFrom(const RXDataPlaneConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  products_.MergeFrom(from.products_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RXDataPlaneConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RXDataPlaneConfig::CopyFrom(const RXDataPlaneConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RXDataPlaneConfig::IsInitialized() const {

  return true;
}

void RXDataPlaneConfig::Swap(RXDataPlaneConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    products_.Swap(&other->products_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RXDataPlaneConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RXDataPlaneConfig_descriptor_;
  metadata.reflection = RXDataPlaneConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GPPConfigInfo::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GPPConfigInfo::kMsgNameFieldNumber;
const int GPPConfigInfo::kThreadsFieldNumber;
#endif  // !_MSC_VER

GPPConfigInfo::GPPConfigInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GPPConfigInfo::InitAsDefaultInstance() {
}

GPPConfigInfo::GPPConfigInfo(const GPPConfigInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GPPConfigInfo::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  threads_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPPConfigInfo::~GPPConfigInfo() {
  SharedDtor();
}

void GPPConfigInfo::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void GPPConfigInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPPConfigInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPPConfigInfo_descriptor_;
}

const GPPConfigInfo& GPPConfigInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5frxdataplane_2eproto();
  return *default_instance_;
}

GPPConfigInfo* GPPConfigInfo::default_instance_ = NULL;

GPPConfigInfo* GPPConfigInfo::New() const {
  return new GPPConfigInfo;
}

void GPPConfigInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    threads_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPPConfigInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "service_rxdataplane.GPPConfig"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_threads;
        break;
      }

      // optional int32 threads = 2 [default = 2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threads_)));
          set_has_threads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GPPConfigInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "service_rxdataplane.GPPConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 threads = 2 [default = 2];
  if (has_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->threads(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GPPConfigInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "service_rxdataplane.GPPConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 threads = 2 [default = 2];
  if (has_threads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->threads(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GPPConfigInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "service_rxdataplane.GPPConfig"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 threads = 2 [default = 2];
    if (has_threads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->threads());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPPConfigInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPPConfigInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPPConfigInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPPConfigInfo::MergeFrom(const GPPConfigInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_threads()) {
      set_threads(from.threads());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPPConfigInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPPConfigInfo::CopyFrom(const GPPConfigInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPPConfigInfo::IsInitialized() const {

  return true;
}

void GPPConfigInfo::Swap(GPPConfigInfo* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(threads_, other->threads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPPConfigInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPPConfigInfo_descriptor_;
  metadata.reflection = GPPConfigInfo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* IQIngestFilter::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int IQIngestFilter::kMsgNameFieldNumber;
const int IQIngestFilter::kMinFreqHzFieldNumber;
const int IQIngestFilter::kMaxFreqHzFieldNumber;
const int IQIngestFilter::kFixedSampleRateFieldNumber;
#endif  // !_MSC_VER

IQIngestFilter::IQIngestFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IQIngestFilter::InitAsDefaultInstance() {
}

IQIngestFilter::IQIngestFilter(const IQIngestFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IQIngestFilter::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  minfreqhz_ = 30000000;
  maxfreqhz_ = 6000000000;
  fixedsamplerate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IQIngestFilter::~IQIngestFilter() {
  SharedDtor();
}

void IQIngestFilter::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void IQIngestFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IQIngestFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IQIngestFilter_descriptor_;
}

const IQIngestFilter& IQIngestFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5frxdataplane_2eproto();
  return *default_instance_;
}

IQIngestFilter* IQIngestFilter::default_instance_ = NULL;

IQIngestFilter* IQIngestFilter::New() const {
  return new IQIngestFilter;
}

void IQIngestFilter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    minfreqhz_ = 30000000;
    maxfreqhz_ = 6000000000;
    fixedsamplerate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IQIngestFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "service_rxdataplane.IQIngestFilter"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_minFreqHz;
        break;
      }

      // optional double minFreqHz = 2 [default = 30000000];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minFreqHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minfreqhz_)));
          set_has_minfreqhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_maxFreqHz;
        break;
      }

      // optional double maxFreqHz = 3 [default = 6000000000];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxFreqHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxfreqhz_)));
          set_has_maxfreqhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_fixedSampleRate;
        break;
      }

      // optional double fixedSampleRate = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fixedSampleRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fixedsamplerate_)));
          set_has_fixedsamplerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IQIngestFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "service_rxdataplane.IQIngestFilter"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double minFreqHz = 2 [default = 30000000];
  if (has_minfreqhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->minfreqhz(), output);
  }

  // optional double maxFreqHz = 3 [default = 6000000000];
  if (has_maxfreqhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->maxfreqhz(), output);
  }

  // optional double fixedSampleRate = 4 [default = 0];
  if (has_fixedsamplerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->fixedsamplerate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IQIngestFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "service_rxdataplane.IQIngestFilter"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double minFreqHz = 2 [default = 30000000];
  if (has_minfreqhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->minfreqhz(), target);
  }

  // optional double maxFreqHz = 3 [default = 6000000000];
  if (has_maxfreqhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->maxfreqhz(), target);
  }

  // optional double fixedSampleRate = 4 [default = 0];
  if (has_fixedsamplerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->fixedsamplerate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IQIngestFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "service_rxdataplane.IQIngestFilter"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double minFreqHz = 2 [default = 30000000];
    if (has_minfreqhz()) {
      total_size += 1 + 8;
    }

    // optional double maxFreqHz = 3 [default = 6000000000];
    if (has_maxfreqhz()) {
      total_size += 1 + 8;
    }

    // optional double fixedSampleRate = 4 [default = 0];
    if (has_fixedsamplerate()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IQIngestFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IQIngestFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IQIngestFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IQIngestFilter::MergeFrom(const IQIngestFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_minfreqhz()) {
      set_minfreqhz(from.minfreqhz());
    }
    if (from.has_maxfreqhz()) {
      set_maxfreqhz(from.maxfreqhz());
    }
    if (from.has_fixedsamplerate()) {
      set_fixedsamplerate(from.fixedsamplerate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IQIngestFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IQIngestFilter::CopyFrom(const IQIngestFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IQIngestFilter::IsInitialized() const {

  return true;
}

void IQIngestFilter::Swap(IQIngestFilter* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(minfreqhz_, other->minfreqhz_);
    std::swap(maxfreqhz_, other->maxfreqhz_);
    std::swap(fixedsamplerate_, other->fixedsamplerate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IQIngestFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IQIngestFilter_descriptor_;
  metadata.reflection = IQIngestFilter_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_rxdataplane

// @@protoc_insertion_point(global_scope)
