// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DSSSMessages.proto

#ifndef PROTOBUF_DSSSMessages_2eproto__INCLUDED
#define PROTOBUF_DSSSMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DSSSMessages_2eproto();
void protobuf_AssignDesc_DSSSMessages_2eproto();
void protobuf_ShutdownFile_DSSSMessages_2eproto();

class DSSSProduct;

// ===================================================================

class DSSSProduct : public ::google::protobuf::Message {
 public:
  DSSSProduct();
  virtual ~DSSSProduct();

  DSSSProduct(const DSSSProduct& from);

  inline DSSSProduct& operator=(const DSSSProduct& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DSSSProduct& default_instance();

  void Swap(DSSSProduct* other);

  // implements Message ----------------------------------------------

  DSSSProduct* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DSSSProduct& from);
  void MergeFrom(const DSSSProduct& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "DSSS_PRODUCT"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional double rf_hz = 2;
  inline bool has_rf_hz() const;
  inline void clear_rf_hz();
  static const int kRfHzFieldNumber = 2;
  inline double rf_hz() const;
  inline void set_rf_hz(double value);

  // optional double chiprate = 3;
  inline bool has_chiprate() const;
  inline void clear_chiprate();
  static const int kChiprateFieldNumber = 3;
  inline double chiprate() const;
  inline void set_chiprate(double value);

  // optional string code = 4;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional int32 codelength = 5;
  inline bool has_codelength() const;
  inline void clear_codelength();
  static const int kCodelengthFieldNumber = 5;
  inline ::google::protobuf::int32 codelength() const;
  inline void set_codelength(::google::protobuf::int32 value);

  // optional double wholeSeconds = 6;
  inline bool has_wholeseconds() const;
  inline void clear_wholeseconds();
  static const int kWholeSecondsFieldNumber = 6;
  inline double wholeseconds() const;
  inline void set_wholeseconds(double value);

  // optional double fracSeconds = 7;
  inline bool has_fracseconds() const;
  inline void clear_fracseconds();
  static const int kFracSecondsFieldNumber = 7;
  inline double fracseconds() const;
  inline void set_fracseconds(double value);

  // optional float confidence = 8;
  inline bool has_confidence() const;
  inline void clear_confidence();
  static const int kConfidenceFieldNumber = 8;
  inline float confidence() const;
  inline void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:DSSSProduct)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_rf_hz();
  inline void clear_has_rf_hz();
  inline void set_has_chiprate();
  inline void clear_has_chiprate();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_codelength();
  inline void clear_has_codelength();
  inline void set_has_wholeseconds();
  inline void clear_has_wholeseconds();
  inline void set_has_fracseconds();
  inline void clear_has_fracseconds();
  inline void set_has_confidence();
  inline void clear_has_confidence();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  double rf_hz_;
  double chiprate_;
  ::std::string* code_;
  double wholeseconds_;
  ::google::protobuf::int32 codelength_;
  float confidence_;
  double fracseconds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_DSSSMessages_2eproto();
  friend void protobuf_AssignDesc_DSSSMessages_2eproto();
  friend void protobuf_ShutdownFile_DSSSMessages_2eproto();

  void InitAsDefaultInstance();
  static DSSSProduct* default_instance_;
};
// ===================================================================


// ===================================================================

// DSSSProduct

// optional string msgName = 1 [default = "DSSS_PRODUCT"];
inline bool DSSSProduct::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DSSSProduct::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DSSSProduct::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DSSSProduct::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& DSSSProduct::msgname() const {
  return *msgname_;
}
inline void DSSSProduct::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void DSSSProduct::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void DSSSProduct::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DSSSProduct::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* DSSSProduct::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void DSSSProduct::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional double rf_hz = 2;
inline bool DSSSProduct::has_rf_hz() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DSSSProduct::set_has_rf_hz() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DSSSProduct::clear_has_rf_hz() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DSSSProduct::clear_rf_hz() {
  rf_hz_ = 0;
  clear_has_rf_hz();
}
inline double DSSSProduct::rf_hz() const {
  return rf_hz_;
}
inline void DSSSProduct::set_rf_hz(double value) {
  set_has_rf_hz();
  rf_hz_ = value;
}

// optional double chiprate = 3;
inline bool DSSSProduct::has_chiprate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DSSSProduct::set_has_chiprate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DSSSProduct::clear_has_chiprate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DSSSProduct::clear_chiprate() {
  chiprate_ = 0;
  clear_has_chiprate();
}
inline double DSSSProduct::chiprate() const {
  return chiprate_;
}
inline void DSSSProduct::set_chiprate(double value) {
  set_has_chiprate();
  chiprate_ = value;
}

// optional string code = 4;
inline bool DSSSProduct::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DSSSProduct::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DSSSProduct::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DSSSProduct::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& DSSSProduct::code() const {
  return *code_;
}
inline void DSSSProduct::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void DSSSProduct::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void DSSSProduct::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DSSSProduct::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* DSSSProduct::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DSSSProduct::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 codelength = 5;
inline bool DSSSProduct::has_codelength() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DSSSProduct::set_has_codelength() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DSSSProduct::clear_has_codelength() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DSSSProduct::clear_codelength() {
  codelength_ = 0;
  clear_has_codelength();
}
inline ::google::protobuf::int32 DSSSProduct::codelength() const {
  return codelength_;
}
inline void DSSSProduct::set_codelength(::google::protobuf::int32 value) {
  set_has_codelength();
  codelength_ = value;
}

// optional double wholeSeconds = 6;
inline bool DSSSProduct::has_wholeseconds() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DSSSProduct::set_has_wholeseconds() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DSSSProduct::clear_has_wholeseconds() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DSSSProduct::clear_wholeseconds() {
  wholeseconds_ = 0;
  clear_has_wholeseconds();
}
inline double DSSSProduct::wholeseconds() const {
  return wholeseconds_;
}
inline void DSSSProduct::set_wholeseconds(double value) {
  set_has_wholeseconds();
  wholeseconds_ = value;
}

// optional double fracSeconds = 7;
inline bool DSSSProduct::has_fracseconds() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DSSSProduct::set_has_fracseconds() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DSSSProduct::clear_has_fracseconds() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DSSSProduct::clear_fracseconds() {
  fracseconds_ = 0;
  clear_has_fracseconds();
}
inline double DSSSProduct::fracseconds() const {
  return fracseconds_;
}
inline void DSSSProduct::set_fracseconds(double value) {
  set_has_fracseconds();
  fracseconds_ = value;
}

// optional float confidence = 8;
inline bool DSSSProduct::has_confidence() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DSSSProduct::set_has_confidence() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DSSSProduct::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DSSSProduct::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
inline float DSSSProduct::confidence() const {
  return confidence_;
}
inline void DSSSProduct::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DSSSMessages_2eproto__INCLUDED
