// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceInfrastructureCommon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServiceInfrastructureCommon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace service_infrastructure {

namespace {

const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* NAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandshakeTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandshakeTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartupNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartupNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutDownNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutDownNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Version_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigurationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigurationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigurationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigurationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Configuration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Configuration_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* Band_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Band_reflection_ = NULL;
const ::google::protobuf::Descriptor* Channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Channel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServiceInfrastructureCommon_2eproto() {
  protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServiceInfrastructureCommon.proto");
  GOOGLE_CHECK(file != NULL);
  Header_descriptor_ = file->message_type(0);
  static const int Header_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, sensorname_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  Ack_descriptor_ = file->message_type(1);
  static const int Ack_offsets_[1] = {
  };
  Ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ack_descriptor_,
      Ack::default_instance_,
      Ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ack));
  NAck_descriptor_ = file->message_type(2);
  static const int NAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAck, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAck, error_description_),
  };
  NAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NAck_descriptor_,
      NAck::default_instance_,
      NAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NAck));
  HandshakeTopic_descriptor_ = file->message_type(3);
  static const int HandshakeTopic_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeTopic, ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeTopic, nack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeTopic, startup_notification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeTopic, shutdown_notification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeTopic, connection_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeTopic, connection_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeTopic, configuration_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeTopic, configuration_response_),
  };
  HandshakeTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandshakeTopic_descriptor_,
      HandshakeTopic::default_instance_,
      HandshakeTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandshakeTopic));
  StartupNotification_descriptor_ = file->message_type(4);
  static const int StartupNotification_offsets_[1] = {
  };
  StartupNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartupNotification_descriptor_,
      StartupNotification::default_instance_,
      StartupNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartupNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartupNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartupNotification));
  ShutDownNotification_descriptor_ = file->message_type(5);
  static const int ShutDownNotification_offsets_[1] = {
  };
  ShutDownNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShutDownNotification_descriptor_,
      ShutDownNotification::default_instance_,
      ShutDownNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutDownNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutDownNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShutDownNotification));
  ConnectionRequest_descriptor_ = file->message_type(6);
  static const int ConnectionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, release_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, icd_),
  };
  ConnectionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectionRequest_descriptor_,
      ConnectionRequest::default_instance_,
      ConnectionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectionRequest));
  ConnectionResponse_descriptor_ = file->message_type(7);
  static const int ConnectionResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionResponse, release_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionResponse, icd_),
  };
  ConnectionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectionResponse_descriptor_,
      ConnectionResponse::default_instance_,
      ConnectionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectionResponse));
  Version_descriptor_ = file->message_type(8);
  static const int Version_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, patch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, commit_),
  };
  Version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Version_descriptor_,
      Version::default_instance_,
      Version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Version));
  ConfigurationRequest_descriptor_ = file->message_type(9);
  static const int ConfigurationRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationRequest, requested_configuration_),
  };
  ConfigurationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigurationRequest_descriptor_,
      ConfigurationRequest::default_instance_,
      ConfigurationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigurationRequest));
  ConfigurationResponse_descriptor_ = file->message_type(10);
  static const int ConfigurationResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationResponse, current_configuration_),
  };
  ConfigurationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigurationResponse_descriptor_,
      ConfigurationResponse::default_instance_,
      ConfigurationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigurationResponse));
  Configuration_descriptor_ = file->message_type(11);
  static const int Configuration_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, max_file_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, min_buffer_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, use_agc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, bands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, rx_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, tx_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, search_configuration_),
  };
  Configuration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Configuration_descriptor_,
      Configuration::default_instance_,
      Configuration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Configuration));
  SearchConfiguration_descriptor_ = file->message_type(12);
  static const int SearchConfiguration_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfiguration, start_az_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfiguration, stop_az_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfiguration, start_el_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfiguration, stop_el_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfiguration, antenna_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfiguration, step_az_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfiguration, step_el_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfiguration, step_time_),
  };
  SearchConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchConfiguration_descriptor_,
      SearchConfiguration::default_instance_,
      SearchConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchConfiguration));
  Band_descriptor_ = file->message_type(13);
  static const int Band_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Band, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Band, start_freq_hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Band, stop_freq_hz_),
  };
  Band_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Band_descriptor_,
      Band::default_instance_,
      Band_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Band, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Band, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Band));
  Channel_descriptor_ = file->message_type(14);
  static const int Channel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, channel_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, sample_rate_sps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, bandwidth_hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, decimation_),
  };
  Channel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Channel_descriptor_,
      Channel::default_instance_,
      Channel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Channel));
  ErrorCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServiceInfrastructureCommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ack_descriptor_, &Ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NAck_descriptor_, &NAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandshakeTopic_descriptor_, &HandshakeTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartupNotification_descriptor_, &StartupNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShutDownNotification_descriptor_, &ShutDownNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectionRequest_descriptor_, &ConnectionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectionResponse_descriptor_, &ConnectionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Version_descriptor_, &Version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigurationRequest_descriptor_, &ConfigurationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigurationResponse_descriptor_, &ConfigurationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Configuration_descriptor_, &Configuration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchConfiguration_descriptor_, &SearchConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Band_descriptor_, &Band::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Channel_descriptor_, &Channel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServiceInfrastructureCommon_2eproto() {
  delete Header::default_instance_;
  delete Header_reflection_;
  delete Ack::default_instance_;
  delete Ack_reflection_;
  delete NAck::default_instance_;
  delete NAck_reflection_;
  delete HandshakeTopic::default_instance_;
  delete HandshakeTopic_reflection_;
  delete StartupNotification::default_instance_;
  delete StartupNotification_reflection_;
  delete ShutDownNotification::default_instance_;
  delete ShutDownNotification_reflection_;
  delete ConnectionRequest::default_instance_;
  delete ConnectionRequest_reflection_;
  delete ConnectionResponse::default_instance_;
  delete ConnectionResponse_reflection_;
  delete Version::default_instance_;
  delete Version_reflection_;
  delete Version::_default_date_;
  delete ConfigurationRequest::default_instance_;
  delete ConfigurationRequest_reflection_;
  delete ConfigurationResponse::default_instance_;
  delete ConfigurationResponse_reflection_;
  delete Configuration::default_instance_;
  delete Configuration_reflection_;
  delete SearchConfiguration::default_instance_;
  delete SearchConfiguration_reflection_;
  delete Band::default_instance_;
  delete Band_reflection_;
  delete Channel::default_instance_;
  delete Channel_reflection_;
}

void protobuf_AddDesc_ServiceInfrastructureCommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!ServiceInfrastructureCommon.proto\022\026ser"
    "vice_infrastructure\"W\n\006Header\022\027\n\017sequenc"
    "e_number\030\001 \001(\003\022\021\n\ttimestamp\030\002 \001(\t\022\013\n\003pid"
    "\030\003 \001(\005\022\024\n\nsensorName\030\004 \001(\t:\000\"\005\n\003Ack\"a\n\004N"
    "Ack\022>\n\nerror_code\030\002 \001(\0162!.service_infras"
    "tructure.ErrorCode:\007UNKNOWN\022\031\n\021error_des"
    "cription\030\003 \001(\t\"\332\004\n\016HandshakeTopic\022.\n\006hea"
    "der\030d \001(\0132\036.service_infrastructure.Heade"
    "r\022(\n\003ack\030\001 \001(\0132\033.service_infrastructure."
    "Ack\022*\n\004nack\030\002 \001(\0132\034.service_infrastructu"
    "re.NAck\022I\n\024startup_notification\030\003 \001(\0132+."
    "service_infrastructure.StartupNotificati"
    "on\022K\n\025shutdown_notification\030\004 \001(\0132,.serv"
    "ice_infrastructure.ShutDownNotification\022"
    "E\n\022connection_request\030\005 \001(\0132).service_in"
    "frastructure.ConnectionRequest\022G\n\023connec"
    "tion_response\030\006 \001(\0132*.service_infrastruc"
    "ture.ConnectionResponse\022K\n\025configuration"
    "_request\030\007 \001(\0132,.service_infrastructure."
    "ConfigurationRequest\022M\n\026configuration_re"
    "sponse\030\010 \001(\0132-.service_infrastructure.Co"
    "nfigurationResponse\"\025\n\023StartupNotificati"
    "on\"\026\n\024ShutDownNotification\"s\n\021Connection"
    "Request\0220\n\007release\030\001 \001(\0132\037.service_infra"
    "structure.Version\022,\n\003icd\030\002 \001(\0132\037.service"
    "_infrastructure.Version\"t\n\022ConnectionRes"
    "ponse\0220\n\007release\030\001 \001(\0132\037.service_infrast"
    "ructure.Version\022,\n\003icd\030\002 \001(\0132\037.service_i"
    "nfrastructure.Version\"g\n\007Version\022\021\n\005majo"
    "r\030\001 \001(\003:\002-1\022\021\n\005minor\030\002 \001(\003:\002-1\022\021\n\005patch\030"
    "\003 \001(\003:\002-1\022\023\n\004date\030\004 \001(\t:\0050-0-0\022\016\n\006commit"
    "\030\005 \001(\t\"^\n\024ConfigurationRequest\022F\n\027reques"
    "ted_configuration\030\001 \001(\0132%.service_infras"
    "tructure.Configuration\"]\n\025ConfigurationR"
    "esponse\022D\n\025current_configuration\030\001 \001(\0132%"
    ".service_infrastructure.Configuration\"\277\002"
    "\n\rConfiguration\022\031\n\021max_file_duration\030\001 \001"
    "(\003\022\030\n\020min_buffer_depth\030\002 \001(\003\022\025\n\007use_agc\030"
    "\003 \001(\010:\004true\022+\n\005bands\030\004 \003(\0132\034.service_inf"
    "rastructure.Band\0224\n\013rx_channels\030\005 \003(\0132\037."
    "service_infrastructure.Channel\0224\n\013tx_cha"
    "nnels\030\006 \003(\0132\037.service_infrastructure.Cha"
    "nnel\022I\n\024search_configuration\030\007 \003(\0132+.ser"
    "vice_infrastructure.SearchConfiguration\""
    "\241\001\n\023SearchConfiguration\022\020\n\010start_az\030\001 \001("
    "\002\022\017\n\007stop_az\030\002 \001(\002\022\020\n\010start_el\030\003 \001(\002\022\017\n\007"
    "stop_el\030\004 \001(\002\022\017\n\007antenna\030\005 \001(\005\022\017\n\007step_a"
    "z\030\006 \001(\002\022\017\n\007step_el\030\007 \001(\002\022\021\n\tstep_time\030\010 "
    "\001(\002\"B\n\004Band\022\r\n\005label\030\001 \001(\t\022\025\n\rstart_freq"
    "_hz\030\002 \001(\001\022\024\n\014stop_freq_hz\030\003 \001(\001\"d\n\007Chann"
    "el\022\026\n\016channel_number\030\001 \001(\005\022\027\n\017sample_rat"
    "e_sps\030\002 \001(\001\022\024\n\014bandwidth_hz\030\003 \001(\001\022\022\n\ndec"
    "imation\030\004 \001(\001*\312\001\n\tErrorCode\022\013\n\007UNKNOWN\020\000"
    "\022\030\n\024INCOMPATIBLE_RELEASE\020\001\022\024\n\020INCOMPATIB"
    "LE_ICD\020\002\022\036\n\032INCOMPATIBLE_CONFIGURATION\020\003"
    "\022\022\n\016UNKNOWN_SIGNAL\020d\022\030\n\024INVALID_SIGNAL_S"
    "TATE\020e\022\032\n\026NO_AVAILABLE_RESOURCES\020f\022\026\n\022UN"
    "SUPPORTED_SIGNAL\020gB\025\n\023fv.protos.kepsviso"
    "r", 2321);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServiceInfrastructureCommon.proto", &protobuf_RegisterTypes);
  Header::default_instance_ = new Header();
  Ack::default_instance_ = new Ack();
  NAck::default_instance_ = new NAck();
  HandshakeTopic::default_instance_ = new HandshakeTopic();
  StartupNotification::default_instance_ = new StartupNotification();
  ShutDownNotification::default_instance_ = new ShutDownNotification();
  ConnectionRequest::default_instance_ = new ConnectionRequest();
  ConnectionResponse::default_instance_ = new ConnectionResponse();
  Version::_default_date_ =
      new ::std::string("0-0-0", 5);
  Version::default_instance_ = new Version();
  ConfigurationRequest::default_instance_ = new ConfigurationRequest();
  ConfigurationResponse::default_instance_ = new ConfigurationResponse();
  Configuration::default_instance_ = new Configuration();
  SearchConfiguration::default_instance_ = new SearchConfiguration();
  Band::default_instance_ = new Band();
  Channel::default_instance_ = new Channel();
  Header::default_instance_->InitAsDefaultInstance();
  Ack::default_instance_->InitAsDefaultInstance();
  NAck::default_instance_->InitAsDefaultInstance();
  HandshakeTopic::default_instance_->InitAsDefaultInstance();
  StartupNotification::default_instance_->InitAsDefaultInstance();
  ShutDownNotification::default_instance_->InitAsDefaultInstance();
  ConnectionRequest::default_instance_->InitAsDefaultInstance();
  ConnectionResponse::default_instance_->InitAsDefaultInstance();
  Version::default_instance_->InitAsDefaultInstance();
  ConfigurationRequest::default_instance_->InitAsDefaultInstance();
  ConfigurationResponse::default_instance_->InitAsDefaultInstance();
  Configuration::default_instance_->InitAsDefaultInstance();
  SearchConfiguration::default_instance_->InitAsDefaultInstance();
  Band::default_instance_->InitAsDefaultInstance();
  Channel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServiceInfrastructureCommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServiceInfrastructureCommon_2eproto {
  StaticDescriptorInitializer_ServiceInfrastructureCommon_2eproto() {
    protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  }
} static_descriptor_initializer_ServiceInfrastructureCommon_2eproto_;
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCode_descriptor_;
}
bool ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 100:
    case 101:
    case 102:
    case 103:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Header::kSequenceNumberFieldNumber;
const int Header::kTimestampFieldNumber;
const int Header::kPidFieldNumber;
const int Header::kSensorNameFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header::InitAsDefaultInstance() {
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  sequence_number_ = GOOGLE_LONGLONG(0);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pid_ = 0;
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  SharedDtor();
}

void Header::SharedDtor() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sequence_number_ = GOOGLE_LONGLONG(0);
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    pid_ = 0;
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 sequence_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pid;
        break;
      }

      // optional int32 pid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 sequence_number = 1;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sequence_number(), output);
  }

  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->timestamp(), output);
  }

  // optional int32 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
  }

  // optional string sensorName = 4 [default = ""];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sensorname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 sequence_number = 1;
  if (has_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sequence_number(), target);
  }

  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }

  // optional int32 pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pid(), target);
  }

  // optional string sensorName = 4 [default = ""];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sensorname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 sequence_number = 1;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence_number());
    }

    // optional string timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional int32 pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional string sensorName = 4 [default = ""];
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {

  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    std::swap(sequence_number_, other->sequence_number_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(pid_, other->pid_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Ack::Ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ack::InitAsDefaultInstance() {
}

Ack::Ack(const Ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ack::~Ack() {
  SharedDtor();
}

void Ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ack_descriptor_;
}

const Ack& Ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  return *default_instance_;
}

Ack* Ack::default_instance_ = NULL;

Ack* Ack::New() const {
  return new Ack;
}

void Ack::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ack::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ack::MergeFrom(const Ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ack::CopyFrom(const Ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ack::IsInitialized() const {

  return true;
}

void Ack::Swap(Ack* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ack_descriptor_;
  metadata.reflection = Ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NAck::kErrorCodeFieldNumber;
const int NAck::kErrorDescriptionFieldNumber;
#endif  // !_MSC_VER

NAck::NAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NAck::InitAsDefaultInstance() {
}

NAck::NAck(const NAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NAck::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  error_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NAck::~NAck() {
  SharedDtor();
}

void NAck::SharedDtor() {
  if (error_description_ != &::google::protobuf::internal::kEmptyString) {
    delete error_description_;
  }
  if (this != default_instance_) {
  }
}

void NAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NAck_descriptor_;
}

const NAck& NAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  return *default_instance_;
}

NAck* NAck::default_instance_ = NULL;

NAck* NAck::New() const {
  return new NAck;
}

void NAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_error_description()) {
      if (error_description_ != &::google::protobuf::internal::kEmptyString) {
        error_description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_infrastructure.ErrorCode error_code = 2 [default = UNKNOWN];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::service_infrastructure::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::service_infrastructure::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_error_description;
        break;
      }

      // optional string error_description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_description().data(), this->error_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .service_infrastructure.ErrorCode error_code = 2 [default = UNKNOWN];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }

  // optional string error_description = 3;
  if (has_error_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_description().data(), this->error_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->error_description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .service_infrastructure.ErrorCode error_code = 2 [default = UNKNOWN];
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }

  // optional string error_description = 3;
  if (has_error_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_description().data(), this->error_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.ErrorCode error_code = 2 [default = UNKNOWN];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional string error_description = 3;
    if (has_error_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NAck::MergeFrom(const NAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_error_description()) {
      set_error_description(from.error_description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NAck::CopyFrom(const NAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NAck::IsInitialized() const {

  return true;
}

void NAck::Swap(NAck* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(error_description_, other->error_description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NAck_descriptor_;
  metadata.reflection = NAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandshakeTopic::kHeaderFieldNumber;
const int HandshakeTopic::kAckFieldNumber;
const int HandshakeTopic::kNackFieldNumber;
const int HandshakeTopic::kStartupNotificationFieldNumber;
const int HandshakeTopic::kShutdownNotificationFieldNumber;
const int HandshakeTopic::kConnectionRequestFieldNumber;
const int HandshakeTopic::kConnectionResponseFieldNumber;
const int HandshakeTopic::kConfigurationRequestFieldNumber;
const int HandshakeTopic::kConfigurationResponseFieldNumber;
#endif  // !_MSC_VER

HandshakeTopic::HandshakeTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandshakeTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  ack_ = const_cast< ::service_infrastructure::Ack*>(&::service_infrastructure::Ack::default_instance());
  nack_ = const_cast< ::service_infrastructure::NAck*>(&::service_infrastructure::NAck::default_instance());
  startup_notification_ = const_cast< ::service_infrastructure::StartupNotification*>(&::service_infrastructure::StartupNotification::default_instance());
  shutdown_notification_ = const_cast< ::service_infrastructure::ShutDownNotification*>(&::service_infrastructure::ShutDownNotification::default_instance());
  connection_request_ = const_cast< ::service_infrastructure::ConnectionRequest*>(&::service_infrastructure::ConnectionRequest::default_instance());
  connection_response_ = const_cast< ::service_infrastructure::ConnectionResponse*>(&::service_infrastructure::ConnectionResponse::default_instance());
  configuration_request_ = const_cast< ::service_infrastructure::ConfigurationRequest*>(&::service_infrastructure::ConfigurationRequest::default_instance());
  configuration_response_ = const_cast< ::service_infrastructure::ConfigurationResponse*>(&::service_infrastructure::ConfigurationResponse::default_instance());
}

HandshakeTopic::HandshakeTopic(const HandshakeTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandshakeTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ack_ = NULL;
  nack_ = NULL;
  startup_notification_ = NULL;
  shutdown_notification_ = NULL;
  connection_request_ = NULL;
  connection_response_ = NULL;
  configuration_request_ = NULL;
  configuration_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandshakeTopic::~HandshakeTopic() {
  SharedDtor();
}

void HandshakeTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete ack_;
    delete nack_;
    delete startup_notification_;
    delete shutdown_notification_;
    delete connection_request_;
    delete connection_response_;
    delete configuration_request_;
    delete configuration_response_;
  }
}

void HandshakeTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandshakeTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandshakeTopic_descriptor_;
}

const HandshakeTopic& HandshakeTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  return *default_instance_;
}

HandshakeTopic* HandshakeTopic::default_instance_ = NULL;

HandshakeTopic* HandshakeTopic::New() const {
  return new HandshakeTopic;
}

void HandshakeTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_ack()) {
      if (ack_ != NULL) ack_->::service_infrastructure::Ack::Clear();
    }
    if (has_nack()) {
      if (nack_ != NULL) nack_->::service_infrastructure::NAck::Clear();
    }
    if (has_startup_notification()) {
      if (startup_notification_ != NULL) startup_notification_->::service_infrastructure::StartupNotification::Clear();
    }
    if (has_shutdown_notification()) {
      if (shutdown_notification_ != NULL) shutdown_notification_->::service_infrastructure::ShutDownNotification::Clear();
    }
    if (has_connection_request()) {
      if (connection_request_ != NULL) connection_request_->::service_infrastructure::ConnectionRequest::Clear();
    }
    if (has_connection_response()) {
      if (connection_response_ != NULL) connection_response_->::service_infrastructure::ConnectionResponse::Clear();
    }
    if (has_configuration_request()) {
      if (configuration_request_ != NULL) configuration_request_->::service_infrastructure::ConfigurationRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_configuration_response()) {
      if (configuration_response_ != NULL) configuration_response_->::service_infrastructure::ConfigurationResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandshakeTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_infrastructure.Ack ack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nack;
        break;
      }

      // optional .service_infrastructure.NAck nack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_startup_notification;
        break;
      }

      // optional .service_infrastructure.StartupNotification startup_notification = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startup_notification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startup_notification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_shutdown_notification;
        break;
      }

      // optional .service_infrastructure.ShutDownNotification shutdown_notification = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shutdown_notification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shutdown_notification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_connection_request;
        break;
      }

      // optional .service_infrastructure.ConnectionRequest connection_request = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connection_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_connection_response;
        break;
      }

      // optional .service_infrastructure.ConnectionResponse connection_response = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connection_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_configuration_request;
        break;
      }

      // optional .service_infrastructure.ConfigurationRequest configuration_request = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configuration_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configuration_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_configuration_response;
        break;
      }

      // optional .service_infrastructure.ConfigurationResponse configuration_response = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configuration_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configuration_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandshakeTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .service_infrastructure.Ack ack = 1;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ack(), output);
  }

  // optional .service_infrastructure.NAck nack = 2;
  if (has_nack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nack(), output);
  }

  // optional .service_infrastructure.StartupNotification startup_notification = 3;
  if (has_startup_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->startup_notification(), output);
  }

  // optional .service_infrastructure.ShutDownNotification shutdown_notification = 4;
  if (has_shutdown_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->shutdown_notification(), output);
  }

  // optional .service_infrastructure.ConnectionRequest connection_request = 5;
  if (has_connection_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->connection_request(), output);
  }

  // optional .service_infrastructure.ConnectionResponse connection_response = 6;
  if (has_connection_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->connection_response(), output);
  }

  // optional .service_infrastructure.ConfigurationRequest configuration_request = 7;
  if (has_configuration_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->configuration_request(), output);
  }

  // optional .service_infrastructure.ConfigurationResponse configuration_response = 8;
  if (has_configuration_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->configuration_response(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandshakeTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .service_infrastructure.Ack ack = 1;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ack(), target);
  }

  // optional .service_infrastructure.NAck nack = 2;
  if (has_nack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nack(), target);
  }

  // optional .service_infrastructure.StartupNotification startup_notification = 3;
  if (has_startup_notification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->startup_notification(), target);
  }

  // optional .service_infrastructure.ShutDownNotification shutdown_notification = 4;
  if (has_shutdown_notification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->shutdown_notification(), target);
  }

  // optional .service_infrastructure.ConnectionRequest connection_request = 5;
  if (has_connection_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->connection_request(), target);
  }

  // optional .service_infrastructure.ConnectionResponse connection_response = 6;
  if (has_connection_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->connection_response(), target);
  }

  // optional .service_infrastructure.ConfigurationRequest configuration_request = 7;
  if (has_configuration_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->configuration_request(), target);
  }

  // optional .service_infrastructure.ConfigurationResponse configuration_response = 8;
  if (has_configuration_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->configuration_response(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandshakeTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .service_infrastructure.Ack ack = 1;
    if (has_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ack());
    }

    // optional .service_infrastructure.NAck nack = 2;
    if (has_nack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nack());
    }

    // optional .service_infrastructure.StartupNotification startup_notification = 3;
    if (has_startup_notification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startup_notification());
    }

    // optional .service_infrastructure.ShutDownNotification shutdown_notification = 4;
    if (has_shutdown_notification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shutdown_notification());
    }

    // optional .service_infrastructure.ConnectionRequest connection_request = 5;
    if (has_connection_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connection_request());
    }

    // optional .service_infrastructure.ConnectionResponse connection_response = 6;
    if (has_connection_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connection_response());
    }

    // optional .service_infrastructure.ConfigurationRequest configuration_request = 7;
    if (has_configuration_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configuration_request());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .service_infrastructure.ConfigurationResponse configuration_response = 8;
    if (has_configuration_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configuration_response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandshakeTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandshakeTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandshakeTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandshakeTopic::MergeFrom(const HandshakeTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_ack()) {
      mutable_ack()->::service_infrastructure::Ack::MergeFrom(from.ack());
    }
    if (from.has_nack()) {
      mutable_nack()->::service_infrastructure::NAck::MergeFrom(from.nack());
    }
    if (from.has_startup_notification()) {
      mutable_startup_notification()->::service_infrastructure::StartupNotification::MergeFrom(from.startup_notification());
    }
    if (from.has_shutdown_notification()) {
      mutable_shutdown_notification()->::service_infrastructure::ShutDownNotification::MergeFrom(from.shutdown_notification());
    }
    if (from.has_connection_request()) {
      mutable_connection_request()->::service_infrastructure::ConnectionRequest::MergeFrom(from.connection_request());
    }
    if (from.has_connection_response()) {
      mutable_connection_response()->::service_infrastructure::ConnectionResponse::MergeFrom(from.connection_response());
    }
    if (from.has_configuration_request()) {
      mutable_configuration_request()->::service_infrastructure::ConfigurationRequest::MergeFrom(from.configuration_request());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_configuration_response()) {
      mutable_configuration_response()->::service_infrastructure::ConfigurationResponse::MergeFrom(from.configuration_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandshakeTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandshakeTopic::CopyFrom(const HandshakeTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeTopic::IsInitialized() const {

  return true;
}

void HandshakeTopic::Swap(HandshakeTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ack_, other->ack_);
    std::swap(nack_, other->nack_);
    std::swap(startup_notification_, other->startup_notification_);
    std::swap(shutdown_notification_, other->shutdown_notification_);
    std::swap(connection_request_, other->connection_request_);
    std::swap(connection_response_, other->connection_response_);
    std::swap(configuration_request_, other->configuration_request_);
    std::swap(configuration_response_, other->configuration_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandshakeTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandshakeTopic_descriptor_;
  metadata.reflection = HandshakeTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StartupNotification::StartupNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartupNotification::InitAsDefaultInstance() {
}

StartupNotification::StartupNotification(const StartupNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartupNotification::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartupNotification::~StartupNotification() {
  SharedDtor();
}

void StartupNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartupNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartupNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartupNotification_descriptor_;
}

const StartupNotification& StartupNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  return *default_instance_;
}

StartupNotification* StartupNotification::default_instance_ = NULL;

StartupNotification* StartupNotification::New() const {
  return new StartupNotification;
}

void StartupNotification::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartupNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void StartupNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartupNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartupNotification::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartupNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartupNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartupNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartupNotification::MergeFrom(const StartupNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartupNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartupNotification::CopyFrom(const StartupNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartupNotification::IsInitialized() const {

  return true;
}

void StartupNotification::Swap(StartupNotification* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartupNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartupNotification_descriptor_;
  metadata.reflection = StartupNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShutDownNotification::ShutDownNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShutDownNotification::InitAsDefaultInstance() {
}

ShutDownNotification::ShutDownNotification(const ShutDownNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShutDownNotification::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShutDownNotification::~ShutDownNotification() {
  SharedDtor();
}

void ShutDownNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShutDownNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutDownNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutDownNotification_descriptor_;
}

const ShutDownNotification& ShutDownNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  return *default_instance_;
}

ShutDownNotification* ShutDownNotification::default_instance_ = NULL;

ShutDownNotification* ShutDownNotification::New() const {
  return new ShutDownNotification;
}

void ShutDownNotification::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShutDownNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ShutDownNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShutDownNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShutDownNotification::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutDownNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShutDownNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShutDownNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutDownNotification::MergeFrom(const ShutDownNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShutDownNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutDownNotification::CopyFrom(const ShutDownNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutDownNotification::IsInitialized() const {

  return true;
}

void ShutDownNotification::Swap(ShutDownNotification* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShutDownNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutDownNotification_descriptor_;
  metadata.reflection = ShutDownNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectionRequest::kReleaseFieldNumber;
const int ConnectionRequest::kIcdFieldNumber;
#endif  // !_MSC_VER

ConnectionRequest::ConnectionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectionRequest::InitAsDefaultInstance() {
  release_ = const_cast< ::service_infrastructure::Version*>(&::service_infrastructure::Version::default_instance());
  icd_ = const_cast< ::service_infrastructure::Version*>(&::service_infrastructure::Version::default_instance());
}

ConnectionRequest::ConnectionRequest(const ConnectionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectionRequest::SharedCtor() {
  _cached_size_ = 0;
  release_ = NULL;
  icd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionRequest::~ConnectionRequest() {
  SharedDtor();
}

void ConnectionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete release_;
    delete icd_;
  }
}

void ConnectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionRequest_descriptor_;
}

const ConnectionRequest& ConnectionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  return *default_instance_;
}

ConnectionRequest* ConnectionRequest::default_instance_ = NULL;

ConnectionRequest* ConnectionRequest::New() const {
  return new ConnectionRequest;
}

void ConnectionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_release()) {
      if (release_ != NULL) release_->::service_infrastructure::Version::Clear();
    }
    if (has_icd()) {
      if (icd_ != NULL) icd_->::service_infrastructure::Version::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_infrastructure.Version release = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_release()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_icd;
        break;
      }

      // optional .service_infrastructure.Version icd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_icd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .service_infrastructure.Version release = 1;
  if (has_release()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->release(), output);
  }

  // optional .service_infrastructure.Version icd = 2;
  if (has_icd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->icd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .service_infrastructure.Version release = 1;
  if (has_release()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->release(), target);
  }

  // optional .service_infrastructure.Version icd = 2;
  if (has_icd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->icd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Version release = 1;
    if (has_release()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->release());
    }

    // optional .service_infrastructure.Version icd = 2;
    if (has_icd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->icd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionRequest::MergeFrom(const ConnectionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_release()) {
      mutable_release()->::service_infrastructure::Version::MergeFrom(from.release());
    }
    if (from.has_icd()) {
      mutable_icd()->::service_infrastructure::Version::MergeFrom(from.icd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionRequest::CopyFrom(const ConnectionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionRequest::IsInitialized() const {

  return true;
}

void ConnectionRequest::Swap(ConnectionRequest* other) {
  if (other != this) {
    std::swap(release_, other->release_);
    std::swap(icd_, other->icd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionRequest_descriptor_;
  metadata.reflection = ConnectionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectionResponse::kReleaseFieldNumber;
const int ConnectionResponse::kIcdFieldNumber;
#endif  // !_MSC_VER

ConnectionResponse::ConnectionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectionResponse::InitAsDefaultInstance() {
  release_ = const_cast< ::service_infrastructure::Version*>(&::service_infrastructure::Version::default_instance());
  icd_ = const_cast< ::service_infrastructure::Version*>(&::service_infrastructure::Version::default_instance());
}

ConnectionResponse::ConnectionResponse(const ConnectionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectionResponse::SharedCtor() {
  _cached_size_ = 0;
  release_ = NULL;
  icd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionResponse::~ConnectionResponse() {
  SharedDtor();
}

void ConnectionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete release_;
    delete icd_;
  }
}

void ConnectionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionResponse_descriptor_;
}

const ConnectionResponse& ConnectionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  return *default_instance_;
}

ConnectionResponse* ConnectionResponse::default_instance_ = NULL;

ConnectionResponse* ConnectionResponse::New() const {
  return new ConnectionResponse;
}

void ConnectionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_release()) {
      if (release_ != NULL) release_->::service_infrastructure::Version::Clear();
    }
    if (has_icd()) {
      if (icd_ != NULL) icd_->::service_infrastructure::Version::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_infrastructure.Version release = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_release()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_icd;
        break;
      }

      // optional .service_infrastructure.Version icd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_icd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .service_infrastructure.Version release = 1;
  if (has_release()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->release(), output);
  }

  // optional .service_infrastructure.Version icd = 2;
  if (has_icd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->icd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .service_infrastructure.Version release = 1;
  if (has_release()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->release(), target);
  }

  // optional .service_infrastructure.Version icd = 2;
  if (has_icd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->icd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Version release = 1;
    if (has_release()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->release());
    }

    // optional .service_infrastructure.Version icd = 2;
    if (has_icd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->icd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionResponse::MergeFrom(const ConnectionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_release()) {
      mutable_release()->::service_infrastructure::Version::MergeFrom(from.release());
    }
    if (from.has_icd()) {
      mutable_icd()->::service_infrastructure::Version::MergeFrom(from.icd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionResponse::CopyFrom(const ConnectionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionResponse::IsInitialized() const {

  return true;
}

void ConnectionResponse::Swap(ConnectionResponse* other) {
  if (other != this) {
    std::swap(release_, other->release_);
    std::swap(icd_, other->icd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionResponse_descriptor_;
  metadata.reflection = ConnectionResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Version::_default_date_ = NULL;
#ifndef _MSC_VER
const int Version::kMajorFieldNumber;
const int Version::kMinorFieldNumber;
const int Version::kPatchFieldNumber;
const int Version::kDateFieldNumber;
const int Version::kCommitFieldNumber;
#endif  // !_MSC_VER

Version::Version()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Version::InitAsDefaultInstance() {
}

Version::Version(const Version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Version::SharedCtor() {
  _cached_size_ = 0;
  major_ = GOOGLE_LONGLONG(-1);
  minor_ = GOOGLE_LONGLONG(-1);
  patch_ = GOOGLE_LONGLONG(-1);
  date_ = const_cast< ::std::string*>(_default_date_);
  commit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Version::~Version() {
  SharedDtor();
}

void Version::SharedDtor() {
  if (date_ != _default_date_) {
    delete date_;
  }
  if (commit_ != &::google::protobuf::internal::kEmptyString) {
    delete commit_;
  }
  if (this != default_instance_) {
  }
}

void Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Version_descriptor_;
}

const Version& Version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  return *default_instance_;
}

Version* Version::default_instance_ = NULL;

Version* Version::New() const {
  return new Version;
}

void Version::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    major_ = GOOGLE_LONGLONG(-1);
    minor_ = GOOGLE_LONGLONG(-1);
    patch_ = GOOGLE_LONGLONG(-1);
    if (has_date()) {
      if (date_ != _default_date_) {
        date_->assign(*_default_date_);
      }
    }
    if (has_commit()) {
      if (commit_ != &::google::protobuf::internal::kEmptyString) {
        commit_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 major = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &major_)));
          set_has_major();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minor;
        break;
      }

      // optional int64 minor = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minor_)));
          set_has_minor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_patch;
        break;
      }

      // optional int64 patch = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &patch_)));
          set_has_patch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_date;
        break;
      }

      // optional string date = 4 [default = "0-0-0"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_commit;
        break;
      }

      // optional string commit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commit().data(), this->commit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 major = 1 [default = -1];
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->major(), output);
  }

  // optional int64 minor = 2 [default = -1];
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->minor(), output);
  }

  // optional int64 patch = 3 [default = -1];
  if (has_patch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->patch(), output);
  }

  // optional string date = 4 [default = "0-0-0"];
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->date(), output);
  }

  // optional string commit = 5;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commit().data(), this->commit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->commit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 major = 1 [default = -1];
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->major(), target);
  }

  // optional int64 minor = 2 [default = -1];
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->minor(), target);
  }

  // optional int64 patch = 3 [default = -1];
  if (has_patch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->patch(), target);
  }

  // optional string date = 4 [default = "0-0-0"];
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->date(), target);
  }

  // optional string commit = 5;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commit().data(), this->commit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->commit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Version::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 major = 1 [default = -1];
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->major());
    }

    // optional int64 minor = 2 [default = -1];
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->minor());
    }

    // optional int64 patch = 3 [default = -1];
    if (has_patch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->patch());
    }

    // optional string date = 4 [default = "0-0-0"];
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string commit = 5;
    if (has_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
    if (from.has_patch()) {
      set_patch(from.patch());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_commit()) {
      set_commit(from.commit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {

  return true;
}

void Version::Swap(Version* other) {
  if (other != this) {
    std::swap(major_, other->major_);
    std::swap(minor_, other->minor_);
    std::swap(patch_, other->patch_);
    std::swap(date_, other->date_);
    std::swap(commit_, other->commit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Version_descriptor_;
  metadata.reflection = Version_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigurationRequest::kRequestedConfigurationFieldNumber;
#endif  // !_MSC_VER

ConfigurationRequest::ConfigurationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConfigurationRequest::InitAsDefaultInstance() {
  requested_configuration_ = const_cast< ::service_infrastructure::Configuration*>(&::service_infrastructure::Configuration::default_instance());
}

ConfigurationRequest::ConfigurationRequest(const ConfigurationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConfigurationRequest::SharedCtor() {
  _cached_size_ = 0;
  requested_configuration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigurationRequest::~ConfigurationRequest() {
  SharedDtor();
}

void ConfigurationRequest::SharedDtor() {
  if (this != default_instance_) {
    delete requested_configuration_;
  }
}

void ConfigurationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigurationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigurationRequest_descriptor_;
}

const ConfigurationRequest& ConfigurationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  return *default_instance_;
}

ConfigurationRequest* ConfigurationRequest::default_instance_ = NULL;

ConfigurationRequest* ConfigurationRequest::New() const {
  return new ConfigurationRequest;
}

void ConfigurationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_requested_configuration()) {
      if (requested_configuration_ != NULL) requested_configuration_->::service_infrastructure::Configuration::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigurationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_infrastructure.Configuration requested_configuration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requested_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfigurationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .service_infrastructure.Configuration requested_configuration = 1;
  if (has_requested_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requested_configuration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConfigurationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .service_infrastructure.Configuration requested_configuration = 1;
  if (has_requested_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requested_configuration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConfigurationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Configuration requested_configuration = 1;
    if (has_requested_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requested_configuration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigurationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigurationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigurationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigurationRequest::MergeFrom(const ConfigurationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requested_configuration()) {
      mutable_requested_configuration()->::service_infrastructure::Configuration::MergeFrom(from.requested_configuration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigurationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationRequest::CopyFrom(const ConfigurationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationRequest::IsInitialized() const {

  return true;
}

void ConfigurationRequest::Swap(ConfigurationRequest* other) {
  if (other != this) {
    std::swap(requested_configuration_, other->requested_configuration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigurationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigurationRequest_descriptor_;
  metadata.reflection = ConfigurationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigurationResponse::kCurrentConfigurationFieldNumber;
#endif  // !_MSC_VER

ConfigurationResponse::ConfigurationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConfigurationResponse::InitAsDefaultInstance() {
  current_configuration_ = const_cast< ::service_infrastructure::Configuration*>(&::service_infrastructure::Configuration::default_instance());
}

ConfigurationResponse::ConfigurationResponse(const ConfigurationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConfigurationResponse::SharedCtor() {
  _cached_size_ = 0;
  current_configuration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigurationResponse::~ConfigurationResponse() {
  SharedDtor();
}

void ConfigurationResponse::SharedDtor() {
  if (this != default_instance_) {
    delete current_configuration_;
  }
}

void ConfigurationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigurationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigurationResponse_descriptor_;
}

const ConfigurationResponse& ConfigurationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  return *default_instance_;
}

ConfigurationResponse* ConfigurationResponse::default_instance_ = NULL;

ConfigurationResponse* ConfigurationResponse::New() const {
  return new ConfigurationResponse;
}

void ConfigurationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_current_configuration()) {
      if (current_configuration_ != NULL) current_configuration_->::service_infrastructure::Configuration::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigurationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_infrastructure.Configuration current_configuration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfigurationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .service_infrastructure.Configuration current_configuration = 1;
  if (has_current_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->current_configuration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConfigurationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .service_infrastructure.Configuration current_configuration = 1;
  if (has_current_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->current_configuration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConfigurationResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Configuration current_configuration = 1;
    if (has_current_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->current_configuration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigurationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigurationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigurationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigurationResponse::MergeFrom(const ConfigurationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_configuration()) {
      mutable_current_configuration()->::service_infrastructure::Configuration::MergeFrom(from.current_configuration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigurationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationResponse::CopyFrom(const ConfigurationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationResponse::IsInitialized() const {

  return true;
}

void ConfigurationResponse::Swap(ConfigurationResponse* other) {
  if (other != this) {
    std::swap(current_configuration_, other->current_configuration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigurationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigurationResponse_descriptor_;
  metadata.reflection = ConfigurationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Configuration::kMaxFileDurationFieldNumber;
const int Configuration::kMinBufferDepthFieldNumber;
const int Configuration::kUseAgcFieldNumber;
const int Configuration::kBandsFieldNumber;
const int Configuration::kRxChannelsFieldNumber;
const int Configuration::kTxChannelsFieldNumber;
const int Configuration::kSearchConfigurationFieldNumber;
#endif  // !_MSC_VER

Configuration::Configuration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Configuration::InitAsDefaultInstance() {
}

Configuration::Configuration(const Configuration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Configuration::SharedCtor() {
  _cached_size_ = 0;
  max_file_duration_ = GOOGLE_LONGLONG(0);
  min_buffer_depth_ = GOOGLE_LONGLONG(0);
  use_agc_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Configuration::~Configuration() {
  SharedDtor();
}

void Configuration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Configuration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Configuration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Configuration_descriptor_;
}

const Configuration& Configuration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  return *default_instance_;
}

Configuration* Configuration::default_instance_ = NULL;

Configuration* Configuration::New() const {
  return new Configuration;
}

void Configuration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_file_duration_ = GOOGLE_LONGLONG(0);
    min_buffer_depth_ = GOOGLE_LONGLONG(0);
    use_agc_ = true;
  }
  bands_.Clear();
  rx_channels_.Clear();
  tx_channels_.Clear();
  search_configuration_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Configuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 max_file_duration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_file_duration_)));
          set_has_max_file_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_min_buffer_depth;
        break;
      }

      // optional int64 min_buffer_depth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_buffer_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_buffer_depth_)));
          set_has_min_buffer_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_use_agc;
        break;
      }

      // optional bool use_agc = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_agc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_agc_)));
          set_has_use_agc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bands;
        break;
      }

      // repeated .service_infrastructure.Band bands = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bands;
        if (input->ExpectTag(42)) goto parse_rx_channels;
        break;
      }

      // repeated .service_infrastructure.Channel rx_channels = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rx_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rx_channels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rx_channels;
        if (input->ExpectTag(50)) goto parse_tx_channels;
        break;
      }

      // repeated .service_infrastructure.Channel tx_channels = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tx_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tx_channels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tx_channels;
        if (input->ExpectTag(58)) goto parse_search_configuration;
        break;
      }

      // repeated .service_infrastructure.SearchConfiguration search_configuration = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_search_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_search_configuration;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Configuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 max_file_duration = 1;
  if (has_max_file_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->max_file_duration(), output);
  }

  // optional int64 min_buffer_depth = 2;
  if (has_min_buffer_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->min_buffer_depth(), output);
  }

  // optional bool use_agc = 3 [default = true];
  if (has_use_agc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_agc(), output);
  }

  // repeated .service_infrastructure.Band bands = 4;
  for (int i = 0; i < this->bands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bands(i), output);
  }

  // repeated .service_infrastructure.Channel rx_channels = 5;
  for (int i = 0; i < this->rx_channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rx_channels(i), output);
  }

  // repeated .service_infrastructure.Channel tx_channels = 6;
  for (int i = 0; i < this->tx_channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tx_channels(i), output);
  }

  // repeated .service_infrastructure.SearchConfiguration search_configuration = 7;
  for (int i = 0; i < this->search_configuration_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->search_configuration(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Configuration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 max_file_duration = 1;
  if (has_max_file_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->max_file_duration(), target);
  }

  // optional int64 min_buffer_depth = 2;
  if (has_min_buffer_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->min_buffer_depth(), target);
  }

  // optional bool use_agc = 3 [default = true];
  if (has_use_agc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_agc(), target);
  }

  // repeated .service_infrastructure.Band bands = 4;
  for (int i = 0; i < this->bands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bands(i), target);
  }

  // repeated .service_infrastructure.Channel rx_channels = 5;
  for (int i = 0; i < this->rx_channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rx_channels(i), target);
  }

  // repeated .service_infrastructure.Channel tx_channels = 6;
  for (int i = 0; i < this->tx_channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tx_channels(i), target);
  }

  // repeated .service_infrastructure.SearchConfiguration search_configuration = 7;
  for (int i = 0; i < this->search_configuration_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->search_configuration(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Configuration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 max_file_duration = 1;
    if (has_max_file_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_file_duration());
    }

    // optional int64 min_buffer_depth = 2;
    if (has_min_buffer_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min_buffer_depth());
    }

    // optional bool use_agc = 3 [default = true];
    if (has_use_agc()) {
      total_size += 1 + 1;
    }

  }
  // repeated .service_infrastructure.Band bands = 4;
  total_size += 1 * this->bands_size();
  for (int i = 0; i < this->bands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bands(i));
  }

  // repeated .service_infrastructure.Channel rx_channels = 5;
  total_size += 1 * this->rx_channels_size();
  for (int i = 0; i < this->rx_channels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rx_channels(i));
  }

  // repeated .service_infrastructure.Channel tx_channels = 6;
  total_size += 1 * this->tx_channels_size();
  for (int i = 0; i < this->tx_channels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tx_channels(i));
  }

  // repeated .service_infrastructure.SearchConfiguration search_configuration = 7;
  total_size += 1 * this->search_configuration_size();
  for (int i = 0; i < this->search_configuration_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_configuration(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Configuration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Configuration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Configuration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Configuration::MergeFrom(const Configuration& from) {
  GOOGLE_CHECK_NE(&from, this);
  bands_.MergeFrom(from.bands_);
  rx_channels_.MergeFrom(from.rx_channels_);
  tx_channels_.MergeFrom(from.tx_channels_);
  search_configuration_.MergeFrom(from.search_configuration_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_file_duration()) {
      set_max_file_duration(from.max_file_duration());
    }
    if (from.has_min_buffer_depth()) {
      set_min_buffer_depth(from.min_buffer_depth());
    }
    if (from.has_use_agc()) {
      set_use_agc(from.use_agc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Configuration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration::CopyFrom(const Configuration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {

  return true;
}

void Configuration::Swap(Configuration* other) {
  if (other != this) {
    std::swap(max_file_duration_, other->max_file_duration_);
    std::swap(min_buffer_depth_, other->min_buffer_depth_);
    std::swap(use_agc_, other->use_agc_);
    bands_.Swap(&other->bands_);
    rx_channels_.Swap(&other->rx_channels_);
    tx_channels_.Swap(&other->tx_channels_);
    search_configuration_.Swap(&other->search_configuration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Configuration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Configuration_descriptor_;
  metadata.reflection = Configuration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchConfiguration::kStartAzFieldNumber;
const int SearchConfiguration::kStopAzFieldNumber;
const int SearchConfiguration::kStartElFieldNumber;
const int SearchConfiguration::kStopElFieldNumber;
const int SearchConfiguration::kAntennaFieldNumber;
const int SearchConfiguration::kStepAzFieldNumber;
const int SearchConfiguration::kStepElFieldNumber;
const int SearchConfiguration::kStepTimeFieldNumber;
#endif  // !_MSC_VER

SearchConfiguration::SearchConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchConfiguration::InitAsDefaultInstance() {
}

SearchConfiguration::SearchConfiguration(const SearchConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchConfiguration::SharedCtor() {
  _cached_size_ = 0;
  start_az_ = 0;
  stop_az_ = 0;
  start_el_ = 0;
  stop_el_ = 0;
  antenna_ = 0;
  step_az_ = 0;
  step_el_ = 0;
  step_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchConfiguration::~SearchConfiguration() {
  SharedDtor();
}

void SearchConfiguration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchConfiguration_descriptor_;
}

const SearchConfiguration& SearchConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  return *default_instance_;
}

SearchConfiguration* SearchConfiguration::default_instance_ = NULL;

SearchConfiguration* SearchConfiguration::New() const {
  return new SearchConfiguration;
}

void SearchConfiguration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_az_ = 0;
    stop_az_ = 0;
    start_el_ = 0;
    stop_el_ = 0;
    antenna_ = 0;
    step_az_ = 0;
    step_el_ = 0;
    step_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float start_az = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_az_)));
          set_has_start_az();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_stop_az;
        break;
      }

      // optional float stop_az = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_stop_az:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stop_az_)));
          set_has_stop_az();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_start_el;
        break;
      }

      // optional float start_el = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_el:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_el_)));
          set_has_start_el();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_stop_el;
        break;
      }

      // optional float stop_el = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_stop_el:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stop_el_)));
          set_has_stop_el();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_antenna;
        break;
      }

      // optional int32 antenna = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_antenna:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &antenna_)));
          set_has_antenna();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_step_az;
        break;
      }

      // optional float step_az = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_step_az:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_az_)));
          set_has_step_az();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_step_el;
        break;
      }

      // optional float step_el = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_step_el:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_el_)));
          set_has_step_el();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_step_time;
        break;
      }

      // optional float step_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_step_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_time_)));
          set_has_step_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float start_az = 1;
  if (has_start_az()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->start_az(), output);
  }

  // optional float stop_az = 2;
  if (has_stop_az()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->stop_az(), output);
  }

  // optional float start_el = 3;
  if (has_start_el()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->start_el(), output);
  }

  // optional float stop_el = 4;
  if (has_stop_el()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->stop_el(), output);
  }

  // optional int32 antenna = 5;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->antenna(), output);
  }

  // optional float step_az = 6;
  if (has_step_az()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->step_az(), output);
  }

  // optional float step_el = 7;
  if (has_step_el()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->step_el(), output);
  }

  // optional float step_time = 8;
  if (has_step_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->step_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float start_az = 1;
  if (has_start_az()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->start_az(), target);
  }

  // optional float stop_az = 2;
  if (has_stop_az()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->stop_az(), target);
  }

  // optional float start_el = 3;
  if (has_start_el()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->start_el(), target);
  }

  // optional float stop_el = 4;
  if (has_stop_el()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->stop_el(), target);
  }

  // optional int32 antenna = 5;
  if (has_antenna()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->antenna(), target);
  }

  // optional float step_az = 6;
  if (has_step_az()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->step_az(), target);
  }

  // optional float step_el = 7;
  if (has_step_el()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->step_el(), target);
  }

  // optional float step_time = 8;
  if (has_step_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->step_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchConfiguration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float start_az = 1;
    if (has_start_az()) {
      total_size += 1 + 4;
    }

    // optional float stop_az = 2;
    if (has_stop_az()) {
      total_size += 1 + 4;
    }

    // optional float start_el = 3;
    if (has_start_el()) {
      total_size += 1 + 4;
    }

    // optional float stop_el = 4;
    if (has_stop_el()) {
      total_size += 1 + 4;
    }

    // optional int32 antenna = 5;
    if (has_antenna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->antenna());
    }

    // optional float step_az = 6;
    if (has_step_az()) {
      total_size += 1 + 4;
    }

    // optional float step_el = 7;
    if (has_step_el()) {
      total_size += 1 + 4;
    }

    // optional float step_time = 8;
    if (has_step_time()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchConfiguration::MergeFrom(const SearchConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_az()) {
      set_start_az(from.start_az());
    }
    if (from.has_stop_az()) {
      set_stop_az(from.stop_az());
    }
    if (from.has_start_el()) {
      set_start_el(from.start_el());
    }
    if (from.has_stop_el()) {
      set_stop_el(from.stop_el());
    }
    if (from.has_antenna()) {
      set_antenna(from.antenna());
    }
    if (from.has_step_az()) {
      set_step_az(from.step_az());
    }
    if (from.has_step_el()) {
      set_step_el(from.step_el());
    }
    if (from.has_step_time()) {
      set_step_time(from.step_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchConfiguration::CopyFrom(const SearchConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchConfiguration::IsInitialized() const {

  return true;
}

void SearchConfiguration::Swap(SearchConfiguration* other) {
  if (other != this) {
    std::swap(start_az_, other->start_az_);
    std::swap(stop_az_, other->stop_az_);
    std::swap(start_el_, other->start_el_);
    std::swap(stop_el_, other->stop_el_);
    std::swap(antenna_, other->antenna_);
    std::swap(step_az_, other->step_az_);
    std::swap(step_el_, other->step_el_);
    std::swap(step_time_, other->step_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchConfiguration_descriptor_;
  metadata.reflection = SearchConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Band::kLabelFieldNumber;
const int Band::kStartFreqHzFieldNumber;
const int Band::kStopFreqHzFieldNumber;
#endif  // !_MSC_VER

Band::Band()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Band::InitAsDefaultInstance() {
}

Band::Band(const Band& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Band::SharedCtor() {
  _cached_size_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_freq_hz_ = 0;
  stop_freq_hz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Band::~Band() {
  SharedDtor();
}

void Band::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void Band::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Band::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Band_descriptor_;
}

const Band& Band::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  return *default_instance_;
}

Band* Band::default_instance_ = NULL;

Band* Band::New() const {
  return new Band;
}

void Band::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
    start_freq_hz_ = 0;
    stop_freq_hz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Band::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_start_freq_hz;
        break;
      }

      // optional double start_freq_hz = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start_freq_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_freq_hz_)));
          set_has_start_freq_hz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_stop_freq_hz;
        break;
      }

      // optional double stop_freq_hz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stop_freq_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_freq_hz_)));
          set_has_stop_freq_hz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Band::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->label(), output);
  }

  // optional double start_freq_hz = 2;
  if (has_start_freq_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_freq_hz(), output);
  }

  // optional double stop_freq_hz = 3;
  if (has_stop_freq_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->stop_freq_hz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Band::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // optional double start_freq_hz = 2;
  if (has_start_freq_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_freq_hz(), target);
  }

  // optional double stop_freq_hz = 3;
  if (has_stop_freq_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->stop_freq_hz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Band::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional double start_freq_hz = 2;
    if (has_start_freq_hz()) {
      total_size += 1 + 8;
    }

    // optional double stop_freq_hz = 3;
    if (has_stop_freq_hz()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Band::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Band* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Band*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Band::MergeFrom(const Band& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_start_freq_hz()) {
      set_start_freq_hz(from.start_freq_hz());
    }
    if (from.has_stop_freq_hz()) {
      set_stop_freq_hz(from.stop_freq_hz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Band::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Band::CopyFrom(const Band& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Band::IsInitialized() const {

  return true;
}

void Band::Swap(Band* other) {
  if (other != this) {
    std::swap(label_, other->label_);
    std::swap(start_freq_hz_, other->start_freq_hz_);
    std::swap(stop_freq_hz_, other->stop_freq_hz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Band::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Band_descriptor_;
  metadata.reflection = Band_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Channel::kChannelNumberFieldNumber;
const int Channel::kSampleRateSpsFieldNumber;
const int Channel::kBandwidthHzFieldNumber;
const int Channel::kDecimationFieldNumber;
#endif  // !_MSC_VER

Channel::Channel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Channel::InitAsDefaultInstance() {
}

Channel::Channel(const Channel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Channel::SharedCtor() {
  _cached_size_ = 0;
  channel_number_ = 0;
  sample_rate_sps_ = 0;
  bandwidth_hz_ = 0;
  decimation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Channel::~Channel() {
  SharedDtor();
}

void Channel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Channel_descriptor_;
}

const Channel& Channel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  return *default_instance_;
}

Channel* Channel::default_instance_ = NULL;

Channel* Channel::New() const {
  return new Channel;
}

void Channel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_number_ = 0;
    sample_rate_sps_ = 0;
    bandwidth_hz_ = 0;
    decimation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channel_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_number_)));
          set_has_channel_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sample_rate_sps;
        break;
      }

      // optional double sample_rate_sps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sample_rate_sps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_rate_sps_)));
          set_has_sample_rate_sps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_bandwidth_hz;
        break;
      }

      // optional double bandwidth_hz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bandwidth_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bandwidth_hz_)));
          set_has_bandwidth_hz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_decimation;
        break;
      }

      // optional double decimation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_decimation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &decimation_)));
          set_has_decimation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 channel_number = 1;
  if (has_channel_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel_number(), output);
  }

  // optional double sample_rate_sps = 2;
  if (has_sample_rate_sps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sample_rate_sps(), output);
  }

  // optional double bandwidth_hz = 3;
  if (has_bandwidth_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->bandwidth_hz(), output);
  }

  // optional double decimation = 4;
  if (has_decimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->decimation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Channel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 channel_number = 1;
  if (has_channel_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel_number(), target);
  }

  // optional double sample_rate_sps = 2;
  if (has_sample_rate_sps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sample_rate_sps(), target);
  }

  // optional double bandwidth_hz = 3;
  if (has_bandwidth_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->bandwidth_hz(), target);
  }

  // optional double decimation = 4;
  if (has_decimation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->decimation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Channel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channel_number = 1;
    if (has_channel_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_number());
    }

    // optional double sample_rate_sps = 2;
    if (has_sample_rate_sps()) {
      total_size += 1 + 8;
    }

    // optional double bandwidth_hz = 3;
    if (has_bandwidth_hz()) {
      total_size += 1 + 8;
    }

    // optional double decimation = 4;
    if (has_decimation()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Channel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Channel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Channel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Channel::MergeFrom(const Channel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_number()) {
      set_channel_number(from.channel_number());
    }
    if (from.has_sample_rate_sps()) {
      set_sample_rate_sps(from.sample_rate_sps());
    }
    if (from.has_bandwidth_hz()) {
      set_bandwidth_hz(from.bandwidth_hz());
    }
    if (from.has_decimation()) {
      set_decimation(from.decimation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Channel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channel::CopyFrom(const Channel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {

  return true;
}

void Channel::Swap(Channel* other) {
  if (other != this) {
    std::swap(channel_number_, other->channel_number_);
    std::swap(sample_rate_sps_, other->sample_rate_sps_);
    std::swap(bandwidth_hz_, other->bandwidth_hz_);
    std::swap(decimation_, other->decimation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Channel_descriptor_;
  metadata.reflection = Channel_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_infrastructure

// @@protoc_insertion_point(global_scope)
