// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuroraMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AuroraMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fv {
namespace aurora {
namespace protos {
namespace AuroraProtos {

namespace {

const ::google::protobuf::Descriptor* NetworkLayout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkLayout_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuroraEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuroraEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWSDRCommandTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWSDRCommandTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWSDRRequestTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWSDRRequestTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWProcessorEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWProcessorEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWSDRStatusTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWSDRStatusTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuroraICDVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuroraICDVersion_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AuroraMessages_2eproto() {
  protobuf_AddDesc_AuroraMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AuroraMessages.proto");
  GOOGLE_CHECK(file != NULL);
  NetworkLayout_descriptor_ = file->message_type(0);
  static const int NetworkLayout_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, base_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, infrastructure_port_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, service_port_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, rx_vita49_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, tx_vita49_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, sub_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, pub_port_),
  };
  NetworkLayout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetworkLayout_descriptor_,
      NetworkLayout::default_instance_,
      NetworkLayout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetworkLayout));
  AuroraEnvelope_descriptor_ = file->message_type(1);
  static const int AuroraEnvelope_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuroraEnvelope, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuroraEnvelope, ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuroraEnvelope, nack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuroraEnvelope, handshake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuroraEnvelope, ew_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuroraEnvelope, product_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuroraEnvelope, ew_sdr_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuroraEnvelope, bit_test_request_),
  };
  AuroraEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuroraEnvelope_descriptor_,
      AuroraEnvelope::default_instance_,
      AuroraEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuroraEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuroraEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuroraEnvelope));
  EWSDRCommandTopic_descriptor_ = file->message_type(2);
  static const int EWSDRCommandTopic_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRCommandTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRCommandTopic, ew_sdr_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRCommandTopic, mission_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRCommandTopic, app_parameters_),
  };
  EWSDRCommandTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWSDRCommandTopic_descriptor_,
      EWSDRCommandTopic::default_instance_,
      EWSDRCommandTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRCommandTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRCommandTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWSDRCommandTopic));
  EWSDRRequestTopic_descriptor_ = file->message_type(3);
  static const int EWSDRRequestTopic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRRequestTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRRequestTopic, ew_sdr_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRRequestTopic, mission_mode_),
  };
  EWSDRRequestTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWSDRRequestTopic_descriptor_,
      EWSDRRequestTopic::default_instance_,
      EWSDRRequestTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRRequestTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRRequestTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWSDRRequestTopic));
  EWProcessorEnvelope_descriptor_ = file->message_type(4);
  static const int EWProcessorEnvelope_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWProcessorEnvelope, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWProcessorEnvelope, ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWProcessorEnvelope, nack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWProcessorEnvelope, handshake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWProcessorEnvelope, signal_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWProcessorEnvelope, ew_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWProcessorEnvelope, product_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWProcessorEnvelope, ew_sdr_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWProcessorEnvelope, bit_test_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWProcessorEnvelope, bit_status_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWProcessorEnvelope, bit_manifest_response_),
  };
  EWProcessorEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWProcessorEnvelope_descriptor_,
      EWProcessorEnvelope::default_instance_,
      EWProcessorEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWProcessorEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWProcessorEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWProcessorEnvelope));
  EWSDRStatusTopic_descriptor_ = file->message_type(5);
  static const int EWSDRStatusTopic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRStatusTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRStatusTopic, ew_sdr_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRStatusTopic, threat_status_),
  };
  EWSDRStatusTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWSDRStatusTopic_descriptor_,
      EWSDRStatusTopic::default_instance_,
      EWSDRStatusTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRStatusTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRStatusTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWSDRStatusTopic));
  AuroraICDVersion_descriptor_ = file->message_type(6);
  static const int AuroraICDVersion_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuroraICDVersion, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuroraICDVersion, minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuroraICDVersion, patch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuroraICDVersion, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuroraICDVersion, commit_),
  };
  AuroraICDVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuroraICDVersion_descriptor_,
      AuroraICDVersion::default_instance_,
      AuroraICDVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuroraICDVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuroraICDVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuroraICDVersion));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AuroraMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetworkLayout_descriptor_, &NetworkLayout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuroraEnvelope_descriptor_, &AuroraEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWSDRCommandTopic_descriptor_, &EWSDRCommandTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWSDRRequestTopic_descriptor_, &EWSDRRequestTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWProcessorEnvelope_descriptor_, &EWProcessorEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWSDRStatusTopic_descriptor_, &EWSDRStatusTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuroraICDVersion_descriptor_, &AuroraICDVersion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AuroraMessages_2eproto() {
  delete NetworkLayout::default_instance_;
  delete NetworkLayout_reflection_;
  delete AuroraEnvelope::default_instance_;
  delete AuroraEnvelope_reflection_;
  delete EWSDRCommandTopic::default_instance_;
  delete EWSDRCommandTopic_reflection_;
  delete EWSDRRequestTopic::default_instance_;
  delete EWSDRRequestTopic_reflection_;
  delete EWProcessorEnvelope::default_instance_;
  delete EWProcessorEnvelope_reflection_;
  delete EWSDRStatusTopic::default_instance_;
  delete EWSDRStatusTopic_reflection_;
  delete AuroraICDVersion::default_instance_;
  delete AuroraICDVersion_reflection_;
  delete AuroraICDVersion::_default_date_;
}

void protobuf_AddDesc_AuroraMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::fv::tb::protos::TBProtos::protobuf_AddDesc_ThunderbirdMessages_2eproto();
  ::service_infrastructure::protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  ::service_infrastructure::protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  ::bit_protos::protobuf_AddDesc_BitMessages_2eproto();
  ::com::srcinc::ngi::data::protobuf_AddDesc_BitStatusMessage_2eproto();
  ::com::srcinc::ngi::data::protobuf_AddDesc_BitManifestMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024AuroraMessages.proto\022\035fv.aurora.protos"
    ".AuroraProtos\032\031ThunderbirdMessages.proto"
    "\032!ServiceInfrastructureCommon.proto\032$Ser"
    "viceInfrastructureExclusive.proto\032\021BitMe"
    "ssages.proto\032\026BitStatusMessage.proto\032\030Bi"
    "tManifestMessage.proto\"\337\001\n\rNetworkLayout"
    "\022\027\n\tbase_port\030\001 \001(\003:\0048080\022&\n\032infrastruct"
    "ure_port_offset\030\002 \001(\003:\00217\022\037\n\023service_por"
    "t_offset\030\003 \001(\003:\00219\022\035\n\016rx_vita49_port\030\004 \001"
    "(\003:\00540003\022\035\n\016tx_vita49_port\030\005 \001(\003:\00540003"
    "\022\026\n\010sub_port\030\006 \001(\003:\0046686\022\026\n\010pub_port\030\007 \001"
    "(\003:\0045585\"\324\003\n\016AuroraEnvelope\022.\n\006header\030\001 "
    "\001(\0132\036.service_infrastructure.Header\022(\n\003a"
    "ck\030\002 \001(\0132\033.service_infrastructure.Ack\022*\n"
    "\004nack\030\003 \001(\0132\034.service_infrastructure.NAc"
    "k\0229\n\thandshake\030\004 \001(\0132&.service_infrastru"
    "cture.HandshakeTopic\022:\n\new_request\030\005 \001(\013"
    "2&.service_infrastructure.EWRequestTopic"
    "\022D\n\017product_request\030\006 \001(\0132+.service_infr"
    "astructure.ProductRequestTopic\022H\n\016ew_sdr"
    "_command\030\007 \001(\01320.fv.aurora.protos.Aurora"
    "Protos.EWSDRCommandTopic\0225\n\020bit_test_req"
    "uest\030\010 \001(\0132\033.bit_protos.BitRequestTopic\""
    "\373\001\n\021EWSDRCommandTopic\022.\n\006header\030d \001(\0132\036."
    "service_infrastructure.Header\022;\n\016ew_sdr_"
    "command\030\001 \001(\0132#.fv.tb.protos.TBProtos.EW"
    "SDRCommand\0228\n\014mission_mode\030\002 \001(\0132\".fv.tb"
    ".protos.TBProtos.MissionMode\022\?\n\016app_para"
    "meters\030\003 \001(\0132\'.fv.tb.protos.TBProtos.Set"
    "AppParameters\"\272\001\n\021EWSDRRequestTopic\022.\n\006h"
    "eader\030d \001(\0132\036.service_infrastructure.Hea"
    "der\022;\n\016ew_sdr_request\030\001 \001(\0132#.fv.tb.prot"
    "os.TBProtos.EWSDRRequest\0228\n\014mission_mode"
    "\030\002 \001(\0132\".fv.tb.protos.TBProtos.MissionMo"
    "de\"\245\005\n\023EWProcessorEnvelope\022.\n\006header\030\001 \001"
    "(\0132\036.service_infrastructure.Header\022(\n\003ac"
    "k\030\002 \001(\0132\033.service_infrastructure.Ack\022*\n\004"
    "nack\030\003 \001(\0132\034.service_infrastructure.NAck"
    "\0229\n\thandshake\030\004 \001(\0132&.service_infrastruc"
    "ture.HandshakeTopic\022>\n\014signal_event\030\005 \001("
    "\0132(.service_infrastructure.SignalEventTo"
    "pic\022<\n\013ew_response\030\006 \001(\0132\'.service_infra"
    "structure.EWResponseTopic\022F\n\020product_res"
    "ponse\030\007 \001(\0132,.service_infrastructure.Pro"
    "ductResponseTopic\022F\n\rew_sdr_status\030\010 \001(\013"
    "2/.fv.aurora.protos.AuroraProtos.EWSDRSt"
    "atusTopic\0227\n\021bit_test_response\030\t \001(\0132\034.b"
    "it_protos.BitResponseTopic\022@\n\023bit_status"
    "_response\030\n \001(\0132#.com.srcinc.ngi.data.Bi"
    "tStatusTopic\022D\n\025bit_manifest_response\030\013 "
    "\001(\0132%.com.srcinc.ngi.data.BitManifestTop"
    "ic\"\271\001\n\020EWSDRStatusTopic\022.\n\006header\030d \001(\0132"
    "\036.service_infrastructure.Header\0229\n\rew_sd"
    "r_status\030\001 \001(\0132\".fv.tb.protos.TBProtos.E"
    "WSDRStatus\022:\n\rthreat_status\030\002 \001(\0132#.fv.t"
    "b.protos.TBProtos.ThreatStatus\"r\n\020Aurora"
    "ICDVersion\022\020\n\005major\030\001 \001(\005:\0010\022\020\n\005minor\030\002 "
    "\001(\005:\0010\022\020\n\005patch\030\003 \001(\005:\0016\022\030\n\004date\030\004 \001(\t:\n"
    "2020-08-14\022\016\n\006commit\030\005 \001(\tB \n\020fv.aurora."
    "protosB\014AuroraProtos", 2380);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AuroraMessages.proto", &protobuf_RegisterTypes);
  NetworkLayout::default_instance_ = new NetworkLayout();
  AuroraEnvelope::default_instance_ = new AuroraEnvelope();
  EWSDRCommandTopic::default_instance_ = new EWSDRCommandTopic();
  EWSDRRequestTopic::default_instance_ = new EWSDRRequestTopic();
  EWProcessorEnvelope::default_instance_ = new EWProcessorEnvelope();
  EWSDRStatusTopic::default_instance_ = new EWSDRStatusTopic();
  AuroraICDVersion::_default_date_ =
      new ::std::string("2020-08-14", 10);
  AuroraICDVersion::default_instance_ = new AuroraICDVersion();
  NetworkLayout::default_instance_->InitAsDefaultInstance();
  AuroraEnvelope::default_instance_->InitAsDefaultInstance();
  EWSDRCommandTopic::default_instance_->InitAsDefaultInstance();
  EWSDRRequestTopic::default_instance_->InitAsDefaultInstance();
  EWProcessorEnvelope::default_instance_->InitAsDefaultInstance();
  EWSDRStatusTopic::default_instance_->InitAsDefaultInstance();
  AuroraICDVersion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AuroraMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AuroraMessages_2eproto {
  StaticDescriptorInitializer_AuroraMessages_2eproto() {
    protobuf_AddDesc_AuroraMessages_2eproto();
  }
} static_descriptor_initializer_AuroraMessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NetworkLayout::kBasePortFieldNumber;
const int NetworkLayout::kInfrastructurePortOffsetFieldNumber;
const int NetworkLayout::kServicePortOffsetFieldNumber;
const int NetworkLayout::kRxVita49PortFieldNumber;
const int NetworkLayout::kTxVita49PortFieldNumber;
const int NetworkLayout::kSubPortFieldNumber;
const int NetworkLayout::kPubPortFieldNumber;
#endif  // !_MSC_VER

NetworkLayout::NetworkLayout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetworkLayout::InitAsDefaultInstance() {
}

NetworkLayout::NetworkLayout(const NetworkLayout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetworkLayout::SharedCtor() {
  _cached_size_ = 0;
  base_port_ = GOOGLE_LONGLONG(8080);
  infrastructure_port_offset_ = GOOGLE_LONGLONG(17);
  service_port_offset_ = GOOGLE_LONGLONG(19);
  rx_vita49_port_ = GOOGLE_LONGLONG(40003);
  tx_vita49_port_ = GOOGLE_LONGLONG(40003);
  sub_port_ = GOOGLE_LONGLONG(6686);
  pub_port_ = GOOGLE_LONGLONG(5585);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkLayout::~NetworkLayout() {
  SharedDtor();
}

void NetworkLayout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetworkLayout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkLayout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkLayout_descriptor_;
}

const NetworkLayout& NetworkLayout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuroraMessages_2eproto();
  return *default_instance_;
}

NetworkLayout* NetworkLayout::default_instance_ = NULL;

NetworkLayout* NetworkLayout::New() const {
  return new NetworkLayout;
}

void NetworkLayout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    base_port_ = GOOGLE_LONGLONG(8080);
    infrastructure_port_offset_ = GOOGLE_LONGLONG(17);
    service_port_offset_ = GOOGLE_LONGLONG(19);
    rx_vita49_port_ = GOOGLE_LONGLONG(40003);
    tx_vita49_port_ = GOOGLE_LONGLONG(40003);
    sub_port_ = GOOGLE_LONGLONG(6686);
    pub_port_ = GOOGLE_LONGLONG(5585);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetworkLayout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 base_port = 1 [default = 8080];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &base_port_)));
          set_has_base_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_infrastructure_port_offset;
        break;
      }

      // optional int64 infrastructure_port_offset = 2 [default = 17];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_infrastructure_port_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &infrastructure_port_offset_)));
          set_has_infrastructure_port_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_service_port_offset;
        break;
      }

      // optional int64 service_port_offset = 3 [default = 19];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_port_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &service_port_offset_)));
          set_has_service_port_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rx_vita49_port;
        break;
      }

      // optional int64 rx_vita49_port = 4 [default = 40003];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rx_vita49_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rx_vita49_port_)));
          set_has_rx_vita49_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tx_vita49_port;
        break;
      }

      // optional int64 tx_vita49_port = 5 [default = 40003];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tx_vita49_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tx_vita49_port_)));
          set_has_tx_vita49_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sub_port;
        break;
      }

      // optional int64 sub_port = 6 [default = 6686];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sub_port_)));
          set_has_sub_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pub_port;
        break;
      }

      // optional int64 pub_port = 7 [default = 5585];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pub_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pub_port_)));
          set_has_pub_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetworkLayout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 base_port = 1 [default = 8080];
  if (has_base_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->base_port(), output);
  }

  // optional int64 infrastructure_port_offset = 2 [default = 17];
  if (has_infrastructure_port_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->infrastructure_port_offset(), output);
  }

  // optional int64 service_port_offset = 3 [default = 19];
  if (has_service_port_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->service_port_offset(), output);
  }

  // optional int64 rx_vita49_port = 4 [default = 40003];
  if (has_rx_vita49_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->rx_vita49_port(), output);
  }

  // optional int64 tx_vita49_port = 5 [default = 40003];
  if (has_tx_vita49_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->tx_vita49_port(), output);
  }

  // optional int64 sub_port = 6 [default = 6686];
  if (has_sub_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->sub_port(), output);
  }

  // optional int64 pub_port = 7 [default = 5585];
  if (has_pub_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->pub_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetworkLayout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 base_port = 1 [default = 8080];
  if (has_base_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->base_port(), target);
  }

  // optional int64 infrastructure_port_offset = 2 [default = 17];
  if (has_infrastructure_port_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->infrastructure_port_offset(), target);
  }

  // optional int64 service_port_offset = 3 [default = 19];
  if (has_service_port_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->service_port_offset(), target);
  }

  // optional int64 rx_vita49_port = 4 [default = 40003];
  if (has_rx_vita49_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->rx_vita49_port(), target);
  }

  // optional int64 tx_vita49_port = 5 [default = 40003];
  if (has_tx_vita49_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->tx_vita49_port(), target);
  }

  // optional int64 sub_port = 6 [default = 6686];
  if (has_sub_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->sub_port(), target);
  }

  // optional int64 pub_port = 7 [default = 5585];
  if (has_pub_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->pub_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetworkLayout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 base_port = 1 [default = 8080];
    if (has_base_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->base_port());
    }

    // optional int64 infrastructure_port_offset = 2 [default = 17];
    if (has_infrastructure_port_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->infrastructure_port_offset());
    }

    // optional int64 service_port_offset = 3 [default = 19];
    if (has_service_port_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->service_port_offset());
    }

    // optional int64 rx_vita49_port = 4 [default = 40003];
    if (has_rx_vita49_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rx_vita49_port());
    }

    // optional int64 tx_vita49_port = 5 [default = 40003];
    if (has_tx_vita49_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tx_vita49_port());
    }

    // optional int64 sub_port = 6 [default = 6686];
    if (has_sub_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sub_port());
    }

    // optional int64 pub_port = 7 [default = 5585];
    if (has_pub_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pub_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkLayout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetworkLayout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetworkLayout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkLayout::MergeFrom(const NetworkLayout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_port()) {
      set_base_port(from.base_port());
    }
    if (from.has_infrastructure_port_offset()) {
      set_infrastructure_port_offset(from.infrastructure_port_offset());
    }
    if (from.has_service_port_offset()) {
      set_service_port_offset(from.service_port_offset());
    }
    if (from.has_rx_vita49_port()) {
      set_rx_vita49_port(from.rx_vita49_port());
    }
    if (from.has_tx_vita49_port()) {
      set_tx_vita49_port(from.tx_vita49_port());
    }
    if (from.has_sub_port()) {
      set_sub_port(from.sub_port());
    }
    if (from.has_pub_port()) {
      set_pub_port(from.pub_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetworkLayout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkLayout::CopyFrom(const NetworkLayout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkLayout::IsInitialized() const {

  return true;
}

void NetworkLayout::Swap(NetworkLayout* other) {
  if (other != this) {
    std::swap(base_port_, other->base_port_);
    std::swap(infrastructure_port_offset_, other->infrastructure_port_offset_);
    std::swap(service_port_offset_, other->service_port_offset_);
    std::swap(rx_vita49_port_, other->rx_vita49_port_);
    std::swap(tx_vita49_port_, other->tx_vita49_port_);
    std::swap(sub_port_, other->sub_port_);
    std::swap(pub_port_, other->pub_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetworkLayout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkLayout_descriptor_;
  metadata.reflection = NetworkLayout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuroraEnvelope::kHeaderFieldNumber;
const int AuroraEnvelope::kAckFieldNumber;
const int AuroraEnvelope::kNackFieldNumber;
const int AuroraEnvelope::kHandshakeFieldNumber;
const int AuroraEnvelope::kEwRequestFieldNumber;
const int AuroraEnvelope::kProductRequestFieldNumber;
const int AuroraEnvelope::kEwSdrCommandFieldNumber;
const int AuroraEnvelope::kBitTestRequestFieldNumber;
#endif  // !_MSC_VER

AuroraEnvelope::AuroraEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuroraEnvelope::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  ack_ = const_cast< ::service_infrastructure::Ack*>(&::service_infrastructure::Ack::default_instance());
  nack_ = const_cast< ::service_infrastructure::NAck*>(&::service_infrastructure::NAck::default_instance());
  handshake_ = const_cast< ::service_infrastructure::HandshakeTopic*>(&::service_infrastructure::HandshakeTopic::default_instance());
  ew_request_ = const_cast< ::service_infrastructure::EWRequestTopic*>(&::service_infrastructure::EWRequestTopic::default_instance());
  product_request_ = const_cast< ::service_infrastructure::ProductRequestTopic*>(&::service_infrastructure::ProductRequestTopic::default_instance());
  ew_sdr_command_ = const_cast< ::fv::aurora::protos::AuroraProtos::EWSDRCommandTopic*>(&::fv::aurora::protos::AuroraProtos::EWSDRCommandTopic::default_instance());
  bit_test_request_ = const_cast< ::bit_protos::BitRequestTopic*>(&::bit_protos::BitRequestTopic::default_instance());
}

AuroraEnvelope::AuroraEnvelope(const AuroraEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuroraEnvelope::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ack_ = NULL;
  nack_ = NULL;
  handshake_ = NULL;
  ew_request_ = NULL;
  product_request_ = NULL;
  ew_sdr_command_ = NULL;
  bit_test_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuroraEnvelope::~AuroraEnvelope() {
  SharedDtor();
}

void AuroraEnvelope::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete ack_;
    delete nack_;
    delete handshake_;
    delete ew_request_;
    delete product_request_;
    delete ew_sdr_command_;
    delete bit_test_request_;
  }
}

void AuroraEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuroraEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuroraEnvelope_descriptor_;
}

const AuroraEnvelope& AuroraEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuroraMessages_2eproto();
  return *default_instance_;
}

AuroraEnvelope* AuroraEnvelope::default_instance_ = NULL;

AuroraEnvelope* AuroraEnvelope::New() const {
  return new AuroraEnvelope;
}

void AuroraEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_ack()) {
      if (ack_ != NULL) ack_->::service_infrastructure::Ack::Clear();
    }
    if (has_nack()) {
      if (nack_ != NULL) nack_->::service_infrastructure::NAck::Clear();
    }
    if (has_handshake()) {
      if (handshake_ != NULL) handshake_->::service_infrastructure::HandshakeTopic::Clear();
    }
    if (has_ew_request()) {
      if (ew_request_ != NULL) ew_request_->::service_infrastructure::EWRequestTopic::Clear();
    }
    if (has_product_request()) {
      if (product_request_ != NULL) product_request_->::service_infrastructure::ProductRequestTopic::Clear();
    }
    if (has_ew_sdr_command()) {
      if (ew_sdr_command_ != NULL) ew_sdr_command_->::fv::aurora::protos::AuroraProtos::EWSDRCommandTopic::Clear();
    }
    if (has_bit_test_request()) {
      if (bit_test_request_ != NULL) bit_test_request_->::bit_protos::BitRequestTopic::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuroraEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_infrastructure.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ack;
        break;
      }

      // optional .service_infrastructure.Ack ack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nack;
        break;
      }

      // optional .service_infrastructure.NAck nack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_handshake;
        break;
      }

      // optional .service_infrastructure.HandshakeTopic handshake = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handshake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handshake()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ew_request;
        break;
      }

      // optional .service_infrastructure.EWRequestTopic ew_request = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_product_request;
        break;
      }

      // optional .service_infrastructure.ProductRequestTopic product_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_product_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ew_sdr_command;
        break;
      }

      // optional .fv.aurora.protos.AuroraProtos.EWSDRCommandTopic ew_sdr_command = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_sdr_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_sdr_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_bit_test_request;
        break;
      }

      // optional .bit_protos.BitRequestTopic bit_test_request = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bit_test_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bit_test_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuroraEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .service_infrastructure.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .service_infrastructure.Ack ack = 2;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ack(), output);
  }

  // optional .service_infrastructure.NAck nack = 3;
  if (has_nack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nack(), output);
  }

  // optional .service_infrastructure.HandshakeTopic handshake = 4;
  if (has_handshake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->handshake(), output);
  }

  // optional .service_infrastructure.EWRequestTopic ew_request = 5;
  if (has_ew_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ew_request(), output);
  }

  // optional .service_infrastructure.ProductRequestTopic product_request = 6;
  if (has_product_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->product_request(), output);
  }

  // optional .fv.aurora.protos.AuroraProtos.EWSDRCommandTopic ew_sdr_command = 7;
  if (has_ew_sdr_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ew_sdr_command(), output);
  }

  // optional .bit_protos.BitRequestTopic bit_test_request = 8;
  if (has_bit_test_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->bit_test_request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuroraEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .service_infrastructure.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .service_infrastructure.Ack ack = 2;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ack(), target);
  }

  // optional .service_infrastructure.NAck nack = 3;
  if (has_nack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->nack(), target);
  }

  // optional .service_infrastructure.HandshakeTopic handshake = 4;
  if (has_handshake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->handshake(), target);
  }

  // optional .service_infrastructure.EWRequestTopic ew_request = 5;
  if (has_ew_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ew_request(), target);
  }

  // optional .service_infrastructure.ProductRequestTopic product_request = 6;
  if (has_product_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->product_request(), target);
  }

  // optional .fv.aurora.protos.AuroraProtos.EWSDRCommandTopic ew_sdr_command = 7;
  if (has_ew_sdr_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ew_sdr_command(), target);
  }

  // optional .bit_protos.BitRequestTopic bit_test_request = 8;
  if (has_bit_test_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->bit_test_request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuroraEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .service_infrastructure.Ack ack = 2;
    if (has_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ack());
    }

    // optional .service_infrastructure.NAck nack = 3;
    if (has_nack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nack());
    }

    // optional .service_infrastructure.HandshakeTopic handshake = 4;
    if (has_handshake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handshake());
    }

    // optional .service_infrastructure.EWRequestTopic ew_request = 5;
    if (has_ew_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_request());
    }

    // optional .service_infrastructure.ProductRequestTopic product_request = 6;
    if (has_product_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->product_request());
    }

    // optional .fv.aurora.protos.AuroraProtos.EWSDRCommandTopic ew_sdr_command = 7;
    if (has_ew_sdr_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_sdr_command());
    }

    // optional .bit_protos.BitRequestTopic bit_test_request = 8;
    if (has_bit_test_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bit_test_request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuroraEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuroraEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuroraEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuroraEnvelope::MergeFrom(const AuroraEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_ack()) {
      mutable_ack()->::service_infrastructure::Ack::MergeFrom(from.ack());
    }
    if (from.has_nack()) {
      mutable_nack()->::service_infrastructure::NAck::MergeFrom(from.nack());
    }
    if (from.has_handshake()) {
      mutable_handshake()->::service_infrastructure::HandshakeTopic::MergeFrom(from.handshake());
    }
    if (from.has_ew_request()) {
      mutable_ew_request()->::service_infrastructure::EWRequestTopic::MergeFrom(from.ew_request());
    }
    if (from.has_product_request()) {
      mutable_product_request()->::service_infrastructure::ProductRequestTopic::MergeFrom(from.product_request());
    }
    if (from.has_ew_sdr_command()) {
      mutable_ew_sdr_command()->::fv::aurora::protos::AuroraProtos::EWSDRCommandTopic::MergeFrom(from.ew_sdr_command());
    }
    if (from.has_bit_test_request()) {
      mutable_bit_test_request()->::bit_protos::BitRequestTopic::MergeFrom(from.bit_test_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuroraEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuroraEnvelope::CopyFrom(const AuroraEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuroraEnvelope::IsInitialized() const {

  return true;
}

void AuroraEnvelope::Swap(AuroraEnvelope* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ack_, other->ack_);
    std::swap(nack_, other->nack_);
    std::swap(handshake_, other->handshake_);
    std::swap(ew_request_, other->ew_request_);
    std::swap(product_request_, other->product_request_);
    std::swap(ew_sdr_command_, other->ew_sdr_command_);
    std::swap(bit_test_request_, other->bit_test_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuroraEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuroraEnvelope_descriptor_;
  metadata.reflection = AuroraEnvelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EWSDRCommandTopic::kHeaderFieldNumber;
const int EWSDRCommandTopic::kEwSdrCommandFieldNumber;
const int EWSDRCommandTopic::kMissionModeFieldNumber;
const int EWSDRCommandTopic::kAppParametersFieldNumber;
#endif  // !_MSC_VER

EWSDRCommandTopic::EWSDRCommandTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWSDRCommandTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  ew_sdr_command_ = const_cast< ::fv::tb::protos::TBProtos::EWSDRCommand*>(&::fv::tb::protos::TBProtos::EWSDRCommand::default_instance());
  mission_mode_ = const_cast< ::fv::tb::protos::TBProtos::MissionMode*>(&::fv::tb::protos::TBProtos::MissionMode::default_instance());
  app_parameters_ = const_cast< ::fv::tb::protos::TBProtos::SetAppParameters*>(&::fv::tb::protos::TBProtos::SetAppParameters::default_instance());
}

EWSDRCommandTopic::EWSDRCommandTopic(const EWSDRCommandTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWSDRCommandTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ew_sdr_command_ = NULL;
  mission_mode_ = NULL;
  app_parameters_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWSDRCommandTopic::~EWSDRCommandTopic() {
  SharedDtor();
}

void EWSDRCommandTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete ew_sdr_command_;
    delete mission_mode_;
    delete app_parameters_;
  }
}

void EWSDRCommandTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWSDRCommandTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWSDRCommandTopic_descriptor_;
}

const EWSDRCommandTopic& EWSDRCommandTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuroraMessages_2eproto();
  return *default_instance_;
}

EWSDRCommandTopic* EWSDRCommandTopic::default_instance_ = NULL;

EWSDRCommandTopic* EWSDRCommandTopic::New() const {
  return new EWSDRCommandTopic;
}

void EWSDRCommandTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_ew_sdr_command()) {
      if (ew_sdr_command_ != NULL) ew_sdr_command_->::fv::tb::protos::TBProtos::EWSDRCommand::Clear();
    }
    if (has_mission_mode()) {
      if (mission_mode_ != NULL) mission_mode_->::fv::tb::protos::TBProtos::MissionMode::Clear();
    }
    if (has_app_parameters()) {
      if (app_parameters_ != NULL) app_parameters_->::fv::tb::protos::TBProtos::SetAppParameters::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWSDRCommandTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fv.tb.protos.TBProtos.EWSDRCommand ew_sdr_command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_sdr_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mission_mode;
        break;
      }

      // optional .fv.tb.protos.TBProtos.MissionMode mission_mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_mode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_app_parameters;
        break;
      }

      // optional .fv.tb.protos.TBProtos.SetAppParameters app_parameters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_parameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWSDRCommandTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fv.tb.protos.TBProtos.EWSDRCommand ew_sdr_command = 1;
  if (has_ew_sdr_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ew_sdr_command(), output);
  }

  // optional .fv.tb.protos.TBProtos.MissionMode mission_mode = 2;
  if (has_mission_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mission_mode(), output);
  }

  // optional .fv.tb.protos.TBProtos.SetAppParameters app_parameters = 3;
  if (has_app_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->app_parameters(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWSDRCommandTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fv.tb.protos.TBProtos.EWSDRCommand ew_sdr_command = 1;
  if (has_ew_sdr_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ew_sdr_command(), target);
  }

  // optional .fv.tb.protos.TBProtos.MissionMode mission_mode = 2;
  if (has_mission_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mission_mode(), target);
  }

  // optional .fv.tb.protos.TBProtos.SetAppParameters app_parameters = 3;
  if (has_app_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->app_parameters(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWSDRCommandTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .fv.tb.protos.TBProtos.EWSDRCommand ew_sdr_command = 1;
    if (has_ew_sdr_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_sdr_command());
    }

    // optional .fv.tb.protos.TBProtos.MissionMode mission_mode = 2;
    if (has_mission_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_mode());
    }

    // optional .fv.tb.protos.TBProtos.SetAppParameters app_parameters = 3;
    if (has_app_parameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_parameters());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWSDRCommandTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWSDRCommandTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWSDRCommandTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWSDRCommandTopic::MergeFrom(const EWSDRCommandTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_ew_sdr_command()) {
      mutable_ew_sdr_command()->::fv::tb::protos::TBProtos::EWSDRCommand::MergeFrom(from.ew_sdr_command());
    }
    if (from.has_mission_mode()) {
      mutable_mission_mode()->::fv::tb::protos::TBProtos::MissionMode::MergeFrom(from.mission_mode());
    }
    if (from.has_app_parameters()) {
      mutable_app_parameters()->::fv::tb::protos::TBProtos::SetAppParameters::MergeFrom(from.app_parameters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWSDRCommandTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWSDRCommandTopic::CopyFrom(const EWSDRCommandTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWSDRCommandTopic::IsInitialized() const {

  return true;
}

void EWSDRCommandTopic::Swap(EWSDRCommandTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ew_sdr_command_, other->ew_sdr_command_);
    std::swap(mission_mode_, other->mission_mode_);
    std::swap(app_parameters_, other->app_parameters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWSDRCommandTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWSDRCommandTopic_descriptor_;
  metadata.reflection = EWSDRCommandTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EWSDRRequestTopic::kHeaderFieldNumber;
const int EWSDRRequestTopic::kEwSdrRequestFieldNumber;
const int EWSDRRequestTopic::kMissionModeFieldNumber;
#endif  // !_MSC_VER

EWSDRRequestTopic::EWSDRRequestTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWSDRRequestTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  ew_sdr_request_ = const_cast< ::fv::tb::protos::TBProtos::EWSDRRequest*>(&::fv::tb::protos::TBProtos::EWSDRRequest::default_instance());
  mission_mode_ = const_cast< ::fv::tb::protos::TBProtos::MissionMode*>(&::fv::tb::protos::TBProtos::MissionMode::default_instance());
}

EWSDRRequestTopic::EWSDRRequestTopic(const EWSDRRequestTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWSDRRequestTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ew_sdr_request_ = NULL;
  mission_mode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWSDRRequestTopic::~EWSDRRequestTopic() {
  SharedDtor();
}

void EWSDRRequestTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete ew_sdr_request_;
    delete mission_mode_;
  }
}

void EWSDRRequestTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWSDRRequestTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWSDRRequestTopic_descriptor_;
}

const EWSDRRequestTopic& EWSDRRequestTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuroraMessages_2eproto();
  return *default_instance_;
}

EWSDRRequestTopic* EWSDRRequestTopic::default_instance_ = NULL;

EWSDRRequestTopic* EWSDRRequestTopic::New() const {
  return new EWSDRRequestTopic;
}

void EWSDRRequestTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_ew_sdr_request()) {
      if (ew_sdr_request_ != NULL) ew_sdr_request_->::fv::tb::protos::TBProtos::EWSDRRequest::Clear();
    }
    if (has_mission_mode()) {
      if (mission_mode_ != NULL) mission_mode_->::fv::tb::protos::TBProtos::MissionMode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWSDRRequestTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fv.tb.protos.TBProtos.EWSDRRequest ew_sdr_request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_sdr_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mission_mode;
        break;
      }

      // optional .fv.tb.protos.TBProtos.MissionMode mission_mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_mode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWSDRRequestTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fv.tb.protos.TBProtos.EWSDRRequest ew_sdr_request = 1;
  if (has_ew_sdr_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ew_sdr_request(), output);
  }

  // optional .fv.tb.protos.TBProtos.MissionMode mission_mode = 2;
  if (has_mission_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mission_mode(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWSDRRequestTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fv.tb.protos.TBProtos.EWSDRRequest ew_sdr_request = 1;
  if (has_ew_sdr_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ew_sdr_request(), target);
  }

  // optional .fv.tb.protos.TBProtos.MissionMode mission_mode = 2;
  if (has_mission_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mission_mode(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWSDRRequestTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .fv.tb.protos.TBProtos.EWSDRRequest ew_sdr_request = 1;
    if (has_ew_sdr_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_sdr_request());
    }

    // optional .fv.tb.protos.TBProtos.MissionMode mission_mode = 2;
    if (has_mission_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWSDRRequestTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWSDRRequestTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWSDRRequestTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWSDRRequestTopic::MergeFrom(const EWSDRRequestTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_ew_sdr_request()) {
      mutable_ew_sdr_request()->::fv::tb::protos::TBProtos::EWSDRRequest::MergeFrom(from.ew_sdr_request());
    }
    if (from.has_mission_mode()) {
      mutable_mission_mode()->::fv::tb::protos::TBProtos::MissionMode::MergeFrom(from.mission_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWSDRRequestTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWSDRRequestTopic::CopyFrom(const EWSDRRequestTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWSDRRequestTopic::IsInitialized() const {

  return true;
}

void EWSDRRequestTopic::Swap(EWSDRRequestTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ew_sdr_request_, other->ew_sdr_request_);
    std::swap(mission_mode_, other->mission_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWSDRRequestTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWSDRRequestTopic_descriptor_;
  metadata.reflection = EWSDRRequestTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EWProcessorEnvelope::kHeaderFieldNumber;
const int EWProcessorEnvelope::kAckFieldNumber;
const int EWProcessorEnvelope::kNackFieldNumber;
const int EWProcessorEnvelope::kHandshakeFieldNumber;
const int EWProcessorEnvelope::kSignalEventFieldNumber;
const int EWProcessorEnvelope::kEwResponseFieldNumber;
const int EWProcessorEnvelope::kProductResponseFieldNumber;
const int EWProcessorEnvelope::kEwSdrStatusFieldNumber;
const int EWProcessorEnvelope::kBitTestResponseFieldNumber;
const int EWProcessorEnvelope::kBitStatusResponseFieldNumber;
const int EWProcessorEnvelope::kBitManifestResponseFieldNumber;
#endif  // !_MSC_VER

EWProcessorEnvelope::EWProcessorEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWProcessorEnvelope::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  ack_ = const_cast< ::service_infrastructure::Ack*>(&::service_infrastructure::Ack::default_instance());
  nack_ = const_cast< ::service_infrastructure::NAck*>(&::service_infrastructure::NAck::default_instance());
  handshake_ = const_cast< ::service_infrastructure::HandshakeTopic*>(&::service_infrastructure::HandshakeTopic::default_instance());
  signal_event_ = const_cast< ::service_infrastructure::SignalEventTopic*>(&::service_infrastructure::SignalEventTopic::default_instance());
  ew_response_ = const_cast< ::service_infrastructure::EWResponseTopic*>(&::service_infrastructure::EWResponseTopic::default_instance());
  product_response_ = const_cast< ::service_infrastructure::ProductResponseTopic*>(&::service_infrastructure::ProductResponseTopic::default_instance());
  ew_sdr_status_ = const_cast< ::fv::aurora::protos::AuroraProtos::EWSDRStatusTopic*>(&::fv::aurora::protos::AuroraProtos::EWSDRStatusTopic::default_instance());
  bit_test_response_ = const_cast< ::bit_protos::BitResponseTopic*>(&::bit_protos::BitResponseTopic::default_instance());
  bit_status_response_ = const_cast< ::com::srcinc::ngi::data::BitStatusTopic*>(&::com::srcinc::ngi::data::BitStatusTopic::default_instance());
  bit_manifest_response_ = const_cast< ::com::srcinc::ngi::data::BitManifestTopic*>(&::com::srcinc::ngi::data::BitManifestTopic::default_instance());
}

EWProcessorEnvelope::EWProcessorEnvelope(const EWProcessorEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWProcessorEnvelope::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ack_ = NULL;
  nack_ = NULL;
  handshake_ = NULL;
  signal_event_ = NULL;
  ew_response_ = NULL;
  product_response_ = NULL;
  ew_sdr_status_ = NULL;
  bit_test_response_ = NULL;
  bit_status_response_ = NULL;
  bit_manifest_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWProcessorEnvelope::~EWProcessorEnvelope() {
  SharedDtor();
}

void EWProcessorEnvelope::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete ack_;
    delete nack_;
    delete handshake_;
    delete signal_event_;
    delete ew_response_;
    delete product_response_;
    delete ew_sdr_status_;
    delete bit_test_response_;
    delete bit_status_response_;
    delete bit_manifest_response_;
  }
}

void EWProcessorEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWProcessorEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWProcessorEnvelope_descriptor_;
}

const EWProcessorEnvelope& EWProcessorEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuroraMessages_2eproto();
  return *default_instance_;
}

EWProcessorEnvelope* EWProcessorEnvelope::default_instance_ = NULL;

EWProcessorEnvelope* EWProcessorEnvelope::New() const {
  return new EWProcessorEnvelope;
}

void EWProcessorEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_ack()) {
      if (ack_ != NULL) ack_->::service_infrastructure::Ack::Clear();
    }
    if (has_nack()) {
      if (nack_ != NULL) nack_->::service_infrastructure::NAck::Clear();
    }
    if (has_handshake()) {
      if (handshake_ != NULL) handshake_->::service_infrastructure::HandshakeTopic::Clear();
    }
    if (has_signal_event()) {
      if (signal_event_ != NULL) signal_event_->::service_infrastructure::SignalEventTopic::Clear();
    }
    if (has_ew_response()) {
      if (ew_response_ != NULL) ew_response_->::service_infrastructure::EWResponseTopic::Clear();
    }
    if (has_product_response()) {
      if (product_response_ != NULL) product_response_->::service_infrastructure::ProductResponseTopic::Clear();
    }
    if (has_ew_sdr_status()) {
      if (ew_sdr_status_ != NULL) ew_sdr_status_->::fv::aurora::protos::AuroraProtos::EWSDRStatusTopic::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_bit_test_response()) {
      if (bit_test_response_ != NULL) bit_test_response_->::bit_protos::BitResponseTopic::Clear();
    }
    if (has_bit_status_response()) {
      if (bit_status_response_ != NULL) bit_status_response_->::com::srcinc::ngi::data::BitStatusTopic::Clear();
    }
    if (has_bit_manifest_response()) {
      if (bit_manifest_response_ != NULL) bit_manifest_response_->::com::srcinc::ngi::data::BitManifestTopic::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWProcessorEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_infrastructure.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ack;
        break;
      }

      // optional .service_infrastructure.Ack ack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nack;
        break;
      }

      // optional .service_infrastructure.NAck nack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_handshake;
        break;
      }

      // optional .service_infrastructure.HandshakeTopic handshake = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handshake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handshake()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_signal_event;
        break;
      }

      // optional .service_infrastructure.SignalEventTopic signal_event = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ew_response;
        break;
      }

      // optional .service_infrastructure.EWResponseTopic ew_response = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_product_response;
        break;
      }

      // optional .service_infrastructure.ProductResponseTopic product_response = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_product_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ew_sdr_status;
        break;
      }

      // optional .fv.aurora.protos.AuroraProtos.EWSDRStatusTopic ew_sdr_status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_sdr_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_sdr_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_bit_test_response;
        break;
      }

      // optional .bit_protos.BitResponseTopic bit_test_response = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bit_test_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bit_test_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_bit_status_response;
        break;
      }

      // optional .com.srcinc.ngi.data.BitStatusTopic bit_status_response = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bit_status_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bit_status_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_bit_manifest_response;
        break;
      }

      // optional .com.srcinc.ngi.data.BitManifestTopic bit_manifest_response = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bit_manifest_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bit_manifest_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWProcessorEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .service_infrastructure.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .service_infrastructure.Ack ack = 2;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ack(), output);
  }

  // optional .service_infrastructure.NAck nack = 3;
  if (has_nack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nack(), output);
  }

  // optional .service_infrastructure.HandshakeTopic handshake = 4;
  if (has_handshake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->handshake(), output);
  }

  // optional .service_infrastructure.SignalEventTopic signal_event = 5;
  if (has_signal_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->signal_event(), output);
  }

  // optional .service_infrastructure.EWResponseTopic ew_response = 6;
  if (has_ew_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ew_response(), output);
  }

  // optional .service_infrastructure.ProductResponseTopic product_response = 7;
  if (has_product_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->product_response(), output);
  }

  // optional .fv.aurora.protos.AuroraProtos.EWSDRStatusTopic ew_sdr_status = 8;
  if (has_ew_sdr_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ew_sdr_status(), output);
  }

  // optional .bit_protos.BitResponseTopic bit_test_response = 9;
  if (has_bit_test_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->bit_test_response(), output);
  }

  // optional .com.srcinc.ngi.data.BitStatusTopic bit_status_response = 10;
  if (has_bit_status_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->bit_status_response(), output);
  }

  // optional .com.srcinc.ngi.data.BitManifestTopic bit_manifest_response = 11;
  if (has_bit_manifest_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->bit_manifest_response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWProcessorEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .service_infrastructure.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .service_infrastructure.Ack ack = 2;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ack(), target);
  }

  // optional .service_infrastructure.NAck nack = 3;
  if (has_nack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->nack(), target);
  }

  // optional .service_infrastructure.HandshakeTopic handshake = 4;
  if (has_handshake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->handshake(), target);
  }

  // optional .service_infrastructure.SignalEventTopic signal_event = 5;
  if (has_signal_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->signal_event(), target);
  }

  // optional .service_infrastructure.EWResponseTopic ew_response = 6;
  if (has_ew_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ew_response(), target);
  }

  // optional .service_infrastructure.ProductResponseTopic product_response = 7;
  if (has_product_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->product_response(), target);
  }

  // optional .fv.aurora.protos.AuroraProtos.EWSDRStatusTopic ew_sdr_status = 8;
  if (has_ew_sdr_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ew_sdr_status(), target);
  }

  // optional .bit_protos.BitResponseTopic bit_test_response = 9;
  if (has_bit_test_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->bit_test_response(), target);
  }

  // optional .com.srcinc.ngi.data.BitStatusTopic bit_status_response = 10;
  if (has_bit_status_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->bit_status_response(), target);
  }

  // optional .com.srcinc.ngi.data.BitManifestTopic bit_manifest_response = 11;
  if (has_bit_manifest_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->bit_manifest_response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWProcessorEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .service_infrastructure.Ack ack = 2;
    if (has_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ack());
    }

    // optional .service_infrastructure.NAck nack = 3;
    if (has_nack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nack());
    }

    // optional .service_infrastructure.HandshakeTopic handshake = 4;
    if (has_handshake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handshake());
    }

    // optional .service_infrastructure.SignalEventTopic signal_event = 5;
    if (has_signal_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal_event());
    }

    // optional .service_infrastructure.EWResponseTopic ew_response = 6;
    if (has_ew_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_response());
    }

    // optional .service_infrastructure.ProductResponseTopic product_response = 7;
    if (has_product_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->product_response());
    }

    // optional .fv.aurora.protos.AuroraProtos.EWSDRStatusTopic ew_sdr_status = 8;
    if (has_ew_sdr_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_sdr_status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .bit_protos.BitResponseTopic bit_test_response = 9;
    if (has_bit_test_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bit_test_response());
    }

    // optional .com.srcinc.ngi.data.BitStatusTopic bit_status_response = 10;
    if (has_bit_status_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bit_status_response());
    }

    // optional .com.srcinc.ngi.data.BitManifestTopic bit_manifest_response = 11;
    if (has_bit_manifest_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bit_manifest_response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWProcessorEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWProcessorEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWProcessorEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWProcessorEnvelope::MergeFrom(const EWProcessorEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_ack()) {
      mutable_ack()->::service_infrastructure::Ack::MergeFrom(from.ack());
    }
    if (from.has_nack()) {
      mutable_nack()->::service_infrastructure::NAck::MergeFrom(from.nack());
    }
    if (from.has_handshake()) {
      mutable_handshake()->::service_infrastructure::HandshakeTopic::MergeFrom(from.handshake());
    }
    if (from.has_signal_event()) {
      mutable_signal_event()->::service_infrastructure::SignalEventTopic::MergeFrom(from.signal_event());
    }
    if (from.has_ew_response()) {
      mutable_ew_response()->::service_infrastructure::EWResponseTopic::MergeFrom(from.ew_response());
    }
    if (from.has_product_response()) {
      mutable_product_response()->::service_infrastructure::ProductResponseTopic::MergeFrom(from.product_response());
    }
    if (from.has_ew_sdr_status()) {
      mutable_ew_sdr_status()->::fv::aurora::protos::AuroraProtos::EWSDRStatusTopic::MergeFrom(from.ew_sdr_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bit_test_response()) {
      mutable_bit_test_response()->::bit_protos::BitResponseTopic::MergeFrom(from.bit_test_response());
    }
    if (from.has_bit_status_response()) {
      mutable_bit_status_response()->::com::srcinc::ngi::data::BitStatusTopic::MergeFrom(from.bit_status_response());
    }
    if (from.has_bit_manifest_response()) {
      mutable_bit_manifest_response()->::com::srcinc::ngi::data::BitManifestTopic::MergeFrom(from.bit_manifest_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWProcessorEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWProcessorEnvelope::CopyFrom(const EWProcessorEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWProcessorEnvelope::IsInitialized() const {

  if (has_bit_status_response()) {
    if (!this->bit_status_response().IsInitialized()) return false;
  }
  if (has_bit_manifest_response()) {
    if (!this->bit_manifest_response().IsInitialized()) return false;
  }
  return true;
}

void EWProcessorEnvelope::Swap(EWProcessorEnvelope* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ack_, other->ack_);
    std::swap(nack_, other->nack_);
    std::swap(handshake_, other->handshake_);
    std::swap(signal_event_, other->signal_event_);
    std::swap(ew_response_, other->ew_response_);
    std::swap(product_response_, other->product_response_);
    std::swap(ew_sdr_status_, other->ew_sdr_status_);
    std::swap(bit_test_response_, other->bit_test_response_);
    std::swap(bit_status_response_, other->bit_status_response_);
    std::swap(bit_manifest_response_, other->bit_manifest_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWProcessorEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWProcessorEnvelope_descriptor_;
  metadata.reflection = EWProcessorEnvelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EWSDRStatusTopic::kHeaderFieldNumber;
const int EWSDRStatusTopic::kEwSdrStatusFieldNumber;
const int EWSDRStatusTopic::kThreatStatusFieldNumber;
#endif  // !_MSC_VER

EWSDRStatusTopic::EWSDRStatusTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWSDRStatusTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  ew_sdr_status_ = const_cast< ::fv::tb::protos::TBProtos::EWSDRStatus*>(&::fv::tb::protos::TBProtos::EWSDRStatus::default_instance());
  threat_status_ = const_cast< ::fv::tb::protos::TBProtos::ThreatStatus*>(&::fv::tb::protos::TBProtos::ThreatStatus::default_instance());
}

EWSDRStatusTopic::EWSDRStatusTopic(const EWSDRStatusTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWSDRStatusTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ew_sdr_status_ = NULL;
  threat_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWSDRStatusTopic::~EWSDRStatusTopic() {
  SharedDtor();
}

void EWSDRStatusTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete ew_sdr_status_;
    delete threat_status_;
  }
}

void EWSDRStatusTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWSDRStatusTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWSDRStatusTopic_descriptor_;
}

const EWSDRStatusTopic& EWSDRStatusTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuroraMessages_2eproto();
  return *default_instance_;
}

EWSDRStatusTopic* EWSDRStatusTopic::default_instance_ = NULL;

EWSDRStatusTopic* EWSDRStatusTopic::New() const {
  return new EWSDRStatusTopic;
}

void EWSDRStatusTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_ew_sdr_status()) {
      if (ew_sdr_status_ != NULL) ew_sdr_status_->::fv::tb::protos::TBProtos::EWSDRStatus::Clear();
    }
    if (has_threat_status()) {
      if (threat_status_ != NULL) threat_status_->::fv::tb::protos::TBProtos::ThreatStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWSDRStatusTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fv.tb.protos.TBProtos.EWSDRStatus ew_sdr_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_sdr_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_threat_status;
        break;
      }

      // optional .fv.tb.protos.TBProtos.ThreatStatus threat_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_threat_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_threat_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWSDRStatusTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fv.tb.protos.TBProtos.EWSDRStatus ew_sdr_status = 1;
  if (has_ew_sdr_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ew_sdr_status(), output);
  }

  // optional .fv.tb.protos.TBProtos.ThreatStatus threat_status = 2;
  if (has_threat_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->threat_status(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWSDRStatusTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fv.tb.protos.TBProtos.EWSDRStatus ew_sdr_status = 1;
  if (has_ew_sdr_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ew_sdr_status(), target);
  }

  // optional .fv.tb.protos.TBProtos.ThreatStatus threat_status = 2;
  if (has_threat_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->threat_status(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWSDRStatusTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .fv.tb.protos.TBProtos.EWSDRStatus ew_sdr_status = 1;
    if (has_ew_sdr_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_sdr_status());
    }

    // optional .fv.tb.protos.TBProtos.ThreatStatus threat_status = 2;
    if (has_threat_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->threat_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWSDRStatusTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWSDRStatusTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWSDRStatusTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWSDRStatusTopic::MergeFrom(const EWSDRStatusTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_ew_sdr_status()) {
      mutable_ew_sdr_status()->::fv::tb::protos::TBProtos::EWSDRStatus::MergeFrom(from.ew_sdr_status());
    }
    if (from.has_threat_status()) {
      mutable_threat_status()->::fv::tb::protos::TBProtos::ThreatStatus::MergeFrom(from.threat_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWSDRStatusTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWSDRStatusTopic::CopyFrom(const EWSDRStatusTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWSDRStatusTopic::IsInitialized() const {

  return true;
}

void EWSDRStatusTopic::Swap(EWSDRStatusTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ew_sdr_status_, other->ew_sdr_status_);
    std::swap(threat_status_, other->threat_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWSDRStatusTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWSDRStatusTopic_descriptor_;
  metadata.reflection = EWSDRStatusTopic_reflection_;
  return metadata;
}


// ===================================================================

::std::string* AuroraICDVersion::_default_date_ = NULL;
#ifndef _MSC_VER
const int AuroraICDVersion::kMajorFieldNumber;
const int AuroraICDVersion::kMinorFieldNumber;
const int AuroraICDVersion::kPatchFieldNumber;
const int AuroraICDVersion::kDateFieldNumber;
const int AuroraICDVersion::kCommitFieldNumber;
#endif  // !_MSC_VER

AuroraICDVersion::AuroraICDVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuroraICDVersion::InitAsDefaultInstance() {
}

AuroraICDVersion::AuroraICDVersion(const AuroraICDVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuroraICDVersion::SharedCtor() {
  _cached_size_ = 0;
  major_ = 0;
  minor_ = 0;
  patch_ = 6;
  date_ = const_cast< ::std::string*>(_default_date_);
  commit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuroraICDVersion::~AuroraICDVersion() {
  SharedDtor();
}

void AuroraICDVersion::SharedDtor() {
  if (date_ != _default_date_) {
    delete date_;
  }
  if (commit_ != &::google::protobuf::internal::kEmptyString) {
    delete commit_;
  }
  if (this != default_instance_) {
  }
}

void AuroraICDVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuroraICDVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuroraICDVersion_descriptor_;
}

const AuroraICDVersion& AuroraICDVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuroraMessages_2eproto();
  return *default_instance_;
}

AuroraICDVersion* AuroraICDVersion::default_instance_ = NULL;

AuroraICDVersion* AuroraICDVersion::New() const {
  return new AuroraICDVersion;
}

void AuroraICDVersion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    major_ = 0;
    minor_ = 0;
    patch_ = 6;
    if (has_date()) {
      if (date_ != _default_date_) {
        date_->assign(*_default_date_);
      }
    }
    if (has_commit()) {
      if (commit_ != &::google::protobuf::internal::kEmptyString) {
        commit_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuroraICDVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 major = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_)));
          set_has_major();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minor;
        break;
      }

      // optional int32 minor = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_)));
          set_has_minor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_patch;
        break;
      }

      // optional int32 patch = 3 [default = 6];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patch_)));
          set_has_patch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_date;
        break;
      }

      // optional string date = 4 [default = "2020-08-14"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_commit;
        break;
      }

      // optional string commit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commit().data(), this->commit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuroraICDVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 major = 1 [default = 0];
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->major(), output);
  }

  // optional int32 minor = 2 [default = 0];
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minor(), output);
  }

  // optional int32 patch = 3 [default = 6];
  if (has_patch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->patch(), output);
  }

  // optional string date = 4 [default = "2020-08-14"];
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->date(), output);
  }

  // optional string commit = 5;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commit().data(), this->commit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->commit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuroraICDVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 major = 1 [default = 0];
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->major(), target);
  }

  // optional int32 minor = 2 [default = 0];
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minor(), target);
  }

  // optional int32 patch = 3 [default = 6];
  if (has_patch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->patch(), target);
  }

  // optional string date = 4 [default = "2020-08-14"];
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->date(), target);
  }

  // optional string commit = 5;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commit().data(), this->commit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->commit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuroraICDVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 major = 1 [default = 0];
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major());
    }

    // optional int32 minor = 2 [default = 0];
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor());
    }

    // optional int32 patch = 3 [default = 6];
    if (has_patch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patch());
    }

    // optional string date = 4 [default = "2020-08-14"];
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string commit = 5;
    if (has_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuroraICDVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuroraICDVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuroraICDVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuroraICDVersion::MergeFrom(const AuroraICDVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
    if (from.has_patch()) {
      set_patch(from.patch());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_commit()) {
      set_commit(from.commit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuroraICDVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuroraICDVersion::CopyFrom(const AuroraICDVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuroraICDVersion::IsInitialized() const {

  return true;
}

void AuroraICDVersion::Swap(AuroraICDVersion* other) {
  if (other != this) {
    std::swap(major_, other->major_);
    std::swap(minor_, other->minor_);
    std::swap(patch_, other->patch_);
    std::swap(date_, other->date_);
    std::swap(commit_, other->commit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuroraICDVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuroraICDVersion_descriptor_;
  metadata.reflection = AuroraICDVersion_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AuroraProtos
}  // namespace protos
}  // namespace aurora
}  // namespace fv

// @@protoc_insertion_point(global_scope)
