// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FalconWebSettingsMessages.proto

#ifndef PROTOBUF_FalconWebSettingsMessages_2eproto__INCLUDED
#define PROTOBUF_FalconWebSettingsMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fv {
namespace settings {
namespace protos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
void protobuf_AssignDesc_FalconWebSettingsMessages_2eproto();
void protobuf_ShutdownFile_FalconWebSettingsMessages_2eproto();

class SetMission;
class UpdateWebSetting;
class UpdateSettingType;
class UpdateDefaultMission;
class WebSettingsRequest;
class WebSettingsResponse;
class Mission;
class ScryptDetail;
class UpdateWebSettingsAckNack;
class SettingsStatus;

enum UpdateSettingType_Type {
  UpdateSettingType_Type_UpdateDefaultMission = 1
};
bool UpdateSettingType_Type_IsValid(int value);
const UpdateSettingType_Type UpdateSettingType_Type_Type_MIN = UpdateSettingType_Type_UpdateDefaultMission;
const UpdateSettingType_Type UpdateSettingType_Type_Type_MAX = UpdateSettingType_Type_UpdateDefaultMission;
const int UpdateSettingType_Type_Type_ARRAYSIZE = UpdateSettingType_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* UpdateSettingType_Type_descriptor();
inline const ::std::string& UpdateSettingType_Type_Name(UpdateSettingType_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    UpdateSettingType_Type_descriptor(), value);
}
inline bool UpdateSettingType_Type_Parse(
    const ::std::string& name, UpdateSettingType_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UpdateSettingType_Type>(
    UpdateSettingType_Type_descriptor(), name, value);
}
// ===================================================================

class SetMission : public ::google::protobuf::Message {
 public:
  SetMission();
  virtual ~SetMission();

  SetMission(const SetMission& from);

  inline SetMission& operator=(const SetMission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetMission& default_instance();

  void Swap(SetMission* other);

  // implements Message ----------------------------------------------

  SetMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetMission& from);
  void MergeFrom(const SetMission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "SET_MISSION"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional string platScrypt = 2;
  inline bool has_platscrypt() const;
  inline void clear_platscrypt();
  static const int kPlatScryptFieldNumber = 2;
  inline const ::std::string& platscrypt() const;
  inline void set_platscrypt(const ::std::string& value);
  inline void set_platscrypt(const char* value);
  inline void set_platscrypt(const char* value, size_t size);
  inline ::std::string* mutable_platscrypt();
  inline ::std::string* release_platscrypt();
  inline void set_allocated_platscrypt(::std::string* platscrypt);

  // @@protoc_insertion_point(class_scope:fv.settings.protos.SetMission)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_platscrypt();
  inline void clear_has_platscrypt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* platscrypt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_AssignDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconWebSettingsMessages_2eproto();

  void InitAsDefaultInstance();
  static SetMission* default_instance_;
};
// -------------------------------------------------------------------

class UpdateWebSetting : public ::google::protobuf::Message {
 public:
  UpdateWebSetting();
  virtual ~UpdateWebSetting();

  UpdateWebSetting(const UpdateWebSetting& from);

  inline UpdateWebSetting& operator=(const UpdateWebSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateWebSetting& default_instance();

  void Swap(UpdateWebSetting* other);

  // implements Message ----------------------------------------------

  UpdateWebSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateWebSetting& from);
  void MergeFrom(const UpdateWebSetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "UPDATE_WEB_SETTING"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // repeated .fv.settings.protos.UpdateSettingType setting = 2;
  inline int setting_size() const;
  inline void clear_setting();
  static const int kSettingFieldNumber = 2;
  inline const ::fv::settings::protos::UpdateSettingType& setting(int index) const;
  inline ::fv::settings::protos::UpdateSettingType* mutable_setting(int index);
  inline ::fv::settings::protos::UpdateSettingType* add_setting();
  inline const ::google::protobuf::RepeatedPtrField< ::fv::settings::protos::UpdateSettingType >&
      setting() const;
  inline ::google::protobuf::RepeatedPtrField< ::fv::settings::protos::UpdateSettingType >*
      mutable_setting();

  // @@protoc_insertion_point(class_scope:fv.settings.protos.UpdateWebSetting)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::RepeatedPtrField< ::fv::settings::protos::UpdateSettingType > setting_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_AssignDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconWebSettingsMessages_2eproto();

  void InitAsDefaultInstance();
  static UpdateWebSetting* default_instance_;
};
// -------------------------------------------------------------------

class UpdateSettingType : public ::google::protobuf::Message {
 public:
  UpdateSettingType();
  virtual ~UpdateSettingType();

  UpdateSettingType(const UpdateSettingType& from);

  inline UpdateSettingType& operator=(const UpdateSettingType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSettingType& default_instance();

  void Swap(UpdateSettingType* other);

  // implements Message ----------------------------------------------

  UpdateSettingType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateSettingType& from);
  void MergeFrom(const UpdateSettingType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef UpdateSettingType_Type Type;
  static const Type UpdateDefaultMission = UpdateSettingType_Type_UpdateDefaultMission;
  static inline bool Type_IsValid(int value) {
    return UpdateSettingType_Type_IsValid(value);
  }
  static const Type Type_MIN =
    UpdateSettingType_Type_Type_MIN;
  static const Type Type_MAX =
    UpdateSettingType_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    UpdateSettingType_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return UpdateSettingType_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return UpdateSettingType_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return UpdateSettingType_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .fv.settings.protos.UpdateSettingType.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::fv::settings::protos::UpdateSettingType_Type type() const;
  inline void set_type(::fv::settings::protos::UpdateSettingType_Type value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UpdateSettingType)
  // @@protoc_insertion_point(class_scope:fv.settings.protos.UpdateSettingType)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_AssignDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconWebSettingsMessages_2eproto();

  void InitAsDefaultInstance();
  static UpdateSettingType* default_instance_;
};
// -------------------------------------------------------------------

class UpdateDefaultMission : public ::google::protobuf::Message {
 public:
  UpdateDefaultMission();
  virtual ~UpdateDefaultMission();

  UpdateDefaultMission(const UpdateDefaultMission& from);

  inline UpdateDefaultMission& operator=(const UpdateDefaultMission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDefaultMission& default_instance();

  void Swap(UpdateDefaultMission* other);

  // implements Message ----------------------------------------------

  UpdateDefaultMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateDefaultMission& from);
  void MergeFrom(const UpdateDefaultMission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string default_missions = 1;
  inline int default_missions_size() const;
  inline void clear_default_missions();
  static const int kDefaultMissionsFieldNumber = 1;
  inline const ::std::string& default_missions(int index) const;
  inline ::std::string* mutable_default_missions(int index);
  inline void set_default_missions(int index, const ::std::string& value);
  inline void set_default_missions(int index, const char* value);
  inline void set_default_missions(int index, const char* value, size_t size);
  inline ::std::string* add_default_missions();
  inline void add_default_missions(const ::std::string& value);
  inline void add_default_missions(const char* value);
  inline void add_default_missions(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& default_missions() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_default_missions();

  static const int kUpdateSettingTypeFieldNumber = 100;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fv::settings::protos::UpdateSettingType,
      ::google::protobuf::internal::MessageTypeTraits< ::fv::settings::protos::UpdateDefaultMission >, 11, false >
    update_setting_type;
  // @@protoc_insertion_point(class_scope:fv.settings.protos.UpdateDefaultMission)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> default_missions_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_AssignDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconWebSettingsMessages_2eproto();

  void InitAsDefaultInstance();
  static UpdateDefaultMission* default_instance_;
};
// -------------------------------------------------------------------

class WebSettingsRequest : public ::google::protobuf::Message {
 public:
  WebSettingsRequest();
  virtual ~WebSettingsRequest();

  WebSettingsRequest(const WebSettingsRequest& from);

  inline WebSettingsRequest& operator=(const WebSettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WebSettingsRequest& default_instance();

  void Swap(WebSettingsRequest* other);

  // implements Message ----------------------------------------------

  WebSettingsRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WebSettingsRequest& from);
  void MergeFrom(const WebSettingsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "WEB_SETTINGS_REQUEST"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // @@protoc_insertion_point(class_scope:fv.settings.protos.WebSettingsRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_AssignDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconWebSettingsMessages_2eproto();

  void InitAsDefaultInstance();
  static WebSettingsRequest* default_instance_;
};
// -------------------------------------------------------------------

class WebSettingsResponse : public ::google::protobuf::Message {
 public:
  WebSettingsResponse();
  virtual ~WebSettingsResponse();

  WebSettingsResponse(const WebSettingsResponse& from);

  inline WebSettingsResponse& operator=(const WebSettingsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WebSettingsResponse& default_instance();

  void Swap(WebSettingsResponse* other);

  // implements Message ----------------------------------------------

  WebSettingsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WebSettingsResponse& from);
  void MergeFrom(const WebSettingsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "WEB_SETTINGS_RESPONSE"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional .fv.settings.protos.Mission mission = 2;
  inline bool has_mission() const;
  inline void clear_mission();
  static const int kMissionFieldNumber = 2;
  inline const ::fv::settings::protos::Mission& mission() const;
  inline ::fv::settings::protos::Mission* mutable_mission();
  inline ::fv::settings::protos::Mission* release_mission();
  inline void set_allocated_mission(::fv::settings::protos::Mission* mission);

  // repeated .fv.settings.protos.ScryptDetail scrypts = 3;
  inline int scrypts_size() const;
  inline void clear_scrypts();
  static const int kScryptsFieldNumber = 3;
  inline const ::fv::settings::protos::ScryptDetail& scrypts(int index) const;
  inline ::fv::settings::protos::ScryptDetail* mutable_scrypts(int index);
  inline ::fv::settings::protos::ScryptDetail* add_scrypts();
  inline const ::google::protobuf::RepeatedPtrField< ::fv::settings::protos::ScryptDetail >&
      scrypts() const;
  inline ::google::protobuf::RepeatedPtrField< ::fv::settings::protos::ScryptDetail >*
      mutable_scrypts();

  // @@protoc_insertion_point(class_scope:fv.settings.protos.WebSettingsResponse)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_mission();
  inline void clear_has_mission();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::fv::settings::protos::Mission* mission_;
  ::google::protobuf::RepeatedPtrField< ::fv::settings::protos::ScryptDetail > scrypts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_AssignDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconWebSettingsMessages_2eproto();

  void InitAsDefaultInstance();
  static WebSettingsResponse* default_instance_;
};
// -------------------------------------------------------------------

class Mission : public ::google::protobuf::Message {
 public:
  Mission();
  virtual ~Mission();

  Mission(const Mission& from);

  inline Mission& operator=(const Mission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mission& default_instance();

  void Swap(Mission* other);

  // implements Message ----------------------------------------------

  Mission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mission& from);
  void MergeFrom(const Mission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string default_missions = 1;
  inline int default_missions_size() const;
  inline void clear_default_missions();
  static const int kDefaultMissionsFieldNumber = 1;
  inline const ::std::string& default_missions(int index) const;
  inline ::std::string* mutable_default_missions(int index);
  inline void set_default_missions(int index, const ::std::string& value);
  inline void set_default_missions(int index, const char* value);
  inline void set_default_missions(int index, const char* value, size_t size);
  inline ::std::string* add_default_missions();
  inline void add_default_missions(const ::std::string& value);
  inline void add_default_missions(const char* value);
  inline void add_default_missions(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& default_missions() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_default_missions();

  // repeated string mission_list = 2;
  inline int mission_list_size() const;
  inline void clear_mission_list();
  static const int kMissionListFieldNumber = 2;
  inline const ::std::string& mission_list(int index) const;
  inline ::std::string* mutable_mission_list(int index);
  inline void set_mission_list(int index, const ::std::string& value);
  inline void set_mission_list(int index, const char* value);
  inline void set_mission_list(int index, const char* value, size_t size);
  inline ::std::string* add_mission_list();
  inline void add_mission_list(const ::std::string& value);
  inline void add_mission_list(const char* value);
  inline void add_mission_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mission_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mission_list();

  // @@protoc_insertion_point(class_scope:fv.settings.protos.Mission)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> default_missions_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mission_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_AssignDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconWebSettingsMessages_2eproto();

  void InitAsDefaultInstance();
  static Mission* default_instance_;
};
// -------------------------------------------------------------------

class ScryptDetail : public ::google::protobuf::Message {
 public:
  ScryptDetail();
  virtual ~ScryptDetail();

  ScryptDetail(const ScryptDetail& from);

  inline ScryptDetail& operator=(const ScryptDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScryptDetail& default_instance();

  void Swap(ScryptDetail* other);

  // implements Message ----------------------------------------------

  ScryptDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScryptDetail& from);
  void MergeFrom(const ScryptDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string scryptName = 1;
  inline bool has_scryptname() const;
  inline void clear_scryptname();
  static const int kScryptNameFieldNumber = 1;
  inline const ::std::string& scryptname() const;
  inline void set_scryptname(const ::std::string& value);
  inline void set_scryptname(const char* value);
  inline void set_scryptname(const char* value, size_t size);
  inline ::std::string* mutable_scryptname();
  inline ::std::string* release_scryptname();
  inline void set_allocated_scryptname(::std::string* scryptname);

  // optional string scryptThread = 2;
  inline bool has_scryptthread() const;
  inline void clear_scryptthread();
  static const int kScryptThreadFieldNumber = 2;
  inline const ::std::string& scryptthread() const;
  inline void set_scryptthread(const ::std::string& value);
  inline void set_scryptthread(const char* value);
  inline void set_scryptthread(const char* value, size_t size);
  inline ::std::string* mutable_scryptthread();
  inline ::std::string* release_scryptthread();
  inline void set_allocated_scryptthread(::std::string* scryptthread);

  // @@protoc_insertion_point(class_scope:fv.settings.protos.ScryptDetail)
 private:
  inline void set_has_scryptname();
  inline void clear_has_scryptname();
  inline void set_has_scryptthread();
  inline void clear_has_scryptthread();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* scryptname_;
  ::std::string* scryptthread_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_AssignDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconWebSettingsMessages_2eproto();

  void InitAsDefaultInstance();
  static ScryptDetail* default_instance_;
};
// -------------------------------------------------------------------

class UpdateWebSettingsAckNack : public ::google::protobuf::Message {
 public:
  UpdateWebSettingsAckNack();
  virtual ~UpdateWebSettingsAckNack();

  UpdateWebSettingsAckNack(const UpdateWebSettingsAckNack& from);

  inline UpdateWebSettingsAckNack& operator=(const UpdateWebSettingsAckNack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateWebSettingsAckNack& default_instance();

  void Swap(UpdateWebSettingsAckNack* other);

  // implements Message ----------------------------------------------

  UpdateWebSettingsAckNack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateWebSettingsAckNack& from);
  void MergeFrom(const UpdateWebSettingsAckNack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "UPDATE_WEB_SETTINGS_ACK_NACK"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // repeated .fv.settings.protos.SettingsStatus status = 2;
  inline int status_size() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline const ::fv::settings::protos::SettingsStatus& status(int index) const;
  inline ::fv::settings::protos::SettingsStatus* mutable_status(int index);
  inline ::fv::settings::protos::SettingsStatus* add_status();
  inline const ::google::protobuf::RepeatedPtrField< ::fv::settings::protos::SettingsStatus >&
      status() const;
  inline ::google::protobuf::RepeatedPtrField< ::fv::settings::protos::SettingsStatus >*
      mutable_status();

  // @@protoc_insertion_point(class_scope:fv.settings.protos.UpdateWebSettingsAckNack)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::RepeatedPtrField< ::fv::settings::protos::SettingsStatus > status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_AssignDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconWebSettingsMessages_2eproto();

  void InitAsDefaultInstance();
  static UpdateWebSettingsAckNack* default_instance_;
};
// -------------------------------------------------------------------

class SettingsStatus : public ::google::protobuf::Message {
 public:
  SettingsStatus();
  virtual ~SettingsStatus();

  SettingsStatus(const SettingsStatus& from);

  inline SettingsStatus& operator=(const SettingsStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SettingsStatus& default_instance();

  void Swap(SettingsStatus* other);

  // implements Message ----------------------------------------------

  SettingsStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SettingsStatus& from);
  void MergeFrom(const SettingsStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .fv.settings.protos.UpdateSettingType message_type = 1;
  inline bool has_message_type() const;
  inline void clear_message_type();
  static const int kMessageTypeFieldNumber = 1;
  inline const ::fv::settings::protos::UpdateSettingType& message_type() const;
  inline ::fv::settings::protos::UpdateSettingType* mutable_message_type();
  inline ::fv::settings::protos::UpdateSettingType* release_message_type();
  inline void set_allocated_message_type(::fv::settings::protos::UpdateSettingType* message_type);

  // required string error_text = 2;
  inline bool has_error_text() const;
  inline void clear_error_text();
  static const int kErrorTextFieldNumber = 2;
  inline const ::std::string& error_text() const;
  inline void set_error_text(const ::std::string& value);
  inline void set_error_text(const char* value);
  inline void set_error_text(const char* value, size_t size);
  inline ::std::string* mutable_error_text();
  inline ::std::string* release_error_text();
  inline void set_allocated_error_text(::std::string* error_text);

  // @@protoc_insertion_point(class_scope:fv.settings.protos.SettingsStatus)
 private:
  inline void set_has_message_type();
  inline void clear_has_message_type();
  inline void set_has_error_text();
  inline void clear_has_error_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::fv::settings::protos::UpdateSettingType* message_type_;
  ::std::string* error_text_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_AssignDesc_FalconWebSettingsMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconWebSettingsMessages_2eproto();

  void InitAsDefaultInstance();
  static SettingsStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// SetMission

// optional string msgName = 1 [default = "SET_MISSION"];
inline bool SetMission::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetMission::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetMission::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetMission::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& SetMission::msgname() const {
  return *msgname_;
}
inline void SetMission::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SetMission::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SetMission::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetMission::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* SetMission::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void SetMission::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional string platScrypt = 2;
inline bool SetMission::has_platscrypt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetMission::set_has_platscrypt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetMission::clear_has_platscrypt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetMission::clear_platscrypt() {
  if (platscrypt_ != &::google::protobuf::internal::kEmptyString) {
    platscrypt_->clear();
  }
  clear_has_platscrypt();
}
inline const ::std::string& SetMission::platscrypt() const {
  return *platscrypt_;
}
inline void SetMission::set_platscrypt(const ::std::string& value) {
  set_has_platscrypt();
  if (platscrypt_ == &::google::protobuf::internal::kEmptyString) {
    platscrypt_ = new ::std::string;
  }
  platscrypt_->assign(value);
}
inline void SetMission::set_platscrypt(const char* value) {
  set_has_platscrypt();
  if (platscrypt_ == &::google::protobuf::internal::kEmptyString) {
    platscrypt_ = new ::std::string;
  }
  platscrypt_->assign(value);
}
inline void SetMission::set_platscrypt(const char* value, size_t size) {
  set_has_platscrypt();
  if (platscrypt_ == &::google::protobuf::internal::kEmptyString) {
    platscrypt_ = new ::std::string;
  }
  platscrypt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetMission::mutable_platscrypt() {
  set_has_platscrypt();
  if (platscrypt_ == &::google::protobuf::internal::kEmptyString) {
    platscrypt_ = new ::std::string;
  }
  return platscrypt_;
}
inline ::std::string* SetMission::release_platscrypt() {
  clear_has_platscrypt();
  if (platscrypt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platscrypt_;
    platscrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetMission::set_allocated_platscrypt(::std::string* platscrypt) {
  if (platscrypt_ != &::google::protobuf::internal::kEmptyString) {
    delete platscrypt_;
  }
  if (platscrypt) {
    set_has_platscrypt();
    platscrypt_ = platscrypt;
  } else {
    clear_has_platscrypt();
    platscrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UpdateWebSetting

// optional string msgName = 1 [default = "UPDATE_WEB_SETTING"];
inline bool UpdateWebSetting::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateWebSetting::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateWebSetting::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateWebSetting::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& UpdateWebSetting::msgname() const {
  return *msgname_;
}
inline void UpdateWebSetting::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void UpdateWebSetting::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void UpdateWebSetting::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateWebSetting::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* UpdateWebSetting::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void UpdateWebSetting::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// repeated .fv.settings.protos.UpdateSettingType setting = 2;
inline int UpdateWebSetting::setting_size() const {
  return setting_.size();
}
inline void UpdateWebSetting::clear_setting() {
  setting_.Clear();
}
inline const ::fv::settings::protos::UpdateSettingType& UpdateWebSetting::setting(int index) const {
  return setting_.Get(index);
}
inline ::fv::settings::protos::UpdateSettingType* UpdateWebSetting::mutable_setting(int index) {
  return setting_.Mutable(index);
}
inline ::fv::settings::protos::UpdateSettingType* UpdateWebSetting::add_setting() {
  return setting_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fv::settings::protos::UpdateSettingType >&
UpdateWebSetting::setting() const {
  return setting_;
}
inline ::google::protobuf::RepeatedPtrField< ::fv::settings::protos::UpdateSettingType >*
UpdateWebSetting::mutable_setting() {
  return &setting_;
}

// -------------------------------------------------------------------

// UpdateSettingType

// required .fv.settings.protos.UpdateSettingType.Type type = 1;
inline bool UpdateSettingType::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateSettingType::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateSettingType::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateSettingType::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fv::settings::protos::UpdateSettingType_Type UpdateSettingType::type() const {
  return static_cast< ::fv::settings::protos::UpdateSettingType_Type >(type_);
}
inline void UpdateSettingType::set_type(::fv::settings::protos::UpdateSettingType_Type value) {
  assert(::fv::settings::protos::UpdateSettingType_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// UpdateDefaultMission

// repeated string default_missions = 1;
inline int UpdateDefaultMission::default_missions_size() const {
  return default_missions_.size();
}
inline void UpdateDefaultMission::clear_default_missions() {
  default_missions_.Clear();
}
inline const ::std::string& UpdateDefaultMission::default_missions(int index) const {
  return default_missions_.Get(index);
}
inline ::std::string* UpdateDefaultMission::mutable_default_missions(int index) {
  return default_missions_.Mutable(index);
}
inline void UpdateDefaultMission::set_default_missions(int index, const ::std::string& value) {
  default_missions_.Mutable(index)->assign(value);
}
inline void UpdateDefaultMission::set_default_missions(int index, const char* value) {
  default_missions_.Mutable(index)->assign(value);
}
inline void UpdateDefaultMission::set_default_missions(int index, const char* value, size_t size) {
  default_missions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateDefaultMission::add_default_missions() {
  return default_missions_.Add();
}
inline void UpdateDefaultMission::add_default_missions(const ::std::string& value) {
  default_missions_.Add()->assign(value);
}
inline void UpdateDefaultMission::add_default_missions(const char* value) {
  default_missions_.Add()->assign(value);
}
inline void UpdateDefaultMission::add_default_missions(const char* value, size_t size) {
  default_missions_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UpdateDefaultMission::default_missions() const {
  return default_missions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UpdateDefaultMission::mutable_default_missions() {
  return &default_missions_;
}

// -------------------------------------------------------------------

// WebSettingsRequest

// optional string msgName = 1 [default = "WEB_SETTINGS_REQUEST"];
inline bool WebSettingsRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WebSettingsRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WebSettingsRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WebSettingsRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& WebSettingsRequest::msgname() const {
  return *msgname_;
}
inline void WebSettingsRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void WebSettingsRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void WebSettingsRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WebSettingsRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* WebSettingsRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void WebSettingsRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// -------------------------------------------------------------------

// WebSettingsResponse

// optional string msgName = 1 [default = "WEB_SETTINGS_RESPONSE"];
inline bool WebSettingsResponse::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WebSettingsResponse::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WebSettingsResponse::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WebSettingsResponse::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& WebSettingsResponse::msgname() const {
  return *msgname_;
}
inline void WebSettingsResponse::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void WebSettingsResponse::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void WebSettingsResponse::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WebSettingsResponse::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* WebSettingsResponse::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void WebSettingsResponse::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional .fv.settings.protos.Mission mission = 2;
inline bool WebSettingsResponse::has_mission() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WebSettingsResponse::set_has_mission() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WebSettingsResponse::clear_has_mission() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WebSettingsResponse::clear_mission() {
  if (mission_ != NULL) mission_->::fv::settings::protos::Mission::Clear();
  clear_has_mission();
}
inline const ::fv::settings::protos::Mission& WebSettingsResponse::mission() const {
  return mission_ != NULL ? *mission_ : *default_instance_->mission_;
}
inline ::fv::settings::protos::Mission* WebSettingsResponse::mutable_mission() {
  set_has_mission();
  if (mission_ == NULL) mission_ = new ::fv::settings::protos::Mission;
  return mission_;
}
inline ::fv::settings::protos::Mission* WebSettingsResponse::release_mission() {
  clear_has_mission();
  ::fv::settings::protos::Mission* temp = mission_;
  mission_ = NULL;
  return temp;
}
inline void WebSettingsResponse::set_allocated_mission(::fv::settings::protos::Mission* mission) {
  delete mission_;
  mission_ = mission;
  if (mission) {
    set_has_mission();
  } else {
    clear_has_mission();
  }
}

// repeated .fv.settings.protos.ScryptDetail scrypts = 3;
inline int WebSettingsResponse::scrypts_size() const {
  return scrypts_.size();
}
inline void WebSettingsResponse::clear_scrypts() {
  scrypts_.Clear();
}
inline const ::fv::settings::protos::ScryptDetail& WebSettingsResponse::scrypts(int index) const {
  return scrypts_.Get(index);
}
inline ::fv::settings::protos::ScryptDetail* WebSettingsResponse::mutable_scrypts(int index) {
  return scrypts_.Mutable(index);
}
inline ::fv::settings::protos::ScryptDetail* WebSettingsResponse::add_scrypts() {
  return scrypts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fv::settings::protos::ScryptDetail >&
WebSettingsResponse::scrypts() const {
  return scrypts_;
}
inline ::google::protobuf::RepeatedPtrField< ::fv::settings::protos::ScryptDetail >*
WebSettingsResponse::mutable_scrypts() {
  return &scrypts_;
}

// -------------------------------------------------------------------

// Mission

// repeated string default_missions = 1;
inline int Mission::default_missions_size() const {
  return default_missions_.size();
}
inline void Mission::clear_default_missions() {
  default_missions_.Clear();
}
inline const ::std::string& Mission::default_missions(int index) const {
  return default_missions_.Get(index);
}
inline ::std::string* Mission::mutable_default_missions(int index) {
  return default_missions_.Mutable(index);
}
inline void Mission::set_default_missions(int index, const ::std::string& value) {
  default_missions_.Mutable(index)->assign(value);
}
inline void Mission::set_default_missions(int index, const char* value) {
  default_missions_.Mutable(index)->assign(value);
}
inline void Mission::set_default_missions(int index, const char* value, size_t size) {
  default_missions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mission::add_default_missions() {
  return default_missions_.Add();
}
inline void Mission::add_default_missions(const ::std::string& value) {
  default_missions_.Add()->assign(value);
}
inline void Mission::add_default_missions(const char* value) {
  default_missions_.Add()->assign(value);
}
inline void Mission::add_default_missions(const char* value, size_t size) {
  default_missions_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Mission::default_missions() const {
  return default_missions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Mission::mutable_default_missions() {
  return &default_missions_;
}

// repeated string mission_list = 2;
inline int Mission::mission_list_size() const {
  return mission_list_.size();
}
inline void Mission::clear_mission_list() {
  mission_list_.Clear();
}
inline const ::std::string& Mission::mission_list(int index) const {
  return mission_list_.Get(index);
}
inline ::std::string* Mission::mutable_mission_list(int index) {
  return mission_list_.Mutable(index);
}
inline void Mission::set_mission_list(int index, const ::std::string& value) {
  mission_list_.Mutable(index)->assign(value);
}
inline void Mission::set_mission_list(int index, const char* value) {
  mission_list_.Mutable(index)->assign(value);
}
inline void Mission::set_mission_list(int index, const char* value, size_t size) {
  mission_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mission::add_mission_list() {
  return mission_list_.Add();
}
inline void Mission::add_mission_list(const ::std::string& value) {
  mission_list_.Add()->assign(value);
}
inline void Mission::add_mission_list(const char* value) {
  mission_list_.Add()->assign(value);
}
inline void Mission::add_mission_list(const char* value, size_t size) {
  mission_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Mission::mission_list() const {
  return mission_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Mission::mutable_mission_list() {
  return &mission_list_;
}

// -------------------------------------------------------------------

// ScryptDetail

// optional string scryptName = 1;
inline bool ScryptDetail::has_scryptname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScryptDetail::set_has_scryptname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScryptDetail::clear_has_scryptname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScryptDetail::clear_scryptname() {
  if (scryptname_ != &::google::protobuf::internal::kEmptyString) {
    scryptname_->clear();
  }
  clear_has_scryptname();
}
inline const ::std::string& ScryptDetail::scryptname() const {
  return *scryptname_;
}
inline void ScryptDetail::set_scryptname(const ::std::string& value) {
  set_has_scryptname();
  if (scryptname_ == &::google::protobuf::internal::kEmptyString) {
    scryptname_ = new ::std::string;
  }
  scryptname_->assign(value);
}
inline void ScryptDetail::set_scryptname(const char* value) {
  set_has_scryptname();
  if (scryptname_ == &::google::protobuf::internal::kEmptyString) {
    scryptname_ = new ::std::string;
  }
  scryptname_->assign(value);
}
inline void ScryptDetail::set_scryptname(const char* value, size_t size) {
  set_has_scryptname();
  if (scryptname_ == &::google::protobuf::internal::kEmptyString) {
    scryptname_ = new ::std::string;
  }
  scryptname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScryptDetail::mutable_scryptname() {
  set_has_scryptname();
  if (scryptname_ == &::google::protobuf::internal::kEmptyString) {
    scryptname_ = new ::std::string;
  }
  return scryptname_;
}
inline ::std::string* ScryptDetail::release_scryptname() {
  clear_has_scryptname();
  if (scryptname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scryptname_;
    scryptname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ScryptDetail::set_allocated_scryptname(::std::string* scryptname) {
  if (scryptname_ != &::google::protobuf::internal::kEmptyString) {
    delete scryptname_;
  }
  if (scryptname) {
    set_has_scryptname();
    scryptname_ = scryptname;
  } else {
    clear_has_scryptname();
    scryptname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string scryptThread = 2;
inline bool ScryptDetail::has_scryptthread() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScryptDetail::set_has_scryptthread() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScryptDetail::clear_has_scryptthread() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScryptDetail::clear_scryptthread() {
  if (scryptthread_ != &::google::protobuf::internal::kEmptyString) {
    scryptthread_->clear();
  }
  clear_has_scryptthread();
}
inline const ::std::string& ScryptDetail::scryptthread() const {
  return *scryptthread_;
}
inline void ScryptDetail::set_scryptthread(const ::std::string& value) {
  set_has_scryptthread();
  if (scryptthread_ == &::google::protobuf::internal::kEmptyString) {
    scryptthread_ = new ::std::string;
  }
  scryptthread_->assign(value);
}
inline void ScryptDetail::set_scryptthread(const char* value) {
  set_has_scryptthread();
  if (scryptthread_ == &::google::protobuf::internal::kEmptyString) {
    scryptthread_ = new ::std::string;
  }
  scryptthread_->assign(value);
}
inline void ScryptDetail::set_scryptthread(const char* value, size_t size) {
  set_has_scryptthread();
  if (scryptthread_ == &::google::protobuf::internal::kEmptyString) {
    scryptthread_ = new ::std::string;
  }
  scryptthread_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScryptDetail::mutable_scryptthread() {
  set_has_scryptthread();
  if (scryptthread_ == &::google::protobuf::internal::kEmptyString) {
    scryptthread_ = new ::std::string;
  }
  return scryptthread_;
}
inline ::std::string* ScryptDetail::release_scryptthread() {
  clear_has_scryptthread();
  if (scryptthread_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scryptthread_;
    scryptthread_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ScryptDetail::set_allocated_scryptthread(::std::string* scryptthread) {
  if (scryptthread_ != &::google::protobuf::internal::kEmptyString) {
    delete scryptthread_;
  }
  if (scryptthread) {
    set_has_scryptthread();
    scryptthread_ = scryptthread;
  } else {
    clear_has_scryptthread();
    scryptthread_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UpdateWebSettingsAckNack

// optional string msgName = 1 [default = "UPDATE_WEB_SETTINGS_ACK_NACK"];
inline bool UpdateWebSettingsAckNack::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateWebSettingsAckNack::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateWebSettingsAckNack::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateWebSettingsAckNack::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& UpdateWebSettingsAckNack::msgname() const {
  return *msgname_;
}
inline void UpdateWebSettingsAckNack::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void UpdateWebSettingsAckNack::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void UpdateWebSettingsAckNack::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateWebSettingsAckNack::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* UpdateWebSettingsAckNack::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void UpdateWebSettingsAckNack::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// repeated .fv.settings.protos.SettingsStatus status = 2;
inline int UpdateWebSettingsAckNack::status_size() const {
  return status_.size();
}
inline void UpdateWebSettingsAckNack::clear_status() {
  status_.Clear();
}
inline const ::fv::settings::protos::SettingsStatus& UpdateWebSettingsAckNack::status(int index) const {
  return status_.Get(index);
}
inline ::fv::settings::protos::SettingsStatus* UpdateWebSettingsAckNack::mutable_status(int index) {
  return status_.Mutable(index);
}
inline ::fv::settings::protos::SettingsStatus* UpdateWebSettingsAckNack::add_status() {
  return status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fv::settings::protos::SettingsStatus >&
UpdateWebSettingsAckNack::status() const {
  return status_;
}
inline ::google::protobuf::RepeatedPtrField< ::fv::settings::protos::SettingsStatus >*
UpdateWebSettingsAckNack::mutable_status() {
  return &status_;
}

// -------------------------------------------------------------------

// SettingsStatus

// required .fv.settings.protos.UpdateSettingType message_type = 1;
inline bool SettingsStatus::has_message_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SettingsStatus::set_has_message_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SettingsStatus::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SettingsStatus::clear_message_type() {
  if (message_type_ != NULL) message_type_->::fv::settings::protos::UpdateSettingType::Clear();
  clear_has_message_type();
}
inline const ::fv::settings::protos::UpdateSettingType& SettingsStatus::message_type() const {
  return message_type_ != NULL ? *message_type_ : *default_instance_->message_type_;
}
inline ::fv::settings::protos::UpdateSettingType* SettingsStatus::mutable_message_type() {
  set_has_message_type();
  if (message_type_ == NULL) message_type_ = new ::fv::settings::protos::UpdateSettingType;
  return message_type_;
}
inline ::fv::settings::protos::UpdateSettingType* SettingsStatus::release_message_type() {
  clear_has_message_type();
  ::fv::settings::protos::UpdateSettingType* temp = message_type_;
  message_type_ = NULL;
  return temp;
}
inline void SettingsStatus::set_allocated_message_type(::fv::settings::protos::UpdateSettingType* message_type) {
  delete message_type_;
  message_type_ = message_type;
  if (message_type) {
    set_has_message_type();
  } else {
    clear_has_message_type();
  }
}

// required string error_text = 2;
inline bool SettingsStatus::has_error_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SettingsStatus::set_has_error_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SettingsStatus::clear_has_error_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SettingsStatus::clear_error_text() {
  if (error_text_ != &::google::protobuf::internal::kEmptyString) {
    error_text_->clear();
  }
  clear_has_error_text();
}
inline const ::std::string& SettingsStatus::error_text() const {
  return *error_text_;
}
inline void SettingsStatus::set_error_text(const ::std::string& value) {
  set_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    error_text_ = new ::std::string;
  }
  error_text_->assign(value);
}
inline void SettingsStatus::set_error_text(const char* value) {
  set_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    error_text_ = new ::std::string;
  }
  error_text_->assign(value);
}
inline void SettingsStatus::set_error_text(const char* value, size_t size) {
  set_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    error_text_ = new ::std::string;
  }
  error_text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SettingsStatus::mutable_error_text() {
  set_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    error_text_ = new ::std::string;
  }
  return error_text_;
}
inline ::std::string* SettingsStatus::release_error_text() {
  clear_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_text_;
    error_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SettingsStatus::set_allocated_error_text(::std::string* error_text) {
  if (error_text_ != &::google::protobuf::internal::kEmptyString) {
    delete error_text_;
  }
  if (error_text) {
    set_has_error_text();
    error_text_ = error_text;
  } else {
    clear_has_error_text();
    error_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace settings
}  // namespace fv

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fv::settings::protos::UpdateSettingType_Type>() {
  return ::fv::settings::protos::UpdateSettingType_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FalconWebSettingsMessages_2eproto__INCLUDED
