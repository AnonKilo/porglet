// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_rfswitch_controller.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service_rfswitch_controller.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace service_rfswitch_controller {

namespace {

const ::google::protobuf::Descriptor* rfSwitchControllerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rfSwitchControllerConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_5frfswitch_5fcontroller_2eproto() {
  protobuf_AddDesc_service_5frfswitch_5fcontroller_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service_rfswitch_controller.proto");
  GOOGLE_CHECK(file != NULL);
  rfSwitchControllerConfig_descriptor_ = file->message_type(0);
  static const int rfSwitchControllerConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rfSwitchControllerConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rfSwitchControllerConfig, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rfSwitchControllerConfig, baud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rfSwitchControllerConfig, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rfSwitchControllerConfig, maxattempts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rfSwitchControllerConfig, writetimeout_),
  };
  rfSwitchControllerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rfSwitchControllerConfig_descriptor_,
      rfSwitchControllerConfig::default_instance_,
      rfSwitchControllerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rfSwitchControllerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rfSwitchControllerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rfSwitchControllerConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_5frfswitch_5fcontroller_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rfSwitchControllerConfig_descriptor_, &rfSwitchControllerConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_5frfswitch_5fcontroller_2eproto() {
  delete rfSwitchControllerConfig::default_instance_;
  delete rfSwitchControllerConfig_reflection_;
  delete rfSwitchControllerConfig::_default_msgname_;
}

void protobuf_AddDesc_service_5frfswitch_5fcontroller_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!service_rfswitch_controller.proto\022\033ser"
    "vice_rfswitch_controller\"\307\001\n\030rfSwitchCon"
    "trollerConfig\022;\n\007msgName\030\001 \001(\t:*service_"
    "rfswitch_controller.rfSwitchConfig\022\016\n\006de"
    "vice\030\002 \001(\t\022\024\n\004baud\030\003 \001(\005:\006115200\022\024\n\007time"
    "out\030\004 \001(\005:\003180\022\027\n\013maxAttempts\030\005 \001(\005:\00210\022"
    "\031\n\014writeTimeout\030\006 \001(\005:\003100B\025\n\023fv.protos."
    "kepsvisor", 289);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service_rfswitch_controller.proto", &protobuf_RegisterTypes);
  rfSwitchControllerConfig::_default_msgname_ =
      new ::std::string("service_rfswitch_controller.rfSwitchConfig", 42);
  rfSwitchControllerConfig::default_instance_ = new rfSwitchControllerConfig();
  rfSwitchControllerConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_5frfswitch_5fcontroller_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_5frfswitch_5fcontroller_2eproto {
  StaticDescriptorInitializer_service_5frfswitch_5fcontroller_2eproto() {
    protobuf_AddDesc_service_5frfswitch_5fcontroller_2eproto();
  }
} static_descriptor_initializer_service_5frfswitch_5fcontroller_2eproto_;

// ===================================================================

::std::string* rfSwitchControllerConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int rfSwitchControllerConfig::kMsgNameFieldNumber;
const int rfSwitchControllerConfig::kDeviceFieldNumber;
const int rfSwitchControllerConfig::kBaudFieldNumber;
const int rfSwitchControllerConfig::kTimeoutFieldNumber;
const int rfSwitchControllerConfig::kMaxAttemptsFieldNumber;
const int rfSwitchControllerConfig::kWriteTimeoutFieldNumber;
#endif  // !_MSC_VER

rfSwitchControllerConfig::rfSwitchControllerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rfSwitchControllerConfig::InitAsDefaultInstance() {
}

rfSwitchControllerConfig::rfSwitchControllerConfig(const rfSwitchControllerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rfSwitchControllerConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  baud_ = 115200;
  timeout_ = 180;
  maxattempts_ = 10;
  writetimeout_ = 100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rfSwitchControllerConfig::~rfSwitchControllerConfig() {
  SharedDtor();
}

void rfSwitchControllerConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (this != default_instance_) {
  }
}

void rfSwitchControllerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rfSwitchControllerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rfSwitchControllerConfig_descriptor_;
}

const rfSwitchControllerConfig& rfSwitchControllerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5frfswitch_5fcontroller_2eproto();
  return *default_instance_;
}

rfSwitchControllerConfig* rfSwitchControllerConfig::default_instance_ = NULL;

rfSwitchControllerConfig* rfSwitchControllerConfig::New() const {
  return new rfSwitchControllerConfig;
}

void rfSwitchControllerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
    baud_ = 115200;
    timeout_ = 180;
    maxattempts_ = 10;
    writetimeout_ = 100;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rfSwitchControllerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "service_rfswitch_controller.rfSwitchConfig"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device;
        break;
      }

      // optional string device = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_baud;
        break;
      }

      // optional int32 baud = 3 [default = 115200];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baud_)));
          set_has_baud();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }

      // optional int32 timeout = 4 [default = 180];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxAttempts;
        break;
      }

      // optional int32 maxAttempts = 5 [default = 10];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxAttempts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxattempts_)));
          set_has_maxattempts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_writeTimeout;
        break;
      }

      // optional int32 writeTimeout = 6 [default = 100];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writeTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writetimeout_)));
          set_has_writetimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rfSwitchControllerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "service_rfswitch_controller.rfSwitchConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string device = 2;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device(), output);
  }

  // optional int32 baud = 3 [default = 115200];
  if (has_baud()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baud(), output);
  }

  // optional int32 timeout = 4 [default = 180];
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeout(), output);
  }

  // optional int32 maxAttempts = 5 [default = 10];
  if (has_maxattempts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxattempts(), output);
  }

  // optional int32 writeTimeout = 6 [default = 100];
  if (has_writetimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->writetimeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rfSwitchControllerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "service_rfswitch_controller.rfSwitchConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string device = 2;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device(), target);
  }

  // optional int32 baud = 3 [default = 115200];
  if (has_baud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->baud(), target);
  }

  // optional int32 timeout = 4 [default = 180];
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeout(), target);
  }

  // optional int32 maxAttempts = 5 [default = 10];
  if (has_maxattempts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxattempts(), target);
  }

  // optional int32 writeTimeout = 6 [default = 100];
  if (has_writetimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->writetimeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rfSwitchControllerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "service_rfswitch_controller.rfSwitchConfig"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string device = 2;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional int32 baud = 3 [default = 115200];
    if (has_baud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baud());
    }

    // optional int32 timeout = 4 [default = 180];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }

    // optional int32 maxAttempts = 5 [default = 10];
    if (has_maxattempts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxattempts());
    }

    // optional int32 writeTimeout = 6 [default = 100];
    if (has_writetimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writetimeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rfSwitchControllerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rfSwitchControllerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rfSwitchControllerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rfSwitchControllerConfig::MergeFrom(const rfSwitchControllerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_baud()) {
      set_baud(from.baud());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_maxattempts()) {
      set_maxattempts(from.maxattempts());
    }
    if (from.has_writetimeout()) {
      set_writetimeout(from.writetimeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rfSwitchControllerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rfSwitchControllerConfig::CopyFrom(const rfSwitchControllerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rfSwitchControllerConfig::IsInitialized() const {

  return true;
}

void rfSwitchControllerConfig::Swap(rfSwitchControllerConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(device_, other->device_);
    std::swap(baud_, other->baud_);
    std::swap(timeout_, other->timeout_);
    std::swap(maxattempts_, other->maxattempts_);
    std::swap(writetimeout_, other->writetimeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rfSwitchControllerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rfSwitchControllerConfig_descriptor_;
  metadata.reflection = rfSwitchControllerConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_rfswitch_controller

// @@protoc_insertion_point(global_scope)
