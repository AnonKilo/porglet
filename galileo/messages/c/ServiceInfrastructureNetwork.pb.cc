// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceInfrastructureNetwork.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServiceInfrastructureNetwork.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace service_infrastructure {

namespace {

const ::google::protobuf::Descriptor* NetworkLayout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkLayout_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServiceInfrastructureNetwork_2eproto() {
  protobuf_AddDesc_ServiceInfrastructureNetwork_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServiceInfrastructureNetwork.proto");
  GOOGLE_CHECK(file != NULL);
  NetworkLayout_descriptor_ = file->message_type(0);
  static const int NetworkLayout_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, base_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, infra_port_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, service_port_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, zpipe_port_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, sub_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, pub_port_),
  };
  NetworkLayout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetworkLayout_descriptor_,
      NetworkLayout::default_instance_,
      NetworkLayout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetworkLayout));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServiceInfrastructureNetwork_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetworkLayout_descriptor_, &NetworkLayout::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServiceInfrastructureNetwork_2eproto() {
  delete NetworkLayout::default_instance_;
  delete NetworkLayout_reflection_;
}

void protobuf_AddDesc_ServiceInfrastructureNetwork_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"ServiceInfrastructureNetwork.proto\022\026se"
    "rvice_infrastructure\"\267\001\n\rNetworkLayout\022\027"
    "\n\tbase_port\030\001 \001(\003:\0048080\022\035\n\021infra_port_of"
    "fset\030\002 \001(\003:\00217\022\037\n\023service_port_offset\030\003 "
    "\001(\003:\00219\022\035\n\021zpipe_port_offset\030\004 \001(\003:\00227\022\026"
    "\n\010sub_port\030\005 \001(\003:\0046686\022\026\n\010pub_port\030\006 \001(\003"
    ":\0045585B\025\n\023fv.protos.kepsvisor", 269);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServiceInfrastructureNetwork.proto", &protobuf_RegisterTypes);
  NetworkLayout::default_instance_ = new NetworkLayout();
  NetworkLayout::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServiceInfrastructureNetwork_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServiceInfrastructureNetwork_2eproto {
  StaticDescriptorInitializer_ServiceInfrastructureNetwork_2eproto() {
    protobuf_AddDesc_ServiceInfrastructureNetwork_2eproto();
  }
} static_descriptor_initializer_ServiceInfrastructureNetwork_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NetworkLayout::kBasePortFieldNumber;
const int NetworkLayout::kInfraPortOffsetFieldNumber;
const int NetworkLayout::kServicePortOffsetFieldNumber;
const int NetworkLayout::kZpipePortOffsetFieldNumber;
const int NetworkLayout::kSubPortFieldNumber;
const int NetworkLayout::kPubPortFieldNumber;
#endif  // !_MSC_VER

NetworkLayout::NetworkLayout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetworkLayout::InitAsDefaultInstance() {
}

NetworkLayout::NetworkLayout(const NetworkLayout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetworkLayout::SharedCtor() {
  _cached_size_ = 0;
  base_port_ = GOOGLE_LONGLONG(8080);
  infra_port_offset_ = GOOGLE_LONGLONG(17);
  service_port_offset_ = GOOGLE_LONGLONG(19);
  zpipe_port_offset_ = GOOGLE_LONGLONG(27);
  sub_port_ = GOOGLE_LONGLONG(6686);
  pub_port_ = GOOGLE_LONGLONG(5585);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkLayout::~NetworkLayout() {
  SharedDtor();
}

void NetworkLayout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetworkLayout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkLayout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkLayout_descriptor_;
}

const NetworkLayout& NetworkLayout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureNetwork_2eproto();
  return *default_instance_;
}

NetworkLayout* NetworkLayout::default_instance_ = NULL;

NetworkLayout* NetworkLayout::New() const {
  return new NetworkLayout;
}

void NetworkLayout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    base_port_ = GOOGLE_LONGLONG(8080);
    infra_port_offset_ = GOOGLE_LONGLONG(17);
    service_port_offset_ = GOOGLE_LONGLONG(19);
    zpipe_port_offset_ = GOOGLE_LONGLONG(27);
    sub_port_ = GOOGLE_LONGLONG(6686);
    pub_port_ = GOOGLE_LONGLONG(5585);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetworkLayout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 base_port = 1 [default = 8080];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &base_port_)));
          set_has_base_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_infra_port_offset;
        break;
      }

      // optional int64 infra_port_offset = 2 [default = 17];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_infra_port_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &infra_port_offset_)));
          set_has_infra_port_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_service_port_offset;
        break;
      }

      // optional int64 service_port_offset = 3 [default = 19];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_port_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &service_port_offset_)));
          set_has_service_port_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zpipe_port_offset;
        break;
      }

      // optional int64 zpipe_port_offset = 4 [default = 27];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zpipe_port_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &zpipe_port_offset_)));
          set_has_zpipe_port_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sub_port;
        break;
      }

      // optional int64 sub_port = 5 [default = 6686];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sub_port_)));
          set_has_sub_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pub_port;
        break;
      }

      // optional int64 pub_port = 6 [default = 5585];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pub_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pub_port_)));
          set_has_pub_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetworkLayout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 base_port = 1 [default = 8080];
  if (has_base_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->base_port(), output);
  }

  // optional int64 infra_port_offset = 2 [default = 17];
  if (has_infra_port_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->infra_port_offset(), output);
  }

  // optional int64 service_port_offset = 3 [default = 19];
  if (has_service_port_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->service_port_offset(), output);
  }

  // optional int64 zpipe_port_offset = 4 [default = 27];
  if (has_zpipe_port_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->zpipe_port_offset(), output);
  }

  // optional int64 sub_port = 5 [default = 6686];
  if (has_sub_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->sub_port(), output);
  }

  // optional int64 pub_port = 6 [default = 5585];
  if (has_pub_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->pub_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetworkLayout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 base_port = 1 [default = 8080];
  if (has_base_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->base_port(), target);
  }

  // optional int64 infra_port_offset = 2 [default = 17];
  if (has_infra_port_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->infra_port_offset(), target);
  }

  // optional int64 service_port_offset = 3 [default = 19];
  if (has_service_port_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->service_port_offset(), target);
  }

  // optional int64 zpipe_port_offset = 4 [default = 27];
  if (has_zpipe_port_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->zpipe_port_offset(), target);
  }

  // optional int64 sub_port = 5 [default = 6686];
  if (has_sub_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->sub_port(), target);
  }

  // optional int64 pub_port = 6 [default = 5585];
  if (has_pub_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->pub_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetworkLayout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 base_port = 1 [default = 8080];
    if (has_base_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->base_port());
    }

    // optional int64 infra_port_offset = 2 [default = 17];
    if (has_infra_port_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->infra_port_offset());
    }

    // optional int64 service_port_offset = 3 [default = 19];
    if (has_service_port_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->service_port_offset());
    }

    // optional int64 zpipe_port_offset = 4 [default = 27];
    if (has_zpipe_port_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->zpipe_port_offset());
    }

    // optional int64 sub_port = 5 [default = 6686];
    if (has_sub_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sub_port());
    }

    // optional int64 pub_port = 6 [default = 5585];
    if (has_pub_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pub_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkLayout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetworkLayout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetworkLayout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkLayout::MergeFrom(const NetworkLayout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_port()) {
      set_base_port(from.base_port());
    }
    if (from.has_infra_port_offset()) {
      set_infra_port_offset(from.infra_port_offset());
    }
    if (from.has_service_port_offset()) {
      set_service_port_offset(from.service_port_offset());
    }
    if (from.has_zpipe_port_offset()) {
      set_zpipe_port_offset(from.zpipe_port_offset());
    }
    if (from.has_sub_port()) {
      set_sub_port(from.sub_port());
    }
    if (from.has_pub_port()) {
      set_pub_port(from.pub_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetworkLayout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkLayout::CopyFrom(const NetworkLayout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkLayout::IsInitialized() const {

  return true;
}

void NetworkLayout::Swap(NetworkLayout* other) {
  if (other != this) {
    std::swap(base_port_, other->base_port_);
    std::swap(infra_port_offset_, other->infra_port_offset_);
    std::swap(service_port_offset_, other->service_port_offset_);
    std::swap(zpipe_port_offset_, other->zpipe_port_offset_);
    std::swap(sub_port_, other->sub_port_);
    std::swap(pub_port_, other->pub_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetworkLayout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkLayout_descriptor_;
  metadata.reflection = NetworkLayout_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_infrastructure

// @@protoc_insertion_point(global_scope)
