// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SITQueueMessages.proto

#ifndef PROTOBUF_SITQueueMessages_2eproto__INCLUDED
#define PROTOBUF_SITQueueMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sit_queue_msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SITQueueMessages_2eproto();
void protobuf_AssignDesc_SITQueueMessages_2eproto();
void protobuf_ShutdownFile_SITQueueMessages_2eproto();

class clusteringResults;
class detectFhopResponse;
class add2SoilistResponse;
class generateJamFileResponse;
class nullResponse;

// ===================================================================

class clusteringResults : public ::google::protobuf::Message {
 public:
  clusteringResults();
  virtual ~clusteringResults();

  clusteringResults(const clusteringResults& from);

  inline clusteringResults& operator=(const clusteringResults& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const clusteringResults& default_instance();

  void Swap(clusteringResults* other);

  // implements Message ----------------------------------------------

  clusteringResults* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const clusteringResults& from);
  void MergeFrom(const clusteringResults& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "clusteringResults"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // required int32 clusterID = 2;
  inline bool has_clusterid() const;
  inline void clear_clusterid();
  static const int kClusterIDFieldNumber = 2;
  inline ::google::protobuf::int32 clusterid() const;
  inline void set_clusterid(::google::protobuf::int32 value);

  // repeated double hopFreqs = 3;
  inline int hopfreqs_size() const;
  inline void clear_hopfreqs();
  static const int kHopFreqsFieldNumber = 3;
  inline double hopfreqs(int index) const;
  inline void set_hopfreqs(int index, double value);
  inline void add_hopfreqs(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      hopfreqs() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_hopfreqs();

  // required string lastDetectTime = 4;
  inline bool has_lastdetecttime() const;
  inline void clear_lastdetecttime();
  static const int kLastDetectTimeFieldNumber = 4;
  inline const ::std::string& lastdetecttime() const;
  inline void set_lastdetecttime(const ::std::string& value);
  inline void set_lastdetecttime(const char* value);
  inline void set_lastdetecttime(const char* value, size_t size);
  inline ::std::string* mutable_lastdetecttime();
  inline ::std::string* release_lastdetecttime();
  inline void set_allocated_lastdetecttime(::std::string* lastdetecttime);

  // required double lastDetectFreq = 5;
  inline bool has_lastdetectfreq() const;
  inline void clear_lastdetectfreq();
  static const int kLastDetectFreqFieldNumber = 5;
  inline double lastdetectfreq() const;
  inline void set_lastdetectfreq(double value);

  // required string bestLibraryMatchName = 6;
  inline bool has_bestlibrarymatchname() const;
  inline void clear_bestlibrarymatchname();
  static const int kBestLibraryMatchNameFieldNumber = 6;
  inline const ::std::string& bestlibrarymatchname() const;
  inline void set_bestlibrarymatchname(const ::std::string& value);
  inline void set_bestlibrarymatchname(const char* value);
  inline void set_bestlibrarymatchname(const char* value, size_t size);
  inline ::std::string* mutable_bestlibrarymatchname();
  inline ::std::string* release_bestlibrarymatchname();
  inline void set_allocated_bestlibrarymatchname(::std::string* bestlibrarymatchname);

  // required double bestLibraryMatchConfidence = 7;
  inline bool has_bestlibrarymatchconfidence() const;
  inline void clear_bestlibrarymatchconfidence();
  static const int kBestLibraryMatchConfidenceFieldNumber = 7;
  inline double bestlibrarymatchconfidence() const;
  inline void set_bestlibrarymatchconfidence(double value);

  // @@protoc_insertion_point(class_scope:sit_queue_msg.clusteringResults)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_clusterid();
  inline void clear_has_clusterid();
  inline void set_has_lastdetecttime();
  inline void clear_has_lastdetecttime();
  inline void set_has_lastdetectfreq();
  inline void clear_has_lastdetectfreq();
  inline void set_has_bestlibrarymatchname();
  inline void clear_has_bestlibrarymatchname();
  inline void set_has_bestlibrarymatchconfidence();
  inline void clear_has_bestlibrarymatchconfidence();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::RepeatedField< double > hopfreqs_;
  ::std::string* lastdetecttime_;
  double lastdetectfreq_;
  ::std::string* bestlibrarymatchname_;
  double bestlibrarymatchconfidence_;
  ::google::protobuf::int32 clusterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_SITQueueMessages_2eproto();
  friend void protobuf_AssignDesc_SITQueueMessages_2eproto();
  friend void protobuf_ShutdownFile_SITQueueMessages_2eproto();

  void InitAsDefaultInstance();
  static clusteringResults* default_instance_;
};
// -------------------------------------------------------------------

class detectFhopResponse : public ::google::protobuf::Message {
 public:
  detectFhopResponse();
  virtual ~detectFhopResponse();

  detectFhopResponse(const detectFhopResponse& from);

  inline detectFhopResponse& operator=(const detectFhopResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const detectFhopResponse& default_instance();

  void Swap(detectFhopResponse* other);

  // implements Message ----------------------------------------------

  detectFhopResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const detectFhopResponse& from);
  void MergeFrom(const detectFhopResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "detectFhopResponse"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // required string requestID = 2;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestIDFieldNumber = 2;
  inline const ::std::string& requestid() const;
  inline void set_requestid(const ::std::string& value);
  inline void set_requestid(const char* value);
  inline void set_requestid(const char* value, size_t size);
  inline ::std::string* mutable_requestid();
  inline ::std::string* release_requestid();
  inline void set_allocated_requestid(::std::string* requestid);

  // required string iqSnap = 3;
  inline bool has_iqsnap() const;
  inline void clear_iqsnap();
  static const int kIqSnapFieldNumber = 3;
  inline const ::std::string& iqsnap() const;
  inline void set_iqsnap(const ::std::string& value);
  inline void set_iqsnap(const char* value);
  inline void set_iqsnap(const char* value, size_t size);
  inline ::std::string* mutable_iqsnap();
  inline ::std::string* release_iqsnap();
  inline void set_allocated_iqsnap(::std::string* iqsnap);

  // repeated .sit_queue_msg.clusteringResults detectResults = 4;
  inline int detectresults_size() const;
  inline void clear_detectresults();
  static const int kDetectResultsFieldNumber = 4;
  inline const ::sit_queue_msg::clusteringResults& detectresults(int index) const;
  inline ::sit_queue_msg::clusteringResults* mutable_detectresults(int index);
  inline ::sit_queue_msg::clusteringResults* add_detectresults();
  inline const ::google::protobuf::RepeatedPtrField< ::sit_queue_msg::clusteringResults >&
      detectresults() const;
  inline ::google::protobuf::RepeatedPtrField< ::sit_queue_msg::clusteringResults >*
      mutable_detectresults();

  // @@protoc_insertion_point(class_scope:sit_queue_msg.detectFhopResponse)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_iqsnap();
  inline void clear_has_iqsnap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* requestid_;
  ::std::string* iqsnap_;
  ::google::protobuf::RepeatedPtrField< ::sit_queue_msg::clusteringResults > detectresults_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SITQueueMessages_2eproto();
  friend void protobuf_AssignDesc_SITQueueMessages_2eproto();
  friend void protobuf_ShutdownFile_SITQueueMessages_2eproto();

  void InitAsDefaultInstance();
  static detectFhopResponse* default_instance_;
};
// -------------------------------------------------------------------

class add2SoilistResponse : public ::google::protobuf::Message {
 public:
  add2SoilistResponse();
  virtual ~add2SoilistResponse();

  add2SoilistResponse(const add2SoilistResponse& from);

  inline add2SoilistResponse& operator=(const add2SoilistResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const add2SoilistResponse& default_instance();

  void Swap(add2SoilistResponse* other);

  // implements Message ----------------------------------------------

  add2SoilistResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const add2SoilistResponse& from);
  void MergeFrom(const add2SoilistResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "add2SoilistResponse"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // required string requestID = 2;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestIDFieldNumber = 2;
  inline const ::std::string& requestid() const;
  inline void set_requestid(const ::std::string& value);
  inline void set_requestid(const char* value);
  inline void set_requestid(const char* value, size_t size);
  inline ::std::string* mutable_requestid();
  inline ::std::string* release_requestid();
  inline void set_allocated_requestid(::std::string* requestid);

  // required string sigAdded = 3;
  inline bool has_sigadded() const;
  inline void clear_sigadded();
  static const int kSigAddedFieldNumber = 3;
  inline const ::std::string& sigadded() const;
  inline void set_sigadded(const ::std::string& value);
  inline void set_sigadded(const char* value);
  inline void set_sigadded(const char* value, size_t size);
  inline ::std::string* mutable_sigadded();
  inline ::std::string* release_sigadded();
  inline void set_allocated_sigadded(::std::string* sigadded);

  // required string targetIdentifier = 4;
  inline bool has_targetidentifier() const;
  inline void clear_targetidentifier();
  static const int kTargetIdentifierFieldNumber = 4;
  inline const ::std::string& targetidentifier() const;
  inline void set_targetidentifier(const ::std::string& value);
  inline void set_targetidentifier(const char* value);
  inline void set_targetidentifier(const char* value, size_t size);
  inline ::std::string* mutable_targetidentifier();
  inline ::std::string* release_targetidentifier();
  inline void set_allocated_targetidentifier(::std::string* targetidentifier);

  // @@protoc_insertion_point(class_scope:sit_queue_msg.add2SoilistResponse)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_sigadded();
  inline void clear_has_sigadded();
  inline void set_has_targetidentifier();
  inline void clear_has_targetidentifier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* requestid_;
  ::std::string* sigadded_;
  ::std::string* targetidentifier_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SITQueueMessages_2eproto();
  friend void protobuf_AssignDesc_SITQueueMessages_2eproto();
  friend void protobuf_ShutdownFile_SITQueueMessages_2eproto();

  void InitAsDefaultInstance();
  static add2SoilistResponse* default_instance_;
};
// -------------------------------------------------------------------

class generateJamFileResponse : public ::google::protobuf::Message {
 public:
  generateJamFileResponse();
  virtual ~generateJamFileResponse();

  generateJamFileResponse(const generateJamFileResponse& from);

  inline generateJamFileResponse& operator=(const generateJamFileResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const generateJamFileResponse& default_instance();

  void Swap(generateJamFileResponse* other);

  // implements Message ----------------------------------------------

  generateJamFileResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const generateJamFileResponse& from);
  void MergeFrom(const generateJamFileResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "generateJamFileResponse"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // required string requestID = 2;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestIDFieldNumber = 2;
  inline const ::std::string& requestid() const;
  inline void set_requestid(const ::std::string& value);
  inline void set_requestid(const char* value);
  inline void set_requestid(const char* value, size_t size);
  inline ::std::string* mutable_requestid();
  inline ::std::string* release_requestid();
  inline void set_allocated_requestid(::std::string* requestid);

  // required int32 clusterID = 3;
  inline bool has_clusterid() const;
  inline void clear_clusterid();
  static const int kClusterIDFieldNumber = 3;
  inline ::google::protobuf::int32 clusterid() const;
  inline void set_clusterid(::google::protobuf::int32 value);

  // required string jamFilePath = 4;
  inline bool has_jamfilepath() const;
  inline void clear_jamfilepath();
  static const int kJamFilePathFieldNumber = 4;
  inline const ::std::string& jamfilepath() const;
  inline void set_jamfilepath(const ::std::string& value);
  inline void set_jamfilepath(const char* value);
  inline void set_jamfilepath(const char* value, size_t size);
  inline ::std::string* mutable_jamfilepath();
  inline ::std::string* release_jamfilepath();
  inline void set_allocated_jamfilepath(::std::string* jamfilepath);

  // @@protoc_insertion_point(class_scope:sit_queue_msg.generateJamFileResponse)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_clusterid();
  inline void clear_has_clusterid();
  inline void set_has_jamfilepath();
  inline void clear_has_jamfilepath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* requestid_;
  ::std::string* jamfilepath_;
  ::google::protobuf::int32 clusterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SITQueueMessages_2eproto();
  friend void protobuf_AssignDesc_SITQueueMessages_2eproto();
  friend void protobuf_ShutdownFile_SITQueueMessages_2eproto();

  void InitAsDefaultInstance();
  static generateJamFileResponse* default_instance_;
};
// -------------------------------------------------------------------

class nullResponse : public ::google::protobuf::Message {
 public:
  nullResponse();
  virtual ~nullResponse();

  nullResponse(const nullResponse& from);

  inline nullResponse& operator=(const nullResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nullResponse& default_instance();

  void Swap(nullResponse* other);

  // implements Message ----------------------------------------------

  nullResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nullResponse& from);
  void MergeFrom(const nullResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "nullResponse"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // required string requestID = 2;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestIDFieldNumber = 2;
  inline const ::std::string& requestid() const;
  inline void set_requestid(const ::std::string& value);
  inline void set_requestid(const char* value);
  inline void set_requestid(const char* value, size_t size);
  inline ::std::string* mutable_requestid();
  inline ::std::string* release_requestid();
  inline void set_allocated_requestid(::std::string* requestid);

  // required string requestMsgName = 3;
  inline bool has_requestmsgname() const;
  inline void clear_requestmsgname();
  static const int kRequestMsgNameFieldNumber = 3;
  inline const ::std::string& requestmsgname() const;
  inline void set_requestmsgname(const ::std::string& value);
  inline void set_requestmsgname(const char* value);
  inline void set_requestmsgname(const char* value, size_t size);
  inline ::std::string* mutable_requestmsgname();
  inline ::std::string* release_requestmsgname();
  inline void set_allocated_requestmsgname(::std::string* requestmsgname);

  // @@protoc_insertion_point(class_scope:sit_queue_msg.nullResponse)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_requestmsgname();
  inline void clear_has_requestmsgname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* requestid_;
  ::std::string* requestmsgname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SITQueueMessages_2eproto();
  friend void protobuf_AssignDesc_SITQueueMessages_2eproto();
  friend void protobuf_ShutdownFile_SITQueueMessages_2eproto();

  void InitAsDefaultInstance();
  static nullResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// clusteringResults

// optional string msgName = 1 [default = "clusteringResults"];
inline bool clusteringResults::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void clusteringResults::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void clusteringResults::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void clusteringResults::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& clusteringResults::msgname() const {
  return *msgname_;
}
inline void clusteringResults::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void clusteringResults::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void clusteringResults::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clusteringResults::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* clusteringResults::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void clusteringResults::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// required int32 clusterID = 2;
inline bool clusteringResults::has_clusterid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void clusteringResults::set_has_clusterid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void clusteringResults::clear_has_clusterid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void clusteringResults::clear_clusterid() {
  clusterid_ = 0;
  clear_has_clusterid();
}
inline ::google::protobuf::int32 clusteringResults::clusterid() const {
  return clusterid_;
}
inline void clusteringResults::set_clusterid(::google::protobuf::int32 value) {
  set_has_clusterid();
  clusterid_ = value;
}

// repeated double hopFreqs = 3;
inline int clusteringResults::hopfreqs_size() const {
  return hopfreqs_.size();
}
inline void clusteringResults::clear_hopfreqs() {
  hopfreqs_.Clear();
}
inline double clusteringResults::hopfreqs(int index) const {
  return hopfreqs_.Get(index);
}
inline void clusteringResults::set_hopfreqs(int index, double value) {
  hopfreqs_.Set(index, value);
}
inline void clusteringResults::add_hopfreqs(double value) {
  hopfreqs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
clusteringResults::hopfreqs() const {
  return hopfreqs_;
}
inline ::google::protobuf::RepeatedField< double >*
clusteringResults::mutable_hopfreqs() {
  return &hopfreqs_;
}

// required string lastDetectTime = 4;
inline bool clusteringResults::has_lastdetecttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void clusteringResults::set_has_lastdetecttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void clusteringResults::clear_has_lastdetecttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void clusteringResults::clear_lastdetecttime() {
  if (lastdetecttime_ != &::google::protobuf::internal::kEmptyString) {
    lastdetecttime_->clear();
  }
  clear_has_lastdetecttime();
}
inline const ::std::string& clusteringResults::lastdetecttime() const {
  return *lastdetecttime_;
}
inline void clusteringResults::set_lastdetecttime(const ::std::string& value) {
  set_has_lastdetecttime();
  if (lastdetecttime_ == &::google::protobuf::internal::kEmptyString) {
    lastdetecttime_ = new ::std::string;
  }
  lastdetecttime_->assign(value);
}
inline void clusteringResults::set_lastdetecttime(const char* value) {
  set_has_lastdetecttime();
  if (lastdetecttime_ == &::google::protobuf::internal::kEmptyString) {
    lastdetecttime_ = new ::std::string;
  }
  lastdetecttime_->assign(value);
}
inline void clusteringResults::set_lastdetecttime(const char* value, size_t size) {
  set_has_lastdetecttime();
  if (lastdetecttime_ == &::google::protobuf::internal::kEmptyString) {
    lastdetecttime_ = new ::std::string;
  }
  lastdetecttime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clusteringResults::mutable_lastdetecttime() {
  set_has_lastdetecttime();
  if (lastdetecttime_ == &::google::protobuf::internal::kEmptyString) {
    lastdetecttime_ = new ::std::string;
  }
  return lastdetecttime_;
}
inline ::std::string* clusteringResults::release_lastdetecttime() {
  clear_has_lastdetecttime();
  if (lastdetecttime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastdetecttime_;
    lastdetecttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void clusteringResults::set_allocated_lastdetecttime(::std::string* lastdetecttime) {
  if (lastdetecttime_ != &::google::protobuf::internal::kEmptyString) {
    delete lastdetecttime_;
  }
  if (lastdetecttime) {
    set_has_lastdetecttime();
    lastdetecttime_ = lastdetecttime;
  } else {
    clear_has_lastdetecttime();
    lastdetecttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double lastDetectFreq = 5;
inline bool clusteringResults::has_lastdetectfreq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void clusteringResults::set_has_lastdetectfreq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void clusteringResults::clear_has_lastdetectfreq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void clusteringResults::clear_lastdetectfreq() {
  lastdetectfreq_ = 0;
  clear_has_lastdetectfreq();
}
inline double clusteringResults::lastdetectfreq() const {
  return lastdetectfreq_;
}
inline void clusteringResults::set_lastdetectfreq(double value) {
  set_has_lastdetectfreq();
  lastdetectfreq_ = value;
}

// required string bestLibraryMatchName = 6;
inline bool clusteringResults::has_bestlibrarymatchname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void clusteringResults::set_has_bestlibrarymatchname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void clusteringResults::clear_has_bestlibrarymatchname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void clusteringResults::clear_bestlibrarymatchname() {
  if (bestlibrarymatchname_ != &::google::protobuf::internal::kEmptyString) {
    bestlibrarymatchname_->clear();
  }
  clear_has_bestlibrarymatchname();
}
inline const ::std::string& clusteringResults::bestlibrarymatchname() const {
  return *bestlibrarymatchname_;
}
inline void clusteringResults::set_bestlibrarymatchname(const ::std::string& value) {
  set_has_bestlibrarymatchname();
  if (bestlibrarymatchname_ == &::google::protobuf::internal::kEmptyString) {
    bestlibrarymatchname_ = new ::std::string;
  }
  bestlibrarymatchname_->assign(value);
}
inline void clusteringResults::set_bestlibrarymatchname(const char* value) {
  set_has_bestlibrarymatchname();
  if (bestlibrarymatchname_ == &::google::protobuf::internal::kEmptyString) {
    bestlibrarymatchname_ = new ::std::string;
  }
  bestlibrarymatchname_->assign(value);
}
inline void clusteringResults::set_bestlibrarymatchname(const char* value, size_t size) {
  set_has_bestlibrarymatchname();
  if (bestlibrarymatchname_ == &::google::protobuf::internal::kEmptyString) {
    bestlibrarymatchname_ = new ::std::string;
  }
  bestlibrarymatchname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clusteringResults::mutable_bestlibrarymatchname() {
  set_has_bestlibrarymatchname();
  if (bestlibrarymatchname_ == &::google::protobuf::internal::kEmptyString) {
    bestlibrarymatchname_ = new ::std::string;
  }
  return bestlibrarymatchname_;
}
inline ::std::string* clusteringResults::release_bestlibrarymatchname() {
  clear_has_bestlibrarymatchname();
  if (bestlibrarymatchname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bestlibrarymatchname_;
    bestlibrarymatchname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void clusteringResults::set_allocated_bestlibrarymatchname(::std::string* bestlibrarymatchname) {
  if (bestlibrarymatchname_ != &::google::protobuf::internal::kEmptyString) {
    delete bestlibrarymatchname_;
  }
  if (bestlibrarymatchname) {
    set_has_bestlibrarymatchname();
    bestlibrarymatchname_ = bestlibrarymatchname;
  } else {
    clear_has_bestlibrarymatchname();
    bestlibrarymatchname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double bestLibraryMatchConfidence = 7;
inline bool clusteringResults::has_bestlibrarymatchconfidence() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void clusteringResults::set_has_bestlibrarymatchconfidence() {
  _has_bits_[0] |= 0x00000040u;
}
inline void clusteringResults::clear_has_bestlibrarymatchconfidence() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void clusteringResults::clear_bestlibrarymatchconfidence() {
  bestlibrarymatchconfidence_ = 0;
  clear_has_bestlibrarymatchconfidence();
}
inline double clusteringResults::bestlibrarymatchconfidence() const {
  return bestlibrarymatchconfidence_;
}
inline void clusteringResults::set_bestlibrarymatchconfidence(double value) {
  set_has_bestlibrarymatchconfidence();
  bestlibrarymatchconfidence_ = value;
}

// -------------------------------------------------------------------

// detectFhopResponse

// optional string msgName = 1 [default = "detectFhopResponse"];
inline bool detectFhopResponse::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void detectFhopResponse::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void detectFhopResponse::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void detectFhopResponse::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& detectFhopResponse::msgname() const {
  return *msgname_;
}
inline void detectFhopResponse::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void detectFhopResponse::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void detectFhopResponse::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* detectFhopResponse::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* detectFhopResponse::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void detectFhopResponse::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// required string requestID = 2;
inline bool detectFhopResponse::has_requestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void detectFhopResponse::set_has_requestid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void detectFhopResponse::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void detectFhopResponse::clear_requestid() {
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    requestid_->clear();
  }
  clear_has_requestid();
}
inline const ::std::string& detectFhopResponse::requestid() const {
  return *requestid_;
}
inline void detectFhopResponse::set_requestid(const ::std::string& value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void detectFhopResponse::set_requestid(const char* value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void detectFhopResponse::set_requestid(const char* value, size_t size) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* detectFhopResponse::mutable_requestid() {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  return requestid_;
}
inline ::std::string* detectFhopResponse::release_requestid() {
  clear_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = requestid_;
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void detectFhopResponse::set_allocated_requestid(::std::string* requestid) {
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    delete requestid_;
  }
  if (requestid) {
    set_has_requestid();
    requestid_ = requestid;
  } else {
    clear_has_requestid();
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string iqSnap = 3;
inline bool detectFhopResponse::has_iqsnap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void detectFhopResponse::set_has_iqsnap() {
  _has_bits_[0] |= 0x00000004u;
}
inline void detectFhopResponse::clear_has_iqsnap() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void detectFhopResponse::clear_iqsnap() {
  if (iqsnap_ != &::google::protobuf::internal::kEmptyString) {
    iqsnap_->clear();
  }
  clear_has_iqsnap();
}
inline const ::std::string& detectFhopResponse::iqsnap() const {
  return *iqsnap_;
}
inline void detectFhopResponse::set_iqsnap(const ::std::string& value) {
  set_has_iqsnap();
  if (iqsnap_ == &::google::protobuf::internal::kEmptyString) {
    iqsnap_ = new ::std::string;
  }
  iqsnap_->assign(value);
}
inline void detectFhopResponse::set_iqsnap(const char* value) {
  set_has_iqsnap();
  if (iqsnap_ == &::google::protobuf::internal::kEmptyString) {
    iqsnap_ = new ::std::string;
  }
  iqsnap_->assign(value);
}
inline void detectFhopResponse::set_iqsnap(const char* value, size_t size) {
  set_has_iqsnap();
  if (iqsnap_ == &::google::protobuf::internal::kEmptyString) {
    iqsnap_ = new ::std::string;
  }
  iqsnap_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* detectFhopResponse::mutable_iqsnap() {
  set_has_iqsnap();
  if (iqsnap_ == &::google::protobuf::internal::kEmptyString) {
    iqsnap_ = new ::std::string;
  }
  return iqsnap_;
}
inline ::std::string* detectFhopResponse::release_iqsnap() {
  clear_has_iqsnap();
  if (iqsnap_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = iqsnap_;
    iqsnap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void detectFhopResponse::set_allocated_iqsnap(::std::string* iqsnap) {
  if (iqsnap_ != &::google::protobuf::internal::kEmptyString) {
    delete iqsnap_;
  }
  if (iqsnap) {
    set_has_iqsnap();
    iqsnap_ = iqsnap;
  } else {
    clear_has_iqsnap();
    iqsnap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .sit_queue_msg.clusteringResults detectResults = 4;
inline int detectFhopResponse::detectresults_size() const {
  return detectresults_.size();
}
inline void detectFhopResponse::clear_detectresults() {
  detectresults_.Clear();
}
inline const ::sit_queue_msg::clusteringResults& detectFhopResponse::detectresults(int index) const {
  return detectresults_.Get(index);
}
inline ::sit_queue_msg::clusteringResults* detectFhopResponse::mutable_detectresults(int index) {
  return detectresults_.Mutable(index);
}
inline ::sit_queue_msg::clusteringResults* detectFhopResponse::add_detectresults() {
  return detectresults_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sit_queue_msg::clusteringResults >&
detectFhopResponse::detectresults() const {
  return detectresults_;
}
inline ::google::protobuf::RepeatedPtrField< ::sit_queue_msg::clusteringResults >*
detectFhopResponse::mutable_detectresults() {
  return &detectresults_;
}

// -------------------------------------------------------------------

// add2SoilistResponse

// optional string msgName = 1 [default = "add2SoilistResponse"];
inline bool add2SoilistResponse::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void add2SoilistResponse::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void add2SoilistResponse::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void add2SoilistResponse::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& add2SoilistResponse::msgname() const {
  return *msgname_;
}
inline void add2SoilistResponse::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void add2SoilistResponse::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void add2SoilistResponse::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* add2SoilistResponse::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* add2SoilistResponse::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void add2SoilistResponse::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// required string requestID = 2;
inline bool add2SoilistResponse::has_requestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void add2SoilistResponse::set_has_requestid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void add2SoilistResponse::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void add2SoilistResponse::clear_requestid() {
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    requestid_->clear();
  }
  clear_has_requestid();
}
inline const ::std::string& add2SoilistResponse::requestid() const {
  return *requestid_;
}
inline void add2SoilistResponse::set_requestid(const ::std::string& value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void add2SoilistResponse::set_requestid(const char* value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void add2SoilistResponse::set_requestid(const char* value, size_t size) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* add2SoilistResponse::mutable_requestid() {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  return requestid_;
}
inline ::std::string* add2SoilistResponse::release_requestid() {
  clear_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = requestid_;
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void add2SoilistResponse::set_allocated_requestid(::std::string* requestid) {
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    delete requestid_;
  }
  if (requestid) {
    set_has_requestid();
    requestid_ = requestid;
  } else {
    clear_has_requestid();
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string sigAdded = 3;
inline bool add2SoilistResponse::has_sigadded() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void add2SoilistResponse::set_has_sigadded() {
  _has_bits_[0] |= 0x00000004u;
}
inline void add2SoilistResponse::clear_has_sigadded() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void add2SoilistResponse::clear_sigadded() {
  if (sigadded_ != &::google::protobuf::internal::kEmptyString) {
    sigadded_->clear();
  }
  clear_has_sigadded();
}
inline const ::std::string& add2SoilistResponse::sigadded() const {
  return *sigadded_;
}
inline void add2SoilistResponse::set_sigadded(const ::std::string& value) {
  set_has_sigadded();
  if (sigadded_ == &::google::protobuf::internal::kEmptyString) {
    sigadded_ = new ::std::string;
  }
  sigadded_->assign(value);
}
inline void add2SoilistResponse::set_sigadded(const char* value) {
  set_has_sigadded();
  if (sigadded_ == &::google::protobuf::internal::kEmptyString) {
    sigadded_ = new ::std::string;
  }
  sigadded_->assign(value);
}
inline void add2SoilistResponse::set_sigadded(const char* value, size_t size) {
  set_has_sigadded();
  if (sigadded_ == &::google::protobuf::internal::kEmptyString) {
    sigadded_ = new ::std::string;
  }
  sigadded_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* add2SoilistResponse::mutable_sigadded() {
  set_has_sigadded();
  if (sigadded_ == &::google::protobuf::internal::kEmptyString) {
    sigadded_ = new ::std::string;
  }
  return sigadded_;
}
inline ::std::string* add2SoilistResponse::release_sigadded() {
  clear_has_sigadded();
  if (sigadded_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sigadded_;
    sigadded_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void add2SoilistResponse::set_allocated_sigadded(::std::string* sigadded) {
  if (sigadded_ != &::google::protobuf::internal::kEmptyString) {
    delete sigadded_;
  }
  if (sigadded) {
    set_has_sigadded();
    sigadded_ = sigadded;
  } else {
    clear_has_sigadded();
    sigadded_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string targetIdentifier = 4;
inline bool add2SoilistResponse::has_targetidentifier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void add2SoilistResponse::set_has_targetidentifier() {
  _has_bits_[0] |= 0x00000008u;
}
inline void add2SoilistResponse::clear_has_targetidentifier() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void add2SoilistResponse::clear_targetidentifier() {
  if (targetidentifier_ != &::google::protobuf::internal::kEmptyString) {
    targetidentifier_->clear();
  }
  clear_has_targetidentifier();
}
inline const ::std::string& add2SoilistResponse::targetidentifier() const {
  return *targetidentifier_;
}
inline void add2SoilistResponse::set_targetidentifier(const ::std::string& value) {
  set_has_targetidentifier();
  if (targetidentifier_ == &::google::protobuf::internal::kEmptyString) {
    targetidentifier_ = new ::std::string;
  }
  targetidentifier_->assign(value);
}
inline void add2SoilistResponse::set_targetidentifier(const char* value) {
  set_has_targetidentifier();
  if (targetidentifier_ == &::google::protobuf::internal::kEmptyString) {
    targetidentifier_ = new ::std::string;
  }
  targetidentifier_->assign(value);
}
inline void add2SoilistResponse::set_targetidentifier(const char* value, size_t size) {
  set_has_targetidentifier();
  if (targetidentifier_ == &::google::protobuf::internal::kEmptyString) {
    targetidentifier_ = new ::std::string;
  }
  targetidentifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* add2SoilistResponse::mutable_targetidentifier() {
  set_has_targetidentifier();
  if (targetidentifier_ == &::google::protobuf::internal::kEmptyString) {
    targetidentifier_ = new ::std::string;
  }
  return targetidentifier_;
}
inline ::std::string* add2SoilistResponse::release_targetidentifier() {
  clear_has_targetidentifier();
  if (targetidentifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = targetidentifier_;
    targetidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void add2SoilistResponse::set_allocated_targetidentifier(::std::string* targetidentifier) {
  if (targetidentifier_ != &::google::protobuf::internal::kEmptyString) {
    delete targetidentifier_;
  }
  if (targetidentifier) {
    set_has_targetidentifier();
    targetidentifier_ = targetidentifier;
  } else {
    clear_has_targetidentifier();
    targetidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// generateJamFileResponse

// optional string msgName = 1 [default = "generateJamFileResponse"];
inline bool generateJamFileResponse::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void generateJamFileResponse::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void generateJamFileResponse::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void generateJamFileResponse::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& generateJamFileResponse::msgname() const {
  return *msgname_;
}
inline void generateJamFileResponse::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void generateJamFileResponse::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void generateJamFileResponse::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* generateJamFileResponse::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* generateJamFileResponse::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void generateJamFileResponse::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// required string requestID = 2;
inline bool generateJamFileResponse::has_requestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void generateJamFileResponse::set_has_requestid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void generateJamFileResponse::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void generateJamFileResponse::clear_requestid() {
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    requestid_->clear();
  }
  clear_has_requestid();
}
inline const ::std::string& generateJamFileResponse::requestid() const {
  return *requestid_;
}
inline void generateJamFileResponse::set_requestid(const ::std::string& value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void generateJamFileResponse::set_requestid(const char* value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void generateJamFileResponse::set_requestid(const char* value, size_t size) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* generateJamFileResponse::mutable_requestid() {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  return requestid_;
}
inline ::std::string* generateJamFileResponse::release_requestid() {
  clear_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = requestid_;
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void generateJamFileResponse::set_allocated_requestid(::std::string* requestid) {
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    delete requestid_;
  }
  if (requestid) {
    set_has_requestid();
    requestid_ = requestid;
  } else {
    clear_has_requestid();
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 clusterID = 3;
inline bool generateJamFileResponse::has_clusterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void generateJamFileResponse::set_has_clusterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void generateJamFileResponse::clear_has_clusterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void generateJamFileResponse::clear_clusterid() {
  clusterid_ = 0;
  clear_has_clusterid();
}
inline ::google::protobuf::int32 generateJamFileResponse::clusterid() const {
  return clusterid_;
}
inline void generateJamFileResponse::set_clusterid(::google::protobuf::int32 value) {
  set_has_clusterid();
  clusterid_ = value;
}

// required string jamFilePath = 4;
inline bool generateJamFileResponse::has_jamfilepath() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void generateJamFileResponse::set_has_jamfilepath() {
  _has_bits_[0] |= 0x00000008u;
}
inline void generateJamFileResponse::clear_has_jamfilepath() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void generateJamFileResponse::clear_jamfilepath() {
  if (jamfilepath_ != &::google::protobuf::internal::kEmptyString) {
    jamfilepath_->clear();
  }
  clear_has_jamfilepath();
}
inline const ::std::string& generateJamFileResponse::jamfilepath() const {
  return *jamfilepath_;
}
inline void generateJamFileResponse::set_jamfilepath(const ::std::string& value) {
  set_has_jamfilepath();
  if (jamfilepath_ == &::google::protobuf::internal::kEmptyString) {
    jamfilepath_ = new ::std::string;
  }
  jamfilepath_->assign(value);
}
inline void generateJamFileResponse::set_jamfilepath(const char* value) {
  set_has_jamfilepath();
  if (jamfilepath_ == &::google::protobuf::internal::kEmptyString) {
    jamfilepath_ = new ::std::string;
  }
  jamfilepath_->assign(value);
}
inline void generateJamFileResponse::set_jamfilepath(const char* value, size_t size) {
  set_has_jamfilepath();
  if (jamfilepath_ == &::google::protobuf::internal::kEmptyString) {
    jamfilepath_ = new ::std::string;
  }
  jamfilepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* generateJamFileResponse::mutable_jamfilepath() {
  set_has_jamfilepath();
  if (jamfilepath_ == &::google::protobuf::internal::kEmptyString) {
    jamfilepath_ = new ::std::string;
  }
  return jamfilepath_;
}
inline ::std::string* generateJamFileResponse::release_jamfilepath() {
  clear_has_jamfilepath();
  if (jamfilepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jamfilepath_;
    jamfilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void generateJamFileResponse::set_allocated_jamfilepath(::std::string* jamfilepath) {
  if (jamfilepath_ != &::google::protobuf::internal::kEmptyString) {
    delete jamfilepath_;
  }
  if (jamfilepath) {
    set_has_jamfilepath();
    jamfilepath_ = jamfilepath;
  } else {
    clear_has_jamfilepath();
    jamfilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// nullResponse

// optional string msgName = 1 [default = "nullResponse"];
inline bool nullResponse::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nullResponse::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nullResponse::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nullResponse::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& nullResponse::msgname() const {
  return *msgname_;
}
inline void nullResponse::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void nullResponse::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void nullResponse::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nullResponse::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* nullResponse::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void nullResponse::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// required string requestID = 2;
inline bool nullResponse::has_requestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nullResponse::set_has_requestid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nullResponse::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nullResponse::clear_requestid() {
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    requestid_->clear();
  }
  clear_has_requestid();
}
inline const ::std::string& nullResponse::requestid() const {
  return *requestid_;
}
inline void nullResponse::set_requestid(const ::std::string& value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void nullResponse::set_requestid(const char* value) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void nullResponse::set_requestid(const char* value, size_t size) {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nullResponse::mutable_requestid() {
  set_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    requestid_ = new ::std::string;
  }
  return requestid_;
}
inline ::std::string* nullResponse::release_requestid() {
  clear_has_requestid();
  if (requestid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = requestid_;
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void nullResponse::set_allocated_requestid(::std::string* requestid) {
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    delete requestid_;
  }
  if (requestid) {
    set_has_requestid();
    requestid_ = requestid;
  } else {
    clear_has_requestid();
    requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string requestMsgName = 3;
inline bool nullResponse::has_requestmsgname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nullResponse::set_has_requestmsgname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nullResponse::clear_has_requestmsgname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nullResponse::clear_requestmsgname() {
  if (requestmsgname_ != &::google::protobuf::internal::kEmptyString) {
    requestmsgname_->clear();
  }
  clear_has_requestmsgname();
}
inline const ::std::string& nullResponse::requestmsgname() const {
  return *requestmsgname_;
}
inline void nullResponse::set_requestmsgname(const ::std::string& value) {
  set_has_requestmsgname();
  if (requestmsgname_ == &::google::protobuf::internal::kEmptyString) {
    requestmsgname_ = new ::std::string;
  }
  requestmsgname_->assign(value);
}
inline void nullResponse::set_requestmsgname(const char* value) {
  set_has_requestmsgname();
  if (requestmsgname_ == &::google::protobuf::internal::kEmptyString) {
    requestmsgname_ = new ::std::string;
  }
  requestmsgname_->assign(value);
}
inline void nullResponse::set_requestmsgname(const char* value, size_t size) {
  set_has_requestmsgname();
  if (requestmsgname_ == &::google::protobuf::internal::kEmptyString) {
    requestmsgname_ = new ::std::string;
  }
  requestmsgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nullResponse::mutable_requestmsgname() {
  set_has_requestmsgname();
  if (requestmsgname_ == &::google::protobuf::internal::kEmptyString) {
    requestmsgname_ = new ::std::string;
  }
  return requestmsgname_;
}
inline ::std::string* nullResponse::release_requestmsgname() {
  clear_has_requestmsgname();
  if (requestmsgname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = requestmsgname_;
    requestmsgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void nullResponse::set_allocated_requestmsgname(::std::string* requestmsgname) {
  if (requestmsgname_ != &::google::protobuf::internal::kEmptyString) {
    delete requestmsgname_;
  }
  if (requestmsgname) {
    set_has_requestmsgname();
    requestmsgname_ = requestmsgname;
  } else {
    clear_has_requestmsgname();
    requestmsgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sit_queue_msg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SITQueueMessages_2eproto__INCLUDED
