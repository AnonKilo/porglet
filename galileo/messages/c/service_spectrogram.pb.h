// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_spectrogram.proto

#ifndef PROTOBUF_service_5fspectrogram_2eproto__INCLUDED
#define PROTOBUF_service_5fspectrogram_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "service_rxdataplane.pb.h"
// @@protoc_insertion_point(includes)

namespace service_spectrogram {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_5fspectrogram_2eproto();
void protobuf_AssignDesc_service_5fspectrogram_2eproto();
void protobuf_ShutdownFile_service_5fspectrogram_2eproto();

class SpectrogramConfig;

// ===================================================================

class SpectrogramConfig : public ::google::protobuf::Message {
 public:
  SpectrogramConfig();
  virtual ~SpectrogramConfig();

  SpectrogramConfig(const SpectrogramConfig& from);

  inline SpectrogramConfig& operator=(const SpectrogramConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpectrogramConfig& default_instance();

  void Swap(SpectrogramConfig* other);

  // implements Message ----------------------------------------------

  SpectrogramConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpectrogramConfig& from);
  void MergeFrom(const SpectrogramConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "service_spectrogram.SpectrogramConfig"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional .service_rxdataplane.IQIngestFilter IQFilter = 2;
  inline bool has_iqfilter() const;
  inline void clear_iqfilter();
  static const int kIQFilterFieldNumber = 2;
  inline const ::service_rxdataplane::IQIngestFilter& iqfilter() const;
  inline ::service_rxdataplane::IQIngestFilter* mutable_iqfilter();
  inline ::service_rxdataplane::IQIngestFilter* release_iqfilter();
  inline void set_allocated_iqfilter(::service_rxdataplane::IQIngestFilter* iqfilter);

  // optional int32 fftLength = 3 [default = 4096];
  inline bool has_fftlength() const;
  inline void clear_fftlength();
  static const int kFftLengthFieldNumber = 3;
  inline ::google::protobuf::int32 fftlength() const;
  inline void set_fftlength(::google::protobuf::int32 value);

  // optional int32 writeAux = 4 [default = 72];
  inline bool has_writeaux() const;
  inline void clear_writeaux();
  static const int kWriteAuxFieldNumber = 4;
  inline ::google::protobuf::int32 writeaux() const;
  inline void set_writeaux(::google::protobuf::int32 value);

  // optional int32 averages = 5 [default = 1];
  inline bool has_averages() const;
  inline void clear_averages();
  static const int kAveragesFieldNumber = 5;
  inline ::google::protobuf::int32 averages() const;
  inline void set_averages(::google::protobuf::int32 value);

  // optional .service_rxdataplane.implementationTypes implementation = 6 [default = GPP];
  inline bool has_implementation() const;
  inline void clear_implementation();
  static const int kImplementationFieldNumber = 6;
  inline ::service_rxdataplane::implementationTypes implementation() const;
  inline void set_implementation(::service_rxdataplane::implementationTypes value);

  // optional .service_rxdataplane.GPPConfigInfo GPPConfig = 7;
  inline bool has_gppconfig() const;
  inline void clear_gppconfig();
  static const int kGPPConfigFieldNumber = 7;
  inline const ::service_rxdataplane::GPPConfigInfo& gppconfig() const;
  inline ::service_rxdataplane::GPPConfigInfo* mutable_gppconfig();
  inline ::service_rxdataplane::GPPConfigInfo* release_gppconfig();
  inline void set_allocated_gppconfig(::service_rxdataplane::GPPConfigInfo* gppconfig);

  // @@protoc_insertion_point(class_scope:service_spectrogram.SpectrogramConfig)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_iqfilter();
  inline void clear_has_iqfilter();
  inline void set_has_fftlength();
  inline void clear_has_fftlength();
  inline void set_has_writeaux();
  inline void clear_has_writeaux();
  inline void set_has_averages();
  inline void clear_has_averages();
  inline void set_has_implementation();
  inline void clear_has_implementation();
  inline void set_has_gppconfig();
  inline void clear_has_gppconfig();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::service_rxdataplane::IQIngestFilter* iqfilter_;
  ::google::protobuf::int32 fftlength_;
  ::google::protobuf::int32 writeaux_;
  ::google::protobuf::int32 averages_;
  int implementation_;
  ::service_rxdataplane::GPPConfigInfo* gppconfig_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_service_5fspectrogram_2eproto();
  friend void protobuf_AssignDesc_service_5fspectrogram_2eproto();
  friend void protobuf_ShutdownFile_service_5fspectrogram_2eproto();

  void InitAsDefaultInstance();
  static SpectrogramConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// SpectrogramConfig

// optional string msgName = 1 [default = "service_spectrogram.SpectrogramConfig"];
inline bool SpectrogramConfig::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpectrogramConfig::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpectrogramConfig::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpectrogramConfig::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& SpectrogramConfig::msgname() const {
  return *msgname_;
}
inline void SpectrogramConfig::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SpectrogramConfig::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SpectrogramConfig::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpectrogramConfig::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* SpectrogramConfig::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void SpectrogramConfig::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional .service_rxdataplane.IQIngestFilter IQFilter = 2;
inline bool SpectrogramConfig::has_iqfilter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpectrogramConfig::set_has_iqfilter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpectrogramConfig::clear_has_iqfilter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpectrogramConfig::clear_iqfilter() {
  if (iqfilter_ != NULL) iqfilter_->::service_rxdataplane::IQIngestFilter::Clear();
  clear_has_iqfilter();
}
inline const ::service_rxdataplane::IQIngestFilter& SpectrogramConfig::iqfilter() const {
  return iqfilter_ != NULL ? *iqfilter_ : *default_instance_->iqfilter_;
}
inline ::service_rxdataplane::IQIngestFilter* SpectrogramConfig::mutable_iqfilter() {
  set_has_iqfilter();
  if (iqfilter_ == NULL) iqfilter_ = new ::service_rxdataplane::IQIngestFilter;
  return iqfilter_;
}
inline ::service_rxdataplane::IQIngestFilter* SpectrogramConfig::release_iqfilter() {
  clear_has_iqfilter();
  ::service_rxdataplane::IQIngestFilter* temp = iqfilter_;
  iqfilter_ = NULL;
  return temp;
}
inline void SpectrogramConfig::set_allocated_iqfilter(::service_rxdataplane::IQIngestFilter* iqfilter) {
  delete iqfilter_;
  iqfilter_ = iqfilter;
  if (iqfilter) {
    set_has_iqfilter();
  } else {
    clear_has_iqfilter();
  }
}

// optional int32 fftLength = 3 [default = 4096];
inline bool SpectrogramConfig::has_fftlength() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpectrogramConfig::set_has_fftlength() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpectrogramConfig::clear_has_fftlength() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpectrogramConfig::clear_fftlength() {
  fftlength_ = 4096;
  clear_has_fftlength();
}
inline ::google::protobuf::int32 SpectrogramConfig::fftlength() const {
  return fftlength_;
}
inline void SpectrogramConfig::set_fftlength(::google::protobuf::int32 value) {
  set_has_fftlength();
  fftlength_ = value;
}

// optional int32 writeAux = 4 [default = 72];
inline bool SpectrogramConfig::has_writeaux() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpectrogramConfig::set_has_writeaux() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpectrogramConfig::clear_has_writeaux() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpectrogramConfig::clear_writeaux() {
  writeaux_ = 72;
  clear_has_writeaux();
}
inline ::google::protobuf::int32 SpectrogramConfig::writeaux() const {
  return writeaux_;
}
inline void SpectrogramConfig::set_writeaux(::google::protobuf::int32 value) {
  set_has_writeaux();
  writeaux_ = value;
}

// optional int32 averages = 5 [default = 1];
inline bool SpectrogramConfig::has_averages() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpectrogramConfig::set_has_averages() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpectrogramConfig::clear_has_averages() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpectrogramConfig::clear_averages() {
  averages_ = 1;
  clear_has_averages();
}
inline ::google::protobuf::int32 SpectrogramConfig::averages() const {
  return averages_;
}
inline void SpectrogramConfig::set_averages(::google::protobuf::int32 value) {
  set_has_averages();
  averages_ = value;
}

// optional .service_rxdataplane.implementationTypes implementation = 6 [default = GPP];
inline bool SpectrogramConfig::has_implementation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SpectrogramConfig::set_has_implementation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SpectrogramConfig::clear_has_implementation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SpectrogramConfig::clear_implementation() {
  implementation_ = 1;
  clear_has_implementation();
}
inline ::service_rxdataplane::implementationTypes SpectrogramConfig::implementation() const {
  return static_cast< ::service_rxdataplane::implementationTypes >(implementation_);
}
inline void SpectrogramConfig::set_implementation(::service_rxdataplane::implementationTypes value) {
  assert(::service_rxdataplane::implementationTypes_IsValid(value));
  set_has_implementation();
  implementation_ = value;
}

// optional .service_rxdataplane.GPPConfigInfo GPPConfig = 7;
inline bool SpectrogramConfig::has_gppconfig() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SpectrogramConfig::set_has_gppconfig() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SpectrogramConfig::clear_has_gppconfig() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SpectrogramConfig::clear_gppconfig() {
  if (gppconfig_ != NULL) gppconfig_->::service_rxdataplane::GPPConfigInfo::Clear();
  clear_has_gppconfig();
}
inline const ::service_rxdataplane::GPPConfigInfo& SpectrogramConfig::gppconfig() const {
  return gppconfig_ != NULL ? *gppconfig_ : *default_instance_->gppconfig_;
}
inline ::service_rxdataplane::GPPConfigInfo* SpectrogramConfig::mutable_gppconfig() {
  set_has_gppconfig();
  if (gppconfig_ == NULL) gppconfig_ = new ::service_rxdataplane::GPPConfigInfo;
  return gppconfig_;
}
inline ::service_rxdataplane::GPPConfigInfo* SpectrogramConfig::release_gppconfig() {
  clear_has_gppconfig();
  ::service_rxdataplane::GPPConfigInfo* temp = gppconfig_;
  gppconfig_ = NULL;
  return temp;
}
inline void SpectrogramConfig::set_allocated_gppconfig(::service_rxdataplane::GPPConfigInfo* gppconfig) {
  delete gppconfig_;
  gppconfig_ = gppconfig;
  if (gppconfig) {
    set_has_gppconfig();
  } else {
    clear_has_gppconfig();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_spectrogram

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_5fspectrogram_2eproto__INCLUDED
