// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_energyburstdetector.proto

#ifndef PROTOBUF_service_5fenergyburstdetector_2eproto__INCLUDED
#define PROTOBUF_service_5fenergyburstdetector_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "service_rxdataplane.pb.h"
// @@protoc_insertion_point(includes)

namespace service_energyburstdetector {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_5fenergyburstdetector_2eproto();
void protobuf_AssignDesc_service_5fenergyburstdetector_2eproto();
void protobuf_ShutdownFile_service_5fenergyburstdetector_2eproto();

class EnergyBurstDetectorConfig;
class EnergyBurstDetectorConfig_BurstDetectionParams;
class EnergyBurstDetectorConfig_FFTParams;

// ===================================================================

class EnergyBurstDetectorConfig_BurstDetectionParams : public ::google::protobuf::Message {
 public:
  EnergyBurstDetectorConfig_BurstDetectionParams();
  virtual ~EnergyBurstDetectorConfig_BurstDetectionParams();

  EnergyBurstDetectorConfig_BurstDetectionParams(const EnergyBurstDetectorConfig_BurstDetectionParams& from);

  inline EnergyBurstDetectorConfig_BurstDetectionParams& operator=(const EnergyBurstDetectorConfig_BurstDetectionParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnergyBurstDetectorConfig_BurstDetectionParams& default_instance();

  void Swap(EnergyBurstDetectorConfig_BurstDetectionParams* other);

  // implements Message ----------------------------------------------

  EnergyBurstDetectorConfig_BurstDetectionParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnergyBurstDetectorConfig_BurstDetectionParams& from);
  void MergeFrom(const EnergyBurstDetectorConfig_BurstDetectionParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "service_energyburstdetector.BurstDetectionParams"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional double minDur = 2 [default = 0.002];
  inline bool has_mindur() const;
  inline void clear_mindur();
  static const int kMinDurFieldNumber = 2;
  inline double mindur() const;
  inline void set_mindur(double value);

  // optional double maxDur = 3 [default = 0.08];
  inline bool has_maxdur() const;
  inline void clear_maxdur();
  static const int kMaxDurFieldNumber = 3;
  inline double maxdur() const;
  inline void set_maxdur(double value);

  // optional double minBW = 4 [default = 10000];
  inline bool has_minbw() const;
  inline void clear_minbw();
  static const int kMinBWFieldNumber = 4;
  inline double minbw() const;
  inline void set_minbw(double value);

  // optional double freqRes = 5 [default = 3500];
  inline bool has_freqres() const;
  inline void clear_freqres();
  static const int kFreqResFieldNumber = 5;
  inline double freqres() const;
  inline void set_freqres(double value);

  // optional double timeRes = 6 [default = 0.0008];
  inline bool has_timeres() const;
  inline void clear_timeres();
  static const int kTimeResFieldNumber = 6;
  inline double timeres() const;
  inline void set_timeres(double value);

  // optional double SNRThreshDB = 7 [default = 5];
  inline bool has_snrthreshdb() const;
  inline void clear_snrthreshdb();
  static const int kSNRThreshDBFieldNumber = 7;
  inline double snrthreshdb() const;
  inline void set_snrthreshdb(double value);

  // optional double gradientThresh = 8 [default = 100];
  inline bool has_gradientthresh() const;
  inline void clear_gradientthresh();
  static const int kGradientThreshFieldNumber = 8;
  inline double gradientthresh() const;
  inline void set_gradientthresh(double value);

  // @@protoc_insertion_point(class_scope:service_energyburstdetector.EnergyBurstDetectorConfig.BurstDetectionParams)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_mindur();
  inline void clear_has_mindur();
  inline void set_has_maxdur();
  inline void clear_has_maxdur();
  inline void set_has_minbw();
  inline void clear_has_minbw();
  inline void set_has_freqres();
  inline void clear_has_freqres();
  inline void set_has_timeres();
  inline void clear_has_timeres();
  inline void set_has_snrthreshdb();
  inline void clear_has_snrthreshdb();
  inline void set_has_gradientthresh();
  inline void clear_has_gradientthresh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  double mindur_;
  double maxdur_;
  double minbw_;
  double freqres_;
  double timeres_;
  double snrthreshdb_;
  double gradientthresh_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_service_5fenergyburstdetector_2eproto();
  friend void protobuf_AssignDesc_service_5fenergyburstdetector_2eproto();
  friend void protobuf_ShutdownFile_service_5fenergyburstdetector_2eproto();

  void InitAsDefaultInstance();
  static EnergyBurstDetectorConfig_BurstDetectionParams* default_instance_;
};
// -------------------------------------------------------------------

class EnergyBurstDetectorConfig_FFTParams : public ::google::protobuf::Message {
 public:
  EnergyBurstDetectorConfig_FFTParams();
  virtual ~EnergyBurstDetectorConfig_FFTParams();

  EnergyBurstDetectorConfig_FFTParams(const EnergyBurstDetectorConfig_FFTParams& from);

  inline EnergyBurstDetectorConfig_FFTParams& operator=(const EnergyBurstDetectorConfig_FFTParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnergyBurstDetectorConfig_FFTParams& default_instance();

  void Swap(EnergyBurstDetectorConfig_FFTParams* other);

  // implements Message ----------------------------------------------

  EnergyBurstDetectorConfig_FFTParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnergyBurstDetectorConfig_FFTParams& from);
  void MergeFrom(const EnergyBurstDetectorConfig_FFTParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "service_energyburstdetector.FFTParams"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional double overlap = 2 [default = 0.5];
  inline bool has_overlap() const;
  inline void clear_overlap();
  static const int kOverlapFieldNumber = 2;
  inline double overlap() const;
  inline void set_overlap(double value);

  // optional int32 averages = 3 [default = 4];
  inline bool has_averages() const;
  inline void clear_averages();
  static const int kAveragesFieldNumber = 3;
  inline ::google::protobuf::int32 averages() const;
  inline void set_averages(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:service_energyburstdetector.EnergyBurstDetectorConfig.FFTParams)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_overlap();
  inline void clear_has_overlap();
  inline void set_has_averages();
  inline void clear_has_averages();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  double overlap_;
  ::google::protobuf::int32 averages_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_service_5fenergyburstdetector_2eproto();
  friend void protobuf_AssignDesc_service_5fenergyburstdetector_2eproto();
  friend void protobuf_ShutdownFile_service_5fenergyburstdetector_2eproto();

  void InitAsDefaultInstance();
  static EnergyBurstDetectorConfig_FFTParams* default_instance_;
};
// -------------------------------------------------------------------

class EnergyBurstDetectorConfig : public ::google::protobuf::Message {
 public:
  EnergyBurstDetectorConfig();
  virtual ~EnergyBurstDetectorConfig();

  EnergyBurstDetectorConfig(const EnergyBurstDetectorConfig& from);

  inline EnergyBurstDetectorConfig& operator=(const EnergyBurstDetectorConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnergyBurstDetectorConfig& default_instance();

  void Swap(EnergyBurstDetectorConfig* other);

  // implements Message ----------------------------------------------

  EnergyBurstDetectorConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnergyBurstDetectorConfig& from);
  void MergeFrom(const EnergyBurstDetectorConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EnergyBurstDetectorConfig_BurstDetectionParams BurstDetectionParams;
  typedef EnergyBurstDetectorConfig_FFTParams FFTParams;

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "service_energyburstdetector.EnergyBurstDetectorConfig"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional .service_rxdataplane.IQIngestFilter IQFilter = 2;
  inline bool has_iqfilter() const;
  inline void clear_iqfilter();
  static const int kIQFilterFieldNumber = 2;
  inline const ::service_rxdataplane::IQIngestFilter& iqfilter() const;
  inline ::service_rxdataplane::IQIngestFilter* mutable_iqfilter();
  inline ::service_rxdataplane::IQIngestFilter* release_iqfilter();
  inline void set_allocated_iqfilter(::service_rxdataplane::IQIngestFilter* iqfilter);

  // optional .service_energyburstdetector.EnergyBurstDetectorConfig.BurstDetectionParams burstParams = 3;
  inline bool has_burstparams() const;
  inline void clear_burstparams();
  static const int kBurstParamsFieldNumber = 3;
  inline const ::service_energyburstdetector::EnergyBurstDetectorConfig_BurstDetectionParams& burstparams() const;
  inline ::service_energyburstdetector::EnergyBurstDetectorConfig_BurstDetectionParams* mutable_burstparams();
  inline ::service_energyburstdetector::EnergyBurstDetectorConfig_BurstDetectionParams* release_burstparams();
  inline void set_allocated_burstparams(::service_energyburstdetector::EnergyBurstDetectorConfig_BurstDetectionParams* burstparams);

  // optional int32 writeAux = 4 [default = 72];
  inline bool has_writeaux() const;
  inline void clear_writeaux();
  static const int kWriteAuxFieldNumber = 4;
  inline ::google::protobuf::int32 writeaux() const;
  inline void set_writeaux(::google::protobuf::int32 value);

  // optional string segmenterName = 5 [default = "UHF"];
  inline bool has_segmentername() const;
  inline void clear_segmentername();
  static const int kSegmenterNameFieldNumber = 5;
  inline const ::std::string& segmentername() const;
  inline void set_segmentername(const ::std::string& value);
  inline void set_segmentername(const char* value);
  inline void set_segmentername(const char* value, size_t size);
  inline ::std::string* mutable_segmentername();
  inline ::std::string* release_segmentername();
  inline void set_allocated_segmentername(::std::string* segmentername);

  // optional .service_energyburstdetector.EnergyBurstDetectorConfig.FFTParams fftParams = 6;
  inline bool has_fftparams() const;
  inline void clear_fftparams();
  static const int kFftParamsFieldNumber = 6;
  inline const ::service_energyburstdetector::EnergyBurstDetectorConfig_FFTParams& fftparams() const;
  inline ::service_energyburstdetector::EnergyBurstDetectorConfig_FFTParams* mutable_fftparams();
  inline ::service_energyburstdetector::EnergyBurstDetectorConfig_FFTParams* release_fftparams();
  inline void set_allocated_fftparams(::service_energyburstdetector::EnergyBurstDetectorConfig_FFTParams* fftparams);

  // @@protoc_insertion_point(class_scope:service_energyburstdetector.EnergyBurstDetectorConfig)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_iqfilter();
  inline void clear_has_iqfilter();
  inline void set_has_burstparams();
  inline void clear_has_burstparams();
  inline void set_has_writeaux();
  inline void clear_has_writeaux();
  inline void set_has_segmentername();
  inline void clear_has_segmentername();
  inline void set_has_fftparams();
  inline void clear_has_fftparams();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::service_rxdataplane::IQIngestFilter* iqfilter_;
  ::service_energyburstdetector::EnergyBurstDetectorConfig_BurstDetectionParams* burstparams_;
  ::std::string* segmentername_;
  static ::std::string* _default_segmentername_;
  ::service_energyburstdetector::EnergyBurstDetectorConfig_FFTParams* fftparams_;
  ::google::protobuf::int32 writeaux_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_service_5fenergyburstdetector_2eproto();
  friend void protobuf_AssignDesc_service_5fenergyburstdetector_2eproto();
  friend void protobuf_ShutdownFile_service_5fenergyburstdetector_2eproto();

  void InitAsDefaultInstance();
  static EnergyBurstDetectorConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// EnergyBurstDetectorConfig_BurstDetectionParams

// optional string msgName = 1 [default = "service_energyburstdetector.BurstDetectionParams"];
inline bool EnergyBurstDetectorConfig_BurstDetectionParams::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& EnergyBurstDetectorConfig_BurstDetectionParams::msgname() const {
  return *msgname_;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EnergyBurstDetectorConfig_BurstDetectionParams::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* EnergyBurstDetectorConfig_BurstDetectionParams::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional double minDur = 2 [default = 0.002];
inline bool EnergyBurstDetectorConfig_BurstDetectionParams::has_mindur() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_has_mindur() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::clear_has_mindur() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::clear_mindur() {
  mindur_ = 0.002;
  clear_has_mindur();
}
inline double EnergyBurstDetectorConfig_BurstDetectionParams::mindur() const {
  return mindur_;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_mindur(double value) {
  set_has_mindur();
  mindur_ = value;
}

// optional double maxDur = 3 [default = 0.08];
inline bool EnergyBurstDetectorConfig_BurstDetectionParams::has_maxdur() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_has_maxdur() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::clear_has_maxdur() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::clear_maxdur() {
  maxdur_ = 0.08;
  clear_has_maxdur();
}
inline double EnergyBurstDetectorConfig_BurstDetectionParams::maxdur() const {
  return maxdur_;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_maxdur(double value) {
  set_has_maxdur();
  maxdur_ = value;
}

// optional double minBW = 4 [default = 10000];
inline bool EnergyBurstDetectorConfig_BurstDetectionParams::has_minbw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_has_minbw() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::clear_has_minbw() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::clear_minbw() {
  minbw_ = 10000;
  clear_has_minbw();
}
inline double EnergyBurstDetectorConfig_BurstDetectionParams::minbw() const {
  return minbw_;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_minbw(double value) {
  set_has_minbw();
  minbw_ = value;
}

// optional double freqRes = 5 [default = 3500];
inline bool EnergyBurstDetectorConfig_BurstDetectionParams::has_freqres() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_has_freqres() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::clear_has_freqres() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::clear_freqres() {
  freqres_ = 3500;
  clear_has_freqres();
}
inline double EnergyBurstDetectorConfig_BurstDetectionParams::freqres() const {
  return freqres_;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_freqres(double value) {
  set_has_freqres();
  freqres_ = value;
}

// optional double timeRes = 6 [default = 0.0008];
inline bool EnergyBurstDetectorConfig_BurstDetectionParams::has_timeres() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_has_timeres() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::clear_has_timeres() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::clear_timeres() {
  timeres_ = 0.0008;
  clear_has_timeres();
}
inline double EnergyBurstDetectorConfig_BurstDetectionParams::timeres() const {
  return timeres_;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_timeres(double value) {
  set_has_timeres();
  timeres_ = value;
}

// optional double SNRThreshDB = 7 [default = 5];
inline bool EnergyBurstDetectorConfig_BurstDetectionParams::has_snrthreshdb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_has_snrthreshdb() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::clear_has_snrthreshdb() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::clear_snrthreshdb() {
  snrthreshdb_ = 5;
  clear_has_snrthreshdb();
}
inline double EnergyBurstDetectorConfig_BurstDetectionParams::snrthreshdb() const {
  return snrthreshdb_;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_snrthreshdb(double value) {
  set_has_snrthreshdb();
  snrthreshdb_ = value;
}

// optional double gradientThresh = 8 [default = 100];
inline bool EnergyBurstDetectorConfig_BurstDetectionParams::has_gradientthresh() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_has_gradientthresh() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::clear_has_gradientthresh() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::clear_gradientthresh() {
  gradientthresh_ = 100;
  clear_has_gradientthresh();
}
inline double EnergyBurstDetectorConfig_BurstDetectionParams::gradientthresh() const {
  return gradientthresh_;
}
inline void EnergyBurstDetectorConfig_BurstDetectionParams::set_gradientthresh(double value) {
  set_has_gradientthresh();
  gradientthresh_ = value;
}

// -------------------------------------------------------------------

// EnergyBurstDetectorConfig_FFTParams

// optional string msgName = 1 [default = "service_energyburstdetector.FFTParams"];
inline bool EnergyBurstDetectorConfig_FFTParams::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnergyBurstDetectorConfig_FFTParams::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnergyBurstDetectorConfig_FFTParams::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnergyBurstDetectorConfig_FFTParams::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& EnergyBurstDetectorConfig_FFTParams::msgname() const {
  return *msgname_;
}
inline void EnergyBurstDetectorConfig_FFTParams::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void EnergyBurstDetectorConfig_FFTParams::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void EnergyBurstDetectorConfig_FFTParams::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EnergyBurstDetectorConfig_FFTParams::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* EnergyBurstDetectorConfig_FFTParams::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void EnergyBurstDetectorConfig_FFTParams::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional double overlap = 2 [default = 0.5];
inline bool EnergyBurstDetectorConfig_FFTParams::has_overlap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnergyBurstDetectorConfig_FFTParams::set_has_overlap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnergyBurstDetectorConfig_FFTParams::clear_has_overlap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnergyBurstDetectorConfig_FFTParams::clear_overlap() {
  overlap_ = 0.5;
  clear_has_overlap();
}
inline double EnergyBurstDetectorConfig_FFTParams::overlap() const {
  return overlap_;
}
inline void EnergyBurstDetectorConfig_FFTParams::set_overlap(double value) {
  set_has_overlap();
  overlap_ = value;
}

// optional int32 averages = 3 [default = 4];
inline bool EnergyBurstDetectorConfig_FFTParams::has_averages() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnergyBurstDetectorConfig_FFTParams::set_has_averages() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnergyBurstDetectorConfig_FFTParams::clear_has_averages() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnergyBurstDetectorConfig_FFTParams::clear_averages() {
  averages_ = 4;
  clear_has_averages();
}
inline ::google::protobuf::int32 EnergyBurstDetectorConfig_FFTParams::averages() const {
  return averages_;
}
inline void EnergyBurstDetectorConfig_FFTParams::set_averages(::google::protobuf::int32 value) {
  set_has_averages();
  averages_ = value;
}

// -------------------------------------------------------------------

// EnergyBurstDetectorConfig

// optional string msgName = 1 [default = "service_energyburstdetector.EnergyBurstDetectorConfig"];
inline bool EnergyBurstDetectorConfig::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnergyBurstDetectorConfig::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnergyBurstDetectorConfig::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnergyBurstDetectorConfig::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& EnergyBurstDetectorConfig::msgname() const {
  return *msgname_;
}
inline void EnergyBurstDetectorConfig::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void EnergyBurstDetectorConfig::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void EnergyBurstDetectorConfig::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EnergyBurstDetectorConfig::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* EnergyBurstDetectorConfig::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void EnergyBurstDetectorConfig::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional .service_rxdataplane.IQIngestFilter IQFilter = 2;
inline bool EnergyBurstDetectorConfig::has_iqfilter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnergyBurstDetectorConfig::set_has_iqfilter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnergyBurstDetectorConfig::clear_has_iqfilter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnergyBurstDetectorConfig::clear_iqfilter() {
  if (iqfilter_ != NULL) iqfilter_->::service_rxdataplane::IQIngestFilter::Clear();
  clear_has_iqfilter();
}
inline const ::service_rxdataplane::IQIngestFilter& EnergyBurstDetectorConfig::iqfilter() const {
  return iqfilter_ != NULL ? *iqfilter_ : *default_instance_->iqfilter_;
}
inline ::service_rxdataplane::IQIngestFilter* EnergyBurstDetectorConfig::mutable_iqfilter() {
  set_has_iqfilter();
  if (iqfilter_ == NULL) iqfilter_ = new ::service_rxdataplane::IQIngestFilter;
  return iqfilter_;
}
inline ::service_rxdataplane::IQIngestFilter* EnergyBurstDetectorConfig::release_iqfilter() {
  clear_has_iqfilter();
  ::service_rxdataplane::IQIngestFilter* temp = iqfilter_;
  iqfilter_ = NULL;
  return temp;
}
inline void EnergyBurstDetectorConfig::set_allocated_iqfilter(::service_rxdataplane::IQIngestFilter* iqfilter) {
  delete iqfilter_;
  iqfilter_ = iqfilter;
  if (iqfilter) {
    set_has_iqfilter();
  } else {
    clear_has_iqfilter();
  }
}

// optional .service_energyburstdetector.EnergyBurstDetectorConfig.BurstDetectionParams burstParams = 3;
inline bool EnergyBurstDetectorConfig::has_burstparams() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnergyBurstDetectorConfig::set_has_burstparams() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnergyBurstDetectorConfig::clear_has_burstparams() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnergyBurstDetectorConfig::clear_burstparams() {
  if (burstparams_ != NULL) burstparams_->::service_energyburstdetector::EnergyBurstDetectorConfig_BurstDetectionParams::Clear();
  clear_has_burstparams();
}
inline const ::service_energyburstdetector::EnergyBurstDetectorConfig_BurstDetectionParams& EnergyBurstDetectorConfig::burstparams() const {
  return burstparams_ != NULL ? *burstparams_ : *default_instance_->burstparams_;
}
inline ::service_energyburstdetector::EnergyBurstDetectorConfig_BurstDetectionParams* EnergyBurstDetectorConfig::mutable_burstparams() {
  set_has_burstparams();
  if (burstparams_ == NULL) burstparams_ = new ::service_energyburstdetector::EnergyBurstDetectorConfig_BurstDetectionParams;
  return burstparams_;
}
inline ::service_energyburstdetector::EnergyBurstDetectorConfig_BurstDetectionParams* EnergyBurstDetectorConfig::release_burstparams() {
  clear_has_burstparams();
  ::service_energyburstdetector::EnergyBurstDetectorConfig_BurstDetectionParams* temp = burstparams_;
  burstparams_ = NULL;
  return temp;
}
inline void EnergyBurstDetectorConfig::set_allocated_burstparams(::service_energyburstdetector::EnergyBurstDetectorConfig_BurstDetectionParams* burstparams) {
  delete burstparams_;
  burstparams_ = burstparams;
  if (burstparams) {
    set_has_burstparams();
  } else {
    clear_has_burstparams();
  }
}

// optional int32 writeAux = 4 [default = 72];
inline bool EnergyBurstDetectorConfig::has_writeaux() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnergyBurstDetectorConfig::set_has_writeaux() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnergyBurstDetectorConfig::clear_has_writeaux() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnergyBurstDetectorConfig::clear_writeaux() {
  writeaux_ = 72;
  clear_has_writeaux();
}
inline ::google::protobuf::int32 EnergyBurstDetectorConfig::writeaux() const {
  return writeaux_;
}
inline void EnergyBurstDetectorConfig::set_writeaux(::google::protobuf::int32 value) {
  set_has_writeaux();
  writeaux_ = value;
}

// optional string segmenterName = 5 [default = "UHF"];
inline bool EnergyBurstDetectorConfig::has_segmentername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EnergyBurstDetectorConfig::set_has_segmentername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EnergyBurstDetectorConfig::clear_has_segmentername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EnergyBurstDetectorConfig::clear_segmentername() {
  if (segmentername_ != _default_segmentername_) {
    segmentername_->assign(*_default_segmentername_);
  }
  clear_has_segmentername();
}
inline const ::std::string& EnergyBurstDetectorConfig::segmentername() const {
  return *segmentername_;
}
inline void EnergyBurstDetectorConfig::set_segmentername(const ::std::string& value) {
  set_has_segmentername();
  if (segmentername_ == _default_segmentername_) {
    segmentername_ = new ::std::string;
  }
  segmentername_->assign(value);
}
inline void EnergyBurstDetectorConfig::set_segmentername(const char* value) {
  set_has_segmentername();
  if (segmentername_ == _default_segmentername_) {
    segmentername_ = new ::std::string;
  }
  segmentername_->assign(value);
}
inline void EnergyBurstDetectorConfig::set_segmentername(const char* value, size_t size) {
  set_has_segmentername();
  if (segmentername_ == _default_segmentername_) {
    segmentername_ = new ::std::string;
  }
  segmentername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EnergyBurstDetectorConfig::mutable_segmentername() {
  set_has_segmentername();
  if (segmentername_ == _default_segmentername_) {
    segmentername_ = new ::std::string(*_default_segmentername_);
  }
  return segmentername_;
}
inline ::std::string* EnergyBurstDetectorConfig::release_segmentername() {
  clear_has_segmentername();
  if (segmentername_ == _default_segmentername_) {
    return NULL;
  } else {
    ::std::string* temp = segmentername_;
    segmentername_ = const_cast< ::std::string*>(_default_segmentername_);
    return temp;
  }
}
inline void EnergyBurstDetectorConfig::set_allocated_segmentername(::std::string* segmentername) {
  if (segmentername_ != _default_segmentername_) {
    delete segmentername_;
  }
  if (segmentername) {
    set_has_segmentername();
    segmentername_ = segmentername;
  } else {
    clear_has_segmentername();
    segmentername_ = const_cast< ::std::string*>(_default_segmentername_);
  }
}

// optional .service_energyburstdetector.EnergyBurstDetectorConfig.FFTParams fftParams = 6;
inline bool EnergyBurstDetectorConfig::has_fftparams() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EnergyBurstDetectorConfig::set_has_fftparams() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EnergyBurstDetectorConfig::clear_has_fftparams() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EnergyBurstDetectorConfig::clear_fftparams() {
  if (fftparams_ != NULL) fftparams_->::service_energyburstdetector::EnergyBurstDetectorConfig_FFTParams::Clear();
  clear_has_fftparams();
}
inline const ::service_energyburstdetector::EnergyBurstDetectorConfig_FFTParams& EnergyBurstDetectorConfig::fftparams() const {
  return fftparams_ != NULL ? *fftparams_ : *default_instance_->fftparams_;
}
inline ::service_energyburstdetector::EnergyBurstDetectorConfig_FFTParams* EnergyBurstDetectorConfig::mutable_fftparams() {
  set_has_fftparams();
  if (fftparams_ == NULL) fftparams_ = new ::service_energyburstdetector::EnergyBurstDetectorConfig_FFTParams;
  return fftparams_;
}
inline ::service_energyburstdetector::EnergyBurstDetectorConfig_FFTParams* EnergyBurstDetectorConfig::release_fftparams() {
  clear_has_fftparams();
  ::service_energyburstdetector::EnergyBurstDetectorConfig_FFTParams* temp = fftparams_;
  fftparams_ = NULL;
  return temp;
}
inline void EnergyBurstDetectorConfig::set_allocated_fftparams(::service_energyburstdetector::EnergyBurstDetectorConfig_FFTParams* fftparams) {
  delete fftparams_;
  fftparams_ = fftparams;
  if (fftparams) {
    set_has_fftparams();
  } else {
    clear_has_fftparams();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_energyburstdetector

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_5fenergyburstdetector_2eproto__INCLUDED
