// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SettingsExternalIF.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SettingsExternalIF.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace settings_exif_msg {

namespace {

const ::google::protobuf::Descriptor* RequestStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusUpdate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SettingsExternalIF_2eproto() {
  protobuf_AddDesc_SettingsExternalIF_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SettingsExternalIF.proto");
  GOOGLE_CHECK(file != NULL);
  RequestStatus_descriptor_ = file->message_type(0);
  static const int RequestStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStatus, msg_type_),
  };
  RequestStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestStatus_descriptor_,
      RequestStatus::default_instance_,
      RequestStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestStatus));
  StatusUpdate_descriptor_ = file->message_type(1);
  static const int StatusUpdate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusUpdate, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusUpdate, rf_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusUpdate, spectral_inv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusUpdate, activated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusUpdate, if_freq_),
  };
  StatusUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusUpdate_descriptor_,
      StatusUpdate::default_instance_,
      StatusUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusUpdate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SettingsExternalIF_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestStatus_descriptor_, &RequestStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusUpdate_descriptor_, &StatusUpdate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SettingsExternalIF_2eproto() {
  delete RequestStatus::default_instance_;
  delete RequestStatus_reflection_;
  delete RequestStatus::_default_msgname_;
  delete StatusUpdate::default_instance_;
  delete StatusUpdate_reflection_;
  delete StatusUpdate::_default_msgname_;
}

void protobuf_AddDesc_SettingsExternalIF_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030SettingsExternalIF.proto\022\021settings_exi"
    "f_msg\"E\n\rRequestStatus\022\037\n\007msgName\030\001 \001(\t:"
    "\016REQUEST_STATUS\022\023\n\010msg_type\030\002 \001(\005:\0010\"\214\001\n"
    "\014StatusUpdate\022\036\n\007msgName\030\001 \001(\t:\rSTATUS_U"
    "PDATE\022\017\n\007rf_freq\030\002 \001(\002\022\033\n\014spectral_inv\030\003"
    " \001(\010:\005false\022\030\n\tactivated\030\004 \001(\010:\005false\022\024\n"
    "\007if_freq\030\005 \001(\002:\003160B\025\n\023fv.protos.kepsvis"
    "or", 282);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SettingsExternalIF.proto", &protobuf_RegisterTypes);
  RequestStatus::_default_msgname_ =
      new ::std::string("REQUEST_STATUS", 14);
  RequestStatus::default_instance_ = new RequestStatus();
  StatusUpdate::_default_msgname_ =
      new ::std::string("STATUS_UPDATE", 13);
  StatusUpdate::default_instance_ = new StatusUpdate();
  RequestStatus::default_instance_->InitAsDefaultInstance();
  StatusUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SettingsExternalIF_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SettingsExternalIF_2eproto {
  StaticDescriptorInitializer_SettingsExternalIF_2eproto() {
    protobuf_AddDesc_SettingsExternalIF_2eproto();
  }
} static_descriptor_initializer_SettingsExternalIF_2eproto_;

// ===================================================================

::std::string* RequestStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RequestStatus::kMsgNameFieldNumber;
const int RequestStatus::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

RequestStatus::RequestStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestStatus::InitAsDefaultInstance() {
}

RequestStatus::RequestStatus(const RequestStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  msg_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestStatus::~RequestStatus() {
  SharedDtor();
}

void RequestStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void RequestStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestStatus_descriptor_;
}

const RequestStatus& RequestStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SettingsExternalIF_2eproto();
  return *default_instance_;
}

RequestStatus* RequestStatus::default_instance_ = NULL;

RequestStatus* RequestStatus::New() const {
  return new RequestStatus;
}

void RequestStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    msg_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "REQUEST_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msg_type;
        break;
      }

      // optional int32 msg_type = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "REQUEST_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 msg_type = 2 [default = 0];
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msg_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "REQUEST_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 msg_type = 2 [default = 0];
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->msg_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "REQUEST_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 msg_type = 2 [default = 0];
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestStatus::MergeFrom(const RequestStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStatus::CopyFrom(const RequestStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStatus::IsInitialized() const {

  return true;
}

void RequestStatus::Swap(RequestStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestStatus_descriptor_;
  metadata.reflection = RequestStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* StatusUpdate::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int StatusUpdate::kMsgNameFieldNumber;
const int StatusUpdate::kRfFreqFieldNumber;
const int StatusUpdate::kSpectralInvFieldNumber;
const int StatusUpdate::kActivatedFieldNumber;
const int StatusUpdate::kIfFreqFieldNumber;
#endif  // !_MSC_VER

StatusUpdate::StatusUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusUpdate::InitAsDefaultInstance() {
}

StatusUpdate::StatusUpdate(const StatusUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusUpdate::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  rf_freq_ = 0;
  spectral_inv_ = false;
  activated_ = false;
  if_freq_ = 160;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusUpdate::~StatusUpdate() {
  SharedDtor();
}

void StatusUpdate::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void StatusUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusUpdate_descriptor_;
}

const StatusUpdate& StatusUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SettingsExternalIF_2eproto();
  return *default_instance_;
}

StatusUpdate* StatusUpdate::default_instance_ = NULL;

StatusUpdate* StatusUpdate::New() const {
  return new StatusUpdate;
}

void StatusUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    rf_freq_ = 0;
    spectral_inv_ = false;
    activated_ = false;
    if_freq_ = 160;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "STATUS_UPDATE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_rf_freq;
        break;
      }

      // optional float rf_freq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rf_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rf_freq_)));
          set_has_rf_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_spectral_inv;
        break;
      }

      // optional bool spectral_inv = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spectral_inv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spectral_inv_)));
          set_has_spectral_inv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_activated;
        break;
      }

      // optional bool activated = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activated_)));
          set_has_activated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_if_freq;
        break;
      }

      // optional float if_freq = 5 [default = 160];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_if_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &if_freq_)));
          set_has_if_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "STATUS_UPDATE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional float rf_freq = 2;
  if (has_rf_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rf_freq(), output);
  }

  // optional bool spectral_inv = 3 [default = false];
  if (has_spectral_inv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->spectral_inv(), output);
  }

  // optional bool activated = 4 [default = false];
  if (has_activated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->activated(), output);
  }

  // optional float if_freq = 5 [default = 160];
  if (has_if_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->if_freq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "STATUS_UPDATE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional float rf_freq = 2;
  if (has_rf_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rf_freq(), target);
  }

  // optional bool spectral_inv = 3 [default = false];
  if (has_spectral_inv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->spectral_inv(), target);
  }

  // optional bool activated = 4 [default = false];
  if (has_activated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->activated(), target);
  }

  // optional float if_freq = 5 [default = 160];
  if (has_if_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->if_freq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "STATUS_UPDATE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional float rf_freq = 2;
    if (has_rf_freq()) {
      total_size += 1 + 4;
    }

    // optional bool spectral_inv = 3 [default = false];
    if (has_spectral_inv()) {
      total_size += 1 + 1;
    }

    // optional bool activated = 4 [default = false];
    if (has_activated()) {
      total_size += 1 + 1;
    }

    // optional float if_freq = 5 [default = 160];
    if (has_if_freq()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusUpdate::MergeFrom(const StatusUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_rf_freq()) {
      set_rf_freq(from.rf_freq());
    }
    if (from.has_spectral_inv()) {
      set_spectral_inv(from.spectral_inv());
    }
    if (from.has_activated()) {
      set_activated(from.activated());
    }
    if (from.has_if_freq()) {
      set_if_freq(from.if_freq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusUpdate::CopyFrom(const StatusUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusUpdate::IsInitialized() const {

  return true;
}

void StatusUpdate::Swap(StatusUpdate* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(rf_freq_, other->rf_freq_);
    std::swap(spectral_inv_, other->spectral_inv_);
    std::swap(activated_, other->activated_);
    std::swap(if_freq_, other->if_freq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusUpdate_descriptor_;
  metadata.reflection = StatusUpdate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace settings_exif_msg

// @@protoc_insertion_point(global_scope)
