// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceInfrastructureExclusive.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServiceInfrastructureExclusive.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace service_infrastructure {

namespace {

const ::google::protobuf::Descriptor* ServiceEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWResponseTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWResponseTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* CapabilityResponseTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CapabilityResponseTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadioControlRequestTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadioControlRequestTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalEventTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalEventTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductResponseTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductResponseTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* ESProductTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ESProductTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* InfrastructureEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfrastructureEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductRequestTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductRequestTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWRequestTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWRequestTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* CapabilityRequestTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CapabilityRequestTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransmitterControlRequestTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransmitterControlRequestTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadioControlResponseTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadioControlResponseTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* SigFramesTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SigFramesTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadioDataTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadioDataTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeoTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServiceInfrastructureExclusive_2eproto() {
  protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServiceInfrastructureExclusive.proto");
  GOOGLE_CHECK(file != NULL);
  ServiceEnvelope_descriptor_ = file->message_type(0);
  static const int ServiceEnvelope_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceEnvelope, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceEnvelope, handshake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceEnvelope, ew_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceEnvelope, product_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceEnvelope, radio_control_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceEnvelope, signal_event_),
  };
  ServiceEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceEnvelope_descriptor_,
      ServiceEnvelope::default_instance_,
      ServiceEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceEnvelope));
  EWResponseTopic_descriptor_ = file->message_type(1);
  static const int EWResponseTopic_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWResponseTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWResponseTopic, nack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWResponseTopic, ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWResponseTopic, ew_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWResponseTopic, ew_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWResponseTopic, ew_option_delete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWResponseTopic, register_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWResponseTopic, new_signal_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWResponseTopic, ew_capabilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWResponseTopic, ew_transmitting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWResponseTopic, ew_technique_descriptions_),
  };
  EWResponseTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWResponseTopic_descriptor_,
      EWResponseTopic::default_instance_,
      EWResponseTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWResponseTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWResponseTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWResponseTopic));
  CapabilityResponseTopic_descriptor_ = file->message_type(2);
  static const int CapabilityResponseTopic_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilityResponseTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilityResponseTopic, nack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilityResponseTopic, ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilityResponseTopic, ew_capability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilityResponseTopic, ew_capability_unregister_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilityResponseTopic, hop_attack_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilityResponseTopic, ew_capability_transmitting_),
  };
  CapabilityResponseTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CapabilityResponseTopic_descriptor_,
      CapabilityResponseTopic::default_instance_,
      CapabilityResponseTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilityResponseTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilityResponseTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CapabilityResponseTopic));
  RadioControlRequestTopic_descriptor_ = file->message_type(3);
  static const int RadioControlRequestTopic_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioControlRequestTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioControlRequestTopic, dwell_scan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioControlRequestTopic, rx_query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioControlRequestTopic, receiver_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioControlRequestTopic, receiver_release_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioControlRequestTopic, rx_command_request_),
  };
  RadioControlRequestTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadioControlRequestTopic_descriptor_,
      RadioControlRequestTopic::default_instance_,
      RadioControlRequestTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioControlRequestTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioControlRequestTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadioControlRequestTopic));
  SignalEventTopic_descriptor_ = file->message_type(4);
  static const int SignalEventTopic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEventTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEventTopic, signal_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEventTopic, gps_position_),
  };
  SignalEventTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalEventTopic_descriptor_,
      SignalEventTopic::default_instance_,
      SignalEventTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEventTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEventTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalEventTopic));
  ProductResponseTopic_descriptor_ = file->message_type(5);
  static const int ProductResponseTopic_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductResponseTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductResponseTopic, image_available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductResponseTopic, fisd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductResponseTopic, video_parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductResponseTopic, audioavailable_),
  };
  ProductResponseTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductResponseTopic_descriptor_,
      ProductResponseTopic::default_instance_,
      ProductResponseTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductResponseTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductResponseTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductResponseTopic));
  VideoParameters_descriptor_ = file->message_type(6);
  static const int VideoParameters_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoParameters, eltex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoParameters, instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoParameters, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoParameters, ipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoParameters, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoParameters, globalid_),
  };
  VideoParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoParameters_descriptor_,
      VideoParameters::default_instance_,
      VideoParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoParameters));
  ESProductTopic_descriptor_ = file->message_type(7);
  static const int ESProductTopic_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductTopic, es_observables_register_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductTopic, es_observables_unregister_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductTopic, es_observables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductTopic, state_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductTopic, override_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductTopic, autokill_gui_),
  };
  ESProductTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ESProductTopic_descriptor_,
      ESProductTopic::default_instance_,
      ESProductTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ESProductTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ESProductTopic));
  InfrastructureEnvelope_descriptor_ = file->message_type(8);
  static const int InfrastructureEnvelope_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfrastructureEnvelope, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfrastructureEnvelope, handshake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfrastructureEnvelope, ew_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfrastructureEnvelope, product_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfrastructureEnvelope, radio_control_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfrastructureEnvelope, radio_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfrastructureEnvelope, debug_topic_),
  };
  InfrastructureEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InfrastructureEnvelope_descriptor_,
      InfrastructureEnvelope::default_instance_,
      InfrastructureEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfrastructureEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfrastructureEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InfrastructureEnvelope));
  ProductRequestTopic_descriptor_ = file->message_type(9);
  static const int ProductRequestTopic_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductRequestTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductRequestTopic, fisd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductRequestTopic, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductRequestTopic, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductRequestTopic, audio_),
  };
  ProductRequestTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductRequestTopic_descriptor_,
      ProductRequestTopic::default_instance_,
      ProductRequestTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductRequestTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductRequestTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductRequestTopic));
  EWRequestTopic_descriptor_ = file->message_type(10);
  static const int EWRequestTopic_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWRequestTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWRequestTopic, ew_command_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWRequestTopic, ew_cease_buzzer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWRequestTopic, ew_status_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWRequestTopic, ew_options_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWRequestTopic, register_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWRequestTopic, register_query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWRequestTopic, emergency_jam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWRequestTopic, tx_freq_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWRequestTopic, ew_capabilities_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWRequestTopic, ew_transmitting_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWRequestTopic, close_self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWRequestTopic, unregister_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWRequestTopic, ew_technique_descriptions_request_),
  };
  EWRequestTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWRequestTopic_descriptor_,
      EWRequestTopic::default_instance_,
      EWRequestTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWRequestTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWRequestTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWRequestTopic));
  CapabilityRequestTopic_descriptor_ = file->message_type(11);
  static const int CapabilityRequestTopic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilityRequestTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilityRequestTopic, jam_off_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilityRequestTopic, technique_command_),
  };
  CapabilityRequestTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CapabilityRequestTopic_descriptor_,
      CapabilityRequestTopic::default_instance_,
      CapabilityRequestTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilityRequestTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilityRequestTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CapabilityRequestTopic));
  TransmitterControlRequestTopic_descriptor_ = file->message_type(12);
  static const int TransmitterControlRequestTopic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterControlRequestTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterControlRequestTopic, txtune_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterControlRequestTopic, reactivejam_),
  };
  TransmitterControlRequestTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransmitterControlRequestTopic_descriptor_,
      TransmitterControlRequestTopic::default_instance_,
      TransmitterControlRequestTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterControlRequestTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterControlRequestTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransmitterControlRequestTopic));
  RadioControlResponseTopic_descriptor_ = file->message_type(13);
  static const int RadioControlResponseTopic_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioControlResponseTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioControlResponseTopic, ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioControlResponseTopic, nack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioControlResponseTopic, rx_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioControlResponseTopic, receiver_acquired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioControlResponseTopic, receiver_released_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioControlResponseTopic, rx_command_response_),
  };
  RadioControlResponseTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadioControlResponseTopic_descriptor_,
      RadioControlResponseTopic::default_instance_,
      RadioControlResponseTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioControlResponseTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioControlResponseTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadioControlResponseTopic));
  DebugTopic_descriptor_ = file->message_type(14);
  static const int DebugTopic_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTopic, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTopic, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTopic, warning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTopic, error_),
  };
  DebugTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugTopic_descriptor_,
      DebugTopic::default_instance_,
      DebugTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugTopic));
  SigFramesTopic_descriptor_ = file->message_type(15);
  static const int SigFramesTopic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigFramesTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigFramesTopic, sigframe_),
  };
  SigFramesTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SigFramesTopic_descriptor_,
      SigFramesTopic::default_instance_,
      SigFramesTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigFramesTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigFramesTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SigFramesTopic));
  RadioDataTopic_descriptor_ = file->message_type(16);
  static const int RadioDataTopic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioDataTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioDataTopic, snap_info_),
  };
  RadioDataTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadioDataTopic_descriptor_,
      RadioDataTopic::default_instance_,
      RadioDataTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioDataTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioDataTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadioDataTopic));
  GeoTopic_descriptor_ = file->message_type(17);
  static const int GeoTopic_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTopic, geo_tip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTopic, geo_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTopic, detection_tip_),
  };
  GeoTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoTopic_descriptor_,
      GeoTopic::default_instance_,
      GeoTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoTopic));
  SensorTopic_descriptor_ = file->message_type(18);
  static const int SensorTopic_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorTopic, hardware_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorTopic, sensor_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorTopic, switch_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorTopic, sensor_status_),
  };
  SensorTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorTopic_descriptor_,
      SensorTopic::default_instance_,
      SensorTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorTopic));
  ImageRequest_descriptor_ = file->message_type(19);
  static const int ImageRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRequest, eltex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRequest, connection_id_),
  };
  ImageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageRequest_descriptor_,
      ImageRequest::default_instance_,
      ImageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageRequest));
  VideoRequest_descriptor_ = file->message_type(20);
  static const int VideoRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoRequest, eltex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoRequest, connection_id_),
  };
  VideoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoRequest_descriptor_,
      VideoRequest::default_instance_,
      VideoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServiceInfrastructureExclusive_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceEnvelope_descriptor_, &ServiceEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWResponseTopic_descriptor_, &EWResponseTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CapabilityResponseTopic_descriptor_, &CapabilityResponseTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadioControlRequestTopic_descriptor_, &RadioControlRequestTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalEventTopic_descriptor_, &SignalEventTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductResponseTopic_descriptor_, &ProductResponseTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoParameters_descriptor_, &VideoParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ESProductTopic_descriptor_, &ESProductTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InfrastructureEnvelope_descriptor_, &InfrastructureEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductRequestTopic_descriptor_, &ProductRequestTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWRequestTopic_descriptor_, &EWRequestTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CapabilityRequestTopic_descriptor_, &CapabilityRequestTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransmitterControlRequestTopic_descriptor_, &TransmitterControlRequestTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadioControlResponseTopic_descriptor_, &RadioControlResponseTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugTopic_descriptor_, &DebugTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SigFramesTopic_descriptor_, &SigFramesTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadioDataTopic_descriptor_, &RadioDataTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoTopic_descriptor_, &GeoTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorTopic_descriptor_, &SensorTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageRequest_descriptor_, &ImageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoRequest_descriptor_, &VideoRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServiceInfrastructureExclusive_2eproto() {
  delete ServiceEnvelope::default_instance_;
  delete ServiceEnvelope_reflection_;
  delete EWResponseTopic::default_instance_;
  delete EWResponseTopic_reflection_;
  delete CapabilityResponseTopic::default_instance_;
  delete CapabilityResponseTopic_reflection_;
  delete RadioControlRequestTopic::default_instance_;
  delete RadioControlRequestTopic_reflection_;
  delete SignalEventTopic::default_instance_;
  delete SignalEventTopic_reflection_;
  delete ProductResponseTopic::default_instance_;
  delete ProductResponseTopic_reflection_;
  delete VideoParameters::default_instance_;
  delete VideoParameters_reflection_;
  delete ESProductTopic::default_instance_;
  delete ESProductTopic_reflection_;
  delete InfrastructureEnvelope::default_instance_;
  delete InfrastructureEnvelope_reflection_;
  delete ProductRequestTopic::default_instance_;
  delete ProductRequestTopic_reflection_;
  delete EWRequestTopic::default_instance_;
  delete EWRequestTopic_reflection_;
  delete CapabilityRequestTopic::default_instance_;
  delete CapabilityRequestTopic_reflection_;
  delete TransmitterControlRequestTopic::default_instance_;
  delete TransmitterControlRequestTopic_reflection_;
  delete RadioControlResponseTopic::default_instance_;
  delete RadioControlResponseTopic_reflection_;
  delete DebugTopic::default_instance_;
  delete DebugTopic_reflection_;
  delete SigFramesTopic::default_instance_;
  delete SigFramesTopic_reflection_;
  delete RadioDataTopic::default_instance_;
  delete RadioDataTopic_reflection_;
  delete GeoTopic::default_instance_;
  delete GeoTopic_reflection_;
  delete SensorTopic::default_instance_;
  delete SensorTopic_reflection_;
  delete ImageRequest::default_instance_;
  delete ImageRequest_reflection_;
  delete VideoRequest::default_instance_;
  delete VideoRequest_reflection_;
}

void protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::falcon_remoting_msg::protobuf_AddDesc_FalconRemotingMessages_2eproto();
  ::tuner_msg::protobuf_AddDesc_TunerMessages_2eproto();
  ::fv::tb::protos::TBProtos::protobuf_AddDesc_ThunderbirdMessages_2eproto();
  ::falcon_common_msg::protobuf_AddDesc_FalconCommonMessages_2eproto();
  ::service_infrastructure::protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  ::products::protobuf_AddDesc_Products_2eproto();
  ::video_compression_msg::protobuf_AddDesc_VideoCompressionMessages_2eproto();
  ::rdr_msg::protobuf_AddDesc_RADARmessages_2eproto();
  ::falcon_debug_msg::protobuf_AddDesc_DebugMessages_2eproto();
  ::fv::sf::protos::SFProtos::protobuf_AddDesc_SigFrameMessages_2eproto();
  ::rx_command_msg::protobuf_AddDesc_RxCommandMessages_2eproto();
  ::falcon_antenna_msg::protobuf_AddDesc_FalconAntennaMessages_2eproto();
  ::es_product_msg::protobuf_AddDesc_ESProductMessages_2eproto();
  ::auto_kill_msg::protobuf_AddDesc_AutoKillMessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$ServiceInfrastructureExclusive.proto\022\026"
    "service_infrastructure\032\034FalconRemotingMe"
    "ssages.proto\032\023TunerMessages.proto\032\031Thund"
    "erbirdMessages.proto\032\032FalconCommonMessag"
    "es.proto\032!ServiceInfrastructureCommon.pr"
    "oto\032\016Products.proto\032\036VideoCompressionMes"
    "sages.proto\032\023RADARmessages.proto\032\023DebugM"
    "essages.proto\032\026SigFrameMessages.proto\032\027R"
    "xCommandMessages.proto\032\033FalconAntennaMes"
    "sages.proto\032\027ESProductMessages.proto\032\026Au"
    "toKillMessages.proto\"\223\003\n\017ServiceEnvelope"
    "\022.\n\006header\030\001 \001(\0132\036.service_infrastructur"
    "e.Header\0229\n\thandshake\030\002 \001(\0132&.service_in"
    "frastructure.HandshakeTopic\022<\n\013ew_respon"
    "se\030\003 \001(\0132\'.service_infrastructure.EWResp"
    "onseTopic\022F\n\020product_response\030\005 \001(\0132,.se"
    "rvice_infrastructure.ProductResponseTopi"
    "c\022O\n\025radio_control_request\030\006 \001(\01320.servi"
    "ce_infrastructure.RadioControlRequestTop"
    "ic\022>\n\014signal_event\030\007 \001(\0132(.service_infra"
    "structure.SignalEventTopic\"\232\005\n\017EWRespons"
    "eTopic\022.\n\006header\030d \001(\0132\036.service_infrast"
    "ructure.Header\022*\n\004nack\030\001 \001(\0132\034.service_i"
    "nfrastructure.NAck\022(\n\003ack\030\002 \001(\0132\033.servic"
    "e_infrastructure.Ack\0222\n\tew_status\030\003 \001(\0132"
    "\037.fv.tb.protos.TBProtos.EWStatus\0224\n\new_o"
    "ptions\030\004 \001(\0132 .fv.tb.protos.TBProtos.EWO"
    "ptions\022\?\n\020ew_option_delete\030\005 \001(\0132%.fv.tb"
    ".protos.TBProtos.EWOptionDelete\022B\n\021regis"
    "ter_response\030\006 \001(\0132\'.fv.tb.protos.TBProt"
    "os.RegisterResponse\022\?\n\020new_signal_frame\030"
    "\007 \001(\0132%.fv.tb.protos.TBProtos.newSignalF"
    "rame\022>\n\017ew_capabilities\030\010 \001(\0132%.fv.tb.pr"
    "otos.TBProtos.EWCapabilities\022>\n\017ew_trans"
    "mitting\030\t \001(\0132%.fv.tb.protos.TBProtos.EW"
    "Transmitting\022Q\n\031ew_technique_description"
    "s\030\n \001(\0132..fv.tb.protos.TBProtos.EWTechni"
    "queDescriptions\"\304\003\n\027CapabilityResponseTo"
    "pic\022.\n\006header\030d \001(\0132\036.service_infrastruc"
    "ture.Header\022*\n\004nack\030\001 \001(\0132\034.service_infr"
    "astructure.NAck\022(\n\003ack\030\002 \001(\0132\033.service_i"
    "nfrastructure.Ack\022:\n\rew_capability\030\n \001(\013"
    "2#.fv.tb.protos.TBProtos.EWCapability\022O\n"
    "\030ew_capability_unregister\030\013 \001(\0132-.fv.tb."
    "protos.TBProtos.EWCapabilityUnregister\022A"
    "\n\021hop_attack_status\030\014 \001(\0132&.fv.tb.protos"
    ".TBProtos.HopAttackStatus\022S\n\032ew_capabili"
    "ty_transmitting\030\r \001(\0132/.fv.tb.protos.TBP"
    "rotos.EWCapabilityTransmitting\"\320\002\n\030Radio"
    "ControlRequestTopic\022.\n\006header\030d \001(\0132\036.se"
    "rvice_infrastructure.Header\022(\n\ndwell_sca"
    "n\030\001 \001(\0132\024.tuner_msg.DwellScan\0220\n\010rx_quer"
    "y\030\002 \001(\0132\036.tuner_msg.QueryReceiverStatus\022"
    "4\n\020receiver_request\030\003 \001(\0132\032.tuner_msg.Re"
    "ceiverRequest\0224\n\020receiver_release\030\004 \001(\0132"
    "\032.tuner_msg.ReceiverRelease\022<\n\022rx_comman"
    "d_request\030\005 \001(\0132 .rx_command_msg.RxComma"
    "ndRequest\"\262\001\n\020SignalEventTopic\022.\n\006header"
    "\030d \001(\0132\036.service_infrastructure.Header\0226"
    "\n\014signal_event\030\001 \001(\0132 .falcon_remoting_m"
    "sg.SignalEvent\0226\n\014gps_position\030\002 \001(\0132 .f"
    "alcon_remoting_msg.GPSPosition\"\231\002\n\024Produ"
    "ctResponseTopic\022.\n\006header\030d \001(\0132\036.servic"
    "e_infrastructure.Header\022>\n\017image_availab"
    "le\030\001 \001(\0132%.video_compression_msg.ImageAv"
    "ailable\022\034\n\004fisd\030\002 \001(\0132\016.products.FisD\022A\n"
    "\020video_parameters\030\003 \001(\0132\'.service_infras"
    "tructure.VideoParameters\0220\n\016audioavailab"
    "le\030\004 \001(\0132\030.products.AudioAvailable\"w\n\017Vi"
    "deoParameters\022\r\n\005eltex\030\001 \001(\t\022\020\n\010instance"
    "\030\002 \001(\005\022\020\n\010protocol\030\003 \001(\t\022\021\n\tipaddress\030\004 "
    "\001(\t\022\014\n\004port\030\005 \001(\005\022\020\n\010globalID\030\006 \001(\t\"\251\003\n\016"
    "ESProductTopic\022.\n\006header\030d \001(\0132\036.service"
    "_infrastructure.Header\022F\n\027es_observables"
    "_register\030\001 \001(\0132%.es_product_msg.ESObser"
    "vablesRegister\022J\n\031es_observables_unregis"
    "ter\030\002 \001(\0132\'.es_product_msg.ESObservables"
    "Unregister\0225\n\016es_observables\030\003 \001(\0132\035.es_"
    "product_msg.ESObservables\0224\n\016state_respo"
    "nse\030\004 \001(\0132\034.auto_kill_msg.StateResponse\022"
    "4\n\016override_state\030\005 \001(\0132\034.auto_kill_msg."
    "OverrideState\0220\n\014autokill_gui\030\006 \001(\0132\032.au"
    "to_kill_msg.AutoKillGUI\"\315\003\n\026Infrastructu"
    "reEnvelope\022.\n\006header\030\001 \001(\0132\036.service_inf"
    "rastructure.Header\0229\n\thandshake\030\002 \001(\0132&."
    "service_infrastructure.HandshakeTopic\022:\n"
    "\new_request\030\003 \001(\0132&.service_infrastructu"
    "re.EWRequestTopic\022D\n\017product_request\030\005 \001"
    "(\0132+.service_infrastructure.ProductReque"
    "stTopic\022Q\n\026radio_control_response\030\006 \001(\0132"
    "1.service_infrastructure.RadioControlRes"
    "ponseTopic\022:\n\nradio_data\030\007 \001(\0132&.service"
    "_infrastructure.RadioDataTopic\0227\n\013debug_"
    "topic\030\010 \001(\0132\".service_infrastructure.Deb"
    "ugTopic\"\373\001\n\023ProductRequestTopic\022.\n\006heade"
    "r\030d \001(\0132\036.service_infrastructure.Header\022"
    "#\n\004fisd\030\001 \001(\0132\025.products.FisDRequest\0223\n\005"
    "image\030\002 \001(\0132$.service_infrastructure.Ima"
    "geRequest\0223\n\005video\030\003 \001(\0132$.service_infra"
    "structure.VideoRequest\022%\n\005audio\030\004 \001(\0132\026."
    "products.AudioRequest\"\303\007\n\016EWRequestTopic"
    "\022.\n\006header\030d \001(\0132\036.service_infrastructur"
    "e.Header\022C\n\022ew_command_request\030\001 \001(\0132\'.f"
    "v.tb.protos.TBProtos.EWCommandRequest\022=\n"
    "\017ew_cease_buzzer\030\002 \001(\0132$.fv.tb.protos.TB"
    "Protos.EWCeaseBuzzer\022A\n\021ew_status_reques"
    "t\030\004 \001(\0132&.fv.tb.protos.TBProtos.EWStatus"
    "Request\022C\n\022ew_options_request\030\005 \001(\0132\'.fv"
    ".tb.protos.TBProtos.EWOptionsRequest\022@\n\020"
    "register_request\030\006 \001(\0132&.fv.tb.protos.TB"
    "Protos.RegisterRequest\022<\n\016register_query"
    "\030\007 \001(\0132$.fv.tb.protos.TBProtos.RegisterQ"
    "uery\022:\n\remergency_jam\030\010 \001(\0132#.fv.tb.prot"
    "os.TBProtos.EmergencyJam\022=\n\017tx_freq_requ"
    "est\030\t \001(\0132$.fv.tb.protos.TBProtos.TxFreq"
    "Request\022M\n\027ew_capabilities_request\030\n \001(\013"
    "2,.fv.tb.protos.TBProtos.EWCapabilitiesR"
    "equest\022M\n\027ew_transmitting_request\030\013 \001(\0132"
    ",.fv.tb.protos.TBProtos.EWTransmittingRe"
    "quest\0224\n\nclose_self\030\014 \001(\0132 .fv.tb.protos"
    ".TBProtos.CloseSelf\022D\n\022unregister_reques"
    "t\030\r \001(\0132(.fv.tb.protos.TBProtos.Unregist"
    "erRequest\022`\n!ew_technique_descriptions_r"
    "equest\030\016 \001(\01325.fv.tb.protos.TBProtos.EWT"
    "echniqueDescriptionsRequest\"\274\001\n\026Capabili"
    "tyRequestTopic\022.\n\006header\030d \001(\0132\036.service"
    "_infrastructure.Header\022.\n\007jam_off\030\n \001(\0132"
    "\035.fv.tb.protos.TBProtos.JamOff\022B\n\021techni"
    "que_command\030\013 \001(\0132\'.fv.tb.protos.TBProto"
    "s.techniqueCommand\"\240\001\n\036TransmitterContro"
    "lRequestTopic\022.\n\006header\030d \001(\0132\036.service_"
    "infrastructure.Header\022!\n\006txTune\030\007 \001(\0132\021."
    "tuner_msg.TxTune\022+\n\013reactiveJam\030\n \001(\0132\026."
    "tuner_msg.ReactiveJam\"\377\002\n\031RadioControlRe"
    "sponseTopic\022.\n\006header\030d \001(\0132\036.service_in"
    "frastructure.Header\022(\n\003ack\030\001 \001(\0132\033.servi"
    "ce_infrastructure.Ack\022*\n\004nack\030\002 \001(\0132\034.se"
    "rvice_infrastructure.NAck\022,\n\trx_status\030\003"
    " \001(\0132\031.tuner_msg.ReceiverStatus\0226\n\021recei"
    "ver_acquired\030\004 \001(\0132\033.tuner_msg.ReceiverA"
    "cquired\0226\n\021receiver_released\030\005 \001(\0132\033.tun"
    "er_msg.ReceiverReleased\022>\n\023rx_command_re"
    "sponse\030\006 \001(\0132!.rx_command_msg.RxCommandR"
    "esponse\"\340\001\n\nDebugTopic\022.\n\006header\030d \001(\0132\036"
    ".service_infrastructure.Header\022$\n\004info\030\001"
    " \001(\0132\026.falcon_debug_msg.Info\022(\n\010hostname"
    "\030\n \001(\0132\026.falcon_debug_msg.Info\022*\n\007warnin"
    "g\030\002 \001(\0132\031.falcon_debug_msg.Warning\022&\n\005er"
    "ror\030\003 \001(\0132\027.falcon_debug_msg.Error\"s\n\016Si"
    "gFramesTopic\022.\n\006header\030d \001(\0132\036.service_i"
    "nfrastructure.Header\0221\n\010sigframe\030\001 \001(\0132\037"
    ".fv.sf.protos.SFProtos.SIGFrame\"h\n\016Radio"
    "DataTopic\022.\n\006header\030d \001(\0132\036.service_infr"
    "astructure.Header\022&\n\tsnap_info\030\001 \001(\0132\023.t"
    "uner_msg.SnapInfo\"\320\001\n\010GeoTopic\022.\n\006header"
    "\030d \001(\0132\036.service_infrastructure.Header\022*"
    "\n\007geo_tip\030\001 \001(\0132\031.falcon_common_msg.GeoT"
    "ip\0220\n\ngeo_result\030\002 \001(\0132\034.falcon_common_m"
    "sg.GeoResult\0226\n\rdetection_tip\030\003 \001(\0132\037.fa"
    "lcon_common_msg.DetectionTip\"\254\002\n\013SensorT"
    "opic\022.\n\006header\030d \001(\0132\036.service_infrastru"
    "cture.Header\022<\n\017hardware_status\030\001 \001(\0132#."
    "falcon_remoting_msg.HardwareStatus\022<\n\017se"
    "nsor_position\030\002 \001(\0132#.falcon_remoting_ms"
    "g.SensorPosition\0227\n\rswitch_status\030\003 \001(\0132"
    " .falcon_antenna_msg.SwitchStatus\0228\n\rsen"
    "sor_status\030\004 \001(\0132!.falcon_remoting_msg.S"
    "ensorStatus\"d\n\014ImageRequest\022.\n\006header\030d "
    "\001(\0132\036.service_infrastructure.Header\022\r\n\005e"
    "ltex\030\001 \001(\t\022\025\n\rconnection_id\030\002 \001(\t\"d\n\014Vid"
    "eoRequest\022.\n\006header\030d \001(\0132\036.service_infr"
    "astructure.Header\022\r\n\005eltex\030\001 \001(\t\022\025\n\rconn"
    "ection_id\030\002 \001(\tB\025\n\023fv.protos.kepsvisor", 6918);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServiceInfrastructureExclusive.proto", &protobuf_RegisterTypes);
  ServiceEnvelope::default_instance_ = new ServiceEnvelope();
  EWResponseTopic::default_instance_ = new EWResponseTopic();
  CapabilityResponseTopic::default_instance_ = new CapabilityResponseTopic();
  RadioControlRequestTopic::default_instance_ = new RadioControlRequestTopic();
  SignalEventTopic::default_instance_ = new SignalEventTopic();
  ProductResponseTopic::default_instance_ = new ProductResponseTopic();
  VideoParameters::default_instance_ = new VideoParameters();
  ESProductTopic::default_instance_ = new ESProductTopic();
  InfrastructureEnvelope::default_instance_ = new InfrastructureEnvelope();
  ProductRequestTopic::default_instance_ = new ProductRequestTopic();
  EWRequestTopic::default_instance_ = new EWRequestTopic();
  CapabilityRequestTopic::default_instance_ = new CapabilityRequestTopic();
  TransmitterControlRequestTopic::default_instance_ = new TransmitterControlRequestTopic();
  RadioControlResponseTopic::default_instance_ = new RadioControlResponseTopic();
  DebugTopic::default_instance_ = new DebugTopic();
  SigFramesTopic::default_instance_ = new SigFramesTopic();
  RadioDataTopic::default_instance_ = new RadioDataTopic();
  GeoTopic::default_instance_ = new GeoTopic();
  SensorTopic::default_instance_ = new SensorTopic();
  ImageRequest::default_instance_ = new ImageRequest();
  VideoRequest::default_instance_ = new VideoRequest();
  ServiceEnvelope::default_instance_->InitAsDefaultInstance();
  EWResponseTopic::default_instance_->InitAsDefaultInstance();
  CapabilityResponseTopic::default_instance_->InitAsDefaultInstance();
  RadioControlRequestTopic::default_instance_->InitAsDefaultInstance();
  SignalEventTopic::default_instance_->InitAsDefaultInstance();
  ProductResponseTopic::default_instance_->InitAsDefaultInstance();
  VideoParameters::default_instance_->InitAsDefaultInstance();
  ESProductTopic::default_instance_->InitAsDefaultInstance();
  InfrastructureEnvelope::default_instance_->InitAsDefaultInstance();
  ProductRequestTopic::default_instance_->InitAsDefaultInstance();
  EWRequestTopic::default_instance_->InitAsDefaultInstance();
  CapabilityRequestTopic::default_instance_->InitAsDefaultInstance();
  TransmitterControlRequestTopic::default_instance_->InitAsDefaultInstance();
  RadioControlResponseTopic::default_instance_->InitAsDefaultInstance();
  DebugTopic::default_instance_->InitAsDefaultInstance();
  SigFramesTopic::default_instance_->InitAsDefaultInstance();
  RadioDataTopic::default_instance_->InitAsDefaultInstance();
  GeoTopic::default_instance_->InitAsDefaultInstance();
  SensorTopic::default_instance_->InitAsDefaultInstance();
  ImageRequest::default_instance_->InitAsDefaultInstance();
  VideoRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServiceInfrastructureExclusive_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServiceInfrastructureExclusive_2eproto {
  StaticDescriptorInitializer_ServiceInfrastructureExclusive_2eproto() {
    protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  }
} static_descriptor_initializer_ServiceInfrastructureExclusive_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ServiceEnvelope::kHeaderFieldNumber;
const int ServiceEnvelope::kHandshakeFieldNumber;
const int ServiceEnvelope::kEwResponseFieldNumber;
const int ServiceEnvelope::kProductResponseFieldNumber;
const int ServiceEnvelope::kRadioControlRequestFieldNumber;
const int ServiceEnvelope::kSignalEventFieldNumber;
#endif  // !_MSC_VER

ServiceEnvelope::ServiceEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceEnvelope::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  handshake_ = const_cast< ::service_infrastructure::HandshakeTopic*>(&::service_infrastructure::HandshakeTopic::default_instance());
  ew_response_ = const_cast< ::service_infrastructure::EWResponseTopic*>(&::service_infrastructure::EWResponseTopic::default_instance());
  product_response_ = const_cast< ::service_infrastructure::ProductResponseTopic*>(&::service_infrastructure::ProductResponseTopic::default_instance());
  radio_control_request_ = const_cast< ::service_infrastructure::RadioControlRequestTopic*>(&::service_infrastructure::RadioControlRequestTopic::default_instance());
  signal_event_ = const_cast< ::service_infrastructure::SignalEventTopic*>(&::service_infrastructure::SignalEventTopic::default_instance());
}

ServiceEnvelope::ServiceEnvelope(const ServiceEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceEnvelope::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  handshake_ = NULL;
  ew_response_ = NULL;
  product_response_ = NULL;
  radio_control_request_ = NULL;
  signal_event_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceEnvelope::~ServiceEnvelope() {
  SharedDtor();
}

void ServiceEnvelope::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete handshake_;
    delete ew_response_;
    delete product_response_;
    delete radio_control_request_;
    delete signal_event_;
  }
}

void ServiceEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceEnvelope_descriptor_;
}

const ServiceEnvelope& ServiceEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

ServiceEnvelope* ServiceEnvelope::default_instance_ = NULL;

ServiceEnvelope* ServiceEnvelope::New() const {
  return new ServiceEnvelope;
}

void ServiceEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_handshake()) {
      if (handshake_ != NULL) handshake_->::service_infrastructure::HandshakeTopic::Clear();
    }
    if (has_ew_response()) {
      if (ew_response_ != NULL) ew_response_->::service_infrastructure::EWResponseTopic::Clear();
    }
    if (has_product_response()) {
      if (product_response_ != NULL) product_response_->::service_infrastructure::ProductResponseTopic::Clear();
    }
    if (has_radio_control_request()) {
      if (radio_control_request_ != NULL) radio_control_request_->::service_infrastructure::RadioControlRequestTopic::Clear();
    }
    if (has_signal_event()) {
      if (signal_event_ != NULL) signal_event_->::service_infrastructure::SignalEventTopic::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_infrastructure.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_handshake;
        break;
      }

      // optional .service_infrastructure.HandshakeTopic handshake = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handshake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handshake()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ew_response;
        break;
      }

      // optional .service_infrastructure.EWResponseTopic ew_response = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_product_response;
        break;
      }

      // optional .service_infrastructure.ProductResponseTopic product_response = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_product_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_radio_control_request;
        break;
      }

      // optional .service_infrastructure.RadioControlRequestTopic radio_control_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_radio_control_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radio_control_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_signal_event;
        break;
      }

      // optional .service_infrastructure.SignalEventTopic signal_event = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .service_infrastructure.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .service_infrastructure.HandshakeTopic handshake = 2;
  if (has_handshake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->handshake(), output);
  }

  // optional .service_infrastructure.EWResponseTopic ew_response = 3;
  if (has_ew_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ew_response(), output);
  }

  // optional .service_infrastructure.ProductResponseTopic product_response = 5;
  if (has_product_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->product_response(), output);
  }

  // optional .service_infrastructure.RadioControlRequestTopic radio_control_request = 6;
  if (has_radio_control_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->radio_control_request(), output);
  }

  // optional .service_infrastructure.SignalEventTopic signal_event = 7;
  if (has_signal_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->signal_event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .service_infrastructure.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .service_infrastructure.HandshakeTopic handshake = 2;
  if (has_handshake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->handshake(), target);
  }

  // optional .service_infrastructure.EWResponseTopic ew_response = 3;
  if (has_ew_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ew_response(), target);
  }

  // optional .service_infrastructure.ProductResponseTopic product_response = 5;
  if (has_product_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->product_response(), target);
  }

  // optional .service_infrastructure.RadioControlRequestTopic radio_control_request = 6;
  if (has_radio_control_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->radio_control_request(), target);
  }

  // optional .service_infrastructure.SignalEventTopic signal_event = 7;
  if (has_signal_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->signal_event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .service_infrastructure.HandshakeTopic handshake = 2;
    if (has_handshake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handshake());
    }

    // optional .service_infrastructure.EWResponseTopic ew_response = 3;
    if (has_ew_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_response());
    }

    // optional .service_infrastructure.ProductResponseTopic product_response = 5;
    if (has_product_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->product_response());
    }

    // optional .service_infrastructure.RadioControlRequestTopic radio_control_request = 6;
    if (has_radio_control_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radio_control_request());
    }

    // optional .service_infrastructure.SignalEventTopic signal_event = 7;
    if (has_signal_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal_event());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceEnvelope::MergeFrom(const ServiceEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_handshake()) {
      mutable_handshake()->::service_infrastructure::HandshakeTopic::MergeFrom(from.handshake());
    }
    if (from.has_ew_response()) {
      mutable_ew_response()->::service_infrastructure::EWResponseTopic::MergeFrom(from.ew_response());
    }
    if (from.has_product_response()) {
      mutable_product_response()->::service_infrastructure::ProductResponseTopic::MergeFrom(from.product_response());
    }
    if (from.has_radio_control_request()) {
      mutable_radio_control_request()->::service_infrastructure::RadioControlRequestTopic::MergeFrom(from.radio_control_request());
    }
    if (from.has_signal_event()) {
      mutable_signal_event()->::service_infrastructure::SignalEventTopic::MergeFrom(from.signal_event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceEnvelope::CopyFrom(const ServiceEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceEnvelope::IsInitialized() const {

  return true;
}

void ServiceEnvelope::Swap(ServiceEnvelope* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(handshake_, other->handshake_);
    std::swap(ew_response_, other->ew_response_);
    std::swap(product_response_, other->product_response_);
    std::swap(radio_control_request_, other->radio_control_request_);
    std::swap(signal_event_, other->signal_event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceEnvelope_descriptor_;
  metadata.reflection = ServiceEnvelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EWResponseTopic::kHeaderFieldNumber;
const int EWResponseTopic::kNackFieldNumber;
const int EWResponseTopic::kAckFieldNumber;
const int EWResponseTopic::kEwStatusFieldNumber;
const int EWResponseTopic::kEwOptionsFieldNumber;
const int EWResponseTopic::kEwOptionDeleteFieldNumber;
const int EWResponseTopic::kRegisterResponseFieldNumber;
const int EWResponseTopic::kNewSignalFrameFieldNumber;
const int EWResponseTopic::kEwCapabilitiesFieldNumber;
const int EWResponseTopic::kEwTransmittingFieldNumber;
const int EWResponseTopic::kEwTechniqueDescriptionsFieldNumber;
#endif  // !_MSC_VER

EWResponseTopic::EWResponseTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWResponseTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  nack_ = const_cast< ::service_infrastructure::NAck*>(&::service_infrastructure::NAck::default_instance());
  ack_ = const_cast< ::service_infrastructure::Ack*>(&::service_infrastructure::Ack::default_instance());
  ew_status_ = const_cast< ::fv::tb::protos::TBProtos::EWStatus*>(&::fv::tb::protos::TBProtos::EWStatus::default_instance());
  ew_options_ = const_cast< ::fv::tb::protos::TBProtos::EWOptions*>(&::fv::tb::protos::TBProtos::EWOptions::default_instance());
  ew_option_delete_ = const_cast< ::fv::tb::protos::TBProtos::EWOptionDelete*>(&::fv::tb::protos::TBProtos::EWOptionDelete::default_instance());
  register_response_ = const_cast< ::fv::tb::protos::TBProtos::RegisterResponse*>(&::fv::tb::protos::TBProtos::RegisterResponse::default_instance());
  new_signal_frame_ = const_cast< ::fv::tb::protos::TBProtos::newSignalFrame*>(&::fv::tb::protos::TBProtos::newSignalFrame::default_instance());
  ew_capabilities_ = const_cast< ::fv::tb::protos::TBProtos::EWCapabilities*>(&::fv::tb::protos::TBProtos::EWCapabilities::default_instance());
  ew_transmitting_ = const_cast< ::fv::tb::protos::TBProtos::EWTransmitting*>(&::fv::tb::protos::TBProtos::EWTransmitting::default_instance());
  ew_technique_descriptions_ = const_cast< ::fv::tb::protos::TBProtos::EWTechniqueDescriptions*>(&::fv::tb::protos::TBProtos::EWTechniqueDescriptions::default_instance());
}

EWResponseTopic::EWResponseTopic(const EWResponseTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWResponseTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  nack_ = NULL;
  ack_ = NULL;
  ew_status_ = NULL;
  ew_options_ = NULL;
  ew_option_delete_ = NULL;
  register_response_ = NULL;
  new_signal_frame_ = NULL;
  ew_capabilities_ = NULL;
  ew_transmitting_ = NULL;
  ew_technique_descriptions_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWResponseTopic::~EWResponseTopic() {
  SharedDtor();
}

void EWResponseTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete nack_;
    delete ack_;
    delete ew_status_;
    delete ew_options_;
    delete ew_option_delete_;
    delete register_response_;
    delete new_signal_frame_;
    delete ew_capabilities_;
    delete ew_transmitting_;
    delete ew_technique_descriptions_;
  }
}

void EWResponseTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWResponseTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWResponseTopic_descriptor_;
}

const EWResponseTopic& EWResponseTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

EWResponseTopic* EWResponseTopic::default_instance_ = NULL;

EWResponseTopic* EWResponseTopic::New() const {
  return new EWResponseTopic;
}

void EWResponseTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_nack()) {
      if (nack_ != NULL) nack_->::service_infrastructure::NAck::Clear();
    }
    if (has_ack()) {
      if (ack_ != NULL) ack_->::service_infrastructure::Ack::Clear();
    }
    if (has_ew_status()) {
      if (ew_status_ != NULL) ew_status_->::fv::tb::protos::TBProtos::EWStatus::Clear();
    }
    if (has_ew_options()) {
      if (ew_options_ != NULL) ew_options_->::fv::tb::protos::TBProtos::EWOptions::Clear();
    }
    if (has_ew_option_delete()) {
      if (ew_option_delete_ != NULL) ew_option_delete_->::fv::tb::protos::TBProtos::EWOptionDelete::Clear();
    }
    if (has_register_response()) {
      if (register_response_ != NULL) register_response_->::fv::tb::protos::TBProtos::RegisterResponse::Clear();
    }
    if (has_new_signal_frame()) {
      if (new_signal_frame_ != NULL) new_signal_frame_->::fv::tb::protos::TBProtos::newSignalFrame::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ew_capabilities()) {
      if (ew_capabilities_ != NULL) ew_capabilities_->::fv::tb::protos::TBProtos::EWCapabilities::Clear();
    }
    if (has_ew_transmitting()) {
      if (ew_transmitting_ != NULL) ew_transmitting_->::fv::tb::protos::TBProtos::EWTransmitting::Clear();
    }
    if (has_ew_technique_descriptions()) {
      if (ew_technique_descriptions_ != NULL) ew_technique_descriptions_->::fv::tb::protos::TBProtos::EWTechniqueDescriptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWResponseTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_infrastructure.NAck nack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ack;
        break;
      }

      // optional .service_infrastructure.Ack ack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ew_status;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWStatus ew_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ew_options;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWOptions ew_options = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ew_option_delete;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWOptionDelete ew_option_delete = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_option_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_option_delete()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_register_response;
        break;
      }

      // optional .fv.tb.protos.TBProtos.RegisterResponse register_response = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_register_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_new_signal_frame;
        break;
      }

      // optional .fv.tb.protos.TBProtos.newSignalFrame new_signal_frame = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_signal_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_signal_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ew_capabilities;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWCapabilities ew_capabilities = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_capabilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_capabilities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ew_transmitting;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWTransmitting ew_transmitting = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_transmitting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_transmitting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ew_technique_descriptions;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWTechniqueDescriptions ew_technique_descriptions = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_technique_descriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_technique_descriptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWResponseTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .service_infrastructure.NAck nack = 1;
  if (has_nack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nack(), output);
  }

  // optional .service_infrastructure.Ack ack = 2;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ack(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWStatus ew_status = 3;
  if (has_ew_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ew_status(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWOptions ew_options = 4;
  if (has_ew_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ew_options(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWOptionDelete ew_option_delete = 5;
  if (has_ew_option_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ew_option_delete(), output);
  }

  // optional .fv.tb.protos.TBProtos.RegisterResponse register_response = 6;
  if (has_register_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->register_response(), output);
  }

  // optional .fv.tb.protos.TBProtos.newSignalFrame new_signal_frame = 7;
  if (has_new_signal_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->new_signal_frame(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWCapabilities ew_capabilities = 8;
  if (has_ew_capabilities()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ew_capabilities(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWTransmitting ew_transmitting = 9;
  if (has_ew_transmitting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->ew_transmitting(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWTechniqueDescriptions ew_technique_descriptions = 10;
  if (has_ew_technique_descriptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->ew_technique_descriptions(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWResponseTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .service_infrastructure.NAck nack = 1;
  if (has_nack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nack(), target);
  }

  // optional .service_infrastructure.Ack ack = 2;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ack(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWStatus ew_status = 3;
  if (has_ew_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ew_status(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWOptions ew_options = 4;
  if (has_ew_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ew_options(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWOptionDelete ew_option_delete = 5;
  if (has_ew_option_delete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ew_option_delete(), target);
  }

  // optional .fv.tb.protos.TBProtos.RegisterResponse register_response = 6;
  if (has_register_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->register_response(), target);
  }

  // optional .fv.tb.protos.TBProtos.newSignalFrame new_signal_frame = 7;
  if (has_new_signal_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->new_signal_frame(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWCapabilities ew_capabilities = 8;
  if (has_ew_capabilities()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ew_capabilities(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWTransmitting ew_transmitting = 9;
  if (has_ew_transmitting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->ew_transmitting(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWTechniqueDescriptions ew_technique_descriptions = 10;
  if (has_ew_technique_descriptions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->ew_technique_descriptions(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWResponseTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .service_infrastructure.NAck nack = 1;
    if (has_nack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nack());
    }

    // optional .service_infrastructure.Ack ack = 2;
    if (has_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ack());
    }

    // optional .fv.tb.protos.TBProtos.EWStatus ew_status = 3;
    if (has_ew_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_status());
    }

    // optional .fv.tb.protos.TBProtos.EWOptions ew_options = 4;
    if (has_ew_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_options());
    }

    // optional .fv.tb.protos.TBProtos.EWOptionDelete ew_option_delete = 5;
    if (has_ew_option_delete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_option_delete());
    }

    // optional .fv.tb.protos.TBProtos.RegisterResponse register_response = 6;
    if (has_register_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->register_response());
    }

    // optional .fv.tb.protos.TBProtos.newSignalFrame new_signal_frame = 7;
    if (has_new_signal_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_signal_frame());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .fv.tb.protos.TBProtos.EWCapabilities ew_capabilities = 8;
    if (has_ew_capabilities()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_capabilities());
    }

    // optional .fv.tb.protos.TBProtos.EWTransmitting ew_transmitting = 9;
    if (has_ew_transmitting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_transmitting());
    }

    // optional .fv.tb.protos.TBProtos.EWTechniqueDescriptions ew_technique_descriptions = 10;
    if (has_ew_technique_descriptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_technique_descriptions());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWResponseTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWResponseTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWResponseTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWResponseTopic::MergeFrom(const EWResponseTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_nack()) {
      mutable_nack()->::service_infrastructure::NAck::MergeFrom(from.nack());
    }
    if (from.has_ack()) {
      mutable_ack()->::service_infrastructure::Ack::MergeFrom(from.ack());
    }
    if (from.has_ew_status()) {
      mutable_ew_status()->::fv::tb::protos::TBProtos::EWStatus::MergeFrom(from.ew_status());
    }
    if (from.has_ew_options()) {
      mutable_ew_options()->::fv::tb::protos::TBProtos::EWOptions::MergeFrom(from.ew_options());
    }
    if (from.has_ew_option_delete()) {
      mutable_ew_option_delete()->::fv::tb::protos::TBProtos::EWOptionDelete::MergeFrom(from.ew_option_delete());
    }
    if (from.has_register_response()) {
      mutable_register_response()->::fv::tb::protos::TBProtos::RegisterResponse::MergeFrom(from.register_response());
    }
    if (from.has_new_signal_frame()) {
      mutable_new_signal_frame()->::fv::tb::protos::TBProtos::newSignalFrame::MergeFrom(from.new_signal_frame());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ew_capabilities()) {
      mutable_ew_capabilities()->::fv::tb::protos::TBProtos::EWCapabilities::MergeFrom(from.ew_capabilities());
    }
    if (from.has_ew_transmitting()) {
      mutable_ew_transmitting()->::fv::tb::protos::TBProtos::EWTransmitting::MergeFrom(from.ew_transmitting());
    }
    if (from.has_ew_technique_descriptions()) {
      mutable_ew_technique_descriptions()->::fv::tb::protos::TBProtos::EWTechniqueDescriptions::MergeFrom(from.ew_technique_descriptions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWResponseTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWResponseTopic::CopyFrom(const EWResponseTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWResponseTopic::IsInitialized() const {

  return true;
}

void EWResponseTopic::Swap(EWResponseTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(nack_, other->nack_);
    std::swap(ack_, other->ack_);
    std::swap(ew_status_, other->ew_status_);
    std::swap(ew_options_, other->ew_options_);
    std::swap(ew_option_delete_, other->ew_option_delete_);
    std::swap(register_response_, other->register_response_);
    std::swap(new_signal_frame_, other->new_signal_frame_);
    std::swap(ew_capabilities_, other->ew_capabilities_);
    std::swap(ew_transmitting_, other->ew_transmitting_);
    std::swap(ew_technique_descriptions_, other->ew_technique_descriptions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWResponseTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWResponseTopic_descriptor_;
  metadata.reflection = EWResponseTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CapabilityResponseTopic::kHeaderFieldNumber;
const int CapabilityResponseTopic::kNackFieldNumber;
const int CapabilityResponseTopic::kAckFieldNumber;
const int CapabilityResponseTopic::kEwCapabilityFieldNumber;
const int CapabilityResponseTopic::kEwCapabilityUnregisterFieldNumber;
const int CapabilityResponseTopic::kHopAttackStatusFieldNumber;
const int CapabilityResponseTopic::kEwCapabilityTransmittingFieldNumber;
#endif  // !_MSC_VER

CapabilityResponseTopic::CapabilityResponseTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CapabilityResponseTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  nack_ = const_cast< ::service_infrastructure::NAck*>(&::service_infrastructure::NAck::default_instance());
  ack_ = const_cast< ::service_infrastructure::Ack*>(&::service_infrastructure::Ack::default_instance());
  ew_capability_ = const_cast< ::fv::tb::protos::TBProtos::EWCapability*>(&::fv::tb::protos::TBProtos::EWCapability::default_instance());
  ew_capability_unregister_ = const_cast< ::fv::tb::protos::TBProtos::EWCapabilityUnregister*>(&::fv::tb::protos::TBProtos::EWCapabilityUnregister::default_instance());
  hop_attack_status_ = const_cast< ::fv::tb::protos::TBProtos::HopAttackStatus*>(&::fv::tb::protos::TBProtos::HopAttackStatus::default_instance());
  ew_capability_transmitting_ = const_cast< ::fv::tb::protos::TBProtos::EWCapabilityTransmitting*>(&::fv::tb::protos::TBProtos::EWCapabilityTransmitting::default_instance());
}

CapabilityResponseTopic::CapabilityResponseTopic(const CapabilityResponseTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CapabilityResponseTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  nack_ = NULL;
  ack_ = NULL;
  ew_capability_ = NULL;
  ew_capability_unregister_ = NULL;
  hop_attack_status_ = NULL;
  ew_capability_transmitting_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CapabilityResponseTopic::~CapabilityResponseTopic() {
  SharedDtor();
}

void CapabilityResponseTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete nack_;
    delete ack_;
    delete ew_capability_;
    delete ew_capability_unregister_;
    delete hop_attack_status_;
    delete ew_capability_transmitting_;
  }
}

void CapabilityResponseTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CapabilityResponseTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CapabilityResponseTopic_descriptor_;
}

const CapabilityResponseTopic& CapabilityResponseTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

CapabilityResponseTopic* CapabilityResponseTopic::default_instance_ = NULL;

CapabilityResponseTopic* CapabilityResponseTopic::New() const {
  return new CapabilityResponseTopic;
}

void CapabilityResponseTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_nack()) {
      if (nack_ != NULL) nack_->::service_infrastructure::NAck::Clear();
    }
    if (has_ack()) {
      if (ack_ != NULL) ack_->::service_infrastructure::Ack::Clear();
    }
    if (has_ew_capability()) {
      if (ew_capability_ != NULL) ew_capability_->::fv::tb::protos::TBProtos::EWCapability::Clear();
    }
    if (has_ew_capability_unregister()) {
      if (ew_capability_unregister_ != NULL) ew_capability_unregister_->::fv::tb::protos::TBProtos::EWCapabilityUnregister::Clear();
    }
    if (has_hop_attack_status()) {
      if (hop_attack_status_ != NULL) hop_attack_status_->::fv::tb::protos::TBProtos::HopAttackStatus::Clear();
    }
    if (has_ew_capability_transmitting()) {
      if (ew_capability_transmitting_ != NULL) ew_capability_transmitting_->::fv::tb::protos::TBProtos::EWCapabilityTransmitting::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CapabilityResponseTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_infrastructure.NAck nack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ack;
        break;
      }

      // optional .service_infrastructure.Ack ack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ew_capability;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWCapability ew_capability = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_capability:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_capability()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ew_capability_unregister;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWCapabilityUnregister ew_capability_unregister = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_capability_unregister:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_capability_unregister()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_hop_attack_status;
        break;
      }

      // optional .fv.tb.protos.TBProtos.HopAttackStatus hop_attack_status = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hop_attack_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hop_attack_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_ew_capability_transmitting;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWCapabilityTransmitting ew_capability_transmitting = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_capability_transmitting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_capability_transmitting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CapabilityResponseTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .service_infrastructure.NAck nack = 1;
  if (has_nack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nack(), output);
  }

  // optional .service_infrastructure.Ack ack = 2;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ack(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWCapability ew_capability = 10;
  if (has_ew_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->ew_capability(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWCapabilityUnregister ew_capability_unregister = 11;
  if (has_ew_capability_unregister()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->ew_capability_unregister(), output);
  }

  // optional .fv.tb.protos.TBProtos.HopAttackStatus hop_attack_status = 12;
  if (has_hop_attack_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->hop_attack_status(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWCapabilityTransmitting ew_capability_transmitting = 13;
  if (has_ew_capability_transmitting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->ew_capability_transmitting(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CapabilityResponseTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .service_infrastructure.NAck nack = 1;
  if (has_nack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nack(), target);
  }

  // optional .service_infrastructure.Ack ack = 2;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ack(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWCapability ew_capability = 10;
  if (has_ew_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->ew_capability(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWCapabilityUnregister ew_capability_unregister = 11;
  if (has_ew_capability_unregister()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->ew_capability_unregister(), target);
  }

  // optional .fv.tb.protos.TBProtos.HopAttackStatus hop_attack_status = 12;
  if (has_hop_attack_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->hop_attack_status(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWCapabilityTransmitting ew_capability_transmitting = 13;
  if (has_ew_capability_transmitting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->ew_capability_transmitting(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CapabilityResponseTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .service_infrastructure.NAck nack = 1;
    if (has_nack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nack());
    }

    // optional .service_infrastructure.Ack ack = 2;
    if (has_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ack());
    }

    // optional .fv.tb.protos.TBProtos.EWCapability ew_capability = 10;
    if (has_ew_capability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_capability());
    }

    // optional .fv.tb.protos.TBProtos.EWCapabilityUnregister ew_capability_unregister = 11;
    if (has_ew_capability_unregister()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_capability_unregister());
    }

    // optional .fv.tb.protos.TBProtos.HopAttackStatus hop_attack_status = 12;
    if (has_hop_attack_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hop_attack_status());
    }

    // optional .fv.tb.protos.TBProtos.EWCapabilityTransmitting ew_capability_transmitting = 13;
    if (has_ew_capability_transmitting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_capability_transmitting());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CapabilityResponseTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CapabilityResponseTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CapabilityResponseTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CapabilityResponseTopic::MergeFrom(const CapabilityResponseTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_nack()) {
      mutable_nack()->::service_infrastructure::NAck::MergeFrom(from.nack());
    }
    if (from.has_ack()) {
      mutable_ack()->::service_infrastructure::Ack::MergeFrom(from.ack());
    }
    if (from.has_ew_capability()) {
      mutable_ew_capability()->::fv::tb::protos::TBProtos::EWCapability::MergeFrom(from.ew_capability());
    }
    if (from.has_ew_capability_unregister()) {
      mutable_ew_capability_unregister()->::fv::tb::protos::TBProtos::EWCapabilityUnregister::MergeFrom(from.ew_capability_unregister());
    }
    if (from.has_hop_attack_status()) {
      mutable_hop_attack_status()->::fv::tb::protos::TBProtos::HopAttackStatus::MergeFrom(from.hop_attack_status());
    }
    if (from.has_ew_capability_transmitting()) {
      mutable_ew_capability_transmitting()->::fv::tb::protos::TBProtos::EWCapabilityTransmitting::MergeFrom(from.ew_capability_transmitting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CapabilityResponseTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapabilityResponseTopic::CopyFrom(const CapabilityResponseTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilityResponseTopic::IsInitialized() const {

  return true;
}

void CapabilityResponseTopic::Swap(CapabilityResponseTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(nack_, other->nack_);
    std::swap(ack_, other->ack_);
    std::swap(ew_capability_, other->ew_capability_);
    std::swap(ew_capability_unregister_, other->ew_capability_unregister_);
    std::swap(hop_attack_status_, other->hop_attack_status_);
    std::swap(ew_capability_transmitting_, other->ew_capability_transmitting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CapabilityResponseTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CapabilityResponseTopic_descriptor_;
  metadata.reflection = CapabilityResponseTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadioControlRequestTopic::kHeaderFieldNumber;
const int RadioControlRequestTopic::kDwellScanFieldNumber;
const int RadioControlRequestTopic::kRxQueryFieldNumber;
const int RadioControlRequestTopic::kReceiverRequestFieldNumber;
const int RadioControlRequestTopic::kReceiverReleaseFieldNumber;
const int RadioControlRequestTopic::kRxCommandRequestFieldNumber;
#endif  // !_MSC_VER

RadioControlRequestTopic::RadioControlRequestTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RadioControlRequestTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  dwell_scan_ = const_cast< ::tuner_msg::DwellScan*>(&::tuner_msg::DwellScan::default_instance());
  rx_query_ = const_cast< ::tuner_msg::QueryReceiverStatus*>(&::tuner_msg::QueryReceiverStatus::default_instance());
  receiver_request_ = const_cast< ::tuner_msg::ReceiverRequest*>(&::tuner_msg::ReceiverRequest::default_instance());
  receiver_release_ = const_cast< ::tuner_msg::ReceiverRelease*>(&::tuner_msg::ReceiverRelease::default_instance());
  rx_command_request_ = const_cast< ::rx_command_msg::RxCommandRequest*>(&::rx_command_msg::RxCommandRequest::default_instance());
}

RadioControlRequestTopic::RadioControlRequestTopic(const RadioControlRequestTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RadioControlRequestTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  dwell_scan_ = NULL;
  rx_query_ = NULL;
  receiver_request_ = NULL;
  receiver_release_ = NULL;
  rx_command_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadioControlRequestTopic::~RadioControlRequestTopic() {
  SharedDtor();
}

void RadioControlRequestTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete dwell_scan_;
    delete rx_query_;
    delete receiver_request_;
    delete receiver_release_;
    delete rx_command_request_;
  }
}

void RadioControlRequestTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadioControlRequestTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadioControlRequestTopic_descriptor_;
}

const RadioControlRequestTopic& RadioControlRequestTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

RadioControlRequestTopic* RadioControlRequestTopic::default_instance_ = NULL;

RadioControlRequestTopic* RadioControlRequestTopic::New() const {
  return new RadioControlRequestTopic;
}

void RadioControlRequestTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_dwell_scan()) {
      if (dwell_scan_ != NULL) dwell_scan_->::tuner_msg::DwellScan::Clear();
    }
    if (has_rx_query()) {
      if (rx_query_ != NULL) rx_query_->::tuner_msg::QueryReceiverStatus::Clear();
    }
    if (has_receiver_request()) {
      if (receiver_request_ != NULL) receiver_request_->::tuner_msg::ReceiverRequest::Clear();
    }
    if (has_receiver_release()) {
      if (receiver_release_ != NULL) receiver_release_->::tuner_msg::ReceiverRelease::Clear();
    }
    if (has_rx_command_request()) {
      if (rx_command_request_ != NULL) rx_command_request_->::rx_command_msg::RxCommandRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadioControlRequestTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tuner_msg.DwellScan dwell_scan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dwell_scan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rx_query;
        break;
      }

      // optional .tuner_msg.QueryReceiverStatus rx_query = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rx_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rx_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_receiver_request;
        break;
      }

      // optional .tuner_msg.ReceiverRequest receiver_request = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiver_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiver_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_receiver_release;
        break;
      }

      // optional .tuner_msg.ReceiverRelease receiver_release = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiver_release:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiver_release()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rx_command_request;
        break;
      }

      // optional .rx_command_msg.RxCommandRequest rx_command_request = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rx_command_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rx_command_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RadioControlRequestTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .tuner_msg.DwellScan dwell_scan = 1;
  if (has_dwell_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dwell_scan(), output);
  }

  // optional .tuner_msg.QueryReceiverStatus rx_query = 2;
  if (has_rx_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rx_query(), output);
  }

  // optional .tuner_msg.ReceiverRequest receiver_request = 3;
  if (has_receiver_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->receiver_request(), output);
  }

  // optional .tuner_msg.ReceiverRelease receiver_release = 4;
  if (has_receiver_release()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->receiver_release(), output);
  }

  // optional .rx_command_msg.RxCommandRequest rx_command_request = 5;
  if (has_rx_command_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rx_command_request(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RadioControlRequestTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .tuner_msg.DwellScan dwell_scan = 1;
  if (has_dwell_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dwell_scan(), target);
  }

  // optional .tuner_msg.QueryReceiverStatus rx_query = 2;
  if (has_rx_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rx_query(), target);
  }

  // optional .tuner_msg.ReceiverRequest receiver_request = 3;
  if (has_receiver_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->receiver_request(), target);
  }

  // optional .tuner_msg.ReceiverRelease receiver_release = 4;
  if (has_receiver_release()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->receiver_release(), target);
  }

  // optional .rx_command_msg.RxCommandRequest rx_command_request = 5;
  if (has_rx_command_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rx_command_request(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RadioControlRequestTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .tuner_msg.DwellScan dwell_scan = 1;
    if (has_dwell_scan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dwell_scan());
    }

    // optional .tuner_msg.QueryReceiverStatus rx_query = 2;
    if (has_rx_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rx_query());
    }

    // optional .tuner_msg.ReceiverRequest receiver_request = 3;
    if (has_receiver_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiver_request());
    }

    // optional .tuner_msg.ReceiverRelease receiver_release = 4;
    if (has_receiver_release()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiver_release());
    }

    // optional .rx_command_msg.RxCommandRequest rx_command_request = 5;
    if (has_rx_command_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rx_command_request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadioControlRequestTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadioControlRequestTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadioControlRequestTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadioControlRequestTopic::MergeFrom(const RadioControlRequestTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_dwell_scan()) {
      mutable_dwell_scan()->::tuner_msg::DwellScan::MergeFrom(from.dwell_scan());
    }
    if (from.has_rx_query()) {
      mutable_rx_query()->::tuner_msg::QueryReceiverStatus::MergeFrom(from.rx_query());
    }
    if (from.has_receiver_request()) {
      mutable_receiver_request()->::tuner_msg::ReceiverRequest::MergeFrom(from.receiver_request());
    }
    if (from.has_receiver_release()) {
      mutable_receiver_release()->::tuner_msg::ReceiverRelease::MergeFrom(from.receiver_release());
    }
    if (from.has_rx_command_request()) {
      mutable_rx_command_request()->::rx_command_msg::RxCommandRequest::MergeFrom(from.rx_command_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadioControlRequestTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadioControlRequestTopic::CopyFrom(const RadioControlRequestTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadioControlRequestTopic::IsInitialized() const {

  return true;
}

void RadioControlRequestTopic::Swap(RadioControlRequestTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(dwell_scan_, other->dwell_scan_);
    std::swap(rx_query_, other->rx_query_);
    std::swap(receiver_request_, other->receiver_request_);
    std::swap(receiver_release_, other->receiver_release_);
    std::swap(rx_command_request_, other->rx_command_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadioControlRequestTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadioControlRequestTopic_descriptor_;
  metadata.reflection = RadioControlRequestTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignalEventTopic::kHeaderFieldNumber;
const int SignalEventTopic::kSignalEventFieldNumber;
const int SignalEventTopic::kGpsPositionFieldNumber;
#endif  // !_MSC_VER

SignalEventTopic::SignalEventTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalEventTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  signal_event_ = const_cast< ::falcon_remoting_msg::SignalEvent*>(&::falcon_remoting_msg::SignalEvent::default_instance());
  gps_position_ = const_cast< ::falcon_remoting_msg::GPSPosition*>(&::falcon_remoting_msg::GPSPosition::default_instance());
}

SignalEventTopic::SignalEventTopic(const SignalEventTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalEventTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  signal_event_ = NULL;
  gps_position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalEventTopic::~SignalEventTopic() {
  SharedDtor();
}

void SignalEventTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete signal_event_;
    delete gps_position_;
  }
}

void SignalEventTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalEventTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalEventTopic_descriptor_;
}

const SignalEventTopic& SignalEventTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

SignalEventTopic* SignalEventTopic::default_instance_ = NULL;

SignalEventTopic* SignalEventTopic::New() const {
  return new SignalEventTopic;
}

void SignalEventTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_signal_event()) {
      if (signal_event_ != NULL) signal_event_->::falcon_remoting_msg::SignalEvent::Clear();
    }
    if (has_gps_position()) {
      if (gps_position_ != NULL) gps_position_->::falcon_remoting_msg::GPSPosition::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalEventTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .falcon_remoting_msg.SignalEvent signal_event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gps_position;
        break;
      }

      // optional .falcon_remoting_msg.GPSPosition gps_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gps_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalEventTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .falcon_remoting_msg.SignalEvent signal_event = 1;
  if (has_signal_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signal_event(), output);
  }

  // optional .falcon_remoting_msg.GPSPosition gps_position = 2;
  if (has_gps_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gps_position(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalEventTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .falcon_remoting_msg.SignalEvent signal_event = 1;
  if (has_signal_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signal_event(), target);
  }

  // optional .falcon_remoting_msg.GPSPosition gps_position = 2;
  if (has_gps_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gps_position(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalEventTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .falcon_remoting_msg.SignalEvent signal_event = 1;
    if (has_signal_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal_event());
    }

    // optional .falcon_remoting_msg.GPSPosition gps_position = 2;
    if (has_gps_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gps_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalEventTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalEventTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalEventTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalEventTopic::MergeFrom(const SignalEventTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_signal_event()) {
      mutable_signal_event()->::falcon_remoting_msg::SignalEvent::MergeFrom(from.signal_event());
    }
    if (from.has_gps_position()) {
      mutable_gps_position()->::falcon_remoting_msg::GPSPosition::MergeFrom(from.gps_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalEventTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalEventTopic::CopyFrom(const SignalEventTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalEventTopic::IsInitialized() const {

  return true;
}

void SignalEventTopic::Swap(SignalEventTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(signal_event_, other->signal_event_);
    std::swap(gps_position_, other->gps_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalEventTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalEventTopic_descriptor_;
  metadata.reflection = SignalEventTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductResponseTopic::kHeaderFieldNumber;
const int ProductResponseTopic::kImageAvailableFieldNumber;
const int ProductResponseTopic::kFisdFieldNumber;
const int ProductResponseTopic::kVideoParametersFieldNumber;
const int ProductResponseTopic::kAudioavailableFieldNumber;
#endif  // !_MSC_VER

ProductResponseTopic::ProductResponseTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductResponseTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  image_available_ = const_cast< ::video_compression_msg::ImageAvailable*>(&::video_compression_msg::ImageAvailable::default_instance());
  fisd_ = const_cast< ::products::FisD*>(&::products::FisD::default_instance());
  video_parameters_ = const_cast< ::service_infrastructure::VideoParameters*>(&::service_infrastructure::VideoParameters::default_instance());
  audioavailable_ = const_cast< ::products::AudioAvailable*>(&::products::AudioAvailable::default_instance());
}

ProductResponseTopic::ProductResponseTopic(const ProductResponseTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductResponseTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  image_available_ = NULL;
  fisd_ = NULL;
  video_parameters_ = NULL;
  audioavailable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductResponseTopic::~ProductResponseTopic() {
  SharedDtor();
}

void ProductResponseTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete image_available_;
    delete fisd_;
    delete video_parameters_;
    delete audioavailable_;
  }
}

void ProductResponseTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductResponseTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductResponseTopic_descriptor_;
}

const ProductResponseTopic& ProductResponseTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

ProductResponseTopic* ProductResponseTopic::default_instance_ = NULL;

ProductResponseTopic* ProductResponseTopic::New() const {
  return new ProductResponseTopic;
}

void ProductResponseTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_image_available()) {
      if (image_available_ != NULL) image_available_->::video_compression_msg::ImageAvailable::Clear();
    }
    if (has_fisd()) {
      if (fisd_ != NULL) fisd_->::products::FisD::Clear();
    }
    if (has_video_parameters()) {
      if (video_parameters_ != NULL) video_parameters_->::service_infrastructure::VideoParameters::Clear();
    }
    if (has_audioavailable()) {
      if (audioavailable_ != NULL) audioavailable_->::products::AudioAvailable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductResponseTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .video_compression_msg.ImageAvailable image_available = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_available()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fisd;
        break;
      }

      // optional .products.FisD fisd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fisd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fisd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_video_parameters;
        break;
      }

      // optional .service_infrastructure.VideoParameters video_parameters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_parameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_audioavailable;
        break;
      }

      // optional .products.AudioAvailable audioavailable = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audioavailable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audioavailable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductResponseTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .video_compression_msg.ImageAvailable image_available = 1;
  if (has_image_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->image_available(), output);
  }

  // optional .products.FisD fisd = 2;
  if (has_fisd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fisd(), output);
  }

  // optional .service_infrastructure.VideoParameters video_parameters = 3;
  if (has_video_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->video_parameters(), output);
  }

  // optional .products.AudioAvailable audioavailable = 4;
  if (has_audioavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->audioavailable(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductResponseTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .video_compression_msg.ImageAvailable image_available = 1;
  if (has_image_available()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->image_available(), target);
  }

  // optional .products.FisD fisd = 2;
  if (has_fisd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fisd(), target);
  }

  // optional .service_infrastructure.VideoParameters video_parameters = 3;
  if (has_video_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->video_parameters(), target);
  }

  // optional .products.AudioAvailable audioavailable = 4;
  if (has_audioavailable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->audioavailable(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductResponseTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .video_compression_msg.ImageAvailable image_available = 1;
    if (has_image_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image_available());
    }

    // optional .products.FisD fisd = 2;
    if (has_fisd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fisd());
    }

    // optional .service_infrastructure.VideoParameters video_parameters = 3;
    if (has_video_parameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video_parameters());
    }

    // optional .products.AudioAvailable audioavailable = 4;
    if (has_audioavailable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audioavailable());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductResponseTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductResponseTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductResponseTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductResponseTopic::MergeFrom(const ProductResponseTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_image_available()) {
      mutable_image_available()->::video_compression_msg::ImageAvailable::MergeFrom(from.image_available());
    }
    if (from.has_fisd()) {
      mutable_fisd()->::products::FisD::MergeFrom(from.fisd());
    }
    if (from.has_video_parameters()) {
      mutable_video_parameters()->::service_infrastructure::VideoParameters::MergeFrom(from.video_parameters());
    }
    if (from.has_audioavailable()) {
      mutable_audioavailable()->::products::AudioAvailable::MergeFrom(from.audioavailable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductResponseTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductResponseTopic::CopyFrom(const ProductResponseTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductResponseTopic::IsInitialized() const {

  return true;
}

void ProductResponseTopic::Swap(ProductResponseTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(image_available_, other->image_available_);
    std::swap(fisd_, other->fisd_);
    std::swap(video_parameters_, other->video_parameters_);
    std::swap(audioavailable_, other->audioavailable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductResponseTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductResponseTopic_descriptor_;
  metadata.reflection = ProductResponseTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoParameters::kEltexFieldNumber;
const int VideoParameters::kInstanceFieldNumber;
const int VideoParameters::kProtocolFieldNumber;
const int VideoParameters::kIpaddressFieldNumber;
const int VideoParameters::kPortFieldNumber;
const int VideoParameters::kGlobalIDFieldNumber;
#endif  // !_MSC_VER

VideoParameters::VideoParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoParameters::InitAsDefaultInstance() {
}

VideoParameters::VideoParameters(const VideoParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoParameters::SharedCtor() {
  _cached_size_ = 0;
  eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instance_ = 0;
  protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoParameters::~VideoParameters() {
  SharedDtor();
}

void VideoParameters::SharedDtor() {
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    delete eltex_;
  }
  if (protocol_ != &::google::protobuf::internal::kEmptyString) {
    delete protocol_;
  }
  if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete ipaddress_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void VideoParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoParameters_descriptor_;
}

const VideoParameters& VideoParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

VideoParameters* VideoParameters::default_instance_ = NULL;

VideoParameters* VideoParameters::New() const {
  return new VideoParameters;
}

void VideoParameters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_eltex()) {
      if (eltex_ != &::google::protobuf::internal::kEmptyString) {
        eltex_->clear();
      }
    }
    instance_ = 0;
    if (has_protocol()) {
      if (protocol_ != &::google::protobuf::internal::kEmptyString) {
        protocol_->clear();
      }
    }
    if (has_ipaddress()) {
      if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
        ipaddress_->clear();
      }
    }
    port_ = 0;
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string eltex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eltex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eltex().data(), this->eltex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instance;
        break;
      }

      // optional int32 instance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_)));
          set_has_instance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_protocol;
        break;
      }

      // optional string protocol = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protocol().data(), this->protocol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ipaddress;
        break;
      }

      // optional string ipaddress = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipaddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // optional int32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_globalID;
        break;
      }

      // optional string globalID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string eltex = 1;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->eltex(), output);
  }

  // optional int32 instance = 2;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instance(), output);
  }

  // optional string protocol = 3;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->protocol(), output);
  }

  // optional string ipaddress = 4;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ipaddress(), output);
  }

  // optional int32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port(), output);
  }

  // optional string globalID = 6;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string eltex = 1;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->eltex(), target);
  }

  // optional int32 instance = 2;
  if (has_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instance(), target);
  }

  // optional string protocol = 3;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->protocol(), target);
  }

  // optional string ipaddress = 4;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ipaddress(), target);
  }

  // optional int32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port(), target);
  }

  // optional string globalID = 6;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string eltex = 1;
    if (has_eltex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eltex());
    }

    // optional int32 instance = 2;
    if (has_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance());
    }

    // optional string protocol = 3;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol());
    }

    // optional string ipaddress = 4;
    if (has_ipaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipaddress());
    }

    // optional int32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string globalID = 6;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoParameters::MergeFrom(const VideoParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eltex()) {
      set_eltex(from.eltex());
    }
    if (from.has_instance()) {
      set_instance(from.instance());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_ipaddress()) {
      set_ipaddress(from.ipaddress());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoParameters::CopyFrom(const VideoParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoParameters::IsInitialized() const {

  return true;
}

void VideoParameters::Swap(VideoParameters* other) {
  if (other != this) {
    std::swap(eltex_, other->eltex_);
    std::swap(instance_, other->instance_);
    std::swap(protocol_, other->protocol_);
    std::swap(ipaddress_, other->ipaddress_);
    std::swap(port_, other->port_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoParameters_descriptor_;
  metadata.reflection = VideoParameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ESProductTopic::kHeaderFieldNumber;
const int ESProductTopic::kEsObservablesRegisterFieldNumber;
const int ESProductTopic::kEsObservablesUnregisterFieldNumber;
const int ESProductTopic::kEsObservablesFieldNumber;
const int ESProductTopic::kStateResponseFieldNumber;
const int ESProductTopic::kOverrideStateFieldNumber;
const int ESProductTopic::kAutokillGuiFieldNumber;
#endif  // !_MSC_VER

ESProductTopic::ESProductTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ESProductTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  es_observables_register_ = const_cast< ::es_product_msg::ESObservablesRegister*>(&::es_product_msg::ESObservablesRegister::default_instance());
  es_observables_unregister_ = const_cast< ::es_product_msg::ESObservablesUnregister*>(&::es_product_msg::ESObservablesUnregister::default_instance());
  es_observables_ = const_cast< ::es_product_msg::ESObservables*>(&::es_product_msg::ESObservables::default_instance());
  state_response_ = const_cast< ::auto_kill_msg::StateResponse*>(&::auto_kill_msg::StateResponse::default_instance());
  override_state_ = const_cast< ::auto_kill_msg::OverrideState*>(&::auto_kill_msg::OverrideState::default_instance());
  autokill_gui_ = const_cast< ::auto_kill_msg::AutoKillGUI*>(&::auto_kill_msg::AutoKillGUI::default_instance());
}

ESProductTopic::ESProductTopic(const ESProductTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ESProductTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  es_observables_register_ = NULL;
  es_observables_unregister_ = NULL;
  es_observables_ = NULL;
  state_response_ = NULL;
  override_state_ = NULL;
  autokill_gui_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ESProductTopic::~ESProductTopic() {
  SharedDtor();
}

void ESProductTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete es_observables_register_;
    delete es_observables_unregister_;
    delete es_observables_;
    delete state_response_;
    delete override_state_;
    delete autokill_gui_;
  }
}

void ESProductTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ESProductTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESProductTopic_descriptor_;
}

const ESProductTopic& ESProductTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

ESProductTopic* ESProductTopic::default_instance_ = NULL;

ESProductTopic* ESProductTopic::New() const {
  return new ESProductTopic;
}

void ESProductTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_es_observables_register()) {
      if (es_observables_register_ != NULL) es_observables_register_->::es_product_msg::ESObservablesRegister::Clear();
    }
    if (has_es_observables_unregister()) {
      if (es_observables_unregister_ != NULL) es_observables_unregister_->::es_product_msg::ESObservablesUnregister::Clear();
    }
    if (has_es_observables()) {
      if (es_observables_ != NULL) es_observables_->::es_product_msg::ESObservables::Clear();
    }
    if (has_state_response()) {
      if (state_response_ != NULL) state_response_->::auto_kill_msg::StateResponse::Clear();
    }
    if (has_override_state()) {
      if (override_state_ != NULL) override_state_->::auto_kill_msg::OverrideState::Clear();
    }
    if (has_autokill_gui()) {
      if (autokill_gui_ != NULL) autokill_gui_->::auto_kill_msg::AutoKillGUI::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ESProductTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .es_product_msg.ESObservablesRegister es_observables_register = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_es_observables_register()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_es_observables_unregister;
        break;
      }

      // optional .es_product_msg.ESObservablesUnregister es_observables_unregister = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_es_observables_unregister:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_es_observables_unregister()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_es_observables;
        break;
      }

      // optional .es_product_msg.ESObservables es_observables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_es_observables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_es_observables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_state_response;
        break;
      }

      // optional .auto_kill_msg.StateResponse state_response = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_override_state;
        break;
      }

      // optional .auto_kill_msg.OverrideState override_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_override_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_override_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_autokill_gui;
        break;
      }

      // optional .auto_kill_msg.AutoKillGUI autokill_gui = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_autokill_gui:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autokill_gui()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ESProductTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .es_product_msg.ESObservablesRegister es_observables_register = 1;
  if (has_es_observables_register()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->es_observables_register(), output);
  }

  // optional .es_product_msg.ESObservablesUnregister es_observables_unregister = 2;
  if (has_es_observables_unregister()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->es_observables_unregister(), output);
  }

  // optional .es_product_msg.ESObservables es_observables = 3;
  if (has_es_observables()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->es_observables(), output);
  }

  // optional .auto_kill_msg.StateResponse state_response = 4;
  if (has_state_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->state_response(), output);
  }

  // optional .auto_kill_msg.OverrideState override_state = 5;
  if (has_override_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->override_state(), output);
  }

  // optional .auto_kill_msg.AutoKillGUI autokill_gui = 6;
  if (has_autokill_gui()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->autokill_gui(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ESProductTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .es_product_msg.ESObservablesRegister es_observables_register = 1;
  if (has_es_observables_register()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->es_observables_register(), target);
  }

  // optional .es_product_msg.ESObservablesUnregister es_observables_unregister = 2;
  if (has_es_observables_unregister()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->es_observables_unregister(), target);
  }

  // optional .es_product_msg.ESObservables es_observables = 3;
  if (has_es_observables()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->es_observables(), target);
  }

  // optional .auto_kill_msg.StateResponse state_response = 4;
  if (has_state_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->state_response(), target);
  }

  // optional .auto_kill_msg.OverrideState override_state = 5;
  if (has_override_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->override_state(), target);
  }

  // optional .auto_kill_msg.AutoKillGUI autokill_gui = 6;
  if (has_autokill_gui()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->autokill_gui(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ESProductTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .es_product_msg.ESObservablesRegister es_observables_register = 1;
    if (has_es_observables_register()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->es_observables_register());
    }

    // optional .es_product_msg.ESObservablesUnregister es_observables_unregister = 2;
    if (has_es_observables_unregister()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->es_observables_unregister());
    }

    // optional .es_product_msg.ESObservables es_observables = 3;
    if (has_es_observables()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->es_observables());
    }

    // optional .auto_kill_msg.StateResponse state_response = 4;
    if (has_state_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state_response());
    }

    // optional .auto_kill_msg.OverrideState override_state = 5;
    if (has_override_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->override_state());
    }

    // optional .auto_kill_msg.AutoKillGUI autokill_gui = 6;
    if (has_autokill_gui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->autokill_gui());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ESProductTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ESProductTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ESProductTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ESProductTopic::MergeFrom(const ESProductTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_es_observables_register()) {
      mutable_es_observables_register()->::es_product_msg::ESObservablesRegister::MergeFrom(from.es_observables_register());
    }
    if (from.has_es_observables_unregister()) {
      mutable_es_observables_unregister()->::es_product_msg::ESObservablesUnregister::MergeFrom(from.es_observables_unregister());
    }
    if (from.has_es_observables()) {
      mutable_es_observables()->::es_product_msg::ESObservables::MergeFrom(from.es_observables());
    }
    if (from.has_state_response()) {
      mutable_state_response()->::auto_kill_msg::StateResponse::MergeFrom(from.state_response());
    }
    if (from.has_override_state()) {
      mutable_override_state()->::auto_kill_msg::OverrideState::MergeFrom(from.override_state());
    }
    if (from.has_autokill_gui()) {
      mutable_autokill_gui()->::auto_kill_msg::AutoKillGUI::MergeFrom(from.autokill_gui());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ESProductTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESProductTopic::CopyFrom(const ESProductTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESProductTopic::IsInitialized() const {

  return true;
}

void ESProductTopic::Swap(ESProductTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(es_observables_register_, other->es_observables_register_);
    std::swap(es_observables_unregister_, other->es_observables_unregister_);
    std::swap(es_observables_, other->es_observables_);
    std::swap(state_response_, other->state_response_);
    std::swap(override_state_, other->override_state_);
    std::swap(autokill_gui_, other->autokill_gui_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ESProductTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ESProductTopic_descriptor_;
  metadata.reflection = ESProductTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InfrastructureEnvelope::kHeaderFieldNumber;
const int InfrastructureEnvelope::kHandshakeFieldNumber;
const int InfrastructureEnvelope::kEwRequestFieldNumber;
const int InfrastructureEnvelope::kProductRequestFieldNumber;
const int InfrastructureEnvelope::kRadioControlResponseFieldNumber;
const int InfrastructureEnvelope::kRadioDataFieldNumber;
const int InfrastructureEnvelope::kDebugTopicFieldNumber;
#endif  // !_MSC_VER

InfrastructureEnvelope::InfrastructureEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InfrastructureEnvelope::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  handshake_ = const_cast< ::service_infrastructure::HandshakeTopic*>(&::service_infrastructure::HandshakeTopic::default_instance());
  ew_request_ = const_cast< ::service_infrastructure::EWRequestTopic*>(&::service_infrastructure::EWRequestTopic::default_instance());
  product_request_ = const_cast< ::service_infrastructure::ProductRequestTopic*>(&::service_infrastructure::ProductRequestTopic::default_instance());
  radio_control_response_ = const_cast< ::service_infrastructure::RadioControlResponseTopic*>(&::service_infrastructure::RadioControlResponseTopic::default_instance());
  radio_data_ = const_cast< ::service_infrastructure::RadioDataTopic*>(&::service_infrastructure::RadioDataTopic::default_instance());
  debug_topic_ = const_cast< ::service_infrastructure::DebugTopic*>(&::service_infrastructure::DebugTopic::default_instance());
}

InfrastructureEnvelope::InfrastructureEnvelope(const InfrastructureEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InfrastructureEnvelope::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  handshake_ = NULL;
  ew_request_ = NULL;
  product_request_ = NULL;
  radio_control_response_ = NULL;
  radio_data_ = NULL;
  debug_topic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfrastructureEnvelope::~InfrastructureEnvelope() {
  SharedDtor();
}

void InfrastructureEnvelope::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete handshake_;
    delete ew_request_;
    delete product_request_;
    delete radio_control_response_;
    delete radio_data_;
    delete debug_topic_;
  }
}

void InfrastructureEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfrastructureEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfrastructureEnvelope_descriptor_;
}

const InfrastructureEnvelope& InfrastructureEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

InfrastructureEnvelope* InfrastructureEnvelope::default_instance_ = NULL;

InfrastructureEnvelope* InfrastructureEnvelope::New() const {
  return new InfrastructureEnvelope;
}

void InfrastructureEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_handshake()) {
      if (handshake_ != NULL) handshake_->::service_infrastructure::HandshakeTopic::Clear();
    }
    if (has_ew_request()) {
      if (ew_request_ != NULL) ew_request_->::service_infrastructure::EWRequestTopic::Clear();
    }
    if (has_product_request()) {
      if (product_request_ != NULL) product_request_->::service_infrastructure::ProductRequestTopic::Clear();
    }
    if (has_radio_control_response()) {
      if (radio_control_response_ != NULL) radio_control_response_->::service_infrastructure::RadioControlResponseTopic::Clear();
    }
    if (has_radio_data()) {
      if (radio_data_ != NULL) radio_data_->::service_infrastructure::RadioDataTopic::Clear();
    }
    if (has_debug_topic()) {
      if (debug_topic_ != NULL) debug_topic_->::service_infrastructure::DebugTopic::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InfrastructureEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_infrastructure.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_handshake;
        break;
      }

      // optional .service_infrastructure.HandshakeTopic handshake = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handshake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handshake()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ew_request;
        break;
      }

      // optional .service_infrastructure.EWRequestTopic ew_request = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_product_request;
        break;
      }

      // optional .service_infrastructure.ProductRequestTopic product_request = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_product_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_radio_control_response;
        break;
      }

      // optional .service_infrastructure.RadioControlResponseTopic radio_control_response = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_radio_control_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radio_control_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_radio_data;
        break;
      }

      // optional .service_infrastructure.RadioDataTopic radio_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_radio_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radio_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_debug_topic;
        break;
      }

      // optional .service_infrastructure.DebugTopic debug_topic = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_topic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InfrastructureEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .service_infrastructure.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .service_infrastructure.HandshakeTopic handshake = 2;
  if (has_handshake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->handshake(), output);
  }

  // optional .service_infrastructure.EWRequestTopic ew_request = 3;
  if (has_ew_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ew_request(), output);
  }

  // optional .service_infrastructure.ProductRequestTopic product_request = 5;
  if (has_product_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->product_request(), output);
  }

  // optional .service_infrastructure.RadioControlResponseTopic radio_control_response = 6;
  if (has_radio_control_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->radio_control_response(), output);
  }

  // optional .service_infrastructure.RadioDataTopic radio_data = 7;
  if (has_radio_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->radio_data(), output);
  }

  // optional .service_infrastructure.DebugTopic debug_topic = 8;
  if (has_debug_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->debug_topic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InfrastructureEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .service_infrastructure.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .service_infrastructure.HandshakeTopic handshake = 2;
  if (has_handshake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->handshake(), target);
  }

  // optional .service_infrastructure.EWRequestTopic ew_request = 3;
  if (has_ew_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ew_request(), target);
  }

  // optional .service_infrastructure.ProductRequestTopic product_request = 5;
  if (has_product_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->product_request(), target);
  }

  // optional .service_infrastructure.RadioControlResponseTopic radio_control_response = 6;
  if (has_radio_control_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->radio_control_response(), target);
  }

  // optional .service_infrastructure.RadioDataTopic radio_data = 7;
  if (has_radio_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->radio_data(), target);
  }

  // optional .service_infrastructure.DebugTopic debug_topic = 8;
  if (has_debug_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->debug_topic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InfrastructureEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .service_infrastructure.HandshakeTopic handshake = 2;
    if (has_handshake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handshake());
    }

    // optional .service_infrastructure.EWRequestTopic ew_request = 3;
    if (has_ew_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_request());
    }

    // optional .service_infrastructure.ProductRequestTopic product_request = 5;
    if (has_product_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->product_request());
    }

    // optional .service_infrastructure.RadioControlResponseTopic radio_control_response = 6;
    if (has_radio_control_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radio_control_response());
    }

    // optional .service_infrastructure.RadioDataTopic radio_data = 7;
    if (has_radio_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radio_data());
    }

    // optional .service_infrastructure.DebugTopic debug_topic = 8;
    if (has_debug_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debug_topic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfrastructureEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InfrastructureEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InfrastructureEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfrastructureEnvelope::MergeFrom(const InfrastructureEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_handshake()) {
      mutable_handshake()->::service_infrastructure::HandshakeTopic::MergeFrom(from.handshake());
    }
    if (from.has_ew_request()) {
      mutable_ew_request()->::service_infrastructure::EWRequestTopic::MergeFrom(from.ew_request());
    }
    if (from.has_product_request()) {
      mutable_product_request()->::service_infrastructure::ProductRequestTopic::MergeFrom(from.product_request());
    }
    if (from.has_radio_control_response()) {
      mutable_radio_control_response()->::service_infrastructure::RadioControlResponseTopic::MergeFrom(from.radio_control_response());
    }
    if (from.has_radio_data()) {
      mutable_radio_data()->::service_infrastructure::RadioDataTopic::MergeFrom(from.radio_data());
    }
    if (from.has_debug_topic()) {
      mutable_debug_topic()->::service_infrastructure::DebugTopic::MergeFrom(from.debug_topic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InfrastructureEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfrastructureEnvelope::CopyFrom(const InfrastructureEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfrastructureEnvelope::IsInitialized() const {

  return true;
}

void InfrastructureEnvelope::Swap(InfrastructureEnvelope* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(handshake_, other->handshake_);
    std::swap(ew_request_, other->ew_request_);
    std::swap(product_request_, other->product_request_);
    std::swap(radio_control_response_, other->radio_control_response_);
    std::swap(radio_data_, other->radio_data_);
    std::swap(debug_topic_, other->debug_topic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InfrastructureEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfrastructureEnvelope_descriptor_;
  metadata.reflection = InfrastructureEnvelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductRequestTopic::kHeaderFieldNumber;
const int ProductRequestTopic::kFisdFieldNumber;
const int ProductRequestTopic::kImageFieldNumber;
const int ProductRequestTopic::kVideoFieldNumber;
const int ProductRequestTopic::kAudioFieldNumber;
#endif  // !_MSC_VER

ProductRequestTopic::ProductRequestTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductRequestTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  fisd_ = const_cast< ::products::FisDRequest*>(&::products::FisDRequest::default_instance());
  image_ = const_cast< ::service_infrastructure::ImageRequest*>(&::service_infrastructure::ImageRequest::default_instance());
  video_ = const_cast< ::service_infrastructure::VideoRequest*>(&::service_infrastructure::VideoRequest::default_instance());
  audio_ = const_cast< ::products::AudioRequest*>(&::products::AudioRequest::default_instance());
}

ProductRequestTopic::ProductRequestTopic(const ProductRequestTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductRequestTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  fisd_ = NULL;
  image_ = NULL;
  video_ = NULL;
  audio_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductRequestTopic::~ProductRequestTopic() {
  SharedDtor();
}

void ProductRequestTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete fisd_;
    delete image_;
    delete video_;
    delete audio_;
  }
}

void ProductRequestTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductRequestTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductRequestTopic_descriptor_;
}

const ProductRequestTopic& ProductRequestTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

ProductRequestTopic* ProductRequestTopic::default_instance_ = NULL;

ProductRequestTopic* ProductRequestTopic::New() const {
  return new ProductRequestTopic;
}

void ProductRequestTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_fisd()) {
      if (fisd_ != NULL) fisd_->::products::FisDRequest::Clear();
    }
    if (has_image()) {
      if (image_ != NULL) image_->::service_infrastructure::ImageRequest::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::service_infrastructure::VideoRequest::Clear();
    }
    if (has_audio()) {
      if (audio_ != NULL) audio_->::products::AudioRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductRequestTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .products.FisDRequest fisd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fisd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }

      // optional .service_infrastructure.ImageRequest image = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_video;
        break;
      }

      // optional .service_infrastructure.VideoRequest video = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_audio;
        break;
      }

      // optional .products.AudioRequest audio = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductRequestTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .products.FisDRequest fisd = 1;
  if (has_fisd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fisd(), output);
  }

  // optional .service_infrastructure.ImageRequest image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->image(), output);
  }

  // optional .service_infrastructure.VideoRequest video = 3;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->video(), output);
  }

  // optional .products.AudioRequest audio = 4;
  if (has_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->audio(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductRequestTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .products.FisDRequest fisd = 1;
  if (has_fisd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fisd(), target);
  }

  // optional .service_infrastructure.ImageRequest image = 2;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->image(), target);
  }

  // optional .service_infrastructure.VideoRequest video = 3;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->video(), target);
  }

  // optional .products.AudioRequest audio = 4;
  if (has_audio()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->audio(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductRequestTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .products.FisDRequest fisd = 1;
    if (has_fisd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fisd());
    }

    // optional .service_infrastructure.ImageRequest image = 2;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // optional .service_infrastructure.VideoRequest video = 3;
    if (has_video()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

    // optional .products.AudioRequest audio = 4;
    if (has_audio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audio());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductRequestTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductRequestTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductRequestTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductRequestTopic::MergeFrom(const ProductRequestTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_fisd()) {
      mutable_fisd()->::products::FisDRequest::MergeFrom(from.fisd());
    }
    if (from.has_image()) {
      mutable_image()->::service_infrastructure::ImageRequest::MergeFrom(from.image());
    }
    if (from.has_video()) {
      mutable_video()->::service_infrastructure::VideoRequest::MergeFrom(from.video());
    }
    if (from.has_audio()) {
      mutable_audio()->::products::AudioRequest::MergeFrom(from.audio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductRequestTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductRequestTopic::CopyFrom(const ProductRequestTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductRequestTopic::IsInitialized() const {

  return true;
}

void ProductRequestTopic::Swap(ProductRequestTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(fisd_, other->fisd_);
    std::swap(image_, other->image_);
    std::swap(video_, other->video_);
    std::swap(audio_, other->audio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductRequestTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductRequestTopic_descriptor_;
  metadata.reflection = ProductRequestTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EWRequestTopic::kHeaderFieldNumber;
const int EWRequestTopic::kEwCommandRequestFieldNumber;
const int EWRequestTopic::kEwCeaseBuzzerFieldNumber;
const int EWRequestTopic::kEwStatusRequestFieldNumber;
const int EWRequestTopic::kEwOptionsRequestFieldNumber;
const int EWRequestTopic::kRegisterRequestFieldNumber;
const int EWRequestTopic::kRegisterQueryFieldNumber;
const int EWRequestTopic::kEmergencyJamFieldNumber;
const int EWRequestTopic::kTxFreqRequestFieldNumber;
const int EWRequestTopic::kEwCapabilitiesRequestFieldNumber;
const int EWRequestTopic::kEwTransmittingRequestFieldNumber;
const int EWRequestTopic::kCloseSelfFieldNumber;
const int EWRequestTopic::kUnregisterRequestFieldNumber;
const int EWRequestTopic::kEwTechniqueDescriptionsRequestFieldNumber;
#endif  // !_MSC_VER

EWRequestTopic::EWRequestTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWRequestTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  ew_command_request_ = const_cast< ::fv::tb::protos::TBProtos::EWCommandRequest*>(&::fv::tb::protos::TBProtos::EWCommandRequest::default_instance());
  ew_cease_buzzer_ = const_cast< ::fv::tb::protos::TBProtos::EWCeaseBuzzer*>(&::fv::tb::protos::TBProtos::EWCeaseBuzzer::default_instance());
  ew_status_request_ = const_cast< ::fv::tb::protos::TBProtos::EWStatusRequest*>(&::fv::tb::protos::TBProtos::EWStatusRequest::default_instance());
  ew_options_request_ = const_cast< ::fv::tb::protos::TBProtos::EWOptionsRequest*>(&::fv::tb::protos::TBProtos::EWOptionsRequest::default_instance());
  register_request_ = const_cast< ::fv::tb::protos::TBProtos::RegisterRequest*>(&::fv::tb::protos::TBProtos::RegisterRequest::default_instance());
  register_query_ = const_cast< ::fv::tb::protos::TBProtos::RegisterQuery*>(&::fv::tb::protos::TBProtos::RegisterQuery::default_instance());
  emergency_jam_ = const_cast< ::fv::tb::protos::TBProtos::EmergencyJam*>(&::fv::tb::protos::TBProtos::EmergencyJam::default_instance());
  tx_freq_request_ = const_cast< ::fv::tb::protos::TBProtos::TxFreqRequest*>(&::fv::tb::protos::TBProtos::TxFreqRequest::default_instance());
  ew_capabilities_request_ = const_cast< ::fv::tb::protos::TBProtos::EWCapabilitiesRequest*>(&::fv::tb::protos::TBProtos::EWCapabilitiesRequest::default_instance());
  ew_transmitting_request_ = const_cast< ::fv::tb::protos::TBProtos::EWTransmittingRequest*>(&::fv::tb::protos::TBProtos::EWTransmittingRequest::default_instance());
  close_self_ = const_cast< ::fv::tb::protos::TBProtos::CloseSelf*>(&::fv::tb::protos::TBProtos::CloseSelf::default_instance());
  unregister_request_ = const_cast< ::fv::tb::protos::TBProtos::UnregisterRequest*>(&::fv::tb::protos::TBProtos::UnregisterRequest::default_instance());
  ew_technique_descriptions_request_ = const_cast< ::fv::tb::protos::TBProtos::EWTechniqueDescriptionsRequest*>(&::fv::tb::protos::TBProtos::EWTechniqueDescriptionsRequest::default_instance());
}

EWRequestTopic::EWRequestTopic(const EWRequestTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWRequestTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ew_command_request_ = NULL;
  ew_cease_buzzer_ = NULL;
  ew_status_request_ = NULL;
  ew_options_request_ = NULL;
  register_request_ = NULL;
  register_query_ = NULL;
  emergency_jam_ = NULL;
  tx_freq_request_ = NULL;
  ew_capabilities_request_ = NULL;
  ew_transmitting_request_ = NULL;
  close_self_ = NULL;
  unregister_request_ = NULL;
  ew_technique_descriptions_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWRequestTopic::~EWRequestTopic() {
  SharedDtor();
}

void EWRequestTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete ew_command_request_;
    delete ew_cease_buzzer_;
    delete ew_status_request_;
    delete ew_options_request_;
    delete register_request_;
    delete register_query_;
    delete emergency_jam_;
    delete tx_freq_request_;
    delete ew_capabilities_request_;
    delete ew_transmitting_request_;
    delete close_self_;
    delete unregister_request_;
    delete ew_technique_descriptions_request_;
  }
}

void EWRequestTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWRequestTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWRequestTopic_descriptor_;
}

const EWRequestTopic& EWRequestTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

EWRequestTopic* EWRequestTopic::default_instance_ = NULL;

EWRequestTopic* EWRequestTopic::New() const {
  return new EWRequestTopic;
}

void EWRequestTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_ew_command_request()) {
      if (ew_command_request_ != NULL) ew_command_request_->::fv::tb::protos::TBProtos::EWCommandRequest::Clear();
    }
    if (has_ew_cease_buzzer()) {
      if (ew_cease_buzzer_ != NULL) ew_cease_buzzer_->::fv::tb::protos::TBProtos::EWCeaseBuzzer::Clear();
    }
    if (has_ew_status_request()) {
      if (ew_status_request_ != NULL) ew_status_request_->::fv::tb::protos::TBProtos::EWStatusRequest::Clear();
    }
    if (has_ew_options_request()) {
      if (ew_options_request_ != NULL) ew_options_request_->::fv::tb::protos::TBProtos::EWOptionsRequest::Clear();
    }
    if (has_register_request()) {
      if (register_request_ != NULL) register_request_->::fv::tb::protos::TBProtos::RegisterRequest::Clear();
    }
    if (has_register_query()) {
      if (register_query_ != NULL) register_query_->::fv::tb::protos::TBProtos::RegisterQuery::Clear();
    }
    if (has_emergency_jam()) {
      if (emergency_jam_ != NULL) emergency_jam_->::fv::tb::protos::TBProtos::EmergencyJam::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_tx_freq_request()) {
      if (tx_freq_request_ != NULL) tx_freq_request_->::fv::tb::protos::TBProtos::TxFreqRequest::Clear();
    }
    if (has_ew_capabilities_request()) {
      if (ew_capabilities_request_ != NULL) ew_capabilities_request_->::fv::tb::protos::TBProtos::EWCapabilitiesRequest::Clear();
    }
    if (has_ew_transmitting_request()) {
      if (ew_transmitting_request_ != NULL) ew_transmitting_request_->::fv::tb::protos::TBProtos::EWTransmittingRequest::Clear();
    }
    if (has_close_self()) {
      if (close_self_ != NULL) close_self_->::fv::tb::protos::TBProtos::CloseSelf::Clear();
    }
    if (has_unregister_request()) {
      if (unregister_request_ != NULL) unregister_request_->::fv::tb::protos::TBProtos::UnregisterRequest::Clear();
    }
    if (has_ew_technique_descriptions_request()) {
      if (ew_technique_descriptions_request_ != NULL) ew_technique_descriptions_request_->::fv::tb::protos::TBProtos::EWTechniqueDescriptionsRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWRequestTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fv.tb.protos.TBProtos.EWCommandRequest ew_command_request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_command_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ew_cease_buzzer;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWCeaseBuzzer ew_cease_buzzer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_cease_buzzer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_cease_buzzer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ew_status_request;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWStatusRequest ew_status_request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_status_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_status_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ew_options_request;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWOptionsRequest ew_options_request = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_options_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_options_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_register_request;
        break;
      }

      // optional .fv.tb.protos.TBProtos.RegisterRequest register_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_register_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_register_query;
        break;
      }

      // optional .fv.tb.protos.TBProtos.RegisterQuery register_query = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_register_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_emergency_jam;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EmergencyJam emergency_jam = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emergency_jam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emergency_jam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_tx_freq_request;
        break;
      }

      // optional .fv.tb.protos.TBProtos.TxFreqRequest tx_freq_request = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tx_freq_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tx_freq_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ew_capabilities_request;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWCapabilitiesRequest ew_capabilities_request = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_capabilities_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_capabilities_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ew_transmitting_request;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWTransmittingRequest ew_transmitting_request = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_transmitting_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_transmitting_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_close_self;
        break;
      }

      // optional .fv.tb.protos.TBProtos.CloseSelf close_self = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_close_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close_self()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_unregister_request;
        break;
      }

      // optional .fv.tb.protos.TBProtos.UnregisterRequest unregister_request = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unregister_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unregister_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ew_technique_descriptions_request;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWTechniqueDescriptionsRequest ew_technique_descriptions_request = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ew_technique_descriptions_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ew_technique_descriptions_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWRequestTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fv.tb.protos.TBProtos.EWCommandRequest ew_command_request = 1;
  if (has_ew_command_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ew_command_request(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWCeaseBuzzer ew_cease_buzzer = 2;
  if (has_ew_cease_buzzer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ew_cease_buzzer(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWStatusRequest ew_status_request = 4;
  if (has_ew_status_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ew_status_request(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWOptionsRequest ew_options_request = 5;
  if (has_ew_options_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ew_options_request(), output);
  }

  // optional .fv.tb.protos.TBProtos.RegisterRequest register_request = 6;
  if (has_register_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->register_request(), output);
  }

  // optional .fv.tb.protos.TBProtos.RegisterQuery register_query = 7;
  if (has_register_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->register_query(), output);
  }

  // optional .fv.tb.protos.TBProtos.EmergencyJam emergency_jam = 8;
  if (has_emergency_jam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->emergency_jam(), output);
  }

  // optional .fv.tb.protos.TBProtos.TxFreqRequest tx_freq_request = 9;
  if (has_tx_freq_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->tx_freq_request(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWCapabilitiesRequest ew_capabilities_request = 10;
  if (has_ew_capabilities_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->ew_capabilities_request(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWTransmittingRequest ew_transmitting_request = 11;
  if (has_ew_transmitting_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->ew_transmitting_request(), output);
  }

  // optional .fv.tb.protos.TBProtos.CloseSelf close_self = 12;
  if (has_close_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->close_self(), output);
  }

  // optional .fv.tb.protos.TBProtos.UnregisterRequest unregister_request = 13;
  if (has_unregister_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->unregister_request(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWTechniqueDescriptionsRequest ew_technique_descriptions_request = 14;
  if (has_ew_technique_descriptions_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->ew_technique_descriptions_request(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWRequestTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fv.tb.protos.TBProtos.EWCommandRequest ew_command_request = 1;
  if (has_ew_command_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ew_command_request(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWCeaseBuzzer ew_cease_buzzer = 2;
  if (has_ew_cease_buzzer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ew_cease_buzzer(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWStatusRequest ew_status_request = 4;
  if (has_ew_status_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ew_status_request(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWOptionsRequest ew_options_request = 5;
  if (has_ew_options_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ew_options_request(), target);
  }

  // optional .fv.tb.protos.TBProtos.RegisterRequest register_request = 6;
  if (has_register_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->register_request(), target);
  }

  // optional .fv.tb.protos.TBProtos.RegisterQuery register_query = 7;
  if (has_register_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->register_query(), target);
  }

  // optional .fv.tb.protos.TBProtos.EmergencyJam emergency_jam = 8;
  if (has_emergency_jam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->emergency_jam(), target);
  }

  // optional .fv.tb.protos.TBProtos.TxFreqRequest tx_freq_request = 9;
  if (has_tx_freq_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->tx_freq_request(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWCapabilitiesRequest ew_capabilities_request = 10;
  if (has_ew_capabilities_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->ew_capabilities_request(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWTransmittingRequest ew_transmitting_request = 11;
  if (has_ew_transmitting_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->ew_transmitting_request(), target);
  }

  // optional .fv.tb.protos.TBProtos.CloseSelf close_self = 12;
  if (has_close_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->close_self(), target);
  }

  // optional .fv.tb.protos.TBProtos.UnregisterRequest unregister_request = 13;
  if (has_unregister_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->unregister_request(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWTechniqueDescriptionsRequest ew_technique_descriptions_request = 14;
  if (has_ew_technique_descriptions_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->ew_technique_descriptions_request(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWRequestTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .fv.tb.protos.TBProtos.EWCommandRequest ew_command_request = 1;
    if (has_ew_command_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_command_request());
    }

    // optional .fv.tb.protos.TBProtos.EWCeaseBuzzer ew_cease_buzzer = 2;
    if (has_ew_cease_buzzer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_cease_buzzer());
    }

    // optional .fv.tb.protos.TBProtos.EWStatusRequest ew_status_request = 4;
    if (has_ew_status_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_status_request());
    }

    // optional .fv.tb.protos.TBProtos.EWOptionsRequest ew_options_request = 5;
    if (has_ew_options_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_options_request());
    }

    // optional .fv.tb.protos.TBProtos.RegisterRequest register_request = 6;
    if (has_register_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->register_request());
    }

    // optional .fv.tb.protos.TBProtos.RegisterQuery register_query = 7;
    if (has_register_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->register_query());
    }

    // optional .fv.tb.protos.TBProtos.EmergencyJam emergency_jam = 8;
    if (has_emergency_jam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emergency_jam());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .fv.tb.protos.TBProtos.TxFreqRequest tx_freq_request = 9;
    if (has_tx_freq_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tx_freq_request());
    }

    // optional .fv.tb.protos.TBProtos.EWCapabilitiesRequest ew_capabilities_request = 10;
    if (has_ew_capabilities_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_capabilities_request());
    }

    // optional .fv.tb.protos.TBProtos.EWTransmittingRequest ew_transmitting_request = 11;
    if (has_ew_transmitting_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_transmitting_request());
    }

    // optional .fv.tb.protos.TBProtos.CloseSelf close_self = 12;
    if (has_close_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->close_self());
    }

    // optional .fv.tb.protos.TBProtos.UnregisterRequest unregister_request = 13;
    if (has_unregister_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unregister_request());
    }

    // optional .fv.tb.protos.TBProtos.EWTechniqueDescriptionsRequest ew_technique_descriptions_request = 14;
    if (has_ew_technique_descriptions_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ew_technique_descriptions_request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWRequestTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWRequestTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWRequestTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWRequestTopic::MergeFrom(const EWRequestTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_ew_command_request()) {
      mutable_ew_command_request()->::fv::tb::protos::TBProtos::EWCommandRequest::MergeFrom(from.ew_command_request());
    }
    if (from.has_ew_cease_buzzer()) {
      mutable_ew_cease_buzzer()->::fv::tb::protos::TBProtos::EWCeaseBuzzer::MergeFrom(from.ew_cease_buzzer());
    }
    if (from.has_ew_status_request()) {
      mutable_ew_status_request()->::fv::tb::protos::TBProtos::EWStatusRequest::MergeFrom(from.ew_status_request());
    }
    if (from.has_ew_options_request()) {
      mutable_ew_options_request()->::fv::tb::protos::TBProtos::EWOptionsRequest::MergeFrom(from.ew_options_request());
    }
    if (from.has_register_request()) {
      mutable_register_request()->::fv::tb::protos::TBProtos::RegisterRequest::MergeFrom(from.register_request());
    }
    if (from.has_register_query()) {
      mutable_register_query()->::fv::tb::protos::TBProtos::RegisterQuery::MergeFrom(from.register_query());
    }
    if (from.has_emergency_jam()) {
      mutable_emergency_jam()->::fv::tb::protos::TBProtos::EmergencyJam::MergeFrom(from.emergency_jam());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tx_freq_request()) {
      mutable_tx_freq_request()->::fv::tb::protos::TBProtos::TxFreqRequest::MergeFrom(from.tx_freq_request());
    }
    if (from.has_ew_capabilities_request()) {
      mutable_ew_capabilities_request()->::fv::tb::protos::TBProtos::EWCapabilitiesRequest::MergeFrom(from.ew_capabilities_request());
    }
    if (from.has_ew_transmitting_request()) {
      mutable_ew_transmitting_request()->::fv::tb::protos::TBProtos::EWTransmittingRequest::MergeFrom(from.ew_transmitting_request());
    }
    if (from.has_close_self()) {
      mutable_close_self()->::fv::tb::protos::TBProtos::CloseSelf::MergeFrom(from.close_self());
    }
    if (from.has_unregister_request()) {
      mutable_unregister_request()->::fv::tb::protos::TBProtos::UnregisterRequest::MergeFrom(from.unregister_request());
    }
    if (from.has_ew_technique_descriptions_request()) {
      mutable_ew_technique_descriptions_request()->::fv::tb::protos::TBProtos::EWTechniqueDescriptionsRequest::MergeFrom(from.ew_technique_descriptions_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWRequestTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWRequestTopic::CopyFrom(const EWRequestTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWRequestTopic::IsInitialized() const {

  return true;
}

void EWRequestTopic::Swap(EWRequestTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ew_command_request_, other->ew_command_request_);
    std::swap(ew_cease_buzzer_, other->ew_cease_buzzer_);
    std::swap(ew_status_request_, other->ew_status_request_);
    std::swap(ew_options_request_, other->ew_options_request_);
    std::swap(register_request_, other->register_request_);
    std::swap(register_query_, other->register_query_);
    std::swap(emergency_jam_, other->emergency_jam_);
    std::swap(tx_freq_request_, other->tx_freq_request_);
    std::swap(ew_capabilities_request_, other->ew_capabilities_request_);
    std::swap(ew_transmitting_request_, other->ew_transmitting_request_);
    std::swap(close_self_, other->close_self_);
    std::swap(unregister_request_, other->unregister_request_);
    std::swap(ew_technique_descriptions_request_, other->ew_technique_descriptions_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWRequestTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWRequestTopic_descriptor_;
  metadata.reflection = EWRequestTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CapabilityRequestTopic::kHeaderFieldNumber;
const int CapabilityRequestTopic::kJamOffFieldNumber;
const int CapabilityRequestTopic::kTechniqueCommandFieldNumber;
#endif  // !_MSC_VER

CapabilityRequestTopic::CapabilityRequestTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CapabilityRequestTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  jam_off_ = const_cast< ::fv::tb::protos::TBProtos::JamOff*>(&::fv::tb::protos::TBProtos::JamOff::default_instance());
  technique_command_ = const_cast< ::fv::tb::protos::TBProtos::techniqueCommand*>(&::fv::tb::protos::TBProtos::techniqueCommand::default_instance());
}

CapabilityRequestTopic::CapabilityRequestTopic(const CapabilityRequestTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CapabilityRequestTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  jam_off_ = NULL;
  technique_command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CapabilityRequestTopic::~CapabilityRequestTopic() {
  SharedDtor();
}

void CapabilityRequestTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete jam_off_;
    delete technique_command_;
  }
}

void CapabilityRequestTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CapabilityRequestTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CapabilityRequestTopic_descriptor_;
}

const CapabilityRequestTopic& CapabilityRequestTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

CapabilityRequestTopic* CapabilityRequestTopic::default_instance_ = NULL;

CapabilityRequestTopic* CapabilityRequestTopic::New() const {
  return new CapabilityRequestTopic;
}

void CapabilityRequestTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_jam_off()) {
      if (jam_off_ != NULL) jam_off_->::fv::tb::protos::TBProtos::JamOff::Clear();
    }
    if (has_technique_command()) {
      if (technique_command_ != NULL) technique_command_->::fv::tb::protos::TBProtos::techniqueCommand::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CapabilityRequestTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fv.tb.protos.TBProtos.JamOff jam_off = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jam_off()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_technique_command;
        break;
      }

      // optional .fv.tb.protos.TBProtos.techniqueCommand technique_command = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_technique_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_technique_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CapabilityRequestTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fv.tb.protos.TBProtos.JamOff jam_off = 10;
  if (has_jam_off()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->jam_off(), output);
  }

  // optional .fv.tb.protos.TBProtos.techniqueCommand technique_command = 11;
  if (has_technique_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->technique_command(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CapabilityRequestTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fv.tb.protos.TBProtos.JamOff jam_off = 10;
  if (has_jam_off()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->jam_off(), target);
  }

  // optional .fv.tb.protos.TBProtos.techniqueCommand technique_command = 11;
  if (has_technique_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->technique_command(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CapabilityRequestTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .fv.tb.protos.TBProtos.JamOff jam_off = 10;
    if (has_jam_off()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jam_off());
    }

    // optional .fv.tb.protos.TBProtos.techniqueCommand technique_command = 11;
    if (has_technique_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->technique_command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CapabilityRequestTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CapabilityRequestTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CapabilityRequestTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CapabilityRequestTopic::MergeFrom(const CapabilityRequestTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_jam_off()) {
      mutable_jam_off()->::fv::tb::protos::TBProtos::JamOff::MergeFrom(from.jam_off());
    }
    if (from.has_technique_command()) {
      mutable_technique_command()->::fv::tb::protos::TBProtos::techniqueCommand::MergeFrom(from.technique_command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CapabilityRequestTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapabilityRequestTopic::CopyFrom(const CapabilityRequestTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilityRequestTopic::IsInitialized() const {

  return true;
}

void CapabilityRequestTopic::Swap(CapabilityRequestTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(jam_off_, other->jam_off_);
    std::swap(technique_command_, other->technique_command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CapabilityRequestTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CapabilityRequestTopic_descriptor_;
  metadata.reflection = CapabilityRequestTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransmitterControlRequestTopic::kHeaderFieldNumber;
const int TransmitterControlRequestTopic::kTxTuneFieldNumber;
const int TransmitterControlRequestTopic::kReactiveJamFieldNumber;
#endif  // !_MSC_VER

TransmitterControlRequestTopic::TransmitterControlRequestTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransmitterControlRequestTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  txtune_ = const_cast< ::tuner_msg::TxTune*>(&::tuner_msg::TxTune::default_instance());
  reactivejam_ = const_cast< ::tuner_msg::ReactiveJam*>(&::tuner_msg::ReactiveJam::default_instance());
}

TransmitterControlRequestTopic::TransmitterControlRequestTopic(const TransmitterControlRequestTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransmitterControlRequestTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  txtune_ = NULL;
  reactivejam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransmitterControlRequestTopic::~TransmitterControlRequestTopic() {
  SharedDtor();
}

void TransmitterControlRequestTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete txtune_;
    delete reactivejam_;
  }
}

void TransmitterControlRequestTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransmitterControlRequestTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransmitterControlRequestTopic_descriptor_;
}

const TransmitterControlRequestTopic& TransmitterControlRequestTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

TransmitterControlRequestTopic* TransmitterControlRequestTopic::default_instance_ = NULL;

TransmitterControlRequestTopic* TransmitterControlRequestTopic::New() const {
  return new TransmitterControlRequestTopic;
}

void TransmitterControlRequestTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_txtune()) {
      if (txtune_ != NULL) txtune_->::tuner_msg::TxTune::Clear();
    }
    if (has_reactivejam()) {
      if (reactivejam_ != NULL) reactivejam_->::tuner_msg::ReactiveJam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransmitterControlRequestTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tuner_msg.TxTune txTune = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txtune()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_reactiveJam;
        break;
      }

      // optional .tuner_msg.ReactiveJam reactiveJam = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reactiveJam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reactivejam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransmitterControlRequestTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .tuner_msg.TxTune txTune = 7;
  if (has_txtune()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->txtune(), output);
  }

  // optional .tuner_msg.ReactiveJam reactiveJam = 10;
  if (has_reactivejam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->reactivejam(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransmitterControlRequestTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .tuner_msg.TxTune txTune = 7;
  if (has_txtune()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->txtune(), target);
  }

  // optional .tuner_msg.ReactiveJam reactiveJam = 10;
  if (has_reactivejam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->reactivejam(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransmitterControlRequestTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .tuner_msg.TxTune txTune = 7;
    if (has_txtune()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->txtune());
    }

    // optional .tuner_msg.ReactiveJam reactiveJam = 10;
    if (has_reactivejam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reactivejam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransmitterControlRequestTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransmitterControlRequestTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransmitterControlRequestTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransmitterControlRequestTopic::MergeFrom(const TransmitterControlRequestTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_txtune()) {
      mutable_txtune()->::tuner_msg::TxTune::MergeFrom(from.txtune());
    }
    if (from.has_reactivejam()) {
      mutable_reactivejam()->::tuner_msg::ReactiveJam::MergeFrom(from.reactivejam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransmitterControlRequestTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransmitterControlRequestTopic::CopyFrom(const TransmitterControlRequestTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmitterControlRequestTopic::IsInitialized() const {

  return true;
}

void TransmitterControlRequestTopic::Swap(TransmitterControlRequestTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(txtune_, other->txtune_);
    std::swap(reactivejam_, other->reactivejam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransmitterControlRequestTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransmitterControlRequestTopic_descriptor_;
  metadata.reflection = TransmitterControlRequestTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadioControlResponseTopic::kHeaderFieldNumber;
const int RadioControlResponseTopic::kAckFieldNumber;
const int RadioControlResponseTopic::kNackFieldNumber;
const int RadioControlResponseTopic::kRxStatusFieldNumber;
const int RadioControlResponseTopic::kReceiverAcquiredFieldNumber;
const int RadioControlResponseTopic::kReceiverReleasedFieldNumber;
const int RadioControlResponseTopic::kRxCommandResponseFieldNumber;
#endif  // !_MSC_VER

RadioControlResponseTopic::RadioControlResponseTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RadioControlResponseTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  ack_ = const_cast< ::service_infrastructure::Ack*>(&::service_infrastructure::Ack::default_instance());
  nack_ = const_cast< ::service_infrastructure::NAck*>(&::service_infrastructure::NAck::default_instance());
  rx_status_ = const_cast< ::tuner_msg::ReceiverStatus*>(&::tuner_msg::ReceiverStatus::default_instance());
  receiver_acquired_ = const_cast< ::tuner_msg::ReceiverAcquired*>(&::tuner_msg::ReceiverAcquired::default_instance());
  receiver_released_ = const_cast< ::tuner_msg::ReceiverReleased*>(&::tuner_msg::ReceiverReleased::default_instance());
  rx_command_response_ = const_cast< ::rx_command_msg::RxCommandResponse*>(&::rx_command_msg::RxCommandResponse::default_instance());
}

RadioControlResponseTopic::RadioControlResponseTopic(const RadioControlResponseTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RadioControlResponseTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ack_ = NULL;
  nack_ = NULL;
  rx_status_ = NULL;
  receiver_acquired_ = NULL;
  receiver_released_ = NULL;
  rx_command_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadioControlResponseTopic::~RadioControlResponseTopic() {
  SharedDtor();
}

void RadioControlResponseTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete ack_;
    delete nack_;
    delete rx_status_;
    delete receiver_acquired_;
    delete receiver_released_;
    delete rx_command_response_;
  }
}

void RadioControlResponseTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadioControlResponseTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadioControlResponseTopic_descriptor_;
}

const RadioControlResponseTopic& RadioControlResponseTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

RadioControlResponseTopic* RadioControlResponseTopic::default_instance_ = NULL;

RadioControlResponseTopic* RadioControlResponseTopic::New() const {
  return new RadioControlResponseTopic;
}

void RadioControlResponseTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_ack()) {
      if (ack_ != NULL) ack_->::service_infrastructure::Ack::Clear();
    }
    if (has_nack()) {
      if (nack_ != NULL) nack_->::service_infrastructure::NAck::Clear();
    }
    if (has_rx_status()) {
      if (rx_status_ != NULL) rx_status_->::tuner_msg::ReceiverStatus::Clear();
    }
    if (has_receiver_acquired()) {
      if (receiver_acquired_ != NULL) receiver_acquired_->::tuner_msg::ReceiverAcquired::Clear();
    }
    if (has_receiver_released()) {
      if (receiver_released_ != NULL) receiver_released_->::tuner_msg::ReceiverReleased::Clear();
    }
    if (has_rx_command_response()) {
      if (rx_command_response_ != NULL) rx_command_response_->::rx_command_msg::RxCommandResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadioControlResponseTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_infrastructure.Ack ack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nack;
        break;
      }

      // optional .service_infrastructure.NAck nack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rx_status;
        break;
      }

      // optional .tuner_msg.ReceiverStatus rx_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rx_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rx_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_receiver_acquired;
        break;
      }

      // optional .tuner_msg.ReceiverAcquired receiver_acquired = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiver_acquired:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiver_acquired()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_receiver_released;
        break;
      }

      // optional .tuner_msg.ReceiverReleased receiver_released = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiver_released:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiver_released()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rx_command_response;
        break;
      }

      // optional .rx_command_msg.RxCommandResponse rx_command_response = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rx_command_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rx_command_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RadioControlResponseTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .service_infrastructure.Ack ack = 1;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ack(), output);
  }

  // optional .service_infrastructure.NAck nack = 2;
  if (has_nack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nack(), output);
  }

  // optional .tuner_msg.ReceiverStatus rx_status = 3;
  if (has_rx_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rx_status(), output);
  }

  // optional .tuner_msg.ReceiverAcquired receiver_acquired = 4;
  if (has_receiver_acquired()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->receiver_acquired(), output);
  }

  // optional .tuner_msg.ReceiverReleased receiver_released = 5;
  if (has_receiver_released()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->receiver_released(), output);
  }

  // optional .rx_command_msg.RxCommandResponse rx_command_response = 6;
  if (has_rx_command_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rx_command_response(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RadioControlResponseTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .service_infrastructure.Ack ack = 1;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ack(), target);
  }

  // optional .service_infrastructure.NAck nack = 2;
  if (has_nack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nack(), target);
  }

  // optional .tuner_msg.ReceiverStatus rx_status = 3;
  if (has_rx_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rx_status(), target);
  }

  // optional .tuner_msg.ReceiverAcquired receiver_acquired = 4;
  if (has_receiver_acquired()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->receiver_acquired(), target);
  }

  // optional .tuner_msg.ReceiverReleased receiver_released = 5;
  if (has_receiver_released()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->receiver_released(), target);
  }

  // optional .rx_command_msg.RxCommandResponse rx_command_response = 6;
  if (has_rx_command_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rx_command_response(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RadioControlResponseTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .service_infrastructure.Ack ack = 1;
    if (has_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ack());
    }

    // optional .service_infrastructure.NAck nack = 2;
    if (has_nack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nack());
    }

    // optional .tuner_msg.ReceiverStatus rx_status = 3;
    if (has_rx_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rx_status());
    }

    // optional .tuner_msg.ReceiverAcquired receiver_acquired = 4;
    if (has_receiver_acquired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiver_acquired());
    }

    // optional .tuner_msg.ReceiverReleased receiver_released = 5;
    if (has_receiver_released()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiver_released());
    }

    // optional .rx_command_msg.RxCommandResponse rx_command_response = 6;
    if (has_rx_command_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rx_command_response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadioControlResponseTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadioControlResponseTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadioControlResponseTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadioControlResponseTopic::MergeFrom(const RadioControlResponseTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_ack()) {
      mutable_ack()->::service_infrastructure::Ack::MergeFrom(from.ack());
    }
    if (from.has_nack()) {
      mutable_nack()->::service_infrastructure::NAck::MergeFrom(from.nack());
    }
    if (from.has_rx_status()) {
      mutable_rx_status()->::tuner_msg::ReceiverStatus::MergeFrom(from.rx_status());
    }
    if (from.has_receiver_acquired()) {
      mutable_receiver_acquired()->::tuner_msg::ReceiverAcquired::MergeFrom(from.receiver_acquired());
    }
    if (from.has_receiver_released()) {
      mutable_receiver_released()->::tuner_msg::ReceiverReleased::MergeFrom(from.receiver_released());
    }
    if (from.has_rx_command_response()) {
      mutable_rx_command_response()->::rx_command_msg::RxCommandResponse::MergeFrom(from.rx_command_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadioControlResponseTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadioControlResponseTopic::CopyFrom(const RadioControlResponseTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadioControlResponseTopic::IsInitialized() const {

  return true;
}

void RadioControlResponseTopic::Swap(RadioControlResponseTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ack_, other->ack_);
    std::swap(nack_, other->nack_);
    std::swap(rx_status_, other->rx_status_);
    std::swap(receiver_acquired_, other->receiver_acquired_);
    std::swap(receiver_released_, other->receiver_released_);
    std::swap(rx_command_response_, other->rx_command_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadioControlResponseTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadioControlResponseTopic_descriptor_;
  metadata.reflection = RadioControlResponseTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DebugTopic::kHeaderFieldNumber;
const int DebugTopic::kInfoFieldNumber;
const int DebugTopic::kHostnameFieldNumber;
const int DebugTopic::kWarningFieldNumber;
const int DebugTopic::kErrorFieldNumber;
#endif  // !_MSC_VER

DebugTopic::DebugTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DebugTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  info_ = const_cast< ::falcon_debug_msg::Info*>(&::falcon_debug_msg::Info::default_instance());
  hostname_ = const_cast< ::falcon_debug_msg::Info*>(&::falcon_debug_msg::Info::default_instance());
  warning_ = const_cast< ::falcon_debug_msg::Warning*>(&::falcon_debug_msg::Warning::default_instance());
  error_ = const_cast< ::falcon_debug_msg::Error*>(&::falcon_debug_msg::Error::default_instance());
}

DebugTopic::DebugTopic(const DebugTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DebugTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  info_ = NULL;
  hostname_ = NULL;
  warning_ = NULL;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugTopic::~DebugTopic() {
  SharedDtor();
}

void DebugTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete info_;
    delete hostname_;
    delete warning_;
    delete error_;
  }
}

void DebugTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugTopic_descriptor_;
}

const DebugTopic& DebugTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

DebugTopic* DebugTopic::default_instance_ = NULL;

DebugTopic* DebugTopic::New() const {
  return new DebugTopic;
}

void DebugTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::falcon_debug_msg::Info::Clear();
    }
    if (has_hostname()) {
      if (hostname_ != NULL) hostname_->::falcon_debug_msg::Info::Clear();
    }
    if (has_warning()) {
      if (warning_ != NULL) warning_->::falcon_debug_msg::Warning::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::falcon_debug_msg::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .falcon_debug_msg.Info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_warning;
        break;
      }

      // optional .falcon_debug_msg.Warning warning = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warning()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .falcon_debug_msg.Error error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hostname;
        break;
      }

      // optional .falcon_debug_msg.Info hostname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DebugTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .falcon_debug_msg.Info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional .falcon_debug_msg.Warning warning = 2;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->warning(), output);
  }

  // optional .falcon_debug_msg.Error error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  // optional .falcon_debug_msg.Info hostname = 10;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->hostname(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DebugTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .falcon_debug_msg.Info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional .falcon_debug_msg.Warning warning = 2;
  if (has_warning()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->warning(), target);
  }

  // optional .falcon_debug_msg.Error error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  // optional .falcon_debug_msg.Info hostname = 10;
  if (has_hostname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->hostname(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DebugTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .falcon_debug_msg.Info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .falcon_debug_msg.Info hostname = 10;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hostname());
    }

    // optional .falcon_debug_msg.Warning warning = 2;
    if (has_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warning());
    }

    // optional .falcon_debug_msg.Error error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugTopic::MergeFrom(const DebugTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_info()) {
      mutable_info()->::falcon_debug_msg::Info::MergeFrom(from.info());
    }
    if (from.has_hostname()) {
      mutable_hostname()->::falcon_debug_msg::Info::MergeFrom(from.hostname());
    }
    if (from.has_warning()) {
      mutable_warning()->::falcon_debug_msg::Warning::MergeFrom(from.warning());
    }
    if (from.has_error()) {
      mutable_error()->::falcon_debug_msg::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugTopic::CopyFrom(const DebugTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugTopic::IsInitialized() const {

  return true;
}

void DebugTopic::Swap(DebugTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(info_, other->info_);
    std::swap(hostname_, other->hostname_);
    std::swap(warning_, other->warning_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugTopic_descriptor_;
  metadata.reflection = DebugTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SigFramesTopic::kHeaderFieldNumber;
const int SigFramesTopic::kSigframeFieldNumber;
#endif  // !_MSC_VER

SigFramesTopic::SigFramesTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SigFramesTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  sigframe_ = const_cast< ::fv::sf::protos::SFProtos::SIGFrame*>(&::fv::sf::protos::SFProtos::SIGFrame::default_instance());
}

SigFramesTopic::SigFramesTopic(const SigFramesTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SigFramesTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  sigframe_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SigFramesTopic::~SigFramesTopic() {
  SharedDtor();
}

void SigFramesTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete sigframe_;
  }
}

void SigFramesTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigFramesTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SigFramesTopic_descriptor_;
}

const SigFramesTopic& SigFramesTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

SigFramesTopic* SigFramesTopic::default_instance_ = NULL;

SigFramesTopic* SigFramesTopic::New() const {
  return new SigFramesTopic;
}

void SigFramesTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_sigframe()) {
      if (sigframe_ != NULL) sigframe_->::fv::sf::protos::SFProtos::SIGFrame::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SigFramesTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fv.sf.protos.SFProtos.SIGFrame sigframe = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigframe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SigFramesTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fv.sf.protos.SFProtos.SIGFrame sigframe = 1;
  if (has_sigframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sigframe(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SigFramesTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fv.sf.protos.SFProtos.SIGFrame sigframe = 1;
  if (has_sigframe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sigframe(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SigFramesTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .fv.sf.protos.SFProtos.SIGFrame sigframe = 1;
    if (has_sigframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sigframe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SigFramesTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SigFramesTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SigFramesTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SigFramesTopic::MergeFrom(const SigFramesTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_sigframe()) {
      mutable_sigframe()->::fv::sf::protos::SFProtos::SIGFrame::MergeFrom(from.sigframe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SigFramesTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigFramesTopic::CopyFrom(const SigFramesTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigFramesTopic::IsInitialized() const {

  return true;
}

void SigFramesTopic::Swap(SigFramesTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(sigframe_, other->sigframe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SigFramesTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SigFramesTopic_descriptor_;
  metadata.reflection = SigFramesTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadioDataTopic::kHeaderFieldNumber;
const int RadioDataTopic::kSnapInfoFieldNumber;
#endif  // !_MSC_VER

RadioDataTopic::RadioDataTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RadioDataTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  snap_info_ = const_cast< ::tuner_msg::SnapInfo*>(&::tuner_msg::SnapInfo::default_instance());
}

RadioDataTopic::RadioDataTopic(const RadioDataTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RadioDataTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  snap_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadioDataTopic::~RadioDataTopic() {
  SharedDtor();
}

void RadioDataTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete snap_info_;
  }
}

void RadioDataTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadioDataTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadioDataTopic_descriptor_;
}

const RadioDataTopic& RadioDataTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

RadioDataTopic* RadioDataTopic::default_instance_ = NULL;

RadioDataTopic* RadioDataTopic::New() const {
  return new RadioDataTopic;
}

void RadioDataTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_snap_info()) {
      if (snap_info_ != NULL) snap_info_->::tuner_msg::SnapInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadioDataTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tuner_msg.SnapInfo snap_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snap_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RadioDataTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .tuner_msg.SnapInfo snap_info = 1;
  if (has_snap_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->snap_info(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RadioDataTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .tuner_msg.SnapInfo snap_info = 1;
  if (has_snap_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->snap_info(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RadioDataTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .tuner_msg.SnapInfo snap_info = 1;
    if (has_snap_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snap_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadioDataTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadioDataTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadioDataTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadioDataTopic::MergeFrom(const RadioDataTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_snap_info()) {
      mutable_snap_info()->::tuner_msg::SnapInfo::MergeFrom(from.snap_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadioDataTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadioDataTopic::CopyFrom(const RadioDataTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadioDataTopic::IsInitialized() const {

  return true;
}

void RadioDataTopic::Swap(RadioDataTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(snap_info_, other->snap_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadioDataTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadioDataTopic_descriptor_;
  metadata.reflection = RadioDataTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GeoTopic::kHeaderFieldNumber;
const int GeoTopic::kGeoTipFieldNumber;
const int GeoTopic::kGeoResultFieldNumber;
const int GeoTopic::kDetectionTipFieldNumber;
#endif  // !_MSC_VER

GeoTopic::GeoTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeoTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  geo_tip_ = const_cast< ::falcon_common_msg::GeoTip*>(&::falcon_common_msg::GeoTip::default_instance());
  geo_result_ = const_cast< ::falcon_common_msg::GeoResult*>(&::falcon_common_msg::GeoResult::default_instance());
  detection_tip_ = const_cast< ::falcon_common_msg::DetectionTip*>(&::falcon_common_msg::DetectionTip::default_instance());
}

GeoTopic::GeoTopic(const GeoTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeoTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  geo_tip_ = NULL;
  geo_result_ = NULL;
  detection_tip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoTopic::~GeoTopic() {
  SharedDtor();
}

void GeoTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete geo_tip_;
    delete geo_result_;
    delete detection_tip_;
  }
}

void GeoTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoTopic_descriptor_;
}

const GeoTopic& GeoTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

GeoTopic* GeoTopic::default_instance_ = NULL;

GeoTopic* GeoTopic::New() const {
  return new GeoTopic;
}

void GeoTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_geo_tip()) {
      if (geo_tip_ != NULL) geo_tip_->::falcon_common_msg::GeoTip::Clear();
    }
    if (has_geo_result()) {
      if (geo_result_ != NULL) geo_result_->::falcon_common_msg::GeoResult::Clear();
    }
    if (has_detection_tip()) {
      if (detection_tip_ != NULL) detection_tip_->::falcon_common_msg::DetectionTip::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .falcon_common_msg.GeoTip geo_tip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo_tip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_geo_result;
        break;
      }

      // optional .falcon_common_msg.GeoResult geo_result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_detection_tip;
        break;
      }

      // optional .falcon_common_msg.DetectionTip detection_tip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detection_tip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detection_tip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeoTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .falcon_common_msg.GeoTip geo_tip = 1;
  if (has_geo_tip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->geo_tip(), output);
  }

  // optional .falcon_common_msg.GeoResult geo_result = 2;
  if (has_geo_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->geo_result(), output);
  }

  // optional .falcon_common_msg.DetectionTip detection_tip = 3;
  if (has_detection_tip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->detection_tip(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeoTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .falcon_common_msg.GeoTip geo_tip = 1;
  if (has_geo_tip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->geo_tip(), target);
  }

  // optional .falcon_common_msg.GeoResult geo_result = 2;
  if (has_geo_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->geo_result(), target);
  }

  // optional .falcon_common_msg.DetectionTip detection_tip = 3;
  if (has_detection_tip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->detection_tip(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeoTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .falcon_common_msg.GeoTip geo_tip = 1;
    if (has_geo_tip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo_tip());
    }

    // optional .falcon_common_msg.GeoResult geo_result = 2;
    if (has_geo_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo_result());
    }

    // optional .falcon_common_msg.DetectionTip detection_tip = 3;
    if (has_detection_tip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detection_tip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoTopic::MergeFrom(const GeoTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_geo_tip()) {
      mutable_geo_tip()->::falcon_common_msg::GeoTip::MergeFrom(from.geo_tip());
    }
    if (from.has_geo_result()) {
      mutable_geo_result()->::falcon_common_msg::GeoResult::MergeFrom(from.geo_result());
    }
    if (from.has_detection_tip()) {
      mutable_detection_tip()->::falcon_common_msg::DetectionTip::MergeFrom(from.detection_tip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoTopic::CopyFrom(const GeoTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoTopic::IsInitialized() const {

  return true;
}

void GeoTopic::Swap(GeoTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(geo_tip_, other->geo_tip_);
    std::swap(geo_result_, other->geo_result_);
    std::swap(detection_tip_, other->detection_tip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoTopic_descriptor_;
  metadata.reflection = GeoTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SensorTopic::kHeaderFieldNumber;
const int SensorTopic::kHardwareStatusFieldNumber;
const int SensorTopic::kSensorPositionFieldNumber;
const int SensorTopic::kSwitchStatusFieldNumber;
const int SensorTopic::kSensorStatusFieldNumber;
#endif  // !_MSC_VER

SensorTopic::SensorTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  hardware_status_ = const_cast< ::falcon_remoting_msg::HardwareStatus*>(&::falcon_remoting_msg::HardwareStatus::default_instance());
  sensor_position_ = const_cast< ::falcon_remoting_msg::SensorPosition*>(&::falcon_remoting_msg::SensorPosition::default_instance());
  switch_status_ = const_cast< ::falcon_antenna_msg::SwitchStatus*>(&::falcon_antenna_msg::SwitchStatus::default_instance());
  sensor_status_ = const_cast< ::falcon_remoting_msg::SensorStatus*>(&::falcon_remoting_msg::SensorStatus::default_instance());
}

SensorTopic::SensorTopic(const SensorTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  hardware_status_ = NULL;
  sensor_position_ = NULL;
  switch_status_ = NULL;
  sensor_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorTopic::~SensorTopic() {
  SharedDtor();
}

void SensorTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete hardware_status_;
    delete sensor_position_;
    delete switch_status_;
    delete sensor_status_;
  }
}

void SensorTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorTopic_descriptor_;
}

const SensorTopic& SensorTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

SensorTopic* SensorTopic::default_instance_ = NULL;

SensorTopic* SensorTopic::New() const {
  return new SensorTopic;
}

void SensorTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_hardware_status()) {
      if (hardware_status_ != NULL) hardware_status_->::falcon_remoting_msg::HardwareStatus::Clear();
    }
    if (has_sensor_position()) {
      if (sensor_position_ != NULL) sensor_position_->::falcon_remoting_msg::SensorPosition::Clear();
    }
    if (has_switch_status()) {
      if (switch_status_ != NULL) switch_status_->::falcon_antenna_msg::SwitchStatus::Clear();
    }
    if (has_sensor_status()) {
      if (sensor_status_ != NULL) sensor_status_->::falcon_remoting_msg::SensorStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .falcon_remoting_msg.HardwareStatus hardware_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hardware_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sensor_position;
        break;
      }

      // optional .falcon_remoting_msg.SensorPosition sensor_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensor_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_switch_status;
        break;
      }

      // optional .falcon_antenna_msg.SwitchStatus switch_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_switch_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_switch_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sensor_status;
        break;
      }

      // optional .falcon_remoting_msg.SensorStatus sensor_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensor_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .falcon_remoting_msg.HardwareStatus hardware_status = 1;
  if (has_hardware_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hardware_status(), output);
  }

  // optional .falcon_remoting_msg.SensorPosition sensor_position = 2;
  if (has_sensor_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sensor_position(), output);
  }

  // optional .falcon_antenna_msg.SwitchStatus switch_status = 3;
  if (has_switch_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->switch_status(), output);
  }

  // optional .falcon_remoting_msg.SensorStatus sensor_status = 4;
  if (has_sensor_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sensor_status(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .falcon_remoting_msg.HardwareStatus hardware_status = 1;
  if (has_hardware_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hardware_status(), target);
  }

  // optional .falcon_remoting_msg.SensorPosition sensor_position = 2;
  if (has_sensor_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sensor_position(), target);
  }

  // optional .falcon_antenna_msg.SwitchStatus switch_status = 3;
  if (has_switch_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->switch_status(), target);
  }

  // optional .falcon_remoting_msg.SensorStatus sensor_status = 4;
  if (has_sensor_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sensor_status(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .falcon_remoting_msg.HardwareStatus hardware_status = 1;
    if (has_hardware_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hardware_status());
    }

    // optional .falcon_remoting_msg.SensorPosition sensor_position = 2;
    if (has_sensor_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor_position());
    }

    // optional .falcon_antenna_msg.SwitchStatus switch_status = 3;
    if (has_switch_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->switch_status());
    }

    // optional .falcon_remoting_msg.SensorStatus sensor_status = 4;
    if (has_sensor_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorTopic::MergeFrom(const SensorTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_hardware_status()) {
      mutable_hardware_status()->::falcon_remoting_msg::HardwareStatus::MergeFrom(from.hardware_status());
    }
    if (from.has_sensor_position()) {
      mutable_sensor_position()->::falcon_remoting_msg::SensorPosition::MergeFrom(from.sensor_position());
    }
    if (from.has_switch_status()) {
      mutable_switch_status()->::falcon_antenna_msg::SwitchStatus::MergeFrom(from.switch_status());
    }
    if (from.has_sensor_status()) {
      mutable_sensor_status()->::falcon_remoting_msg::SensorStatus::MergeFrom(from.sensor_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorTopic::CopyFrom(const SensorTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorTopic::IsInitialized() const {

  return true;
}

void SensorTopic::Swap(SensorTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(hardware_status_, other->hardware_status_);
    std::swap(sensor_position_, other->sensor_position_);
    std::swap(switch_status_, other->switch_status_);
    std::swap(sensor_status_, other->sensor_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorTopic_descriptor_;
  metadata.reflection = SensorTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageRequest::kHeaderFieldNumber;
const int ImageRequest::kEltexFieldNumber;
const int ImageRequest::kConnectionIdFieldNumber;
#endif  // !_MSC_VER

ImageRequest::ImageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
}

ImageRequest::ImageRequest(const ImageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageRequest::~ImageRequest() {
  SharedDtor();
}

void ImageRequest::SharedDtor() {
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    delete eltex_;
  }
  if (connection_id_ != &::google::protobuf::internal::kEmptyString) {
    delete connection_id_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void ImageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageRequest_descriptor_;
}

const ImageRequest& ImageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

ImageRequest* ImageRequest::default_instance_ = NULL;

ImageRequest* ImageRequest::New() const {
  return new ImageRequest;
}

void ImageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_eltex()) {
      if (eltex_ != &::google::protobuf::internal::kEmptyString) {
        eltex_->clear();
      }
    }
    if (has_connection_id()) {
      if (connection_id_ != &::google::protobuf::internal::kEmptyString) {
        connection_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string eltex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eltex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eltex().data(), this->eltex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_connection_id;
        break;
      }

      // optional string connection_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connection_id().data(), this->connection_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string eltex = 1;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->eltex(), output);
  }

  // optional string connection_id = 2;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connection_id().data(), this->connection_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->connection_id(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string eltex = 1;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->eltex(), target);
  }

  // optional string connection_id = 2;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connection_id().data(), this->connection_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->connection_id(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string eltex = 1;
    if (has_eltex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eltex());
    }

    // optional string connection_id = 2;
    if (has_connection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connection_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageRequest::MergeFrom(const ImageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_eltex()) {
      set_eltex(from.eltex());
    }
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageRequest::CopyFrom(const ImageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageRequest::IsInitialized() const {

  return true;
}

void ImageRequest::Swap(ImageRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(eltex_, other->eltex_);
    std::swap(connection_id_, other->connection_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageRequest_descriptor_;
  metadata.reflection = ImageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoRequest::kHeaderFieldNumber;
const int VideoRequest::kEltexFieldNumber;
const int VideoRequest::kConnectionIdFieldNumber;
#endif  // !_MSC_VER

VideoRequest::VideoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
}

VideoRequest::VideoRequest(const VideoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoRequest::~VideoRequest() {
  SharedDtor();
}

void VideoRequest::SharedDtor() {
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    delete eltex_;
  }
  if (connection_id_ != &::google::protobuf::internal::kEmptyString) {
    delete connection_id_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void VideoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoRequest_descriptor_;
}

const VideoRequest& VideoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  return *default_instance_;
}

VideoRequest* VideoRequest::default_instance_ = NULL;

VideoRequest* VideoRequest::New() const {
  return new VideoRequest;
}

void VideoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_eltex()) {
      if (eltex_ != &::google::protobuf::internal::kEmptyString) {
        eltex_->clear();
      }
    }
    if (has_connection_id()) {
      if (connection_id_ != &::google::protobuf::internal::kEmptyString) {
        connection_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string eltex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eltex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eltex().data(), this->eltex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_connection_id;
        break;
      }

      // optional string connection_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connection_id().data(), this->connection_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string eltex = 1;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->eltex(), output);
  }

  // optional string connection_id = 2;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connection_id().data(), this->connection_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->connection_id(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string eltex = 1;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->eltex(), target);
  }

  // optional string connection_id = 2;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connection_id().data(), this->connection_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->connection_id(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string eltex = 1;
    if (has_eltex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eltex());
    }

    // optional string connection_id = 2;
    if (has_connection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connection_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoRequest::MergeFrom(const VideoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_eltex()) {
      set_eltex(from.eltex());
    }
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoRequest::CopyFrom(const VideoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRequest::IsInitialized() const {

  return true;
}

void VideoRequest::Swap(VideoRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(eltex_, other->eltex_);
    std::swap(connection_id_, other->connection_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoRequest_descriptor_;
  metadata.reflection = VideoRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_infrastructure

// @@protoc_insertion_point(global_scope)
