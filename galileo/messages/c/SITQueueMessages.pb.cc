// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SITQueueMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SITQueueMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sit_queue_msg {

namespace {

const ::google::protobuf::Descriptor* clusteringResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  clusteringResults_reflection_ = NULL;
const ::google::protobuf::Descriptor* detectFhopResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  detectFhopResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* add2SoilistResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  add2SoilistResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* generateJamFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  generateJamFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* nullResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nullResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SITQueueMessages_2eproto() {
  protobuf_AddDesc_SITQueueMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SITQueueMessages.proto");
  GOOGLE_CHECK(file != NULL);
  clusteringResults_descriptor_ = file->message_type(0);
  static const int clusteringResults_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clusteringResults, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clusteringResults, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clusteringResults, hopfreqs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clusteringResults, lastdetecttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clusteringResults, lastdetectfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clusteringResults, bestlibrarymatchname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clusteringResults, bestlibrarymatchconfidence_),
  };
  clusteringResults_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      clusteringResults_descriptor_,
      clusteringResults::default_instance_,
      clusteringResults_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clusteringResults, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clusteringResults, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(clusteringResults));
  detectFhopResponse_descriptor_ = file->message_type(1);
  static const int detectFhopResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detectFhopResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detectFhopResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detectFhopResponse, iqsnap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detectFhopResponse, detectresults_),
  };
  detectFhopResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      detectFhopResponse_descriptor_,
      detectFhopResponse::default_instance_,
      detectFhopResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detectFhopResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detectFhopResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(detectFhopResponse));
  add2SoilistResponse_descriptor_ = file->message_type(2);
  static const int add2SoilistResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add2SoilistResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add2SoilistResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add2SoilistResponse, sigadded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add2SoilistResponse, targetidentifier_),
  };
  add2SoilistResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      add2SoilistResponse_descriptor_,
      add2SoilistResponse::default_instance_,
      add2SoilistResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add2SoilistResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add2SoilistResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(add2SoilistResponse));
  generateJamFileResponse_descriptor_ = file->message_type(3);
  static const int generateJamFileResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generateJamFileResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generateJamFileResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generateJamFileResponse, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generateJamFileResponse, jamfilepath_),
  };
  generateJamFileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      generateJamFileResponse_descriptor_,
      generateJamFileResponse::default_instance_,
      generateJamFileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generateJamFileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generateJamFileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(generateJamFileResponse));
  nullResponse_descriptor_ = file->message_type(4);
  static const int nullResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nullResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nullResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nullResponse, requestmsgname_),
  };
  nullResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      nullResponse_descriptor_,
      nullResponse::default_instance_,
      nullResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nullResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nullResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(nullResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SITQueueMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    clusteringResults_descriptor_, &clusteringResults::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    detectFhopResponse_descriptor_, &detectFhopResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    add2SoilistResponse_descriptor_, &add2SoilistResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    generateJamFileResponse_descriptor_, &generateJamFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    nullResponse_descriptor_, &nullResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SITQueueMessages_2eproto() {
  delete clusteringResults::default_instance_;
  delete clusteringResults_reflection_;
  delete clusteringResults::_default_msgname_;
  delete detectFhopResponse::default_instance_;
  delete detectFhopResponse_reflection_;
  delete detectFhopResponse::_default_msgname_;
  delete add2SoilistResponse::default_instance_;
  delete add2SoilistResponse_reflection_;
  delete add2SoilistResponse::_default_msgname_;
  delete generateJamFileResponse::default_instance_;
  delete generateJamFileResponse_reflection_;
  delete generateJamFileResponse::_default_msgname_;
  delete nullResponse::default_instance_;
  delete nullResponse_reflection_;
  delete nullResponse::_default_msgname_;
}

void protobuf_AddDesc_SITQueueMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026SITQueueMessages.proto\022\rsit_queue_msg\""
    "\316\001\n\021clusteringResults\022\"\n\007msgName\030\001 \001(\t:\021"
    "clusteringResults\022\021\n\tclusterID\030\002 \002(\005\022\020\n\010"
    "hopFreqs\030\003 \003(\001\022\026\n\016lastDetectTime\030\004 \002(\t\022\026"
    "\n\016lastDetectFreq\030\005 \002(\001\022\034\n\024bestLibraryMat"
    "chName\030\006 \002(\t\022\"\n\032bestLibraryMatchConfiden"
    "ce\030\007 \002(\001\"\225\001\n\022detectFhopResponse\022#\n\007msgNa"
    "me\030\001 \001(\t:\022detectFhopResponse\022\021\n\trequestI"
    "D\030\002 \002(\t\022\016\n\006iqSnap\030\003 \002(\t\0227\n\rdetectResults"
    "\030\004 \003(\0132 .sit_queue_msg.clusteringResults"
    "\"z\n\023add2SoilistResponse\022$\n\007msgName\030\001 \001(\t"
    ":\023add2SoilistResponse\022\021\n\trequestID\030\002 \002(\t"
    "\022\020\n\010sigAdded\030\003 \002(\t\022\030\n\020targetIdentifier\030\004"
    " \002(\t\"~\n\027generateJamFileResponse\022(\n\007msgNa"
    "me\030\001 \001(\t:\027generateJamFileResponse\022\021\n\treq"
    "uestID\030\002 \002(\t\022\021\n\tclusterID\030\003 \002(\005\022\023\n\013jamFi"
    "lePath\030\004 \002(\t\"X\n\014nullResponse\022\035\n\007msgName\030"
    "\001 \001(\t:\014nullResponse\022\021\n\trequestID\030\002 \002(\t\022\026"
    "\n\016requestMsgName\030\003 \002(\tB\025\n\023fv.protos.keps"
    "visor", 765);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SITQueueMessages.proto", &protobuf_RegisterTypes);
  clusteringResults::_default_msgname_ =
      new ::std::string("clusteringResults", 17);
  clusteringResults::default_instance_ = new clusteringResults();
  detectFhopResponse::_default_msgname_ =
      new ::std::string("detectFhopResponse", 18);
  detectFhopResponse::default_instance_ = new detectFhopResponse();
  add2SoilistResponse::_default_msgname_ =
      new ::std::string("add2SoilistResponse", 19);
  add2SoilistResponse::default_instance_ = new add2SoilistResponse();
  generateJamFileResponse::_default_msgname_ =
      new ::std::string("generateJamFileResponse", 23);
  generateJamFileResponse::default_instance_ = new generateJamFileResponse();
  nullResponse::_default_msgname_ =
      new ::std::string("nullResponse", 12);
  nullResponse::default_instance_ = new nullResponse();
  clusteringResults::default_instance_->InitAsDefaultInstance();
  detectFhopResponse::default_instance_->InitAsDefaultInstance();
  add2SoilistResponse::default_instance_->InitAsDefaultInstance();
  generateJamFileResponse::default_instance_->InitAsDefaultInstance();
  nullResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SITQueueMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SITQueueMessages_2eproto {
  StaticDescriptorInitializer_SITQueueMessages_2eproto() {
    protobuf_AddDesc_SITQueueMessages_2eproto();
  }
} static_descriptor_initializer_SITQueueMessages_2eproto_;

// ===================================================================

::std::string* clusteringResults::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int clusteringResults::kMsgNameFieldNumber;
const int clusteringResults::kClusterIDFieldNumber;
const int clusteringResults::kHopFreqsFieldNumber;
const int clusteringResults::kLastDetectTimeFieldNumber;
const int clusteringResults::kLastDetectFreqFieldNumber;
const int clusteringResults::kBestLibraryMatchNameFieldNumber;
const int clusteringResults::kBestLibraryMatchConfidenceFieldNumber;
#endif  // !_MSC_VER

clusteringResults::clusteringResults()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void clusteringResults::InitAsDefaultInstance() {
}

clusteringResults::clusteringResults(const clusteringResults& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void clusteringResults::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  clusterid_ = 0;
  lastdetecttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastdetectfreq_ = 0;
  bestlibrarymatchname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bestlibrarymatchconfidence_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

clusteringResults::~clusteringResults() {
  SharedDtor();
}

void clusteringResults::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (lastdetecttime_ != &::google::protobuf::internal::kEmptyString) {
    delete lastdetecttime_;
  }
  if (bestlibrarymatchname_ != &::google::protobuf::internal::kEmptyString) {
    delete bestlibrarymatchname_;
  }
  if (this != default_instance_) {
  }
}

void clusteringResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* clusteringResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return clusteringResults_descriptor_;
}

const clusteringResults& clusteringResults::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SITQueueMessages_2eproto();
  return *default_instance_;
}

clusteringResults* clusteringResults::default_instance_ = NULL;

clusteringResults* clusteringResults::New() const {
  return new clusteringResults;
}

void clusteringResults::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    clusterid_ = 0;
    if (has_lastdetecttime()) {
      if (lastdetecttime_ != &::google::protobuf::internal::kEmptyString) {
        lastdetecttime_->clear();
      }
    }
    lastdetectfreq_ = 0;
    if (has_bestlibrarymatchname()) {
      if (bestlibrarymatchname_ != &::google::protobuf::internal::kEmptyString) {
        bestlibrarymatchname_->clear();
      }
    }
    bestlibrarymatchconfidence_ = 0;
  }
  hopfreqs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool clusteringResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "clusteringResults"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clusterID;
        break;
      }

      // required int32 clusterID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clusterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_hopFreqs;
        break;
      }

      // repeated double hopFreqs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_hopFreqs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_hopfreqs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_hopfreqs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_hopFreqs;
        if (input->ExpectTag(34)) goto parse_lastDetectTime;
        break;
      }

      // required string lastDetectTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastDetectTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastdetecttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastdetecttime().data(), this->lastdetecttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_lastDetectFreq;
        break;
      }

      // required double lastDetectFreq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lastDetectFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastdetectfreq_)));
          set_has_lastdetectfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bestLibraryMatchName;
        break;
      }

      // required string bestLibraryMatchName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bestLibraryMatchName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bestlibrarymatchname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bestlibrarymatchname().data(), this->bestlibrarymatchname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_bestLibraryMatchConfidence;
        break;
      }

      // required double bestLibraryMatchConfidence = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bestLibraryMatchConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bestlibrarymatchconfidence_)));
          set_has_bestlibrarymatchconfidence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void clusteringResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "clusteringResults"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // required int32 clusterID = 2;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clusterid(), output);
  }

  // repeated double hopFreqs = 3;
  for (int i = 0; i < this->hopfreqs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->hopfreqs(i), output);
  }

  // required string lastDetectTime = 4;
  if (has_lastdetecttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastdetecttime().data(), this->lastdetecttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->lastdetecttime(), output);
  }

  // required double lastDetectFreq = 5;
  if (has_lastdetectfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lastdetectfreq(), output);
  }

  // required string bestLibraryMatchName = 6;
  if (has_bestlibrarymatchname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bestlibrarymatchname().data(), this->bestlibrarymatchname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->bestlibrarymatchname(), output);
  }

  // required double bestLibraryMatchConfidence = 7;
  if (has_bestlibrarymatchconfidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->bestlibrarymatchconfidence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* clusteringResults::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "clusteringResults"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // required int32 clusterID = 2;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clusterid(), target);
  }

  // repeated double hopFreqs = 3;
  for (int i = 0; i < this->hopfreqs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->hopfreqs(i), target);
  }

  // required string lastDetectTime = 4;
  if (has_lastdetecttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastdetecttime().data(), this->lastdetecttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lastdetecttime(), target);
  }

  // required double lastDetectFreq = 5;
  if (has_lastdetectfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lastdetectfreq(), target);
  }

  // required string bestLibraryMatchName = 6;
  if (has_bestlibrarymatchname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bestlibrarymatchname().data(), this->bestlibrarymatchname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bestlibrarymatchname(), target);
  }

  // required double bestLibraryMatchConfidence = 7;
  if (has_bestlibrarymatchconfidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->bestlibrarymatchconfidence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int clusteringResults::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "clusteringResults"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // required int32 clusterID = 2;
    if (has_clusterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clusterid());
    }

    // required string lastDetectTime = 4;
    if (has_lastdetecttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastdetecttime());
    }

    // required double lastDetectFreq = 5;
    if (has_lastdetectfreq()) {
      total_size += 1 + 8;
    }

    // required string bestLibraryMatchName = 6;
    if (has_bestlibrarymatchname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bestlibrarymatchname());
    }

    // required double bestLibraryMatchConfidence = 7;
    if (has_bestlibrarymatchconfidence()) {
      total_size += 1 + 8;
    }

  }
  // repeated double hopFreqs = 3;
  {
    int data_size = 0;
    data_size = 8 * this->hopfreqs_size();
    total_size += 1 * this->hopfreqs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void clusteringResults::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const clusteringResults* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const clusteringResults*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void clusteringResults::MergeFrom(const clusteringResults& from) {
  GOOGLE_CHECK_NE(&from, this);
  hopfreqs_.MergeFrom(from.hopfreqs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_lastdetecttime()) {
      set_lastdetecttime(from.lastdetecttime());
    }
    if (from.has_lastdetectfreq()) {
      set_lastdetectfreq(from.lastdetectfreq());
    }
    if (from.has_bestlibrarymatchname()) {
      set_bestlibrarymatchname(from.bestlibrarymatchname());
    }
    if (from.has_bestlibrarymatchconfidence()) {
      set_bestlibrarymatchconfidence(from.bestlibrarymatchconfidence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void clusteringResults::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void clusteringResults::CopyFrom(const clusteringResults& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool clusteringResults::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007a) != 0x0000007a) return false;

  return true;
}

void clusteringResults::Swap(clusteringResults* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(clusterid_, other->clusterid_);
    hopfreqs_.Swap(&other->hopfreqs_);
    std::swap(lastdetecttime_, other->lastdetecttime_);
    std::swap(lastdetectfreq_, other->lastdetectfreq_);
    std::swap(bestlibrarymatchname_, other->bestlibrarymatchname_);
    std::swap(bestlibrarymatchconfidence_, other->bestlibrarymatchconfidence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata clusteringResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = clusteringResults_descriptor_;
  metadata.reflection = clusteringResults_reflection_;
  return metadata;
}


// ===================================================================

::std::string* detectFhopResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int detectFhopResponse::kMsgNameFieldNumber;
const int detectFhopResponse::kRequestIDFieldNumber;
const int detectFhopResponse::kIqSnapFieldNumber;
const int detectFhopResponse::kDetectResultsFieldNumber;
#endif  // !_MSC_VER

detectFhopResponse::detectFhopResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void detectFhopResponse::InitAsDefaultInstance() {
}

detectFhopResponse::detectFhopResponse(const detectFhopResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void detectFhopResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iqsnap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

detectFhopResponse::~detectFhopResponse() {
  SharedDtor();
}

void detectFhopResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    delete requestid_;
  }
  if (iqsnap_ != &::google::protobuf::internal::kEmptyString) {
    delete iqsnap_;
  }
  if (this != default_instance_) {
  }
}

void detectFhopResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* detectFhopResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return detectFhopResponse_descriptor_;
}

const detectFhopResponse& detectFhopResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SITQueueMessages_2eproto();
  return *default_instance_;
}

detectFhopResponse* detectFhopResponse::default_instance_ = NULL;

detectFhopResponse* detectFhopResponse::New() const {
  return new detectFhopResponse;
}

void detectFhopResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_requestid()) {
      if (requestid_ != &::google::protobuf::internal::kEmptyString) {
        requestid_->clear();
      }
    }
    if (has_iqsnap()) {
      if (iqsnap_ != &::google::protobuf::internal::kEmptyString) {
        iqsnap_->clear();
      }
    }
  }
  detectresults_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool detectFhopResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "detectFhopResponse"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_requestID;
        break;
      }

      // required string requestID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requestID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requestid().data(), this->requestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_iqSnap;
        break;
      }

      // required string iqSnap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iqSnap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iqsnap()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iqsnap().data(), this->iqsnap().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_detectResults;
        break;
      }

      // repeated .sit_queue_msg.clusteringResults detectResults = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detectResults:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detectresults()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_detectResults;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void detectFhopResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "detectFhopResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // required string requestID = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->requestid(), output);
  }

  // required string iqSnap = 3;
  if (has_iqsnap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iqsnap().data(), this->iqsnap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->iqsnap(), output);
  }

  // repeated .sit_queue_msg.clusteringResults detectResults = 4;
  for (int i = 0; i < this->detectresults_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->detectresults(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* detectFhopResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "detectFhopResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // required string requestID = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requestid(), target);
  }

  // required string iqSnap = 3;
  if (has_iqsnap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iqsnap().data(), this->iqsnap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->iqsnap(), target);
  }

  // repeated .sit_queue_msg.clusteringResults detectResults = 4;
  for (int i = 0; i < this->detectresults_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->detectresults(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int detectFhopResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "detectFhopResponse"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // required string requestID = 2;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestid());
    }

    // required string iqSnap = 3;
    if (has_iqsnap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iqsnap());
    }

  }
  // repeated .sit_queue_msg.clusteringResults detectResults = 4;
  total_size += 1 * this->detectresults_size();
  for (int i = 0; i < this->detectresults_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detectresults(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void detectFhopResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const detectFhopResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const detectFhopResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void detectFhopResponse::MergeFrom(const detectFhopResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  detectresults_.MergeFrom(from.detectresults_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_iqsnap()) {
      set_iqsnap(from.iqsnap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void detectFhopResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void detectFhopResponse::CopyFrom(const detectFhopResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool detectFhopResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < detectresults_size(); i++) {
    if (!this->detectresults(i).IsInitialized()) return false;
  }
  return true;
}

void detectFhopResponse::Swap(detectFhopResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(requestid_, other->requestid_);
    std::swap(iqsnap_, other->iqsnap_);
    detectresults_.Swap(&other->detectresults_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata detectFhopResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = detectFhopResponse_descriptor_;
  metadata.reflection = detectFhopResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* add2SoilistResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int add2SoilistResponse::kMsgNameFieldNumber;
const int add2SoilistResponse::kRequestIDFieldNumber;
const int add2SoilistResponse::kSigAddedFieldNumber;
const int add2SoilistResponse::kTargetIdentifierFieldNumber;
#endif  // !_MSC_VER

add2SoilistResponse::add2SoilistResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void add2SoilistResponse::InitAsDefaultInstance() {
}

add2SoilistResponse::add2SoilistResponse(const add2SoilistResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void add2SoilistResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sigadded_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  targetidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

add2SoilistResponse::~add2SoilistResponse() {
  SharedDtor();
}

void add2SoilistResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    delete requestid_;
  }
  if (sigadded_ != &::google::protobuf::internal::kEmptyString) {
    delete sigadded_;
  }
  if (targetidentifier_ != &::google::protobuf::internal::kEmptyString) {
    delete targetidentifier_;
  }
  if (this != default_instance_) {
  }
}

void add2SoilistResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add2SoilistResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return add2SoilistResponse_descriptor_;
}

const add2SoilistResponse& add2SoilistResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SITQueueMessages_2eproto();
  return *default_instance_;
}

add2SoilistResponse* add2SoilistResponse::default_instance_ = NULL;

add2SoilistResponse* add2SoilistResponse::New() const {
  return new add2SoilistResponse;
}

void add2SoilistResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_requestid()) {
      if (requestid_ != &::google::protobuf::internal::kEmptyString) {
        requestid_->clear();
      }
    }
    if (has_sigadded()) {
      if (sigadded_ != &::google::protobuf::internal::kEmptyString) {
        sigadded_->clear();
      }
    }
    if (has_targetidentifier()) {
      if (targetidentifier_ != &::google::protobuf::internal::kEmptyString) {
        targetidentifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool add2SoilistResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "add2SoilistResponse"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_requestID;
        break;
      }

      // required string requestID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requestID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requestid().data(), this->requestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sigAdded;
        break;
      }

      // required string sigAdded = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigAdded:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sigadded()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sigadded().data(), this->sigadded().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_targetIdentifier;
        break;
      }

      // required string targetIdentifier = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetIdentifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetidentifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetidentifier().data(), this->targetidentifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void add2SoilistResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "add2SoilistResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // required string requestID = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->requestid(), output);
  }

  // required string sigAdded = 3;
  if (has_sigadded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sigadded().data(), this->sigadded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sigadded(), output);
  }

  // required string targetIdentifier = 4;
  if (has_targetidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetidentifier().data(), this->targetidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->targetidentifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* add2SoilistResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "add2SoilistResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // required string requestID = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requestid(), target);
  }

  // required string sigAdded = 3;
  if (has_sigadded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sigadded().data(), this->sigadded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sigadded(), target);
  }

  // required string targetIdentifier = 4;
  if (has_targetidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetidentifier().data(), this->targetidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->targetidentifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int add2SoilistResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "add2SoilistResponse"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // required string requestID = 2;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestid());
    }

    // required string sigAdded = 3;
    if (has_sigadded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sigadded());
    }

    // required string targetIdentifier = 4;
    if (has_targetidentifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetidentifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add2SoilistResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const add2SoilistResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const add2SoilistResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void add2SoilistResponse::MergeFrom(const add2SoilistResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_sigadded()) {
      set_sigadded(from.sigadded());
    }
    if (from.has_targetidentifier()) {
      set_targetidentifier(from.targetidentifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void add2SoilistResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add2SoilistResponse::CopyFrom(const add2SoilistResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add2SoilistResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void add2SoilistResponse::Swap(add2SoilistResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(requestid_, other->requestid_);
    std::swap(sigadded_, other->sigadded_);
    std::swap(targetidentifier_, other->targetidentifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata add2SoilistResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = add2SoilistResponse_descriptor_;
  metadata.reflection = add2SoilistResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* generateJamFileResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int generateJamFileResponse::kMsgNameFieldNumber;
const int generateJamFileResponse::kRequestIDFieldNumber;
const int generateJamFileResponse::kClusterIDFieldNumber;
const int generateJamFileResponse::kJamFilePathFieldNumber;
#endif  // !_MSC_VER

generateJamFileResponse::generateJamFileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void generateJamFileResponse::InitAsDefaultInstance() {
}

generateJamFileResponse::generateJamFileResponse(const generateJamFileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void generateJamFileResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clusterid_ = 0;
  jamfilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

generateJamFileResponse::~generateJamFileResponse() {
  SharedDtor();
}

void generateJamFileResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    delete requestid_;
  }
  if (jamfilepath_ != &::google::protobuf::internal::kEmptyString) {
    delete jamfilepath_;
  }
  if (this != default_instance_) {
  }
}

void generateJamFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* generateJamFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return generateJamFileResponse_descriptor_;
}

const generateJamFileResponse& generateJamFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SITQueueMessages_2eproto();
  return *default_instance_;
}

generateJamFileResponse* generateJamFileResponse::default_instance_ = NULL;

generateJamFileResponse* generateJamFileResponse::New() const {
  return new generateJamFileResponse;
}

void generateJamFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_requestid()) {
      if (requestid_ != &::google::protobuf::internal::kEmptyString) {
        requestid_->clear();
      }
    }
    clusterid_ = 0;
    if (has_jamfilepath()) {
      if (jamfilepath_ != &::google::protobuf::internal::kEmptyString) {
        jamfilepath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool generateJamFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "generateJamFileResponse"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_requestID;
        break;
      }

      // required string requestID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requestID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requestid().data(), this->requestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clusterID;
        break;
      }

      // required int32 clusterID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clusterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jamFilePath;
        break;
      }

      // required string jamFilePath = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jamFilePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jamfilepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jamfilepath().data(), this->jamfilepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void generateJamFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "generateJamFileResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // required string requestID = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->requestid(), output);
  }

  // required int32 clusterID = 3;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clusterid(), output);
  }

  // required string jamFilePath = 4;
  if (has_jamfilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jamfilepath().data(), this->jamfilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->jamfilepath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* generateJamFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "generateJamFileResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // required string requestID = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requestid(), target);
  }

  // required int32 clusterID = 3;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clusterid(), target);
  }

  // required string jamFilePath = 4;
  if (has_jamfilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jamfilepath().data(), this->jamfilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jamfilepath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int generateJamFileResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "generateJamFileResponse"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // required string requestID = 2;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestid());
    }

    // required int32 clusterID = 3;
    if (has_clusterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clusterid());
    }

    // required string jamFilePath = 4;
    if (has_jamfilepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jamfilepath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void generateJamFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const generateJamFileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const generateJamFileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void generateJamFileResponse::MergeFrom(const generateJamFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_jamfilepath()) {
      set_jamfilepath(from.jamfilepath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void generateJamFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void generateJamFileResponse::CopyFrom(const generateJamFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool generateJamFileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void generateJamFileResponse::Swap(generateJamFileResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(requestid_, other->requestid_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(jamfilepath_, other->jamfilepath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata generateJamFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = generateJamFileResponse_descriptor_;
  metadata.reflection = generateJamFileResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* nullResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int nullResponse::kMsgNameFieldNumber;
const int nullResponse::kRequestIDFieldNumber;
const int nullResponse::kRequestMsgNameFieldNumber;
#endif  // !_MSC_VER

nullResponse::nullResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void nullResponse::InitAsDefaultInstance() {
}

nullResponse::nullResponse(const nullResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nullResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  requestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requestmsgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nullResponse::~nullResponse() {
  SharedDtor();
}

void nullResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (requestid_ != &::google::protobuf::internal::kEmptyString) {
    delete requestid_;
  }
  if (requestmsgname_ != &::google::protobuf::internal::kEmptyString) {
    delete requestmsgname_;
  }
  if (this != default_instance_) {
  }
}

void nullResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nullResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nullResponse_descriptor_;
}

const nullResponse& nullResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SITQueueMessages_2eproto();
  return *default_instance_;
}

nullResponse* nullResponse::default_instance_ = NULL;

nullResponse* nullResponse::New() const {
  return new nullResponse;
}

void nullResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_requestid()) {
      if (requestid_ != &::google::protobuf::internal::kEmptyString) {
        requestid_->clear();
      }
    }
    if (has_requestmsgname()) {
      if (requestmsgname_ != &::google::protobuf::internal::kEmptyString) {
        requestmsgname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nullResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "nullResponse"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_requestID;
        break;
      }

      // required string requestID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requestID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requestid().data(), this->requestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_requestMsgName;
        break;
      }

      // required string requestMsgName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requestMsgName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestmsgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requestmsgname().data(), this->requestmsgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nullResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "nullResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // required string requestID = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->requestid(), output);
  }

  // required string requestMsgName = 3;
  if (has_requestmsgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestmsgname().data(), this->requestmsgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->requestmsgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* nullResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "nullResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // required string requestID = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requestid(), target);
  }

  // required string requestMsgName = 3;
  if (has_requestmsgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestmsgname().data(), this->requestmsgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->requestmsgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nullResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "nullResponse"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // required string requestID = 2;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestid());
    }

    // required string requestMsgName = 3;
    if (has_requestmsgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestmsgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nullResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nullResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const nullResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nullResponse::MergeFrom(const nullResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_requestmsgname()) {
      set_requestmsgname(from.requestmsgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nullResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nullResponse::CopyFrom(const nullResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nullResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void nullResponse::Swap(nullResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(requestid_, other->requestid_);
    std::swap(requestmsgname_, other->requestmsgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata nullResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nullResponse_descriptor_;
  metadata.reflection = nullResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sit_queue_msg

// @@protoc_insertion_point(global_scope)
