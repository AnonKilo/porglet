// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FalconRemotingMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FalconRemotingMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace falcon_remoting_msg {

namespace {

const ::google::protobuf::Descriptor* StatusReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusReport_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusReport_LogLevel_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BlacklistStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlacklistStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* InterceptListStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InterceptListStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternalsHitListStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternalsHitListStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalSignalListStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalSignalListStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusChannel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusChannel_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HealthStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HealthStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* HealthMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HealthMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HealthMessage_Code_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HealthTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HealthTest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HealthTest_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SignalEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SignalEvent_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GPSPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPSPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetadataPOF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetadataPOF_reflection_ = NULL;
const ::google::protobuf::Descriptor* KVPMetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KVPMetaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WaypointMetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaypointMetaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GndpointMetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GndpointMetaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPSPlatPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPSPlatPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPsd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPsd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetAtten_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetAtten_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SetAtten_AutoAtten_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SearchControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchControl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SearchControl_Action_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FrequencyTune_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrequencyTune_reflection_ = NULL;
const ::google::protobuf::Descriptor* PredRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PredRecord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PredRecord_Action_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PredSnap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PredSnap_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoControl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VideoControl_Record_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VideoControl_Sync_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VideoControl_Mode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FhopSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FhopSettings_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FhopSettings_FreqHopMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TunerLock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TunerLock_reflection_ = NULL;
const ::google::protobuf::Descriptor* AntennaScanStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AntennaScanStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AntennaScanStatus_ScanStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AntennaScanStatus_TrackStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* QueryMidasAppStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryMidasAppStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* MidasAppStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MidasAppStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MidasAppStatus_SearchSetting_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RxStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RxStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RxStatus_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RecordingStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordingStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RecordingStatus_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SignalStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectionStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectionStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DetectionStatus_Color_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SearchStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SearchStatus_Color_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VideoStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VideoStatus_RecStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VideoStatus_SyncStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VideoStatus_JpegMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FreqHopStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreqHopStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FreqHopStatus_Mode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FreqHopTunerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreqHopTunerStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecialG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecialG_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorHealth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorHealth_reflection_ = NULL;
const ::google::protobuf::Descriptor* HardwareStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HardwareStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrientationStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrientationStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiverStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiverStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReceiverStatus_GainMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FieldofView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldofView_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FalconRemotingMessages_2eproto() {
  protobuf_AddDesc_FalconRemotingMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FalconRemotingMessages.proto");
  GOOGLE_CHECK(file != NULL);
  StatusReport_descriptor_ = file->message_type(0);
  static const int StatusReport_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusReport, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusReport, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusReport, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusReport, message_),
  };
  StatusReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusReport_descriptor_,
      StatusReport::default_instance_,
      StatusReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusReport));
  StatusReport_LogLevel_descriptor_ = StatusReport_descriptor_->enum_type(0);
  BlacklistStatus_descriptor_ = file->message_type(1);
  static const int BlacklistStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistStatus, entries_),
  };
  BlacklistStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlacklistStatus_descriptor_,
      BlacklistStatus::default_instance_,
      BlacklistStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlacklistStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlacklistStatus));
  InterceptListStatus_descriptor_ = file->message_type(2);
  static const int InterceptListStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptListStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptListStatus, entries_),
  };
  InterceptListStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InterceptListStatus_descriptor_,
      InterceptListStatus::default_instance_,
      InterceptListStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptListStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterceptListStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InterceptListStatus));
  ExternalsHitListStatus_descriptor_ = file->message_type(3);
  static const int ExternalsHitListStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHitListStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHitListStatus, entries_),
  };
  ExternalsHitListStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExternalsHitListStatus_descriptor_,
      ExternalsHitListStatus::default_instance_,
      ExternalsHitListStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHitListStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalsHitListStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExternalsHitListStatus));
  GlobalSignalListStatus_descriptor_ = file->message_type(4);
  static const int GlobalSignalListStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSignalListStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSignalListStatus, feed_id_),
  };
  GlobalSignalListStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalSignalListStatus_descriptor_,
      GlobalSignalListStatus::default_instance_,
      GlobalSignalListStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSignalListStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSignalListStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalSignalListStatus));
  StatusChannel_descriptor_ = file->message_type(5);
  static const int StatusChannel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusChannel, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusChannel, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusChannel, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusChannel, scrypt_),
  };
  StatusChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusChannel_descriptor_,
      StatusChannel::default_instance_,
      StatusChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusChannel));
  StatusChannel_Status_descriptor_ = StatusChannel_descriptor_->enum_type(0);
  HealthStatus_descriptor_ = file->message_type(6);
  static const int HealthStatus_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthStatus, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthStatus, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthStatus, ntp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthStatus, mhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthStatus, pps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthStatus, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthStatus, rx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthStatus, raid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthStatus, disabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthStatus, ssid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthStatus, uniqrxid_),
  };
  HealthStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HealthStatus_descriptor_,
      HealthStatus::default_instance_,
      HealthStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HealthStatus));
  HealthMessage_descriptor_ = file->message_type(7);
  static const int HealthMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthMessage, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthMessage, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthMessage, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthMessage, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthMessage, timestamp_),
  };
  HealthMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HealthMessage_descriptor_,
      HealthMessage::default_instance_,
      HealthMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HealthMessage));
  HealthMessage_Code_descriptor_ = HealthMessage_descriptor_->enum_type(0);
  HealthTest_descriptor_ = file->message_type(8);
  static const int HealthTest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthTest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthTest, status_),
  };
  HealthTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HealthTest_descriptor_,
      HealthTest::default_instance_,
      HealthTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HealthTest));
  HealthTest_Status_descriptor_ = HealthTest_descriptor_->enum_type(0);
  SignalEvent_descriptor_ = file->message_type(9);
  static const int SignalEvent_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, soinum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, rfmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, subcarmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, excurkhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, antnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, antaz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, antel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, scrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, exportport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, eltex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, bwmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, sensorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, externals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, internals_),
  };
  SignalEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalEvent_descriptor_,
      SignalEvent::default_instance_,
      SignalEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalEvent));
  SignalEvent_Type_descriptor_ = SignalEvent_descriptor_->enum_type(0);
  GPSPosition_descriptor_ = file->message_type(10);
  static const int GPSPosition_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, wplatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, wplongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, bearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, soi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, isprediction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, vector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, antnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, antaz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, antel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, sensorname_),
  };
  GPSPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPSPosition_descriptor_,
      GPSPosition::default_instance_,
      GPSPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPSPosition));
  MetadataPOF_descriptor_ = file->message_type(11);
  static const int MetadataPOF_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataPOF, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataPOF, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataPOF, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataPOF, pof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataPOF, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataPOF, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataPOF, soi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataPOF, antnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataPOF, antaz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataPOF, antel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataPOF, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataPOF, appid_),
  };
  MetadataPOF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetadataPOF_descriptor_,
      MetadataPOF::default_instance_,
      MetadataPOF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataPOF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataPOF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetadataPOF));
  KVPMetaData_descriptor_ = file->message_type(12);
  static const int KVPMetaData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPMetaData, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPMetaData, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPMetaData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPMetaData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPMetaData, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPMetaData, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPMetaData, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPMetaData, appid_),
  };
  KVPMetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KVPMetaData_descriptor_,
      KVPMetaData::default_instance_,
      KVPMetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPMetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPMetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KVPMetaData));
  WaypointMetaData_descriptor_ = file->message_type(13);
  static const int WaypointMetaData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointMetaData, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointMetaData, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointMetaData, waypointid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointMetaData, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointMetaData, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointMetaData, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointMetaData, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointMetaData, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointMetaData, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointMetaData, appid_),
  };
  WaypointMetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WaypointMetaData_descriptor_,
      WaypointMetaData::default_instance_,
      WaypointMetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointMetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointMetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WaypointMetaData));
  GndpointMetaData_descriptor_ = file->message_type(14);
  static const int GndpointMetaData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GndpointMetaData, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GndpointMetaData, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GndpointMetaData, pointid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GndpointMetaData, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GndpointMetaData, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GndpointMetaData, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GndpointMetaData, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GndpointMetaData, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GndpointMetaData, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GndpointMetaData, appid_),
  };
  GndpointMetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GndpointMetaData_descriptor_,
      GndpointMetaData::default_instance_,
      GndpointMetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GndpointMetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GndpointMetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GndpointMetaData));
  RemoteMessage_descriptor_ = file->message_type(15);
  static const int RemoteMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteMessage, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteMessage, msgpass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteMessage, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteMessage, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteMessage, msgid_),
  };
  RemoteMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteMessage_descriptor_,
      RemoteMessage::default_instance_,
      RemoteMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteMessage));
  GPSPlatPos_descriptor_ = file->message_type(16);
  static const int GPSPlatPos_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPlatPos, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPlatPos, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPlatPos, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPlatPos, heading_),
  };
  GPSPlatPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPSPlatPos_descriptor_,
      GPSPlatPos::default_instance_,
      GPSPlatPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPlatPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSPlatPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPSPlatPos));
  RequestPsd_descriptor_ = file->message_type(17);
  static const int RequestPsd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPsd, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPsd, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPsd, archivenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPsd, returnchan_),
  };
  RequestPsd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPsd_descriptor_,
      RequestPsd::default_instance_,
      RequestPsd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPsd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPsd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPsd));
  SetAtten_descriptor_ = file->message_type(18);
  static const int SetAtten_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAtten, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAtten, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAtten, autoatten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAtten, atten_),
  };
  SetAtten_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetAtten_descriptor_,
      SetAtten::default_instance_,
      SetAtten_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAtten, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAtten, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetAtten));
  SetAtten_AutoAtten_descriptor_ = SetAtten_descriptor_->enum_type(0);
  SearchControl_descriptor_ = file->message_type(19);
  static const int SearchControl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchControl, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchControl, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchControl, action_),
  };
  SearchControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchControl_descriptor_,
      SearchControl::default_instance_,
      SearchControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchControl));
  SearchControl_Action_descriptor_ = SearchControl_descriptor_->enum_type(0);
  FrequencyTune_descriptor_ = file->message_type(20);
  static const int FrequencyTune_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrequencyTune, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrequencyTune, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrequencyTune, freq_),
  };
  FrequencyTune_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrequencyTune_descriptor_,
      FrequencyTune::default_instance_,
      FrequencyTune_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrequencyTune, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrequencyTune, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrequencyTune));
  PredRecord_descriptor_ = file->message_type(21);
  static const int PredRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredRecord, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredRecord, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredRecord, predrecord_),
  };
  PredRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PredRecord_descriptor_,
      PredRecord::default_instance_,
      PredRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PredRecord));
  PredRecord_Action_descriptor_ = PredRecord_descriptor_->enum_type(0);
  PredSnap_descriptor_ = file->message_type(22);
  static const int PredSnap_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredSnap, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredSnap, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredSnap, snaplength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredSnap, takesnap_),
  };
  PredSnap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PredSnap_descriptor_,
      PredSnap::default_instance_,
      PredSnap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredSnap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredSnap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PredSnap));
  VideoControl_descriptor_ = file->message_type(23);
  static const int VideoControl_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoControl, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoControl, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoControl, videorecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoControl, videosync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoControl, videointegration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoControl, jpegcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoControl, jpegrate_),
  };
  VideoControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoControl_descriptor_,
      VideoControl::default_instance_,
      VideoControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoControl));
  VideoControl_Record_descriptor_ = VideoControl_descriptor_->enum_type(0);
  VideoControl_Sync_descriptor_ = VideoControl_descriptor_->enum_type(1);
  VideoControl_Mode_descriptor_ = VideoControl_descriptor_->enum_type(2);
  FhopSettings_descriptor_ = file->message_type(24);
  static const int FhopSettings_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FhopSettings, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FhopSettings, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FhopSettings, freqhopmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FhopSettings, tunerlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FhopSettings, tunerfreq_),
  };
  FhopSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FhopSettings_descriptor_,
      FhopSettings::default_instance_,
      FhopSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FhopSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FhopSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FhopSettings));
  FhopSettings_FreqHopMode_descriptor_ = FhopSettings_descriptor_->enum_type(0);
  TunerLock_descriptor_ = file->message_type(25);
  static const int TunerLock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunerLock, tuner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunerLock, lock_),
  };
  TunerLock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TunerLock_descriptor_,
      TunerLock::default_instance_,
      TunerLock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunerLock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunerLock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TunerLock));
  AntennaScanStatus_descriptor_ = file->message_type(26);
  static const int AntennaScanStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScanStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScanStatus, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScanStatus, scanstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScanStatus, trackstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScanStatus, minscanangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScanStatus, maxscanangle_),
  };
  AntennaScanStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AntennaScanStatus_descriptor_,
      AntennaScanStatus::default_instance_,
      AntennaScanStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScanStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScanStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AntennaScanStatus));
  AntennaScanStatus_ScanStatus_descriptor_ = AntennaScanStatus_descriptor_->enum_type(0);
  AntennaScanStatus_TrackStatus_descriptor_ = AntennaScanStatus_descriptor_->enum_type(1);
  QueryMidasAppStatus_descriptor_ = file->message_type(27);
  static const int QueryMidasAppStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMidasAppStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMidasAppStatus, appid_),
  };
  QueryMidasAppStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryMidasAppStatus_descriptor_,
      QueryMidasAppStatus::default_instance_,
      QueryMidasAppStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMidasAppStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMidasAppStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryMidasAppStatus));
  MidasAppStatus_descriptor_ = file->message_type(28);
  static const int MidasAppStatus_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidasAppStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidasAppStatus, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidasAppStatus, rxstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidasAppStatus, recstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidasAppStatus, sigstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidasAppStatus, vidstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidasAppStatus, fhstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidasAppStatus, searchstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidasAppStatus, specialg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidasAppStatus, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidasAppStatus, skyscraperproduct_),
  };
  MidasAppStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MidasAppStatus_descriptor_,
      MidasAppStatus::default_instance_,
      MidasAppStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidasAppStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidasAppStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MidasAppStatus));
  MidasAppStatus_SearchSetting_descriptor_ = MidasAppStatus_descriptor_->enum_type(0);
  RxStatus_descriptor_ = file->message_type(29);
  static const int RxStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxStatus, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxStatus, atten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxStatus, autoatten_),
  };
  RxStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RxStatus_descriptor_,
      RxStatus::default_instance_,
      RxStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RxStatus));
  RxStatus_Status_descriptor_ = RxStatus_descriptor_->enum_type(0);
  RecordingStatus_descriptor_ = file->message_type(30);
  static const int RecordingStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingStatus, predrecstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingStatus, diskuse_),
  };
  RecordingStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordingStatus_descriptor_,
      RecordingStatus::default_instance_,
      RecordingStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordingStatus));
  RecordingStatus_Status_descriptor_ = RecordingStatus_descriptor_->enum_type(0);
  SignalStatus_descriptor_ = file->message_type(31);
  static const int SignalStatus_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, detstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, ber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, centerfreqest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, excurest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, packetcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, timewindow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, timestamp_),
  };
  SignalStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalStatus_descriptor_,
      SignalStatus::default_instance_,
      SignalStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalStatus));
  DetectionStatus_descriptor_ = file->message_type(32);
  static const int DetectionStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionStatus, signame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionStatus, detstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionStatus, color_),
  };
  DetectionStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectionStatus_descriptor_,
      DetectionStatus::default_instance_,
      DetectionStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectionStatus));
  DetectionStatus_Color_descriptor_ = DetectionStatus_descriptor_->enum_type(0);
  SearchStatus_descriptor_ = file->message_type(33);
  static const int SearchStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchStatus, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchStatus, color_),
  };
  SearchStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchStatus_descriptor_,
      SearchStatus::default_instance_,
      SearchStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchStatus));
  SearchStatus_Color_descriptor_ = SearchStatus_descriptor_->enum_type(0);
  VideoStatus_descriptor_ = file->message_type(34);
  static const int VideoStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoStatus, vidrecstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoStatus, vidsync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoStatus, vidint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoStatus, jpegmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoStatus, jpegrate_),
  };
  VideoStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoStatus_descriptor_,
      VideoStatus::default_instance_,
      VideoStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoStatus));
  VideoStatus_RecStatus_descriptor_ = VideoStatus_descriptor_->enum_type(0);
  VideoStatus_SyncStatus_descriptor_ = VideoStatus_descriptor_->enum_type(1);
  VideoStatus_JpegMode_descriptor_ = VideoStatus_descriptor_->enum_type(2);
  FreqHopStatus_descriptor_ = file->message_type(35);
  static const int FreqHopStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreqHopStatus, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreqHopStatus, fhoptuner_),
  };
  FreqHopStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FreqHopStatus_descriptor_,
      FreqHopStatus::default_instance_,
      FreqHopStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreqHopStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreqHopStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FreqHopStatus));
  FreqHopStatus_Mode_descriptor_ = FreqHopStatus_descriptor_->enum_type(0);
  FreqHopTunerStatus_descriptor_ = file->message_type(36);
  static const int FreqHopTunerStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreqHopTunerStatus, tuner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreqHopTunerStatus, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreqHopTunerStatus, numhits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreqHopTunerStatus, locked_),
  };
  FreqHopTunerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FreqHopTunerStatus_descriptor_,
      FreqHopTunerStatus::default_instance_,
      FreqHopTunerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreqHopTunerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreqHopTunerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FreqHopTunerStatus));
  SpecialG_descriptor_ = file->message_type(37);
  static const int SpecialG_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialG, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialG, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialG, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialG, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialG, estalt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialG, enable_),
  };
  SpecialG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecialG_descriptor_,
      SpecialG::default_instance_,
      SpecialG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecialG));
  SensorPosition_descriptor_ = file->message_type(38);
  static const int SensorPosition_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPosition, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPosition, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPosition, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPosition, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPosition, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPosition, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPosition, sensorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPosition, siteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPosition, sigad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPosition, fov_),
  };
  SensorPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorPosition_descriptor_,
      SensorPosition::default_instance_,
      SensorPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorPosition));
  SensorHealth_descriptor_ = file->message_type(39);
  static const int SensorHealth_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHealth, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHealth, sensorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHealth, polltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHealth, averagecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHealth, cpuusage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHealth, cpuaverage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHealth, ramusage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHealth, ramaverage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHealth, diskusage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHealth, diskaverage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHealth, cputempavg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHealth, cputempmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHealth, cputempmax_),
  };
  SensorHealth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorHealth_descriptor_,
      SensorHealth::default_instance_,
      SensorHealth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHealth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorHealth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorHealth));
  HardwareStatus_descriptor_ = file->message_type(40);
  static const int HardwareStatus_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareStatus, ipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareStatus, sensorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareStatus, cpuavgtemp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareStatus, cpuhightemp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareStatus, cpuidlepercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareStatus, ramusagepercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareStatus, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareStatus, devicetype_),
  };
  HardwareStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HardwareStatus_descriptor_,
      HardwareStatus::default_instance_,
      HardwareStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HardwareStatus));
  SensorStatus_descriptor_ = file->message_type(41);
  static const int SensorStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatus, sensor_health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatus, rx_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatus, sensor_position_),
  };
  SensorStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorStatus_descriptor_,
      SensorStatus::default_instance_,
      SensorStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorStatus));
  OrientationStatus_descriptor_ = file->message_type(42);
  static const int OrientationStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrientationStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrientationStatus, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrientationStatus, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrientationStatus, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrientationStatus, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrientationStatus, speed_),
  };
  OrientationStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrientationStatus_descriptor_,
      OrientationStatus::default_instance_,
      OrientationStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrientationStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrientationStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrientationStatus));
  ReceiverStatus_descriptor_ = file->message_type(43);
  static const int ReceiverStatus_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, idnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, rxfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, rxbandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, gainmode_),
  };
  ReceiverStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiverStatus_descriptor_,
      ReceiverStatus::default_instance_,
      ReceiverStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiverStatus));
  ReceiverStatus_GainMode_descriptor_ = ReceiverStatus_descriptor_->enum_type(0);
  FieldofView_descriptor_ = file->message_type(44);
  static const int FieldofView_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldofView, boresite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldofView, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldofView, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldofView, beamwidth_),
  };
  FieldofView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FieldofView_descriptor_,
      FieldofView::default_instance_,
      FieldofView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldofView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldofView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FieldofView));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FalconRemotingMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusReport_descriptor_, &StatusReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlacklistStatus_descriptor_, &BlacklistStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InterceptListStatus_descriptor_, &InterceptListStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExternalsHitListStatus_descriptor_, &ExternalsHitListStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalSignalListStatus_descriptor_, &GlobalSignalListStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusChannel_descriptor_, &StatusChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HealthStatus_descriptor_, &HealthStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HealthMessage_descriptor_, &HealthMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HealthTest_descriptor_, &HealthTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalEvent_descriptor_, &SignalEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPSPosition_descriptor_, &GPSPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetadataPOF_descriptor_, &MetadataPOF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KVPMetaData_descriptor_, &KVPMetaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WaypointMetaData_descriptor_, &WaypointMetaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GndpointMetaData_descriptor_, &GndpointMetaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteMessage_descriptor_, &RemoteMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPSPlatPos_descriptor_, &GPSPlatPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPsd_descriptor_, &RequestPsd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetAtten_descriptor_, &SetAtten::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchControl_descriptor_, &SearchControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrequencyTune_descriptor_, &FrequencyTune::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PredRecord_descriptor_, &PredRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PredSnap_descriptor_, &PredSnap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoControl_descriptor_, &VideoControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FhopSettings_descriptor_, &FhopSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TunerLock_descriptor_, &TunerLock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AntennaScanStatus_descriptor_, &AntennaScanStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryMidasAppStatus_descriptor_, &QueryMidasAppStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MidasAppStatus_descriptor_, &MidasAppStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RxStatus_descriptor_, &RxStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordingStatus_descriptor_, &RecordingStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalStatus_descriptor_, &SignalStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectionStatus_descriptor_, &DetectionStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchStatus_descriptor_, &SearchStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoStatus_descriptor_, &VideoStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FreqHopStatus_descriptor_, &FreqHopStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FreqHopTunerStatus_descriptor_, &FreqHopTunerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecialG_descriptor_, &SpecialG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorPosition_descriptor_, &SensorPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorHealth_descriptor_, &SensorHealth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HardwareStatus_descriptor_, &HardwareStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorStatus_descriptor_, &SensorStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrientationStatus_descriptor_, &OrientationStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiverStatus_descriptor_, &ReceiverStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldofView_descriptor_, &FieldofView::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FalconRemotingMessages_2eproto() {
  delete StatusReport::default_instance_;
  delete StatusReport_reflection_;
  delete StatusReport::_default_msgname_;
  delete BlacklistStatus::default_instance_;
  delete BlacklistStatus_reflection_;
  delete BlacklistStatus::_default_msgname_;
  delete InterceptListStatus::default_instance_;
  delete InterceptListStatus_reflection_;
  delete InterceptListStatus::_default_msgname_;
  delete ExternalsHitListStatus::default_instance_;
  delete ExternalsHitListStatus_reflection_;
  delete ExternalsHitListStatus::_default_msgname_;
  delete GlobalSignalListStatus::default_instance_;
  delete GlobalSignalListStatus_reflection_;
  delete GlobalSignalListStatus::_default_msgname_;
  delete StatusChannel::default_instance_;
  delete StatusChannel_reflection_;
  delete StatusChannel::_default_msgname_;
  delete HealthStatus::default_instance_;
  delete HealthStatus_reflection_;
  delete HealthStatus::_default_msgname_;
  delete HealthStatus::_default_pic_;
  delete HealthStatus::_default_ntp_;
  delete HealthStatus::_default_mhz_;
  delete HealthStatus::_default_pps_;
  delete HealthStatus::_default_serial_;
  delete HealthStatus::_default_rx_;
  delete HealthStatus::_default_raid_;
  delete HealthStatus::_default_disabled_;
  delete HealthMessage::default_instance_;
  delete HealthMessage_reflection_;
  delete HealthMessage::_default_msgname_;
  delete HealthMessage::_default_type_;
  delete HealthTest::default_instance_;
  delete HealthTest_reflection_;
  delete HealthTest::_default_msgname_;
  delete SignalEvent::default_instance_;
  delete SignalEvent_reflection_;
  delete SignalEvent::_default_msgname_;
  delete GPSPosition::default_instance_;
  delete GPSPosition_reflection_;
  delete GPSPosition::_default_msgname_;
  delete MetadataPOF::default_instance_;
  delete MetadataPOF_reflection_;
  delete MetadataPOF::_default_msgname_;
  delete KVPMetaData::default_instance_;
  delete KVPMetaData_reflection_;
  delete KVPMetaData::_default_msgname_;
  delete WaypointMetaData::default_instance_;
  delete WaypointMetaData_reflection_;
  delete WaypointMetaData::_default_msgname_;
  delete GndpointMetaData::default_instance_;
  delete GndpointMetaData_reflection_;
  delete GndpointMetaData::_default_msgname_;
  delete RemoteMessage::default_instance_;
  delete RemoteMessage_reflection_;
  delete RemoteMessage::_default_msgname_;
  delete GPSPlatPos::default_instance_;
  delete GPSPlatPos_reflection_;
  delete GPSPlatPos::_default_msgname_;
  delete RequestPsd::default_instance_;
  delete RequestPsd_reflection_;
  delete RequestPsd::_default_msgname_;
  delete SetAtten::default_instance_;
  delete SetAtten_reflection_;
  delete SetAtten::_default_msgname_;
  delete SearchControl::default_instance_;
  delete SearchControl_reflection_;
  delete SearchControl::_default_msgname_;
  delete FrequencyTune::default_instance_;
  delete FrequencyTune_reflection_;
  delete FrequencyTune::_default_msgname_;
  delete PredRecord::default_instance_;
  delete PredRecord_reflection_;
  delete PredRecord::_default_msgname_;
  delete PredSnap::default_instance_;
  delete PredSnap_reflection_;
  delete PredSnap::_default_msgname_;
  delete VideoControl::default_instance_;
  delete VideoControl_reflection_;
  delete VideoControl::_default_msgname_;
  delete FhopSettings::default_instance_;
  delete FhopSettings_reflection_;
  delete FhopSettings::_default_msgname_;
  delete TunerLock::default_instance_;
  delete TunerLock_reflection_;
  delete AntennaScanStatus::default_instance_;
  delete AntennaScanStatus_reflection_;
  delete AntennaScanStatus::_default_msgname_;
  delete QueryMidasAppStatus::default_instance_;
  delete QueryMidasAppStatus_reflection_;
  delete QueryMidasAppStatus::_default_msgname_;
  delete MidasAppStatus::default_instance_;
  delete MidasAppStatus_reflection_;
  delete MidasAppStatus::_default_msgname_;
  delete RxStatus::default_instance_;
  delete RxStatus_reflection_;
  delete RecordingStatus::default_instance_;
  delete RecordingStatus_reflection_;
  delete SignalStatus::default_instance_;
  delete SignalStatus_reflection_;
  delete DetectionStatus::default_instance_;
  delete DetectionStatus_reflection_;
  delete SearchStatus::default_instance_;
  delete SearchStatus_reflection_;
  delete SearchStatus::_default_msgname_;
  delete VideoStatus::default_instance_;
  delete VideoStatus_reflection_;
  delete FreqHopStatus::default_instance_;
  delete FreqHopStatus_reflection_;
  delete FreqHopTunerStatus::default_instance_;
  delete FreqHopTunerStatus_reflection_;
  delete SpecialG::default_instance_;
  delete SpecialG_reflection_;
  delete SpecialG::_default_msgname_;
  delete SensorPosition::default_instance_;
  delete SensorPosition_reflection_;
  delete SensorPosition::_default_msgname_;
  delete SensorHealth::default_instance_;
  delete SensorHealth_reflection_;
  delete SensorHealth::_default_msgname_;
  delete HardwareStatus::default_instance_;
  delete HardwareStatus_reflection_;
  delete HardwareStatus::_default_msgname_;
  delete SensorStatus::default_instance_;
  delete SensorStatus_reflection_;
  delete SensorStatus::_default_msgname_;
  delete OrientationStatus::default_instance_;
  delete OrientationStatus_reflection_;
  delete OrientationStatus::_default_msgname_;
  delete ReceiverStatus::default_instance_;
  delete ReceiverStatus_reflection_;
  delete ReceiverStatus::_default_msgname_;
  delete FieldofView::default_instance_;
  delete FieldofView_reflection_;
}

void protobuf_AddDesc_FalconRemotingMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::falcon_common_msg::protobuf_AddDesc_FalconCommonMessages_2eproto();
  ::falcon_trigger_msg::protobuf_AddDesc_FalconTriggerMessages_2eproto();
  ::falcon_externals_msg::protobuf_AddDesc_FalconExternalsMessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034FalconRemotingMessages.proto\022\023falcon_r"
    "emoting_msg\032\032FalconCommonMessages.proto\032"
    "\033FalconTriggerMessages.proto\032\035FalconExte"
    "rnalsMessages.proto\"\271\001\n\014StatusReport\022\036\n\007"
    "msgName\030\001 \001(\t:\rSTATUS_REPORT\022\017\n\007channel\030"
    "\002 \001(\005\0229\n\005level\030\003 \001(\0162*.falcon_remoting_m"
    "sg.StatusReport.LogLevel\022\017\n\007message\030\004 \001("
    "\t\",\n\010LogLevel\022\010\n\004INFO\020\000\022\013\n\007WARNING\020\001\022\t\n\005"
    "ERROR\020\002\"h\n\017BlacklistStatus\022!\n\007msgName\030\001 "
    "\001(\t:\020BLACKLIST_STATUS\0222\n\007entries\030\002 \003(\0132!"
    ".falcon_common_msg.BlacklistEntry\"m\n\023Int"
    "erceptListStatus\022&\n\007msgName\030\001 \001(\t:\025INTER"
    "CEPT_LIST_STATUS\022.\n\007entries\030\002 \003(\0132\035.falc"
    "on_trigger_msg.Intercept\"y\n\026ExternalsHit"
    "ListStatus\022*\n\007msgName\030\001 \001(\t:\031EXTERNALS_H"
    "IT_LIST_STATUS\0223\n\007entries\030\002 \003(\0132\".falcon"
    "_externals_msg.ExternalsHit\"U\n\026GlobalSig"
    "nalListStatus\022*\n\007msgName\030\001 \001(\t:\031GLOBAL_S"
    "IGNAL_LIST_STATUS\022\017\n\007feed_id\030\002 \001(\005\"\215\002\n\rS"
    "tatusChannel\022\037\n\007msgName\030\001 \001(\t:\016STATUS_CH"
    "ANNEL\022\r\n\005appID\030\002 \001(\005\0229\n\006status\030\003 \001(\0162).f"
    "alcon_remoting_msg.StatusChannel.Status\022"
    "\016\n\006scrypt\030\004 \001(\t\"\200\001\n\006Status\022\025\n\010DISABLED\020\375"
    "\377\377\377\377\377\377\377\377\001\022\021\n\004OPEN\020\376\377\377\377\377\377\377\377\377\001\022\026\n\tLAUNCHIN"
    "G\020\377\377\377\377\377\377\377\377\377\001\022\013\n\007CRASHED\020\000\022\010\n\004IDLE\020\001\022\r\n\tS"
    "EARCHING\020\002\022\016\n\nPROCESSING\020\003\"\362\001\n\014HealthSta"
    "tus\022\036\n\007msgName\030\001 \001(\t:\rHEALTH_STATUS\022\017\n\007c"
    "hannel\030\002 \001(\005\022\023\n\003pic\030\003 \001(\t:\006NO_PIC\022\016\n\003ntp"
    "\030\004 \001(\t:\001F\022\016\n\003mhz\030\005 \001(\t:\001F\022\016\n\003pps\030\006 \001(\t:\001"
    "F\022\021\n\006serial\030\007 \001(\t:\001F\022\r\n\002rx\030\010 \001(\t:\001F\022\017\n\004r"
    "aid\030\t \001(\t:\001F\022\031\n\010disabled\030\n \001(\t:\007UNKNOWN\022"
    "\014\n\004ssid\030\013 \001(\005\022\020\n\010uniqrxid\030\014 \001(\t\"\361\001\n\rHeal"
    "thMessage\022\037\n\007msgName\030\001 \001(\t:\016HEALTH_MESSA"
    "GE\022\023\n\013description\030\002 \001(\t\0225\n\004code\030\003 \001(\0162\'."
    "falcon_remoting_msg.HealthMessage.Code\022\016"
    "\n\006status\030\004 \001(\t\022\030\n\004type\030\005 \001(\t:\nFunctional"
    "\022\021\n\ttimestamp\030\006 \001(\t\"6\n\004Code\022\006\n\002OK\020\000\022\013\n\007W"
    "ARNING\020\001\022\014\n\010CRITICAL\020\002\022\013\n\007UNKNOWN\020\003\"\251\001\n\n"
    "HealthTest\022\034\n\007msgName\030\001 \001(\t:\013HEALTH_TEST"
    "\0226\n\006status\030\002 \001(\0162&.falcon_remoting_msg.H"
    "ealthTest.Status\"E\n\006Status\022\024\n\007FAILURE\020\377\377"
    "\377\377\377\377\377\377\377\001\022\013\n\007RUNNING\020\000\022\r\n\tCOMPLETED\020\001\022\t\n\005"
    "QUERY\020\002\"\266\004\n\013SignalEvent\022\035\n\007msgName\030\001 \001(\t"
    ":\014SIGNAL_EVENT\022\017\n\007channel\030\002 \001(\005\0228\n\tevent"
    "Type\030\003 \001(\0162%.falcon_remoting_msg.SignalE"
    "vent.Type\022\017\n\007eventID\030\004 \001(\t\022\021\n\ttimestamp\030"
    "\005 \001(\t\022\016\n\006soiNum\030\006 \001(\t\022\r\n\005rfMHz\030\007 \001(\002\022\021\n\t"
    "subcarMHz\030\010 \001(\002\022\020\n\010excurKHz\030\t \001(\002\022\r\n\005app"
    "ID\030\n \001(\005\022\016\n\006antNum\030\013 \001(\005\022\020\n\005antAz\030\014 \001(\002:"
    "\0010\022\020\n\005antEl\030\r \001(\002:\0010\022\020\n\010globalID\030\016 \001(\t\022\016"
    "\n\006scrypt\030\017 \001(\t\022\022\n\nexportPort\030\020 \001(\005\022\r\n\005el"
    "tex\030\021 \001(\t\022\r\n\005bwMHz\030\022 \001(\002\022\024\n\nsensorName\030\023"
    " \001(\t:\000\0225\n\texternals\030\024 \001(\0132\".falcon_exter"
    "nals_msg.ExternalsHit\0225\n\tinternals\030\025 \001(\013"
    "2\".falcon_externals_msg.InternalsHit\":\n\004"
    "Type\022\n\n\006SIGDET\020\000\022\t\n\005SIGUP\020\001\022\013\n\007SIGDOWN\020\002"
    "\022\016\n\nSIGTIMEOUT\020\003\"\276\003\n\013GPSPosition\022\035\n\007msgN"
    "ame\030\001 \001(\t:\014GPS_POSITION\022\017\n\007channel\030\002 \001(\005"
    "\022\017\n\007eventID\030\003 \001(\t\022\020\n\010latitude\030\004 \001(\002\022\021\n\tl"
    "ongitude\030\005 \001(\002\022\020\n\010altitude\030\006 \001(\002\022\022\n\nwpLa"
    "titude\030\007 \001(\002\022\023\n\013wpLongitude\030\010 \001(\002\022\020\n\010vel"
    "ocity\030\t \001(\002\022\017\n\007bearing\030\n \001(\002\022\021\n\ttimestam"
    "p\030\013 \001(\t\022\016\n\006seqnum\030\014 \001(\002\022\013\n\003soi\030\r \001(\t\022\033\n\014"
    "isPrediction\030\016 \001(\010:\005false\022\020\n\005major\030\017 \001(\002"
    ":\0010\022\020\n\005minor\030\020 \001(\002:\0010\022\021\n\006vector\030\021 \001(\002:\0010"
    "\022\016\n\006antNum\030\022 \001(\005\022\020\n\005antAz\030\023 \001(\002:\0010\022\020\n\005an"
    "tEl\030\024 \001(\002:\0010\022\020\n\010globalID\030\025 \001(\t\022\r\n\005appID\030"
    "\026 \001(\005\022\022\n\nsensorName\030\027 \001(\t\"\333\001\n\013MetadataPO"
    "F\022\035\n\007msgName\030\001 \001(\t:\014METADATA_POF\022\017\n\007chan"
    "nel\030\002 \001(\005\022\017\n\007eventID\030\003 \001(\t\022\013\n\003pof\030\004 \001(\005\022"
    "\014\n\004mode\030\005 \001(\005\022\016\n\006seqnum\030\006 \001(\005\022\013\n\003soi\030\007 \001"
    "(\t\022\016\n\006antNum\030\010 \001(\005\022\020\n\005antAz\030\t \001(\002:\0010\022\020\n\005"
    "antEl\030\n \001(\002:\0010\022\020\n\010globalID\030\013 \001(\t\022\r\n\005appI"
    "D\030\014 \001(\005\"\232\001\n\013KVPMetaData\022\035\n\007msgName\030\001 \001(\t"
    ":\014KVP_METADATA\022\017\n\007eventID\030\002 \001(\t\022\013\n\003key\030\003"
    " \003(\t\022\r\n\005value\030\004 \003(\t\022\016\n\006update\030\005 \001(\002\022\016\n\006s"
    "eqnum\030\006 \001(\005\022\020\n\010globalID\030\007 \001(\t\022\r\n\005appID\030\010"
    " \001(\005\"\303\001\n\020WaypointMetaData\022\"\n\007msgName\030\001 \001"
    "(\t:\021WAYPOINT_METADATA\022\017\n\007eventID\030\002 \001(\t\022\022"
    "\n\nwaypointID\030\003 \001(\002\022\013\n\003lat\030\004 \001(\002\022\013\n\003lon\030\005"
    " \001(\002\022\013\n\003alt\030\006 \001(\002\022\016\n\006update\030\007 \001(\002\022\016\n\006seq"
    "num\030\010 \001(\005\022\020\n\010globalID\030\t \001(\t\022\r\n\005appID\030\n \001"
    "(\005\"\300\001\n\020GndpointMetaData\022\"\n\007msgName\030\001 \001(\t"
    ":\021GNDPOINT_METADATA\022\017\n\007eventID\030\002 \001(\t\022\017\n\007"
    "pointID\030\003 \001(\t\022\013\n\003lat\030\004 \001(\002\022\013\n\003lon\030\005 \001(\002\022"
    "\013\n\003alt\030\006 \001(\002\022\016\n\006update\030\007 \001(\002\022\016\n\006seqnum\030\010"
    " \001(\005\022\020\n\010globalID\030\t \001(\t\022\r\n\005appID\030\n \001(\005\"w\n"
    "\rRemoteMessage\022\037\n\007msgName\030\001 \001(\t:\016REMOTE_"
    "MESSAGE\022\025\n\007msgPass\030\002 \001(\010:\004true\022\016\n\006format"
    "\030\003 \001(\t\022\017\n\007content\030\004 \003(\t\022\r\n\005msgID\030\005 \001(\001\"i"
    "\n\nGPSPlatPos\022%\n\007msgName\030\001 \001(\t:\024GPS_CURRE"
    "NT_POSITION\022\020\n\010latitude\030\002 \001(\002\022\021\n\tlongitu"
    "de\030\003 \001(\002\022\017\n\007heading\030\004 \001(\002\"a\n\nRequestPsd\022"
    "\034\n\007msgName\030\001 \001(\t:\013REQUEST_PSD\022\r\n\005resID\030\002"
    " \001(\t\022\022\n\narchiveNum\030\003 \001(\005\022\022\n\nreturnChan\030\004"
    " \001(\005\"\236\001\n\010SetAtten\022\032\n\007msgName\030\001 \001(\t:\tSET_"
    "ATTEN\022\r\n\005appID\030\002 \001(\005\022:\n\tautoAtten\030\003 \001(\0162"
    "\'.falcon_remoting_msg.SetAtten.AutoAtten"
    "\022\r\n\005atten\030\004 \001(\005\"\034\n\tAutoAtten\022\007\n\003OFF\020\001\022\006\n"
    "\002ON\020\002\"\275\001\n\rSearchControl\022\037\n\007msgName\030\001 \001(\t"
    ":\016SEARCH_CONTROL\022\r\n\005appID\030\002 \001(\005\0229\n\006actio"
    "n\030\003 \001(\0162).falcon_remoting_msg.SearchCont"
    "rol.Action\"A\n\006Action\022\t\n\005START\020\001\022\t\n\005PAUSE"
    "\020\002\022\017\n\013STEPFORWARD\020\003\022\020\n\014STEPBACKWARD\020\004\"M\n"
    "\rFrequencyTune\022\037\n\007msgName\030\001 \001(\t:\016FREQUEN"
    "CY_TUNE\022\r\n\005appID\030\002 \001(\005\022\014\n\004freq\030\003 \001(\002\"\224\001\n"
    "\nPredRecord\022\034\n\007msgName\030\001 \001(\t:\013PRED_RECOR"
    "D\022\r\n\005appID\030\002 \001(\005\022:\n\npredRecord\030\003 \001(\0162&.f"
    "alcon_remoting_msg.PredRecord.Action\"\035\n\006"
    "Action\022\t\n\005START\020\001\022\010\n\004STOP\020\002\"[\n\010PredSnap\022"
    "\032\n\007msgName\030\001 \001(\t:\tPRED_SNAP\022\r\n\005appID\030\002 \001"
    "(\005\022\022\n\nsnapLength\030\003 \001(\005\022\020\n\010takeSnap\030\004 \001(\010"
    "\"\213\003\n\014VideoControl\022\036\n\007msgName\030\001 \001(\t:\rVIDE"
    "O_CONTROL\022\r\n\005appID\030\002 \001(\005\022=\n\013videoRecord\030"
    "\003 \001(\0162(.falcon_remoting_msg.VideoControl"
    ".Record\0229\n\tvideoSync\030\004 \001(\0162&.falcon_remo"
    "ting_msg.VideoControl.Sync\022\030\n\020videoInteg"
    "ration\030\005 \001(\005\022;\n\013jpegCommand\030\006 \001(\0162&.falc"
    "on_remoting_msg.VideoControl.Mode\022\020\n\010jpe"
    "gRate\030\007 \001(\005\"\035\n\006Record\022\t\n\005START\020\001\022\010\n\004STOP"
    "\020\002\"\027\n\004Sync\022\007\n\003OFF\020\001\022\006\n\002ON\020\002\"1\n\004Mode\022\013\n\007D"
    "ISABLE\020\001\022\016\n\nCONTINUOUS\020\002\022\014\n\010SNAPSHOT\020\003\"\225"
    "\002\n\014FhopSettings\022\036\n\007msgName\030\001 \001(\t:\rFHOP_S"
    "ETTINGS\022\r\n\005appID\030\002 \001(\005\022B\n\013freqHopMode\030\003 "
    "\001(\0162-.falcon_remoting_msg.FhopSettings.F"
    "reqHopMode\0221\n\ttunerLock\030\004 \003(\0132\036.falcon_r"
    "emoting_msg.TunerLock\022\021\n\ttunerFreq\030\005 \003(\002"
    "\"L\n\013FreqHopMode\022\r\n\tAUTOMATIC\020\001\022\017\n\013USER_C"
    "LICKS\020\002\022\022\n\016MANUALLY_ENTER\020\003\022\t\n\005RESET\020\004\"("
    "\n\tTunerLock\022\r\n\005tuner\030\001 \001(\005\022\014\n\004lock\030\002 \001(\010"
    "\"\201\003\n\021AntennaScanStatus\022$\n\007msgName\030\001 \001(\t:"
    "\023ANTENNA_SCAN_STATUS\022\r\n\005appID\030\002 \001(\005\022N\n\ns"
    "canStatus\030\003 \001(\01621.falcon_remoting_msg.An"
    "tennaScanStatus.ScanStatus:\007STANDBY\022L\n\013t"
    "rackStatus\030\004 \001(\01622.falcon_remoting_msg.A"
    "ntennaScanStatus.TrackStatus:\003OFF\022\024\n\014min"
    "ScanAngle\030\005 \001(\002\022\024\n\014maxScanAngle\030\006 \001(\002\"M\n"
    "\nScanStatus\022\013\n\007STANDBY\020\000\022\014\n\010SCANNING\020\001\022\n"
    "\n\006ENERGY\020\002\022\014\n\010TRACKING\020\003\022\n\n\006MOVING\020\004\"\036\n\013"
    "TrackStatus\022\007\n\003OFF\020\000\022\006\n\002ON\020\001\"M\n\023QueryMid"
    "asAppStatus\022\'\n\007msgName\030\001 \001(\t:\026QUERY_MIDA"
    "S_APP_STATUS\022\r\n\005appID\030\002 \001(\005\"\225\004\n\016MidasApp"
    "Status\022!\n\007msgName\030\001 \001(\t:\020MIDAS_APP_STATU"
    "S\022\r\n\005appID\030\002 \001(\005\022-\n\006rxStat\030\003 \001(\0132\035.falco"
    "n_remoting_msg.RxStatus\0225\n\007recStat\030\004 \001(\013"
    "2$.falcon_remoting_msg.RecordingStatus\0222"
    "\n\007sigStat\030\005 \001(\0132!.falcon_remoting_msg.Si"
    "gnalStatus\0221\n\007vidStat\030\006 \001(\0132 .falcon_rem"
    "oting_msg.VideoStatus\0222\n\006fhStat\030\007 \001(\0132\"."
    "falcon_remoting_msg.FreqHopStatus\022E\n\nsea"
    "rchStat\030\010 \001(\01621.falcon_remoting_msg.Mida"
    "sAppStatus.SearchSetting\022/\n\010specialG\030\t \001"
    "(\0132\035.falcon_remoting_msg.SpecialG\022\021\n\tthr"
    "eshold\030\n \001(\002\022\031\n\021skyScraperProduct\030\013 \001(\010\""
    "*\n\rSearchSetting\022\r\n\tSEARCHING\020\001\022\n\n\006PAUSE"
    "D\020\002\"\205\001\n\010RxStatus\022\014\n\004freq\030\001 \001(\002\022\r\n\005atten\030"
    "\002 \001(\005\0227\n\tautoAtten\030\003 \001(\0162$.falcon_remoti"
    "ng_msg.RxStatus.Status\"#\n\006Status\022\r\n\tAUTO"
    "MATIC\020\002\022\n\n\006MANUAL\020\001\"\177\n\017RecordingStatus\022@"
    "\n\013predRecStat\030\001 \001(\0162+.falcon_remoting_ms"
    "g.RecordingStatus.Status\022\017\n\007diskUse\030\002 \001("
    "\002\"\031\n\006Status\022\007\n\003OFF\020\000\022\006\n\002ON\020\001\"\267\001\n\014SignalS"
    "tatus\0225\n\007detStat\030\001 \003(\0132$.falcon_remoting"
    "_msg.DetectionStatus\022\013\n\003ber\030\002 \001(\002\022\025\n\rcen"
    "terFreqEst\030\003 \001(\002\022\020\n\010excurEst\030\004 \001(\002\022\023\n\013pa"
    "cketCount\030\005 \001(\005\022\022\n\ntimeWindow\030\006 \001(\005\022\021\n\tt"
    "imeStamp\030\007 \001(\003\"\230\001\n\017DetectionStatus\022\017\n\007si"
    "gName\030\001 \001(\t\022\020\n\010detState\030\002 \001(\t\0229\n\005color\030\003"
    " \001(\0162*.falcon_remoting_msg.DetectionStat"
    "us.Color\"\'\n\005Color\022\007\n\003RED\020\001\022\n\n\006YELLOW\020\002\022\t"
    "\n\005GREEN\020\003\"\256\001\n\014SearchStatus\022\036\n\007msgName\030\001 "
    "\001(\t:\rSEARCH_STATUS\022\r\n\005appID\030\002 \001(\005\022\016\n\006sta"
    "tus\030\003 \001(\t\0226\n\005color\030\004 \001(\0162\'.falcon_remoti"
    "ng_msg.SearchStatus.Color\"\'\n\005Color\022\007\n\003RE"
    "D\020\001\022\n\n\006YELLOW\020\002\022\t\n\005GREEN\020\003\"\361\002\n\013VideoStat"
    "us\022>\n\nvidRecStat\030\001 \001(\0162*.falcon_remoting"
    "_msg.VideoStatus.RecStatus\022<\n\007vidSync\030\002 "
    "\001(\0162+.falcon_remoting_msg.VideoStatus.Sy"
    "ncStatus\022\016\n\006vidInt\030\003 \001(\005\022;\n\010jpegMode\030\004 \001"
    "(\0162).falcon_remoting_msg.VideoStatus.Jpe"
    "gMode\022\020\n\010jpegRate\030\005 \001(\005\"$\n\tRecStatus\022\013\n\007"
    "VID_OFF\020\000\022\n\n\006VID_ON\020\001\"\'\n\nSyncStatus\022\014\n\010S"
    "YNC_OFF\020\001\022\013\n\007SYNC_ON\020\002\"6\n\010JpegMode\022\014\n\010JP"
    "EG_OFF\020\001\022\013\n\007JPEG_ON\020\002\022\017\n\013JPEG_SINGLE\020\003\"\266"
    "\001\n\rFreqHopStatus\0225\n\004mode\030\001 \001(\0162\'.falcon_"
    "remoting_msg.FreqHopStatus.Mode\022:\n\tfhopT"
    "uner\030\002 \003(\0132\'.falcon_remoting_msg.FreqHop"
    "TunerStatus\"2\n\004Mode\022\r\n\tAUTOMATIC\020\001\022\017\n\013US"
    "ER_CLICKS\020\002\022\n\n\006MANUAL\020\003\"R\n\022FreqHopTunerS"
    "tatus\022\r\n\005tuner\030\001 \001(\005\022\014\n\004freq\030\002 \001(\001\022\017\n\007nu"
    "mHits\030\003 \001(\005\022\016\n\006locked\030\004 \001(\010\"u\n\010SpecialG\022"
    "\"\n\007msgName\030\001 \001(\t:\021PROCESS_SPECIAL_G\022\013\n\003l"
    "at\030\002 \001(\001\022\013\n\003lon\030\003 \001(\001\022\013\n\003alt\030\004 \001(\001\022\016\n\006es"
    "tAlt\030\005 \001(\001\022\016\n\006enable\030\006 \001(\010\"\213\002\n\016SensorPos"
    "ition\022 \n\007msgName\030\001 \001(\t:\017SENSOR_POSITION\022"
    "\013\n\003lat\030\002 \001(\002\022\013\n\003lon\030\003 \001(\002\022\013\n\003alt\030\004 \001(\002\022;"
    "\n\013orientation\030\005 \001(\0132&.falcon_remoting_ms"
    "g.OrientationStatus\022\021\n\ttimestamp\030\006 \001(\003\022\022"
    "\n\nsensorName\030\007 \001(\t\022\016\n\006siteId\030\010 \001(\t\022\r\n\005si"
    "gAd\030\t \001(\t\022-\n\003fov\030\n \003(\0132 .falcon_remoting"
    "_msg.FieldofView\"\232\002\n\014SensorHealth\022\036\n\007msg"
    "Name\030\001 \001(\t:\rSENSOR_HEALTH\022\022\n\nsensorName\030"
    "\002 \001(\t\022\020\n\010pollTime\030\003 \001(\005\022\024\n\014averageCount\030"
    "\004 \001(\005\022\020\n\010cpuUsage\030\005 \001(\002\022\022\n\ncpuAverage\030\006 "
    "\001(\002\022\020\n\010ramUsage\030\007 \001(\002\022\022\n\nramAverage\030\010 \001("
    "\002\022\021\n\tdiskUsage\030\t \001(\002\022\023\n\013diskAverage\030\n \001("
    "\002\022\022\n\ncpuTempAvg\030\013 \001(\002\022\022\n\ncpuTempMin\030\014 \001("
    "\002\022\022\n\ncpuTempMax\030\r \001(\002\"\327\001\n\016HardwareStatus"
    "\022 \n\007msgName\030\001 \001(\t:\017HARDWARE_STATUS\022\021\n\tIP"
    "Address\030\002 \001(\t\022\022\n\nsensorName\030\003 \001(\t\022\022\n\ncpu"
    "AvgTemp\030\004 \001(\002\022\023\n\013cpuHighTemp\030\005 \003(\002\022\026\n\016cp"
    "uIdlePercent\030\006 \001(\002\022\027\n\017ramUsagePercent\030\007 "
    "\001(\002\022\016\n\006online\030\010 \001(\010\022\022\n\ndeviceType\030\t \001(\t\""
    "\336\001\n\014SensorStatus\022\036\n\007msgName\030\001 \001(\t:\rSENSO"
    "R_STATUS\0228\n\rsensor_health\030\002 \001(\0132!.falcon"
    "_remoting_msg.SensorHealth\0226\n\trx_status\030"
    "\003 \003(\0132#.falcon_remoting_msg.ReceiverStat"
    "us\022<\n\017sensor_position\030\004 \001(\0132#.falcon_rem"
    "oting_msg.SensorPosition\"\202\001\n\021Orientation"
    "Status\022#\n\007msgName\030\001 \001(\t:\022ORIENTATION_STA"
    "TUS\022\013\n\003yaw\030\002 \001(\002\022\014\n\004roll\030\003 \001(\002\022\r\n\005pitch\030"
    "\004 \001(\002\022\017\n\007heading\030\005 \001(\002\022\r\n\005speed\030\006 \001(\002\"\361\001"
    "\n\016ReceiverStatus\022 \n\007msgName\030\001 \001(\t:\017RECEI"
    "VER_STATUS\022\r\n\005idNum\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022"
    "\014\n\004type\030\004 \001(\t\022\016\n\006rxFreq\030\005 \001(\002\022\023\n\013rxBandw"
    "idth\030\006 \001(\002\022\014\n\004gain\030\007 \001(\005\022>\n\010gainMode\030\010 \001"
    "(\0162,.falcon_remoting_msg.ReceiverStatus."
    "GainMode\"\037\n\010GainMode\022\007\n\003AGC\020\000\022\n\n\006MANUAL\020"
    "\001\"V\n\013FieldofView\022\020\n\010boreSite\030\001 \001(\002\022\017\n\007az"
    "imuth\030\002 \001(\002\022\021\n\televation\030\003 \001(\002\022\021\n\tbeamWi"
    "dth\030\004 \001(\002B\025\n\023fv.protos.kepsvisor", 9232);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FalconRemotingMessages.proto", &protobuf_RegisterTypes);
  StatusReport::_default_msgname_ =
      new ::std::string("STATUS_REPORT", 13);
  StatusReport::default_instance_ = new StatusReport();
  BlacklistStatus::_default_msgname_ =
      new ::std::string("BLACKLIST_STATUS", 16);
  BlacklistStatus::default_instance_ = new BlacklistStatus();
  InterceptListStatus::_default_msgname_ =
      new ::std::string("INTERCEPT_LIST_STATUS", 21);
  InterceptListStatus::default_instance_ = new InterceptListStatus();
  ExternalsHitListStatus::_default_msgname_ =
      new ::std::string("EXTERNALS_HIT_LIST_STATUS", 25);
  ExternalsHitListStatus::default_instance_ = new ExternalsHitListStatus();
  GlobalSignalListStatus::_default_msgname_ =
      new ::std::string("GLOBAL_SIGNAL_LIST_STATUS", 25);
  GlobalSignalListStatus::default_instance_ = new GlobalSignalListStatus();
  StatusChannel::_default_msgname_ =
      new ::std::string("STATUS_CHANNEL", 14);
  StatusChannel::default_instance_ = new StatusChannel();
  HealthStatus::_default_msgname_ =
      new ::std::string("HEALTH_STATUS", 13);
  HealthStatus::_default_pic_ =
      new ::std::string("NO_PIC", 6);
  HealthStatus::_default_ntp_ =
      new ::std::string("F", 1);
  HealthStatus::_default_mhz_ =
      new ::std::string("F", 1);
  HealthStatus::_default_pps_ =
      new ::std::string("F", 1);
  HealthStatus::_default_serial_ =
      new ::std::string("F", 1);
  HealthStatus::_default_rx_ =
      new ::std::string("F", 1);
  HealthStatus::_default_raid_ =
      new ::std::string("F", 1);
  HealthStatus::_default_disabled_ =
      new ::std::string("UNKNOWN", 7);
  HealthStatus::default_instance_ = new HealthStatus();
  HealthMessage::_default_msgname_ =
      new ::std::string("HEALTH_MESSAGE", 14);
  HealthMessage::_default_type_ =
      new ::std::string("Functional", 10);
  HealthMessage::default_instance_ = new HealthMessage();
  HealthTest::_default_msgname_ =
      new ::std::string("HEALTH_TEST", 11);
  HealthTest::default_instance_ = new HealthTest();
  SignalEvent::_default_msgname_ =
      new ::std::string("SIGNAL_EVENT", 12);
  SignalEvent::default_instance_ = new SignalEvent();
  GPSPosition::_default_msgname_ =
      new ::std::string("GPS_POSITION", 12);
  GPSPosition::default_instance_ = new GPSPosition();
  MetadataPOF::_default_msgname_ =
      new ::std::string("METADATA_POF", 12);
  MetadataPOF::default_instance_ = new MetadataPOF();
  KVPMetaData::_default_msgname_ =
      new ::std::string("KVP_METADATA", 12);
  KVPMetaData::default_instance_ = new KVPMetaData();
  WaypointMetaData::_default_msgname_ =
      new ::std::string("WAYPOINT_METADATA", 17);
  WaypointMetaData::default_instance_ = new WaypointMetaData();
  GndpointMetaData::_default_msgname_ =
      new ::std::string("GNDPOINT_METADATA", 17);
  GndpointMetaData::default_instance_ = new GndpointMetaData();
  RemoteMessage::_default_msgname_ =
      new ::std::string("REMOTE_MESSAGE", 14);
  RemoteMessage::default_instance_ = new RemoteMessage();
  GPSPlatPos::_default_msgname_ =
      new ::std::string("GPS_CURRENT_POSITION", 20);
  GPSPlatPos::default_instance_ = new GPSPlatPos();
  RequestPsd::_default_msgname_ =
      new ::std::string("REQUEST_PSD", 11);
  RequestPsd::default_instance_ = new RequestPsd();
  SetAtten::_default_msgname_ =
      new ::std::string("SET_ATTEN", 9);
  SetAtten::default_instance_ = new SetAtten();
  SearchControl::_default_msgname_ =
      new ::std::string("SEARCH_CONTROL", 14);
  SearchControl::default_instance_ = new SearchControl();
  FrequencyTune::_default_msgname_ =
      new ::std::string("FREQUENCY_TUNE", 14);
  FrequencyTune::default_instance_ = new FrequencyTune();
  PredRecord::_default_msgname_ =
      new ::std::string("PRED_RECORD", 11);
  PredRecord::default_instance_ = new PredRecord();
  PredSnap::_default_msgname_ =
      new ::std::string("PRED_SNAP", 9);
  PredSnap::default_instance_ = new PredSnap();
  VideoControl::_default_msgname_ =
      new ::std::string("VIDEO_CONTROL", 13);
  VideoControl::default_instance_ = new VideoControl();
  FhopSettings::_default_msgname_ =
      new ::std::string("FHOP_SETTINGS", 13);
  FhopSettings::default_instance_ = new FhopSettings();
  TunerLock::default_instance_ = new TunerLock();
  AntennaScanStatus::_default_msgname_ =
      new ::std::string("ANTENNA_SCAN_STATUS", 19);
  AntennaScanStatus::default_instance_ = new AntennaScanStatus();
  QueryMidasAppStatus::_default_msgname_ =
      new ::std::string("QUERY_MIDAS_APP_STATUS", 22);
  QueryMidasAppStatus::default_instance_ = new QueryMidasAppStatus();
  MidasAppStatus::_default_msgname_ =
      new ::std::string("MIDAS_APP_STATUS", 16);
  MidasAppStatus::default_instance_ = new MidasAppStatus();
  RxStatus::default_instance_ = new RxStatus();
  RecordingStatus::default_instance_ = new RecordingStatus();
  SignalStatus::default_instance_ = new SignalStatus();
  DetectionStatus::default_instance_ = new DetectionStatus();
  SearchStatus::_default_msgname_ =
      new ::std::string("SEARCH_STATUS", 13);
  SearchStatus::default_instance_ = new SearchStatus();
  VideoStatus::default_instance_ = new VideoStatus();
  FreqHopStatus::default_instance_ = new FreqHopStatus();
  FreqHopTunerStatus::default_instance_ = new FreqHopTunerStatus();
  SpecialG::_default_msgname_ =
      new ::std::string("PROCESS_SPECIAL_G", 17);
  SpecialG::default_instance_ = new SpecialG();
  SensorPosition::_default_msgname_ =
      new ::std::string("SENSOR_POSITION", 15);
  SensorPosition::default_instance_ = new SensorPosition();
  SensorHealth::_default_msgname_ =
      new ::std::string("SENSOR_HEALTH", 13);
  SensorHealth::default_instance_ = new SensorHealth();
  HardwareStatus::_default_msgname_ =
      new ::std::string("HARDWARE_STATUS", 15);
  HardwareStatus::default_instance_ = new HardwareStatus();
  SensorStatus::_default_msgname_ =
      new ::std::string("SENSOR_STATUS", 13);
  SensorStatus::default_instance_ = new SensorStatus();
  OrientationStatus::_default_msgname_ =
      new ::std::string("ORIENTATION_STATUS", 18);
  OrientationStatus::default_instance_ = new OrientationStatus();
  ReceiverStatus::_default_msgname_ =
      new ::std::string("RECEIVER_STATUS", 15);
  ReceiverStatus::default_instance_ = new ReceiverStatus();
  FieldofView::default_instance_ = new FieldofView();
  StatusReport::default_instance_->InitAsDefaultInstance();
  BlacklistStatus::default_instance_->InitAsDefaultInstance();
  InterceptListStatus::default_instance_->InitAsDefaultInstance();
  ExternalsHitListStatus::default_instance_->InitAsDefaultInstance();
  GlobalSignalListStatus::default_instance_->InitAsDefaultInstance();
  StatusChannel::default_instance_->InitAsDefaultInstance();
  HealthStatus::default_instance_->InitAsDefaultInstance();
  HealthMessage::default_instance_->InitAsDefaultInstance();
  HealthTest::default_instance_->InitAsDefaultInstance();
  SignalEvent::default_instance_->InitAsDefaultInstance();
  GPSPosition::default_instance_->InitAsDefaultInstance();
  MetadataPOF::default_instance_->InitAsDefaultInstance();
  KVPMetaData::default_instance_->InitAsDefaultInstance();
  WaypointMetaData::default_instance_->InitAsDefaultInstance();
  GndpointMetaData::default_instance_->InitAsDefaultInstance();
  RemoteMessage::default_instance_->InitAsDefaultInstance();
  GPSPlatPos::default_instance_->InitAsDefaultInstance();
  RequestPsd::default_instance_->InitAsDefaultInstance();
  SetAtten::default_instance_->InitAsDefaultInstance();
  SearchControl::default_instance_->InitAsDefaultInstance();
  FrequencyTune::default_instance_->InitAsDefaultInstance();
  PredRecord::default_instance_->InitAsDefaultInstance();
  PredSnap::default_instance_->InitAsDefaultInstance();
  VideoControl::default_instance_->InitAsDefaultInstance();
  FhopSettings::default_instance_->InitAsDefaultInstance();
  TunerLock::default_instance_->InitAsDefaultInstance();
  AntennaScanStatus::default_instance_->InitAsDefaultInstance();
  QueryMidasAppStatus::default_instance_->InitAsDefaultInstance();
  MidasAppStatus::default_instance_->InitAsDefaultInstance();
  RxStatus::default_instance_->InitAsDefaultInstance();
  RecordingStatus::default_instance_->InitAsDefaultInstance();
  SignalStatus::default_instance_->InitAsDefaultInstance();
  DetectionStatus::default_instance_->InitAsDefaultInstance();
  SearchStatus::default_instance_->InitAsDefaultInstance();
  VideoStatus::default_instance_->InitAsDefaultInstance();
  FreqHopStatus::default_instance_->InitAsDefaultInstance();
  FreqHopTunerStatus::default_instance_->InitAsDefaultInstance();
  SpecialG::default_instance_->InitAsDefaultInstance();
  SensorPosition::default_instance_->InitAsDefaultInstance();
  SensorHealth::default_instance_->InitAsDefaultInstance();
  HardwareStatus::default_instance_->InitAsDefaultInstance();
  SensorStatus::default_instance_->InitAsDefaultInstance();
  OrientationStatus::default_instance_->InitAsDefaultInstance();
  ReceiverStatus::default_instance_->InitAsDefaultInstance();
  FieldofView::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FalconRemotingMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FalconRemotingMessages_2eproto {
  StaticDescriptorInitializer_FalconRemotingMessages_2eproto() {
    protobuf_AddDesc_FalconRemotingMessages_2eproto();
  }
} static_descriptor_initializer_FalconRemotingMessages_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* StatusReport_LogLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusReport_LogLevel_descriptor_;
}
bool StatusReport_LogLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StatusReport_LogLevel StatusReport::INFO;
const StatusReport_LogLevel StatusReport::WARNING;
const StatusReport_LogLevel StatusReport::ERROR;
const StatusReport_LogLevel StatusReport::LogLevel_MIN;
const StatusReport_LogLevel StatusReport::LogLevel_MAX;
const int StatusReport::LogLevel_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* StatusReport::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int StatusReport::kMsgNameFieldNumber;
const int StatusReport::kChannelFieldNumber;
const int StatusReport::kLevelFieldNumber;
const int StatusReport::kMessageFieldNumber;
#endif  // !_MSC_VER

StatusReport::StatusReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusReport::InitAsDefaultInstance() {
}

StatusReport::StatusReport(const StatusReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusReport::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  level_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusReport::~StatusReport() {
  SharedDtor();
}

void StatusReport::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void StatusReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusReport_descriptor_;
}

const StatusReport& StatusReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

StatusReport* StatusReport::default_instance_ = NULL;

StatusReport* StatusReport::New() const {
  return new StatusReport;
}

void StatusReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    level_ = 0;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "STATUS_REPORT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional .falcon_remoting_msg.StatusReport.LogLevel level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::StatusReport_LogLevel_IsValid(value)) {
            set_level(static_cast< ::falcon_remoting_msg::StatusReport_LogLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // optional string message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "STATUS_REPORT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional .falcon_remoting_msg.StatusReport.LogLevel level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->level(), output);
  }

  // optional string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "STATUS_REPORT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional .falcon_remoting_msg.StatusReport.LogLevel level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->level(), target);
  }

  // optional string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "STATUS_REPORT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional .falcon_remoting_msg.StatusReport.LogLevel level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
    }

    // optional string message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusReport::MergeFrom(const StatusReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusReport::CopyFrom(const StatusReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusReport::IsInitialized() const {

  return true;
}

void StatusReport::Swap(StatusReport* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(level_, other->level_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusReport_descriptor_;
  metadata.reflection = StatusReport_reflection_;
  return metadata;
}


// ===================================================================

::std::string* BlacklistStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int BlacklistStatus::kMsgNameFieldNumber;
const int BlacklistStatus::kEntriesFieldNumber;
#endif  // !_MSC_VER

BlacklistStatus::BlacklistStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlacklistStatus::InitAsDefaultInstance() {
}

BlacklistStatus::BlacklistStatus(const BlacklistStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlacklistStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlacklistStatus::~BlacklistStatus() {
  SharedDtor();
}

void BlacklistStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void BlacklistStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlacklistStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlacklistStatus_descriptor_;
}

const BlacklistStatus& BlacklistStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

BlacklistStatus* BlacklistStatus::default_instance_ = NULL;

BlacklistStatus* BlacklistStatus::New() const {
  return new BlacklistStatus;
}

void BlacklistStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlacklistStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "BLACKLIST_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        break;
      }

      // repeated .falcon_common_msg.BlacklistEntry entries = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlacklistStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "BLACKLIST_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated .falcon_common_msg.BlacklistEntry entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlacklistStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "BLACKLIST_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated .falcon_common_msg.BlacklistEntry entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlacklistStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "BLACKLIST_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  // repeated .falcon_common_msg.BlacklistEntry entries = 2;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlacklistStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlacklistStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlacklistStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlacklistStatus::MergeFrom(const BlacklistStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlacklistStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlacklistStatus::CopyFrom(const BlacklistStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlacklistStatus::IsInitialized() const {

  return true;
}

void BlacklistStatus::Swap(BlacklistStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlacklistStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlacklistStatus_descriptor_;
  metadata.reflection = BlacklistStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* InterceptListStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int InterceptListStatus::kMsgNameFieldNumber;
const int InterceptListStatus::kEntriesFieldNumber;
#endif  // !_MSC_VER

InterceptListStatus::InterceptListStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InterceptListStatus::InitAsDefaultInstance() {
}

InterceptListStatus::InterceptListStatus(const InterceptListStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InterceptListStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InterceptListStatus::~InterceptListStatus() {
  SharedDtor();
}

void InterceptListStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void InterceptListStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterceptListStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InterceptListStatus_descriptor_;
}

const InterceptListStatus& InterceptListStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

InterceptListStatus* InterceptListStatus::default_instance_ = NULL;

InterceptListStatus* InterceptListStatus::New() const {
  return new InterceptListStatus;
}

void InterceptListStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InterceptListStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "INTERCEPT_LIST_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        break;
      }

      // repeated .falcon_trigger_msg.Intercept entries = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InterceptListStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "INTERCEPT_LIST_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated .falcon_trigger_msg.Intercept entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InterceptListStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "INTERCEPT_LIST_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated .falcon_trigger_msg.Intercept entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InterceptListStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "INTERCEPT_LIST_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  // repeated .falcon_trigger_msg.Intercept entries = 2;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterceptListStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InterceptListStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InterceptListStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InterceptListStatus::MergeFrom(const InterceptListStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InterceptListStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterceptListStatus::CopyFrom(const InterceptListStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterceptListStatus::IsInitialized() const {

  return true;
}

void InterceptListStatus::Swap(InterceptListStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InterceptListStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InterceptListStatus_descriptor_;
  metadata.reflection = InterceptListStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ExternalsHitListStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ExternalsHitListStatus::kMsgNameFieldNumber;
const int ExternalsHitListStatus::kEntriesFieldNumber;
#endif  // !_MSC_VER

ExternalsHitListStatus::ExternalsHitListStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExternalsHitListStatus::InitAsDefaultInstance() {
}

ExternalsHitListStatus::ExternalsHitListStatus(const ExternalsHitListStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExternalsHitListStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExternalsHitListStatus::~ExternalsHitListStatus() {
  SharedDtor();
}

void ExternalsHitListStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ExternalsHitListStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalsHitListStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalsHitListStatus_descriptor_;
}

const ExternalsHitListStatus& ExternalsHitListStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

ExternalsHitListStatus* ExternalsHitListStatus::default_instance_ = NULL;

ExternalsHitListStatus* ExternalsHitListStatus::New() const {
  return new ExternalsHitListStatus;
}

void ExternalsHitListStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExternalsHitListStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EXTERNALS_HIT_LIST_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        break;
      }

      // repeated .falcon_externals_msg.ExternalsHit entries = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExternalsHitListStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EXTERNALS_HIT_LIST_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated .falcon_externals_msg.ExternalsHit entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExternalsHitListStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EXTERNALS_HIT_LIST_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated .falcon_externals_msg.ExternalsHit entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExternalsHitListStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EXTERNALS_HIT_LIST_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  // repeated .falcon_externals_msg.ExternalsHit entries = 2;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalsHitListStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExternalsHitListStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternalsHitListStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternalsHitListStatus::MergeFrom(const ExternalsHitListStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExternalsHitListStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalsHitListStatus::CopyFrom(const ExternalsHitListStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalsHitListStatus::IsInitialized() const {

  return true;
}

void ExternalsHitListStatus::Swap(ExternalsHitListStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExternalsHitListStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternalsHitListStatus_descriptor_;
  metadata.reflection = ExternalsHitListStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GlobalSignalListStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GlobalSignalListStatus::kMsgNameFieldNumber;
const int GlobalSignalListStatus::kFeedIdFieldNumber;
#endif  // !_MSC_VER

GlobalSignalListStatus::GlobalSignalListStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalSignalListStatus::InitAsDefaultInstance() {
}

GlobalSignalListStatus::GlobalSignalListStatus(const GlobalSignalListStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalSignalListStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  feed_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalSignalListStatus::~GlobalSignalListStatus() {
  SharedDtor();
}

void GlobalSignalListStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void GlobalSignalListStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalSignalListStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalSignalListStatus_descriptor_;
}

const GlobalSignalListStatus& GlobalSignalListStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

GlobalSignalListStatus* GlobalSignalListStatus::default_instance_ = NULL;

GlobalSignalListStatus* GlobalSignalListStatus::New() const {
  return new GlobalSignalListStatus;
}

void GlobalSignalListStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    feed_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalSignalListStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GLOBAL_SIGNAL_LIST_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_feed_id;
        break;
      }

      // optional int32 feed_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feed_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feed_id_)));
          set_has_feed_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalSignalListStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GLOBAL_SIGNAL_LIST_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 feed_id = 2;
  if (has_feed_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->feed_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalSignalListStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GLOBAL_SIGNAL_LIST_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 feed_id = 2;
  if (has_feed_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->feed_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalSignalListStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GLOBAL_SIGNAL_LIST_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 feed_id = 2;
    if (has_feed_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->feed_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalSignalListStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalSignalListStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalSignalListStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalSignalListStatus::MergeFrom(const GlobalSignalListStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_feed_id()) {
      set_feed_id(from.feed_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalSignalListStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalSignalListStatus::CopyFrom(const GlobalSignalListStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSignalListStatus::IsInitialized() const {

  return true;
}

void GlobalSignalListStatus::Swap(GlobalSignalListStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(feed_id_, other->feed_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalSignalListStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalSignalListStatus_descriptor_;
  metadata.reflection = GlobalSignalListStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StatusChannel_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusChannel_Status_descriptor_;
}
bool StatusChannel_Status_IsValid(int value) {
  switch(value) {
    case -3:
    case -2:
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StatusChannel_Status StatusChannel::DISABLED;
const StatusChannel_Status StatusChannel::OPEN;
const StatusChannel_Status StatusChannel::LAUNCHING;
const StatusChannel_Status StatusChannel::CRASHED;
const StatusChannel_Status StatusChannel::IDLE;
const StatusChannel_Status StatusChannel::SEARCHING;
const StatusChannel_Status StatusChannel::PROCESSING;
const StatusChannel_Status StatusChannel::Status_MIN;
const StatusChannel_Status StatusChannel::Status_MAX;
const int StatusChannel::Status_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* StatusChannel::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int StatusChannel::kMsgNameFieldNumber;
const int StatusChannel::kAppIDFieldNumber;
const int StatusChannel::kStatusFieldNumber;
const int StatusChannel::kScryptFieldNumber;
#endif  // !_MSC_VER

StatusChannel::StatusChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusChannel::InitAsDefaultInstance() {
}

StatusChannel::StatusChannel(const StatusChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusChannel::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  appid_ = 0;
  status_ = -3;
  scrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusChannel::~StatusChannel() {
  SharedDtor();
}

void StatusChannel::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (scrypt_ != &::google::protobuf::internal::kEmptyString) {
    delete scrypt_;
  }
  if (this != default_instance_) {
  }
}

void StatusChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusChannel_descriptor_;
}

const StatusChannel& StatusChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

StatusChannel* StatusChannel::default_instance_ = NULL;

StatusChannel* StatusChannel::New() const {
  return new StatusChannel;
}

void StatusChannel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    appid_ = 0;
    status_ = -3;
    if (has_scrypt()) {
      if (scrypt_ != &::google::protobuf::internal::kEmptyString) {
        scrypt_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "STATUS_CHANNEL"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appID;
        break;
      }

      // optional int32 appID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .falcon_remoting_msg.StatusChannel.Status status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::StatusChannel_Status_IsValid(value)) {
            set_status(static_cast< ::falcon_remoting_msg::StatusChannel_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_scrypt;
        break;
      }

      // optional string scrypt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scrypt().data(), this->scrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "STATUS_CHANNEL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  // optional .falcon_remoting_msg.StatusChannel.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional string scrypt = 4;
  if (has_scrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scrypt().data(), this->scrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->scrypt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "STATUS_CHANNEL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  // optional .falcon_remoting_msg.StatusChannel.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional string scrypt = 4;
  if (has_scrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scrypt().data(), this->scrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->scrypt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "STATUS_CHANNEL"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 appID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional .falcon_remoting_msg.StatusChannel.Status status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string scrypt = 4;
    if (has_scrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scrypt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusChannel::MergeFrom(const StatusChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_scrypt()) {
      set_scrypt(from.scrypt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusChannel::CopyFrom(const StatusChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusChannel::IsInitialized() const {

  return true;
}

void StatusChannel::Swap(StatusChannel* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(appid_, other->appid_);
    std::swap(status_, other->status_);
    std::swap(scrypt_, other->scrypt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusChannel_descriptor_;
  metadata.reflection = StatusChannel_reflection_;
  return metadata;
}


// ===================================================================

::std::string* HealthStatus::_default_msgname_ = NULL;
::std::string* HealthStatus::_default_pic_ = NULL;
::std::string* HealthStatus::_default_ntp_ = NULL;
::std::string* HealthStatus::_default_mhz_ = NULL;
::std::string* HealthStatus::_default_pps_ = NULL;
::std::string* HealthStatus::_default_serial_ = NULL;
::std::string* HealthStatus::_default_rx_ = NULL;
::std::string* HealthStatus::_default_raid_ = NULL;
::std::string* HealthStatus::_default_disabled_ = NULL;
#ifndef _MSC_VER
const int HealthStatus::kMsgNameFieldNumber;
const int HealthStatus::kChannelFieldNumber;
const int HealthStatus::kPicFieldNumber;
const int HealthStatus::kNtpFieldNumber;
const int HealthStatus::kMhzFieldNumber;
const int HealthStatus::kPpsFieldNumber;
const int HealthStatus::kSerialFieldNumber;
const int HealthStatus::kRxFieldNumber;
const int HealthStatus::kRaidFieldNumber;
const int HealthStatus::kDisabledFieldNumber;
const int HealthStatus::kSsidFieldNumber;
const int HealthStatus::kUniqrxidFieldNumber;
#endif  // !_MSC_VER

HealthStatus::HealthStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HealthStatus::InitAsDefaultInstance() {
}

HealthStatus::HealthStatus(const HealthStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HealthStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  pic_ = const_cast< ::std::string*>(_default_pic_);
  ntp_ = const_cast< ::std::string*>(_default_ntp_);
  mhz_ = const_cast< ::std::string*>(_default_mhz_);
  pps_ = const_cast< ::std::string*>(_default_pps_);
  serial_ = const_cast< ::std::string*>(_default_serial_);
  rx_ = const_cast< ::std::string*>(_default_rx_);
  raid_ = const_cast< ::std::string*>(_default_raid_);
  disabled_ = const_cast< ::std::string*>(_default_disabled_);
  ssid_ = 0;
  uniqrxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HealthStatus::~HealthStatus() {
  SharedDtor();
}

void HealthStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (pic_ != _default_pic_) {
    delete pic_;
  }
  if (ntp_ != _default_ntp_) {
    delete ntp_;
  }
  if (mhz_ != _default_mhz_) {
    delete mhz_;
  }
  if (pps_ != _default_pps_) {
    delete pps_;
  }
  if (serial_ != _default_serial_) {
    delete serial_;
  }
  if (rx_ != _default_rx_) {
    delete rx_;
  }
  if (raid_ != _default_raid_) {
    delete raid_;
  }
  if (disabled_ != _default_disabled_) {
    delete disabled_;
  }
  if (uniqrxid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqrxid_;
  }
  if (this != default_instance_) {
  }
}

void HealthStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HealthStatus_descriptor_;
}

const HealthStatus& HealthStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

HealthStatus* HealthStatus::default_instance_ = NULL;

HealthStatus* HealthStatus::New() const {
  return new HealthStatus;
}

void HealthStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    if (has_pic()) {
      if (pic_ != _default_pic_) {
        pic_->assign(*_default_pic_);
      }
    }
    if (has_ntp()) {
      if (ntp_ != _default_ntp_) {
        ntp_->assign(*_default_ntp_);
      }
    }
    if (has_mhz()) {
      if (mhz_ != _default_mhz_) {
        mhz_->assign(*_default_mhz_);
      }
    }
    if (has_pps()) {
      if (pps_ != _default_pps_) {
        pps_->assign(*_default_pps_);
      }
    }
    if (has_serial()) {
      if (serial_ != _default_serial_) {
        serial_->assign(*_default_serial_);
      }
    }
    if (has_rx()) {
      if (rx_ != _default_rx_) {
        rx_->assign(*_default_rx_);
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_raid()) {
      if (raid_ != _default_raid_) {
        raid_->assign(*_default_raid_);
      }
    }
    if (has_disabled()) {
      if (disabled_ != _default_disabled_) {
        disabled_->assign(*_default_disabled_);
      }
    }
    ssid_ = 0;
    if (has_uniqrxid()) {
      if (uniqrxid_ != &::google::protobuf::internal::kEmptyString) {
        uniqrxid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HealthStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "HEALTH_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pic;
        break;
      }

      // optional string pic = 3 [default = "NO_PIC"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pic().data(), this->pic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ntp;
        break;
      }

      // optional string ntp = 4 [default = "F"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ntp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ntp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ntp().data(), this->ntp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mhz;
        break;
      }

      // optional string mhz = 5 [default = "F"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mhz:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mhz()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mhz().data(), this->mhz().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pps;
        break;
      }

      // optional string pps = 6 [default = "F"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pps().data(), this->pps().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_serial;
        break;
      }

      // optional string serial = 7 [default = "F"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serial().data(), this->serial().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rx;
        break;
      }

      // optional string rx = 8 [default = "F"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rx().data(), this->rx().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_raid;
        break;
      }

      // optional string raid = 9 [default = "F"];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raid().data(), this->raid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_disabled;
        break;
      }

      // optional string disabled = 10 [default = "UNKNOWN"];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disabled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disabled()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disabled().data(), this->disabled().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ssid;
        break;
      }

      // optional int32 ssid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ssid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_uniqrxid;
        break;
      }

      // optional string uniqrxid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqrxid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqrxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqrxid().data(), this->uniqrxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HealthStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "HEALTH_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional string pic = 3 [default = "NO_PIC"];
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pic(), output);
  }

  // optional string ntp = 4 [default = "F"];
  if (has_ntp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ntp().data(), this->ntp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ntp(), output);
  }

  // optional string mhz = 5 [default = "F"];
  if (has_mhz()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mhz().data(), this->mhz().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->mhz(), output);
  }

  // optional string pps = 6 [default = "F"];
  if (has_pps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pps().data(), this->pps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->pps(), output);
  }

  // optional string serial = 7 [default = "F"];
  if (has_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serial().data(), this->serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->serial(), output);
  }

  // optional string rx = 8 [default = "F"];
  if (has_rx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx().data(), this->rx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->rx(), output);
  }

  // optional string raid = 9 [default = "F"];
  if (has_raid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raid().data(), this->raid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->raid(), output);
  }

  // optional string disabled = 10 [default = "UNKNOWN"];
  if (has_disabled()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disabled().data(), this->disabled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->disabled(), output);
  }

  // optional int32 ssid = 11;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ssid(), output);
  }

  // optional string uniqrxid = 12;
  if (has_uniqrxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqrxid().data(), this->uniqrxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->uniqrxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HealthStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "HEALTH_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional string pic = 3 [default = "NO_PIC"];
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pic(), target);
  }

  // optional string ntp = 4 [default = "F"];
  if (has_ntp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ntp().data(), this->ntp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ntp(), target);
  }

  // optional string mhz = 5 [default = "F"];
  if (has_mhz()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mhz().data(), this->mhz().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mhz(), target);
  }

  // optional string pps = 6 [default = "F"];
  if (has_pps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pps().data(), this->pps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pps(), target);
  }

  // optional string serial = 7 [default = "F"];
  if (has_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serial().data(), this->serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->serial(), target);
  }

  // optional string rx = 8 [default = "F"];
  if (has_rx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx().data(), this->rx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rx(), target);
  }

  // optional string raid = 9 [default = "F"];
  if (has_raid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raid().data(), this->raid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->raid(), target);
  }

  // optional string disabled = 10 [default = "UNKNOWN"];
  if (has_disabled()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disabled().data(), this->disabled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->disabled(), target);
  }

  // optional int32 ssid = 11;
  if (has_ssid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ssid(), target);
  }

  // optional string uniqrxid = 12;
  if (has_uniqrxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqrxid().data(), this->uniqrxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->uniqrxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HealthStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "HEALTH_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional string pic = 3 [default = "NO_PIC"];
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }

    // optional string ntp = 4 [default = "F"];
    if (has_ntp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ntp());
    }

    // optional string mhz = 5 [default = "F"];
    if (has_mhz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mhz());
    }

    // optional string pps = 6 [default = "F"];
    if (has_pps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pps());
    }

    // optional string serial = 7 [default = "F"];
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial());
    }

    // optional string rx = 8 [default = "F"];
    if (has_rx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rx());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string raid = 9 [default = "F"];
    if (has_raid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raid());
    }

    // optional string disabled = 10 [default = "UNKNOWN"];
    if (has_disabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disabled());
    }

    // optional int32 ssid = 11;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional string uniqrxid = 12;
    if (has_uniqrxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqrxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HealthStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HealthStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HealthStatus::MergeFrom(const HealthStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_ntp()) {
      set_ntp(from.ntp());
    }
    if (from.has_mhz()) {
      set_mhz(from.mhz());
    }
    if (from.has_pps()) {
      set_pps(from.pps());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_rx()) {
      set_rx(from.rx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_raid()) {
      set_raid(from.raid());
    }
    if (from.has_disabled()) {
      set_disabled(from.disabled());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_uniqrxid()) {
      set_uniqrxid(from.uniqrxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HealthStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthStatus::CopyFrom(const HealthStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthStatus::IsInitialized() const {

  return true;
}

void HealthStatus::Swap(HealthStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(pic_, other->pic_);
    std::swap(ntp_, other->ntp_);
    std::swap(mhz_, other->mhz_);
    std::swap(pps_, other->pps_);
    std::swap(serial_, other->serial_);
    std::swap(rx_, other->rx_);
    std::swap(raid_, other->raid_);
    std::swap(disabled_, other->disabled_);
    std::swap(ssid_, other->ssid_);
    std::swap(uniqrxid_, other->uniqrxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HealthStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HealthStatus_descriptor_;
  metadata.reflection = HealthStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* HealthMessage_Code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HealthMessage_Code_descriptor_;
}
bool HealthMessage_Code_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HealthMessage_Code HealthMessage::OK;
const HealthMessage_Code HealthMessage::WARNING;
const HealthMessage_Code HealthMessage::CRITICAL;
const HealthMessage_Code HealthMessage::UNKNOWN;
const HealthMessage_Code HealthMessage::Code_MIN;
const HealthMessage_Code HealthMessage::Code_MAX;
const int HealthMessage::Code_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* HealthMessage::_default_msgname_ = NULL;
::std::string* HealthMessage::_default_type_ = NULL;
#ifndef _MSC_VER
const int HealthMessage::kMsgNameFieldNumber;
const int HealthMessage::kDescriptionFieldNumber;
const int HealthMessage::kCodeFieldNumber;
const int HealthMessage::kStatusFieldNumber;
const int HealthMessage::kTypeFieldNumber;
const int HealthMessage::kTimestampFieldNumber;
#endif  // !_MSC_VER

HealthMessage::HealthMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HealthMessage::InitAsDefaultInstance() {
}

HealthMessage::HealthMessage(const HealthMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HealthMessage::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = 0;
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(_default_type_);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HealthMessage::~HealthMessage() {
  SharedDtor();
}

void HealthMessage::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (type_ != _default_type_) {
    delete type_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void HealthMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HealthMessage_descriptor_;
}

const HealthMessage& HealthMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

HealthMessage* HealthMessage::default_instance_ = NULL;

HealthMessage* HealthMessage::New() const {
  return new HealthMessage;
}

void HealthMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    code_ = 0;
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::kEmptyString) {
        status_->clear();
      }
    }
    if (has_type()) {
      if (type_ != _default_type_) {
        type_->assign(*_default_type_);
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HealthMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "HEALTH_MESSAGE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // optional .falcon_remoting_msg.HealthMessage.Code code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::HealthMessage_Code_IsValid(value)) {
            set_code(static_cast< ::falcon_remoting_msg::HealthMessage_Code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_status;
        break;
      }

      // optional string status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_type;
        break;
      }

      // optional string type = 5 [default = "Functional"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HealthMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "HEALTH_MESSAGE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }

  // optional .falcon_remoting_msg.HealthMessage.Code code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->code(), output);
  }

  // optional string status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->status(), output);
  }

  // optional string type = 5 [default = "Functional"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->type(), output);
  }

  // optional string timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HealthMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "HEALTH_MESSAGE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional .falcon_remoting_msg.HealthMessage.Code code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->code(), target);
  }

  // optional string status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->status(), target);
  }

  // optional string type = 5 [default = "Functional"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }

  // optional string timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HealthMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "HEALTH_MESSAGE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .falcon_remoting_msg.HealthMessage.Code code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional string status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }

    // optional string type = 5 [default = "Functional"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HealthMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HealthMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HealthMessage::MergeFrom(const HealthMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HealthMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthMessage::CopyFrom(const HealthMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthMessage::IsInitialized() const {

  return true;
}

void HealthMessage::Swap(HealthMessage* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(description_, other->description_);
    std::swap(code_, other->code_);
    std::swap(status_, other->status_);
    std::swap(type_, other->type_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HealthMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HealthMessage_descriptor_;
  metadata.reflection = HealthMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* HealthTest_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HealthTest_Status_descriptor_;
}
bool HealthTest_Status_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HealthTest_Status HealthTest::FAILURE;
const HealthTest_Status HealthTest::RUNNING;
const HealthTest_Status HealthTest::COMPLETED;
const HealthTest_Status HealthTest::QUERY;
const HealthTest_Status HealthTest::Status_MIN;
const HealthTest_Status HealthTest::Status_MAX;
const int HealthTest::Status_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* HealthTest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int HealthTest::kMsgNameFieldNumber;
const int HealthTest::kStatusFieldNumber;
#endif  // !_MSC_VER

HealthTest::HealthTest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HealthTest::InitAsDefaultInstance() {
}

HealthTest::HealthTest(const HealthTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HealthTest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  status_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HealthTest::~HealthTest() {
  SharedDtor();
}

void HealthTest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void HealthTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HealthTest_descriptor_;
}

const HealthTest& HealthTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

HealthTest* HealthTest::default_instance_ = NULL;

HealthTest* HealthTest::New() const {
  return new HealthTest;
}

void HealthTest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    status_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HealthTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "HEALTH_TEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .falcon_remoting_msg.HealthTest.Status status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::HealthTest_Status_IsValid(value)) {
            set_status(static_cast< ::falcon_remoting_msg::HealthTest_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HealthTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "HEALTH_TEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .falcon_remoting_msg.HealthTest.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HealthTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "HEALTH_TEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .falcon_remoting_msg.HealthTest.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HealthTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "HEALTH_TEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .falcon_remoting_msg.HealthTest.Status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HealthTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HealthTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HealthTest::MergeFrom(const HealthTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HealthTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthTest::CopyFrom(const HealthTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthTest::IsInitialized() const {

  return true;
}

void HealthTest::Swap(HealthTest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HealthTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HealthTest_descriptor_;
  metadata.reflection = HealthTest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SignalEvent_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalEvent_Type_descriptor_;
}
bool SignalEvent_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SignalEvent_Type SignalEvent::SIGDET;
const SignalEvent_Type SignalEvent::SIGUP;
const SignalEvent_Type SignalEvent::SIGDOWN;
const SignalEvent_Type SignalEvent::SIGTIMEOUT;
const SignalEvent_Type SignalEvent::Type_MIN;
const SignalEvent_Type SignalEvent::Type_MAX;
const int SignalEvent::Type_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* SignalEvent::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SignalEvent::kMsgNameFieldNumber;
const int SignalEvent::kChannelFieldNumber;
const int SignalEvent::kEventTypeFieldNumber;
const int SignalEvent::kEventIDFieldNumber;
const int SignalEvent::kTimestampFieldNumber;
const int SignalEvent::kSoiNumFieldNumber;
const int SignalEvent::kRfMHzFieldNumber;
const int SignalEvent::kSubcarMHzFieldNumber;
const int SignalEvent::kExcurKHzFieldNumber;
const int SignalEvent::kAppIDFieldNumber;
const int SignalEvent::kAntNumFieldNumber;
const int SignalEvent::kAntAzFieldNumber;
const int SignalEvent::kAntElFieldNumber;
const int SignalEvent::kGlobalIDFieldNumber;
const int SignalEvent::kScryptFieldNumber;
const int SignalEvent::kExportPortFieldNumber;
const int SignalEvent::kEltexFieldNumber;
const int SignalEvent::kBwMHzFieldNumber;
const int SignalEvent::kSensorNameFieldNumber;
const int SignalEvent::kExternalsFieldNumber;
const int SignalEvent::kInternalsFieldNumber;
#endif  // !_MSC_VER

SignalEvent::SignalEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalEvent::InitAsDefaultInstance() {
  externals_ = const_cast< ::falcon_externals_msg::ExternalsHit*>(&::falcon_externals_msg::ExternalsHit::default_instance());
  internals_ = const_cast< ::falcon_externals_msg::InternalsHit*>(&::falcon_externals_msg::InternalsHit::default_instance());
}

SignalEvent::SignalEvent(const SignalEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalEvent::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  eventtype_ = 0;
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  soinum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rfmhz_ = 0;
  subcarmhz_ = 0;
  excurkhz_ = 0;
  appid_ = 0;
  antnum_ = 0;
  antaz_ = 0;
  antel_ = 0;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exportport_ = 0;
  eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bwmhz_ = 0;
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  externals_ = NULL;
  internals_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalEvent::~SignalEvent() {
  SharedDtor();
}

void SignalEvent::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (soinum_ != &::google::protobuf::internal::kEmptyString) {
    delete soinum_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (scrypt_ != &::google::protobuf::internal::kEmptyString) {
    delete scrypt_;
  }
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    delete eltex_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (this != default_instance_) {
    delete externals_;
    delete internals_;
  }
}

void SignalEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalEvent_descriptor_;
}

const SignalEvent& SignalEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

SignalEvent* SignalEvent::default_instance_ = NULL;

SignalEvent* SignalEvent::New() const {
  return new SignalEvent;
}

void SignalEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    eventtype_ = 0;
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    if (has_soinum()) {
      if (soinum_ != &::google::protobuf::internal::kEmptyString) {
        soinum_->clear();
      }
    }
    rfmhz_ = 0;
    subcarmhz_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    excurkhz_ = 0;
    appid_ = 0;
    antnum_ = 0;
    antaz_ = 0;
    antel_ = 0;
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    if (has_scrypt()) {
      if (scrypt_ != &::google::protobuf::internal::kEmptyString) {
        scrypt_->clear();
      }
    }
    exportport_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_eltex()) {
      if (eltex_ != &::google::protobuf::internal::kEmptyString) {
        eltex_->clear();
      }
    }
    bwmhz_ = 0;
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
    if (has_externals()) {
      if (externals_ != NULL) externals_->::falcon_externals_msg::ExternalsHit::Clear();
    }
    if (has_internals()) {
      if (internals_ != NULL) internals_->::falcon_externals_msg::InternalsHit::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SIGNAL_EVENT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eventType;
        break;
      }

      // optional .falcon_remoting_msg.SignalEvent.Type eventType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::SignalEvent_Type_IsValid(value)) {
            set_eventtype(static_cast< ::falcon_remoting_msg::SignalEvent_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_eventID;
        break;
      }

      // optional string eventID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_soiNum;
        break;
      }

      // optional string soiNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soiNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soinum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soinum().data(), this->soinum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_rfMHz;
        break;
      }

      // optional float rfMHz = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rfMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rfmhz_)));
          set_has_rfmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_subcarMHz;
        break;
      }

      // optional float subcarMHz = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_subcarMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &subcarmhz_)));
          set_has_subcarmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_excurKHz;
        break;
      }

      // optional float excurKHz = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_excurKHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &excurkhz_)));
          set_has_excurkhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_appID;
        break;
      }

      // optional int32 appID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_antNum;
        break;
      }

      // optional int32 antNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_antNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &antnum_)));
          set_has_antnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_antAz;
        break;
      }

      // optional float antAz = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_antAz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &antaz_)));
          set_has_antaz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_antEl;
        break;
      }

      // optional float antEl = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_antEl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &antel_)));
          set_has_antel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_globalID;
        break;
      }

      // optional string globalID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_scrypt;
        break;
      }

      // optional string scrypt = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scrypt().data(), this->scrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_exportPort;
        break;
      }

      // optional int32 exportPort = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exportPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exportport_)));
          set_has_exportport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_eltex;
        break;
      }

      // optional string eltex = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eltex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eltex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eltex().data(), this->eltex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_bwMHz;
        break;
      }

      // optional float bwMHz = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bwMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bwmhz_)));
          set_has_bwmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 19 [default = ""];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_externals;
        break;
      }

      // optional .falcon_externals_msg.ExternalsHit externals = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_externals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_externals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_internals;
        break;
      }

      // optional .falcon_externals_msg.InternalsHit internals = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SIGNAL_EVENT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional .falcon_remoting_msg.SignalEvent.Type eventType = 3;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->eventtype(), output);
  }

  // optional string eventID = 4;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->eventid(), output);
  }

  // optional string timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->timestamp(), output);
  }

  // optional string soiNum = 6;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->soinum(), output);
  }

  // optional float rfMHz = 7;
  if (has_rfmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->rfmhz(), output);
  }

  // optional float subcarMHz = 8;
  if (has_subcarmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->subcarmhz(), output);
  }

  // optional float excurKHz = 9;
  if (has_excurkhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->excurkhz(), output);
  }

  // optional int32 appID = 10;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->appid(), output);
  }

  // optional int32 antNum = 11;
  if (has_antnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->antnum(), output);
  }

  // optional float antAz = 12 [default = 0];
  if (has_antaz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->antaz(), output);
  }

  // optional float antEl = 13 [default = 0];
  if (has_antel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->antel(), output);
  }

  // optional string globalID = 14;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->globalid(), output);
  }

  // optional string scrypt = 15;
  if (has_scrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scrypt().data(), this->scrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->scrypt(), output);
  }

  // optional int32 exportPort = 16;
  if (has_exportport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->exportport(), output);
  }

  // optional string eltex = 17;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->eltex(), output);
  }

  // optional float bwMHz = 18;
  if (has_bwmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->bwmhz(), output);
  }

  // optional string sensorName = 19 [default = ""];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->sensorname(), output);
  }

  // optional .falcon_externals_msg.ExternalsHit externals = 20;
  if (has_externals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->externals(), output);
  }

  // optional .falcon_externals_msg.InternalsHit internals = 21;
  if (has_internals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->internals(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SIGNAL_EVENT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional .falcon_remoting_msg.SignalEvent.Type eventType = 3;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->eventtype(), target);
  }

  // optional string eventID = 4;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->eventid(), target);
  }

  // optional string timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->timestamp(), target);
  }

  // optional string soiNum = 6;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->soinum(), target);
  }

  // optional float rfMHz = 7;
  if (has_rfmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->rfmhz(), target);
  }

  // optional float subcarMHz = 8;
  if (has_subcarmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->subcarmhz(), target);
  }

  // optional float excurKHz = 9;
  if (has_excurkhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->excurkhz(), target);
  }

  // optional int32 appID = 10;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->appid(), target);
  }

  // optional int32 antNum = 11;
  if (has_antnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->antnum(), target);
  }

  // optional float antAz = 12 [default = 0];
  if (has_antaz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->antaz(), target);
  }

  // optional float antEl = 13 [default = 0];
  if (has_antel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->antel(), target);
  }

  // optional string globalID = 14;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->globalid(), target);
  }

  // optional string scrypt = 15;
  if (has_scrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scrypt().data(), this->scrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->scrypt(), target);
  }

  // optional int32 exportPort = 16;
  if (has_exportport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->exportport(), target);
  }

  // optional string eltex = 17;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->eltex(), target);
  }

  // optional float bwMHz = 18;
  if (has_bwmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->bwmhz(), target);
  }

  // optional string sensorName = 19 [default = ""];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->sensorname(), target);
  }

  // optional .falcon_externals_msg.ExternalsHit externals = 20;
  if (has_externals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->externals(), target);
  }

  // optional .falcon_externals_msg.InternalsHit internals = 21;
  if (has_internals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->internals(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SIGNAL_EVENT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional .falcon_remoting_msg.SignalEvent.Type eventType = 3;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
    }

    // optional string eventID = 4;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

    // optional string timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional string soiNum = 6;
    if (has_soinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soinum());
    }

    // optional float rfMHz = 7;
    if (has_rfmhz()) {
      total_size += 1 + 4;
    }

    // optional float subcarMHz = 8;
    if (has_subcarmhz()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float excurKHz = 9;
    if (has_excurkhz()) {
      total_size += 1 + 4;
    }

    // optional int32 appID = 10;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional int32 antNum = 11;
    if (has_antnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->antnum());
    }

    // optional float antAz = 12 [default = 0];
    if (has_antaz()) {
      total_size += 1 + 4;
    }

    // optional float antEl = 13 [default = 0];
    if (has_antel()) {
      total_size += 1 + 4;
    }

    // optional string globalID = 14;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional string scrypt = 15;
    if (has_scrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scrypt());
    }

    // optional int32 exportPort = 16;
    if (has_exportport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exportport());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string eltex = 17;
    if (has_eltex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eltex());
    }

    // optional float bwMHz = 18;
    if (has_bwmhz()) {
      total_size += 2 + 4;
    }

    // optional string sensorName = 19 [default = ""];
    if (has_sensorname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

    // optional .falcon_externals_msg.ExternalsHit externals = 20;
    if (has_externals()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->externals());
    }

    // optional .falcon_externals_msg.InternalsHit internals = 21;
    if (has_internals()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internals());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalEvent::MergeFrom(const SignalEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_soinum()) {
      set_soinum(from.soinum());
    }
    if (from.has_rfmhz()) {
      set_rfmhz(from.rfmhz());
    }
    if (from.has_subcarmhz()) {
      set_subcarmhz(from.subcarmhz());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_excurkhz()) {
      set_excurkhz(from.excurkhz());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_antnum()) {
      set_antnum(from.antnum());
    }
    if (from.has_antaz()) {
      set_antaz(from.antaz());
    }
    if (from.has_antel()) {
      set_antel(from.antel());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_scrypt()) {
      set_scrypt(from.scrypt());
    }
    if (from.has_exportport()) {
      set_exportport(from.exportport());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_eltex()) {
      set_eltex(from.eltex());
    }
    if (from.has_bwmhz()) {
      set_bwmhz(from.bwmhz());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
    if (from.has_externals()) {
      mutable_externals()->::falcon_externals_msg::ExternalsHit::MergeFrom(from.externals());
    }
    if (from.has_internals()) {
      mutable_internals()->::falcon_externals_msg::InternalsHit::MergeFrom(from.internals());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalEvent::CopyFrom(const SignalEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalEvent::IsInitialized() const {

  return true;
}

void SignalEvent::Swap(SignalEvent* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(eventid_, other->eventid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(soinum_, other->soinum_);
    std::swap(rfmhz_, other->rfmhz_);
    std::swap(subcarmhz_, other->subcarmhz_);
    std::swap(excurkhz_, other->excurkhz_);
    std::swap(appid_, other->appid_);
    std::swap(antnum_, other->antnum_);
    std::swap(antaz_, other->antaz_);
    std::swap(antel_, other->antel_);
    std::swap(globalid_, other->globalid_);
    std::swap(scrypt_, other->scrypt_);
    std::swap(exportport_, other->exportport_);
    std::swap(eltex_, other->eltex_);
    std::swap(bwmhz_, other->bwmhz_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(externals_, other->externals_);
    std::swap(internals_, other->internals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalEvent_descriptor_;
  metadata.reflection = SignalEvent_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GPSPosition::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GPSPosition::kMsgNameFieldNumber;
const int GPSPosition::kChannelFieldNumber;
const int GPSPosition::kEventIDFieldNumber;
const int GPSPosition::kLatitudeFieldNumber;
const int GPSPosition::kLongitudeFieldNumber;
const int GPSPosition::kAltitudeFieldNumber;
const int GPSPosition::kWpLatitudeFieldNumber;
const int GPSPosition::kWpLongitudeFieldNumber;
const int GPSPosition::kVelocityFieldNumber;
const int GPSPosition::kBearingFieldNumber;
const int GPSPosition::kTimestampFieldNumber;
const int GPSPosition::kSeqnumFieldNumber;
const int GPSPosition::kSoiFieldNumber;
const int GPSPosition::kIsPredictionFieldNumber;
const int GPSPosition::kMajorFieldNumber;
const int GPSPosition::kMinorFieldNumber;
const int GPSPosition::kVectorFieldNumber;
const int GPSPosition::kAntNumFieldNumber;
const int GPSPosition::kAntAzFieldNumber;
const int GPSPosition::kAntElFieldNumber;
const int GPSPosition::kGlobalIDFieldNumber;
const int GPSPosition::kAppIDFieldNumber;
const int GPSPosition::kSensorNameFieldNumber;
#endif  // !_MSC_VER

GPSPosition::GPSPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GPSPosition::InitAsDefaultInstance() {
}

GPSPosition::GPSPosition(const GPSPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GPSPosition::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  latitude_ = 0;
  longitude_ = 0;
  altitude_ = 0;
  wplatitude_ = 0;
  wplongitude_ = 0;
  velocity_ = 0;
  bearing_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seqnum_ = 0;
  soi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isprediction_ = false;
  major_ = 0;
  minor_ = 0;
  vector_ = 0;
  antnum_ = 0;
  antaz_ = 0;
  antel_ = 0;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPSPosition::~GPSPosition() {
  SharedDtor();
}

void GPSPosition::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (soi_ != &::google::protobuf::internal::kEmptyString) {
    delete soi_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (this != default_instance_) {
  }
}

void GPSPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSPosition_descriptor_;
}

const GPSPosition& GPSPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

GPSPosition* GPSPosition::default_instance_ = NULL;

GPSPosition* GPSPosition::New() const {
  return new GPSPosition;
}

void GPSPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
    latitude_ = 0;
    longitude_ = 0;
    altitude_ = 0;
    wplatitude_ = 0;
    wplongitude_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    velocity_ = 0;
    bearing_ = 0;
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    seqnum_ = 0;
    if (has_soi()) {
      if (soi_ != &::google::protobuf::internal::kEmptyString) {
        soi_->clear();
      }
    }
    isprediction_ = false;
    major_ = 0;
    minor_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    vector_ = 0;
    antnum_ = 0;
    antaz_ = 0;
    antel_ = 0;
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    appid_ = 0;
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPSPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GPS_POSITION"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_eventID;
        break;
      }

      // optional string eventID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_latitude;
        break;
      }

      // optional float latitude = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_longitude;
        break;
      }

      // optional float longitude = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_altitude;
        break;
      }

      // optional float altitude = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_wpLatitude;
        break;
      }

      // optional float wpLatitude = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wpLatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wplatitude_)));
          set_has_wplatitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_wpLongitude;
        break;
      }

      // optional float wpLongitude = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wpLongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wplongitude_)));
          set_has_wplongitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_velocity;
        break;
      }

      // optional float velocity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_bearing;
        break;
      }

      // optional float bearing = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bearing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bearing_)));
          set_has_bearing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_seqnum;
        break;
      }

      // optional float seqnum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_soi;
        break;
      }

      // optional string soi = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soi().data(), this->soi().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_isPrediction;
        break;
      }

      // optional bool isPrediction = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPrediction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isprediction_)));
          set_has_isprediction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_major;
        break;
      }

      // optional float major = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &major_)));
          set_has_major();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_minor;
        break;
      }

      // optional float minor = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minor_)));
          set_has_minor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_vector;
        break;
      }

      // optional float vector = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vector_)));
          set_has_vector();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_antNum;
        break;
      }

      // optional int32 antNum = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_antNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &antnum_)));
          set_has_antnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_antAz;
        break;
      }

      // optional float antAz = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_antAz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &antaz_)));
          set_has_antaz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_antEl;
        break;
      }

      // optional float antEl = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_antEl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &antel_)));
          set_has_antel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_globalID;
        break;
      }

      // optional string globalID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_appID;
        break;
      }

      // optional int32 appID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GPSPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GPS_POSITION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional string eventID = 3;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->eventid(), output);
  }

  // optional float latitude = 4;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->latitude(), output);
  }

  // optional float longitude = 5;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->longitude(), output);
  }

  // optional float altitude = 6;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->altitude(), output);
  }

  // optional float wpLatitude = 7;
  if (has_wplatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->wplatitude(), output);
  }

  // optional float wpLongitude = 8;
  if (has_wplongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->wplongitude(), output);
  }

  // optional float velocity = 9;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->velocity(), output);
  }

  // optional float bearing = 10;
  if (has_bearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->bearing(), output);
  }

  // optional string timestamp = 11;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->timestamp(), output);
  }

  // optional float seqnum = 12;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->seqnum(), output);
  }

  // optional string soi = 13;
  if (has_soi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soi().data(), this->soi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->soi(), output);
  }

  // optional bool isPrediction = 14 [default = false];
  if (has_isprediction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isprediction(), output);
  }

  // optional float major = 15 [default = 0];
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->major(), output);
  }

  // optional float minor = 16 [default = 0];
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->minor(), output);
  }

  // optional float vector = 17 [default = 0];
  if (has_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->vector(), output);
  }

  // optional int32 antNum = 18;
  if (has_antnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->antnum(), output);
  }

  // optional float antAz = 19 [default = 0];
  if (has_antaz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->antaz(), output);
  }

  // optional float antEl = 20 [default = 0];
  if (has_antel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->antel(), output);
  }

  // optional string globalID = 21;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->globalid(), output);
  }

  // optional int32 appID = 22;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->appid(), output);
  }

  // optional string sensorName = 23;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->sensorname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GPSPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GPS_POSITION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional string eventID = 3;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->eventid(), target);
  }

  // optional float latitude = 4;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->latitude(), target);
  }

  // optional float longitude = 5;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->longitude(), target);
  }

  // optional float altitude = 6;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->altitude(), target);
  }

  // optional float wpLatitude = 7;
  if (has_wplatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->wplatitude(), target);
  }

  // optional float wpLongitude = 8;
  if (has_wplongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->wplongitude(), target);
  }

  // optional float velocity = 9;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->velocity(), target);
  }

  // optional float bearing = 10;
  if (has_bearing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->bearing(), target);
  }

  // optional string timestamp = 11;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->timestamp(), target);
  }

  // optional float seqnum = 12;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->seqnum(), target);
  }

  // optional string soi = 13;
  if (has_soi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soi().data(), this->soi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->soi(), target);
  }

  // optional bool isPrediction = 14 [default = false];
  if (has_isprediction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->isprediction(), target);
  }

  // optional float major = 15 [default = 0];
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->major(), target);
  }

  // optional float minor = 16 [default = 0];
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->minor(), target);
  }

  // optional float vector = 17 [default = 0];
  if (has_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->vector(), target);
  }

  // optional int32 antNum = 18;
  if (has_antnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->antnum(), target);
  }

  // optional float antAz = 19 [default = 0];
  if (has_antaz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->antaz(), target);
  }

  // optional float antEl = 20 [default = 0];
  if (has_antel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->antel(), target);
  }

  // optional string globalID = 21;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->globalid(), target);
  }

  // optional int32 appID = 22;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->appid(), target);
  }

  // optional string sensorName = 23;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->sensorname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GPSPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GPS_POSITION"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional string eventID = 3;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

    // optional float latitude = 4;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 5;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional float altitude = 6;
    if (has_altitude()) {
      total_size += 1 + 4;
    }

    // optional float wpLatitude = 7;
    if (has_wplatitude()) {
      total_size += 1 + 4;
    }

    // optional float wpLongitude = 8;
    if (has_wplongitude()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float velocity = 9;
    if (has_velocity()) {
      total_size += 1 + 4;
    }

    // optional float bearing = 10;
    if (has_bearing()) {
      total_size += 1 + 4;
    }

    // optional string timestamp = 11;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional float seqnum = 12;
    if (has_seqnum()) {
      total_size += 1 + 4;
    }

    // optional string soi = 13;
    if (has_soi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soi());
    }

    // optional bool isPrediction = 14 [default = false];
    if (has_isprediction()) {
      total_size += 1 + 1;
    }

    // optional float major = 15 [default = 0];
    if (has_major()) {
      total_size += 1 + 4;
    }

    // optional float minor = 16 [default = 0];
    if (has_minor()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float vector = 17 [default = 0];
    if (has_vector()) {
      total_size += 2 + 4;
    }

    // optional int32 antNum = 18;
    if (has_antnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->antnum());
    }

    // optional float antAz = 19 [default = 0];
    if (has_antaz()) {
      total_size += 2 + 4;
    }

    // optional float antEl = 20 [default = 0];
    if (has_antel()) {
      total_size += 2 + 4;
    }

    // optional string globalID = 21;
    if (has_globalid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional int32 appID = 22;
    if (has_appid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional string sensorName = 23;
    if (has_sensorname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPSPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPSPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPSPosition::MergeFrom(const GPSPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_wplatitude()) {
      set_wplatitude(from.wplatitude());
    }
    if (from.has_wplongitude()) {
      set_wplongitude(from.wplongitude());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_bearing()) {
      set_bearing(from.bearing());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
    if (from.has_soi()) {
      set_soi(from.soi());
    }
    if (from.has_isprediction()) {
      set_isprediction(from.isprediction());
    }
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vector()) {
      set_vector(from.vector());
    }
    if (from.has_antnum()) {
      set_antnum(from.antnum());
    }
    if (from.has_antaz()) {
      set_antaz(from.antaz());
    }
    if (from.has_antel()) {
      set_antel(from.antel());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPSPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSPosition::CopyFrom(const GPSPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSPosition::IsInitialized() const {

  return true;
}

void GPSPosition::Swap(GPSPosition* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(eventid_, other->eventid_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(altitude_, other->altitude_);
    std::swap(wplatitude_, other->wplatitude_);
    std::swap(wplongitude_, other->wplongitude_);
    std::swap(velocity_, other->velocity_);
    std::swap(bearing_, other->bearing_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(soi_, other->soi_);
    std::swap(isprediction_, other->isprediction_);
    std::swap(major_, other->major_);
    std::swap(minor_, other->minor_);
    std::swap(vector_, other->vector_);
    std::swap(antnum_, other->antnum_);
    std::swap(antaz_, other->antaz_);
    std::swap(antel_, other->antel_);
    std::swap(globalid_, other->globalid_);
    std::swap(appid_, other->appid_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPSPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPSPosition_descriptor_;
  metadata.reflection = GPSPosition_reflection_;
  return metadata;
}


// ===================================================================

::std::string* MetadataPOF::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int MetadataPOF::kMsgNameFieldNumber;
const int MetadataPOF::kChannelFieldNumber;
const int MetadataPOF::kEventIDFieldNumber;
const int MetadataPOF::kPofFieldNumber;
const int MetadataPOF::kModeFieldNumber;
const int MetadataPOF::kSeqnumFieldNumber;
const int MetadataPOF::kSoiFieldNumber;
const int MetadataPOF::kAntNumFieldNumber;
const int MetadataPOF::kAntAzFieldNumber;
const int MetadataPOF::kAntElFieldNumber;
const int MetadataPOF::kGlobalIDFieldNumber;
const int MetadataPOF::kAppIDFieldNumber;
#endif  // !_MSC_VER

MetadataPOF::MetadataPOF()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetadataPOF::InitAsDefaultInstance() {
}

MetadataPOF::MetadataPOF(const MetadataPOF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetadataPOF::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pof_ = 0;
  mode_ = 0;
  seqnum_ = 0;
  soi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  antnum_ = 0;
  antaz_ = 0;
  antel_ = 0;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetadataPOF::~MetadataPOF() {
  SharedDtor();
}

void MetadataPOF::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (soi_ != &::google::protobuf::internal::kEmptyString) {
    delete soi_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void MetadataPOF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetadataPOF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetadataPOF_descriptor_;
}

const MetadataPOF& MetadataPOF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

MetadataPOF* MetadataPOF::default_instance_ = NULL;

MetadataPOF* MetadataPOF::New() const {
  return new MetadataPOF;
}

void MetadataPOF::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
    pof_ = 0;
    mode_ = 0;
    seqnum_ = 0;
    if (has_soi()) {
      if (soi_ != &::google::protobuf::internal::kEmptyString) {
        soi_->clear();
      }
    }
    antnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    antaz_ = 0;
    antel_ = 0;
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    appid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetadataPOF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "METADATA_POF"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_eventID;
        break;
      }

      // optional string eventID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pof;
        break;
      }

      // optional int32 pof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pof_)));
          set_has_pof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mode;
        break;
      }

      // optional int32 mode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_seqnum;
        break;
      }

      // optional int32 seqnum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_soi;
        break;
      }

      // optional string soi = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soi().data(), this->soi().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_antNum;
        break;
      }

      // optional int32 antNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_antNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &antnum_)));
          set_has_antnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_antAz;
        break;
      }

      // optional float antAz = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_antAz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &antaz_)));
          set_has_antaz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_antEl;
        break;
      }

      // optional float antEl = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_antEl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &antel_)));
          set_has_antel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_globalID;
        break;
      }

      // optional string globalID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_appID;
        break;
      }

      // optional int32 appID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetadataPOF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "METADATA_POF"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional string eventID = 3;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->eventid(), output);
  }

  // optional int32 pof = 4;
  if (has_pof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pof(), output);
  }

  // optional int32 mode = 5;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mode(), output);
  }

  // optional int32 seqnum = 6;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seqnum(), output);
  }

  // optional string soi = 7;
  if (has_soi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soi().data(), this->soi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->soi(), output);
  }

  // optional int32 antNum = 8;
  if (has_antnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->antnum(), output);
  }

  // optional float antAz = 9 [default = 0];
  if (has_antaz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->antaz(), output);
  }

  // optional float antEl = 10 [default = 0];
  if (has_antel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->antel(), output);
  }

  // optional string globalID = 11;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->globalid(), output);
  }

  // optional int32 appID = 12;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetadataPOF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "METADATA_POF"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional string eventID = 3;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->eventid(), target);
  }

  // optional int32 pof = 4;
  if (has_pof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pof(), target);
  }

  // optional int32 mode = 5;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mode(), target);
  }

  // optional int32 seqnum = 6;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seqnum(), target);
  }

  // optional string soi = 7;
  if (has_soi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soi().data(), this->soi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->soi(), target);
  }

  // optional int32 antNum = 8;
  if (has_antnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->antnum(), target);
  }

  // optional float antAz = 9 [default = 0];
  if (has_antaz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->antaz(), target);
  }

  // optional float antEl = 10 [default = 0];
  if (has_antel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->antel(), target);
  }

  // optional string globalID = 11;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->globalid(), target);
  }

  // optional int32 appID = 12;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetadataPOF::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "METADATA_POF"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional string eventID = 3;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

    // optional int32 pof = 4;
    if (has_pof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pof());
    }

    // optional int32 mode = 5;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional int32 seqnum = 6;
    if (has_seqnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqnum());
    }

    // optional string soi = 7;
    if (has_soi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soi());
    }

    // optional int32 antNum = 8;
    if (has_antnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->antnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float antAz = 9 [default = 0];
    if (has_antaz()) {
      total_size += 1 + 4;
    }

    // optional float antEl = 10 [default = 0];
    if (has_antel()) {
      total_size += 1 + 4;
    }

    // optional string globalID = 11;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional int32 appID = 12;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetadataPOF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetadataPOF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetadataPOF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetadataPOF::MergeFrom(const MetadataPOF& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_pof()) {
      set_pof(from.pof());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
    if (from.has_soi()) {
      set_soi(from.soi());
    }
    if (from.has_antnum()) {
      set_antnum(from.antnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_antaz()) {
      set_antaz(from.antaz());
    }
    if (from.has_antel()) {
      set_antel(from.antel());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetadataPOF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetadataPOF::CopyFrom(const MetadataPOF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataPOF::IsInitialized() const {

  return true;
}

void MetadataPOF::Swap(MetadataPOF* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(eventid_, other->eventid_);
    std::swap(pof_, other->pof_);
    std::swap(mode_, other->mode_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(soi_, other->soi_);
    std::swap(antnum_, other->antnum_);
    std::swap(antaz_, other->antaz_);
    std::swap(antel_, other->antel_);
    std::swap(globalid_, other->globalid_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetadataPOF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetadataPOF_descriptor_;
  metadata.reflection = MetadataPOF_reflection_;
  return metadata;
}


// ===================================================================

::std::string* KVPMetaData::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int KVPMetaData::kMsgNameFieldNumber;
const int KVPMetaData::kEventIDFieldNumber;
const int KVPMetaData::kKeyFieldNumber;
const int KVPMetaData::kValueFieldNumber;
const int KVPMetaData::kUpdateFieldNumber;
const int KVPMetaData::kSeqnumFieldNumber;
const int KVPMetaData::kGlobalIDFieldNumber;
const int KVPMetaData::kAppIDFieldNumber;
#endif  // !_MSC_VER

KVPMetaData::KVPMetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KVPMetaData::InitAsDefaultInstance() {
}

KVPMetaData::KVPMetaData(const KVPMetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KVPMetaData::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_ = 0;
  seqnum_ = 0;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KVPMetaData::~KVPMetaData() {
  SharedDtor();
}

void KVPMetaData::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void KVPMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVPMetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KVPMetaData_descriptor_;
}

const KVPMetaData& KVPMetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

KVPMetaData* KVPMetaData::default_instance_ = NULL;

KVPMetaData* KVPMetaData::New() const {
  return new KVPMetaData;
}

void KVPMetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
    update_ = 0;
    seqnum_ = 0;
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    appid_ = 0;
  }
  key_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KVPMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "KVP_METADATA"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eventID;
        break;
      }

      // optional string eventID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // repeated string key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key(this->key_size() - 1).data(),
            this->key(this->key_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // repeated string value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value(this->value_size() - 1).data(),
            this->value(this->value_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        if (input->ExpectTag(45)) goto parse_update;
        break;
      }

      // optional float update = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &update_)));
          set_has_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_seqnum;
        break;
      }

      // optional int32 seqnum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_globalID;
        break;
      }

      // optional string globalID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_appID;
        break;
      }

      // optional int32 appID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KVPMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "KVP_METADATA"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string eventID = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->eventid(), output);
  }

  // repeated string key = 3;
  for (int i = 0; i < this->key_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->key(i).data(), this->key(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->key(i), output);
  }

  // repeated string value = 4;
  for (int i = 0; i < this->value_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->value(i).data(), this->value(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->value(i), output);
  }

  // optional float update = 5;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->update(), output);
  }

  // optional int32 seqnum = 6;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seqnum(), output);
  }

  // optional string globalID = 7;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->globalid(), output);
  }

  // optional int32 appID = 8;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KVPMetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "KVP_METADATA"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string eventID = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->eventid(), target);
  }

  // repeated string key = 3;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key(i).data(), this->key(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->key(i), target);
  }

  // repeated string value = 4;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value(i).data(), this->value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->value(i), target);
  }

  // optional float update = 5;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->update(), target);
  }

  // optional int32 seqnum = 6;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seqnum(), target);
  }

  // optional string globalID = 7;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->globalid(), target);
  }

  // optional int32 appID = 8;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KVPMetaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "KVP_METADATA"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string eventID = 2;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

    // optional float update = 5;
    if (has_update()) {
      total_size += 1 + 4;
    }

    // optional int32 seqnum = 6;
    if (has_seqnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqnum());
    }

    // optional string globalID = 7;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional int32 appID = 8;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  // repeated string key = 3;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->key(i));
  }

  // repeated string value = 4;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVPMetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KVPMetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KVPMetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KVPMetaData::MergeFrom(const KVPMetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_update()) {
      set_update(from.update());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KVPMetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVPMetaData::CopyFrom(const KVPMetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVPMetaData::IsInitialized() const {

  return true;
}

void KVPMetaData::Swap(KVPMetaData* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(eventid_, other->eventid_);
    key_.Swap(&other->key_);
    value_.Swap(&other->value_);
    std::swap(update_, other->update_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(globalid_, other->globalid_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KVPMetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KVPMetaData_descriptor_;
  metadata.reflection = KVPMetaData_reflection_;
  return metadata;
}


// ===================================================================

::std::string* WaypointMetaData::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int WaypointMetaData::kMsgNameFieldNumber;
const int WaypointMetaData::kEventIDFieldNumber;
const int WaypointMetaData::kWaypointIDFieldNumber;
const int WaypointMetaData::kLatFieldNumber;
const int WaypointMetaData::kLonFieldNumber;
const int WaypointMetaData::kAltFieldNumber;
const int WaypointMetaData::kUpdateFieldNumber;
const int WaypointMetaData::kSeqnumFieldNumber;
const int WaypointMetaData::kGlobalIDFieldNumber;
const int WaypointMetaData::kAppIDFieldNumber;
#endif  // !_MSC_VER

WaypointMetaData::WaypointMetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WaypointMetaData::InitAsDefaultInstance() {
}

WaypointMetaData::WaypointMetaData(const WaypointMetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WaypointMetaData::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  waypointid_ = 0;
  lat_ = 0;
  lon_ = 0;
  alt_ = 0;
  update_ = 0;
  seqnum_ = 0;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WaypointMetaData::~WaypointMetaData() {
  SharedDtor();
}

void WaypointMetaData::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void WaypointMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaypointMetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaypointMetaData_descriptor_;
}

const WaypointMetaData& WaypointMetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

WaypointMetaData* WaypointMetaData::default_instance_ = NULL;

WaypointMetaData* WaypointMetaData::New() const {
  return new WaypointMetaData;
}

void WaypointMetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
    waypointid_ = 0;
    lat_ = 0;
    lon_ = 0;
    alt_ = 0;
    update_ = 0;
    seqnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    appid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WaypointMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "WAYPOINT_METADATA"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eventID;
        break;
      }

      // optional string eventID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_waypointID;
        break;
      }

      // optional float waypointID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_waypointID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &waypointid_)));
          set_has_waypointid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_lat;
        break;
      }

      // optional float lat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_lon;
        break;
      }

      // optional float lon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_alt;
        break;
      }

      // optional float alt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_update;
        break;
      }

      // optional float update = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &update_)));
          set_has_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_seqnum;
        break;
      }

      // optional int32 seqnum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_globalID;
        break;
      }

      // optional string globalID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_appID;
        break;
      }

      // optional int32 appID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WaypointMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "WAYPOINT_METADATA"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string eventID = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->eventid(), output);
  }

  // optional float waypointID = 3;
  if (has_waypointid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->waypointid(), output);
  }

  // optional float lat = 4;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->lat(), output);
  }

  // optional float lon = 5;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->lon(), output);
  }

  // optional float alt = 6;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->alt(), output);
  }

  // optional float update = 7;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->update(), output);
  }

  // optional int32 seqnum = 8;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->seqnum(), output);
  }

  // optional string globalID = 9;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->globalid(), output);
  }

  // optional int32 appID = 10;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WaypointMetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "WAYPOINT_METADATA"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string eventID = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->eventid(), target);
  }

  // optional float waypointID = 3;
  if (has_waypointid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->waypointid(), target);
  }

  // optional float lat = 4;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->lat(), target);
  }

  // optional float lon = 5;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->lon(), target);
  }

  // optional float alt = 6;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->alt(), target);
  }

  // optional float update = 7;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->update(), target);
  }

  // optional int32 seqnum = 8;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->seqnum(), target);
  }

  // optional string globalID = 9;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->globalid(), target);
  }

  // optional int32 appID = 10;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WaypointMetaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "WAYPOINT_METADATA"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string eventID = 2;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

    // optional float waypointID = 3;
    if (has_waypointid()) {
      total_size += 1 + 4;
    }

    // optional float lat = 4;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float lon = 5;
    if (has_lon()) {
      total_size += 1 + 4;
    }

    // optional float alt = 6;
    if (has_alt()) {
      total_size += 1 + 4;
    }

    // optional float update = 7;
    if (has_update()) {
      total_size += 1 + 4;
    }

    // optional int32 seqnum = 8;
    if (has_seqnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string globalID = 9;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional int32 appID = 10;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaypointMetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WaypointMetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WaypointMetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WaypointMetaData::MergeFrom(const WaypointMetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_waypointid()) {
      set_waypointid(from.waypointid());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_update()) {
      set_update(from.update());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WaypointMetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaypointMetaData::CopyFrom(const WaypointMetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaypointMetaData::IsInitialized() const {

  return true;
}

void WaypointMetaData::Swap(WaypointMetaData* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(eventid_, other->eventid_);
    std::swap(waypointid_, other->waypointid_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(alt_, other->alt_);
    std::swap(update_, other->update_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(globalid_, other->globalid_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WaypointMetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaypointMetaData_descriptor_;
  metadata.reflection = WaypointMetaData_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GndpointMetaData::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GndpointMetaData::kMsgNameFieldNumber;
const int GndpointMetaData::kEventIDFieldNumber;
const int GndpointMetaData::kPointIDFieldNumber;
const int GndpointMetaData::kLatFieldNumber;
const int GndpointMetaData::kLonFieldNumber;
const int GndpointMetaData::kAltFieldNumber;
const int GndpointMetaData::kUpdateFieldNumber;
const int GndpointMetaData::kSeqnumFieldNumber;
const int GndpointMetaData::kGlobalIDFieldNumber;
const int GndpointMetaData::kAppIDFieldNumber;
#endif  // !_MSC_VER

GndpointMetaData::GndpointMetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GndpointMetaData::InitAsDefaultInstance() {
}

GndpointMetaData::GndpointMetaData(const GndpointMetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GndpointMetaData::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pointid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lat_ = 0;
  lon_ = 0;
  alt_ = 0;
  update_ = 0;
  seqnum_ = 0;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GndpointMetaData::~GndpointMetaData() {
  SharedDtor();
}

void GndpointMetaData::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (pointid_ != &::google::protobuf::internal::kEmptyString) {
    delete pointid_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void GndpointMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GndpointMetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GndpointMetaData_descriptor_;
}

const GndpointMetaData& GndpointMetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

GndpointMetaData* GndpointMetaData::default_instance_ = NULL;

GndpointMetaData* GndpointMetaData::New() const {
  return new GndpointMetaData;
}

void GndpointMetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
    if (has_pointid()) {
      if (pointid_ != &::google::protobuf::internal::kEmptyString) {
        pointid_->clear();
      }
    }
    lat_ = 0;
    lon_ = 0;
    alt_ = 0;
    update_ = 0;
    seqnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    appid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GndpointMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GNDPOINT_METADATA"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eventID;
        break;
      }

      // optional string eventID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pointID;
        break;
      }

      // optional string pointID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pointID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pointid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pointid().data(), this->pointid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_lat;
        break;
      }

      // optional float lat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_lon;
        break;
      }

      // optional float lon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_alt;
        break;
      }

      // optional float alt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_update;
        break;
      }

      // optional float update = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &update_)));
          set_has_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_seqnum;
        break;
      }

      // optional int32 seqnum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_globalID;
        break;
      }

      // optional string globalID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_appID;
        break;
      }

      // optional int32 appID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GndpointMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GNDPOINT_METADATA"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string eventID = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->eventid(), output);
  }

  // optional string pointID = 3;
  if (has_pointid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pointid().data(), this->pointid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pointid(), output);
  }

  // optional float lat = 4;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->lat(), output);
  }

  // optional float lon = 5;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->lon(), output);
  }

  // optional float alt = 6;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->alt(), output);
  }

  // optional float update = 7;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->update(), output);
  }

  // optional int32 seqnum = 8;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->seqnum(), output);
  }

  // optional string globalID = 9;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->globalid(), output);
  }

  // optional int32 appID = 10;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GndpointMetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GNDPOINT_METADATA"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string eventID = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->eventid(), target);
  }

  // optional string pointID = 3;
  if (has_pointid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pointid().data(), this->pointid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pointid(), target);
  }

  // optional float lat = 4;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->lat(), target);
  }

  // optional float lon = 5;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->lon(), target);
  }

  // optional float alt = 6;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->alt(), target);
  }

  // optional float update = 7;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->update(), target);
  }

  // optional int32 seqnum = 8;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->seqnum(), target);
  }

  // optional string globalID = 9;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->globalid(), target);
  }

  // optional int32 appID = 10;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GndpointMetaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GNDPOINT_METADATA"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string eventID = 2;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

    // optional string pointID = 3;
    if (has_pointid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pointid());
    }

    // optional float lat = 4;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float lon = 5;
    if (has_lon()) {
      total_size += 1 + 4;
    }

    // optional float alt = 6;
    if (has_alt()) {
      total_size += 1 + 4;
    }

    // optional float update = 7;
    if (has_update()) {
      total_size += 1 + 4;
    }

    // optional int32 seqnum = 8;
    if (has_seqnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string globalID = 9;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional int32 appID = 10;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GndpointMetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GndpointMetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GndpointMetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GndpointMetaData::MergeFrom(const GndpointMetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_pointid()) {
      set_pointid(from.pointid());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_update()) {
      set_update(from.update());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GndpointMetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GndpointMetaData::CopyFrom(const GndpointMetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GndpointMetaData::IsInitialized() const {

  return true;
}

void GndpointMetaData::Swap(GndpointMetaData* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(eventid_, other->eventid_);
    std::swap(pointid_, other->pointid_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(alt_, other->alt_);
    std::swap(update_, other->update_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(globalid_, other->globalid_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GndpointMetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GndpointMetaData_descriptor_;
  metadata.reflection = GndpointMetaData_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RemoteMessage::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RemoteMessage::kMsgNameFieldNumber;
const int RemoteMessage::kMsgPassFieldNumber;
const int RemoteMessage::kFormatFieldNumber;
const int RemoteMessage::kContentFieldNumber;
const int RemoteMessage::kMsgIDFieldNumber;
#endif  // !_MSC_VER

RemoteMessage::RemoteMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteMessage::InitAsDefaultInstance() {
}

RemoteMessage::RemoteMessage(const RemoteMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteMessage::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  msgpass_ = true;
  format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteMessage::~RemoteMessage() {
  SharedDtor();
}

void RemoteMessage::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (format_ != &::google::protobuf::internal::kEmptyString) {
    delete format_;
  }
  if (this != default_instance_) {
  }
}

void RemoteMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteMessage_descriptor_;
}

const RemoteMessage& RemoteMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

RemoteMessage* RemoteMessage::default_instance_ = NULL;

RemoteMessage* RemoteMessage::New() const {
  return new RemoteMessage;
}

void RemoteMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    msgpass_ = true;
    if (has_format()) {
      if (format_ != &::google::protobuf::internal::kEmptyString) {
        format_->clear();
      }
    }
    msgid_ = 0;
  }
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "REMOTE_MESSAGE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgPass;
        break;
      }

      // optional bool msgPass = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgPass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &msgpass_)));
          set_has_msgpass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_format;
        break;
      }

      // optional string format = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // repeated string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content(this->content_size() - 1).data(),
            this->content(this->content_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        if (input->ExpectTag(41)) goto parse_msgID;
        break;
      }

      // optional double msgID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_msgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "REMOTE_MESSAGE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool msgPass = 2 [default = true];
  if (has_msgpass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->msgpass(), output);
  }

  // optional string format = 3;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->format(), output);
  }

  // repeated string content = 4;
  for (int i = 0; i < this->content_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->content(i).data(), this->content(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(i), output);
  }

  // optional double msgID = 5;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "REMOTE_MESSAGE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool msgPass = 2 [default = true];
  if (has_msgpass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->msgpass(), target);
  }

  // optional string format = 3;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->format(), target);
  }

  // repeated string content = 4;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content(i).data(), this->content(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->content(i), target);
  }

  // optional double msgID = 5;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "REMOTE_MESSAGE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool msgPass = 2 [default = true];
    if (has_msgpass()) {
      total_size += 1 + 1;
    }

    // optional string format = 3;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }

    // optional double msgID = 5;
    if (has_msgid()) {
      total_size += 1 + 8;
    }

  }
  // repeated string content = 4;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->content(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteMessage::MergeFrom(const RemoteMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_msgpass()) {
      set_msgpass(from.msgpass());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteMessage::CopyFrom(const RemoteMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteMessage::IsInitialized() const {

  return true;
}

void RemoteMessage::Swap(RemoteMessage* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(msgpass_, other->msgpass_);
    std::swap(format_, other->format_);
    content_.Swap(&other->content_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteMessage_descriptor_;
  metadata.reflection = RemoteMessage_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GPSPlatPos::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GPSPlatPos::kMsgNameFieldNumber;
const int GPSPlatPos::kLatitudeFieldNumber;
const int GPSPlatPos::kLongitudeFieldNumber;
const int GPSPlatPos::kHeadingFieldNumber;
#endif  // !_MSC_VER

GPSPlatPos::GPSPlatPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GPSPlatPos::InitAsDefaultInstance() {
}

GPSPlatPos::GPSPlatPos(const GPSPlatPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GPSPlatPos::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  latitude_ = 0;
  longitude_ = 0;
  heading_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPSPlatPos::~GPSPlatPos() {
  SharedDtor();
}

void GPSPlatPos::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void GPSPlatPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSPlatPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSPlatPos_descriptor_;
}

const GPSPlatPos& GPSPlatPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

GPSPlatPos* GPSPlatPos::default_instance_ = NULL;

GPSPlatPos* GPSPlatPos::New() const {
  return new GPSPlatPos;
}

void GPSPlatPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    latitude_ = 0;
    longitude_ = 0;
    heading_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPSPlatPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GPS_CURRENT_POSITION"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_latitude;
        break;
      }

      // optional float latitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_longitude;
        break;
      }

      // optional float longitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_heading;
        break;
      }

      // optional float heading = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GPSPlatPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GPS_CURRENT_POSITION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional float latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->latitude(), output);
  }

  // optional float longitude = 3;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->longitude(), output);
  }

  // optional float heading = 4;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->heading(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GPSPlatPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GPS_CURRENT_POSITION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional float latitude = 2;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->latitude(), target);
  }

  // optional float longitude = 3;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->longitude(), target);
  }

  // optional float heading = 4;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->heading(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GPSPlatPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GPS_CURRENT_POSITION"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional float latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 3;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional float heading = 4;
    if (has_heading()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSPlatPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPSPlatPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPSPlatPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPSPlatPos::MergeFrom(const GPSPlatPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPSPlatPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSPlatPos::CopyFrom(const GPSPlatPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSPlatPos::IsInitialized() const {

  return true;
}

void GPSPlatPos::Swap(GPSPlatPos* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(heading_, other->heading_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPSPlatPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPSPlatPos_descriptor_;
  metadata.reflection = GPSPlatPos_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RequestPsd::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RequestPsd::kMsgNameFieldNumber;
const int RequestPsd::kResIDFieldNumber;
const int RequestPsd::kArchiveNumFieldNumber;
const int RequestPsd::kReturnChanFieldNumber;
#endif  // !_MSC_VER

RequestPsd::RequestPsd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestPsd::InitAsDefaultInstance() {
}

RequestPsd::RequestPsd(const RequestPsd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestPsd::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  archivenum_ = 0;
  returnchan_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPsd::~RequestPsd() {
  SharedDtor();
}

void RequestPsd::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (this != default_instance_) {
  }
}

void RequestPsd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPsd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPsd_descriptor_;
}

const RequestPsd& RequestPsd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

RequestPsd* RequestPsd::default_instance_ = NULL;

RequestPsd* RequestPsd::New() const {
  return new RequestPsd;
}

void RequestPsd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    archivenum_ = 0;
    returnchan_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPsd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "REQUEST_PSD"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_archiveNum;
        break;
      }

      // optional int32 archiveNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_archiveNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &archivenum_)));
          set_has_archivenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_returnChan;
        break;
      }

      // optional int32 returnChan = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_returnChan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnchan_)));
          set_has_returnchan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestPsd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "REQUEST_PSD"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional int32 archiveNum = 3;
  if (has_archivenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->archivenum(), output);
  }

  // optional int32 returnChan = 4;
  if (has_returnchan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->returnchan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestPsd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "REQUEST_PSD"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional int32 archiveNum = 3;
  if (has_archivenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->archivenum(), target);
  }

  // optional int32 returnChan = 4;
  if (has_returnchan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->returnchan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestPsd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "REQUEST_PSD"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional int32 archiveNum = 3;
    if (has_archivenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->archivenum());
    }

    // optional int32 returnChan = 4;
    if (has_returnchan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnchan());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPsd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPsd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPsd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPsd::MergeFrom(const RequestPsd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_archivenum()) {
      set_archivenum(from.archivenum());
    }
    if (from.has_returnchan()) {
      set_returnchan(from.returnchan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPsd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPsd::CopyFrom(const RequestPsd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPsd::IsInitialized() const {

  return true;
}

void RequestPsd::Swap(RequestPsd* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(archivenum_, other->archivenum_);
    std::swap(returnchan_, other->returnchan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPsd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPsd_descriptor_;
  metadata.reflection = RequestPsd_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SetAtten_AutoAtten_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetAtten_AutoAtten_descriptor_;
}
bool SetAtten_AutoAtten_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SetAtten_AutoAtten SetAtten::OFF;
const SetAtten_AutoAtten SetAtten::ON;
const SetAtten_AutoAtten SetAtten::AutoAtten_MIN;
const SetAtten_AutoAtten SetAtten::AutoAtten_MAX;
const int SetAtten::AutoAtten_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* SetAtten::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SetAtten::kMsgNameFieldNumber;
const int SetAtten::kAppIDFieldNumber;
const int SetAtten::kAutoAttenFieldNumber;
const int SetAtten::kAttenFieldNumber;
#endif  // !_MSC_VER

SetAtten::SetAtten()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetAtten::InitAsDefaultInstance() {
}

SetAtten::SetAtten(const SetAtten& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetAtten::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  appid_ = 0;
  autoatten_ = 1;
  atten_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetAtten::~SetAtten() {
  SharedDtor();
}

void SetAtten::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void SetAtten::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetAtten::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetAtten_descriptor_;
}

const SetAtten& SetAtten::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

SetAtten* SetAtten::default_instance_ = NULL;

SetAtten* SetAtten::New() const {
  return new SetAtten;
}

void SetAtten::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    appid_ = 0;
    autoatten_ = 1;
    atten_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetAtten::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SET_ATTEN"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appID;
        break;
      }

      // optional int32 appID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_autoAtten;
        break;
      }

      // optional .falcon_remoting_msg.SetAtten.AutoAtten autoAtten = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoAtten:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::SetAtten_AutoAtten_IsValid(value)) {
            set_autoatten(static_cast< ::falcon_remoting_msg::SetAtten_AutoAtten >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_atten;
        break;
      }

      // optional int32 atten = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atten:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atten_)));
          set_has_atten();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetAtten::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SET_ATTEN"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  // optional .falcon_remoting_msg.SetAtten.AutoAtten autoAtten = 3;
  if (has_autoatten()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->autoatten(), output);
  }

  // optional int32 atten = 4;
  if (has_atten()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->atten(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetAtten::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SET_ATTEN"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  // optional .falcon_remoting_msg.SetAtten.AutoAtten autoAtten = 3;
  if (has_autoatten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->autoatten(), target);
  }

  // optional int32 atten = 4;
  if (has_atten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->atten(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetAtten::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SET_ATTEN"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 appID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional .falcon_remoting_msg.SetAtten.AutoAtten autoAtten = 3;
    if (has_autoatten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->autoatten());
    }

    // optional int32 atten = 4;
    if (has_atten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atten());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetAtten::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetAtten* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetAtten*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetAtten::MergeFrom(const SetAtten& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_autoatten()) {
      set_autoatten(from.autoatten());
    }
    if (from.has_atten()) {
      set_atten(from.atten());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetAtten::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAtten::CopyFrom(const SetAtten& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAtten::IsInitialized() const {

  return true;
}

void SetAtten::Swap(SetAtten* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(appid_, other->appid_);
    std::swap(autoatten_, other->autoatten_);
    std::swap(atten_, other->atten_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetAtten::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetAtten_descriptor_;
  metadata.reflection = SetAtten_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SearchControl_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchControl_Action_descriptor_;
}
bool SearchControl_Action_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SearchControl_Action SearchControl::START;
const SearchControl_Action SearchControl::PAUSE;
const SearchControl_Action SearchControl::STEPFORWARD;
const SearchControl_Action SearchControl::STEPBACKWARD;
const SearchControl_Action SearchControl::Action_MIN;
const SearchControl_Action SearchControl::Action_MAX;
const int SearchControl::Action_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* SearchControl::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SearchControl::kMsgNameFieldNumber;
const int SearchControl::kAppIDFieldNumber;
const int SearchControl::kActionFieldNumber;
#endif  // !_MSC_VER

SearchControl::SearchControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchControl::InitAsDefaultInstance() {
}

SearchControl::SearchControl(const SearchControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchControl::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  appid_ = 0;
  action_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchControl::~SearchControl() {
  SharedDtor();
}

void SearchControl::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void SearchControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchControl_descriptor_;
}

const SearchControl& SearchControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

SearchControl* SearchControl::default_instance_ = NULL;

SearchControl* SearchControl::New() const {
  return new SearchControl;
}

void SearchControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    appid_ = 0;
    action_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SEARCH_CONTROL"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appID;
        break;
      }

      // optional int32 appID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional .falcon_remoting_msg.SearchControl.Action action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::SearchControl_Action_IsValid(value)) {
            set_action(static_cast< ::falcon_remoting_msg::SearchControl_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SEARCH_CONTROL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  // optional .falcon_remoting_msg.SearchControl.Action action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SEARCH_CONTROL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  // optional .falcon_remoting_msg.SearchControl.Action action = 3;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SEARCH_CONTROL"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 appID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional .falcon_remoting_msg.SearchControl.Action action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchControl::MergeFrom(const SearchControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchControl::CopyFrom(const SearchControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchControl::IsInitialized() const {

  return true;
}

void SearchControl::Swap(SearchControl* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(appid_, other->appid_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchControl_descriptor_;
  metadata.reflection = SearchControl_reflection_;
  return metadata;
}


// ===================================================================

::std::string* FrequencyTune::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int FrequencyTune::kMsgNameFieldNumber;
const int FrequencyTune::kAppIDFieldNumber;
const int FrequencyTune::kFreqFieldNumber;
#endif  // !_MSC_VER

FrequencyTune::FrequencyTune()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrequencyTune::InitAsDefaultInstance() {
}

FrequencyTune::FrequencyTune(const FrequencyTune& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrequencyTune::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  appid_ = 0;
  freq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrequencyTune::~FrequencyTune() {
  SharedDtor();
}

void FrequencyTune::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void FrequencyTune::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrequencyTune::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrequencyTune_descriptor_;
}

const FrequencyTune& FrequencyTune::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

FrequencyTune* FrequencyTune::default_instance_ = NULL;

FrequencyTune* FrequencyTune::New() const {
  return new FrequencyTune;
}

void FrequencyTune::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    appid_ = 0;
    freq_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrequencyTune::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "FREQUENCY_TUNE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appID;
        break;
      }

      // optional int32 appID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_freq;
        break;
      }

      // optional float freq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrequencyTune::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "FREQUENCY_TUNE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  // optional float freq = 3;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->freq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrequencyTune::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "FREQUENCY_TUNE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  // optional float freq = 3;
  if (has_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->freq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrequencyTune::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "FREQUENCY_TUNE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 appID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional float freq = 3;
    if (has_freq()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrequencyTune::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrequencyTune* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrequencyTune*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrequencyTune::MergeFrom(const FrequencyTune& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_freq()) {
      set_freq(from.freq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrequencyTune::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrequencyTune::CopyFrom(const FrequencyTune& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrequencyTune::IsInitialized() const {

  return true;
}

void FrequencyTune::Swap(FrequencyTune* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(appid_, other->appid_);
    std::swap(freq_, other->freq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrequencyTune::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrequencyTune_descriptor_;
  metadata.reflection = FrequencyTune_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PredRecord_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PredRecord_Action_descriptor_;
}
bool PredRecord_Action_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PredRecord_Action PredRecord::START;
const PredRecord_Action PredRecord::STOP;
const PredRecord_Action PredRecord::Action_MIN;
const PredRecord_Action PredRecord::Action_MAX;
const int PredRecord::Action_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* PredRecord::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int PredRecord::kMsgNameFieldNumber;
const int PredRecord::kAppIDFieldNumber;
const int PredRecord::kPredRecordFieldNumber;
#endif  // !_MSC_VER

PredRecord::PredRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PredRecord::InitAsDefaultInstance() {
}

PredRecord::PredRecord(const PredRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PredRecord::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  appid_ = 0;
  predrecord_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PredRecord::~PredRecord() {
  SharedDtor();
}

void PredRecord::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void PredRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PredRecord_descriptor_;
}

const PredRecord& PredRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

PredRecord* PredRecord::default_instance_ = NULL;

PredRecord* PredRecord::New() const {
  return new PredRecord;
}

void PredRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    appid_ = 0;
    predrecord_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PredRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "PRED_RECORD"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appID;
        break;
      }

      // optional int32 appID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_predRecord;
        break;
      }

      // optional .falcon_remoting_msg.PredRecord.Action predRecord = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_predRecord:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::PredRecord_Action_IsValid(value)) {
            set_predrecord(static_cast< ::falcon_remoting_msg::PredRecord_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PredRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "PRED_RECORD"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  // optional .falcon_remoting_msg.PredRecord.Action predRecord = 3;
  if (has_predrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->predrecord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PredRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "PRED_RECORD"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  // optional .falcon_remoting_msg.PredRecord.Action predRecord = 3;
  if (has_predrecord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->predrecord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PredRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "PRED_RECORD"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 appID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional .falcon_remoting_msg.PredRecord.Action predRecord = 3;
    if (has_predrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->predrecord());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PredRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PredRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PredRecord::MergeFrom(const PredRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_predrecord()) {
      set_predrecord(from.predrecord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PredRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredRecord::CopyFrom(const PredRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredRecord::IsInitialized() const {

  return true;
}

void PredRecord::Swap(PredRecord* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(appid_, other->appid_);
    std::swap(predrecord_, other->predrecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PredRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PredRecord_descriptor_;
  metadata.reflection = PredRecord_reflection_;
  return metadata;
}


// ===================================================================

::std::string* PredSnap::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int PredSnap::kMsgNameFieldNumber;
const int PredSnap::kAppIDFieldNumber;
const int PredSnap::kSnapLengthFieldNumber;
const int PredSnap::kTakeSnapFieldNumber;
#endif  // !_MSC_VER

PredSnap::PredSnap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PredSnap::InitAsDefaultInstance() {
}

PredSnap::PredSnap(const PredSnap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PredSnap::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  appid_ = 0;
  snaplength_ = 0;
  takesnap_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PredSnap::~PredSnap() {
  SharedDtor();
}

void PredSnap::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void PredSnap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredSnap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PredSnap_descriptor_;
}

const PredSnap& PredSnap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

PredSnap* PredSnap::default_instance_ = NULL;

PredSnap* PredSnap::New() const {
  return new PredSnap;
}

void PredSnap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    appid_ = 0;
    snaplength_ = 0;
    takesnap_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PredSnap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "PRED_SNAP"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appID;
        break;
      }

      // optional int32 appID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_snapLength;
        break;
      }

      // optional int32 snapLength = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snapLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snaplength_)));
          set_has_snaplength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_takeSnap;
        break;
      }

      // optional bool takeSnap = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_takeSnap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &takesnap_)));
          set_has_takesnap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PredSnap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "PRED_SNAP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  // optional int32 snapLength = 3;
  if (has_snaplength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->snaplength(), output);
  }

  // optional bool takeSnap = 4;
  if (has_takesnap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->takesnap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PredSnap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "PRED_SNAP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  // optional int32 snapLength = 3;
  if (has_snaplength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->snaplength(), target);
  }

  // optional bool takeSnap = 4;
  if (has_takesnap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->takesnap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PredSnap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "PRED_SNAP"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 appID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional int32 snapLength = 3;
    if (has_snaplength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snaplength());
    }

    // optional bool takeSnap = 4;
    if (has_takesnap()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredSnap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PredSnap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PredSnap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PredSnap::MergeFrom(const PredSnap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_snaplength()) {
      set_snaplength(from.snaplength());
    }
    if (from.has_takesnap()) {
      set_takesnap(from.takesnap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PredSnap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredSnap::CopyFrom(const PredSnap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredSnap::IsInitialized() const {

  return true;
}

void PredSnap::Swap(PredSnap* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(appid_, other->appid_);
    std::swap(snaplength_, other->snaplength_);
    std::swap(takesnap_, other->takesnap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PredSnap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PredSnap_descriptor_;
  metadata.reflection = PredSnap_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* VideoControl_Record_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoControl_Record_descriptor_;
}
bool VideoControl_Record_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VideoControl_Record VideoControl::START;
const VideoControl_Record VideoControl::STOP;
const VideoControl_Record VideoControl::Record_MIN;
const VideoControl_Record VideoControl::Record_MAX;
const int VideoControl::Record_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* VideoControl_Sync_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoControl_Sync_descriptor_;
}
bool VideoControl_Sync_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VideoControl_Sync VideoControl::OFF;
const VideoControl_Sync VideoControl::ON;
const VideoControl_Sync VideoControl::Sync_MIN;
const VideoControl_Sync VideoControl::Sync_MAX;
const int VideoControl::Sync_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* VideoControl_Mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoControl_Mode_descriptor_;
}
bool VideoControl_Mode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VideoControl_Mode VideoControl::DISABLE;
const VideoControl_Mode VideoControl::CONTINUOUS;
const VideoControl_Mode VideoControl::SNAPSHOT;
const VideoControl_Mode VideoControl::Mode_MIN;
const VideoControl_Mode VideoControl::Mode_MAX;
const int VideoControl::Mode_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* VideoControl::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int VideoControl::kMsgNameFieldNumber;
const int VideoControl::kAppIDFieldNumber;
const int VideoControl::kVideoRecordFieldNumber;
const int VideoControl::kVideoSyncFieldNumber;
const int VideoControl::kVideoIntegrationFieldNumber;
const int VideoControl::kJpegCommandFieldNumber;
const int VideoControl::kJpegRateFieldNumber;
#endif  // !_MSC_VER

VideoControl::VideoControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoControl::InitAsDefaultInstance() {
}

VideoControl::VideoControl(const VideoControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoControl::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  appid_ = 0;
  videorecord_ = 1;
  videosync_ = 1;
  videointegration_ = 0;
  jpegcommand_ = 1;
  jpegrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoControl::~VideoControl() {
  SharedDtor();
}

void VideoControl::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void VideoControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoControl_descriptor_;
}

const VideoControl& VideoControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

VideoControl* VideoControl::default_instance_ = NULL;

VideoControl* VideoControl::New() const {
  return new VideoControl;
}

void VideoControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    appid_ = 0;
    videorecord_ = 1;
    videosync_ = 1;
    videointegration_ = 0;
    jpegcommand_ = 1;
    jpegrate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "VIDEO_CONTROL"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appID;
        break;
      }

      // optional int32 appID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_videoRecord;
        break;
      }

      // optional .falcon_remoting_msg.VideoControl.Record videoRecord = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_videoRecord:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::VideoControl_Record_IsValid(value)) {
            set_videorecord(static_cast< ::falcon_remoting_msg::VideoControl_Record >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_videoSync;
        break;
      }

      // optional .falcon_remoting_msg.VideoControl.Sync videoSync = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_videoSync:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::VideoControl_Sync_IsValid(value)) {
            set_videosync(static_cast< ::falcon_remoting_msg::VideoControl_Sync >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_videoIntegration;
        break;
      }

      // optional int32 videoIntegration = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_videoIntegration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videointegration_)));
          set_has_videointegration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_jpegCommand;
        break;
      }

      // optional .falcon_remoting_msg.VideoControl.Mode jpegCommand = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jpegCommand:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::VideoControl_Mode_IsValid(value)) {
            set_jpegcommand(static_cast< ::falcon_remoting_msg::VideoControl_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_jpegRate;
        break;
      }

      // optional int32 jpegRate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jpegRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jpegrate_)));
          set_has_jpegrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "VIDEO_CONTROL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  // optional .falcon_remoting_msg.VideoControl.Record videoRecord = 3;
  if (has_videorecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->videorecord(), output);
  }

  // optional .falcon_remoting_msg.VideoControl.Sync videoSync = 4;
  if (has_videosync()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->videosync(), output);
  }

  // optional int32 videoIntegration = 5;
  if (has_videointegration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->videointegration(), output);
  }

  // optional .falcon_remoting_msg.VideoControl.Mode jpegCommand = 6;
  if (has_jpegcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->jpegcommand(), output);
  }

  // optional int32 jpegRate = 7;
  if (has_jpegrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->jpegrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "VIDEO_CONTROL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  // optional .falcon_remoting_msg.VideoControl.Record videoRecord = 3;
  if (has_videorecord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->videorecord(), target);
  }

  // optional .falcon_remoting_msg.VideoControl.Sync videoSync = 4;
  if (has_videosync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->videosync(), target);
  }

  // optional int32 videoIntegration = 5;
  if (has_videointegration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->videointegration(), target);
  }

  // optional .falcon_remoting_msg.VideoControl.Mode jpegCommand = 6;
  if (has_jpegcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->jpegcommand(), target);
  }

  // optional int32 jpegRate = 7;
  if (has_jpegrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->jpegrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "VIDEO_CONTROL"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 appID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional .falcon_remoting_msg.VideoControl.Record videoRecord = 3;
    if (has_videorecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->videorecord());
    }

    // optional .falcon_remoting_msg.VideoControl.Sync videoSync = 4;
    if (has_videosync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->videosync());
    }

    // optional int32 videoIntegration = 5;
    if (has_videointegration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videointegration());
    }

    // optional .falcon_remoting_msg.VideoControl.Mode jpegCommand = 6;
    if (has_jpegcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->jpegcommand());
    }

    // optional int32 jpegRate = 7;
    if (has_jpegrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jpegrate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoControl::MergeFrom(const VideoControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_videorecord()) {
      set_videorecord(from.videorecord());
    }
    if (from.has_videosync()) {
      set_videosync(from.videosync());
    }
    if (from.has_videointegration()) {
      set_videointegration(from.videointegration());
    }
    if (from.has_jpegcommand()) {
      set_jpegcommand(from.jpegcommand());
    }
    if (from.has_jpegrate()) {
      set_jpegrate(from.jpegrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoControl::CopyFrom(const VideoControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoControl::IsInitialized() const {

  return true;
}

void VideoControl::Swap(VideoControl* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(appid_, other->appid_);
    std::swap(videorecord_, other->videorecord_);
    std::swap(videosync_, other->videosync_);
    std::swap(videointegration_, other->videointegration_);
    std::swap(jpegcommand_, other->jpegcommand_);
    std::swap(jpegrate_, other->jpegrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoControl_descriptor_;
  metadata.reflection = VideoControl_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FhopSettings_FreqHopMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FhopSettings_FreqHopMode_descriptor_;
}
bool FhopSettings_FreqHopMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FhopSettings_FreqHopMode FhopSettings::AUTOMATIC;
const FhopSettings_FreqHopMode FhopSettings::USER_CLICKS;
const FhopSettings_FreqHopMode FhopSettings::MANUALLY_ENTER;
const FhopSettings_FreqHopMode FhopSettings::RESET;
const FhopSettings_FreqHopMode FhopSettings::FreqHopMode_MIN;
const FhopSettings_FreqHopMode FhopSettings::FreqHopMode_MAX;
const int FhopSettings::FreqHopMode_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* FhopSettings::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int FhopSettings::kMsgNameFieldNumber;
const int FhopSettings::kAppIDFieldNumber;
const int FhopSettings::kFreqHopModeFieldNumber;
const int FhopSettings::kTunerLockFieldNumber;
const int FhopSettings::kTunerFreqFieldNumber;
#endif  // !_MSC_VER

FhopSettings::FhopSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FhopSettings::InitAsDefaultInstance() {
}

FhopSettings::FhopSettings(const FhopSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FhopSettings::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  appid_ = 0;
  freqhopmode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FhopSettings::~FhopSettings() {
  SharedDtor();
}

void FhopSettings::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void FhopSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FhopSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FhopSettings_descriptor_;
}

const FhopSettings& FhopSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

FhopSettings* FhopSettings::default_instance_ = NULL;

FhopSettings* FhopSettings::New() const {
  return new FhopSettings;
}

void FhopSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    appid_ = 0;
    freqhopmode_ = 1;
  }
  tunerlock_.Clear();
  tunerfreq_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FhopSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "FHOP_SETTINGS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appID;
        break;
      }

      // optional int32 appID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_freqHopMode;
        break;
      }

      // optional .falcon_remoting_msg.FhopSettings.FreqHopMode freqHopMode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freqHopMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::FhopSettings_FreqHopMode_IsValid(value)) {
            set_freqhopmode(static_cast< ::falcon_remoting_msg::FhopSettings_FreqHopMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tunerLock;
        break;
      }

      // repeated .falcon_remoting_msg.TunerLock tunerLock = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tunerLock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tunerlock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tunerLock;
        if (input->ExpectTag(45)) goto parse_tunerFreq;
        break;
      }

      // repeated float tunerFreq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tunerFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_tunerfreq())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tunerfreq())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_tunerFreq;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FhopSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "FHOP_SETTINGS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  // optional .falcon_remoting_msg.FhopSettings.FreqHopMode freqHopMode = 3;
  if (has_freqhopmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->freqhopmode(), output);
  }

  // repeated .falcon_remoting_msg.TunerLock tunerLock = 4;
  for (int i = 0; i < this->tunerlock_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tunerlock(i), output);
  }

  // repeated float tunerFreq = 5;
  for (int i = 0; i < this->tunerfreq_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->tunerfreq(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FhopSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "FHOP_SETTINGS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  // optional .falcon_remoting_msg.FhopSettings.FreqHopMode freqHopMode = 3;
  if (has_freqhopmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->freqhopmode(), target);
  }

  // repeated .falcon_remoting_msg.TunerLock tunerLock = 4;
  for (int i = 0; i < this->tunerlock_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tunerlock(i), target);
  }

  // repeated float tunerFreq = 5;
  for (int i = 0; i < this->tunerfreq_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->tunerfreq(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FhopSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "FHOP_SETTINGS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 appID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional .falcon_remoting_msg.FhopSettings.FreqHopMode freqHopMode = 3;
    if (has_freqhopmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->freqhopmode());
    }

  }
  // repeated .falcon_remoting_msg.TunerLock tunerLock = 4;
  total_size += 1 * this->tunerlock_size();
  for (int i = 0; i < this->tunerlock_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tunerlock(i));
  }

  // repeated float tunerFreq = 5;
  {
    int data_size = 0;
    data_size = 4 * this->tunerfreq_size();
    total_size += 1 * this->tunerfreq_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FhopSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FhopSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FhopSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FhopSettings::MergeFrom(const FhopSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  tunerlock_.MergeFrom(from.tunerlock_);
  tunerfreq_.MergeFrom(from.tunerfreq_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_freqhopmode()) {
      set_freqhopmode(from.freqhopmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FhopSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FhopSettings::CopyFrom(const FhopSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FhopSettings::IsInitialized() const {

  return true;
}

void FhopSettings::Swap(FhopSettings* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(appid_, other->appid_);
    std::swap(freqhopmode_, other->freqhopmode_);
    tunerlock_.Swap(&other->tunerlock_);
    tunerfreq_.Swap(&other->tunerfreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FhopSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FhopSettings_descriptor_;
  metadata.reflection = FhopSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TunerLock::kTunerFieldNumber;
const int TunerLock::kLockFieldNumber;
#endif  // !_MSC_VER

TunerLock::TunerLock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TunerLock::InitAsDefaultInstance() {
}

TunerLock::TunerLock(const TunerLock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TunerLock::SharedCtor() {
  _cached_size_ = 0;
  tuner_ = 0;
  lock_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TunerLock::~TunerLock() {
  SharedDtor();
}

void TunerLock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TunerLock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TunerLock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TunerLock_descriptor_;
}

const TunerLock& TunerLock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

TunerLock* TunerLock::default_instance_ = NULL;

TunerLock* TunerLock::New() const {
  return new TunerLock;
}

void TunerLock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tuner_ = 0;
    lock_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TunerLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tuner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tuner_)));
          set_has_tuner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lock;
        break;
      }

      // optional bool lock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TunerLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tuner = 1;
  if (has_tuner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tuner(), output);
  }

  // optional bool lock = 2;
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->lock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TunerLock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tuner = 1;
  if (has_tuner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tuner(), target);
  }

  // optional bool lock = 2;
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->lock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TunerLock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tuner = 1;
    if (has_tuner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tuner());
    }

    // optional bool lock = 2;
    if (has_lock()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TunerLock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TunerLock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TunerLock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TunerLock::MergeFrom(const TunerLock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tuner()) {
      set_tuner(from.tuner());
    }
    if (from.has_lock()) {
      set_lock(from.lock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TunerLock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunerLock::CopyFrom(const TunerLock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunerLock::IsInitialized() const {

  return true;
}

void TunerLock::Swap(TunerLock* other) {
  if (other != this) {
    std::swap(tuner_, other->tuner_);
    std::swap(lock_, other->lock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TunerLock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TunerLock_descriptor_;
  metadata.reflection = TunerLock_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AntennaScanStatus_ScanStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AntennaScanStatus_ScanStatus_descriptor_;
}
bool AntennaScanStatus_ScanStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AntennaScanStatus_ScanStatus AntennaScanStatus::STANDBY;
const AntennaScanStatus_ScanStatus AntennaScanStatus::SCANNING;
const AntennaScanStatus_ScanStatus AntennaScanStatus::ENERGY;
const AntennaScanStatus_ScanStatus AntennaScanStatus::TRACKING;
const AntennaScanStatus_ScanStatus AntennaScanStatus::MOVING;
const AntennaScanStatus_ScanStatus AntennaScanStatus::ScanStatus_MIN;
const AntennaScanStatus_ScanStatus AntennaScanStatus::ScanStatus_MAX;
const int AntennaScanStatus::ScanStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* AntennaScanStatus_TrackStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AntennaScanStatus_TrackStatus_descriptor_;
}
bool AntennaScanStatus_TrackStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AntennaScanStatus_TrackStatus AntennaScanStatus::OFF;
const AntennaScanStatus_TrackStatus AntennaScanStatus::ON;
const AntennaScanStatus_TrackStatus AntennaScanStatus::TrackStatus_MIN;
const AntennaScanStatus_TrackStatus AntennaScanStatus::TrackStatus_MAX;
const int AntennaScanStatus::TrackStatus_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* AntennaScanStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int AntennaScanStatus::kMsgNameFieldNumber;
const int AntennaScanStatus::kAppIDFieldNumber;
const int AntennaScanStatus::kScanStatusFieldNumber;
const int AntennaScanStatus::kTrackStatusFieldNumber;
const int AntennaScanStatus::kMinScanAngleFieldNumber;
const int AntennaScanStatus::kMaxScanAngleFieldNumber;
#endif  // !_MSC_VER

AntennaScanStatus::AntennaScanStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AntennaScanStatus::InitAsDefaultInstance() {
}

AntennaScanStatus::AntennaScanStatus(const AntennaScanStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AntennaScanStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  appid_ = 0;
  scanstatus_ = 0;
  trackstatus_ = 0;
  minscanangle_ = 0;
  maxscanangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AntennaScanStatus::~AntennaScanStatus() {
  SharedDtor();
}

void AntennaScanStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void AntennaScanStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AntennaScanStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AntennaScanStatus_descriptor_;
}

const AntennaScanStatus& AntennaScanStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

AntennaScanStatus* AntennaScanStatus::default_instance_ = NULL;

AntennaScanStatus* AntennaScanStatus::New() const {
  return new AntennaScanStatus;
}

void AntennaScanStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    appid_ = 0;
    scanstatus_ = 0;
    trackstatus_ = 0;
    minscanangle_ = 0;
    maxscanangle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AntennaScanStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ANTENNA_SCAN_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appID;
        break;
      }

      // optional int32 appID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scanStatus;
        break;
      }

      // optional .falcon_remoting_msg.AntennaScanStatus.ScanStatus scanStatus = 3 [default = STANDBY];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scanStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::AntennaScanStatus_ScanStatus_IsValid(value)) {
            set_scanstatus(static_cast< ::falcon_remoting_msg::AntennaScanStatus_ScanStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_trackStatus;
        break;
      }

      // optional .falcon_remoting_msg.AntennaScanStatus.TrackStatus trackStatus = 4 [default = OFF];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trackStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::AntennaScanStatus_TrackStatus_IsValid(value)) {
            set_trackstatus(static_cast< ::falcon_remoting_msg::AntennaScanStatus_TrackStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_minScanAngle;
        break;
      }

      // optional float minScanAngle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minscanangle_)));
          set_has_minscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_maxScanAngle;
        break;
      }

      // optional float maxScanAngle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxscanangle_)));
          set_has_maxscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AntennaScanStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ANTENNA_SCAN_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  // optional .falcon_remoting_msg.AntennaScanStatus.ScanStatus scanStatus = 3 [default = STANDBY];
  if (has_scanstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->scanstatus(), output);
  }

  // optional .falcon_remoting_msg.AntennaScanStatus.TrackStatus trackStatus = 4 [default = OFF];
  if (has_trackstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->trackstatus(), output);
  }

  // optional float minScanAngle = 5;
  if (has_minscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->minscanangle(), output);
  }

  // optional float maxScanAngle = 6;
  if (has_maxscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->maxscanangle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AntennaScanStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ANTENNA_SCAN_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  // optional .falcon_remoting_msg.AntennaScanStatus.ScanStatus scanStatus = 3 [default = STANDBY];
  if (has_scanstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->scanstatus(), target);
  }

  // optional .falcon_remoting_msg.AntennaScanStatus.TrackStatus trackStatus = 4 [default = OFF];
  if (has_trackstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->trackstatus(), target);
  }

  // optional float minScanAngle = 5;
  if (has_minscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->minscanangle(), target);
  }

  // optional float maxScanAngle = 6;
  if (has_maxscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->maxscanangle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AntennaScanStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ANTENNA_SCAN_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 appID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional .falcon_remoting_msg.AntennaScanStatus.ScanStatus scanStatus = 3 [default = STANDBY];
    if (has_scanstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scanstatus());
    }

    // optional .falcon_remoting_msg.AntennaScanStatus.TrackStatus trackStatus = 4 [default = OFF];
    if (has_trackstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trackstatus());
    }

    // optional float minScanAngle = 5;
    if (has_minscanangle()) {
      total_size += 1 + 4;
    }

    // optional float maxScanAngle = 6;
    if (has_maxscanangle()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AntennaScanStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AntennaScanStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AntennaScanStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AntennaScanStatus::MergeFrom(const AntennaScanStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_scanstatus()) {
      set_scanstatus(from.scanstatus());
    }
    if (from.has_trackstatus()) {
      set_trackstatus(from.trackstatus());
    }
    if (from.has_minscanangle()) {
      set_minscanangle(from.minscanangle());
    }
    if (from.has_maxscanangle()) {
      set_maxscanangle(from.maxscanangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AntennaScanStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AntennaScanStatus::CopyFrom(const AntennaScanStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaScanStatus::IsInitialized() const {

  return true;
}

void AntennaScanStatus::Swap(AntennaScanStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(appid_, other->appid_);
    std::swap(scanstatus_, other->scanstatus_);
    std::swap(trackstatus_, other->trackstatus_);
    std::swap(minscanangle_, other->minscanangle_);
    std::swap(maxscanangle_, other->maxscanangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AntennaScanStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AntennaScanStatus_descriptor_;
  metadata.reflection = AntennaScanStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* QueryMidasAppStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int QueryMidasAppStatus::kMsgNameFieldNumber;
const int QueryMidasAppStatus::kAppIDFieldNumber;
#endif  // !_MSC_VER

QueryMidasAppStatus::QueryMidasAppStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryMidasAppStatus::InitAsDefaultInstance() {
}

QueryMidasAppStatus::QueryMidasAppStatus(const QueryMidasAppStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryMidasAppStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  appid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryMidasAppStatus::~QueryMidasAppStatus() {
  SharedDtor();
}

void QueryMidasAppStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void QueryMidasAppStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMidasAppStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryMidasAppStatus_descriptor_;
}

const QueryMidasAppStatus& QueryMidasAppStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

QueryMidasAppStatus* QueryMidasAppStatus::default_instance_ = NULL;

QueryMidasAppStatus* QueryMidasAppStatus::New() const {
  return new QueryMidasAppStatus;
}

void QueryMidasAppStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    appid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryMidasAppStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "QUERY_MIDAS_APP_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appID;
        break;
      }

      // optional int32 appID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryMidasAppStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "QUERY_MIDAS_APP_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryMidasAppStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "QUERY_MIDAS_APP_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryMidasAppStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "QUERY_MIDAS_APP_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 appID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMidasAppStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryMidasAppStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryMidasAppStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryMidasAppStatus::MergeFrom(const QueryMidasAppStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryMidasAppStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMidasAppStatus::CopyFrom(const QueryMidasAppStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMidasAppStatus::IsInitialized() const {

  return true;
}

void QueryMidasAppStatus::Swap(QueryMidasAppStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryMidasAppStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryMidasAppStatus_descriptor_;
  metadata.reflection = QueryMidasAppStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MidasAppStatus_SearchSetting_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MidasAppStatus_SearchSetting_descriptor_;
}
bool MidasAppStatus_SearchSetting_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MidasAppStatus_SearchSetting MidasAppStatus::SEARCHING;
const MidasAppStatus_SearchSetting MidasAppStatus::PAUSED;
const MidasAppStatus_SearchSetting MidasAppStatus::SearchSetting_MIN;
const MidasAppStatus_SearchSetting MidasAppStatus::SearchSetting_MAX;
const int MidasAppStatus::SearchSetting_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* MidasAppStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int MidasAppStatus::kMsgNameFieldNumber;
const int MidasAppStatus::kAppIDFieldNumber;
const int MidasAppStatus::kRxStatFieldNumber;
const int MidasAppStatus::kRecStatFieldNumber;
const int MidasAppStatus::kSigStatFieldNumber;
const int MidasAppStatus::kVidStatFieldNumber;
const int MidasAppStatus::kFhStatFieldNumber;
const int MidasAppStatus::kSearchStatFieldNumber;
const int MidasAppStatus::kSpecialGFieldNumber;
const int MidasAppStatus::kThresholdFieldNumber;
const int MidasAppStatus::kSkyScraperProductFieldNumber;
#endif  // !_MSC_VER

MidasAppStatus::MidasAppStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MidasAppStatus::InitAsDefaultInstance() {
  rxstat_ = const_cast< ::falcon_remoting_msg::RxStatus*>(&::falcon_remoting_msg::RxStatus::default_instance());
  recstat_ = const_cast< ::falcon_remoting_msg::RecordingStatus*>(&::falcon_remoting_msg::RecordingStatus::default_instance());
  sigstat_ = const_cast< ::falcon_remoting_msg::SignalStatus*>(&::falcon_remoting_msg::SignalStatus::default_instance());
  vidstat_ = const_cast< ::falcon_remoting_msg::VideoStatus*>(&::falcon_remoting_msg::VideoStatus::default_instance());
  fhstat_ = const_cast< ::falcon_remoting_msg::FreqHopStatus*>(&::falcon_remoting_msg::FreqHopStatus::default_instance());
  specialg_ = const_cast< ::falcon_remoting_msg::SpecialG*>(&::falcon_remoting_msg::SpecialG::default_instance());
}

MidasAppStatus::MidasAppStatus(const MidasAppStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MidasAppStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  appid_ = 0;
  rxstat_ = NULL;
  recstat_ = NULL;
  sigstat_ = NULL;
  vidstat_ = NULL;
  fhstat_ = NULL;
  searchstat_ = 1;
  specialg_ = NULL;
  threshold_ = 0;
  skyscraperproduct_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MidasAppStatus::~MidasAppStatus() {
  SharedDtor();
}

void MidasAppStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete rxstat_;
    delete recstat_;
    delete sigstat_;
    delete vidstat_;
    delete fhstat_;
    delete specialg_;
  }
}

void MidasAppStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MidasAppStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MidasAppStatus_descriptor_;
}

const MidasAppStatus& MidasAppStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

MidasAppStatus* MidasAppStatus::default_instance_ = NULL;

MidasAppStatus* MidasAppStatus::New() const {
  return new MidasAppStatus;
}

void MidasAppStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    appid_ = 0;
    if (has_rxstat()) {
      if (rxstat_ != NULL) rxstat_->::falcon_remoting_msg::RxStatus::Clear();
    }
    if (has_recstat()) {
      if (recstat_ != NULL) recstat_->::falcon_remoting_msg::RecordingStatus::Clear();
    }
    if (has_sigstat()) {
      if (sigstat_ != NULL) sigstat_->::falcon_remoting_msg::SignalStatus::Clear();
    }
    if (has_vidstat()) {
      if (vidstat_ != NULL) vidstat_->::falcon_remoting_msg::VideoStatus::Clear();
    }
    if (has_fhstat()) {
      if (fhstat_ != NULL) fhstat_->::falcon_remoting_msg::FreqHopStatus::Clear();
    }
    searchstat_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_specialg()) {
      if (specialg_ != NULL) specialg_->::falcon_remoting_msg::SpecialG::Clear();
    }
    threshold_ = 0;
    skyscraperproduct_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MidasAppStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "MIDAS_APP_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appID;
        break;
      }

      // optional int32 appID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rxStat;
        break;
      }

      // optional .falcon_remoting_msg.RxStatus rxStat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rxStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rxstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recStat;
        break;
      }

      // optional .falcon_remoting_msg.RecordingStatus recStat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sigStat;
        break;
      }

      // optional .falcon_remoting_msg.SignalStatus sigStat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_vidStat;
        break;
      }

      // optional .falcon_remoting_msg.VideoStatus vidStat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vidStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vidstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fhStat;
        break;
      }

      // optional .falcon_remoting_msg.FreqHopStatus fhStat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fhStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fhstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_searchStat;
        break;
      }

      // optional .falcon_remoting_msg.MidasAppStatus.SearchSetting searchStat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_searchStat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::MidasAppStatus_SearchSetting_IsValid(value)) {
            set_searchstat(static_cast< ::falcon_remoting_msg::MidasAppStatus_SearchSetting >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_specialG;
        break;
      }

      // optional .falcon_remoting_msg.SpecialG specialG = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_specialG:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specialg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_threshold;
        break;
      }

      // optional float threshold = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_skyScraperProduct;
        break;
      }

      // optional bool skyScraperProduct = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skyScraperProduct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skyscraperproduct_)));
          set_has_skyscraperproduct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MidasAppStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "MIDAS_APP_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  // optional .falcon_remoting_msg.RxStatus rxStat = 3;
  if (has_rxstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rxstat(), output);
  }

  // optional .falcon_remoting_msg.RecordingStatus recStat = 4;
  if (has_recstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recstat(), output);
  }

  // optional .falcon_remoting_msg.SignalStatus sigStat = 5;
  if (has_sigstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sigstat(), output);
  }

  // optional .falcon_remoting_msg.VideoStatus vidStat = 6;
  if (has_vidstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->vidstat(), output);
  }

  // optional .falcon_remoting_msg.FreqHopStatus fhStat = 7;
  if (has_fhstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fhstat(), output);
  }

  // optional .falcon_remoting_msg.MidasAppStatus.SearchSetting searchStat = 8;
  if (has_searchstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->searchstat(), output);
  }

  // optional .falcon_remoting_msg.SpecialG specialG = 9;
  if (has_specialg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->specialg(), output);
  }

  // optional float threshold = 10;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->threshold(), output);
  }

  // optional bool skyScraperProduct = 11;
  if (has_skyscraperproduct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->skyscraperproduct(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MidasAppStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "MIDAS_APP_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  // optional .falcon_remoting_msg.RxStatus rxStat = 3;
  if (has_rxstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rxstat(), target);
  }

  // optional .falcon_remoting_msg.RecordingStatus recStat = 4;
  if (has_recstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recstat(), target);
  }

  // optional .falcon_remoting_msg.SignalStatus sigStat = 5;
  if (has_sigstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sigstat(), target);
  }

  // optional .falcon_remoting_msg.VideoStatus vidStat = 6;
  if (has_vidstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->vidstat(), target);
  }

  // optional .falcon_remoting_msg.FreqHopStatus fhStat = 7;
  if (has_fhstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fhstat(), target);
  }

  // optional .falcon_remoting_msg.MidasAppStatus.SearchSetting searchStat = 8;
  if (has_searchstat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->searchstat(), target);
  }

  // optional .falcon_remoting_msg.SpecialG specialG = 9;
  if (has_specialg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->specialg(), target);
  }

  // optional float threshold = 10;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->threshold(), target);
  }

  // optional bool skyScraperProduct = 11;
  if (has_skyscraperproduct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->skyscraperproduct(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MidasAppStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "MIDAS_APP_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 appID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional .falcon_remoting_msg.RxStatus rxStat = 3;
    if (has_rxstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rxstat());
    }

    // optional .falcon_remoting_msg.RecordingStatus recStat = 4;
    if (has_recstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recstat());
    }

    // optional .falcon_remoting_msg.SignalStatus sigStat = 5;
    if (has_sigstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sigstat());
    }

    // optional .falcon_remoting_msg.VideoStatus vidStat = 6;
    if (has_vidstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vidstat());
    }

    // optional .falcon_remoting_msg.FreqHopStatus fhStat = 7;
    if (has_fhstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fhstat());
    }

    // optional .falcon_remoting_msg.MidasAppStatus.SearchSetting searchStat = 8;
    if (has_searchstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->searchstat());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .falcon_remoting_msg.SpecialG specialG = 9;
    if (has_specialg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->specialg());
    }

    // optional float threshold = 10;
    if (has_threshold()) {
      total_size += 1 + 4;
    }

    // optional bool skyScraperProduct = 11;
    if (has_skyscraperproduct()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MidasAppStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MidasAppStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MidasAppStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MidasAppStatus::MergeFrom(const MidasAppStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_rxstat()) {
      mutable_rxstat()->::falcon_remoting_msg::RxStatus::MergeFrom(from.rxstat());
    }
    if (from.has_recstat()) {
      mutable_recstat()->::falcon_remoting_msg::RecordingStatus::MergeFrom(from.recstat());
    }
    if (from.has_sigstat()) {
      mutable_sigstat()->::falcon_remoting_msg::SignalStatus::MergeFrom(from.sigstat());
    }
    if (from.has_vidstat()) {
      mutable_vidstat()->::falcon_remoting_msg::VideoStatus::MergeFrom(from.vidstat());
    }
    if (from.has_fhstat()) {
      mutable_fhstat()->::falcon_remoting_msg::FreqHopStatus::MergeFrom(from.fhstat());
    }
    if (from.has_searchstat()) {
      set_searchstat(from.searchstat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_specialg()) {
      mutable_specialg()->::falcon_remoting_msg::SpecialG::MergeFrom(from.specialg());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
    if (from.has_skyscraperproduct()) {
      set_skyscraperproduct(from.skyscraperproduct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MidasAppStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MidasAppStatus::CopyFrom(const MidasAppStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MidasAppStatus::IsInitialized() const {

  return true;
}

void MidasAppStatus::Swap(MidasAppStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(appid_, other->appid_);
    std::swap(rxstat_, other->rxstat_);
    std::swap(recstat_, other->recstat_);
    std::swap(sigstat_, other->sigstat_);
    std::swap(vidstat_, other->vidstat_);
    std::swap(fhstat_, other->fhstat_);
    std::swap(searchstat_, other->searchstat_);
    std::swap(specialg_, other->specialg_);
    std::swap(threshold_, other->threshold_);
    std::swap(skyscraperproduct_, other->skyscraperproduct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MidasAppStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MidasAppStatus_descriptor_;
  metadata.reflection = MidasAppStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RxStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RxStatus_Status_descriptor_;
}
bool RxStatus_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RxStatus_Status RxStatus::AUTOMATIC;
const RxStatus_Status RxStatus::MANUAL;
const RxStatus_Status RxStatus::Status_MIN;
const RxStatus_Status RxStatus::Status_MAX;
const int RxStatus::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RxStatus::kFreqFieldNumber;
const int RxStatus::kAttenFieldNumber;
const int RxStatus::kAutoAttenFieldNumber;
#endif  // !_MSC_VER

RxStatus::RxStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RxStatus::InitAsDefaultInstance() {
}

RxStatus::RxStatus(const RxStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RxStatus::SharedCtor() {
  _cached_size_ = 0;
  freq_ = 0;
  atten_ = 0;
  autoatten_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RxStatus::~RxStatus() {
  SharedDtor();
}

void RxStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RxStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RxStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RxStatus_descriptor_;
}

const RxStatus& RxStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

RxStatus* RxStatus::default_instance_ = NULL;

RxStatus* RxStatus::New() const {
  return new RxStatus;
}

void RxStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    freq_ = 0;
    atten_ = 0;
    autoatten_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RxStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float freq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_atten;
        break;
      }

      // optional int32 atten = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atten:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atten_)));
          set_has_atten();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_autoAtten;
        break;
      }

      // optional .falcon_remoting_msg.RxStatus.Status autoAtten = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoAtten:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::RxStatus_Status_IsValid(value)) {
            set_autoatten(static_cast< ::falcon_remoting_msg::RxStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RxStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float freq = 1;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->freq(), output);
  }

  // optional int32 atten = 2;
  if (has_atten()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->atten(), output);
  }

  // optional .falcon_remoting_msg.RxStatus.Status autoAtten = 3;
  if (has_autoatten()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->autoatten(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RxStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float freq = 1;
  if (has_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->freq(), target);
  }

  // optional int32 atten = 2;
  if (has_atten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->atten(), target);
  }

  // optional .falcon_remoting_msg.RxStatus.Status autoAtten = 3;
  if (has_autoatten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->autoatten(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RxStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float freq = 1;
    if (has_freq()) {
      total_size += 1 + 4;
    }

    // optional int32 atten = 2;
    if (has_atten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atten());
    }

    // optional .falcon_remoting_msg.RxStatus.Status autoAtten = 3;
    if (has_autoatten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->autoatten());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RxStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RxStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RxStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RxStatus::MergeFrom(const RxStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_freq()) {
      set_freq(from.freq());
    }
    if (from.has_atten()) {
      set_atten(from.atten());
    }
    if (from.has_autoatten()) {
      set_autoatten(from.autoatten());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RxStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RxStatus::CopyFrom(const RxStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RxStatus::IsInitialized() const {

  return true;
}

void RxStatus::Swap(RxStatus* other) {
  if (other != this) {
    std::swap(freq_, other->freq_);
    std::swap(atten_, other->atten_);
    std::swap(autoatten_, other->autoatten_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RxStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RxStatus_descriptor_;
  metadata.reflection = RxStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RecordingStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordingStatus_Status_descriptor_;
}
bool RecordingStatus_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RecordingStatus_Status RecordingStatus::OFF;
const RecordingStatus_Status RecordingStatus::ON;
const RecordingStatus_Status RecordingStatus::Status_MIN;
const RecordingStatus_Status RecordingStatus::Status_MAX;
const int RecordingStatus::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RecordingStatus::kPredRecStatFieldNumber;
const int RecordingStatus::kDiskUseFieldNumber;
#endif  // !_MSC_VER

RecordingStatus::RecordingStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordingStatus::InitAsDefaultInstance() {
}

RecordingStatus::RecordingStatus(const RecordingStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordingStatus::SharedCtor() {
  _cached_size_ = 0;
  predrecstat_ = 0;
  diskuse_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordingStatus::~RecordingStatus() {
  SharedDtor();
}

void RecordingStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecordingStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordingStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordingStatus_descriptor_;
}

const RecordingStatus& RecordingStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

RecordingStatus* RecordingStatus::default_instance_ = NULL;

RecordingStatus* RecordingStatus::New() const {
  return new RecordingStatus;
}

void RecordingStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    predrecstat_ = 0;
    diskuse_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordingStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .falcon_remoting_msg.RecordingStatus.Status predRecStat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::RecordingStatus_Status_IsValid(value)) {
            set_predrecstat(static_cast< ::falcon_remoting_msg::RecordingStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_diskUse;
        break;
      }

      // optional float diskUse = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_diskUse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &diskuse_)));
          set_has_diskuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordingStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .falcon_remoting_msg.RecordingStatus.Status predRecStat = 1;
  if (has_predrecstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->predrecstat(), output);
  }

  // optional float diskUse = 2;
  if (has_diskuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->diskuse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordingStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .falcon_remoting_msg.RecordingStatus.Status predRecStat = 1;
  if (has_predrecstat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->predrecstat(), target);
  }

  // optional float diskUse = 2;
  if (has_diskuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->diskuse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordingStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .falcon_remoting_msg.RecordingStatus.Status predRecStat = 1;
    if (has_predrecstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->predrecstat());
    }

    // optional float diskUse = 2;
    if (has_diskuse()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordingStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordingStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordingStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordingStatus::MergeFrom(const RecordingStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_predrecstat()) {
      set_predrecstat(from.predrecstat());
    }
    if (from.has_diskuse()) {
      set_diskuse(from.diskuse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordingStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordingStatus::CopyFrom(const RecordingStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingStatus::IsInitialized() const {

  return true;
}

void RecordingStatus::Swap(RecordingStatus* other) {
  if (other != this) {
    std::swap(predrecstat_, other->predrecstat_);
    std::swap(diskuse_, other->diskuse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordingStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordingStatus_descriptor_;
  metadata.reflection = RecordingStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignalStatus::kDetStatFieldNumber;
const int SignalStatus::kBerFieldNumber;
const int SignalStatus::kCenterFreqEstFieldNumber;
const int SignalStatus::kExcurEstFieldNumber;
const int SignalStatus::kPacketCountFieldNumber;
const int SignalStatus::kTimeWindowFieldNumber;
const int SignalStatus::kTimeStampFieldNumber;
#endif  // !_MSC_VER

SignalStatus::SignalStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalStatus::InitAsDefaultInstance() {
}

SignalStatus::SignalStatus(const SignalStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalStatus::SharedCtor() {
  _cached_size_ = 0;
  ber_ = 0;
  centerfreqest_ = 0;
  excurest_ = 0;
  packetcount_ = 0;
  timewindow_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalStatus::~SignalStatus() {
  SharedDtor();
}

void SignalStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignalStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalStatus_descriptor_;
}

const SignalStatus& SignalStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

SignalStatus* SignalStatus::default_instance_ = NULL;

SignalStatus* SignalStatus::New() const {
  return new SignalStatus;
}

void SignalStatus::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    ber_ = 0;
    centerfreqest_ = 0;
    excurest_ = 0;
    packetcount_ = 0;
    timewindow_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
  }
  detstat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .falcon_remoting_msg.DetectionStatus detStat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_detStat;
        if (input->ExpectTag(21)) goto parse_ber;
        break;
      }

      // optional float ber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ber_)));
          set_has_ber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_centerFreqEst;
        break;
      }

      // optional float centerFreqEst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_centerFreqEst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &centerfreqest_)));
          set_has_centerfreqest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_excurEst;
        break;
      }

      // optional float excurEst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_excurEst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &excurest_)));
          set_has_excurest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_packetCount;
        break;
      }

      // optional int32 packetCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packetCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetcount_)));
          set_has_packetcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timeWindow;
        break;
      }

      // optional int32 timeWindow = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeWindow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timewindow_)));
          set_has_timewindow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timeStamp;
        break;
      }

      // optional int64 timeStamp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .falcon_remoting_msg.DetectionStatus detStat = 1;
  for (int i = 0; i < this->detstat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->detstat(i), output);
  }

  // optional float ber = 2;
  if (has_ber()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ber(), output);
  }

  // optional float centerFreqEst = 3;
  if (has_centerfreqest()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->centerfreqest(), output);
  }

  // optional float excurEst = 4;
  if (has_excurest()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->excurest(), output);
  }

  // optional int32 packetCount = 5;
  if (has_packetcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->packetcount(), output);
  }

  // optional int32 timeWindow = 6;
  if (has_timewindow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->timewindow(), output);
  }

  // optional int64 timeStamp = 7;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .falcon_remoting_msg.DetectionStatus detStat = 1;
  for (int i = 0; i < this->detstat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->detstat(i), target);
  }

  // optional float ber = 2;
  if (has_ber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ber(), target);
  }

  // optional float centerFreqEst = 3;
  if (has_centerfreqest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->centerfreqest(), target);
  }

  // optional float excurEst = 4;
  if (has_excurest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->excurest(), target);
  }

  // optional int32 packetCount = 5;
  if (has_packetcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->packetcount(), target);
  }

  // optional int32 timeWindow = 6;
  if (has_timewindow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->timewindow(), target);
  }

  // optional int64 timeStamp = 7;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional float ber = 2;
    if (has_ber()) {
      total_size += 1 + 4;
    }

    // optional float centerFreqEst = 3;
    if (has_centerfreqest()) {
      total_size += 1 + 4;
    }

    // optional float excurEst = 4;
    if (has_excurest()) {
      total_size += 1 + 4;
    }

    // optional int32 packetCount = 5;
    if (has_packetcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packetcount());
    }

    // optional int32 timeWindow = 6;
    if (has_timewindow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timewindow());
    }

    // optional int64 timeStamp = 7;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  // repeated .falcon_remoting_msg.DetectionStatus detStat = 1;
  total_size += 1 * this->detstat_size();
  for (int i = 0; i < this->detstat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detstat(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalStatus::MergeFrom(const SignalStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  detstat_.MergeFrom(from.detstat_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ber()) {
      set_ber(from.ber());
    }
    if (from.has_centerfreqest()) {
      set_centerfreqest(from.centerfreqest());
    }
    if (from.has_excurest()) {
      set_excurest(from.excurest());
    }
    if (from.has_packetcount()) {
      set_packetcount(from.packetcount());
    }
    if (from.has_timewindow()) {
      set_timewindow(from.timewindow());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalStatus::CopyFrom(const SignalStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalStatus::IsInitialized() const {

  return true;
}

void SignalStatus::Swap(SignalStatus* other) {
  if (other != this) {
    detstat_.Swap(&other->detstat_);
    std::swap(ber_, other->ber_);
    std::swap(centerfreqest_, other->centerfreqest_);
    std::swap(excurest_, other->excurest_);
    std::swap(packetcount_, other->packetcount_);
    std::swap(timewindow_, other->timewindow_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalStatus_descriptor_;
  metadata.reflection = SignalStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DetectionStatus_Color_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectionStatus_Color_descriptor_;
}
bool DetectionStatus_Color_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DetectionStatus_Color DetectionStatus::RED;
const DetectionStatus_Color DetectionStatus::YELLOW;
const DetectionStatus_Color DetectionStatus::GREEN;
const DetectionStatus_Color DetectionStatus::Color_MIN;
const DetectionStatus_Color DetectionStatus::Color_MAX;
const int DetectionStatus::Color_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DetectionStatus::kSigNameFieldNumber;
const int DetectionStatus::kDetStateFieldNumber;
const int DetectionStatus::kColorFieldNumber;
#endif  // !_MSC_VER

DetectionStatus::DetectionStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DetectionStatus::InitAsDefaultInstance() {
}

DetectionStatus::DetectionStatus(const DetectionStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DetectionStatus::SharedCtor() {
  _cached_size_ = 0;
  signame_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  detstate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectionStatus::~DetectionStatus() {
  SharedDtor();
}

void DetectionStatus::SharedDtor() {
  if (signame_ != &::google::protobuf::internal::kEmptyString) {
    delete signame_;
  }
  if (detstate_ != &::google::protobuf::internal::kEmptyString) {
    delete detstate_;
  }
  if (this != default_instance_) {
  }
}

void DetectionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectionStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectionStatus_descriptor_;
}

const DetectionStatus& DetectionStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

DetectionStatus* DetectionStatus::default_instance_ = NULL;

DetectionStatus* DetectionStatus::New() const {
  return new DetectionStatus;
}

void DetectionStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signame()) {
      if (signame_ != &::google::protobuf::internal::kEmptyString) {
        signame_->clear();
      }
    }
    if (has_detstate()) {
      if (detstate_ != &::google::protobuf::internal::kEmptyString) {
        detstate_->clear();
      }
    }
    color_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sigName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signame()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signame().data(), this->signame().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detState;
        break;
      }

      // optional string detState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detstate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->detstate().data(), this->detstate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_color;
        break;
      }

      // optional .falcon_remoting_msg.DetectionStatus.Color color = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::DetectionStatus_Color_IsValid(value)) {
            set_color(static_cast< ::falcon_remoting_msg::DetectionStatus_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DetectionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string sigName = 1;
  if (has_signame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signame().data(), this->signame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->signame(), output);
  }

  // optional string detState = 2;
  if (has_detstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detstate().data(), this->detstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->detstate(), output);
  }

  // optional .falcon_remoting_msg.DetectionStatus.Color color = 3;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DetectionStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sigName = 1;
  if (has_signame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signame().data(), this->signame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signame(), target);
  }

  // optional string detState = 2;
  if (has_detstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detstate().data(), this->detstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->detstate(), target);
  }

  // optional .falcon_remoting_msg.DetectionStatus.Color color = 3;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DetectionStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sigName = 1;
    if (has_signame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signame());
    }

    // optional string detState = 2;
    if (has_detstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detstate());
    }

    // optional .falcon_remoting_msg.DetectionStatus.Color color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectionStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectionStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectionStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectionStatus::MergeFrom(const DetectionStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signame()) {
      set_signame(from.signame());
    }
    if (from.has_detstate()) {
      set_detstate(from.detstate());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectionStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionStatus::CopyFrom(const DetectionStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionStatus::IsInitialized() const {

  return true;
}

void DetectionStatus::Swap(DetectionStatus* other) {
  if (other != this) {
    std::swap(signame_, other->signame_);
    std::swap(detstate_, other->detstate_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectionStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectionStatus_descriptor_;
  metadata.reflection = DetectionStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SearchStatus_Color_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchStatus_Color_descriptor_;
}
bool SearchStatus_Color_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SearchStatus_Color SearchStatus::RED;
const SearchStatus_Color SearchStatus::YELLOW;
const SearchStatus_Color SearchStatus::GREEN;
const SearchStatus_Color SearchStatus::Color_MIN;
const SearchStatus_Color SearchStatus::Color_MAX;
const int SearchStatus::Color_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* SearchStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SearchStatus::kMsgNameFieldNumber;
const int SearchStatus::kAppIDFieldNumber;
const int SearchStatus::kStatusFieldNumber;
const int SearchStatus::kColorFieldNumber;
#endif  // !_MSC_VER

SearchStatus::SearchStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchStatus::InitAsDefaultInstance() {
}

SearchStatus::SearchStatus(const SearchStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  appid_ = 0;
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchStatus::~SearchStatus() {
  SharedDtor();
}

void SearchStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (this != default_instance_) {
  }
}

void SearchStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchStatus_descriptor_;
}

const SearchStatus& SearchStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

SearchStatus* SearchStatus::default_instance_ = NULL;

SearchStatus* SearchStatus::New() const {
  return new SearchStatus;
}

void SearchStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    appid_ = 0;
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::kEmptyString) {
        status_->clear();
      }
    }
    color_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SEARCH_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appID;
        break;
      }

      // optional int32 appID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // optional string status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_color;
        break;
      }

      // optional .falcon_remoting_msg.SearchStatus.Color color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::SearchStatus_Color_IsValid(value)) {
            set_color(static_cast< ::falcon_remoting_msg::SearchStatus_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SEARCH_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  // optional string status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->status(), output);
  }

  // optional .falcon_remoting_msg.SearchStatus.Color color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SEARCH_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  // optional string status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->status(), target);
  }

  // optional .falcon_remoting_msg.SearchStatus.Color color = 4;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SEARCH_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 appID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional string status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }

    // optional .falcon_remoting_msg.SearchStatus.Color color = 4;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchStatus::MergeFrom(const SearchStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchStatus::CopyFrom(const SearchStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchStatus::IsInitialized() const {

  return true;
}

void SearchStatus::Swap(SearchStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(appid_, other->appid_);
    std::swap(status_, other->status_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchStatus_descriptor_;
  metadata.reflection = SearchStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* VideoStatus_RecStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoStatus_RecStatus_descriptor_;
}
bool VideoStatus_RecStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VideoStatus_RecStatus VideoStatus::VID_OFF;
const VideoStatus_RecStatus VideoStatus::VID_ON;
const VideoStatus_RecStatus VideoStatus::RecStatus_MIN;
const VideoStatus_RecStatus VideoStatus::RecStatus_MAX;
const int VideoStatus::RecStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* VideoStatus_SyncStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoStatus_SyncStatus_descriptor_;
}
bool VideoStatus_SyncStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VideoStatus_SyncStatus VideoStatus::SYNC_OFF;
const VideoStatus_SyncStatus VideoStatus::SYNC_ON;
const VideoStatus_SyncStatus VideoStatus::SyncStatus_MIN;
const VideoStatus_SyncStatus VideoStatus::SyncStatus_MAX;
const int VideoStatus::SyncStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* VideoStatus_JpegMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoStatus_JpegMode_descriptor_;
}
bool VideoStatus_JpegMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VideoStatus_JpegMode VideoStatus::JPEG_OFF;
const VideoStatus_JpegMode VideoStatus::JPEG_ON;
const VideoStatus_JpegMode VideoStatus::JPEG_SINGLE;
const VideoStatus_JpegMode VideoStatus::JpegMode_MIN;
const VideoStatus_JpegMode VideoStatus::JpegMode_MAX;
const int VideoStatus::JpegMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int VideoStatus::kVidRecStatFieldNumber;
const int VideoStatus::kVidSyncFieldNumber;
const int VideoStatus::kVidIntFieldNumber;
const int VideoStatus::kJpegModeFieldNumber;
const int VideoStatus::kJpegRateFieldNumber;
#endif  // !_MSC_VER

VideoStatus::VideoStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoStatus::InitAsDefaultInstance() {
}

VideoStatus::VideoStatus(const VideoStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoStatus::SharedCtor() {
  _cached_size_ = 0;
  vidrecstat_ = 0;
  vidsync_ = 1;
  vidint_ = 0;
  jpegmode_ = 1;
  jpegrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoStatus::~VideoStatus() {
  SharedDtor();
}

void VideoStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoStatus_descriptor_;
}

const VideoStatus& VideoStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

VideoStatus* VideoStatus::default_instance_ = NULL;

VideoStatus* VideoStatus::New() const {
  return new VideoStatus;
}

void VideoStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vidrecstat_ = 0;
    vidsync_ = 1;
    vidint_ = 0;
    jpegmode_ = 1;
    jpegrate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .falcon_remoting_msg.VideoStatus.RecStatus vidRecStat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::VideoStatus_RecStatus_IsValid(value)) {
            set_vidrecstat(static_cast< ::falcon_remoting_msg::VideoStatus_RecStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vidSync;
        break;
      }

      // optional .falcon_remoting_msg.VideoStatus.SyncStatus vidSync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vidSync:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::VideoStatus_SyncStatus_IsValid(value)) {
            set_vidsync(static_cast< ::falcon_remoting_msg::VideoStatus_SyncStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vidInt;
        break;
      }

      // optional int32 vidInt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vidInt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vidint_)));
          set_has_vidint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_jpegMode;
        break;
      }

      // optional .falcon_remoting_msg.VideoStatus.JpegMode jpegMode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jpegMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::VideoStatus_JpegMode_IsValid(value)) {
            set_jpegmode(static_cast< ::falcon_remoting_msg::VideoStatus_JpegMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_jpegRate;
        break;
      }

      // optional int32 jpegRate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jpegRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jpegrate_)));
          set_has_jpegrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .falcon_remoting_msg.VideoStatus.RecStatus vidRecStat = 1;
  if (has_vidrecstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->vidrecstat(), output);
  }

  // optional .falcon_remoting_msg.VideoStatus.SyncStatus vidSync = 2;
  if (has_vidsync()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->vidsync(), output);
  }

  // optional int32 vidInt = 3;
  if (has_vidint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vidint(), output);
  }

  // optional .falcon_remoting_msg.VideoStatus.JpegMode jpegMode = 4;
  if (has_jpegmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->jpegmode(), output);
  }

  // optional int32 jpegRate = 5;
  if (has_jpegrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->jpegrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .falcon_remoting_msg.VideoStatus.RecStatus vidRecStat = 1;
  if (has_vidrecstat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->vidrecstat(), target);
  }

  // optional .falcon_remoting_msg.VideoStatus.SyncStatus vidSync = 2;
  if (has_vidsync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->vidsync(), target);
  }

  // optional int32 vidInt = 3;
  if (has_vidint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vidint(), target);
  }

  // optional .falcon_remoting_msg.VideoStatus.JpegMode jpegMode = 4;
  if (has_jpegmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->jpegmode(), target);
  }

  // optional int32 jpegRate = 5;
  if (has_jpegrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->jpegrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .falcon_remoting_msg.VideoStatus.RecStatus vidRecStat = 1;
    if (has_vidrecstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vidrecstat());
    }

    // optional .falcon_remoting_msg.VideoStatus.SyncStatus vidSync = 2;
    if (has_vidsync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vidsync());
    }

    // optional int32 vidInt = 3;
    if (has_vidint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vidint());
    }

    // optional .falcon_remoting_msg.VideoStatus.JpegMode jpegMode = 4;
    if (has_jpegmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->jpegmode());
    }

    // optional int32 jpegRate = 5;
    if (has_jpegrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jpegrate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoStatus::MergeFrom(const VideoStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vidrecstat()) {
      set_vidrecstat(from.vidrecstat());
    }
    if (from.has_vidsync()) {
      set_vidsync(from.vidsync());
    }
    if (from.has_vidint()) {
      set_vidint(from.vidint());
    }
    if (from.has_jpegmode()) {
      set_jpegmode(from.jpegmode());
    }
    if (from.has_jpegrate()) {
      set_jpegrate(from.jpegrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoStatus::CopyFrom(const VideoStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoStatus::IsInitialized() const {

  return true;
}

void VideoStatus::Swap(VideoStatus* other) {
  if (other != this) {
    std::swap(vidrecstat_, other->vidrecstat_);
    std::swap(vidsync_, other->vidsync_);
    std::swap(vidint_, other->vidint_);
    std::swap(jpegmode_, other->jpegmode_);
    std::swap(jpegrate_, other->jpegrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoStatus_descriptor_;
  metadata.reflection = VideoStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FreqHopStatus_Mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreqHopStatus_Mode_descriptor_;
}
bool FreqHopStatus_Mode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FreqHopStatus_Mode FreqHopStatus::AUTOMATIC;
const FreqHopStatus_Mode FreqHopStatus::USER_CLICKS;
const FreqHopStatus_Mode FreqHopStatus::MANUAL;
const FreqHopStatus_Mode FreqHopStatus::Mode_MIN;
const FreqHopStatus_Mode FreqHopStatus::Mode_MAX;
const int FreqHopStatus::Mode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FreqHopStatus::kModeFieldNumber;
const int FreqHopStatus::kFhopTunerFieldNumber;
#endif  // !_MSC_VER

FreqHopStatus::FreqHopStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FreqHopStatus::InitAsDefaultInstance() {
}

FreqHopStatus::FreqHopStatus(const FreqHopStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FreqHopStatus::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FreqHopStatus::~FreqHopStatus() {
  SharedDtor();
}

void FreqHopStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FreqHopStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreqHopStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreqHopStatus_descriptor_;
}

const FreqHopStatus& FreqHopStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

FreqHopStatus* FreqHopStatus::default_instance_ = NULL;

FreqHopStatus* FreqHopStatus::New() const {
  return new FreqHopStatus;
}

void FreqHopStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 1;
  }
  fhoptuner_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FreqHopStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .falcon_remoting_msg.FreqHopStatus.Mode mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::FreqHopStatus_Mode_IsValid(value)) {
            set_mode(static_cast< ::falcon_remoting_msg::FreqHopStatus_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fhopTuner;
        break;
      }

      // repeated .falcon_remoting_msg.FreqHopTunerStatus fhopTuner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fhopTuner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fhoptuner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fhopTuner;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FreqHopStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .falcon_remoting_msg.FreqHopStatus.Mode mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // repeated .falcon_remoting_msg.FreqHopTunerStatus fhopTuner = 2;
  for (int i = 0; i < this->fhoptuner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fhoptuner(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FreqHopStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .falcon_remoting_msg.FreqHopStatus.Mode mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // repeated .falcon_remoting_msg.FreqHopTunerStatus fhopTuner = 2;
  for (int i = 0; i < this->fhoptuner_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fhoptuner(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FreqHopStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .falcon_remoting_msg.FreqHopStatus.Mode mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  // repeated .falcon_remoting_msg.FreqHopTunerStatus fhopTuner = 2;
  total_size += 1 * this->fhoptuner_size();
  for (int i = 0; i < this->fhoptuner_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fhoptuner(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreqHopStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FreqHopStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FreqHopStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FreqHopStatus::MergeFrom(const FreqHopStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  fhoptuner_.MergeFrom(from.fhoptuner_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FreqHopStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreqHopStatus::CopyFrom(const FreqHopStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreqHopStatus::IsInitialized() const {

  return true;
}

void FreqHopStatus::Swap(FreqHopStatus* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    fhoptuner_.Swap(&other->fhoptuner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FreqHopStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreqHopStatus_descriptor_;
  metadata.reflection = FreqHopStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FreqHopTunerStatus::kTunerFieldNumber;
const int FreqHopTunerStatus::kFreqFieldNumber;
const int FreqHopTunerStatus::kNumHitsFieldNumber;
const int FreqHopTunerStatus::kLockedFieldNumber;
#endif  // !_MSC_VER

FreqHopTunerStatus::FreqHopTunerStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FreqHopTunerStatus::InitAsDefaultInstance() {
}

FreqHopTunerStatus::FreqHopTunerStatus(const FreqHopTunerStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FreqHopTunerStatus::SharedCtor() {
  _cached_size_ = 0;
  tuner_ = 0;
  freq_ = 0;
  numhits_ = 0;
  locked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FreqHopTunerStatus::~FreqHopTunerStatus() {
  SharedDtor();
}

void FreqHopTunerStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FreqHopTunerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreqHopTunerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreqHopTunerStatus_descriptor_;
}

const FreqHopTunerStatus& FreqHopTunerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

FreqHopTunerStatus* FreqHopTunerStatus::default_instance_ = NULL;

FreqHopTunerStatus* FreqHopTunerStatus::New() const {
  return new FreqHopTunerStatus;
}

void FreqHopTunerStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tuner_ = 0;
    freq_ = 0;
    numhits_ = 0;
    locked_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FreqHopTunerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tuner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tuner_)));
          set_has_tuner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_freq;
        break;
      }

      // optional double freq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_numHits;
        break;
      }

      // optional int32 numHits = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numHits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numhits_)));
          set_has_numhits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_locked;
        break;
      }

      // optional bool locked = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FreqHopTunerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tuner = 1;
  if (has_tuner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tuner(), output);
  }

  // optional double freq = 2;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->freq(), output);
  }

  // optional int32 numHits = 3;
  if (has_numhits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numhits(), output);
  }

  // optional bool locked = 4;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->locked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FreqHopTunerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tuner = 1;
  if (has_tuner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tuner(), target);
  }

  // optional double freq = 2;
  if (has_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->freq(), target);
  }

  // optional int32 numHits = 3;
  if (has_numhits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numhits(), target);
  }

  // optional bool locked = 4;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->locked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FreqHopTunerStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tuner = 1;
    if (has_tuner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tuner());
    }

    // optional double freq = 2;
    if (has_freq()) {
      total_size += 1 + 8;
    }

    // optional int32 numHits = 3;
    if (has_numhits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numhits());
    }

    // optional bool locked = 4;
    if (has_locked()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreqHopTunerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FreqHopTunerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FreqHopTunerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FreqHopTunerStatus::MergeFrom(const FreqHopTunerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tuner()) {
      set_tuner(from.tuner());
    }
    if (from.has_freq()) {
      set_freq(from.freq());
    }
    if (from.has_numhits()) {
      set_numhits(from.numhits());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FreqHopTunerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreqHopTunerStatus::CopyFrom(const FreqHopTunerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreqHopTunerStatus::IsInitialized() const {

  return true;
}

void FreqHopTunerStatus::Swap(FreqHopTunerStatus* other) {
  if (other != this) {
    std::swap(tuner_, other->tuner_);
    std::swap(freq_, other->freq_);
    std::swap(numhits_, other->numhits_);
    std::swap(locked_, other->locked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FreqHopTunerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreqHopTunerStatus_descriptor_;
  metadata.reflection = FreqHopTunerStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SpecialG::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SpecialG::kMsgNameFieldNumber;
const int SpecialG::kLatFieldNumber;
const int SpecialG::kLonFieldNumber;
const int SpecialG::kAltFieldNumber;
const int SpecialG::kEstAltFieldNumber;
const int SpecialG::kEnableFieldNumber;
#endif  // !_MSC_VER

SpecialG::SpecialG()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpecialG::InitAsDefaultInstance() {
}

SpecialG::SpecialG(const SpecialG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpecialG::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  lat_ = 0;
  lon_ = 0;
  alt_ = 0;
  estalt_ = 0;
  enable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialG::~SpecialG() {
  SharedDtor();
}

void SpecialG::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void SpecialG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecialG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecialG_descriptor_;
}

const SpecialG& SpecialG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

SpecialG* SpecialG::default_instance_ = NULL;

SpecialG* SpecialG::New() const {
  return new SpecialG;
}

void SpecialG::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    lat_ = 0;
    lon_ = 0;
    alt_ = 0;
    estalt_ = 0;
    enable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecialG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "PROCESS_SPECIAL_G"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }

      // optional double lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_lon;
        break;
      }

      // optional double lon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_alt;
        break;
      }

      // optional double alt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_estAlt;
        break;
      }

      // optional double estAlt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_estAlt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &estalt_)));
          set_has_estalt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_enable;
        break;
      }

      // optional bool enable = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpecialG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "PROCESS_SPECIAL_G"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // optional double lon = 3;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lon(), output);
  }

  // optional double alt = 4;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->alt(), output);
  }

  // optional double estAlt = 5;
  if (has_estalt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->estalt(), output);
  }

  // optional bool enable = 6;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpecialG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "PROCESS_SPECIAL_G"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // optional double lon = 3;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lon(), target);
  }

  // optional double alt = 4;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->alt(), target);
  }

  // optional double estAlt = 5;
  if (has_estalt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->estalt(), target);
  }

  // optional bool enable = 6;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->enable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpecialG::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "PROCESS_SPECIAL_G"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double lat = 2;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional double lon = 3;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // optional double alt = 4;
    if (has_alt()) {
      total_size += 1 + 8;
    }

    // optional double estAlt = 5;
    if (has_estalt()) {
      total_size += 1 + 8;
    }

    // optional bool enable = 6;
    if (has_enable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecialG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecialG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecialG::MergeFrom(const SpecialG& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_estalt()) {
      set_estalt(from.estalt());
    }
    if (from.has_enable()) {
      set_enable(from.enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecialG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialG::CopyFrom(const SpecialG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialG::IsInitialized() const {

  return true;
}

void SpecialG::Swap(SpecialG* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(alt_, other->alt_);
    std::swap(estalt_, other->estalt_);
    std::swap(enable_, other->enable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecialG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecialG_descriptor_;
  metadata.reflection = SpecialG_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SensorPosition::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SensorPosition::kMsgNameFieldNumber;
const int SensorPosition::kLatFieldNumber;
const int SensorPosition::kLonFieldNumber;
const int SensorPosition::kAltFieldNumber;
const int SensorPosition::kOrientationFieldNumber;
const int SensorPosition::kTimestampFieldNumber;
const int SensorPosition::kSensorNameFieldNumber;
const int SensorPosition::kSiteIdFieldNumber;
const int SensorPosition::kSigAdFieldNumber;
const int SensorPosition::kFovFieldNumber;
#endif  // !_MSC_VER

SensorPosition::SensorPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorPosition::InitAsDefaultInstance() {
  orientation_ = const_cast< ::falcon_remoting_msg::OrientationStatus*>(&::falcon_remoting_msg::OrientationStatus::default_instance());
}

SensorPosition::SensorPosition(const SensorPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorPosition::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  lat_ = 0;
  lon_ = 0;
  alt_ = 0;
  orientation_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  siteid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sigad_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorPosition::~SensorPosition() {
  SharedDtor();
}

void SensorPosition::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (siteid_ != &::google::protobuf::internal::kEmptyString) {
    delete siteid_;
  }
  if (sigad_ != &::google::protobuf::internal::kEmptyString) {
    delete sigad_;
  }
  if (this != default_instance_) {
    delete orientation_;
  }
}

void SensorPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorPosition_descriptor_;
}

const SensorPosition& SensorPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

SensorPosition* SensorPosition::default_instance_ = NULL;

SensorPosition* SensorPosition::New() const {
  return new SensorPosition;
}

void SensorPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    lat_ = 0;
    lon_ = 0;
    alt_ = 0;
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::falcon_remoting_msg::OrientationStatus::Clear();
    }
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
    if (has_siteid()) {
      if (siteid_ != &::google::protobuf::internal::kEmptyString) {
        siteid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_sigad()) {
      if (sigad_ != &::google::protobuf::internal::kEmptyString) {
        sigad_->clear();
      }
    }
  }
  fov_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SENSOR_POSITION"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_lat;
        break;
      }

      // optional float lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_lon;
        break;
      }

      // optional float lon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_alt;
        break;
      }

      // optional float alt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_orientation;
        break;
      }

      // optional .falcon_remoting_msg.OrientationStatus orientation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_siteId;
        break;
      }

      // optional string siteId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_siteId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_siteid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->siteid().data(), this->siteid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sigAd;
        break;
      }

      // optional string sigAd = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigAd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sigad()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sigad().data(), this->sigad().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_fov;
        break;
      }

      // repeated .falcon_remoting_msg.FieldofView fov = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fov:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fov()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_fov;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SENSOR_POSITION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional float lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lat(), output);
  }

  // optional float lon = 3;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lon(), output);
  }

  // optional float alt = 4;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->alt(), output);
  }

  // optional .falcon_remoting_msg.OrientationStatus orientation = 5;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->orientation(), output);
  }

  // optional int64 timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->timestamp(), output);
  }

  // optional string sensorName = 7;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sensorname(), output);
  }

  // optional string siteId = 8;
  if (has_siteid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siteid().data(), this->siteid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->siteid(), output);
  }

  // optional string sigAd = 9;
  if (has_sigad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sigad().data(), this->sigad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->sigad(), output);
  }

  // repeated .falcon_remoting_msg.FieldofView fov = 10;
  for (int i = 0; i < this->fov_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->fov(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SENSOR_POSITION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional float lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lat(), target);
  }

  // optional float lon = 3;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lon(), target);
  }

  // optional float alt = 4;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->alt(), target);
  }

  // optional .falcon_remoting_msg.OrientationStatus orientation = 5;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->orientation(), target);
  }

  // optional int64 timestamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->timestamp(), target);
  }

  // optional string sensorName = 7;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sensorname(), target);
  }

  // optional string siteId = 8;
  if (has_siteid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siteid().data(), this->siteid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->siteid(), target);
  }

  // optional string sigAd = 9;
  if (has_sigad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sigad().data(), this->sigad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sigad(), target);
  }

  // repeated .falcon_remoting_msg.FieldofView fov = 10;
  for (int i = 0; i < this->fov_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->fov(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SENSOR_POSITION"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional float lat = 2;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float lon = 3;
    if (has_lon()) {
      total_size += 1 + 4;
    }

    // optional float alt = 4;
    if (has_alt()) {
      total_size += 1 + 4;
    }

    // optional .falcon_remoting_msg.OrientationStatus orientation = 5;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orientation());
    }

    // optional int64 timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional string sensorName = 7;
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

    // optional string siteId = 8;
    if (has_siteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->siteid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string sigAd = 9;
    if (has_sigad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sigad());
    }

  }
  // repeated .falcon_remoting_msg.FieldofView fov = 10;
  total_size += 1 * this->fov_size();
  for (int i = 0; i < this->fov_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fov(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorPosition::MergeFrom(const SensorPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  fov_.MergeFrom(from.fov_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_orientation()) {
      mutable_orientation()->::falcon_remoting_msg::OrientationStatus::MergeFrom(from.orientation());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
    if (from.has_siteid()) {
      set_siteid(from.siteid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sigad()) {
      set_sigad(from.sigad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorPosition::CopyFrom(const SensorPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorPosition::IsInitialized() const {

  return true;
}

void SensorPosition::Swap(SensorPosition* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(alt_, other->alt_);
    std::swap(orientation_, other->orientation_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(siteid_, other->siteid_);
    std::swap(sigad_, other->sigad_);
    fov_.Swap(&other->fov_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorPosition_descriptor_;
  metadata.reflection = SensorPosition_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SensorHealth::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SensorHealth::kMsgNameFieldNumber;
const int SensorHealth::kSensorNameFieldNumber;
const int SensorHealth::kPollTimeFieldNumber;
const int SensorHealth::kAverageCountFieldNumber;
const int SensorHealth::kCpuUsageFieldNumber;
const int SensorHealth::kCpuAverageFieldNumber;
const int SensorHealth::kRamUsageFieldNumber;
const int SensorHealth::kRamAverageFieldNumber;
const int SensorHealth::kDiskUsageFieldNumber;
const int SensorHealth::kDiskAverageFieldNumber;
const int SensorHealth::kCpuTempAvgFieldNumber;
const int SensorHealth::kCpuTempMinFieldNumber;
const int SensorHealth::kCpuTempMaxFieldNumber;
#endif  // !_MSC_VER

SensorHealth::SensorHealth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorHealth::InitAsDefaultInstance() {
}

SensorHealth::SensorHealth(const SensorHealth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorHealth::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  polltime_ = 0;
  averagecount_ = 0;
  cpuusage_ = 0;
  cpuaverage_ = 0;
  ramusage_ = 0;
  ramaverage_ = 0;
  diskusage_ = 0;
  diskaverage_ = 0;
  cputempavg_ = 0;
  cputempmin_ = 0;
  cputempmax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorHealth::~SensorHealth() {
  SharedDtor();
}

void SensorHealth::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (this != default_instance_) {
  }
}

void SensorHealth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorHealth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorHealth_descriptor_;
}

const SensorHealth& SensorHealth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

SensorHealth* SensorHealth::default_instance_ = NULL;

SensorHealth* SensorHealth::New() const {
  return new SensorHealth;
}

void SensorHealth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
    polltime_ = 0;
    averagecount_ = 0;
    cpuusage_ = 0;
    cpuaverage_ = 0;
    ramusage_ = 0;
    ramaverage_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    diskusage_ = 0;
    diskaverage_ = 0;
    cputempavg_ = 0;
    cputempmin_ = 0;
    cputempmax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorHealth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SENSOR_HEALTH"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pollTime;
        break;
      }

      // optional int32 pollTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pollTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &polltime_)));
          set_has_polltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_averageCount;
        break;
      }

      // optional int32 averageCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_averageCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &averagecount_)));
          set_has_averagecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_cpuUsage;
        break;
      }

      // optional float cpuUsage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpuUsage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpuusage_)));
          set_has_cpuusage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_cpuAverage;
        break;
      }

      // optional float cpuAverage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpuAverage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpuaverage_)));
          set_has_cpuaverage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_ramUsage;
        break;
      }

      // optional float ramUsage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ramUsage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ramusage_)));
          set_has_ramusage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_ramAverage;
        break;
      }

      // optional float ramAverage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ramAverage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ramaverage_)));
          set_has_ramaverage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_diskUsage;
        break;
      }

      // optional float diskUsage = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_diskUsage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &diskusage_)));
          set_has_diskusage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_diskAverage;
        break;
      }

      // optional float diskAverage = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_diskAverage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &diskaverage_)));
          set_has_diskaverage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_cpuTempAvg;
        break;
      }

      // optional float cpuTempAvg = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpuTempAvg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cputempavg_)));
          set_has_cputempavg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_cpuTempMin;
        break;
      }

      // optional float cpuTempMin = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpuTempMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cputempmin_)));
          set_has_cputempmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_cpuTempMax;
        break;
      }

      // optional float cpuTempMax = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpuTempMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cputempmax_)));
          set_has_cputempmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorHealth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SENSOR_HEALTH"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string sensorName = 2;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sensorname(), output);
  }

  // optional int32 pollTime = 3;
  if (has_polltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->polltime(), output);
  }

  // optional int32 averageCount = 4;
  if (has_averagecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->averagecount(), output);
  }

  // optional float cpuUsage = 5;
  if (has_cpuusage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cpuusage(), output);
  }

  // optional float cpuAverage = 6;
  if (has_cpuaverage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cpuaverage(), output);
  }

  // optional float ramUsage = 7;
  if (has_ramusage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->ramusage(), output);
  }

  // optional float ramAverage = 8;
  if (has_ramaverage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->ramaverage(), output);
  }

  // optional float diskUsage = 9;
  if (has_diskusage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->diskusage(), output);
  }

  // optional float diskAverage = 10;
  if (has_diskaverage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->diskaverage(), output);
  }

  // optional float cpuTempAvg = 11;
  if (has_cputempavg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->cputempavg(), output);
  }

  // optional float cpuTempMin = 12;
  if (has_cputempmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->cputempmin(), output);
  }

  // optional float cpuTempMax = 13;
  if (has_cputempmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->cputempmax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorHealth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SENSOR_HEALTH"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string sensorName = 2;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sensorname(), target);
  }

  // optional int32 pollTime = 3;
  if (has_polltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->polltime(), target);
  }

  // optional int32 averageCount = 4;
  if (has_averagecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->averagecount(), target);
  }

  // optional float cpuUsage = 5;
  if (has_cpuusage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cpuusage(), target);
  }

  // optional float cpuAverage = 6;
  if (has_cpuaverage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cpuaverage(), target);
  }

  // optional float ramUsage = 7;
  if (has_ramusage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->ramusage(), target);
  }

  // optional float ramAverage = 8;
  if (has_ramaverage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->ramaverage(), target);
  }

  // optional float diskUsage = 9;
  if (has_diskusage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->diskusage(), target);
  }

  // optional float diskAverage = 10;
  if (has_diskaverage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->diskaverage(), target);
  }

  // optional float cpuTempAvg = 11;
  if (has_cputempavg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->cputempavg(), target);
  }

  // optional float cpuTempMin = 12;
  if (has_cputempmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->cputempmin(), target);
  }

  // optional float cpuTempMax = 13;
  if (has_cputempmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->cputempmax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorHealth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SENSOR_HEALTH"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string sensorName = 2;
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

    // optional int32 pollTime = 3;
    if (has_polltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->polltime());
    }

    // optional int32 averageCount = 4;
    if (has_averagecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->averagecount());
    }

    // optional float cpuUsage = 5;
    if (has_cpuusage()) {
      total_size += 1 + 4;
    }

    // optional float cpuAverage = 6;
    if (has_cpuaverage()) {
      total_size += 1 + 4;
    }

    // optional float ramUsage = 7;
    if (has_ramusage()) {
      total_size += 1 + 4;
    }

    // optional float ramAverage = 8;
    if (has_ramaverage()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float diskUsage = 9;
    if (has_diskusage()) {
      total_size += 1 + 4;
    }

    // optional float diskAverage = 10;
    if (has_diskaverage()) {
      total_size += 1 + 4;
    }

    // optional float cpuTempAvg = 11;
    if (has_cputempavg()) {
      total_size += 1 + 4;
    }

    // optional float cpuTempMin = 12;
    if (has_cputempmin()) {
      total_size += 1 + 4;
    }

    // optional float cpuTempMax = 13;
    if (has_cputempmax()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorHealth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorHealth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorHealth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorHealth::MergeFrom(const SensorHealth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
    if (from.has_polltime()) {
      set_polltime(from.polltime());
    }
    if (from.has_averagecount()) {
      set_averagecount(from.averagecount());
    }
    if (from.has_cpuusage()) {
      set_cpuusage(from.cpuusage());
    }
    if (from.has_cpuaverage()) {
      set_cpuaverage(from.cpuaverage());
    }
    if (from.has_ramusage()) {
      set_ramusage(from.ramusage());
    }
    if (from.has_ramaverage()) {
      set_ramaverage(from.ramaverage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_diskusage()) {
      set_diskusage(from.diskusage());
    }
    if (from.has_diskaverage()) {
      set_diskaverage(from.diskaverage());
    }
    if (from.has_cputempavg()) {
      set_cputempavg(from.cputempavg());
    }
    if (from.has_cputempmin()) {
      set_cputempmin(from.cputempmin());
    }
    if (from.has_cputempmax()) {
      set_cputempmax(from.cputempmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorHealth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorHealth::CopyFrom(const SensorHealth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorHealth::IsInitialized() const {

  return true;
}

void SensorHealth::Swap(SensorHealth* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(polltime_, other->polltime_);
    std::swap(averagecount_, other->averagecount_);
    std::swap(cpuusage_, other->cpuusage_);
    std::swap(cpuaverage_, other->cpuaverage_);
    std::swap(ramusage_, other->ramusage_);
    std::swap(ramaverage_, other->ramaverage_);
    std::swap(diskusage_, other->diskusage_);
    std::swap(diskaverage_, other->diskaverage_);
    std::swap(cputempavg_, other->cputempavg_);
    std::swap(cputempmin_, other->cputempmin_);
    std::swap(cputempmax_, other->cputempmax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorHealth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorHealth_descriptor_;
  metadata.reflection = SensorHealth_reflection_;
  return metadata;
}


// ===================================================================

::std::string* HardwareStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int HardwareStatus::kMsgNameFieldNumber;
const int HardwareStatus::kIPAddressFieldNumber;
const int HardwareStatus::kSensorNameFieldNumber;
const int HardwareStatus::kCpuAvgTempFieldNumber;
const int HardwareStatus::kCpuHighTempFieldNumber;
const int HardwareStatus::kCpuIdlePercentFieldNumber;
const int HardwareStatus::kRamUsagePercentFieldNumber;
const int HardwareStatus::kOnlineFieldNumber;
const int HardwareStatus::kDeviceTypeFieldNumber;
#endif  // !_MSC_VER

HardwareStatus::HardwareStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HardwareStatus::InitAsDefaultInstance() {
}

HardwareStatus::HardwareStatus(const HardwareStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HardwareStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cpuavgtemp_ = 0;
  cpuidlepercent_ = 0;
  ramusagepercent_ = 0;
  online_ = false;
  devicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HardwareStatus::~HardwareStatus() {
  SharedDtor();
}

void HardwareStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete ipaddress_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (devicetype_ != &::google::protobuf::internal::kEmptyString) {
    delete devicetype_;
  }
  if (this != default_instance_) {
  }
}

void HardwareStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HardwareStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HardwareStatus_descriptor_;
}

const HardwareStatus& HardwareStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

HardwareStatus* HardwareStatus::default_instance_ = NULL;

HardwareStatus* HardwareStatus::New() const {
  return new HardwareStatus;
}

void HardwareStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_ipaddress()) {
      if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
        ipaddress_->clear();
      }
    }
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
    cpuavgtemp_ = 0;
    cpuidlepercent_ = 0;
    ramusagepercent_ = 0;
    online_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_devicetype()) {
      if (devicetype_ != &::google::protobuf::internal::kEmptyString) {
        devicetype_->clear();
      }
    }
  }
  cpuhightemp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HardwareStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "HARDWARE_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IPAddress;
        break;
      }

      // optional string IPAddress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IPAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_cpuAvgTemp;
        break;
      }

      // optional float cpuAvgTemp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpuAvgTemp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpuavgtemp_)));
          set_has_cpuavgtemp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_cpuHighTemp;
        break;
      }

      // repeated float cpuHighTemp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpuHighTemp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_cpuhightemp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_cpuhightemp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_cpuHighTemp;
        if (input->ExpectTag(53)) goto parse_cpuIdlePercent;
        break;
      }

      // optional float cpuIdlePercent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpuIdlePercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpuidlepercent_)));
          set_has_cpuidlepercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_ramUsagePercent;
        break;
      }

      // optional float ramUsagePercent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ramUsagePercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ramusagepercent_)));
          set_has_ramusagepercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_online;
        break;
      }

      // optional bool online = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_deviceType;
        break;
      }

      // optional string deviceType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicetype().data(), this->devicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HardwareStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "HARDWARE_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string IPAddress = 2;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ipaddress(), output);
  }

  // optional string sensorName = 3;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sensorname(), output);
  }

  // optional float cpuAvgTemp = 4;
  if (has_cpuavgtemp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cpuavgtemp(), output);
  }

  // repeated float cpuHighTemp = 5;
  for (int i = 0; i < this->cpuhightemp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->cpuhightemp(i), output);
  }

  // optional float cpuIdlePercent = 6;
  if (has_cpuidlepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cpuidlepercent(), output);
  }

  // optional float ramUsagePercent = 7;
  if (has_ramusagepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->ramusagepercent(), output);
  }

  // optional bool online = 8;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->online(), output);
  }

  // optional string deviceType = 9;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->devicetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HardwareStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "HARDWARE_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string IPAddress = 2;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ipaddress(), target);
  }

  // optional string sensorName = 3;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sensorname(), target);
  }

  // optional float cpuAvgTemp = 4;
  if (has_cpuavgtemp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cpuavgtemp(), target);
  }

  // repeated float cpuHighTemp = 5;
  for (int i = 0; i < this->cpuhightemp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->cpuhightemp(i), target);
  }

  // optional float cpuIdlePercent = 6;
  if (has_cpuidlepercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cpuidlepercent(), target);
  }

  // optional float ramUsagePercent = 7;
  if (has_ramusagepercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->ramusagepercent(), target);
  }

  // optional bool online = 8;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->online(), target);
  }

  // optional string deviceType = 9;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->devicetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HardwareStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "HARDWARE_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string IPAddress = 2;
    if (has_ipaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipaddress());
    }

    // optional string sensorName = 3;
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

    // optional float cpuAvgTemp = 4;
    if (has_cpuavgtemp()) {
      total_size += 1 + 4;
    }

    // optional float cpuIdlePercent = 6;
    if (has_cpuidlepercent()) {
      total_size += 1 + 4;
    }

    // optional float ramUsagePercent = 7;
    if (has_ramusagepercent()) {
      total_size += 1 + 4;
    }

    // optional bool online = 8;
    if (has_online()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string deviceType = 9;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicetype());
    }

  }
  // repeated float cpuHighTemp = 5;
  {
    int data_size = 0;
    data_size = 4 * this->cpuhightemp_size();
    total_size += 1 * this->cpuhightemp_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HardwareStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HardwareStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HardwareStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HardwareStatus::MergeFrom(const HardwareStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  cpuhightemp_.MergeFrom(from.cpuhightemp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_ipaddress()) {
      set_ipaddress(from.ipaddress());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
    if (from.has_cpuavgtemp()) {
      set_cpuavgtemp(from.cpuavgtemp());
    }
    if (from.has_cpuidlepercent()) {
      set_cpuidlepercent(from.cpuidlepercent());
    }
    if (from.has_ramusagepercent()) {
      set_ramusagepercent(from.ramusagepercent());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HardwareStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardwareStatus::CopyFrom(const HardwareStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardwareStatus::IsInitialized() const {

  return true;
}

void HardwareStatus::Swap(HardwareStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(ipaddress_, other->ipaddress_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(cpuavgtemp_, other->cpuavgtemp_);
    cpuhightemp_.Swap(&other->cpuhightemp_);
    std::swap(cpuidlepercent_, other->cpuidlepercent_);
    std::swap(ramusagepercent_, other->ramusagepercent_);
    std::swap(online_, other->online_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HardwareStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HardwareStatus_descriptor_;
  metadata.reflection = HardwareStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SensorStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SensorStatus::kMsgNameFieldNumber;
const int SensorStatus::kSensorHealthFieldNumber;
const int SensorStatus::kRxStatusFieldNumber;
const int SensorStatus::kSensorPositionFieldNumber;
#endif  // !_MSC_VER

SensorStatus::SensorStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorStatus::InitAsDefaultInstance() {
  sensor_health_ = const_cast< ::falcon_remoting_msg::SensorHealth*>(&::falcon_remoting_msg::SensorHealth::default_instance());
  sensor_position_ = const_cast< ::falcon_remoting_msg::SensorPosition*>(&::falcon_remoting_msg::SensorPosition::default_instance());
}

SensorStatus::SensorStatus(const SensorStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  sensor_health_ = NULL;
  sensor_position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorStatus::~SensorStatus() {
  SharedDtor();
}

void SensorStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete sensor_health_;
    delete sensor_position_;
  }
}

void SensorStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorStatus_descriptor_;
}

const SensorStatus& SensorStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

SensorStatus* SensorStatus::default_instance_ = NULL;

SensorStatus* SensorStatus::New() const {
  return new SensorStatus;
}

void SensorStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_sensor_health()) {
      if (sensor_health_ != NULL) sensor_health_->::falcon_remoting_msg::SensorHealth::Clear();
    }
    if (has_sensor_position()) {
      if (sensor_position_ != NULL) sensor_position_->::falcon_remoting_msg::SensorPosition::Clear();
    }
  }
  rx_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SENSOR_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sensor_health;
        break;
      }

      // optional .falcon_remoting_msg.SensorHealth sensor_health = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensor_health:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_health()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rx_status;
        break;
      }

      // repeated .falcon_remoting_msg.ReceiverStatus rx_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rx_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rx_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rx_status;
        if (input->ExpectTag(34)) goto parse_sensor_position;
        break;
      }

      // optional .falcon_remoting_msg.SensorPosition sensor_position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensor_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SENSOR_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .falcon_remoting_msg.SensorHealth sensor_health = 2;
  if (has_sensor_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sensor_health(), output);
  }

  // repeated .falcon_remoting_msg.ReceiverStatus rx_status = 3;
  for (int i = 0; i < this->rx_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rx_status(i), output);
  }

  // optional .falcon_remoting_msg.SensorPosition sensor_position = 4;
  if (has_sensor_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sensor_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SENSOR_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .falcon_remoting_msg.SensorHealth sensor_health = 2;
  if (has_sensor_health()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sensor_health(), target);
  }

  // repeated .falcon_remoting_msg.ReceiverStatus rx_status = 3;
  for (int i = 0; i < this->rx_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rx_status(i), target);
  }

  // optional .falcon_remoting_msg.SensorPosition sensor_position = 4;
  if (has_sensor_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sensor_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SENSOR_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .falcon_remoting_msg.SensorHealth sensor_health = 2;
    if (has_sensor_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor_health());
    }

    // optional .falcon_remoting_msg.SensorPosition sensor_position = 4;
    if (has_sensor_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor_position());
    }

  }
  // repeated .falcon_remoting_msg.ReceiverStatus rx_status = 3;
  total_size += 1 * this->rx_status_size();
  for (int i = 0; i < this->rx_status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rx_status(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorStatus::MergeFrom(const SensorStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  rx_status_.MergeFrom(from.rx_status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_sensor_health()) {
      mutable_sensor_health()->::falcon_remoting_msg::SensorHealth::MergeFrom(from.sensor_health());
    }
    if (from.has_sensor_position()) {
      mutable_sensor_position()->::falcon_remoting_msg::SensorPosition::MergeFrom(from.sensor_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorStatus::CopyFrom(const SensorStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorStatus::IsInitialized() const {

  return true;
}

void SensorStatus::Swap(SensorStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(sensor_health_, other->sensor_health_);
    rx_status_.Swap(&other->rx_status_);
    std::swap(sensor_position_, other->sensor_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorStatus_descriptor_;
  metadata.reflection = SensorStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* OrientationStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int OrientationStatus::kMsgNameFieldNumber;
const int OrientationStatus::kYawFieldNumber;
const int OrientationStatus::kRollFieldNumber;
const int OrientationStatus::kPitchFieldNumber;
const int OrientationStatus::kHeadingFieldNumber;
const int OrientationStatus::kSpeedFieldNumber;
#endif  // !_MSC_VER

OrientationStatus::OrientationStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrientationStatus::InitAsDefaultInstance() {
}

OrientationStatus::OrientationStatus(const OrientationStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrientationStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  yaw_ = 0;
  roll_ = 0;
  pitch_ = 0;
  heading_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrientationStatus::~OrientationStatus() {
  SharedDtor();
}

void OrientationStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void OrientationStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrientationStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrientationStatus_descriptor_;
}

const OrientationStatus& OrientationStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

OrientationStatus* OrientationStatus::default_instance_ = NULL;

OrientationStatus* OrientationStatus::New() const {
  return new OrientationStatus;
}

void OrientationStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    yaw_ = 0;
    roll_ = 0;
    pitch_ = 0;
    heading_ = 0;
    speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrientationStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ORIENTATION_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_yaw;
        break;
      }

      // optional float yaw = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_roll;
        break;
      }

      // optional float roll = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_pitch;
        break;
      }

      // optional float pitch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_heading;
        break;
      }

      // optional float heading = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_speed;
        break;
      }

      // optional float speed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrientationStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ORIENTATION_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional float yaw = 2;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->yaw(), output);
  }

  // optional float roll = 3;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->roll(), output);
  }

  // optional float pitch = 4;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pitch(), output);
  }

  // optional float heading = 5;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->heading(), output);
  }

  // optional float speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrientationStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ORIENTATION_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional float yaw = 2;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->yaw(), target);
  }

  // optional float roll = 3;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->roll(), target);
  }

  // optional float pitch = 4;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pitch(), target);
  }

  // optional float heading = 5;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->heading(), target);
  }

  // optional float speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrientationStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ORIENTATION_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional float yaw = 2;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

    // optional float roll = 3;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // optional float pitch = 4;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // optional float heading = 5;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // optional float speed = 6;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrientationStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrientationStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrientationStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrientationStatus::MergeFrom(const OrientationStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrientationStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrientationStatus::CopyFrom(const OrientationStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrientationStatus::IsInitialized() const {

  return true;
}

void OrientationStatus::Swap(OrientationStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(yaw_, other->yaw_);
    std::swap(roll_, other->roll_);
    std::swap(pitch_, other->pitch_);
    std::swap(heading_, other->heading_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrientationStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrientationStatus_descriptor_;
  metadata.reflection = OrientationStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReceiverStatus_GainMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverStatus_GainMode_descriptor_;
}
bool ReceiverStatus_GainMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReceiverStatus_GainMode ReceiverStatus::AGC;
const ReceiverStatus_GainMode ReceiverStatus::MANUAL;
const ReceiverStatus_GainMode ReceiverStatus::GainMode_MIN;
const ReceiverStatus_GainMode ReceiverStatus::GainMode_MAX;
const int ReceiverStatus::GainMode_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* ReceiverStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ReceiverStatus::kMsgNameFieldNumber;
const int ReceiverStatus::kIdNumFieldNumber;
const int ReceiverStatus::kNameFieldNumber;
const int ReceiverStatus::kTypeFieldNumber;
const int ReceiverStatus::kRxFreqFieldNumber;
const int ReceiverStatus::kRxBandwidthFieldNumber;
const int ReceiverStatus::kGainFieldNumber;
const int ReceiverStatus::kGainModeFieldNumber;
#endif  // !_MSC_VER

ReceiverStatus::ReceiverStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiverStatus::InitAsDefaultInstance() {
}

ReceiverStatus::ReceiverStatus(const ReceiverStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiverStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  idnum_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rxfreq_ = 0;
  rxbandwidth_ = 0;
  gain_ = 0;
  gainmode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiverStatus::~ReceiverStatus() {
  SharedDtor();
}

void ReceiverStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void ReceiverStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiverStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverStatus_descriptor_;
}

const ReceiverStatus& ReceiverStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

ReceiverStatus* ReceiverStatus::default_instance_ = NULL;

ReceiverStatus* ReceiverStatus::New() const {
  return new ReceiverStatus;
}

void ReceiverStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    idnum_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    rxfreq_ = 0;
    rxbandwidth_ = 0;
    gain_ = 0;
    gainmode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiverStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RECEIVER_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idNum;
        break;
      }

      // optional int32 idNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idnum_)));
          set_has_idnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_type;
        break;
      }

      // optional string type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rxFreq;
        break;
      }

      // optional float rxFreq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rxFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rxfreq_)));
          set_has_rxfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_rxBandwidth;
        break;
      }

      // optional float rxBandwidth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rxBandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rxbandwidth_)));
          set_has_rxbandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gain;
        break;
      }

      // optional int32 gain = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gainMode;
        break;
      }

      // optional .falcon_remoting_msg.ReceiverStatus.GainMode gainMode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gainMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_remoting_msg::ReceiverStatus_GainMode_IsValid(value)) {
            set_gainmode(static_cast< ::falcon_remoting_msg::ReceiverStatus_GainMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiverStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RECEIVER_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 idNum = 2;
  if (has_idnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->idnum(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->type(), output);
  }

  // optional float rxFreq = 5;
  if (has_rxfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rxfreq(), output);
  }

  // optional float rxBandwidth = 6;
  if (has_rxbandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rxbandwidth(), output);
  }

  // optional int32 gain = 7;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gain(), output);
  }

  // optional .falcon_remoting_msg.ReceiverStatus.GainMode gainMode = 8;
  if (has_gainmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->gainmode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiverStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RECEIVER_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 idNum = 2;
  if (has_idnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->idnum(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  // optional float rxFreq = 5;
  if (has_rxfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rxfreq(), target);
  }

  // optional float rxBandwidth = 6;
  if (has_rxbandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->rxbandwidth(), target);
  }

  // optional int32 gain = 7;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gain(), target);
  }

  // optional .falcon_remoting_msg.ReceiverStatus.GainMode gainMode = 8;
  if (has_gainmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->gainmode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiverStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RECEIVER_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 idNum = 2;
    if (has_idnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idnum());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional float rxFreq = 5;
    if (has_rxfreq()) {
      total_size += 1 + 4;
    }

    // optional float rxBandwidth = 6;
    if (has_rxbandwidth()) {
      total_size += 1 + 4;
    }

    // optional int32 gain = 7;
    if (has_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gain());
    }

    // optional .falcon_remoting_msg.ReceiverStatus.GainMode gainMode = 8;
    if (has_gainmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gainmode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiverStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiverStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiverStatus::MergeFrom(const ReceiverStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_idnum()) {
      set_idnum(from.idnum());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_rxfreq()) {
      set_rxfreq(from.rxfreq());
    }
    if (from.has_rxbandwidth()) {
      set_rxbandwidth(from.rxbandwidth());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
    if (from.has_gainmode()) {
      set_gainmode(from.gainmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiverStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverStatus::CopyFrom(const ReceiverStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverStatus::IsInitialized() const {

  return true;
}

void ReceiverStatus::Swap(ReceiverStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(idnum_, other->idnum_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(rxfreq_, other->rxfreq_);
    std::swap(rxbandwidth_, other->rxbandwidth_);
    std::swap(gain_, other->gain_);
    std::swap(gainmode_, other->gainmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiverStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiverStatus_descriptor_;
  metadata.reflection = ReceiverStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FieldofView::kBoreSiteFieldNumber;
const int FieldofView::kAzimuthFieldNumber;
const int FieldofView::kElevationFieldNumber;
const int FieldofView::kBeamWidthFieldNumber;
#endif  // !_MSC_VER

FieldofView::FieldofView()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FieldofView::InitAsDefaultInstance() {
}

FieldofView::FieldofView(const FieldofView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FieldofView::SharedCtor() {
  _cached_size_ = 0;
  boresite_ = 0;
  azimuth_ = 0;
  elevation_ = 0;
  beamwidth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldofView::~FieldofView() {
  SharedDtor();
}

void FieldofView::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FieldofView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldofView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldofView_descriptor_;
}

const FieldofView& FieldofView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconRemotingMessages_2eproto();
  return *default_instance_;
}

FieldofView* FieldofView::default_instance_ = NULL;

FieldofView* FieldofView::New() const {
  return new FieldofView;
}

void FieldofView::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boresite_ = 0;
    azimuth_ = 0;
    elevation_ = 0;
    beamwidth_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldofView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float boreSite = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &boresite_)));
          set_has_boresite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_azimuth;
        break;
      }

      // optional float azimuth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_elevation;
        break;
      }

      // optional float elevation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_beamWidth;
        break;
      }

      // optional float beamWidth = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_beamWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beamwidth_)));
          set_has_beamwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FieldofView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float boreSite = 1;
  if (has_boresite()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->boresite(), output);
  }

  // optional float azimuth = 2;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->azimuth(), output);
  }

  // optional float elevation = 3;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->elevation(), output);
  }

  // optional float beamWidth = 4;
  if (has_beamwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->beamwidth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FieldofView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float boreSite = 1;
  if (has_boresite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->boresite(), target);
  }

  // optional float azimuth = 2;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->azimuth(), target);
  }

  // optional float elevation = 3;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->elevation(), target);
  }

  // optional float beamWidth = 4;
  if (has_beamwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->beamwidth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FieldofView::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float boreSite = 1;
    if (has_boresite()) {
      total_size += 1 + 4;
    }

    // optional float azimuth = 2;
    if (has_azimuth()) {
      total_size += 1 + 4;
    }

    // optional float elevation = 3;
    if (has_elevation()) {
      total_size += 1 + 4;
    }

    // optional float beamWidth = 4;
    if (has_beamwidth()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldofView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldofView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldofView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FieldofView::MergeFrom(const FieldofView& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boresite()) {
      set_boresite(from.boresite());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
    if (from.has_beamwidth()) {
      set_beamwidth(from.beamwidth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldofView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldofView::CopyFrom(const FieldofView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldofView::IsInitialized() const {

  return true;
}

void FieldofView::Swap(FieldofView* other) {
  if (other != this) {
    std::swap(boresite_, other->boresite_);
    std::swap(azimuth_, other->azimuth_);
    std::swap(elevation_, other->elevation_);
    std::swap(beamwidth_, other->beamwidth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FieldofView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldofView_descriptor_;
  metadata.reflection = FieldofView_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace falcon_remoting_msg

// @@protoc_insertion_point(global_scope)
