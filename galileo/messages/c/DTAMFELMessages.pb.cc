// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DTAMFELMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DTAMFELMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RunMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunMode_reflection_ = NULL;
const ::google::protobuf::Descriptor* StandbyMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StandbyMode_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownSystem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownSystem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSystemStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSystemStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTrackList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTrackList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTrackReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTrackReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTrackPDWs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTrackPDWs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DtaResponseTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DtaResponseTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* DtaBitReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DtaBitReport_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DtaBitReport_ResultEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DtaBitReport_StateEnum_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DtaBitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DtaBitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DtaTrackReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DtaTrackReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* DtaSystemStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DtaSystemStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* DtaSystemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DtaSystemInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DTAMFELMessages_2eproto() {
  protobuf_AddDesc_DTAMFELMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DTAMFELMessages.proto");
  GOOGLE_CHECK(file != NULL);
  RunMode_descriptor_ = file->message_type(0);
  static const int RunMode_offsets_[1] = {
  };
  RunMode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunMode_descriptor_,
      RunMode::default_instance_,
      RunMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunMode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunMode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunMode));
  StandbyMode_descriptor_ = file->message_type(1);
  static const int StandbyMode_offsets_[1] = {
  };
  StandbyMode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StandbyMode_descriptor_,
      StandbyMode::default_instance_,
      StandbyMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandbyMode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandbyMode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StandbyMode));
  ShutdownSystem_descriptor_ = file->message_type(2);
  static const int ShutdownSystem_offsets_[1] = {
  };
  ShutdownSystem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShutdownSystem_descriptor_,
      ShutdownSystem::default_instance_,
      ShutdownSystem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownSystem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownSystem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShutdownSystem));
  GetSystemStatus_descriptor_ = file->message_type(3);
  static const int GetSystemStatus_offsets_[1] = {
  };
  GetSystemStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSystemStatus_descriptor_,
      GetSystemStatus::default_instance_,
      GetSystemStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSystemStatus));
  GetTrackList_descriptor_ = file->message_type(4);
  static const int GetTrackList_offsets_[1] = {
  };
  GetTrackList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTrackList_descriptor_,
      GetTrackList::default_instance_,
      GetTrackList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTrackList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTrackList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTrackList));
  GetTrackReport_descriptor_ = file->message_type(5);
  static const int GetTrackReport_offsets_[1] = {
  };
  GetTrackReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTrackReport_descriptor_,
      GetTrackReport::default_instance_,
      GetTrackReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTrackReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTrackReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTrackReport));
  GetTrackPDWs_descriptor_ = file->message_type(6);
  static const int GetTrackPDWs_offsets_[1] = {
  };
  GetTrackPDWs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTrackPDWs_descriptor_,
      GetTrackPDWs::default_instance_,
      GetTrackPDWs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTrackPDWs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTrackPDWs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTrackPDWs));
  ACK_descriptor_ = file->message_type(7);
  static const int ACK_offsets_[1] = {
  };
  ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACK_descriptor_,
      ACK::default_instance_,
      ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACK));
  SystemStatus_descriptor_ = file->message_type(8);
  static const int SystemStatus_offsets_[1] = {
  };
  SystemStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemStatus_descriptor_,
      SystemStatus::default_instance_,
      SystemStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemStatus));
  SystemInfo_descriptor_ = file->message_type(9);
  static const int SystemInfo_offsets_[1] = {
  };
  SystemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemInfo_descriptor_,
      SystemInfo::default_instance_,
      SystemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemInfo));
  DtaResponseTopic_descriptor_ = file->message_type(10);
  static const int DtaResponseTopic_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaResponseTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaResponseTopic, dta_bit_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaResponseTopic, dta_track_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaResponseTopic, dta_system_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaResponseTopic, dta_system_status_),
  };
  DtaResponseTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DtaResponseTopic_descriptor_,
      DtaResponseTopic::default_instance_,
      DtaResponseTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaResponseTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaResponseTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DtaResponseTopic));
  DtaBitReport_descriptor_ = file->message_type(11);
  static const int DtaBitReport_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaBitReport, test_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaBitReport, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaBitReport, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaBitReport, notes_),
  };
  DtaBitReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DtaBitReport_descriptor_,
      DtaBitReport::default_instance_,
      DtaBitReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaBitReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaBitReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DtaBitReport));
  DtaBitReport_ResultEnum_descriptor_ = DtaBitReport_descriptor_->enum_type(0);
  DtaBitReport_StateEnum_descriptor_ = DtaBitReport_descriptor_->enum_type(1);
  DtaBitResponse_descriptor_ = file->message_type(12);
  static const int DtaBitResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaBitResponse, dta_bit_reports_),
  };
  DtaBitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DtaBitResponse_descriptor_,
      DtaBitResponse::default_instance_,
      DtaBitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaBitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaBitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DtaBitResponse));
  DtaTrackReport_descriptor_ = file->message_type(13);
  static const int DtaTrackReport_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaTrackReport, empty_),
  };
  DtaTrackReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DtaTrackReport_descriptor_,
      DtaTrackReport::default_instance_,
      DtaTrackReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaTrackReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaTrackReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DtaTrackReport));
  DtaSystemStatus_descriptor_ = file->message_type(14);
  static const int DtaSystemStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaSystemStatus, empty_),
  };
  DtaSystemStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DtaSystemStatus_descriptor_,
      DtaSystemStatus::default_instance_,
      DtaSystemStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaSystemStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaSystemStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DtaSystemStatus));
  DtaSystemInfo_descriptor_ = file->message_type(15);
  static const int DtaSystemInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaSystemInfo, empty_),
  };
  DtaSystemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DtaSystemInfo_descriptor_,
      DtaSystemInfo::default_instance_,
      DtaSystemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaSystemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtaSystemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DtaSystemInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DTAMFELMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunMode_descriptor_, &RunMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StandbyMode_descriptor_, &StandbyMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShutdownSystem_descriptor_, &ShutdownSystem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSystemStatus_descriptor_, &GetSystemStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTrackList_descriptor_, &GetTrackList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTrackReport_descriptor_, &GetTrackReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTrackPDWs_descriptor_, &GetTrackPDWs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACK_descriptor_, &ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemStatus_descriptor_, &SystemStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemInfo_descriptor_, &SystemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DtaResponseTopic_descriptor_, &DtaResponseTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DtaBitReport_descriptor_, &DtaBitReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DtaBitResponse_descriptor_, &DtaBitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DtaTrackReport_descriptor_, &DtaTrackReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DtaSystemStatus_descriptor_, &DtaSystemStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DtaSystemInfo_descriptor_, &DtaSystemInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DTAMFELMessages_2eproto() {
  delete RunMode::default_instance_;
  delete RunMode_reflection_;
  delete StandbyMode::default_instance_;
  delete StandbyMode_reflection_;
  delete ShutdownSystem::default_instance_;
  delete ShutdownSystem_reflection_;
  delete GetSystemStatus::default_instance_;
  delete GetSystemStatus_reflection_;
  delete GetTrackList::default_instance_;
  delete GetTrackList_reflection_;
  delete GetTrackReport::default_instance_;
  delete GetTrackReport_reflection_;
  delete GetTrackPDWs::default_instance_;
  delete GetTrackPDWs_reflection_;
  delete ACK::default_instance_;
  delete ACK_reflection_;
  delete SystemStatus::default_instance_;
  delete SystemStatus_reflection_;
  delete SystemInfo::default_instance_;
  delete SystemInfo_reflection_;
  delete DtaResponseTopic::default_instance_;
  delete DtaResponseTopic_reflection_;
  delete DtaBitReport::default_instance_;
  delete DtaBitReport_reflection_;
  delete DtaBitReport::_default_notes_;
  delete DtaBitResponse::default_instance_;
  delete DtaBitResponse_reflection_;
  delete DtaTrackReport::default_instance_;
  delete DtaTrackReport_reflection_;
  delete DtaSystemStatus::default_instance_;
  delete DtaSystemStatus_reflection_;
  delete DtaSystemInfo::default_instance_;
  delete DtaSystemInfo_reflection_;
}

void protobuf_AddDesc_DTAMFELMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::fv::tb::protos::TBProtos::protobuf_AddDesc_ThunderbirdMessages_2eproto();
  ::service_infrastructure::protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  ::service_infrastructure::protobuf_AddDesc_ServiceInfrastructureExclusive_2eproto();
  ::bit_protos::protobuf_AddDesc_BitMessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025DTAMFELMessages.proto\032\031ThunderbirdMess"
    "ages.proto\032!ServiceInfrastructureCommon."
    "proto\032$ServiceInfrastructureExclusive.pr"
    "oto\032\021BitMessages.proto\"\t\n\007RunMode\"\r\n\013Sta"
    "ndbyMode\"\020\n\016ShutdownSystem\"\021\n\017GetSystemS"
    "tatus\"\016\n\014GetTrackList\"\020\n\016GetTrackReport\""
    "\016\n\014GetTrackPDWs\"\005\n\003ACK\"\016\n\014SystemStatus\"\014"
    "\n\nSystemInfo\"\356\001\n\020DtaResponseTopic\022.\n\006hea"
    "der\030d \001(\0132\036.service_infrastructure.Heade"
    "r\022)\n\020dta_bit_response\030\001 \001(\0132\017.DtaBitResp"
    "onse\022)\n\020dta_track_report\030\002 \001(\0132\017.DtaTrac"
    "kReport\022\'\n\017dta_system_info\030\003 \001(\0132\016.DtaSy"
    "stemInfo\022+\n\021dta_system_status\030\004 \001(\0132\020.Dt"
    "aSystemStatus\"\335\001\n\014DtaBitReport\022\021\n\ttest_n"
    "ame\030\001 \001(\t\022(\n\006result\030\002 \001(\0162\030.DtaBitReport"
    ".ResultEnum\022&\n\005state\030\003 \001(\0162\027.DtaBitRepor"
    "t.StateEnum\022\023\n\005notes\030\004 \001(\t:\004None\"&\n\nResu"
    "ltEnum\022\013\n\007NOERROR\020\000\022\013\n\007UNKNOWN\020\001\"+\n\tStat"
    "eEnum\022\013\n\007STANDBY\020\000\022\007\n\003RUN\020\001\022\010\n\004GOOD\020\002\"8\n"
    "\016DtaBitResponse\022&\n\017dta_bit_reports\030\001 \003(\013"
    "2\r.DtaBitReport\"\"\n\016DtaTrackReport\022\020\n\005emp"
    "ty\030\001 \001(\005:\0010\"#\n\017DtaSystemStatus\022\020\n\005empty\030"
    "\001 \001(\005:\0010\"!\n\rDtaSystemInfo\022\020\n\005empty\030\001 \001(\005"
    ":\0010", 923);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DTAMFELMessages.proto", &protobuf_RegisterTypes);
  RunMode::default_instance_ = new RunMode();
  StandbyMode::default_instance_ = new StandbyMode();
  ShutdownSystem::default_instance_ = new ShutdownSystem();
  GetSystemStatus::default_instance_ = new GetSystemStatus();
  GetTrackList::default_instance_ = new GetTrackList();
  GetTrackReport::default_instance_ = new GetTrackReport();
  GetTrackPDWs::default_instance_ = new GetTrackPDWs();
  ACK::default_instance_ = new ACK();
  SystemStatus::default_instance_ = new SystemStatus();
  SystemInfo::default_instance_ = new SystemInfo();
  DtaResponseTopic::default_instance_ = new DtaResponseTopic();
  DtaBitReport::_default_notes_ =
      new ::std::string("None", 4);
  DtaBitReport::default_instance_ = new DtaBitReport();
  DtaBitResponse::default_instance_ = new DtaBitResponse();
  DtaTrackReport::default_instance_ = new DtaTrackReport();
  DtaSystemStatus::default_instance_ = new DtaSystemStatus();
  DtaSystemInfo::default_instance_ = new DtaSystemInfo();
  RunMode::default_instance_->InitAsDefaultInstance();
  StandbyMode::default_instance_->InitAsDefaultInstance();
  ShutdownSystem::default_instance_->InitAsDefaultInstance();
  GetSystemStatus::default_instance_->InitAsDefaultInstance();
  GetTrackList::default_instance_->InitAsDefaultInstance();
  GetTrackReport::default_instance_->InitAsDefaultInstance();
  GetTrackPDWs::default_instance_->InitAsDefaultInstance();
  ACK::default_instance_->InitAsDefaultInstance();
  SystemStatus::default_instance_->InitAsDefaultInstance();
  SystemInfo::default_instance_->InitAsDefaultInstance();
  DtaResponseTopic::default_instance_->InitAsDefaultInstance();
  DtaBitReport::default_instance_->InitAsDefaultInstance();
  DtaBitResponse::default_instance_->InitAsDefaultInstance();
  DtaTrackReport::default_instance_->InitAsDefaultInstance();
  DtaSystemStatus::default_instance_->InitAsDefaultInstance();
  DtaSystemInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DTAMFELMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DTAMFELMessages_2eproto {
  StaticDescriptorInitializer_DTAMFELMessages_2eproto() {
    protobuf_AddDesc_DTAMFELMessages_2eproto();
  }
} static_descriptor_initializer_DTAMFELMessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RunMode::RunMode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RunMode::InitAsDefaultInstance() {
}

RunMode::RunMode(const RunMode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RunMode::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunMode::~RunMode() {
  SharedDtor();
}

void RunMode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RunMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunMode_descriptor_;
}

const RunMode& RunMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTAMFELMessages_2eproto();
  return *default_instance_;
}

RunMode* RunMode::default_instance_ = NULL;

RunMode* RunMode::New() const {
  return new RunMode;
}

void RunMode::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RunMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RunMode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RunMode::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunMode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunMode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunMode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunMode::MergeFrom(const RunMode& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunMode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunMode::CopyFrom(const RunMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunMode::IsInitialized() const {

  return true;
}

void RunMode::Swap(RunMode* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunMode_descriptor_;
  metadata.reflection = RunMode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StandbyMode::StandbyMode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StandbyMode::InitAsDefaultInstance() {
}

StandbyMode::StandbyMode(const StandbyMode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StandbyMode::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StandbyMode::~StandbyMode() {
  SharedDtor();
}

void StandbyMode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StandbyMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StandbyMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StandbyMode_descriptor_;
}

const StandbyMode& StandbyMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTAMFELMessages_2eproto();
  return *default_instance_;
}

StandbyMode* StandbyMode::default_instance_ = NULL;

StandbyMode* StandbyMode::New() const {
  return new StandbyMode;
}

void StandbyMode::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StandbyMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void StandbyMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StandbyMode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StandbyMode::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StandbyMode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StandbyMode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StandbyMode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StandbyMode::MergeFrom(const StandbyMode& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StandbyMode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StandbyMode::CopyFrom(const StandbyMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StandbyMode::IsInitialized() const {

  return true;
}

void StandbyMode::Swap(StandbyMode* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StandbyMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StandbyMode_descriptor_;
  metadata.reflection = StandbyMode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShutdownSystem::ShutdownSystem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShutdownSystem::InitAsDefaultInstance() {
}

ShutdownSystem::ShutdownSystem(const ShutdownSystem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShutdownSystem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShutdownSystem::~ShutdownSystem() {
  SharedDtor();
}

void ShutdownSystem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShutdownSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownSystem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownSystem_descriptor_;
}

const ShutdownSystem& ShutdownSystem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTAMFELMessages_2eproto();
  return *default_instance_;
}

ShutdownSystem* ShutdownSystem::default_instance_ = NULL;

ShutdownSystem* ShutdownSystem::New() const {
  return new ShutdownSystem;
}

void ShutdownSystem::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShutdownSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ShutdownSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShutdownSystem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShutdownSystem::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownSystem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShutdownSystem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShutdownSystem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutdownSystem::MergeFrom(const ShutdownSystem& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShutdownSystem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownSystem::CopyFrom(const ShutdownSystem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownSystem::IsInitialized() const {

  return true;
}

void ShutdownSystem::Swap(ShutdownSystem* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShutdownSystem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownSystem_descriptor_;
  metadata.reflection = ShutdownSystem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetSystemStatus::GetSystemStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSystemStatus::InitAsDefaultInstance() {
}

GetSystemStatus::GetSystemStatus(const GetSystemStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSystemStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSystemStatus::~GetSystemStatus() {
  SharedDtor();
}

void GetSystemStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSystemStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSystemStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSystemStatus_descriptor_;
}

const GetSystemStatus& GetSystemStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTAMFELMessages_2eproto();
  return *default_instance_;
}

GetSystemStatus* GetSystemStatus::default_instance_ = NULL;

GetSystemStatus* GetSystemStatus::New() const {
  return new GetSystemStatus;
}

void GetSystemStatus::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSystemStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetSystemStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSystemStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSystemStatus::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSystemStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSystemStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSystemStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSystemStatus::MergeFrom(const GetSystemStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSystemStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSystemStatus::CopyFrom(const GetSystemStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemStatus::IsInitialized() const {

  return true;
}

void GetSystemStatus::Swap(GetSystemStatus* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSystemStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSystemStatus_descriptor_;
  metadata.reflection = GetSystemStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetTrackList::GetTrackList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTrackList::InitAsDefaultInstance() {
}

GetTrackList::GetTrackList(const GetTrackList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTrackList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTrackList::~GetTrackList() {
  SharedDtor();
}

void GetTrackList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTrackList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTrackList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTrackList_descriptor_;
}

const GetTrackList& GetTrackList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTAMFELMessages_2eproto();
  return *default_instance_;
}

GetTrackList* GetTrackList::default_instance_ = NULL;

GetTrackList* GetTrackList::New() const {
  return new GetTrackList;
}

void GetTrackList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTrackList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetTrackList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTrackList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTrackList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTrackList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTrackList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTrackList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTrackList::MergeFrom(const GetTrackList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTrackList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTrackList::CopyFrom(const GetTrackList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrackList::IsInitialized() const {

  return true;
}

void GetTrackList::Swap(GetTrackList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTrackList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTrackList_descriptor_;
  metadata.reflection = GetTrackList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetTrackReport::GetTrackReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTrackReport::InitAsDefaultInstance() {
}

GetTrackReport::GetTrackReport(const GetTrackReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTrackReport::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTrackReport::~GetTrackReport() {
  SharedDtor();
}

void GetTrackReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTrackReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTrackReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTrackReport_descriptor_;
}

const GetTrackReport& GetTrackReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTAMFELMessages_2eproto();
  return *default_instance_;
}

GetTrackReport* GetTrackReport::default_instance_ = NULL;

GetTrackReport* GetTrackReport::New() const {
  return new GetTrackReport;
}

void GetTrackReport::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTrackReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetTrackReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTrackReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTrackReport::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTrackReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTrackReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTrackReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTrackReport::MergeFrom(const GetTrackReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTrackReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTrackReport::CopyFrom(const GetTrackReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrackReport::IsInitialized() const {

  return true;
}

void GetTrackReport::Swap(GetTrackReport* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTrackReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTrackReport_descriptor_;
  metadata.reflection = GetTrackReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetTrackPDWs::GetTrackPDWs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTrackPDWs::InitAsDefaultInstance() {
}

GetTrackPDWs::GetTrackPDWs(const GetTrackPDWs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTrackPDWs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTrackPDWs::~GetTrackPDWs() {
  SharedDtor();
}

void GetTrackPDWs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTrackPDWs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTrackPDWs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTrackPDWs_descriptor_;
}

const GetTrackPDWs& GetTrackPDWs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTAMFELMessages_2eproto();
  return *default_instance_;
}

GetTrackPDWs* GetTrackPDWs::default_instance_ = NULL;

GetTrackPDWs* GetTrackPDWs::New() const {
  return new GetTrackPDWs;
}

void GetTrackPDWs::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTrackPDWs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetTrackPDWs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTrackPDWs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTrackPDWs::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTrackPDWs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTrackPDWs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTrackPDWs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTrackPDWs::MergeFrom(const GetTrackPDWs& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTrackPDWs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTrackPDWs::CopyFrom(const GetTrackPDWs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrackPDWs::IsInitialized() const {

  return true;
}

void GetTrackPDWs::Swap(GetTrackPDWs* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTrackPDWs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTrackPDWs_descriptor_;
  metadata.reflection = GetTrackPDWs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ACK::ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACK::InitAsDefaultInstance() {
}

ACK::ACK(const ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACK::~ACK() {
  SharedDtor();
}

void ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACK_descriptor_;
}

const ACK& ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTAMFELMessages_2eproto();
  return *default_instance_;
}

ACK* ACK::default_instance_ = NULL;

ACK* ACK::New() const {
  return new ACK;
}

void ACK::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACK::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACK::MergeFrom(const ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACK::CopyFrom(const ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACK::IsInitialized() const {

  return true;
}

void ACK::Swap(ACK* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACK_descriptor_;
  metadata.reflection = ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SystemStatus::SystemStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemStatus::InitAsDefaultInstance() {
}

SystemStatus::SystemStatus(const SystemStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemStatus::~SystemStatus() {
  SharedDtor();
}

void SystemStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SystemStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemStatus_descriptor_;
}

const SystemStatus& SystemStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTAMFELMessages_2eproto();
  return *default_instance_;
}

SystemStatus* SystemStatus::default_instance_ = NULL;

SystemStatus* SystemStatus::New() const {
  return new SystemStatus;
}

void SystemStatus::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SystemStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemStatus::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemStatus::MergeFrom(const SystemStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemStatus::CopyFrom(const SystemStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemStatus::IsInitialized() const {

  return true;
}

void SystemStatus::Swap(SystemStatus* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemStatus_descriptor_;
  metadata.reflection = SystemStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SystemInfo::SystemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemInfo::InitAsDefaultInstance() {
}

SystemInfo::SystemInfo(const SystemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemInfo::~SystemInfo() {
  SharedDtor();
}

void SystemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemInfo_descriptor_;
}

const SystemInfo& SystemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTAMFELMessages_2eproto();
  return *default_instance_;
}

SystemInfo* SystemInfo::default_instance_ = NULL;

SystemInfo* SystemInfo::New() const {
  return new SystemInfo;
}

void SystemInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemInfo::MergeFrom(const SystemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemInfo::CopyFrom(const SystemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemInfo::IsInitialized() const {

  return true;
}

void SystemInfo::Swap(SystemInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemInfo_descriptor_;
  metadata.reflection = SystemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DtaResponseTopic::kHeaderFieldNumber;
const int DtaResponseTopic::kDtaBitResponseFieldNumber;
const int DtaResponseTopic::kDtaTrackReportFieldNumber;
const int DtaResponseTopic::kDtaSystemInfoFieldNumber;
const int DtaResponseTopic::kDtaSystemStatusFieldNumber;
#endif  // !_MSC_VER

DtaResponseTopic::DtaResponseTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DtaResponseTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  dta_bit_response_ = const_cast< ::DtaBitResponse*>(&::DtaBitResponse::default_instance());
  dta_track_report_ = const_cast< ::DtaTrackReport*>(&::DtaTrackReport::default_instance());
  dta_system_info_ = const_cast< ::DtaSystemInfo*>(&::DtaSystemInfo::default_instance());
  dta_system_status_ = const_cast< ::DtaSystemStatus*>(&::DtaSystemStatus::default_instance());
}

DtaResponseTopic::DtaResponseTopic(const DtaResponseTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DtaResponseTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  dta_bit_response_ = NULL;
  dta_track_report_ = NULL;
  dta_system_info_ = NULL;
  dta_system_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DtaResponseTopic::~DtaResponseTopic() {
  SharedDtor();
}

void DtaResponseTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete dta_bit_response_;
    delete dta_track_report_;
    delete dta_system_info_;
    delete dta_system_status_;
  }
}

void DtaResponseTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DtaResponseTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DtaResponseTopic_descriptor_;
}

const DtaResponseTopic& DtaResponseTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTAMFELMessages_2eproto();
  return *default_instance_;
}

DtaResponseTopic* DtaResponseTopic::default_instance_ = NULL;

DtaResponseTopic* DtaResponseTopic::New() const {
  return new DtaResponseTopic;
}

void DtaResponseTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_dta_bit_response()) {
      if (dta_bit_response_ != NULL) dta_bit_response_->::DtaBitResponse::Clear();
    }
    if (has_dta_track_report()) {
      if (dta_track_report_ != NULL) dta_track_report_->::DtaTrackReport::Clear();
    }
    if (has_dta_system_info()) {
      if (dta_system_info_ != NULL) dta_system_info_->::DtaSystemInfo::Clear();
    }
    if (has_dta_system_status()) {
      if (dta_system_status_ != NULL) dta_system_status_->::DtaSystemStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DtaResponseTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DtaBitResponse dta_bit_response = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dta_bit_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dta_track_report;
        break;
      }

      // optional .DtaTrackReport dta_track_report = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dta_track_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dta_track_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dta_system_info;
        break;
      }

      // optional .DtaSystemInfo dta_system_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dta_system_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dta_system_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dta_system_status;
        break;
      }

      // optional .DtaSystemStatus dta_system_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dta_system_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dta_system_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DtaResponseTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DtaBitResponse dta_bit_response = 1;
  if (has_dta_bit_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dta_bit_response(), output);
  }

  // optional .DtaTrackReport dta_track_report = 2;
  if (has_dta_track_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dta_track_report(), output);
  }

  // optional .DtaSystemInfo dta_system_info = 3;
  if (has_dta_system_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dta_system_info(), output);
  }

  // optional .DtaSystemStatus dta_system_status = 4;
  if (has_dta_system_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dta_system_status(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DtaResponseTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DtaBitResponse dta_bit_response = 1;
  if (has_dta_bit_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dta_bit_response(), target);
  }

  // optional .DtaTrackReport dta_track_report = 2;
  if (has_dta_track_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dta_track_report(), target);
  }

  // optional .DtaSystemInfo dta_system_info = 3;
  if (has_dta_system_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dta_system_info(), target);
  }

  // optional .DtaSystemStatus dta_system_status = 4;
  if (has_dta_system_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dta_system_status(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DtaResponseTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .DtaBitResponse dta_bit_response = 1;
    if (has_dta_bit_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dta_bit_response());
    }

    // optional .DtaTrackReport dta_track_report = 2;
    if (has_dta_track_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dta_track_report());
    }

    // optional .DtaSystemInfo dta_system_info = 3;
    if (has_dta_system_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dta_system_info());
    }

    // optional .DtaSystemStatus dta_system_status = 4;
    if (has_dta_system_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dta_system_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DtaResponseTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DtaResponseTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DtaResponseTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DtaResponseTopic::MergeFrom(const DtaResponseTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_dta_bit_response()) {
      mutable_dta_bit_response()->::DtaBitResponse::MergeFrom(from.dta_bit_response());
    }
    if (from.has_dta_track_report()) {
      mutable_dta_track_report()->::DtaTrackReport::MergeFrom(from.dta_track_report());
    }
    if (from.has_dta_system_info()) {
      mutable_dta_system_info()->::DtaSystemInfo::MergeFrom(from.dta_system_info());
    }
    if (from.has_dta_system_status()) {
      mutable_dta_system_status()->::DtaSystemStatus::MergeFrom(from.dta_system_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DtaResponseTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DtaResponseTopic::CopyFrom(const DtaResponseTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtaResponseTopic::IsInitialized() const {

  return true;
}

void DtaResponseTopic::Swap(DtaResponseTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(dta_bit_response_, other->dta_bit_response_);
    std::swap(dta_track_report_, other->dta_track_report_);
    std::swap(dta_system_info_, other->dta_system_info_);
    std::swap(dta_system_status_, other->dta_system_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DtaResponseTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DtaResponseTopic_descriptor_;
  metadata.reflection = DtaResponseTopic_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DtaBitReport_ResultEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DtaBitReport_ResultEnum_descriptor_;
}
bool DtaBitReport_ResultEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DtaBitReport_ResultEnum DtaBitReport::NOERROR;
const DtaBitReport_ResultEnum DtaBitReport::UNKNOWN;
const DtaBitReport_ResultEnum DtaBitReport::ResultEnum_MIN;
const DtaBitReport_ResultEnum DtaBitReport::ResultEnum_MAX;
const int DtaBitReport::ResultEnum_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DtaBitReport_StateEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DtaBitReport_StateEnum_descriptor_;
}
bool DtaBitReport_StateEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DtaBitReport_StateEnum DtaBitReport::STANDBY;
const DtaBitReport_StateEnum DtaBitReport::RUN;
const DtaBitReport_StateEnum DtaBitReport::GOOD;
const DtaBitReport_StateEnum DtaBitReport::StateEnum_MIN;
const DtaBitReport_StateEnum DtaBitReport::StateEnum_MAX;
const int DtaBitReport::StateEnum_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* DtaBitReport::_default_notes_ = NULL;
#ifndef _MSC_VER
const int DtaBitReport::kTestNameFieldNumber;
const int DtaBitReport::kResultFieldNumber;
const int DtaBitReport::kStateFieldNumber;
const int DtaBitReport::kNotesFieldNumber;
#endif  // !_MSC_VER

DtaBitReport::DtaBitReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DtaBitReport::InitAsDefaultInstance() {
}

DtaBitReport::DtaBitReport(const DtaBitReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DtaBitReport::SharedCtor() {
  _cached_size_ = 0;
  test_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  state_ = 0;
  notes_ = const_cast< ::std::string*>(_default_notes_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DtaBitReport::~DtaBitReport() {
  SharedDtor();
}

void DtaBitReport::SharedDtor() {
  if (test_name_ != &::google::protobuf::internal::kEmptyString) {
    delete test_name_;
  }
  if (notes_ != _default_notes_) {
    delete notes_;
  }
  if (this != default_instance_) {
  }
}

void DtaBitReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DtaBitReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DtaBitReport_descriptor_;
}

const DtaBitReport& DtaBitReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTAMFELMessages_2eproto();
  return *default_instance_;
}

DtaBitReport* DtaBitReport::default_instance_ = NULL;

DtaBitReport* DtaBitReport::New() const {
  return new DtaBitReport;
}

void DtaBitReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_name()) {
      if (test_name_ != &::google::protobuf::internal::kEmptyString) {
        test_name_->clear();
      }
    }
    result_ = 0;
    state_ = 0;
    if (has_notes()) {
      if (notes_ != _default_notes_) {
        notes_->assign(*_default_notes_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DtaBitReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string test_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->test_name().data(), this->test_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .DtaBitReport.ResultEnum result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DtaBitReport_ResultEnum_IsValid(value)) {
            set_result(static_cast< ::DtaBitReport_ResultEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .DtaBitReport.StateEnum state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DtaBitReport_StateEnum_IsValid(value)) {
            set_state(static_cast< ::DtaBitReport_StateEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_notes;
        break;
      }

      // optional string notes = 4 [default = "None"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notes().data(), this->notes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DtaBitReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string test_name = 1;
  if (has_test_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_name().data(), this->test_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->test_name(), output);
  }

  // optional .DtaBitReport.ResultEnum result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional .DtaBitReport.StateEnum state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // optional string notes = 4 [default = "None"];
  if (has_notes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notes().data(), this->notes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->notes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DtaBitReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string test_name = 1;
  if (has_test_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_name().data(), this->test_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->test_name(), target);
  }

  // optional .DtaBitReport.ResultEnum result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional .DtaBitReport.StateEnum state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // optional string notes = 4 [default = "None"];
  if (has_notes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notes().data(), this->notes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->notes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DtaBitReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string test_name = 1;
    if (has_test_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_name());
    }

    // optional .DtaBitReport.ResultEnum result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .DtaBitReport.StateEnum state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string notes = 4 [default = "None"];
    if (has_notes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DtaBitReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DtaBitReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DtaBitReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DtaBitReport::MergeFrom(const DtaBitReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_name()) {
      set_test_name(from.test_name());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_notes()) {
      set_notes(from.notes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DtaBitReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DtaBitReport::CopyFrom(const DtaBitReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtaBitReport::IsInitialized() const {

  return true;
}

void DtaBitReport::Swap(DtaBitReport* other) {
  if (other != this) {
    std::swap(test_name_, other->test_name_);
    std::swap(result_, other->result_);
    std::swap(state_, other->state_);
    std::swap(notes_, other->notes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DtaBitReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DtaBitReport_descriptor_;
  metadata.reflection = DtaBitReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DtaBitResponse::kDtaBitReportsFieldNumber;
#endif  // !_MSC_VER

DtaBitResponse::DtaBitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DtaBitResponse::InitAsDefaultInstance() {
}

DtaBitResponse::DtaBitResponse(const DtaBitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DtaBitResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DtaBitResponse::~DtaBitResponse() {
  SharedDtor();
}

void DtaBitResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DtaBitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DtaBitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DtaBitResponse_descriptor_;
}

const DtaBitResponse& DtaBitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTAMFELMessages_2eproto();
  return *default_instance_;
}

DtaBitResponse* DtaBitResponse::default_instance_ = NULL;

DtaBitResponse* DtaBitResponse::New() const {
  return new DtaBitResponse;
}

void DtaBitResponse::Clear() {
  dta_bit_reports_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DtaBitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DtaBitReport dta_bit_reports = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dta_bit_reports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dta_bit_reports()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dta_bit_reports;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DtaBitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DtaBitReport dta_bit_reports = 1;
  for (int i = 0; i < this->dta_bit_reports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dta_bit_reports(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DtaBitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DtaBitReport dta_bit_reports = 1;
  for (int i = 0; i < this->dta_bit_reports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dta_bit_reports(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DtaBitResponse::ByteSize() const {
  int total_size = 0;

  // repeated .DtaBitReport dta_bit_reports = 1;
  total_size += 1 * this->dta_bit_reports_size();
  for (int i = 0; i < this->dta_bit_reports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dta_bit_reports(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DtaBitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DtaBitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DtaBitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DtaBitResponse::MergeFrom(const DtaBitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  dta_bit_reports_.MergeFrom(from.dta_bit_reports_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DtaBitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DtaBitResponse::CopyFrom(const DtaBitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtaBitResponse::IsInitialized() const {

  return true;
}

void DtaBitResponse::Swap(DtaBitResponse* other) {
  if (other != this) {
    dta_bit_reports_.Swap(&other->dta_bit_reports_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DtaBitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DtaBitResponse_descriptor_;
  metadata.reflection = DtaBitResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DtaTrackReport::kEmptyFieldNumber;
#endif  // !_MSC_VER

DtaTrackReport::DtaTrackReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DtaTrackReport::InitAsDefaultInstance() {
}

DtaTrackReport::DtaTrackReport(const DtaTrackReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DtaTrackReport::SharedCtor() {
  _cached_size_ = 0;
  empty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DtaTrackReport::~DtaTrackReport() {
  SharedDtor();
}

void DtaTrackReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DtaTrackReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DtaTrackReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DtaTrackReport_descriptor_;
}

const DtaTrackReport& DtaTrackReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTAMFELMessages_2eproto();
  return *default_instance_;
}

DtaTrackReport* DtaTrackReport::default_instance_ = NULL;

DtaTrackReport* DtaTrackReport::New() const {
  return new DtaTrackReport;
}

void DtaTrackReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    empty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DtaTrackReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 empty = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &empty_)));
          set_has_empty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DtaTrackReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 empty = 1 [default = 0];
  if (has_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->empty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DtaTrackReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 empty = 1 [default = 0];
  if (has_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->empty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DtaTrackReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 empty = 1 [default = 0];
    if (has_empty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->empty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DtaTrackReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DtaTrackReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DtaTrackReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DtaTrackReport::MergeFrom(const DtaTrackReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_empty()) {
      set_empty(from.empty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DtaTrackReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DtaTrackReport::CopyFrom(const DtaTrackReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtaTrackReport::IsInitialized() const {

  return true;
}

void DtaTrackReport::Swap(DtaTrackReport* other) {
  if (other != this) {
    std::swap(empty_, other->empty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DtaTrackReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DtaTrackReport_descriptor_;
  metadata.reflection = DtaTrackReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DtaSystemStatus::kEmptyFieldNumber;
#endif  // !_MSC_VER

DtaSystemStatus::DtaSystemStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DtaSystemStatus::InitAsDefaultInstance() {
}

DtaSystemStatus::DtaSystemStatus(const DtaSystemStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DtaSystemStatus::SharedCtor() {
  _cached_size_ = 0;
  empty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DtaSystemStatus::~DtaSystemStatus() {
  SharedDtor();
}

void DtaSystemStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DtaSystemStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DtaSystemStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DtaSystemStatus_descriptor_;
}

const DtaSystemStatus& DtaSystemStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTAMFELMessages_2eproto();
  return *default_instance_;
}

DtaSystemStatus* DtaSystemStatus::default_instance_ = NULL;

DtaSystemStatus* DtaSystemStatus::New() const {
  return new DtaSystemStatus;
}

void DtaSystemStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    empty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DtaSystemStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 empty = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &empty_)));
          set_has_empty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DtaSystemStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 empty = 1 [default = 0];
  if (has_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->empty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DtaSystemStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 empty = 1 [default = 0];
  if (has_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->empty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DtaSystemStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 empty = 1 [default = 0];
    if (has_empty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->empty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DtaSystemStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DtaSystemStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DtaSystemStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DtaSystemStatus::MergeFrom(const DtaSystemStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_empty()) {
      set_empty(from.empty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DtaSystemStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DtaSystemStatus::CopyFrom(const DtaSystemStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtaSystemStatus::IsInitialized() const {

  return true;
}

void DtaSystemStatus::Swap(DtaSystemStatus* other) {
  if (other != this) {
    std::swap(empty_, other->empty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DtaSystemStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DtaSystemStatus_descriptor_;
  metadata.reflection = DtaSystemStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DtaSystemInfo::kEmptyFieldNumber;
#endif  // !_MSC_VER

DtaSystemInfo::DtaSystemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DtaSystemInfo::InitAsDefaultInstance() {
}

DtaSystemInfo::DtaSystemInfo(const DtaSystemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DtaSystemInfo::SharedCtor() {
  _cached_size_ = 0;
  empty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DtaSystemInfo::~DtaSystemInfo() {
  SharedDtor();
}

void DtaSystemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DtaSystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DtaSystemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DtaSystemInfo_descriptor_;
}

const DtaSystemInfo& DtaSystemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DTAMFELMessages_2eproto();
  return *default_instance_;
}

DtaSystemInfo* DtaSystemInfo::default_instance_ = NULL;

DtaSystemInfo* DtaSystemInfo::New() const {
  return new DtaSystemInfo;
}

void DtaSystemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    empty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DtaSystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 empty = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &empty_)));
          set_has_empty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DtaSystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 empty = 1 [default = 0];
  if (has_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->empty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DtaSystemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 empty = 1 [default = 0];
  if (has_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->empty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DtaSystemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 empty = 1 [default = 0];
    if (has_empty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->empty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DtaSystemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DtaSystemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DtaSystemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DtaSystemInfo::MergeFrom(const DtaSystemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_empty()) {
      set_empty(from.empty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DtaSystemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DtaSystemInfo::CopyFrom(const DtaSystemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtaSystemInfo::IsInitialized() const {

  return true;
}

void DtaSystemInfo::Swap(DtaSystemInfo* other) {
  if (other != this) {
    std::swap(empty_, other->empty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DtaSystemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DtaSystemInfo_descriptor_;
  metadata.reflection = DtaSystemInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
