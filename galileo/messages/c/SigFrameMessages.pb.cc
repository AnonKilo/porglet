// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SigFrameMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SigFrameMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fv {
namespace sf {
namespace protos {
namespace SFProtos {

namespace {

const ::google::protobuf::Descriptor* SIGFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SIGFrame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SigFrameMessages_2eproto() {
  protobuf_AddDesc_SigFrameMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SigFrameMessages.proto");
  GOOGLE_CHECK(file != NULL);
  SIGFrame_descriptor_ = file->message_type(0);
  static const int SIGFrame_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, signal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, wholeseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, fractionalseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, center_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, center_freq_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, sample_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, ber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, frame_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, tail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, sensorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, uuid_),
  };
  SIGFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SIGFrame_descriptor_,
      SIGFrame::default_instance_,
      SIGFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIGFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SIGFrame));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SigFrameMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SIGFrame_descriptor_, &SIGFrame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SigFrameMessages_2eproto() {
  delete SIGFrame::default_instance_;
  delete SIGFrame_reflection_;
  delete SIGFrame::_default_msgname_;
}

void protobuf_AddDesc_SigFrameMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026SigFrameMessages.proto\022\025fv.sf.protos.S"
    "FProtos\"\322\002\n\010SIGFrame\022\031\n\007msgName\030\001 \001(\t:\010S"
    "IGFRAME\022\021\n\tsignal_id\030\002 \001(\t\022\024\n\014wholeSecon"
    "ds\030\003 \001(\001\022\031\n\021fractionalSeconds\030\004 \001(\001\022\020\n\010d"
    "uration\030\005 \001(\001\022\030\n\020center_frequency\030\006 \001(\001\022"
    "\032\n\022center_freq_offset\030\007 \001(\001\022\023\n\013sample_ra"
    "te\030\010 \001(\001\022\021\n\tbandwidth\030\t \001(\001\022\r\n\005power\030\n \001"
    "(\001\022\013\n\003ber\030\013 \001(\001\022\027\n\014frame_length\030\014 \001(\005:\0010"
    "\022\r\n\005frame\030\r \001(\014\022\017\n\007tail_id\030\016 \001(\005\022\024\n\nsens"
    "orName\030\017 \001(\t:\000\022\014\n\004uuid\030\020 \001(\tB\030\n\014fv.sf.pr"
    "otosB\010SFProtos", 414);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SigFrameMessages.proto", &protobuf_RegisterTypes);
  SIGFrame::_default_msgname_ =
      new ::std::string("SIGFRAME", 8);
  SIGFrame::default_instance_ = new SIGFrame();
  SIGFrame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SigFrameMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SigFrameMessages_2eproto {
  StaticDescriptorInitializer_SigFrameMessages_2eproto() {
    protobuf_AddDesc_SigFrameMessages_2eproto();
  }
} static_descriptor_initializer_SigFrameMessages_2eproto_;

// ===================================================================

::std::string* SIGFrame::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SIGFrame::kMsgNameFieldNumber;
const int SIGFrame::kSignalIdFieldNumber;
const int SIGFrame::kWholeSecondsFieldNumber;
const int SIGFrame::kFractionalSecondsFieldNumber;
const int SIGFrame::kDurationFieldNumber;
const int SIGFrame::kCenterFrequencyFieldNumber;
const int SIGFrame::kCenterFreqOffsetFieldNumber;
const int SIGFrame::kSampleRateFieldNumber;
const int SIGFrame::kBandwidthFieldNumber;
const int SIGFrame::kPowerFieldNumber;
const int SIGFrame::kBerFieldNumber;
const int SIGFrame::kFrameLengthFieldNumber;
const int SIGFrame::kFrameFieldNumber;
const int SIGFrame::kTailIdFieldNumber;
const int SIGFrame::kSensorNameFieldNumber;
const int SIGFrame::kUuidFieldNumber;
#endif  // !_MSC_VER

SIGFrame::SIGFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SIGFrame::InitAsDefaultInstance() {
}

SIGFrame::SIGFrame(const SIGFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SIGFrame::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  signal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wholeseconds_ = 0;
  fractionalseconds_ = 0;
  duration_ = 0;
  center_frequency_ = 0;
  center_freq_offset_ = 0;
  sample_rate_ = 0;
  bandwidth_ = 0;
  power_ = 0;
  ber_ = 0;
  frame_length_ = 0;
  frame_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tail_id_ = 0;
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SIGFrame::~SIGFrame() {
  SharedDtor();
}

void SIGFrame::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (signal_id_ != &::google::protobuf::internal::kEmptyString) {
    delete signal_id_;
  }
  if (frame_ != &::google::protobuf::internal::kEmptyString) {
    delete frame_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void SIGFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SIGFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SIGFrame_descriptor_;
}

const SIGFrame& SIGFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SigFrameMessages_2eproto();
  return *default_instance_;
}

SIGFrame* SIGFrame::default_instance_ = NULL;

SIGFrame* SIGFrame::New() const {
  return new SIGFrame;
}

void SIGFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_signal_id()) {
      if (signal_id_ != &::google::protobuf::internal::kEmptyString) {
        signal_id_->clear();
      }
    }
    wholeseconds_ = 0;
    fractionalseconds_ = 0;
    duration_ = 0;
    center_frequency_ = 0;
    center_freq_offset_ = 0;
    sample_rate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bandwidth_ = 0;
    power_ = 0;
    ber_ = 0;
    frame_length_ = 0;
    if (has_frame()) {
      if (frame_ != &::google::protobuf::internal::kEmptyString) {
        frame_->clear();
      }
    }
    tail_id_ = 0;
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SIGFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SIGFRAME"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signal_id;
        break;
      }

      // optional string signal_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signal_id().data(), this->signal_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_wholeSeconds;
        break;
      }

      // optional double wholeSeconds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_wholeSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wholeseconds_)));
          set_has_wholeseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_fractionalSeconds;
        break;
      }

      // optional double fractionalSeconds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fractionalSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fractionalseconds_)));
          set_has_fractionalseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_duration;
        break;
      }

      // optional double duration = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_center_frequency;
        break;
      }

      // optional double center_frequency = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_center_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &center_frequency_)));
          set_has_center_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_center_freq_offset;
        break;
      }

      // optional double center_freq_offset = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_center_freq_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &center_freq_offset_)));
          set_has_center_freq_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_sample_rate;
        break;
      }

      // optional double sample_rate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sample_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_rate_)));
          set_has_sample_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_bandwidth;
        break;
      }

      // optional double bandwidth = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_power;
        break;
      }

      // optional double power = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_ber;
        break;
      }

      // optional double ber = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ber_)));
          set_has_ber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_frame_length;
        break;
      }

      // optional int32 frame_length = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_length_)));
          set_has_frame_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_frame;
        break;
      }

      // optional bytes frame = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tail_id;
        break;
      }

      // optional int32 tail_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tail_id_)));
          set_has_tail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 15 [default = ""];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_uuid;
        break;
      }

      // optional string uuid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SIGFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SIGFRAME"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string signal_id = 2;
  if (has_signal_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal_id().data(), this->signal_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->signal_id(), output);
  }

  // optional double wholeSeconds = 3;
  if (has_wholeseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->wholeseconds(), output);
  }

  // optional double fractionalSeconds = 4;
  if (has_fractionalseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->fractionalseconds(), output);
  }

  // optional double duration = 5;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->duration(), output);
  }

  // optional double center_frequency = 6;
  if (has_center_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->center_frequency(), output);
  }

  // optional double center_freq_offset = 7;
  if (has_center_freq_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->center_freq_offset(), output);
  }

  // optional double sample_rate = 8;
  if (has_sample_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->sample_rate(), output);
  }

  // optional double bandwidth = 9;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->bandwidth(), output);
  }

  // optional double power = 10;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->power(), output);
  }

  // optional double ber = 11;
  if (has_ber()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->ber(), output);
  }

  // optional int32 frame_length = 12 [default = 0];
  if (has_frame_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->frame_length(), output);
  }

  // optional bytes frame = 13;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->frame(), output);
  }

  // optional int32 tail_id = 14;
  if (has_tail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->tail_id(), output);
  }

  // optional string sensorName = 15 [default = ""];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->sensorname(), output);
  }

  // optional string uuid = 16;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SIGFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SIGFRAME"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string signal_id = 2;
  if (has_signal_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal_id().data(), this->signal_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signal_id(), target);
  }

  // optional double wholeSeconds = 3;
  if (has_wholeseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->wholeseconds(), target);
  }

  // optional double fractionalSeconds = 4;
  if (has_fractionalseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->fractionalseconds(), target);
  }

  // optional double duration = 5;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->duration(), target);
  }

  // optional double center_frequency = 6;
  if (has_center_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->center_frequency(), target);
  }

  // optional double center_freq_offset = 7;
  if (has_center_freq_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->center_freq_offset(), target);
  }

  // optional double sample_rate = 8;
  if (has_sample_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->sample_rate(), target);
  }

  // optional double bandwidth = 9;
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->bandwidth(), target);
  }

  // optional double power = 10;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->power(), target);
  }

  // optional double ber = 11;
  if (has_ber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->ber(), target);
  }

  // optional int32 frame_length = 12 [default = 0];
  if (has_frame_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->frame_length(), target);
  }

  // optional bytes frame = 13;
  if (has_frame()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->frame(), target);
  }

  // optional int32 tail_id = 14;
  if (has_tail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->tail_id(), target);
  }

  // optional string sensorName = 15 [default = ""];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->sensorname(), target);
  }

  // optional string uuid = 16;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SIGFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SIGFRAME"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string signal_id = 2;
    if (has_signal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signal_id());
    }

    // optional double wholeSeconds = 3;
    if (has_wholeseconds()) {
      total_size += 1 + 8;
    }

    // optional double fractionalSeconds = 4;
    if (has_fractionalseconds()) {
      total_size += 1 + 8;
    }

    // optional double duration = 5;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional double center_frequency = 6;
    if (has_center_frequency()) {
      total_size += 1 + 8;
    }

    // optional double center_freq_offset = 7;
    if (has_center_freq_offset()) {
      total_size += 1 + 8;
    }

    // optional double sample_rate = 8;
    if (has_sample_rate()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double bandwidth = 9;
    if (has_bandwidth()) {
      total_size += 1 + 8;
    }

    // optional double power = 10;
    if (has_power()) {
      total_size += 1 + 8;
    }

    // optional double ber = 11;
    if (has_ber()) {
      total_size += 1 + 8;
    }

    // optional int32 frame_length = 12 [default = 0];
    if (has_frame_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_length());
    }

    // optional bytes frame = 13;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->frame());
    }

    // optional int32 tail_id = 14;
    if (has_tail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tail_id());
    }

    // optional string sensorName = 15 [default = ""];
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

    // optional string uuid = 16;
    if (has_uuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SIGFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SIGFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SIGFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SIGFrame::MergeFrom(const SIGFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_signal_id()) {
      set_signal_id(from.signal_id());
    }
    if (from.has_wholeseconds()) {
      set_wholeseconds(from.wholeseconds());
    }
    if (from.has_fractionalseconds()) {
      set_fractionalseconds(from.fractionalseconds());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_center_frequency()) {
      set_center_frequency(from.center_frequency());
    }
    if (from.has_center_freq_offset()) {
      set_center_freq_offset(from.center_freq_offset());
    }
    if (from.has_sample_rate()) {
      set_sample_rate(from.sample_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_ber()) {
      set_ber(from.ber());
    }
    if (from.has_frame_length()) {
      set_frame_length(from.frame_length());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_tail_id()) {
      set_tail_id(from.tail_id());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SIGFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SIGFrame::CopyFrom(const SIGFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIGFrame::IsInitialized() const {

  return true;
}

void SIGFrame::Swap(SIGFrame* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(signal_id_, other->signal_id_);
    std::swap(wholeseconds_, other->wholeseconds_);
    std::swap(fractionalseconds_, other->fractionalseconds_);
    std::swap(duration_, other->duration_);
    std::swap(center_frequency_, other->center_frequency_);
    std::swap(center_freq_offset_, other->center_freq_offset_);
    std::swap(sample_rate_, other->sample_rate_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(power_, other->power_);
    std::swap(ber_, other->ber_);
    std::swap(frame_length_, other->frame_length_);
    std::swap(frame_, other->frame_);
    std::swap(tail_id_, other->tail_id_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SIGFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SIGFrame_descriptor_;
  metadata.reflection = SIGFrame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SFProtos
}  // namespace protos
}  // namespace sf
}  // namespace fv

// @@protoc_insertion_point(global_scope)
