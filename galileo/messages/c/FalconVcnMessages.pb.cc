// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FalconVcnMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FalconVcnMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fv {
namespace vcn {
namespace protos {
namespace VcnProtos {

namespace {

const ::google::protobuf::Descriptor* Signal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Signal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Suggestion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Suggestion_reflection_ = NULL;
const ::google::protobuf::Descriptor* VcnPlatform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VcnPlatform_reflection_ = NULL;
const ::google::protobuf::Descriptor* HardwareStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HardwareStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HardwareStatus_HardwareState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VcnStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VcnStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* VcnPlatformRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VcnPlatformRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VcnStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VcnStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VcnCommandRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VcnCommandRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VcnOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VcnOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* VcnResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VcnResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZapperStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZapperStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToneJam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToneJam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToneJamOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToneJamOff_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zap_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZapOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZapOff_reflection_ = NULL;
const ::google::protobuf::Descriptor* Detect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Detect_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZapperOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZapperOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZapPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZapPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZapPong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZapPong_reflection_ = NULL;
const ::google::protobuf::Descriptor* InfoMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfoMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FalconVcnMessages_2eproto() {
  protobuf_AddDesc_FalconVcnMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FalconVcnMessages.proto");
  GOOGLE_CHECK(file != NULL);
  Signal_descriptor_ = file->message_type(0);
  static const int Signal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, signal_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, suggestion_),
  };
  Signal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Signal_descriptor_,
      Signal::default_instance_,
      Signal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Signal));
  Suggestion_descriptor_ = file->message_type(1);
  static const int Suggestion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Suggestion, detected_center_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Suggestion, center_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Suggestion, frequency_excursion_),
  };
  Suggestion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Suggestion_descriptor_,
      Suggestion::default_instance_,
      Suggestion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Suggestion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Suggestion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Suggestion));
  VcnPlatform_descriptor_ = file->message_type(2);
  static const int VcnPlatform_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnPlatform, signal_),
  };
  VcnPlatform_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VcnPlatform_descriptor_,
      VcnPlatform::default_instance_,
      VcnPlatform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnPlatform, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnPlatform, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VcnPlatform));
  HardwareStatus_descriptor_ = file->message_type(3);
  static const int HardwareStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareStatus, mta_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareStatus, is_sg_ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareStatus, message_),
  };
  HardwareStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HardwareStatus_descriptor_,
      HardwareStatus::default_instance_,
      HardwareStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HardwareStatus));
  HardwareStatus_HardwareState_descriptor_ = HardwareStatus_descriptor_->enum_type(0);
  VcnStatus_descriptor_ = file->message_type(4);
  static const int VcnStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnStatus, hardware_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnStatus, is_active_),
  };
  VcnStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VcnStatus_descriptor_,
      VcnStatus::default_instance_,
      VcnStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VcnStatus));
  VcnPlatformRequest_descriptor_ = file->message_type(5);
  static const int VcnPlatformRequest_offsets_[1] = {
  };
  VcnPlatformRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VcnPlatformRequest_descriptor_,
      VcnPlatformRequest::default_instance_,
      VcnPlatformRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnPlatformRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnPlatformRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VcnPlatformRequest));
  VcnStatusRequest_descriptor_ = file->message_type(6);
  static const int VcnStatusRequest_offsets_[1] = {
  };
  VcnStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VcnStatusRequest_descriptor_,
      VcnStatusRequest::default_instance_,
      VcnStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VcnStatusRequest));
  VcnCommandRequest_descriptor_ = file->message_type(7);
  static const int VcnCommandRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnCommandRequest, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnCommandRequest, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnCommandRequest, center_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnCommandRequest, frequency_excursion_),
  };
  VcnCommandRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VcnCommandRequest_descriptor_,
      VcnCommandRequest::default_instance_,
      VcnCommandRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnCommandRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnCommandRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VcnCommandRequest));
  VcnOutput_descriptor_ = file->message_type(8);
  static const int VcnOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnOutput, state_),
  };
  VcnOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VcnOutput_descriptor_,
      VcnOutput::default_instance_,
      VcnOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VcnOutput));
  VcnResponse_descriptor_ = file->message_type(9);
  static const int VcnResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnResponse, description_),
  };
  VcnResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VcnResponse_descriptor_,
      VcnResponse::default_instance_,
      VcnResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VcnResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VcnResponse));
  ZapperStatus_descriptor_ = file->message_type(10);
  static const int ZapperStatus_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperStatus, chan1stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperStatus, chan2stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperStatus, rx1freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperStatus, rx2freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperStatus, rx3freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperStatus, rx4freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperStatus, tx1freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperStatus, tx2freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperStatus, amp1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperStatus, amp2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperStatus, amp3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperStatus, meterchan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperStatus, meterpower_),
  };
  ZapperStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZapperStatus_descriptor_,
      ZapperStatus::default_instance_,
      ZapperStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZapperStatus));
  StopAll_descriptor_ = file->message_type(11);
  static const int StopAll_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAll, msgname_),
  };
  StopAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopAll_descriptor_,
      StopAll::default_instance_,
      StopAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopAll));
  ToneJam_descriptor_ = file->message_type(12);
  static const int ToneJam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToneJam, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToneJam, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToneJam, targetid_),
  };
  ToneJam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToneJam_descriptor_,
      ToneJam::default_instance_,
      ToneJam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToneJam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToneJam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToneJam));
  ToneJamOff_descriptor_ = file->message_type(13);
  static const int ToneJamOff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToneJamOff, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToneJamOff, targetid_),
  };
  ToneJamOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToneJamOff_descriptor_,
      ToneJamOff::default_instance_,
      ToneJamOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToneJamOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToneJamOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToneJamOff));
  Zap_descriptor_ = file->message_type(14);
  static const int Zap_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zap, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zap, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zap, platform_),
  };
  Zap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zap_descriptor_,
      Zap::default_instance_,
      Zap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zap));
  ZapOff_descriptor_ = file->message_type(15);
  static const int ZapOff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapOff, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapOff, targetid_),
  };
  ZapOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZapOff_descriptor_,
      ZapOff::default_instance_,
      ZapOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZapOff));
  Detect_descriptor_ = file->message_type(16);
  static const int Detect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detect, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detect, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detect, freq_),
  };
  Detect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Detect_descriptor_,
      Detect::default_instance_,
      Detect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Detect));
  ZapperOptions_descriptor_ = file->message_type(17);
  static const int ZapperOptions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperOptions, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperOptions, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperOptions, targetid_),
  };
  ZapperOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZapperOptions_descriptor_,
      ZapperOptions::default_instance_,
      ZapperOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapperOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZapperOptions));
  ZapPing_descriptor_ = file->message_type(18);
  static const int ZapPing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapPing, msgname_),
  };
  ZapPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZapPing_descriptor_,
      ZapPing::default_instance_,
      ZapPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZapPing));
  ZapPong_descriptor_ = file->message_type(19);
  static const int ZapPong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapPong, msgname_),
  };
  ZapPong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZapPong_descriptor_,
      ZapPong::default_instance_,
      ZapPong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapPong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZapPong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZapPong));
  InfoMsg_descriptor_ = file->message_type(20);
  static const int InfoMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoMsg, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoMsg, info_),
  };
  InfoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InfoMsg_descriptor_,
      InfoMsg::default_instance_,
      InfoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InfoMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FalconVcnMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Signal_descriptor_, &Signal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Suggestion_descriptor_, &Suggestion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VcnPlatform_descriptor_, &VcnPlatform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HardwareStatus_descriptor_, &HardwareStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VcnStatus_descriptor_, &VcnStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VcnPlatformRequest_descriptor_, &VcnPlatformRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VcnStatusRequest_descriptor_, &VcnStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VcnCommandRequest_descriptor_, &VcnCommandRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VcnOutput_descriptor_, &VcnOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VcnResponse_descriptor_, &VcnResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZapperStatus_descriptor_, &ZapperStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopAll_descriptor_, &StopAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToneJam_descriptor_, &ToneJam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToneJamOff_descriptor_, &ToneJamOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zap_descriptor_, &Zap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZapOff_descriptor_, &ZapOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Detect_descriptor_, &Detect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZapperOptions_descriptor_, &ZapperOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZapPing_descriptor_, &ZapPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZapPong_descriptor_, &ZapPong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InfoMsg_descriptor_, &InfoMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FalconVcnMessages_2eproto() {
  delete Signal::default_instance_;
  delete Signal_reflection_;
  delete Suggestion::default_instance_;
  delete Suggestion_reflection_;
  delete VcnPlatform::default_instance_;
  delete VcnPlatform_reflection_;
  delete HardwareStatus::default_instance_;
  delete HardwareStatus_reflection_;
  delete VcnStatus::default_instance_;
  delete VcnStatus_reflection_;
  delete VcnPlatformRequest::default_instance_;
  delete VcnPlatformRequest_reflection_;
  delete VcnStatusRequest::default_instance_;
  delete VcnStatusRequest_reflection_;
  delete VcnCommandRequest::default_instance_;
  delete VcnCommandRequest_reflection_;
  delete VcnOutput::default_instance_;
  delete VcnOutput_reflection_;
  delete VcnResponse::default_instance_;
  delete VcnResponse_reflection_;
  delete ZapperStatus::default_instance_;
  delete ZapperStatus_reflection_;
  delete ZapperStatus::_default_msgname_;
  delete ZapperStatus::_default_chan1stat_;
  delete ZapperStatus::_default_chan2stat_;
  delete ZapperStatus::_default_rx1freq_;
  delete ZapperStatus::_default_rx2freq_;
  delete ZapperStatus::_default_rx3freq_;
  delete ZapperStatus::_default_rx4freq_;
  delete ZapperStatus::_default_tx1freq_;
  delete ZapperStatus::_default_tx2freq_;
  delete ZapperStatus::_default_amp1_;
  delete ZapperStatus::_default_amp2_;
  delete ZapperStatus::_default_amp3_;
  delete ZapperStatus::_default_meterchan_;
  delete ZapperStatus::_default_meterpower_;
  delete StopAll::default_instance_;
  delete StopAll_reflection_;
  delete StopAll::_default_msgname_;
  delete ToneJam::default_instance_;
  delete ToneJam_reflection_;
  delete ToneJam::_default_msgname_;
  delete ToneJam::_default_platform_;
  delete ToneJamOff::default_instance_;
  delete ToneJamOff_reflection_;
  delete ToneJamOff::_default_msgname_;
  delete Zap::default_instance_;
  delete Zap_reflection_;
  delete Zap::_default_msgname_;
  delete Zap::_default_platform_;
  delete ZapOff::default_instance_;
  delete ZapOff_reflection_;
  delete ZapOff::_default_msgname_;
  delete Detect::default_instance_;
  delete Detect_reflection_;
  delete Detect::_default_msgname_;
  delete Detect::_default_platform_;
  delete ZapperOptions::default_instance_;
  delete ZapperOptions_reflection_;
  delete ZapperOptions::_default_msgname_;
  delete ZapperOptions::_default_options_;
  delete ZapPing::default_instance_;
  delete ZapPing_reflection_;
  delete ZapPing::_default_msgname_;
  delete ZapPong::default_instance_;
  delete ZapPong_reflection_;
  delete ZapPong::_default_msgname_;
  delete InfoMsg::default_instance_;
  delete InfoMsg_reflection_;
  delete InfoMsg::_default_msgname_;
  delete InfoMsg::_default_info_;
}

void protobuf_AddDesc_FalconVcnMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027FalconVcnMessages.proto\022\027fv.vcn.protos"
    ".VcnProtos\"g\n\006Signal\022\023\n\013signal_name\030\001 \002("
    "\t\022\017\n\007command\030\002 \003(\t\0227\n\nsuggestion\030\003 \003(\0132#"
    ".fv.vcn.protos.VcnProtos.Suggestion\"f\n\nS"
    "uggestion\022!\n\031detected_center_frequency\030\001"
    " \001(\001\022\030\n\020center_frequency\030\002 \001(\001\022\033\n\023freque"
    "ncy_excursion\030\003 \001(\001\">\n\013VcnPlatform\022/\n\006si"
    "gnal\030\001 \003(\0132\037.fv.vcn.protos.VcnProtos.Sig"
    "nal\"\277\001\n\016HardwareStatus\022I\n\nmta_status\030\001 \001"
    "(\01625.fv.vcn.protos.VcnProtos.HardwareSta"
    "tus.HardwareState\022\023\n\013is_sg_ready\030\002 \001(\010\022\017"
    "\n\007message\030\004 \002(\t\"<\n\rHardwareState\022\t\n\005READ"
    "Y\020\000\022\r\n\tNOT_READY\020\001\022\021\n\rNOT_INSTALLED\020\003\"`\n"
    "\tVcnStatus\022@\n\017hardware_status\030\001 \002(\0132\'.fv"
    ".vcn.protos.VcnProtos.HardwareStatus\022\021\n\t"
    "is_active\030\002 \002(\010\"\024\n\022VcnPlatformRequest\"\022\n"
    "\020VcnStatusRequest\"n\n\021VcnCommandRequest\022\016"
    "\n\006signal\030\002 \002(\t\022\017\n\007command\030\003 \002(\t\022\030\n\020cente"
    "r_frequency\030\004 \002(\001\022\036\n\023frequency_excursion"
    "\030\005 \001(\001:\0010\"\032\n\tVcnOutput\022\r\n\005state\030\001 \002(\010\"3\n"
    "\013VcnResponse\022\017\n\007success\030\001 \002(\010\022\023\n\013descrip"
    "tion\030\002 \001(\t\"\310\002\n\014ZapperStatus\022\033\n\007msgName\030\001"
    " \001(\t:\nZAPPERSTAT\022\026\n\tchan1Stat\030\002 \001(\t:\003OFF"
    "\022\026\n\tchan2Stat\030\003 \001(\t:\003OFF\022\025\n\007rx1Freq\030\004 \001("
    "\t:\0042440\022\025\n\007rx2Freq\030\005 \001(\t:\0042440\022\025\n\007rx3Fre"
    "q\030\006 \001(\t:\0042440\022\025\n\007rx4Freq\030\007 \001(\t:\0042440\022\025\n\007"
    "tx1Freq\030\010 \001(\t:\0042440\022\025\n\007tx2Freq\030\t \001(\t:\00424"
    "40\022\017\n\004amp1\030\n \001(\t:\0010\022\017\n\004amp2\030\013 \001(\t:\0010\022\017\n\004"
    "amp3\030\014 \001(\t:\0010\022\025\n\tmeterChan\030\r \001(\t:\002-1\022\027\n\n"
    "meterPower\030\016 \001(\t:\003-99\"#\n\007StopAll\022\030\n\007msgN"
    "ame\030\001 \001(\t:\007STOPALL\"Q\n\007ToneJam\022\030\n\007msgName"
    "\030\001 \001(\t:\007TONEJAM\022\026\n\010platform\030\002 \001(\t:\004NONE\022"
    "\024\n\010targetID\030\003 \001(\005:\002-1\"\?\n\nToneJamOff\022\033\n\007m"
    "sgName\030\001 \001(\t:\nTONEJAMOFF\022\024\n\010targetID\030\002 \001"
    "(\005:\002-1\"I\n\003Zap\022\024\n\007msgName\030\001 \001(\t:\003ZAP\022\024\n\010t"
    "argetID\030\003 \001(\005:\002-1\022\026\n\010platform\030\002 \001(\t:\004NON"
    "E\"7\n\006ZapOff\022\027\n\007msgName\030\001 \001(\t:\006ZAPOFF\022\024\n\010"
    "targetID\030\002 \001(\005:\002-1\"M\n\006Detect\022\027\n\007msgName\030"
    "\001 \001(\t:\006DETECT\022\026\n\010platform\030\002 \001(\t:\004NONE\022\022\n"
    "\004freq\030\003 \001(\001:\0042440\"\\\n\rZapperOptions\022\036\n\007ms"
    "gName\030\001 \001(\t:\rZAPPEROPTIONS\022\025\n\007options\030\002 "
    "\001(\t:\004NONE\022\024\n\010targetID\030\003 \001(\005:\002-1\"#\n\007ZapPi"
    "ng\022\030\n\007msgName\030\001 \001(\t:\007ZAPPING\"#\n\007ZapPong\022"
    "\030\n\007msgName\030\001 \001(\t:\007ZAPPONG\"7\n\007InfoMsg\022\030\n\007"
    "msgName\030\001 \001(\t:\007INFOMSG\022\022\n\004info\030\002 \001(\t:\004NO"
    "NEB\032\n\rfv.vcn.protosB\tVcnProtos", 1830);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FalconVcnMessages.proto", &protobuf_RegisterTypes);
  Signal::default_instance_ = new Signal();
  Suggestion::default_instance_ = new Suggestion();
  VcnPlatform::default_instance_ = new VcnPlatform();
  HardwareStatus::default_instance_ = new HardwareStatus();
  VcnStatus::default_instance_ = new VcnStatus();
  VcnPlatformRequest::default_instance_ = new VcnPlatformRequest();
  VcnStatusRequest::default_instance_ = new VcnStatusRequest();
  VcnCommandRequest::default_instance_ = new VcnCommandRequest();
  VcnOutput::default_instance_ = new VcnOutput();
  VcnResponse::default_instance_ = new VcnResponse();
  ZapperStatus::_default_msgname_ =
      new ::std::string("ZAPPERSTAT", 10);
  ZapperStatus::_default_chan1stat_ =
      new ::std::string("OFF", 3);
  ZapperStatus::_default_chan2stat_ =
      new ::std::string("OFF", 3);
  ZapperStatus::_default_rx1freq_ =
      new ::std::string("2440", 4);
  ZapperStatus::_default_rx2freq_ =
      new ::std::string("2440", 4);
  ZapperStatus::_default_rx3freq_ =
      new ::std::string("2440", 4);
  ZapperStatus::_default_rx4freq_ =
      new ::std::string("2440", 4);
  ZapperStatus::_default_tx1freq_ =
      new ::std::string("2440", 4);
  ZapperStatus::_default_tx2freq_ =
      new ::std::string("2440", 4);
  ZapperStatus::_default_amp1_ =
      new ::std::string("0", 1);
  ZapperStatus::_default_amp2_ =
      new ::std::string("0", 1);
  ZapperStatus::_default_amp3_ =
      new ::std::string("0", 1);
  ZapperStatus::_default_meterchan_ =
      new ::std::string("-1", 2);
  ZapperStatus::_default_meterpower_ =
      new ::std::string("-99", 3);
  ZapperStatus::default_instance_ = new ZapperStatus();
  StopAll::_default_msgname_ =
      new ::std::string("STOPALL", 7);
  StopAll::default_instance_ = new StopAll();
  ToneJam::_default_msgname_ =
      new ::std::string("TONEJAM", 7);
  ToneJam::_default_platform_ =
      new ::std::string("NONE", 4);
  ToneJam::default_instance_ = new ToneJam();
  ToneJamOff::_default_msgname_ =
      new ::std::string("TONEJAMOFF", 10);
  ToneJamOff::default_instance_ = new ToneJamOff();
  Zap::_default_msgname_ =
      new ::std::string("ZAP", 3);
  Zap::_default_platform_ =
      new ::std::string("NONE", 4);
  Zap::default_instance_ = new Zap();
  ZapOff::_default_msgname_ =
      new ::std::string("ZAPOFF", 6);
  ZapOff::default_instance_ = new ZapOff();
  Detect::_default_msgname_ =
      new ::std::string("DETECT", 6);
  Detect::_default_platform_ =
      new ::std::string("NONE", 4);
  Detect::default_instance_ = new Detect();
  ZapperOptions::_default_msgname_ =
      new ::std::string("ZAPPEROPTIONS", 13);
  ZapperOptions::_default_options_ =
      new ::std::string("NONE", 4);
  ZapperOptions::default_instance_ = new ZapperOptions();
  ZapPing::_default_msgname_ =
      new ::std::string("ZAPPING", 7);
  ZapPing::default_instance_ = new ZapPing();
  ZapPong::_default_msgname_ =
      new ::std::string("ZAPPONG", 7);
  ZapPong::default_instance_ = new ZapPong();
  InfoMsg::_default_msgname_ =
      new ::std::string("INFOMSG", 7);
  InfoMsg::_default_info_ =
      new ::std::string("NONE", 4);
  InfoMsg::default_instance_ = new InfoMsg();
  Signal::default_instance_->InitAsDefaultInstance();
  Suggestion::default_instance_->InitAsDefaultInstance();
  VcnPlatform::default_instance_->InitAsDefaultInstance();
  HardwareStatus::default_instance_->InitAsDefaultInstance();
  VcnStatus::default_instance_->InitAsDefaultInstance();
  VcnPlatformRequest::default_instance_->InitAsDefaultInstance();
  VcnStatusRequest::default_instance_->InitAsDefaultInstance();
  VcnCommandRequest::default_instance_->InitAsDefaultInstance();
  VcnOutput::default_instance_->InitAsDefaultInstance();
  VcnResponse::default_instance_->InitAsDefaultInstance();
  ZapperStatus::default_instance_->InitAsDefaultInstance();
  StopAll::default_instance_->InitAsDefaultInstance();
  ToneJam::default_instance_->InitAsDefaultInstance();
  ToneJamOff::default_instance_->InitAsDefaultInstance();
  Zap::default_instance_->InitAsDefaultInstance();
  ZapOff::default_instance_->InitAsDefaultInstance();
  Detect::default_instance_->InitAsDefaultInstance();
  ZapperOptions::default_instance_->InitAsDefaultInstance();
  ZapPing::default_instance_->InitAsDefaultInstance();
  ZapPong::default_instance_->InitAsDefaultInstance();
  InfoMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FalconVcnMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FalconVcnMessages_2eproto {
  StaticDescriptorInitializer_FalconVcnMessages_2eproto() {
    protobuf_AddDesc_FalconVcnMessages_2eproto();
  }
} static_descriptor_initializer_FalconVcnMessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Signal::kSignalNameFieldNumber;
const int Signal::kCommandFieldNumber;
const int Signal::kSuggestionFieldNumber;
#endif  // !_MSC_VER

Signal::Signal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Signal::InitAsDefaultInstance() {
}

Signal::Signal(const Signal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Signal::SharedCtor() {
  _cached_size_ = 0;
  signal_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Signal::~Signal() {
  SharedDtor();
}

void Signal::SharedDtor() {
  if (signal_name_ != &::google::protobuf::internal::kEmptyString) {
    delete signal_name_;
  }
  if (this != default_instance_) {
  }
}

void Signal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signal_descriptor_;
}

const Signal& Signal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

Signal* Signal::default_instance_ = NULL;

Signal* Signal::New() const {
  return new Signal;
}

void Signal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signal_name()) {
      if (signal_name_ != &::google::protobuf::internal::kEmptyString) {
        signal_name_->clear();
      }
    }
  }
  command_.Clear();
  suggestion_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string signal_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signal_name().data(), this->signal_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command;
        break;
      }

      // repeated string command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command(this->command_size() - 1).data(),
            this->command(this->command_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command;
        if (input->ExpectTag(26)) goto parse_suggestion;
        break;
      }

      // repeated .fv.vcn.protos.VcnProtos.Suggestion suggestion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suggestion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suggestion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_suggestion;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string signal_name = 1;
  if (has_signal_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal_name().data(), this->signal_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->signal_name(), output);
  }

  // repeated string command = 2;
  for (int i = 0; i < this->command_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->command(i).data(), this->command(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->command(i), output);
  }

  // repeated .fv.vcn.protos.VcnProtos.Suggestion suggestion = 3;
  for (int i = 0; i < this->suggestion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->suggestion(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Signal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string signal_name = 1;
  if (has_signal_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal_name().data(), this->signal_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signal_name(), target);
  }

  // repeated string command = 2;
  for (int i = 0; i < this->command_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command(i).data(), this->command(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->command(i), target);
  }

  // repeated .fv.vcn.protos.VcnProtos.Suggestion suggestion = 3;
  for (int i = 0; i < this->suggestion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->suggestion(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Signal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string signal_name = 1;
    if (has_signal_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signal_name());
    }

  }
  // repeated string command = 2;
  total_size += 1 * this->command_size();
  for (int i = 0; i < this->command_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->command(i));
  }

  // repeated .fv.vcn.protos.VcnProtos.Suggestion suggestion = 3;
  total_size += 1 * this->suggestion_size();
  for (int i = 0; i < this->suggestion_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suggestion(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Signal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Signal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
  GOOGLE_CHECK_NE(&from, this);
  command_.MergeFrom(from.command_);
  suggestion_.MergeFrom(from.suggestion_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signal_name()) {
      set_signal_name(from.signal_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Signal::Swap(Signal* other) {
  if (other != this) {
    std::swap(signal_name_, other->signal_name_);
    command_.Swap(&other->command_);
    suggestion_.Swap(&other->suggestion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Signal_descriptor_;
  metadata.reflection = Signal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Suggestion::kDetectedCenterFrequencyFieldNumber;
const int Suggestion::kCenterFrequencyFieldNumber;
const int Suggestion::kFrequencyExcursionFieldNumber;
#endif  // !_MSC_VER

Suggestion::Suggestion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Suggestion::InitAsDefaultInstance() {
}

Suggestion::Suggestion(const Suggestion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Suggestion::SharedCtor() {
  _cached_size_ = 0;
  detected_center_frequency_ = 0;
  center_frequency_ = 0;
  frequency_excursion_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Suggestion::~Suggestion() {
  SharedDtor();
}

void Suggestion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Suggestion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Suggestion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Suggestion_descriptor_;
}

const Suggestion& Suggestion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

Suggestion* Suggestion::default_instance_ = NULL;

Suggestion* Suggestion::New() const {
  return new Suggestion;
}

void Suggestion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    detected_center_frequency_ = 0;
    center_frequency_ = 0;
    frequency_excursion_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Suggestion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double detected_center_frequency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &detected_center_frequency_)));
          set_has_detected_center_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_center_frequency;
        break;
      }

      // optional double center_frequency = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_center_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &center_frequency_)));
          set_has_center_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_frequency_excursion;
        break;
      }

      // optional double frequency_excursion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_frequency_excursion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_excursion_)));
          set_has_frequency_excursion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Suggestion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double detected_center_frequency = 1;
  if (has_detected_center_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->detected_center_frequency(), output);
  }

  // optional double center_frequency = 2;
  if (has_center_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->center_frequency(), output);
  }

  // optional double frequency_excursion = 3;
  if (has_frequency_excursion()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->frequency_excursion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Suggestion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double detected_center_frequency = 1;
  if (has_detected_center_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->detected_center_frequency(), target);
  }

  // optional double center_frequency = 2;
  if (has_center_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->center_frequency(), target);
  }

  // optional double frequency_excursion = 3;
  if (has_frequency_excursion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->frequency_excursion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Suggestion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double detected_center_frequency = 1;
    if (has_detected_center_frequency()) {
      total_size += 1 + 8;
    }

    // optional double center_frequency = 2;
    if (has_center_frequency()) {
      total_size += 1 + 8;
    }

    // optional double frequency_excursion = 3;
    if (has_frequency_excursion()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Suggestion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Suggestion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Suggestion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Suggestion::MergeFrom(const Suggestion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_detected_center_frequency()) {
      set_detected_center_frequency(from.detected_center_frequency());
    }
    if (from.has_center_frequency()) {
      set_center_frequency(from.center_frequency());
    }
    if (from.has_frequency_excursion()) {
      set_frequency_excursion(from.frequency_excursion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Suggestion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Suggestion::CopyFrom(const Suggestion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Suggestion::IsInitialized() const {

  return true;
}

void Suggestion::Swap(Suggestion* other) {
  if (other != this) {
    std::swap(detected_center_frequency_, other->detected_center_frequency_);
    std::swap(center_frequency_, other->center_frequency_);
    std::swap(frequency_excursion_, other->frequency_excursion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Suggestion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Suggestion_descriptor_;
  metadata.reflection = Suggestion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VcnPlatform::kSignalFieldNumber;
#endif  // !_MSC_VER

VcnPlatform::VcnPlatform()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VcnPlatform::InitAsDefaultInstance() {
}

VcnPlatform::VcnPlatform(const VcnPlatform& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VcnPlatform::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VcnPlatform::~VcnPlatform() {
  SharedDtor();
}

void VcnPlatform::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VcnPlatform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VcnPlatform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VcnPlatform_descriptor_;
}

const VcnPlatform& VcnPlatform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

VcnPlatform* VcnPlatform::default_instance_ = NULL;

VcnPlatform* VcnPlatform::New() const {
  return new VcnPlatform;
}

void VcnPlatform::Clear() {
  signal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VcnPlatform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fv.vcn.protos.VcnProtos.Signal signal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_signal;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VcnPlatform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .fv.vcn.protos.VcnProtos.Signal signal = 1;
  for (int i = 0; i < this->signal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signal(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VcnPlatform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .fv.vcn.protos.VcnProtos.Signal signal = 1;
  for (int i = 0; i < this->signal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signal(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VcnPlatform::ByteSize() const {
  int total_size = 0;

  // repeated .fv.vcn.protos.VcnProtos.Signal signal = 1;
  total_size += 1 * this->signal_size();
  for (int i = 0; i < this->signal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signal(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VcnPlatform::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VcnPlatform* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VcnPlatform*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VcnPlatform::MergeFrom(const VcnPlatform& from) {
  GOOGLE_CHECK_NE(&from, this);
  signal_.MergeFrom(from.signal_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VcnPlatform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VcnPlatform::CopyFrom(const VcnPlatform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VcnPlatform::IsInitialized() const {

  for (int i = 0; i < signal_size(); i++) {
    if (!this->signal(i).IsInitialized()) return false;
  }
  return true;
}

void VcnPlatform::Swap(VcnPlatform* other) {
  if (other != this) {
    signal_.Swap(&other->signal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VcnPlatform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VcnPlatform_descriptor_;
  metadata.reflection = VcnPlatform_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* HardwareStatus_HardwareState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HardwareStatus_HardwareState_descriptor_;
}
bool HardwareStatus_HardwareState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HardwareStatus_HardwareState HardwareStatus::READY;
const HardwareStatus_HardwareState HardwareStatus::NOT_READY;
const HardwareStatus_HardwareState HardwareStatus::NOT_INSTALLED;
const HardwareStatus_HardwareState HardwareStatus::HardwareState_MIN;
const HardwareStatus_HardwareState HardwareStatus::HardwareState_MAX;
const int HardwareStatus::HardwareState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int HardwareStatus::kMtaStatusFieldNumber;
const int HardwareStatus::kIsSgReadyFieldNumber;
const int HardwareStatus::kMessageFieldNumber;
#endif  // !_MSC_VER

HardwareStatus::HardwareStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HardwareStatus::InitAsDefaultInstance() {
}

HardwareStatus::HardwareStatus(const HardwareStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HardwareStatus::SharedCtor() {
  _cached_size_ = 0;
  mta_status_ = 0;
  is_sg_ready_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HardwareStatus::~HardwareStatus() {
  SharedDtor();
}

void HardwareStatus::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void HardwareStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HardwareStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HardwareStatus_descriptor_;
}

const HardwareStatus& HardwareStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

HardwareStatus* HardwareStatus::default_instance_ = NULL;

HardwareStatus* HardwareStatus::New() const {
  return new HardwareStatus;
}

void HardwareStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mta_status_ = 0;
    is_sg_ready_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HardwareStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fv.vcn.protos.VcnProtos.HardwareStatus.HardwareState mta_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fv::vcn::protos::VcnProtos::HardwareStatus_HardwareState_IsValid(value)) {
            set_mta_status(static_cast< ::fv::vcn::protos::VcnProtos::HardwareStatus_HardwareState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_sg_ready;
        break;
      }

      // optional bool is_sg_ready = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sg_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sg_ready_)));
          set_has_is_sg_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // required string message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HardwareStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fv.vcn.protos.VcnProtos.HardwareStatus.HardwareState mta_status = 1;
  if (has_mta_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mta_status(), output);
  }

  // optional bool is_sg_ready = 2;
  if (has_is_sg_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_sg_ready(), output);
  }

  // required string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HardwareStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fv.vcn.protos.VcnProtos.HardwareStatus.HardwareState mta_status = 1;
  if (has_mta_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mta_status(), target);
  }

  // optional bool is_sg_ready = 2;
  if (has_is_sg_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_sg_ready(), target);
  }

  // required string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HardwareStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fv.vcn.protos.VcnProtos.HardwareStatus.HardwareState mta_status = 1;
    if (has_mta_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mta_status());
    }

    // optional bool is_sg_ready = 2;
    if (has_is_sg_ready()) {
      total_size += 1 + 1;
    }

    // required string message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HardwareStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HardwareStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HardwareStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HardwareStatus::MergeFrom(const HardwareStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mta_status()) {
      set_mta_status(from.mta_status());
    }
    if (from.has_is_sg_ready()) {
      set_is_sg_ready(from.is_sg_ready());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HardwareStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardwareStatus::CopyFrom(const HardwareStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardwareStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void HardwareStatus::Swap(HardwareStatus* other) {
  if (other != this) {
    std::swap(mta_status_, other->mta_status_);
    std::swap(is_sg_ready_, other->is_sg_ready_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HardwareStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HardwareStatus_descriptor_;
  metadata.reflection = HardwareStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VcnStatus::kHardwareStatusFieldNumber;
const int VcnStatus::kIsActiveFieldNumber;
#endif  // !_MSC_VER

VcnStatus::VcnStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VcnStatus::InitAsDefaultInstance() {
  hardware_status_ = const_cast< ::fv::vcn::protos::VcnProtos::HardwareStatus*>(&::fv::vcn::protos::VcnProtos::HardwareStatus::default_instance());
}

VcnStatus::VcnStatus(const VcnStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VcnStatus::SharedCtor() {
  _cached_size_ = 0;
  hardware_status_ = NULL;
  is_active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VcnStatus::~VcnStatus() {
  SharedDtor();
}

void VcnStatus::SharedDtor() {
  if (this != default_instance_) {
    delete hardware_status_;
  }
}

void VcnStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VcnStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VcnStatus_descriptor_;
}

const VcnStatus& VcnStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

VcnStatus* VcnStatus::default_instance_ = NULL;

VcnStatus* VcnStatus::New() const {
  return new VcnStatus;
}

void VcnStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hardware_status()) {
      if (hardware_status_ != NULL) hardware_status_->::fv::vcn::protos::VcnProtos::HardwareStatus::Clear();
    }
    is_active_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VcnStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fv.vcn.protos.VcnProtos.HardwareStatus hardware_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hardware_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_active;
        break;
      }

      // required bool is_active = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VcnStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .fv.vcn.protos.VcnProtos.HardwareStatus hardware_status = 1;
  if (has_hardware_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hardware_status(), output);
  }

  // required bool is_active = 2;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VcnStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .fv.vcn.protos.VcnProtos.HardwareStatus hardware_status = 1;
  if (has_hardware_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hardware_status(), target);
  }

  // required bool is_active = 2;
  if (has_is_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VcnStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fv.vcn.protos.VcnProtos.HardwareStatus hardware_status = 1;
    if (has_hardware_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hardware_status());
    }

    // required bool is_active = 2;
    if (has_is_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VcnStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VcnStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VcnStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VcnStatus::MergeFrom(const VcnStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hardware_status()) {
      mutable_hardware_status()->::fv::vcn::protos::VcnProtos::HardwareStatus::MergeFrom(from.hardware_status());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VcnStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VcnStatus::CopyFrom(const VcnStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VcnStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_hardware_status()) {
    if (!this->hardware_status().IsInitialized()) return false;
  }
  return true;
}

void VcnStatus::Swap(VcnStatus* other) {
  if (other != this) {
    std::swap(hardware_status_, other->hardware_status_);
    std::swap(is_active_, other->is_active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VcnStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VcnStatus_descriptor_;
  metadata.reflection = VcnStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VcnPlatformRequest::VcnPlatformRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VcnPlatformRequest::InitAsDefaultInstance() {
}

VcnPlatformRequest::VcnPlatformRequest(const VcnPlatformRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VcnPlatformRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VcnPlatformRequest::~VcnPlatformRequest() {
  SharedDtor();
}

void VcnPlatformRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VcnPlatformRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VcnPlatformRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VcnPlatformRequest_descriptor_;
}

const VcnPlatformRequest& VcnPlatformRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

VcnPlatformRequest* VcnPlatformRequest::default_instance_ = NULL;

VcnPlatformRequest* VcnPlatformRequest::New() const {
  return new VcnPlatformRequest;
}

void VcnPlatformRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VcnPlatformRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void VcnPlatformRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VcnPlatformRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VcnPlatformRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VcnPlatformRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VcnPlatformRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VcnPlatformRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VcnPlatformRequest::MergeFrom(const VcnPlatformRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VcnPlatformRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VcnPlatformRequest::CopyFrom(const VcnPlatformRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VcnPlatformRequest::IsInitialized() const {

  return true;
}

void VcnPlatformRequest::Swap(VcnPlatformRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VcnPlatformRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VcnPlatformRequest_descriptor_;
  metadata.reflection = VcnPlatformRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VcnStatusRequest::VcnStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VcnStatusRequest::InitAsDefaultInstance() {
}

VcnStatusRequest::VcnStatusRequest(const VcnStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VcnStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VcnStatusRequest::~VcnStatusRequest() {
  SharedDtor();
}

void VcnStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VcnStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VcnStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VcnStatusRequest_descriptor_;
}

const VcnStatusRequest& VcnStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

VcnStatusRequest* VcnStatusRequest::default_instance_ = NULL;

VcnStatusRequest* VcnStatusRequest::New() const {
  return new VcnStatusRequest;
}

void VcnStatusRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VcnStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void VcnStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VcnStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VcnStatusRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VcnStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VcnStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VcnStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VcnStatusRequest::MergeFrom(const VcnStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VcnStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VcnStatusRequest::CopyFrom(const VcnStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VcnStatusRequest::IsInitialized() const {

  return true;
}

void VcnStatusRequest::Swap(VcnStatusRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VcnStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VcnStatusRequest_descriptor_;
  metadata.reflection = VcnStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VcnCommandRequest::kSignalFieldNumber;
const int VcnCommandRequest::kCommandFieldNumber;
const int VcnCommandRequest::kCenterFrequencyFieldNumber;
const int VcnCommandRequest::kFrequencyExcursionFieldNumber;
#endif  // !_MSC_VER

VcnCommandRequest::VcnCommandRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VcnCommandRequest::InitAsDefaultInstance() {
}

VcnCommandRequest::VcnCommandRequest(const VcnCommandRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VcnCommandRequest::SharedCtor() {
  _cached_size_ = 0;
  signal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  center_frequency_ = 0;
  frequency_excursion_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VcnCommandRequest::~VcnCommandRequest() {
  SharedDtor();
}

void VcnCommandRequest::SharedDtor() {
  if (signal_ != &::google::protobuf::internal::kEmptyString) {
    delete signal_;
  }
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void VcnCommandRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VcnCommandRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VcnCommandRequest_descriptor_;
}

const VcnCommandRequest& VcnCommandRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

VcnCommandRequest* VcnCommandRequest::default_instance_ = NULL;

VcnCommandRequest* VcnCommandRequest::New() const {
  return new VcnCommandRequest;
}

void VcnCommandRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signal()) {
      if (signal_ != &::google::protobuf::internal::kEmptyString) {
        signal_->clear();
      }
    }
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::kEmptyString) {
        command_->clear();
      }
    }
    center_frequency_ = 0;
    frequency_excursion_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VcnCommandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string signal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signal().data(), this->signal().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_command;
        break;
      }

      // required string command = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_center_frequency;
        break;
      }

      // required double center_frequency = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_center_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &center_frequency_)));
          set_has_center_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_frequency_excursion;
        break;
      }

      // optional double frequency_excursion = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_frequency_excursion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_excursion_)));
          set_has_frequency_excursion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VcnCommandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string signal = 2;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal().data(), this->signal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->signal(), output);
  }

  // required string command = 3;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->command(), output);
  }

  // required double center_frequency = 4;
  if (has_center_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->center_frequency(), output);
  }

  // optional double frequency_excursion = 5 [default = 0];
  if (has_frequency_excursion()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->frequency_excursion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VcnCommandRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string signal = 2;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal().data(), this->signal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signal(), target);
  }

  // required string command = 3;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->command(), target);
  }

  // required double center_frequency = 4;
  if (has_center_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->center_frequency(), target);
  }

  // optional double frequency_excursion = 5 [default = 0];
  if (has_frequency_excursion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->frequency_excursion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VcnCommandRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string signal = 2;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signal());
    }

    // required string command = 3;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

    // required double center_frequency = 4;
    if (has_center_frequency()) {
      total_size += 1 + 8;
    }

    // optional double frequency_excursion = 5 [default = 0];
    if (has_frequency_excursion()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VcnCommandRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VcnCommandRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VcnCommandRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VcnCommandRequest::MergeFrom(const VcnCommandRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signal()) {
      set_signal(from.signal());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_center_frequency()) {
      set_center_frequency(from.center_frequency());
    }
    if (from.has_frequency_excursion()) {
      set_frequency_excursion(from.frequency_excursion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VcnCommandRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VcnCommandRequest::CopyFrom(const VcnCommandRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VcnCommandRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VcnCommandRequest::Swap(VcnCommandRequest* other) {
  if (other != this) {
    std::swap(signal_, other->signal_);
    std::swap(command_, other->command_);
    std::swap(center_frequency_, other->center_frequency_);
    std::swap(frequency_excursion_, other->frequency_excursion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VcnCommandRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VcnCommandRequest_descriptor_;
  metadata.reflection = VcnCommandRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VcnOutput::kStateFieldNumber;
#endif  // !_MSC_VER

VcnOutput::VcnOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VcnOutput::InitAsDefaultInstance() {
}

VcnOutput::VcnOutput(const VcnOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VcnOutput::SharedCtor() {
  _cached_size_ = 0;
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VcnOutput::~VcnOutput() {
  SharedDtor();
}

void VcnOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VcnOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VcnOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VcnOutput_descriptor_;
}

const VcnOutput& VcnOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

VcnOutput* VcnOutput::default_instance_ = NULL;

VcnOutput* VcnOutput::New() const {
  return new VcnOutput;
}

void VcnOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VcnOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VcnOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VcnOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VcnOutput::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool state = 1;
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VcnOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VcnOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VcnOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VcnOutput::MergeFrom(const VcnOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VcnOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VcnOutput::CopyFrom(const VcnOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VcnOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VcnOutput::Swap(VcnOutput* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VcnOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VcnOutput_descriptor_;
  metadata.reflection = VcnOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VcnResponse::kSuccessFieldNumber;
const int VcnResponse::kDescriptionFieldNumber;
#endif  // !_MSC_VER

VcnResponse::VcnResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VcnResponse::InitAsDefaultInstance() {
}

VcnResponse::VcnResponse(const VcnResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VcnResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VcnResponse::~VcnResponse() {
  SharedDtor();
}

void VcnResponse::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void VcnResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VcnResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VcnResponse_descriptor_;
}

const VcnResponse& VcnResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

VcnResponse* VcnResponse::default_instance_ = NULL;

VcnResponse* VcnResponse::New() const {
  return new VcnResponse;
}

void VcnResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VcnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VcnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VcnResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VcnResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VcnResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VcnResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VcnResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VcnResponse::MergeFrom(const VcnResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VcnResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VcnResponse::CopyFrom(const VcnResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VcnResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VcnResponse::Swap(VcnResponse* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VcnResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VcnResponse_descriptor_;
  metadata.reflection = VcnResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ZapperStatus::_default_msgname_ = NULL;
::std::string* ZapperStatus::_default_chan1stat_ = NULL;
::std::string* ZapperStatus::_default_chan2stat_ = NULL;
::std::string* ZapperStatus::_default_rx1freq_ = NULL;
::std::string* ZapperStatus::_default_rx2freq_ = NULL;
::std::string* ZapperStatus::_default_rx3freq_ = NULL;
::std::string* ZapperStatus::_default_rx4freq_ = NULL;
::std::string* ZapperStatus::_default_tx1freq_ = NULL;
::std::string* ZapperStatus::_default_tx2freq_ = NULL;
::std::string* ZapperStatus::_default_amp1_ = NULL;
::std::string* ZapperStatus::_default_amp2_ = NULL;
::std::string* ZapperStatus::_default_amp3_ = NULL;
::std::string* ZapperStatus::_default_meterchan_ = NULL;
::std::string* ZapperStatus::_default_meterpower_ = NULL;
#ifndef _MSC_VER
const int ZapperStatus::kMsgNameFieldNumber;
const int ZapperStatus::kChan1StatFieldNumber;
const int ZapperStatus::kChan2StatFieldNumber;
const int ZapperStatus::kRx1FreqFieldNumber;
const int ZapperStatus::kRx2FreqFieldNumber;
const int ZapperStatus::kRx3FreqFieldNumber;
const int ZapperStatus::kRx4FreqFieldNumber;
const int ZapperStatus::kTx1FreqFieldNumber;
const int ZapperStatus::kTx2FreqFieldNumber;
const int ZapperStatus::kAmp1FieldNumber;
const int ZapperStatus::kAmp2FieldNumber;
const int ZapperStatus::kAmp3FieldNumber;
const int ZapperStatus::kMeterChanFieldNumber;
const int ZapperStatus::kMeterPowerFieldNumber;
#endif  // !_MSC_VER

ZapperStatus::ZapperStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZapperStatus::InitAsDefaultInstance() {
}

ZapperStatus::ZapperStatus(const ZapperStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZapperStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  chan1stat_ = const_cast< ::std::string*>(_default_chan1stat_);
  chan2stat_ = const_cast< ::std::string*>(_default_chan2stat_);
  rx1freq_ = const_cast< ::std::string*>(_default_rx1freq_);
  rx2freq_ = const_cast< ::std::string*>(_default_rx2freq_);
  rx3freq_ = const_cast< ::std::string*>(_default_rx3freq_);
  rx4freq_ = const_cast< ::std::string*>(_default_rx4freq_);
  tx1freq_ = const_cast< ::std::string*>(_default_tx1freq_);
  tx2freq_ = const_cast< ::std::string*>(_default_tx2freq_);
  amp1_ = const_cast< ::std::string*>(_default_amp1_);
  amp2_ = const_cast< ::std::string*>(_default_amp2_);
  amp3_ = const_cast< ::std::string*>(_default_amp3_);
  meterchan_ = const_cast< ::std::string*>(_default_meterchan_);
  meterpower_ = const_cast< ::std::string*>(_default_meterpower_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZapperStatus::~ZapperStatus() {
  SharedDtor();
}

void ZapperStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (chan1stat_ != _default_chan1stat_) {
    delete chan1stat_;
  }
  if (chan2stat_ != _default_chan2stat_) {
    delete chan2stat_;
  }
  if (rx1freq_ != _default_rx1freq_) {
    delete rx1freq_;
  }
  if (rx2freq_ != _default_rx2freq_) {
    delete rx2freq_;
  }
  if (rx3freq_ != _default_rx3freq_) {
    delete rx3freq_;
  }
  if (rx4freq_ != _default_rx4freq_) {
    delete rx4freq_;
  }
  if (tx1freq_ != _default_tx1freq_) {
    delete tx1freq_;
  }
  if (tx2freq_ != _default_tx2freq_) {
    delete tx2freq_;
  }
  if (amp1_ != _default_amp1_) {
    delete amp1_;
  }
  if (amp2_ != _default_amp2_) {
    delete amp2_;
  }
  if (amp3_ != _default_amp3_) {
    delete amp3_;
  }
  if (meterchan_ != _default_meterchan_) {
    delete meterchan_;
  }
  if (meterpower_ != _default_meterpower_) {
    delete meterpower_;
  }
  if (this != default_instance_) {
  }
}

void ZapperStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZapperStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZapperStatus_descriptor_;
}

const ZapperStatus& ZapperStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

ZapperStatus* ZapperStatus::default_instance_ = NULL;

ZapperStatus* ZapperStatus::New() const {
  return new ZapperStatus;
}

void ZapperStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_chan1stat()) {
      if (chan1stat_ != _default_chan1stat_) {
        chan1stat_->assign(*_default_chan1stat_);
      }
    }
    if (has_chan2stat()) {
      if (chan2stat_ != _default_chan2stat_) {
        chan2stat_->assign(*_default_chan2stat_);
      }
    }
    if (has_rx1freq()) {
      if (rx1freq_ != _default_rx1freq_) {
        rx1freq_->assign(*_default_rx1freq_);
      }
    }
    if (has_rx2freq()) {
      if (rx2freq_ != _default_rx2freq_) {
        rx2freq_->assign(*_default_rx2freq_);
      }
    }
    if (has_rx3freq()) {
      if (rx3freq_ != _default_rx3freq_) {
        rx3freq_->assign(*_default_rx3freq_);
      }
    }
    if (has_rx4freq()) {
      if (rx4freq_ != _default_rx4freq_) {
        rx4freq_->assign(*_default_rx4freq_);
      }
    }
    if (has_tx1freq()) {
      if (tx1freq_ != _default_tx1freq_) {
        tx1freq_->assign(*_default_tx1freq_);
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_tx2freq()) {
      if (tx2freq_ != _default_tx2freq_) {
        tx2freq_->assign(*_default_tx2freq_);
      }
    }
    if (has_amp1()) {
      if (amp1_ != _default_amp1_) {
        amp1_->assign(*_default_amp1_);
      }
    }
    if (has_amp2()) {
      if (amp2_ != _default_amp2_) {
        amp2_->assign(*_default_amp2_);
      }
    }
    if (has_amp3()) {
      if (amp3_ != _default_amp3_) {
        amp3_->assign(*_default_amp3_);
      }
    }
    if (has_meterchan()) {
      if (meterchan_ != _default_meterchan_) {
        meterchan_->assign(*_default_meterchan_);
      }
    }
    if (has_meterpower()) {
      if (meterpower_ != _default_meterpower_) {
        meterpower_->assign(*_default_meterpower_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZapperStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ZAPPERSTAT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chan1Stat;
        break;
      }

      // optional string chan1Stat = 2 [default = "OFF"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chan1Stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chan1stat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chan1stat().data(), this->chan1stat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chan2Stat;
        break;
      }

      // optional string chan2Stat = 3 [default = "OFF"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chan2Stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chan2stat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chan2stat().data(), this->chan2stat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rx1Freq;
        break;
      }

      // optional string rx1Freq = 4 [default = "2440"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rx1Freq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rx1freq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rx1freq().data(), this->rx1freq().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rx2Freq;
        break;
      }

      // optional string rx2Freq = 5 [default = "2440"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rx2Freq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rx2freq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rx2freq().data(), this->rx2freq().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rx3Freq;
        break;
      }

      // optional string rx3Freq = 6 [default = "2440"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rx3Freq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rx3freq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rx3freq().data(), this->rx3freq().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rx4Freq;
        break;
      }

      // optional string rx4Freq = 7 [default = "2440"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rx4Freq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rx4freq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rx4freq().data(), this->rx4freq().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tx1Freq;
        break;
      }

      // optional string tx1Freq = 8 [default = "2440"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tx1Freq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tx1freq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tx1freq().data(), this->tx1freq().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_tx2Freq;
        break;
      }

      // optional string tx2Freq = 9 [default = "2440"];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tx2Freq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tx2freq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tx2freq().data(), this->tx2freq().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_amp1;
        break;
      }

      // optional string amp1 = 10 [default = "0"];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amp1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amp1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->amp1().data(), this->amp1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_amp2;
        break;
      }

      // optional string amp2 = 11 [default = "0"];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amp2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amp2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->amp2().data(), this->amp2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_amp3;
        break;
      }

      // optional string amp3 = 12 [default = "0"];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amp3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amp3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->amp3().data(), this->amp3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_meterChan;
        break;
      }

      // optional string meterChan = 13 [default = "-1"];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meterChan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meterchan()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meterchan().data(), this->meterchan().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_meterPower;
        break;
      }

      // optional string meterPower = 14 [default = "-99"];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meterPower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meterpower()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meterpower().data(), this->meterpower().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZapperStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ZAPPERSTAT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string chan1Stat = 2 [default = "OFF"];
  if (has_chan1stat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chan1stat().data(), this->chan1stat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->chan1stat(), output);
  }

  // optional string chan2Stat = 3 [default = "OFF"];
  if (has_chan2stat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chan2stat().data(), this->chan2stat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->chan2stat(), output);
  }

  // optional string rx1Freq = 4 [default = "2440"];
  if (has_rx1freq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx1freq().data(), this->rx1freq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rx1freq(), output);
  }

  // optional string rx2Freq = 5 [default = "2440"];
  if (has_rx2freq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx2freq().data(), this->rx2freq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->rx2freq(), output);
  }

  // optional string rx3Freq = 6 [default = "2440"];
  if (has_rx3freq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx3freq().data(), this->rx3freq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->rx3freq(), output);
  }

  // optional string rx4Freq = 7 [default = "2440"];
  if (has_rx4freq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx4freq().data(), this->rx4freq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->rx4freq(), output);
  }

  // optional string tx1Freq = 8 [default = "2440"];
  if (has_tx1freq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tx1freq().data(), this->tx1freq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->tx1freq(), output);
  }

  // optional string tx2Freq = 9 [default = "2440"];
  if (has_tx2freq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tx2freq().data(), this->tx2freq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->tx2freq(), output);
  }

  // optional string amp1 = 10 [default = "0"];
  if (has_amp1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amp1().data(), this->amp1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->amp1(), output);
  }

  // optional string amp2 = 11 [default = "0"];
  if (has_amp2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amp2().data(), this->amp2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->amp2(), output);
  }

  // optional string amp3 = 12 [default = "0"];
  if (has_amp3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amp3().data(), this->amp3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->amp3(), output);
  }

  // optional string meterChan = 13 [default = "-1"];
  if (has_meterchan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meterchan().data(), this->meterchan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->meterchan(), output);
  }

  // optional string meterPower = 14 [default = "-99"];
  if (has_meterpower()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meterpower().data(), this->meterpower().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->meterpower(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZapperStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ZAPPERSTAT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string chan1Stat = 2 [default = "OFF"];
  if (has_chan1stat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chan1stat().data(), this->chan1stat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chan1stat(), target);
  }

  // optional string chan2Stat = 3 [default = "OFF"];
  if (has_chan2stat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chan2stat().data(), this->chan2stat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chan2stat(), target);
  }

  // optional string rx1Freq = 4 [default = "2440"];
  if (has_rx1freq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx1freq().data(), this->rx1freq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rx1freq(), target);
  }

  // optional string rx2Freq = 5 [default = "2440"];
  if (has_rx2freq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx2freq().data(), this->rx2freq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->rx2freq(), target);
  }

  // optional string rx3Freq = 6 [default = "2440"];
  if (has_rx3freq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx3freq().data(), this->rx3freq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->rx3freq(), target);
  }

  // optional string rx4Freq = 7 [default = "2440"];
  if (has_rx4freq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx4freq().data(), this->rx4freq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rx4freq(), target);
  }

  // optional string tx1Freq = 8 [default = "2440"];
  if (has_tx1freq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tx1freq().data(), this->tx1freq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->tx1freq(), target);
  }

  // optional string tx2Freq = 9 [default = "2440"];
  if (has_tx2freq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tx2freq().data(), this->tx2freq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->tx2freq(), target);
  }

  // optional string amp1 = 10 [default = "0"];
  if (has_amp1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amp1().data(), this->amp1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->amp1(), target);
  }

  // optional string amp2 = 11 [default = "0"];
  if (has_amp2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amp2().data(), this->amp2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->amp2(), target);
  }

  // optional string amp3 = 12 [default = "0"];
  if (has_amp3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amp3().data(), this->amp3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->amp3(), target);
  }

  // optional string meterChan = 13 [default = "-1"];
  if (has_meterchan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meterchan().data(), this->meterchan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->meterchan(), target);
  }

  // optional string meterPower = 14 [default = "-99"];
  if (has_meterpower()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meterpower().data(), this->meterpower().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->meterpower(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZapperStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ZAPPERSTAT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string chan1Stat = 2 [default = "OFF"];
    if (has_chan1stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chan1stat());
    }

    // optional string chan2Stat = 3 [default = "OFF"];
    if (has_chan2stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chan2stat());
    }

    // optional string rx1Freq = 4 [default = "2440"];
    if (has_rx1freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rx1freq());
    }

    // optional string rx2Freq = 5 [default = "2440"];
    if (has_rx2freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rx2freq());
    }

    // optional string rx3Freq = 6 [default = "2440"];
    if (has_rx3freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rx3freq());
    }

    // optional string rx4Freq = 7 [default = "2440"];
    if (has_rx4freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rx4freq());
    }

    // optional string tx1Freq = 8 [default = "2440"];
    if (has_tx1freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tx1freq());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string tx2Freq = 9 [default = "2440"];
    if (has_tx2freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tx2freq());
    }

    // optional string amp1 = 10 [default = "0"];
    if (has_amp1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amp1());
    }

    // optional string amp2 = 11 [default = "0"];
    if (has_amp2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amp2());
    }

    // optional string amp3 = 12 [default = "0"];
    if (has_amp3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amp3());
    }

    // optional string meterChan = 13 [default = "-1"];
    if (has_meterchan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meterchan());
    }

    // optional string meterPower = 14 [default = "-99"];
    if (has_meterpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meterpower());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZapperStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZapperStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZapperStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZapperStatus::MergeFrom(const ZapperStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_chan1stat()) {
      set_chan1stat(from.chan1stat());
    }
    if (from.has_chan2stat()) {
      set_chan2stat(from.chan2stat());
    }
    if (from.has_rx1freq()) {
      set_rx1freq(from.rx1freq());
    }
    if (from.has_rx2freq()) {
      set_rx2freq(from.rx2freq());
    }
    if (from.has_rx3freq()) {
      set_rx3freq(from.rx3freq());
    }
    if (from.has_rx4freq()) {
      set_rx4freq(from.rx4freq());
    }
    if (from.has_tx1freq()) {
      set_tx1freq(from.tx1freq());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tx2freq()) {
      set_tx2freq(from.tx2freq());
    }
    if (from.has_amp1()) {
      set_amp1(from.amp1());
    }
    if (from.has_amp2()) {
      set_amp2(from.amp2());
    }
    if (from.has_amp3()) {
      set_amp3(from.amp3());
    }
    if (from.has_meterchan()) {
      set_meterchan(from.meterchan());
    }
    if (from.has_meterpower()) {
      set_meterpower(from.meterpower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZapperStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZapperStatus::CopyFrom(const ZapperStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZapperStatus::IsInitialized() const {

  return true;
}

void ZapperStatus::Swap(ZapperStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(chan1stat_, other->chan1stat_);
    std::swap(chan2stat_, other->chan2stat_);
    std::swap(rx1freq_, other->rx1freq_);
    std::swap(rx2freq_, other->rx2freq_);
    std::swap(rx3freq_, other->rx3freq_);
    std::swap(rx4freq_, other->rx4freq_);
    std::swap(tx1freq_, other->tx1freq_);
    std::swap(tx2freq_, other->tx2freq_);
    std::swap(amp1_, other->amp1_);
    std::swap(amp2_, other->amp2_);
    std::swap(amp3_, other->amp3_);
    std::swap(meterchan_, other->meterchan_);
    std::swap(meterpower_, other->meterpower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZapperStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZapperStatus_descriptor_;
  metadata.reflection = ZapperStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* StopAll::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int StopAll::kMsgNameFieldNumber;
#endif  // !_MSC_VER

StopAll::StopAll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopAll::InitAsDefaultInstance() {
}

StopAll::StopAll(const StopAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopAll::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopAll::~StopAll() {
  SharedDtor();
}

void StopAll::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void StopAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopAll_descriptor_;
}

const StopAll& StopAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

StopAll* StopAll::default_instance_ = NULL;

StopAll* StopAll::New() const {
  return new StopAll;
}

void StopAll::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "STOPALL"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "STOPALL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "STOPALL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopAll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "STOPALL"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopAll::MergeFrom(const StopAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopAll::CopyFrom(const StopAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopAll::IsInitialized() const {

  return true;
}

void StopAll::Swap(StopAll* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopAll_descriptor_;
  metadata.reflection = StopAll_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ToneJam::_default_msgname_ = NULL;
::std::string* ToneJam::_default_platform_ = NULL;
#ifndef _MSC_VER
const int ToneJam::kMsgNameFieldNumber;
const int ToneJam::kPlatformFieldNumber;
const int ToneJam::kTargetIDFieldNumber;
#endif  // !_MSC_VER

ToneJam::ToneJam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToneJam::InitAsDefaultInstance() {
}

ToneJam::ToneJam(const ToneJam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToneJam::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  platform_ = const_cast< ::std::string*>(_default_platform_);
  targetid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToneJam::~ToneJam() {
  SharedDtor();
}

void ToneJam::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (platform_ != _default_platform_) {
    delete platform_;
  }
  if (this != default_instance_) {
  }
}

void ToneJam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToneJam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToneJam_descriptor_;
}

const ToneJam& ToneJam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

ToneJam* ToneJam::default_instance_ = NULL;

ToneJam* ToneJam::New() const {
  return new ToneJam;
}

void ToneJam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_platform()) {
      if (platform_ != _default_platform_) {
        platform_->assign(*_default_platform_);
      }
    }
    targetid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToneJam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TONEJAM"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_platform;
        break;
      }

      // optional string platform = 2 [default = "NONE"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetID;
        break;
      }

      // optional int32 targetID = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToneJam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TONEJAM"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string platform = 2 [default = "NONE"];
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platform(), output);
  }

  // optional int32 targetID = 3 [default = -1];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToneJam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TONEJAM"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string platform = 2 [default = "NONE"];
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platform(), target);
  }

  // optional int32 targetID = 3 [default = -1];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToneJam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TONEJAM"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string platform = 2 [default = "NONE"];
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional int32 targetID = 3 [default = -1];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToneJam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToneJam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToneJam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToneJam::MergeFrom(const ToneJam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToneJam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToneJam::CopyFrom(const ToneJam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToneJam::IsInitialized() const {

  return true;
}

void ToneJam::Swap(ToneJam* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(platform_, other->platform_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToneJam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToneJam_descriptor_;
  metadata.reflection = ToneJam_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ToneJamOff::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ToneJamOff::kMsgNameFieldNumber;
const int ToneJamOff::kTargetIDFieldNumber;
#endif  // !_MSC_VER

ToneJamOff::ToneJamOff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToneJamOff::InitAsDefaultInstance() {
}

ToneJamOff::ToneJamOff(const ToneJamOff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToneJamOff::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  targetid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToneJamOff::~ToneJamOff() {
  SharedDtor();
}

void ToneJamOff::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ToneJamOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToneJamOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToneJamOff_descriptor_;
}

const ToneJamOff& ToneJamOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

ToneJamOff* ToneJamOff::default_instance_ = NULL;

ToneJamOff* ToneJamOff::New() const {
  return new ToneJamOff;
}

void ToneJamOff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    targetid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToneJamOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TONEJAMOFF"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetID;
        break;
      }

      // optional int32 targetID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToneJamOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TONEJAMOFF"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 targetID = 2 [default = -1];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToneJamOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TONEJAMOFF"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 targetID = 2 [default = -1];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToneJamOff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TONEJAMOFF"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 targetID = 2 [default = -1];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToneJamOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToneJamOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToneJamOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToneJamOff::MergeFrom(const ToneJamOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToneJamOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToneJamOff::CopyFrom(const ToneJamOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToneJamOff::IsInitialized() const {

  return true;
}

void ToneJamOff::Swap(ToneJamOff* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToneJamOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToneJamOff_descriptor_;
  metadata.reflection = ToneJamOff_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Zap::_default_msgname_ = NULL;
::std::string* Zap::_default_platform_ = NULL;
#ifndef _MSC_VER
const int Zap::kMsgNameFieldNumber;
const int Zap::kTargetIDFieldNumber;
const int Zap::kPlatformFieldNumber;
#endif  // !_MSC_VER

Zap::Zap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zap::InitAsDefaultInstance() {
}

Zap::Zap(const Zap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zap::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  targetid_ = -1;
  platform_ = const_cast< ::std::string*>(_default_platform_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zap::~Zap() {
  SharedDtor();
}

void Zap::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (platform_ != _default_platform_) {
    delete platform_;
  }
  if (this != default_instance_) {
  }
}

void Zap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zap_descriptor_;
}

const Zap& Zap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

Zap* Zap::default_instance_ = NULL;

Zap* Zap::New() const {
  return new Zap;
}

void Zap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    targetid_ = -1;
    if (has_platform()) {
      if (platform_ != _default_platform_) {
        platform_->assign(*_default_platform_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ZAP"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_platform;
        break;
      }

      // optional string platform = 2 [default = "NONE"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetID;
        break;
      }

      // optional int32 targetID = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ZAP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string platform = 2 [default = "NONE"];
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platform(), output);
  }

  // optional int32 targetID = 3 [default = -1];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ZAP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string platform = 2 [default = "NONE"];
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platform(), target);
  }

  // optional int32 targetID = 3 [default = -1];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ZAP"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 targetID = 3 [default = -1];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // optional string platform = 2 [default = "NONE"];
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zap::MergeFrom(const Zap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zap::CopyFrom(const Zap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zap::IsInitialized() const {

  return true;
}

void Zap::Swap(Zap* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(targetid_, other->targetid_);
    std::swap(platform_, other->platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zap_descriptor_;
  metadata.reflection = Zap_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ZapOff::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ZapOff::kMsgNameFieldNumber;
const int ZapOff::kTargetIDFieldNumber;
#endif  // !_MSC_VER

ZapOff::ZapOff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZapOff::InitAsDefaultInstance() {
}

ZapOff::ZapOff(const ZapOff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZapOff::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  targetid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZapOff::~ZapOff() {
  SharedDtor();
}

void ZapOff::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ZapOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZapOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZapOff_descriptor_;
}

const ZapOff& ZapOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

ZapOff* ZapOff::default_instance_ = NULL;

ZapOff* ZapOff::New() const {
  return new ZapOff;
}

void ZapOff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    targetid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZapOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ZAPOFF"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetID;
        break;
      }

      // optional int32 targetID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZapOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ZAPOFF"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 targetID = 2 [default = -1];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZapOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ZAPOFF"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 targetID = 2 [default = -1];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZapOff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ZAPOFF"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 targetID = 2 [default = -1];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZapOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZapOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZapOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZapOff::MergeFrom(const ZapOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZapOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZapOff::CopyFrom(const ZapOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZapOff::IsInitialized() const {

  return true;
}

void ZapOff::Swap(ZapOff* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZapOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZapOff_descriptor_;
  metadata.reflection = ZapOff_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Detect::_default_msgname_ = NULL;
::std::string* Detect::_default_platform_ = NULL;
#ifndef _MSC_VER
const int Detect::kMsgNameFieldNumber;
const int Detect::kPlatformFieldNumber;
const int Detect::kFreqFieldNumber;
#endif  // !_MSC_VER

Detect::Detect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Detect::InitAsDefaultInstance() {
}

Detect::Detect(const Detect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Detect::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  platform_ = const_cast< ::std::string*>(_default_platform_);
  freq_ = 2440;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Detect::~Detect() {
  SharedDtor();
}

void Detect::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (platform_ != _default_platform_) {
    delete platform_;
  }
  if (this != default_instance_) {
  }
}

void Detect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Detect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Detect_descriptor_;
}

const Detect& Detect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

Detect* Detect::default_instance_ = NULL;

Detect* Detect::New() const {
  return new Detect;
}

void Detect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_platform()) {
      if (platform_ != _default_platform_) {
        platform_->assign(*_default_platform_);
      }
    }
    freq_ = 2440;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Detect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DETECT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_platform;
        break;
      }

      // optional string platform = 2 [default = "NONE"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_freq;
        break;
      }

      // optional double freq = 3 [default = 2440];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Detect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DETECT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string platform = 2 [default = "NONE"];
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platform(), output);
  }

  // optional double freq = 3 [default = 2440];
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->freq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Detect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DETECT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string platform = 2 [default = "NONE"];
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platform(), target);
  }

  // optional double freq = 3 [default = 2440];
  if (has_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->freq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Detect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DETECT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string platform = 2 [default = "NONE"];
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional double freq = 3 [default = 2440];
    if (has_freq()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Detect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Detect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Detect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Detect::MergeFrom(const Detect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_freq()) {
      set_freq(from.freq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Detect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detect::CopyFrom(const Detect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detect::IsInitialized() const {

  return true;
}

void Detect::Swap(Detect* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(platform_, other->platform_);
    std::swap(freq_, other->freq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Detect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Detect_descriptor_;
  metadata.reflection = Detect_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ZapperOptions::_default_msgname_ = NULL;
::std::string* ZapperOptions::_default_options_ = NULL;
#ifndef _MSC_VER
const int ZapperOptions::kMsgNameFieldNumber;
const int ZapperOptions::kOptionsFieldNumber;
const int ZapperOptions::kTargetIDFieldNumber;
#endif  // !_MSC_VER

ZapperOptions::ZapperOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZapperOptions::InitAsDefaultInstance() {
}

ZapperOptions::ZapperOptions(const ZapperOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZapperOptions::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  options_ = const_cast< ::std::string*>(_default_options_);
  targetid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZapperOptions::~ZapperOptions() {
  SharedDtor();
}

void ZapperOptions::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (options_ != _default_options_) {
    delete options_;
  }
  if (this != default_instance_) {
  }
}

void ZapperOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZapperOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZapperOptions_descriptor_;
}

const ZapperOptions& ZapperOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

ZapperOptions* ZapperOptions::default_instance_ = NULL;

ZapperOptions* ZapperOptions::New() const {
  return new ZapperOptions;
}

void ZapperOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_options()) {
      if (options_ != _default_options_) {
        options_->assign(*_default_options_);
      }
    }
    targetid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZapperOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ZAPPEROPTIONS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional string options = 2 [default = "NONE"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_options()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->options().data(), this->options().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetID;
        break;
      }

      // optional int32 targetID = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZapperOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ZAPPEROPTIONS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string options = 2 [default = "NONE"];
  if (has_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->options().data(), this->options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->options(), output);
  }

  // optional int32 targetID = 3 [default = -1];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZapperOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ZAPPEROPTIONS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string options = 2 [default = "NONE"];
  if (has_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->options().data(), this->options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->options(), target);
  }

  // optional int32 targetID = 3 [default = -1];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZapperOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ZAPPEROPTIONS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string options = 2 [default = "NONE"];
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->options());
    }

    // optional int32 targetID = 3 [default = -1];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZapperOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZapperOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZapperOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZapperOptions::MergeFrom(const ZapperOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_options()) {
      set_options(from.options());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZapperOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZapperOptions::CopyFrom(const ZapperOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZapperOptions::IsInitialized() const {

  return true;
}

void ZapperOptions::Swap(ZapperOptions* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(options_, other->options_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZapperOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZapperOptions_descriptor_;
  metadata.reflection = ZapperOptions_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ZapPing::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ZapPing::kMsgNameFieldNumber;
#endif  // !_MSC_VER

ZapPing::ZapPing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZapPing::InitAsDefaultInstance() {
}

ZapPing::ZapPing(const ZapPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZapPing::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZapPing::~ZapPing() {
  SharedDtor();
}

void ZapPing::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ZapPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZapPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZapPing_descriptor_;
}

const ZapPing& ZapPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

ZapPing* ZapPing::default_instance_ = NULL;

ZapPing* ZapPing::New() const {
  return new ZapPing;
}

void ZapPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZapPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ZAPPING"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZapPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ZAPPING"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZapPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ZAPPING"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZapPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ZAPPING"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZapPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZapPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZapPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZapPing::MergeFrom(const ZapPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZapPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZapPing::CopyFrom(const ZapPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZapPing::IsInitialized() const {

  return true;
}

void ZapPing::Swap(ZapPing* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZapPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZapPing_descriptor_;
  metadata.reflection = ZapPing_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ZapPong::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ZapPong::kMsgNameFieldNumber;
#endif  // !_MSC_VER

ZapPong::ZapPong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZapPong::InitAsDefaultInstance() {
}

ZapPong::ZapPong(const ZapPong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZapPong::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZapPong::~ZapPong() {
  SharedDtor();
}

void ZapPong::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ZapPong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZapPong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZapPong_descriptor_;
}

const ZapPong& ZapPong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

ZapPong* ZapPong::default_instance_ = NULL;

ZapPong* ZapPong::New() const {
  return new ZapPong;
}

void ZapPong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZapPong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ZAPPONG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZapPong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ZAPPONG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZapPong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ZAPPONG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZapPong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ZAPPONG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZapPong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZapPong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZapPong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZapPong::MergeFrom(const ZapPong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZapPong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZapPong::CopyFrom(const ZapPong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZapPong::IsInitialized() const {

  return true;
}

void ZapPong::Swap(ZapPong* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZapPong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZapPong_descriptor_;
  metadata.reflection = ZapPong_reflection_;
  return metadata;
}


// ===================================================================

::std::string* InfoMsg::_default_msgname_ = NULL;
::std::string* InfoMsg::_default_info_ = NULL;
#ifndef _MSC_VER
const int InfoMsg::kMsgNameFieldNumber;
const int InfoMsg::kInfoFieldNumber;
#endif  // !_MSC_VER

InfoMsg::InfoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InfoMsg::InitAsDefaultInstance() {
}

InfoMsg::InfoMsg(const InfoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InfoMsg::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  info_ = const_cast< ::std::string*>(_default_info_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfoMsg::~InfoMsg() {
  SharedDtor();
}

void InfoMsg::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (info_ != _default_info_) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void InfoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfoMsg_descriptor_;
}

const InfoMsg& InfoMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconVcnMessages_2eproto();
  return *default_instance_;
}

InfoMsg* InfoMsg::default_instance_ = NULL;

InfoMsg* InfoMsg::New() const {
  return new InfoMsg;
}

void InfoMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_info()) {
      if (info_ != _default_info_) {
        info_->assign(*_default_info_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "INFOMSG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional string info = 2 [default = "NONE"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "INFOMSG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string info = 2 [default = "NONE"];
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InfoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "INFOMSG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string info = 2 [default = "NONE"];
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InfoMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "INFOMSG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string info = 2 [default = "NONE"];
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InfoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InfoMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfoMsg::MergeFrom(const InfoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoMsg::CopyFrom(const InfoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoMsg::IsInitialized() const {

  return true;
}

void InfoMsg::Swap(InfoMsg* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InfoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfoMsg_descriptor_;
  metadata.reflection = InfoMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace VcnProtos
}  // namespace protos
}  // namespace vcn
}  // namespace fv

// @@protoc_insertion_point(global_scope)
