// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FalconTransmitterMessages.proto

#ifndef PROTOBUF_FalconTransmitterMessages_2eproto__INCLUDED
#define PROTOBUF_FalconTransmitterMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace falcon_transmitter_msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FalconTransmitterMessages_2eproto();
void protobuf_AssignDesc_FalconTransmitterMessages_2eproto();
void protobuf_ShutdownFile_FalconTransmitterMessages_2eproto();

class TransmitterRequest;
class TransmitterResponse;
class UniqueTXIDRequest;
class UniqueTXIDResponse;
class TransmitterInfoRequest;
class TransmitterInfoResponse;

enum TransmitterRequest_Action {
  TransmitterRequest_Action_SET = 0,
  TransmitterRequest_Action_GET = 1
};
bool TransmitterRequest_Action_IsValid(int value);
const TransmitterRequest_Action TransmitterRequest_Action_Action_MIN = TransmitterRequest_Action_SET;
const TransmitterRequest_Action TransmitterRequest_Action_Action_MAX = TransmitterRequest_Action_GET;
const int TransmitterRequest_Action_Action_ARRAYSIZE = TransmitterRequest_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransmitterRequest_Action_descriptor();
inline const ::std::string& TransmitterRequest_Action_Name(TransmitterRequest_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransmitterRequest_Action_descriptor(), value);
}
inline bool TransmitterRequest_Action_Parse(
    const ::std::string& name, TransmitterRequest_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransmitterRequest_Action>(
    TransmitterRequest_Action_descriptor(), name, value);
}
enum TransmitterRequest_Property {
  TransmitterRequest_Property_FREQUENCY = 0,
  TransmitterRequest_Property_BANDWIDTH = 1,
  TransmitterRequest_Property_GAIN = 2,
  TransmitterRequest_Property_REF = 3
};
bool TransmitterRequest_Property_IsValid(int value);
const TransmitterRequest_Property TransmitterRequest_Property_Property_MIN = TransmitterRequest_Property_FREQUENCY;
const TransmitterRequest_Property TransmitterRequest_Property_Property_MAX = TransmitterRequest_Property_REF;
const int TransmitterRequest_Property_Property_ARRAYSIZE = TransmitterRequest_Property_Property_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransmitterRequest_Property_descriptor();
inline const ::std::string& TransmitterRequest_Property_Name(TransmitterRequest_Property value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransmitterRequest_Property_descriptor(), value);
}
inline bool TransmitterRequest_Property_Parse(
    const ::std::string& name, TransmitterRequest_Property* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransmitterRequest_Property>(
    TransmitterRequest_Property_descriptor(), name, value);
}
enum TransmitterResponse_Status {
  TransmitterResponse_Status_SUCCESS = 0,
  TransmitterResponse_Status_FAIL = 1,
  TransmitterResponse_Status_DISCONNECTED = 2,
  TransmitterResponse_Status_PERMISSIONS = 3
};
bool TransmitterResponse_Status_IsValid(int value);
const TransmitterResponse_Status TransmitterResponse_Status_Status_MIN = TransmitterResponse_Status_SUCCESS;
const TransmitterResponse_Status TransmitterResponse_Status_Status_MAX = TransmitterResponse_Status_PERMISSIONS;
const int TransmitterResponse_Status_Status_ARRAYSIZE = TransmitterResponse_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransmitterResponse_Status_descriptor();
inline const ::std::string& TransmitterResponse_Status_Name(TransmitterResponse_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransmitterResponse_Status_descriptor(), value);
}
inline bool TransmitterResponse_Status_Parse(
    const ::std::string& name, TransmitterResponse_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransmitterResponse_Status>(
    TransmitterResponse_Status_descriptor(), name, value);
}
enum UniqueTXIDRequest_Action {
  UniqueTXIDRequest_Action_SET = 0,
  UniqueTXIDRequest_Action_GET = 1
};
bool UniqueTXIDRequest_Action_IsValid(int value);
const UniqueTXIDRequest_Action UniqueTXIDRequest_Action_Action_MIN = UniqueTXIDRequest_Action_SET;
const UniqueTXIDRequest_Action UniqueTXIDRequest_Action_Action_MAX = UniqueTXIDRequest_Action_GET;
const int UniqueTXIDRequest_Action_Action_ARRAYSIZE = UniqueTXIDRequest_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* UniqueTXIDRequest_Action_descriptor();
inline const ::std::string& UniqueTXIDRequest_Action_Name(UniqueTXIDRequest_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    UniqueTXIDRequest_Action_descriptor(), value);
}
inline bool UniqueTXIDRequest_Action_Parse(
    const ::std::string& name, UniqueTXIDRequest_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UniqueTXIDRequest_Action>(
    UniqueTXIDRequest_Action_descriptor(), name, value);
}
// ===================================================================

class TransmitterRequest : public ::google::protobuf::Message {
 public:
  TransmitterRequest();
  virtual ~TransmitterRequest();

  TransmitterRequest(const TransmitterRequest& from);

  inline TransmitterRequest& operator=(const TransmitterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransmitterRequest& default_instance();

  void Swap(TransmitterRequest* other);

  // implements Message ----------------------------------------------

  TransmitterRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransmitterRequest& from);
  void MergeFrom(const TransmitterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TransmitterRequest_Action Action;
  static const Action SET = TransmitterRequest_Action_SET;
  static const Action GET = TransmitterRequest_Action_GET;
  static inline bool Action_IsValid(int value) {
    return TransmitterRequest_Action_IsValid(value);
  }
  static const Action Action_MIN =
    TransmitterRequest_Action_Action_MIN;
  static const Action Action_MAX =
    TransmitterRequest_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    TransmitterRequest_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return TransmitterRequest_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return TransmitterRequest_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return TransmitterRequest_Action_Parse(name, value);
  }

  typedef TransmitterRequest_Property Property;
  static const Property FREQUENCY = TransmitterRequest_Property_FREQUENCY;
  static const Property BANDWIDTH = TransmitterRequest_Property_BANDWIDTH;
  static const Property GAIN = TransmitterRequest_Property_GAIN;
  static const Property REF = TransmitterRequest_Property_REF;
  static inline bool Property_IsValid(int value) {
    return TransmitterRequest_Property_IsValid(value);
  }
  static const Property Property_MIN =
    TransmitterRequest_Property_Property_MIN;
  static const Property Property_MAX =
    TransmitterRequest_Property_Property_MAX;
  static const int Property_ARRAYSIZE =
    TransmitterRequest_Property_Property_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Property_descriptor() {
    return TransmitterRequest_Property_descriptor();
  }
  static inline const ::std::string& Property_Name(Property value) {
    return TransmitterRequest_Property_Name(value);
  }
  static inline bool Property_Parse(const ::std::string& name,
      Property* value) {
    return TransmitterRequest_Property_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "TRANSMITTER_REQUEST"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional string resID = 2;
  inline bool has_resid() const;
  inline void clear_resid();
  static const int kResIDFieldNumber = 2;
  inline const ::std::string& resid() const;
  inline void set_resid(const ::std::string& value);
  inline void set_resid(const char* value);
  inline void set_resid(const char* value, size_t size);
  inline ::std::string* mutable_resid();
  inline ::std::string* release_resid();
  inline void set_allocated_resid(::std::string* resid);

  // optional int32 appID = 3;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppIDFieldNumber = 3;
  inline ::google::protobuf::int32 appid() const;
  inline void set_appid(::google::protobuf::int32 value);

  // optional .falcon_transmitter_msg.TransmitterRequest.Action action = 4;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 4;
  inline ::falcon_transmitter_msg::TransmitterRequest_Action action() const;
  inline void set_action(::falcon_transmitter_msg::TransmitterRequest_Action value);

  // optional .falcon_transmitter_msg.TransmitterRequest.Property property = 5;
  inline bool has_property() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 5;
  inline ::falcon_transmitter_msg::TransmitterRequest_Property property() const;
  inline void set_property(::falcon_transmitter_msg::TransmitterRequest_Property value);

  // optional float value = 6;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 6;
  inline float value() const;
  inline void set_value(float value);

  // @@protoc_insertion_point(class_scope:falcon_transmitter_msg.TransmitterRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_resid();
  inline void clear_has_resid();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_property();
  inline void clear_has_property();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* resid_;
  ::google::protobuf::int32 appid_;
  int action_;
  int property_;
  float value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_FalconTransmitterMessages_2eproto();
  friend void protobuf_AssignDesc_FalconTransmitterMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconTransmitterMessages_2eproto();

  void InitAsDefaultInstance();
  static TransmitterRequest* default_instance_;
};
// -------------------------------------------------------------------

class TransmitterResponse : public ::google::protobuf::Message {
 public:
  TransmitterResponse();
  virtual ~TransmitterResponse();

  TransmitterResponse(const TransmitterResponse& from);

  inline TransmitterResponse& operator=(const TransmitterResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransmitterResponse& default_instance();

  void Swap(TransmitterResponse* other);

  // implements Message ----------------------------------------------

  TransmitterResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransmitterResponse& from);
  void MergeFrom(const TransmitterResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TransmitterResponse_Status Status;
  static const Status SUCCESS = TransmitterResponse_Status_SUCCESS;
  static const Status FAIL = TransmitterResponse_Status_FAIL;
  static const Status DISCONNECTED = TransmitterResponse_Status_DISCONNECTED;
  static const Status PERMISSIONS = TransmitterResponse_Status_PERMISSIONS;
  static inline bool Status_IsValid(int value) {
    return TransmitterResponse_Status_IsValid(value);
  }
  static const Status Status_MIN =
    TransmitterResponse_Status_Status_MIN;
  static const Status Status_MAX =
    TransmitterResponse_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    TransmitterResponse_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return TransmitterResponse_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return TransmitterResponse_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return TransmitterResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "TRANSMITTER_RESPONSE"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional string resID = 2;
  inline bool has_resid() const;
  inline void clear_resid();
  static const int kResIDFieldNumber = 2;
  inline const ::std::string& resid() const;
  inline void set_resid(const ::std::string& value);
  inline void set_resid(const char* value);
  inline void set_resid(const char* value, size_t size);
  inline ::std::string* mutable_resid();
  inline ::std::string* release_resid();
  inline void set_allocated_resid(::std::string* resid);

  // optional int32 appID = 3;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppIDFieldNumber = 3;
  inline ::google::protobuf::int32 appid() const;
  inline void set_appid(::google::protobuf::int32 value);

  // optional .falcon_transmitter_msg.TransmitterResponse.Status status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::falcon_transmitter_msg::TransmitterResponse_Status status() const;
  inline void set_status(::falcon_transmitter_msg::TransmitterResponse_Status value);

  // optional .falcon_transmitter_msg.TransmitterRequest.Property property = 5;
  inline bool has_property() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 5;
  inline ::falcon_transmitter_msg::TransmitterRequest_Property property() const;
  inline void set_property(::falcon_transmitter_msg::TransmitterRequest_Property value);

  // optional float value = 6;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 6;
  inline float value() const;
  inline void set_value(float value);

  // @@protoc_insertion_point(class_scope:falcon_transmitter_msg.TransmitterResponse)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_resid();
  inline void clear_has_resid();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_property();
  inline void clear_has_property();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* resid_;
  ::google::protobuf::int32 appid_;
  int status_;
  int property_;
  float value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_FalconTransmitterMessages_2eproto();
  friend void protobuf_AssignDesc_FalconTransmitterMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconTransmitterMessages_2eproto();

  void InitAsDefaultInstance();
  static TransmitterResponse* default_instance_;
};
// -------------------------------------------------------------------

class UniqueTXIDRequest : public ::google::protobuf::Message {
 public:
  UniqueTXIDRequest();
  virtual ~UniqueTXIDRequest();

  UniqueTXIDRequest(const UniqueTXIDRequest& from);

  inline UniqueTXIDRequest& operator=(const UniqueTXIDRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UniqueTXIDRequest& default_instance();

  void Swap(UniqueTXIDRequest* other);

  // implements Message ----------------------------------------------

  UniqueTXIDRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UniqueTXIDRequest& from);
  void MergeFrom(const UniqueTXIDRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef UniqueTXIDRequest_Action Action;
  static const Action SET = UniqueTXIDRequest_Action_SET;
  static const Action GET = UniqueTXIDRequest_Action_GET;
  static inline bool Action_IsValid(int value) {
    return UniqueTXIDRequest_Action_IsValid(value);
  }
  static const Action Action_MIN =
    UniqueTXIDRequest_Action_Action_MIN;
  static const Action Action_MAX =
    UniqueTXIDRequest_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    UniqueTXIDRequest_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return UniqueTXIDRequest_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return UniqueTXIDRequest_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return UniqueTXIDRequest_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "UNIQUE_TXID_REQUEST"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional string resID = 2;
  inline bool has_resid() const;
  inline void clear_resid();
  static const int kResIDFieldNumber = 2;
  inline const ::std::string& resid() const;
  inline void set_resid(const ::std::string& value);
  inline void set_resid(const char* value);
  inline void set_resid(const char* value, size_t size);
  inline ::std::string* mutable_resid();
  inline ::std::string* release_resid();
  inline void set_allocated_resid(::std::string* resid);

  // optional .falcon_transmitter_msg.UniqueTXIDRequest.Action action = 3 [default = GET];
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline ::falcon_transmitter_msg::UniqueTXIDRequest_Action action() const;
  inline void set_action(::falcon_transmitter_msg::UniqueTXIDRequest_Action value);

  // optional string value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:falcon_transmitter_msg.UniqueTXIDRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_resid();
  inline void clear_has_resid();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* resid_;
  ::std::string* value_;
  int action_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_FalconTransmitterMessages_2eproto();
  friend void protobuf_AssignDesc_FalconTransmitterMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconTransmitterMessages_2eproto();

  void InitAsDefaultInstance();
  static UniqueTXIDRequest* default_instance_;
};
// -------------------------------------------------------------------

class UniqueTXIDResponse : public ::google::protobuf::Message {
 public:
  UniqueTXIDResponse();
  virtual ~UniqueTXIDResponse();

  UniqueTXIDResponse(const UniqueTXIDResponse& from);

  inline UniqueTXIDResponse& operator=(const UniqueTXIDResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UniqueTXIDResponse& default_instance();

  void Swap(UniqueTXIDResponse* other);

  // implements Message ----------------------------------------------

  UniqueTXIDResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UniqueTXIDResponse& from);
  void MergeFrom(const UniqueTXIDResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "UNIQUE_TXID_RESPONSE"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional string resID = 2;
  inline bool has_resid() const;
  inline void clear_resid();
  static const int kResIDFieldNumber = 2;
  inline const ::std::string& resid() const;
  inline void set_resid(const ::std::string& value);
  inline void set_resid(const char* value);
  inline void set_resid(const char* value, size_t size);
  inline ::std::string* mutable_resid();
  inline ::std::string* release_resid();
  inline void set_allocated_resid(::std::string* resid);

  // optional string value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:falcon_transmitter_msg.UniqueTXIDResponse)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_resid();
  inline void clear_has_resid();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* resid_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FalconTransmitterMessages_2eproto();
  friend void protobuf_AssignDesc_FalconTransmitterMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconTransmitterMessages_2eproto();

  void InitAsDefaultInstance();
  static UniqueTXIDResponse* default_instance_;
};
// -------------------------------------------------------------------

class TransmitterInfoRequest : public ::google::protobuf::Message {
 public:
  TransmitterInfoRequest();
  virtual ~TransmitterInfoRequest();

  TransmitterInfoRequest(const TransmitterInfoRequest& from);

  inline TransmitterInfoRequest& operator=(const TransmitterInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransmitterInfoRequest& default_instance();

  void Swap(TransmitterInfoRequest* other);

  // implements Message ----------------------------------------------

  TransmitterInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransmitterInfoRequest& from);
  void MergeFrom(const TransmitterInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "TRANSMITTER_INFO_REQUEST"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // @@protoc_insertion_point(class_scope:falcon_transmitter_msg.TransmitterInfoRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FalconTransmitterMessages_2eproto();
  friend void protobuf_AssignDesc_FalconTransmitterMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconTransmitterMessages_2eproto();

  void InitAsDefaultInstance();
  static TransmitterInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class TransmitterInfoResponse : public ::google::protobuf::Message {
 public:
  TransmitterInfoResponse();
  virtual ~TransmitterInfoResponse();

  TransmitterInfoResponse(const TransmitterInfoResponse& from);

  inline TransmitterInfoResponse& operator=(const TransmitterInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransmitterInfoResponse& default_instance();

  void Swap(TransmitterInfoResponse* other);

  // implements Message ----------------------------------------------

  TransmitterInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransmitterInfoResponse& from);
  void MergeFrom(const TransmitterInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "TRANSMITTER_INFO_RESPONSE"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional string resID = 2;
  inline bool has_resid() const;
  inline void clear_resid();
  static const int kResIDFieldNumber = 2;
  inline const ::std::string& resid() const;
  inline void set_resid(const ::std::string& value);
  inline void set_resid(const char* value);
  inline void set_resid(const char* value, size_t size);
  inline ::std::string* mutable_resid();
  inline ::std::string* release_resid();
  inline void set_allocated_resid(::std::string* resid);

  // optional string ntp = 3;
  inline bool has_ntp() const;
  inline void clear_ntp();
  static const int kNtpFieldNumber = 3;
  inline const ::std::string& ntp() const;
  inline void set_ntp(const ::std::string& value);
  inline void set_ntp(const char* value);
  inline void set_ntp(const char* value, size_t size);
  inline ::std::string* mutable_ntp();
  inline ::std::string* release_ntp();
  inline void set_allocated_ntp(::std::string* ntp);

  // optional string ref = 4;
  inline bool has_ref() const;
  inline void clear_ref();
  static const int kRefFieldNumber = 4;
  inline const ::std::string& ref() const;
  inline void set_ref(const ::std::string& value);
  inline void set_ref(const char* value);
  inline void set_ref(const char* value, size_t size);
  inline ::std::string* mutable_ref();
  inline ::std::string* release_ref();
  inline void set_allocated_ref(::std::string* ref);

  // optional string pps = 5;
  inline bool has_pps() const;
  inline void clear_pps();
  static const int kPpsFieldNumber = 5;
  inline const ::std::string& pps() const;
  inline void set_pps(const ::std::string& value);
  inline void set_pps(const char* value);
  inline void set_pps(const char* value, size_t size);
  inline ::std::string* mutable_pps();
  inline ::std::string* release_pps();
  inline void set_allocated_pps(::std::string* pps);

  // optional string comms = 6;
  inline bool has_comms() const;
  inline void clear_comms();
  static const int kCommsFieldNumber = 6;
  inline const ::std::string& comms() const;
  inline void set_comms(const ::std::string& value);
  inline void set_comms(const char* value);
  inline void set_comms(const char* value, size_t size);
  inline ::std::string* mutable_comms();
  inline ::std::string* release_comms();
  inline void set_allocated_comms(::std::string* comms);

  // optional string ping = 7;
  inline bool has_ping() const;
  inline void clear_ping();
  static const int kPingFieldNumber = 7;
  inline const ::std::string& ping() const;
  inline void set_ping(const ::std::string& value);
  inline void set_ping(const char* value);
  inline void set_ping(const char* value, size_t size);
  inline ::std::string* mutable_ping();
  inline ::std::string* release_ping();
  inline void set_allocated_ping(::std::string* ping);

  // optional string raid = 8;
  inline bool has_raid() const;
  inline void clear_raid();
  static const int kRaidFieldNumber = 8;
  inline const ::std::string& raid() const;
  inline void set_raid(const ::std::string& value);
  inline void set_raid(const char* value);
  inline void set_raid(const char* value, size_t size);
  inline ::std::string* mutable_raid();
  inline ::std::string* release_raid();
  inline void set_allocated_raid(::std::string* raid);

  // @@protoc_insertion_point(class_scope:falcon_transmitter_msg.TransmitterInfoResponse)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_resid();
  inline void clear_has_resid();
  inline void set_has_ntp();
  inline void clear_has_ntp();
  inline void set_has_ref();
  inline void clear_has_ref();
  inline void set_has_pps();
  inline void clear_has_pps();
  inline void set_has_comms();
  inline void clear_has_comms();
  inline void set_has_ping();
  inline void clear_has_ping();
  inline void set_has_raid();
  inline void clear_has_raid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* resid_;
  ::std::string* ntp_;
  ::std::string* ref_;
  ::std::string* pps_;
  ::std::string* comms_;
  ::std::string* ping_;
  ::std::string* raid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_FalconTransmitterMessages_2eproto();
  friend void protobuf_AssignDesc_FalconTransmitterMessages_2eproto();
  friend void protobuf_ShutdownFile_FalconTransmitterMessages_2eproto();

  void InitAsDefaultInstance();
  static TransmitterInfoResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// TransmitterRequest

// optional string msgName = 1 [default = "TRANSMITTER_REQUEST"];
inline bool TransmitterRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransmitterRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransmitterRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransmitterRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& TransmitterRequest::msgname() const {
  return *msgname_;
}
inline void TransmitterRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void TransmitterRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void TransmitterRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransmitterRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* TransmitterRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void TransmitterRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional string resID = 2;
inline bool TransmitterRequest::has_resid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransmitterRequest::set_has_resid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransmitterRequest::clear_has_resid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransmitterRequest::clear_resid() {
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    resid_->clear();
  }
  clear_has_resid();
}
inline const ::std::string& TransmitterRequest::resid() const {
  return *resid_;
}
inline void TransmitterRequest::set_resid(const ::std::string& value) {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  resid_->assign(value);
}
inline void TransmitterRequest::set_resid(const char* value) {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  resid_->assign(value);
}
inline void TransmitterRequest::set_resid(const char* value, size_t size) {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  resid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransmitterRequest::mutable_resid() {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  return resid_;
}
inline ::std::string* TransmitterRequest::release_resid() {
  clear_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resid_;
    resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransmitterRequest::set_allocated_resid(::std::string* resid) {
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (resid) {
    set_has_resid();
    resid_ = resid;
  } else {
    clear_has_resid();
    resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 appID = 3;
inline bool TransmitterRequest::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransmitterRequest::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransmitterRequest::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransmitterRequest::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
inline ::google::protobuf::int32 TransmitterRequest::appid() const {
  return appid_;
}
inline void TransmitterRequest::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
}

// optional .falcon_transmitter_msg.TransmitterRequest.Action action = 4;
inline bool TransmitterRequest::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransmitterRequest::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransmitterRequest::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransmitterRequest::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::falcon_transmitter_msg::TransmitterRequest_Action TransmitterRequest::action() const {
  return static_cast< ::falcon_transmitter_msg::TransmitterRequest_Action >(action_);
}
inline void TransmitterRequest::set_action(::falcon_transmitter_msg::TransmitterRequest_Action value) {
  assert(::falcon_transmitter_msg::TransmitterRequest_Action_IsValid(value));
  set_has_action();
  action_ = value;
}

// optional .falcon_transmitter_msg.TransmitterRequest.Property property = 5;
inline bool TransmitterRequest::has_property() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransmitterRequest::set_has_property() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransmitterRequest::clear_has_property() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransmitterRequest::clear_property() {
  property_ = 0;
  clear_has_property();
}
inline ::falcon_transmitter_msg::TransmitterRequest_Property TransmitterRequest::property() const {
  return static_cast< ::falcon_transmitter_msg::TransmitterRequest_Property >(property_);
}
inline void TransmitterRequest::set_property(::falcon_transmitter_msg::TransmitterRequest_Property value) {
  assert(::falcon_transmitter_msg::TransmitterRequest_Property_IsValid(value));
  set_has_property();
  property_ = value;
}

// optional float value = 6;
inline bool TransmitterRequest::has_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransmitterRequest::set_has_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransmitterRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransmitterRequest::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float TransmitterRequest::value() const {
  return value_;
}
inline void TransmitterRequest::set_value(float value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// TransmitterResponse

// optional string msgName = 1 [default = "TRANSMITTER_RESPONSE"];
inline bool TransmitterResponse::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransmitterResponse::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransmitterResponse::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransmitterResponse::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& TransmitterResponse::msgname() const {
  return *msgname_;
}
inline void TransmitterResponse::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void TransmitterResponse::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void TransmitterResponse::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransmitterResponse::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* TransmitterResponse::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void TransmitterResponse::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional string resID = 2;
inline bool TransmitterResponse::has_resid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransmitterResponse::set_has_resid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransmitterResponse::clear_has_resid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransmitterResponse::clear_resid() {
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    resid_->clear();
  }
  clear_has_resid();
}
inline const ::std::string& TransmitterResponse::resid() const {
  return *resid_;
}
inline void TransmitterResponse::set_resid(const ::std::string& value) {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  resid_->assign(value);
}
inline void TransmitterResponse::set_resid(const char* value) {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  resid_->assign(value);
}
inline void TransmitterResponse::set_resid(const char* value, size_t size) {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  resid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransmitterResponse::mutable_resid() {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  return resid_;
}
inline ::std::string* TransmitterResponse::release_resid() {
  clear_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resid_;
    resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransmitterResponse::set_allocated_resid(::std::string* resid) {
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (resid) {
    set_has_resid();
    resid_ = resid;
  } else {
    clear_has_resid();
    resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 appID = 3;
inline bool TransmitterResponse::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransmitterResponse::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransmitterResponse::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransmitterResponse::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
inline ::google::protobuf::int32 TransmitterResponse::appid() const {
  return appid_;
}
inline void TransmitterResponse::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
}

// optional .falcon_transmitter_msg.TransmitterResponse.Status status = 4;
inline bool TransmitterResponse::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransmitterResponse::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransmitterResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransmitterResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::falcon_transmitter_msg::TransmitterResponse_Status TransmitterResponse::status() const {
  return static_cast< ::falcon_transmitter_msg::TransmitterResponse_Status >(status_);
}
inline void TransmitterResponse::set_status(::falcon_transmitter_msg::TransmitterResponse_Status value) {
  assert(::falcon_transmitter_msg::TransmitterResponse_Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional .falcon_transmitter_msg.TransmitterRequest.Property property = 5;
inline bool TransmitterResponse::has_property() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransmitterResponse::set_has_property() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransmitterResponse::clear_has_property() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransmitterResponse::clear_property() {
  property_ = 0;
  clear_has_property();
}
inline ::falcon_transmitter_msg::TransmitterRequest_Property TransmitterResponse::property() const {
  return static_cast< ::falcon_transmitter_msg::TransmitterRequest_Property >(property_);
}
inline void TransmitterResponse::set_property(::falcon_transmitter_msg::TransmitterRequest_Property value) {
  assert(::falcon_transmitter_msg::TransmitterRequest_Property_IsValid(value));
  set_has_property();
  property_ = value;
}

// optional float value = 6;
inline bool TransmitterResponse::has_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransmitterResponse::set_has_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransmitterResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransmitterResponse::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float TransmitterResponse::value() const {
  return value_;
}
inline void TransmitterResponse::set_value(float value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// UniqueTXIDRequest

// optional string msgName = 1 [default = "UNIQUE_TXID_REQUEST"];
inline bool UniqueTXIDRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UniqueTXIDRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UniqueTXIDRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UniqueTXIDRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& UniqueTXIDRequest::msgname() const {
  return *msgname_;
}
inline void UniqueTXIDRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void UniqueTXIDRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void UniqueTXIDRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UniqueTXIDRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* UniqueTXIDRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void UniqueTXIDRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional string resID = 2;
inline bool UniqueTXIDRequest::has_resid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UniqueTXIDRequest::set_has_resid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UniqueTXIDRequest::clear_has_resid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UniqueTXIDRequest::clear_resid() {
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    resid_->clear();
  }
  clear_has_resid();
}
inline const ::std::string& UniqueTXIDRequest::resid() const {
  return *resid_;
}
inline void UniqueTXIDRequest::set_resid(const ::std::string& value) {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  resid_->assign(value);
}
inline void UniqueTXIDRequest::set_resid(const char* value) {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  resid_->assign(value);
}
inline void UniqueTXIDRequest::set_resid(const char* value, size_t size) {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  resid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UniqueTXIDRequest::mutable_resid() {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  return resid_;
}
inline ::std::string* UniqueTXIDRequest::release_resid() {
  clear_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resid_;
    resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UniqueTXIDRequest::set_allocated_resid(::std::string* resid) {
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (resid) {
    set_has_resid();
    resid_ = resid;
  } else {
    clear_has_resid();
    resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .falcon_transmitter_msg.UniqueTXIDRequest.Action action = 3 [default = GET];
inline bool UniqueTXIDRequest::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UniqueTXIDRequest::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UniqueTXIDRequest::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UniqueTXIDRequest::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::falcon_transmitter_msg::UniqueTXIDRequest_Action UniqueTXIDRequest::action() const {
  return static_cast< ::falcon_transmitter_msg::UniqueTXIDRequest_Action >(action_);
}
inline void UniqueTXIDRequest::set_action(::falcon_transmitter_msg::UniqueTXIDRequest_Action value) {
  assert(::falcon_transmitter_msg::UniqueTXIDRequest_Action_IsValid(value));
  set_has_action();
  action_ = value;
}

// optional string value = 4;
inline bool UniqueTXIDRequest::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UniqueTXIDRequest::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UniqueTXIDRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UniqueTXIDRequest::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& UniqueTXIDRequest::value() const {
  return *value_;
}
inline void UniqueTXIDRequest::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void UniqueTXIDRequest::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void UniqueTXIDRequest::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UniqueTXIDRequest::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* UniqueTXIDRequest::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UniqueTXIDRequest::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UniqueTXIDResponse

// optional string msgName = 1 [default = "UNIQUE_TXID_RESPONSE"];
inline bool UniqueTXIDResponse::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UniqueTXIDResponse::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UniqueTXIDResponse::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UniqueTXIDResponse::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& UniqueTXIDResponse::msgname() const {
  return *msgname_;
}
inline void UniqueTXIDResponse::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void UniqueTXIDResponse::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void UniqueTXIDResponse::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UniqueTXIDResponse::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* UniqueTXIDResponse::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void UniqueTXIDResponse::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional string resID = 2;
inline bool UniqueTXIDResponse::has_resid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UniqueTXIDResponse::set_has_resid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UniqueTXIDResponse::clear_has_resid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UniqueTXIDResponse::clear_resid() {
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    resid_->clear();
  }
  clear_has_resid();
}
inline const ::std::string& UniqueTXIDResponse::resid() const {
  return *resid_;
}
inline void UniqueTXIDResponse::set_resid(const ::std::string& value) {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  resid_->assign(value);
}
inline void UniqueTXIDResponse::set_resid(const char* value) {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  resid_->assign(value);
}
inline void UniqueTXIDResponse::set_resid(const char* value, size_t size) {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  resid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UniqueTXIDResponse::mutable_resid() {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  return resid_;
}
inline ::std::string* UniqueTXIDResponse::release_resid() {
  clear_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resid_;
    resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UniqueTXIDResponse::set_allocated_resid(::std::string* resid) {
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (resid) {
    set_has_resid();
    resid_ = resid;
  } else {
    clear_has_resid();
    resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string value = 3;
inline bool UniqueTXIDResponse::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UniqueTXIDResponse::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UniqueTXIDResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UniqueTXIDResponse::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& UniqueTXIDResponse::value() const {
  return *value_;
}
inline void UniqueTXIDResponse::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void UniqueTXIDResponse::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void UniqueTXIDResponse::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UniqueTXIDResponse::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* UniqueTXIDResponse::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UniqueTXIDResponse::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TransmitterInfoRequest

// optional string msgName = 1 [default = "TRANSMITTER_INFO_REQUEST"];
inline bool TransmitterInfoRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransmitterInfoRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransmitterInfoRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransmitterInfoRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& TransmitterInfoRequest::msgname() const {
  return *msgname_;
}
inline void TransmitterInfoRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void TransmitterInfoRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void TransmitterInfoRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransmitterInfoRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* TransmitterInfoRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void TransmitterInfoRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// -------------------------------------------------------------------

// TransmitterInfoResponse

// optional string msgName = 1 [default = "TRANSMITTER_INFO_RESPONSE"];
inline bool TransmitterInfoResponse::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransmitterInfoResponse::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransmitterInfoResponse::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransmitterInfoResponse::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& TransmitterInfoResponse::msgname() const {
  return *msgname_;
}
inline void TransmitterInfoResponse::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void TransmitterInfoResponse::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void TransmitterInfoResponse::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransmitterInfoResponse::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* TransmitterInfoResponse::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void TransmitterInfoResponse::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional string resID = 2;
inline bool TransmitterInfoResponse::has_resid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransmitterInfoResponse::set_has_resid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransmitterInfoResponse::clear_has_resid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransmitterInfoResponse::clear_resid() {
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    resid_->clear();
  }
  clear_has_resid();
}
inline const ::std::string& TransmitterInfoResponse::resid() const {
  return *resid_;
}
inline void TransmitterInfoResponse::set_resid(const ::std::string& value) {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  resid_->assign(value);
}
inline void TransmitterInfoResponse::set_resid(const char* value) {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  resid_->assign(value);
}
inline void TransmitterInfoResponse::set_resid(const char* value, size_t size) {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  resid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransmitterInfoResponse::mutable_resid() {
  set_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    resid_ = new ::std::string;
  }
  return resid_;
}
inline ::std::string* TransmitterInfoResponse::release_resid() {
  clear_has_resid();
  if (resid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resid_;
    resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransmitterInfoResponse::set_allocated_resid(::std::string* resid) {
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (resid) {
    set_has_resid();
    resid_ = resid;
  } else {
    clear_has_resid();
    resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ntp = 3;
inline bool TransmitterInfoResponse::has_ntp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransmitterInfoResponse::set_has_ntp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransmitterInfoResponse::clear_has_ntp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransmitterInfoResponse::clear_ntp() {
  if (ntp_ != &::google::protobuf::internal::kEmptyString) {
    ntp_->clear();
  }
  clear_has_ntp();
}
inline const ::std::string& TransmitterInfoResponse::ntp() const {
  return *ntp_;
}
inline void TransmitterInfoResponse::set_ntp(const ::std::string& value) {
  set_has_ntp();
  if (ntp_ == &::google::protobuf::internal::kEmptyString) {
    ntp_ = new ::std::string;
  }
  ntp_->assign(value);
}
inline void TransmitterInfoResponse::set_ntp(const char* value) {
  set_has_ntp();
  if (ntp_ == &::google::protobuf::internal::kEmptyString) {
    ntp_ = new ::std::string;
  }
  ntp_->assign(value);
}
inline void TransmitterInfoResponse::set_ntp(const char* value, size_t size) {
  set_has_ntp();
  if (ntp_ == &::google::protobuf::internal::kEmptyString) {
    ntp_ = new ::std::string;
  }
  ntp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransmitterInfoResponse::mutable_ntp() {
  set_has_ntp();
  if (ntp_ == &::google::protobuf::internal::kEmptyString) {
    ntp_ = new ::std::string;
  }
  return ntp_;
}
inline ::std::string* TransmitterInfoResponse::release_ntp() {
  clear_has_ntp();
  if (ntp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ntp_;
    ntp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransmitterInfoResponse::set_allocated_ntp(::std::string* ntp) {
  if (ntp_ != &::google::protobuf::internal::kEmptyString) {
    delete ntp_;
  }
  if (ntp) {
    set_has_ntp();
    ntp_ = ntp;
  } else {
    clear_has_ntp();
    ntp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ref = 4;
inline bool TransmitterInfoResponse::has_ref() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransmitterInfoResponse::set_has_ref() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransmitterInfoResponse::clear_has_ref() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransmitterInfoResponse::clear_ref() {
  if (ref_ != &::google::protobuf::internal::kEmptyString) {
    ref_->clear();
  }
  clear_has_ref();
}
inline const ::std::string& TransmitterInfoResponse::ref() const {
  return *ref_;
}
inline void TransmitterInfoResponse::set_ref(const ::std::string& value) {
  set_has_ref();
  if (ref_ == &::google::protobuf::internal::kEmptyString) {
    ref_ = new ::std::string;
  }
  ref_->assign(value);
}
inline void TransmitterInfoResponse::set_ref(const char* value) {
  set_has_ref();
  if (ref_ == &::google::protobuf::internal::kEmptyString) {
    ref_ = new ::std::string;
  }
  ref_->assign(value);
}
inline void TransmitterInfoResponse::set_ref(const char* value, size_t size) {
  set_has_ref();
  if (ref_ == &::google::protobuf::internal::kEmptyString) {
    ref_ = new ::std::string;
  }
  ref_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransmitterInfoResponse::mutable_ref() {
  set_has_ref();
  if (ref_ == &::google::protobuf::internal::kEmptyString) {
    ref_ = new ::std::string;
  }
  return ref_;
}
inline ::std::string* TransmitterInfoResponse::release_ref() {
  clear_has_ref();
  if (ref_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ref_;
    ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransmitterInfoResponse::set_allocated_ref(::std::string* ref) {
  if (ref_ != &::google::protobuf::internal::kEmptyString) {
    delete ref_;
  }
  if (ref) {
    set_has_ref();
    ref_ = ref;
  } else {
    clear_has_ref();
    ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pps = 5;
inline bool TransmitterInfoResponse::has_pps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransmitterInfoResponse::set_has_pps() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransmitterInfoResponse::clear_has_pps() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransmitterInfoResponse::clear_pps() {
  if (pps_ != &::google::protobuf::internal::kEmptyString) {
    pps_->clear();
  }
  clear_has_pps();
}
inline const ::std::string& TransmitterInfoResponse::pps() const {
  return *pps_;
}
inline void TransmitterInfoResponse::set_pps(const ::std::string& value) {
  set_has_pps();
  if (pps_ == &::google::protobuf::internal::kEmptyString) {
    pps_ = new ::std::string;
  }
  pps_->assign(value);
}
inline void TransmitterInfoResponse::set_pps(const char* value) {
  set_has_pps();
  if (pps_ == &::google::protobuf::internal::kEmptyString) {
    pps_ = new ::std::string;
  }
  pps_->assign(value);
}
inline void TransmitterInfoResponse::set_pps(const char* value, size_t size) {
  set_has_pps();
  if (pps_ == &::google::protobuf::internal::kEmptyString) {
    pps_ = new ::std::string;
  }
  pps_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransmitterInfoResponse::mutable_pps() {
  set_has_pps();
  if (pps_ == &::google::protobuf::internal::kEmptyString) {
    pps_ = new ::std::string;
  }
  return pps_;
}
inline ::std::string* TransmitterInfoResponse::release_pps() {
  clear_has_pps();
  if (pps_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pps_;
    pps_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransmitterInfoResponse::set_allocated_pps(::std::string* pps) {
  if (pps_ != &::google::protobuf::internal::kEmptyString) {
    delete pps_;
  }
  if (pps) {
    set_has_pps();
    pps_ = pps;
  } else {
    clear_has_pps();
    pps_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string comms = 6;
inline bool TransmitterInfoResponse::has_comms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransmitterInfoResponse::set_has_comms() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransmitterInfoResponse::clear_has_comms() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransmitterInfoResponse::clear_comms() {
  if (comms_ != &::google::protobuf::internal::kEmptyString) {
    comms_->clear();
  }
  clear_has_comms();
}
inline const ::std::string& TransmitterInfoResponse::comms() const {
  return *comms_;
}
inline void TransmitterInfoResponse::set_comms(const ::std::string& value) {
  set_has_comms();
  if (comms_ == &::google::protobuf::internal::kEmptyString) {
    comms_ = new ::std::string;
  }
  comms_->assign(value);
}
inline void TransmitterInfoResponse::set_comms(const char* value) {
  set_has_comms();
  if (comms_ == &::google::protobuf::internal::kEmptyString) {
    comms_ = new ::std::string;
  }
  comms_->assign(value);
}
inline void TransmitterInfoResponse::set_comms(const char* value, size_t size) {
  set_has_comms();
  if (comms_ == &::google::protobuf::internal::kEmptyString) {
    comms_ = new ::std::string;
  }
  comms_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransmitterInfoResponse::mutable_comms() {
  set_has_comms();
  if (comms_ == &::google::protobuf::internal::kEmptyString) {
    comms_ = new ::std::string;
  }
  return comms_;
}
inline ::std::string* TransmitterInfoResponse::release_comms() {
  clear_has_comms();
  if (comms_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comms_;
    comms_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransmitterInfoResponse::set_allocated_comms(::std::string* comms) {
  if (comms_ != &::google::protobuf::internal::kEmptyString) {
    delete comms_;
  }
  if (comms) {
    set_has_comms();
    comms_ = comms;
  } else {
    clear_has_comms();
    comms_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ping = 7;
inline bool TransmitterInfoResponse::has_ping() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TransmitterInfoResponse::set_has_ping() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TransmitterInfoResponse::clear_has_ping() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TransmitterInfoResponse::clear_ping() {
  if (ping_ != &::google::protobuf::internal::kEmptyString) {
    ping_->clear();
  }
  clear_has_ping();
}
inline const ::std::string& TransmitterInfoResponse::ping() const {
  return *ping_;
}
inline void TransmitterInfoResponse::set_ping(const ::std::string& value) {
  set_has_ping();
  if (ping_ == &::google::protobuf::internal::kEmptyString) {
    ping_ = new ::std::string;
  }
  ping_->assign(value);
}
inline void TransmitterInfoResponse::set_ping(const char* value) {
  set_has_ping();
  if (ping_ == &::google::protobuf::internal::kEmptyString) {
    ping_ = new ::std::string;
  }
  ping_->assign(value);
}
inline void TransmitterInfoResponse::set_ping(const char* value, size_t size) {
  set_has_ping();
  if (ping_ == &::google::protobuf::internal::kEmptyString) {
    ping_ = new ::std::string;
  }
  ping_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransmitterInfoResponse::mutable_ping() {
  set_has_ping();
  if (ping_ == &::google::protobuf::internal::kEmptyString) {
    ping_ = new ::std::string;
  }
  return ping_;
}
inline ::std::string* TransmitterInfoResponse::release_ping() {
  clear_has_ping();
  if (ping_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ping_;
    ping_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransmitterInfoResponse::set_allocated_ping(::std::string* ping) {
  if (ping_ != &::google::protobuf::internal::kEmptyString) {
    delete ping_;
  }
  if (ping) {
    set_has_ping();
    ping_ = ping;
  } else {
    clear_has_ping();
    ping_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string raid = 8;
inline bool TransmitterInfoResponse::has_raid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TransmitterInfoResponse::set_has_raid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TransmitterInfoResponse::clear_has_raid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TransmitterInfoResponse::clear_raid() {
  if (raid_ != &::google::protobuf::internal::kEmptyString) {
    raid_->clear();
  }
  clear_has_raid();
}
inline const ::std::string& TransmitterInfoResponse::raid() const {
  return *raid_;
}
inline void TransmitterInfoResponse::set_raid(const ::std::string& value) {
  set_has_raid();
  if (raid_ == &::google::protobuf::internal::kEmptyString) {
    raid_ = new ::std::string;
  }
  raid_->assign(value);
}
inline void TransmitterInfoResponse::set_raid(const char* value) {
  set_has_raid();
  if (raid_ == &::google::protobuf::internal::kEmptyString) {
    raid_ = new ::std::string;
  }
  raid_->assign(value);
}
inline void TransmitterInfoResponse::set_raid(const char* value, size_t size) {
  set_has_raid();
  if (raid_ == &::google::protobuf::internal::kEmptyString) {
    raid_ = new ::std::string;
  }
  raid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransmitterInfoResponse::mutable_raid() {
  set_has_raid();
  if (raid_ == &::google::protobuf::internal::kEmptyString) {
    raid_ = new ::std::string;
  }
  return raid_;
}
inline ::std::string* TransmitterInfoResponse::release_raid() {
  clear_has_raid();
  if (raid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raid_;
    raid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransmitterInfoResponse::set_allocated_raid(::std::string* raid) {
  if (raid_ != &::google::protobuf::internal::kEmptyString) {
    delete raid_;
  }
  if (raid) {
    set_has_raid();
    raid_ = raid;
  } else {
    clear_has_raid();
    raid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace falcon_transmitter_msg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::falcon_transmitter_msg::TransmitterRequest_Action>() {
  return ::falcon_transmitter_msg::TransmitterRequest_Action_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::falcon_transmitter_msg::TransmitterRequest_Property>() {
  return ::falcon_transmitter_msg::TransmitterRequest_Property_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::falcon_transmitter_msg::TransmitterResponse_Status>() {
  return ::falcon_transmitter_msg::TransmitterResponse_Status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::falcon_transmitter_msg::UniqueTXIDRequest_Action>() {
  return ::falcon_transmitter_msg::UniqueTXIDRequest_Action_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FalconTransmitterMessages_2eproto__INCLUDED
