// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProMachinaMessages.proto

#ifndef PROTOBUF_ProMachinaMessages_2eproto__INCLUDED
#define PROTOBUF_ProMachinaMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fv {
namespace tb {
namespace protos {
namespace PMProtos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProMachinaMessages_2eproto();
void protobuf_AssignDesc_ProMachinaMessages_2eproto();
void protobuf_ShutdownFile_ProMachinaMessages_2eproto();

class PMFrame;

// ===================================================================

class PMFrame : public ::google::protobuf::Message {
 public:
  PMFrame();
  virtual ~PMFrame();

  PMFrame(const PMFrame& from);

  inline PMFrame& operator=(const PMFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PMFrame& default_instance();

  void Swap(PMFrame* other);

  // implements Message ----------------------------------------------

  PMFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PMFrame& from);
  void MergeFrom(const PMFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "PMFRAME"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 toAddress = 2;
  inline bool has_toaddress() const;
  inline void clear_toaddress();
  static const int kToAddressFieldNumber = 2;
  inline ::google::protobuf::int32 toaddress() const;
  inline void set_toaddress(::google::protobuf::int32 value);

  // optional int32 fromAddress = 3;
  inline bool has_fromaddress() const;
  inline void clear_fromaddress();
  static const int kFromAddressFieldNumber = 3;
  inline ::google::protobuf::int32 fromaddress() const;
  inline void set_fromaddress(::google::protobuf::int32 value);

  // optional int32 countValue = 4;
  inline bool has_countvalue() const;
  inline void clear_countvalue();
  static const int kCountValueFieldNumber = 4;
  inline ::google::protobuf::int32 countvalue() const;
  inline void set_countvalue(::google::protobuf::int32 value);

  // optional string frameFormatID = 5;
  inline bool has_frameformatid() const;
  inline void clear_frameformatid();
  static const int kFrameFormatIDFieldNumber = 5;
  inline const ::std::string& frameformatid() const;
  inline void set_frameformatid(const ::std::string& value);
  inline void set_frameformatid(const char* value);
  inline void set_frameformatid(const char* value, size_t size);
  inline ::std::string* mutable_frameformatid();
  inline ::std::string* release_frameformatid();
  inline void set_allocated_frameformatid(::std::string* frameformatid);

  // optional string trackID = 6;
  inline bool has_trackid() const;
  inline void clear_trackid();
  static const int kTrackIDFieldNumber = 6;
  inline const ::std::string& trackid() const;
  inline void set_trackid(const ::std::string& value);
  inline void set_trackid(const char* value);
  inline void set_trackid(const char* value, size_t size);
  inline ::std::string* mutable_trackid();
  inline ::std::string* release_trackid();
  inline void set_allocated_trackid(::std::string* trackid);

  // optional string trackType = 7;
  inline bool has_tracktype() const;
  inline void clear_tracktype();
  static const int kTrackTypeFieldNumber = 7;
  inline const ::std::string& tracktype() const;
  inline void set_tracktype(const ::std::string& value);
  inline void set_tracktype(const char* value);
  inline void set_tracktype(const char* value, size_t size);
  inline ::std::string* mutable_tracktype();
  inline ::std::string* release_tracktype();
  inline void set_allocated_tracktype(::std::string* tracktype);

  // optional double posX = 8;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 8;
  inline double posx() const;
  inline void set_posx(double value);

  // optional double posY = 9;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 9;
  inline double posy() const;
  inline void set_posy(double value);

  // optional double posZ = 10;
  inline bool has_posz() const;
  inline void clear_posz();
  static const int kPosZFieldNumber = 10;
  inline double posz() const;
  inline void set_posz(double value);

  // optional double velX = 11;
  inline bool has_velx() const;
  inline void clear_velx();
  static const int kVelXFieldNumber = 11;
  inline double velx() const;
  inline void set_velx(double value);

  // optional double velY = 12;
  inline bool has_vely() const;
  inline void clear_vely();
  static const int kVelYFieldNumber = 12;
  inline double vely() const;
  inline void set_vely(double value);

  // optional double velZ = 13;
  inline bool has_velz() const;
  inline void clear_velz();
  static const int kVelZFieldNumber = 13;
  inline double velz() const;
  inline void set_velz(double value);

  // optional double wholeSeconds = 14;
  inline bool has_wholeseconds() const;
  inline void clear_wholeseconds();
  static const int kWholeSecondsFieldNumber = 14;
  inline double wholeseconds() const;
  inline void set_wholeseconds(double value);

  // optional double fractionalSeconds = 15;
  inline bool has_fractionalseconds() const;
  inline void clear_fractionalseconds();
  static const int kFractionalSecondsFieldNumber = 15;
  inline double fractionalseconds() const;
  inline void set_fractionalseconds(double value);

  // optional int32 frameLength = 16 [default = 0];
  inline bool has_framelength() const;
  inline void clear_framelength();
  static const int kFrameLengthFieldNumber = 16;
  inline ::google::protobuf::int32 framelength() const;
  inline void set_framelength(::google::protobuf::int32 value);

  // optional bytes frame = 17;
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 17;
  inline const ::std::string& frame() const;
  inline void set_frame(const ::std::string& value);
  inline void set_frame(const char* value);
  inline void set_frame(const void* value, size_t size);
  inline ::std::string* mutable_frame();
  inline ::std::string* release_frame();
  inline void set_allocated_frame(::std::string* frame);

  // optional string uuid = 18;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 18;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:fv.tb.protos.PMProtos.PMFrame)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_toaddress();
  inline void clear_has_toaddress();
  inline void set_has_fromaddress();
  inline void clear_has_fromaddress();
  inline void set_has_countvalue();
  inline void clear_has_countvalue();
  inline void set_has_frameformatid();
  inline void clear_has_frameformatid();
  inline void set_has_trackid();
  inline void clear_has_trackid();
  inline void set_has_tracktype();
  inline void clear_has_tracktype();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_posz();
  inline void clear_has_posz();
  inline void set_has_velx();
  inline void clear_has_velx();
  inline void set_has_vely();
  inline void clear_has_vely();
  inline void set_has_velz();
  inline void clear_has_velz();
  inline void set_has_wholeseconds();
  inline void clear_has_wholeseconds();
  inline void set_has_fractionalseconds();
  inline void clear_has_fractionalseconds();
  inline void set_has_framelength();
  inline void clear_has_framelength();
  inline void set_has_frame();
  inline void clear_has_frame();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int32 toaddress_;
  ::google::protobuf::int32 fromaddress_;
  ::std::string* frameformatid_;
  ::std::string* trackid_;
  ::std::string* tracktype_;
  double posx_;
  double posy_;
  double posz_;
  ::google::protobuf::int32 countvalue_;
  ::google::protobuf::int32 framelength_;
  double velx_;
  double vely_;
  double velz_;
  double wholeseconds_;
  double fractionalseconds_;
  ::std::string* frame_;
  ::std::string* uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_ProMachinaMessages_2eproto();
  friend void protobuf_AssignDesc_ProMachinaMessages_2eproto();
  friend void protobuf_ShutdownFile_ProMachinaMessages_2eproto();

  void InitAsDefaultInstance();
  static PMFrame* default_instance_;
};
// ===================================================================


// ===================================================================

// PMFrame

// optional string msgName = 1 [default = "PMFRAME"];
inline bool PMFrame::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PMFrame::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PMFrame::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PMFrame::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& PMFrame::msgname() const {
  return *msgname_;
}
inline void PMFrame::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void PMFrame::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void PMFrame::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PMFrame::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* PMFrame::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void PMFrame::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 toAddress = 2;
inline bool PMFrame::has_toaddress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PMFrame::set_has_toaddress() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PMFrame::clear_has_toaddress() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PMFrame::clear_toaddress() {
  toaddress_ = 0;
  clear_has_toaddress();
}
inline ::google::protobuf::int32 PMFrame::toaddress() const {
  return toaddress_;
}
inline void PMFrame::set_toaddress(::google::protobuf::int32 value) {
  set_has_toaddress();
  toaddress_ = value;
}

// optional int32 fromAddress = 3;
inline bool PMFrame::has_fromaddress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PMFrame::set_has_fromaddress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PMFrame::clear_has_fromaddress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PMFrame::clear_fromaddress() {
  fromaddress_ = 0;
  clear_has_fromaddress();
}
inline ::google::protobuf::int32 PMFrame::fromaddress() const {
  return fromaddress_;
}
inline void PMFrame::set_fromaddress(::google::protobuf::int32 value) {
  set_has_fromaddress();
  fromaddress_ = value;
}

// optional int32 countValue = 4;
inline bool PMFrame::has_countvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PMFrame::set_has_countvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PMFrame::clear_has_countvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PMFrame::clear_countvalue() {
  countvalue_ = 0;
  clear_has_countvalue();
}
inline ::google::protobuf::int32 PMFrame::countvalue() const {
  return countvalue_;
}
inline void PMFrame::set_countvalue(::google::protobuf::int32 value) {
  set_has_countvalue();
  countvalue_ = value;
}

// optional string frameFormatID = 5;
inline bool PMFrame::has_frameformatid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PMFrame::set_has_frameformatid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PMFrame::clear_has_frameformatid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PMFrame::clear_frameformatid() {
  if (frameformatid_ != &::google::protobuf::internal::kEmptyString) {
    frameformatid_->clear();
  }
  clear_has_frameformatid();
}
inline const ::std::string& PMFrame::frameformatid() const {
  return *frameformatid_;
}
inline void PMFrame::set_frameformatid(const ::std::string& value) {
  set_has_frameformatid();
  if (frameformatid_ == &::google::protobuf::internal::kEmptyString) {
    frameformatid_ = new ::std::string;
  }
  frameformatid_->assign(value);
}
inline void PMFrame::set_frameformatid(const char* value) {
  set_has_frameformatid();
  if (frameformatid_ == &::google::protobuf::internal::kEmptyString) {
    frameformatid_ = new ::std::string;
  }
  frameformatid_->assign(value);
}
inline void PMFrame::set_frameformatid(const char* value, size_t size) {
  set_has_frameformatid();
  if (frameformatid_ == &::google::protobuf::internal::kEmptyString) {
    frameformatid_ = new ::std::string;
  }
  frameformatid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PMFrame::mutable_frameformatid() {
  set_has_frameformatid();
  if (frameformatid_ == &::google::protobuf::internal::kEmptyString) {
    frameformatid_ = new ::std::string;
  }
  return frameformatid_;
}
inline ::std::string* PMFrame::release_frameformatid() {
  clear_has_frameformatid();
  if (frameformatid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = frameformatid_;
    frameformatid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PMFrame::set_allocated_frameformatid(::std::string* frameformatid) {
  if (frameformatid_ != &::google::protobuf::internal::kEmptyString) {
    delete frameformatid_;
  }
  if (frameformatid) {
    set_has_frameformatid();
    frameformatid_ = frameformatid;
  } else {
    clear_has_frameformatid();
    frameformatid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string trackID = 6;
inline bool PMFrame::has_trackid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PMFrame::set_has_trackid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PMFrame::clear_has_trackid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PMFrame::clear_trackid() {
  if (trackid_ != &::google::protobuf::internal::kEmptyString) {
    trackid_->clear();
  }
  clear_has_trackid();
}
inline const ::std::string& PMFrame::trackid() const {
  return *trackid_;
}
inline void PMFrame::set_trackid(const ::std::string& value) {
  set_has_trackid();
  if (trackid_ == &::google::protobuf::internal::kEmptyString) {
    trackid_ = new ::std::string;
  }
  trackid_->assign(value);
}
inline void PMFrame::set_trackid(const char* value) {
  set_has_trackid();
  if (trackid_ == &::google::protobuf::internal::kEmptyString) {
    trackid_ = new ::std::string;
  }
  trackid_->assign(value);
}
inline void PMFrame::set_trackid(const char* value, size_t size) {
  set_has_trackid();
  if (trackid_ == &::google::protobuf::internal::kEmptyString) {
    trackid_ = new ::std::string;
  }
  trackid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PMFrame::mutable_trackid() {
  set_has_trackid();
  if (trackid_ == &::google::protobuf::internal::kEmptyString) {
    trackid_ = new ::std::string;
  }
  return trackid_;
}
inline ::std::string* PMFrame::release_trackid() {
  clear_has_trackid();
  if (trackid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trackid_;
    trackid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PMFrame::set_allocated_trackid(::std::string* trackid) {
  if (trackid_ != &::google::protobuf::internal::kEmptyString) {
    delete trackid_;
  }
  if (trackid) {
    set_has_trackid();
    trackid_ = trackid;
  } else {
    clear_has_trackid();
    trackid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string trackType = 7;
inline bool PMFrame::has_tracktype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PMFrame::set_has_tracktype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PMFrame::clear_has_tracktype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PMFrame::clear_tracktype() {
  if (tracktype_ != &::google::protobuf::internal::kEmptyString) {
    tracktype_->clear();
  }
  clear_has_tracktype();
}
inline const ::std::string& PMFrame::tracktype() const {
  return *tracktype_;
}
inline void PMFrame::set_tracktype(const ::std::string& value) {
  set_has_tracktype();
  if (tracktype_ == &::google::protobuf::internal::kEmptyString) {
    tracktype_ = new ::std::string;
  }
  tracktype_->assign(value);
}
inline void PMFrame::set_tracktype(const char* value) {
  set_has_tracktype();
  if (tracktype_ == &::google::protobuf::internal::kEmptyString) {
    tracktype_ = new ::std::string;
  }
  tracktype_->assign(value);
}
inline void PMFrame::set_tracktype(const char* value, size_t size) {
  set_has_tracktype();
  if (tracktype_ == &::google::protobuf::internal::kEmptyString) {
    tracktype_ = new ::std::string;
  }
  tracktype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PMFrame::mutable_tracktype() {
  set_has_tracktype();
  if (tracktype_ == &::google::protobuf::internal::kEmptyString) {
    tracktype_ = new ::std::string;
  }
  return tracktype_;
}
inline ::std::string* PMFrame::release_tracktype() {
  clear_has_tracktype();
  if (tracktype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tracktype_;
    tracktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PMFrame::set_allocated_tracktype(::std::string* tracktype) {
  if (tracktype_ != &::google::protobuf::internal::kEmptyString) {
    delete tracktype_;
  }
  if (tracktype) {
    set_has_tracktype();
    tracktype_ = tracktype;
  } else {
    clear_has_tracktype();
    tracktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double posX = 8;
inline bool PMFrame::has_posx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PMFrame::set_has_posx() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PMFrame::clear_has_posx() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PMFrame::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline double PMFrame::posx() const {
  return posx_;
}
inline void PMFrame::set_posx(double value) {
  set_has_posx();
  posx_ = value;
}

// optional double posY = 9;
inline bool PMFrame::has_posy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PMFrame::set_has_posy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PMFrame::clear_has_posy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PMFrame::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline double PMFrame::posy() const {
  return posy_;
}
inline void PMFrame::set_posy(double value) {
  set_has_posy();
  posy_ = value;
}

// optional double posZ = 10;
inline bool PMFrame::has_posz() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PMFrame::set_has_posz() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PMFrame::clear_has_posz() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PMFrame::clear_posz() {
  posz_ = 0;
  clear_has_posz();
}
inline double PMFrame::posz() const {
  return posz_;
}
inline void PMFrame::set_posz(double value) {
  set_has_posz();
  posz_ = value;
}

// optional double velX = 11;
inline bool PMFrame::has_velx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PMFrame::set_has_velx() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PMFrame::clear_has_velx() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PMFrame::clear_velx() {
  velx_ = 0;
  clear_has_velx();
}
inline double PMFrame::velx() const {
  return velx_;
}
inline void PMFrame::set_velx(double value) {
  set_has_velx();
  velx_ = value;
}

// optional double velY = 12;
inline bool PMFrame::has_vely() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PMFrame::set_has_vely() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PMFrame::clear_has_vely() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PMFrame::clear_vely() {
  vely_ = 0;
  clear_has_vely();
}
inline double PMFrame::vely() const {
  return vely_;
}
inline void PMFrame::set_vely(double value) {
  set_has_vely();
  vely_ = value;
}

// optional double velZ = 13;
inline bool PMFrame::has_velz() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PMFrame::set_has_velz() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PMFrame::clear_has_velz() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PMFrame::clear_velz() {
  velz_ = 0;
  clear_has_velz();
}
inline double PMFrame::velz() const {
  return velz_;
}
inline void PMFrame::set_velz(double value) {
  set_has_velz();
  velz_ = value;
}

// optional double wholeSeconds = 14;
inline bool PMFrame::has_wholeseconds() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PMFrame::set_has_wholeseconds() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PMFrame::clear_has_wholeseconds() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PMFrame::clear_wholeseconds() {
  wholeseconds_ = 0;
  clear_has_wholeseconds();
}
inline double PMFrame::wholeseconds() const {
  return wholeseconds_;
}
inline void PMFrame::set_wholeseconds(double value) {
  set_has_wholeseconds();
  wholeseconds_ = value;
}

// optional double fractionalSeconds = 15;
inline bool PMFrame::has_fractionalseconds() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PMFrame::set_has_fractionalseconds() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PMFrame::clear_has_fractionalseconds() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PMFrame::clear_fractionalseconds() {
  fractionalseconds_ = 0;
  clear_has_fractionalseconds();
}
inline double PMFrame::fractionalseconds() const {
  return fractionalseconds_;
}
inline void PMFrame::set_fractionalseconds(double value) {
  set_has_fractionalseconds();
  fractionalseconds_ = value;
}

// optional int32 frameLength = 16 [default = 0];
inline bool PMFrame::has_framelength() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PMFrame::set_has_framelength() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PMFrame::clear_has_framelength() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PMFrame::clear_framelength() {
  framelength_ = 0;
  clear_has_framelength();
}
inline ::google::protobuf::int32 PMFrame::framelength() const {
  return framelength_;
}
inline void PMFrame::set_framelength(::google::protobuf::int32 value) {
  set_has_framelength();
  framelength_ = value;
}

// optional bytes frame = 17;
inline bool PMFrame::has_frame() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PMFrame::set_has_frame() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PMFrame::clear_has_frame() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PMFrame::clear_frame() {
  if (frame_ != &::google::protobuf::internal::kEmptyString) {
    frame_->clear();
  }
  clear_has_frame();
}
inline const ::std::string& PMFrame::frame() const {
  return *frame_;
}
inline void PMFrame::set_frame(const ::std::string& value) {
  set_has_frame();
  if (frame_ == &::google::protobuf::internal::kEmptyString) {
    frame_ = new ::std::string;
  }
  frame_->assign(value);
}
inline void PMFrame::set_frame(const char* value) {
  set_has_frame();
  if (frame_ == &::google::protobuf::internal::kEmptyString) {
    frame_ = new ::std::string;
  }
  frame_->assign(value);
}
inline void PMFrame::set_frame(const void* value, size_t size) {
  set_has_frame();
  if (frame_ == &::google::protobuf::internal::kEmptyString) {
    frame_ = new ::std::string;
  }
  frame_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PMFrame::mutable_frame() {
  set_has_frame();
  if (frame_ == &::google::protobuf::internal::kEmptyString) {
    frame_ = new ::std::string;
  }
  return frame_;
}
inline ::std::string* PMFrame::release_frame() {
  clear_has_frame();
  if (frame_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = frame_;
    frame_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PMFrame::set_allocated_frame(::std::string* frame) {
  if (frame_ != &::google::protobuf::internal::kEmptyString) {
    delete frame_;
  }
  if (frame) {
    set_has_frame();
    frame_ = frame;
  } else {
    clear_has_frame();
    frame_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string uuid = 18;
inline bool PMFrame::has_uuid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PMFrame::set_has_uuid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PMFrame::clear_has_uuid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PMFrame::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& PMFrame::uuid() const {
  return *uuid_;
}
inline void PMFrame::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void PMFrame::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void PMFrame::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PMFrame::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* PMFrame::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PMFrame::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PMProtos
}  // namespace protos
}  // namespace tb
}  // namespace fv

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProMachinaMessages_2eproto__INCLUDED
