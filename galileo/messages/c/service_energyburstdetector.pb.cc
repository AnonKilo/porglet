// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_energyburstdetector.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service_energyburstdetector.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace service_energyburstdetector {

namespace {

const ::google::protobuf::Descriptor* EnergyBurstDetectorConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnergyBurstDetectorConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnergyBurstDetectorConfig_BurstDetectionParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnergyBurstDetectorConfig_BurstDetectionParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnergyBurstDetectorConfig_FFTParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnergyBurstDetectorConfig_FFTParams_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_5fenergyburstdetector_2eproto() {
  protobuf_AddDesc_service_5fenergyburstdetector_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service_energyburstdetector.proto");
  GOOGLE_CHECK(file != NULL);
  EnergyBurstDetectorConfig_descriptor_ = file->message_type(0);
  static const int EnergyBurstDetectorConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig, iqfilter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig, burstparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig, writeaux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig, segmentername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig, fftparams_),
  };
  EnergyBurstDetectorConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnergyBurstDetectorConfig_descriptor_,
      EnergyBurstDetectorConfig::default_instance_,
      EnergyBurstDetectorConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnergyBurstDetectorConfig));
  EnergyBurstDetectorConfig_BurstDetectionParams_descriptor_ = EnergyBurstDetectorConfig_descriptor_->nested_type(0);
  static const int EnergyBurstDetectorConfig_BurstDetectionParams_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig_BurstDetectionParams, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig_BurstDetectionParams, mindur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig_BurstDetectionParams, maxdur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig_BurstDetectionParams, minbw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig_BurstDetectionParams, freqres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig_BurstDetectionParams, timeres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig_BurstDetectionParams, snrthreshdb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig_BurstDetectionParams, gradientthresh_),
  };
  EnergyBurstDetectorConfig_BurstDetectionParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnergyBurstDetectorConfig_BurstDetectionParams_descriptor_,
      EnergyBurstDetectorConfig_BurstDetectionParams::default_instance_,
      EnergyBurstDetectorConfig_BurstDetectionParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig_BurstDetectionParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig_BurstDetectionParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnergyBurstDetectorConfig_BurstDetectionParams));
  EnergyBurstDetectorConfig_FFTParams_descriptor_ = EnergyBurstDetectorConfig_descriptor_->nested_type(1);
  static const int EnergyBurstDetectorConfig_FFTParams_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig_FFTParams, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig_FFTParams, overlap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig_FFTParams, averages_),
  };
  EnergyBurstDetectorConfig_FFTParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnergyBurstDetectorConfig_FFTParams_descriptor_,
      EnergyBurstDetectorConfig_FFTParams::default_instance_,
      EnergyBurstDetectorConfig_FFTParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig_FFTParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnergyBurstDetectorConfig_FFTParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnergyBurstDetectorConfig_FFTParams));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_5fenergyburstdetector_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnergyBurstDetectorConfig_descriptor_, &EnergyBurstDetectorConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnergyBurstDetectorConfig_BurstDetectionParams_descriptor_, &EnergyBurstDetectorConfig_BurstDetectionParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnergyBurstDetectorConfig_FFTParams_descriptor_, &EnergyBurstDetectorConfig_FFTParams::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_5fenergyburstdetector_2eproto() {
  delete EnergyBurstDetectorConfig::default_instance_;
  delete EnergyBurstDetectorConfig_reflection_;
  delete EnergyBurstDetectorConfig::_default_msgname_;
  delete EnergyBurstDetectorConfig::_default_segmentername_;
  delete EnergyBurstDetectorConfig_BurstDetectionParams::default_instance_;
  delete EnergyBurstDetectorConfig_BurstDetectionParams_reflection_;
  delete EnergyBurstDetectorConfig_BurstDetectionParams::_default_msgname_;
  delete EnergyBurstDetectorConfig_FFTParams::default_instance_;
  delete EnergyBurstDetectorConfig_FFTParams_reflection_;
  delete EnergyBurstDetectorConfig_FFTParams::_default_msgname_;
}

void protobuf_AddDesc_service_5fenergyburstdetector_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::service_rxdataplane::protobuf_AddDesc_service_5frxdataplane_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!service_energyburstdetector.proto\022\033ser"
    "vice_energyburstdetector\032\031service_rxdata"
    "plane.proto\"\367\005\n\031EnergyBurstDetectorConfi"
    "g\022F\n\007msgName\030\001 \001(\t:5service_energyburstd"
    "etector.EnergyBurstDetectorConfig\0225\n\010IQF"
    "ilter\030\002 \001(\0132#.service_rxdataplane.IQInge"
    "stFilter\022`\n\013burstParams\030\003 \001(\0132K.service_"
    "energyburstdetector.EnergyBurstDetectorC"
    "onfig.BurstDetectionParams\022\024\n\010writeAux\030\004"
    " \001(\005:\00272\022\032\n\rsegmenterName\030\005 \001(\t:\003UHF\022S\n\t"
    "fftParams\030\006 \001(\0132@.service_energyburstdet"
    "ector.EnergyBurstDetectorConfig.FFTParam"
    "s\032\201\002\n\024BurstDetectionParams\022A\n\007msgName\030\001 "
    "\001(\t:0service_energyburstdetector.BurstDe"
    "tectionParams\022\025\n\006minDur\030\002 \001(\001:\0050.002\022\024\n\006"
    "maxDur\030\003 \001(\001:\0040.08\022\024\n\005minBW\030\004 \001(\001:\00510000"
    "\022\025\n\007freqRes\030\005 \001(\001:\0043500\022\027\n\007timeRes\030\006 \001(\001"
    ":\0060.0008\022\026\n\013SNRThreshDB\030\007 \001(\001:\0015\022\033\n\016grad"
    "ientThresh\030\010 \001(\001:\003100\032n\n\tFFTParams\0226\n\007ms"
    "gName\030\001 \001(\t:%service_energyburstdetector"
    ".FFTParams\022\024\n\007overlap\030\002 \001(\001:\0030.5\022\023\n\010aver"
    "ages\030\003 \001(\005:\0014B\025\n\023fv.protos.kepsvisor", 876);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service_energyburstdetector.proto", &protobuf_RegisterTypes);
  EnergyBurstDetectorConfig::_default_msgname_ =
      new ::std::string("service_energyburstdetector.EnergyBurstDetectorConfig", 53);
  EnergyBurstDetectorConfig::_default_segmentername_ =
      new ::std::string("UHF", 3);
  EnergyBurstDetectorConfig::default_instance_ = new EnergyBurstDetectorConfig();
  EnergyBurstDetectorConfig_BurstDetectionParams::_default_msgname_ =
      new ::std::string("service_energyburstdetector.BurstDetectionParams", 48);
  EnergyBurstDetectorConfig_BurstDetectionParams::default_instance_ = new EnergyBurstDetectorConfig_BurstDetectionParams();
  EnergyBurstDetectorConfig_FFTParams::_default_msgname_ =
      new ::std::string("service_energyburstdetector.FFTParams", 37);
  EnergyBurstDetectorConfig_FFTParams::default_instance_ = new EnergyBurstDetectorConfig_FFTParams();
  EnergyBurstDetectorConfig::default_instance_->InitAsDefaultInstance();
  EnergyBurstDetectorConfig_BurstDetectionParams::default_instance_->InitAsDefaultInstance();
  EnergyBurstDetectorConfig_FFTParams::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_5fenergyburstdetector_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_5fenergyburstdetector_2eproto {
  StaticDescriptorInitializer_service_5fenergyburstdetector_2eproto() {
    protobuf_AddDesc_service_5fenergyburstdetector_2eproto();
  }
} static_descriptor_initializer_service_5fenergyburstdetector_2eproto_;

// ===================================================================

::std::string* EnergyBurstDetectorConfig_BurstDetectionParams::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EnergyBurstDetectorConfig_BurstDetectionParams::kMsgNameFieldNumber;
const int EnergyBurstDetectorConfig_BurstDetectionParams::kMinDurFieldNumber;
const int EnergyBurstDetectorConfig_BurstDetectionParams::kMaxDurFieldNumber;
const int EnergyBurstDetectorConfig_BurstDetectionParams::kMinBWFieldNumber;
const int EnergyBurstDetectorConfig_BurstDetectionParams::kFreqResFieldNumber;
const int EnergyBurstDetectorConfig_BurstDetectionParams::kTimeResFieldNumber;
const int EnergyBurstDetectorConfig_BurstDetectionParams::kSNRThreshDBFieldNumber;
const int EnergyBurstDetectorConfig_BurstDetectionParams::kGradientThreshFieldNumber;
#endif  // !_MSC_VER

EnergyBurstDetectorConfig_BurstDetectionParams::EnergyBurstDetectorConfig_BurstDetectionParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnergyBurstDetectorConfig_BurstDetectionParams::InitAsDefaultInstance() {
}

EnergyBurstDetectorConfig_BurstDetectionParams::EnergyBurstDetectorConfig_BurstDetectionParams(const EnergyBurstDetectorConfig_BurstDetectionParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnergyBurstDetectorConfig_BurstDetectionParams::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  mindur_ = 0.002;
  maxdur_ = 0.08;
  minbw_ = 10000;
  freqres_ = 3500;
  timeres_ = 0.0008;
  snrthreshdb_ = 5;
  gradientthresh_ = 100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnergyBurstDetectorConfig_BurstDetectionParams::~EnergyBurstDetectorConfig_BurstDetectionParams() {
  SharedDtor();
}

void EnergyBurstDetectorConfig_BurstDetectionParams::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void EnergyBurstDetectorConfig_BurstDetectionParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnergyBurstDetectorConfig_BurstDetectionParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnergyBurstDetectorConfig_BurstDetectionParams_descriptor_;
}

const EnergyBurstDetectorConfig_BurstDetectionParams& EnergyBurstDetectorConfig_BurstDetectionParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fenergyburstdetector_2eproto();
  return *default_instance_;
}

EnergyBurstDetectorConfig_BurstDetectionParams* EnergyBurstDetectorConfig_BurstDetectionParams::default_instance_ = NULL;

EnergyBurstDetectorConfig_BurstDetectionParams* EnergyBurstDetectorConfig_BurstDetectionParams::New() const {
  return new EnergyBurstDetectorConfig_BurstDetectionParams;
}

void EnergyBurstDetectorConfig_BurstDetectionParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    mindur_ = 0.002;
    maxdur_ = 0.08;
    minbw_ = 10000;
    freqres_ = 3500;
    timeres_ = 0.0008;
    snrthreshdb_ = 5;
    gradientthresh_ = 100;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnergyBurstDetectorConfig_BurstDetectionParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "service_energyburstdetector.BurstDetectionParams"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_minDur;
        break;
      }

      // optional double minDur = 2 [default = 0.002];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minDur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mindur_)));
          set_has_mindur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_maxDur;
        break;
      }

      // optional double maxDur = 3 [default = 0.08];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxDur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxdur_)));
          set_has_maxdur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_minBW;
        break;
      }

      // optional double minBW = 4 [default = 10000];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minBW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minbw_)));
          set_has_minbw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_freqRes;
        break;
      }

      // optional double freqRes = 5 [default = 3500];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freqRes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freqres_)));
          set_has_freqres();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_timeRes;
        break;
      }

      // optional double timeRes = 6 [default = 0.0008];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timeRes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timeres_)));
          set_has_timeres();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_SNRThreshDB;
        break;
      }

      // optional double SNRThreshDB = 7 [default = 5];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SNRThreshDB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &snrthreshdb_)));
          set_has_snrthreshdb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_gradientThresh;
        break;
      }

      // optional double gradientThresh = 8 [default = 100];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gradientThresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gradientthresh_)));
          set_has_gradientthresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnergyBurstDetectorConfig_BurstDetectionParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "service_energyburstdetector.BurstDetectionParams"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double minDur = 2 [default = 0.002];
  if (has_mindur()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->mindur(), output);
  }

  // optional double maxDur = 3 [default = 0.08];
  if (has_maxdur()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->maxdur(), output);
  }

  // optional double minBW = 4 [default = 10000];
  if (has_minbw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->minbw(), output);
  }

  // optional double freqRes = 5 [default = 3500];
  if (has_freqres()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->freqres(), output);
  }

  // optional double timeRes = 6 [default = 0.0008];
  if (has_timeres()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->timeres(), output);
  }

  // optional double SNRThreshDB = 7 [default = 5];
  if (has_snrthreshdb()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->snrthreshdb(), output);
  }

  // optional double gradientThresh = 8 [default = 100];
  if (has_gradientthresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->gradientthresh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnergyBurstDetectorConfig_BurstDetectionParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "service_energyburstdetector.BurstDetectionParams"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double minDur = 2 [default = 0.002];
  if (has_mindur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->mindur(), target);
  }

  // optional double maxDur = 3 [default = 0.08];
  if (has_maxdur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->maxdur(), target);
  }

  // optional double minBW = 4 [default = 10000];
  if (has_minbw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->minbw(), target);
  }

  // optional double freqRes = 5 [default = 3500];
  if (has_freqres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->freqres(), target);
  }

  // optional double timeRes = 6 [default = 0.0008];
  if (has_timeres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->timeres(), target);
  }

  // optional double SNRThreshDB = 7 [default = 5];
  if (has_snrthreshdb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->snrthreshdb(), target);
  }

  // optional double gradientThresh = 8 [default = 100];
  if (has_gradientthresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->gradientthresh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnergyBurstDetectorConfig_BurstDetectionParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "service_energyburstdetector.BurstDetectionParams"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double minDur = 2 [default = 0.002];
    if (has_mindur()) {
      total_size += 1 + 8;
    }

    // optional double maxDur = 3 [default = 0.08];
    if (has_maxdur()) {
      total_size += 1 + 8;
    }

    // optional double minBW = 4 [default = 10000];
    if (has_minbw()) {
      total_size += 1 + 8;
    }

    // optional double freqRes = 5 [default = 3500];
    if (has_freqres()) {
      total_size += 1 + 8;
    }

    // optional double timeRes = 6 [default = 0.0008];
    if (has_timeres()) {
      total_size += 1 + 8;
    }

    // optional double SNRThreshDB = 7 [default = 5];
    if (has_snrthreshdb()) {
      total_size += 1 + 8;
    }

    // optional double gradientThresh = 8 [default = 100];
    if (has_gradientthresh()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnergyBurstDetectorConfig_BurstDetectionParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnergyBurstDetectorConfig_BurstDetectionParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnergyBurstDetectorConfig_BurstDetectionParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnergyBurstDetectorConfig_BurstDetectionParams::MergeFrom(const EnergyBurstDetectorConfig_BurstDetectionParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_mindur()) {
      set_mindur(from.mindur());
    }
    if (from.has_maxdur()) {
      set_maxdur(from.maxdur());
    }
    if (from.has_minbw()) {
      set_minbw(from.minbw());
    }
    if (from.has_freqres()) {
      set_freqres(from.freqres());
    }
    if (from.has_timeres()) {
      set_timeres(from.timeres());
    }
    if (from.has_snrthreshdb()) {
      set_snrthreshdb(from.snrthreshdb());
    }
    if (from.has_gradientthresh()) {
      set_gradientthresh(from.gradientthresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnergyBurstDetectorConfig_BurstDetectionParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnergyBurstDetectorConfig_BurstDetectionParams::CopyFrom(const EnergyBurstDetectorConfig_BurstDetectionParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnergyBurstDetectorConfig_BurstDetectionParams::IsInitialized() const {

  return true;
}

void EnergyBurstDetectorConfig_BurstDetectionParams::Swap(EnergyBurstDetectorConfig_BurstDetectionParams* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(mindur_, other->mindur_);
    std::swap(maxdur_, other->maxdur_);
    std::swap(minbw_, other->minbw_);
    std::swap(freqres_, other->freqres_);
    std::swap(timeres_, other->timeres_);
    std::swap(snrthreshdb_, other->snrthreshdb_);
    std::swap(gradientthresh_, other->gradientthresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnergyBurstDetectorConfig_BurstDetectionParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnergyBurstDetectorConfig_BurstDetectionParams_descriptor_;
  metadata.reflection = EnergyBurstDetectorConfig_BurstDetectionParams_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* EnergyBurstDetectorConfig_FFTParams::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EnergyBurstDetectorConfig_FFTParams::kMsgNameFieldNumber;
const int EnergyBurstDetectorConfig_FFTParams::kOverlapFieldNumber;
const int EnergyBurstDetectorConfig_FFTParams::kAveragesFieldNumber;
#endif  // !_MSC_VER

EnergyBurstDetectorConfig_FFTParams::EnergyBurstDetectorConfig_FFTParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnergyBurstDetectorConfig_FFTParams::InitAsDefaultInstance() {
}

EnergyBurstDetectorConfig_FFTParams::EnergyBurstDetectorConfig_FFTParams(const EnergyBurstDetectorConfig_FFTParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnergyBurstDetectorConfig_FFTParams::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  overlap_ = 0.5;
  averages_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnergyBurstDetectorConfig_FFTParams::~EnergyBurstDetectorConfig_FFTParams() {
  SharedDtor();
}

void EnergyBurstDetectorConfig_FFTParams::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void EnergyBurstDetectorConfig_FFTParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnergyBurstDetectorConfig_FFTParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnergyBurstDetectorConfig_FFTParams_descriptor_;
}

const EnergyBurstDetectorConfig_FFTParams& EnergyBurstDetectorConfig_FFTParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fenergyburstdetector_2eproto();
  return *default_instance_;
}

EnergyBurstDetectorConfig_FFTParams* EnergyBurstDetectorConfig_FFTParams::default_instance_ = NULL;

EnergyBurstDetectorConfig_FFTParams* EnergyBurstDetectorConfig_FFTParams::New() const {
  return new EnergyBurstDetectorConfig_FFTParams;
}

void EnergyBurstDetectorConfig_FFTParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    overlap_ = 0.5;
    averages_ = 4;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnergyBurstDetectorConfig_FFTParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "service_energyburstdetector.FFTParams"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_overlap;
        break;
      }

      // optional double overlap = 2 [default = 0.5];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_overlap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &overlap_)));
          set_has_overlap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_averages;
        break;
      }

      // optional int32 averages = 3 [default = 4];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_averages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &averages_)));
          set_has_averages();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnergyBurstDetectorConfig_FFTParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "service_energyburstdetector.FFTParams"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double overlap = 2 [default = 0.5];
  if (has_overlap()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->overlap(), output);
  }

  // optional int32 averages = 3 [default = 4];
  if (has_averages()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->averages(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnergyBurstDetectorConfig_FFTParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "service_energyburstdetector.FFTParams"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double overlap = 2 [default = 0.5];
  if (has_overlap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->overlap(), target);
  }

  // optional int32 averages = 3 [default = 4];
  if (has_averages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->averages(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnergyBurstDetectorConfig_FFTParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "service_energyburstdetector.FFTParams"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double overlap = 2 [default = 0.5];
    if (has_overlap()) {
      total_size += 1 + 8;
    }

    // optional int32 averages = 3 [default = 4];
    if (has_averages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->averages());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnergyBurstDetectorConfig_FFTParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnergyBurstDetectorConfig_FFTParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnergyBurstDetectorConfig_FFTParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnergyBurstDetectorConfig_FFTParams::MergeFrom(const EnergyBurstDetectorConfig_FFTParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_overlap()) {
      set_overlap(from.overlap());
    }
    if (from.has_averages()) {
      set_averages(from.averages());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnergyBurstDetectorConfig_FFTParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnergyBurstDetectorConfig_FFTParams::CopyFrom(const EnergyBurstDetectorConfig_FFTParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnergyBurstDetectorConfig_FFTParams::IsInitialized() const {

  return true;
}

void EnergyBurstDetectorConfig_FFTParams::Swap(EnergyBurstDetectorConfig_FFTParams* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(overlap_, other->overlap_);
    std::swap(averages_, other->averages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnergyBurstDetectorConfig_FFTParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnergyBurstDetectorConfig_FFTParams_descriptor_;
  metadata.reflection = EnergyBurstDetectorConfig_FFTParams_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* EnergyBurstDetectorConfig::_default_msgname_ = NULL;
::std::string* EnergyBurstDetectorConfig::_default_segmentername_ = NULL;
#ifndef _MSC_VER
const int EnergyBurstDetectorConfig::kMsgNameFieldNumber;
const int EnergyBurstDetectorConfig::kIQFilterFieldNumber;
const int EnergyBurstDetectorConfig::kBurstParamsFieldNumber;
const int EnergyBurstDetectorConfig::kWriteAuxFieldNumber;
const int EnergyBurstDetectorConfig::kSegmenterNameFieldNumber;
const int EnergyBurstDetectorConfig::kFftParamsFieldNumber;
#endif  // !_MSC_VER

EnergyBurstDetectorConfig::EnergyBurstDetectorConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnergyBurstDetectorConfig::InitAsDefaultInstance() {
  iqfilter_ = const_cast< ::service_rxdataplane::IQIngestFilter*>(&::service_rxdataplane::IQIngestFilter::default_instance());
  burstparams_ = const_cast< ::service_energyburstdetector::EnergyBurstDetectorConfig_BurstDetectionParams*>(&::service_energyburstdetector::EnergyBurstDetectorConfig_BurstDetectionParams::default_instance());
  fftparams_ = const_cast< ::service_energyburstdetector::EnergyBurstDetectorConfig_FFTParams*>(&::service_energyburstdetector::EnergyBurstDetectorConfig_FFTParams::default_instance());
}

EnergyBurstDetectorConfig::EnergyBurstDetectorConfig(const EnergyBurstDetectorConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnergyBurstDetectorConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  iqfilter_ = NULL;
  burstparams_ = NULL;
  writeaux_ = 72;
  segmentername_ = const_cast< ::std::string*>(_default_segmentername_);
  fftparams_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnergyBurstDetectorConfig::~EnergyBurstDetectorConfig() {
  SharedDtor();
}

void EnergyBurstDetectorConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (segmentername_ != _default_segmentername_) {
    delete segmentername_;
  }
  if (this != default_instance_) {
    delete iqfilter_;
    delete burstparams_;
    delete fftparams_;
  }
}

void EnergyBurstDetectorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnergyBurstDetectorConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnergyBurstDetectorConfig_descriptor_;
}

const EnergyBurstDetectorConfig& EnergyBurstDetectorConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fenergyburstdetector_2eproto();
  return *default_instance_;
}

EnergyBurstDetectorConfig* EnergyBurstDetectorConfig::default_instance_ = NULL;

EnergyBurstDetectorConfig* EnergyBurstDetectorConfig::New() const {
  return new EnergyBurstDetectorConfig;
}

void EnergyBurstDetectorConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_iqfilter()) {
      if (iqfilter_ != NULL) iqfilter_->::service_rxdataplane::IQIngestFilter::Clear();
    }
    if (has_burstparams()) {
      if (burstparams_ != NULL) burstparams_->::service_energyburstdetector::EnergyBurstDetectorConfig_BurstDetectionParams::Clear();
    }
    writeaux_ = 72;
    if (has_segmentername()) {
      if (segmentername_ != _default_segmentername_) {
        segmentername_->assign(*_default_segmentername_);
      }
    }
    if (has_fftparams()) {
      if (fftparams_ != NULL) fftparams_->::service_energyburstdetector::EnergyBurstDetectorConfig_FFTParams::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnergyBurstDetectorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "service_energyburstdetector.EnergyBurstDetectorConfig"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IQFilter;
        break;
      }

      // optional .service_rxdataplane.IQIngestFilter IQFilter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IQFilter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iqfilter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_burstParams;
        break;
      }

      // optional .service_energyburstdetector.EnergyBurstDetectorConfig.BurstDetectionParams burstParams = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_burstParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_burstparams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_writeAux;
        break;
      }

      // optional int32 writeAux = 4 [default = 72];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writeAux:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writeaux_)));
          set_has_writeaux();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_segmenterName;
        break;
      }

      // optional string segmenterName = 5 [default = "UHF"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_segmenterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_segmentername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->segmentername().data(), this->segmentername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fftParams;
        break;
      }

      // optional .service_energyburstdetector.EnergyBurstDetectorConfig.FFTParams fftParams = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fftParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fftparams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnergyBurstDetectorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "service_energyburstdetector.EnergyBurstDetectorConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .service_rxdataplane.IQIngestFilter IQFilter = 2;
  if (has_iqfilter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iqfilter(), output);
  }

  // optional .service_energyburstdetector.EnergyBurstDetectorConfig.BurstDetectionParams burstParams = 3;
  if (has_burstparams()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->burstparams(), output);
  }

  // optional int32 writeAux = 4 [default = 72];
  if (has_writeaux()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->writeaux(), output);
  }

  // optional string segmenterName = 5 [default = "UHF"];
  if (has_segmentername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->segmentername().data(), this->segmentername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->segmentername(), output);
  }

  // optional .service_energyburstdetector.EnergyBurstDetectorConfig.FFTParams fftParams = 6;
  if (has_fftparams()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fftparams(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnergyBurstDetectorConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "service_energyburstdetector.EnergyBurstDetectorConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .service_rxdataplane.IQIngestFilter IQFilter = 2;
  if (has_iqfilter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iqfilter(), target);
  }

  // optional .service_energyburstdetector.EnergyBurstDetectorConfig.BurstDetectionParams burstParams = 3;
  if (has_burstparams()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->burstparams(), target);
  }

  // optional int32 writeAux = 4 [default = 72];
  if (has_writeaux()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->writeaux(), target);
  }

  // optional string segmenterName = 5 [default = "UHF"];
  if (has_segmentername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->segmentername().data(), this->segmentername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->segmentername(), target);
  }

  // optional .service_energyburstdetector.EnergyBurstDetectorConfig.FFTParams fftParams = 6;
  if (has_fftparams()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fftparams(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnergyBurstDetectorConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "service_energyburstdetector.EnergyBurstDetectorConfig"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .service_rxdataplane.IQIngestFilter IQFilter = 2;
    if (has_iqfilter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iqfilter());
    }

    // optional .service_energyburstdetector.EnergyBurstDetectorConfig.BurstDetectionParams burstParams = 3;
    if (has_burstparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->burstparams());
    }

    // optional int32 writeAux = 4 [default = 72];
    if (has_writeaux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writeaux());
    }

    // optional string segmenterName = 5 [default = "UHF"];
    if (has_segmentername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->segmentername());
    }

    // optional .service_energyburstdetector.EnergyBurstDetectorConfig.FFTParams fftParams = 6;
    if (has_fftparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fftparams());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnergyBurstDetectorConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnergyBurstDetectorConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnergyBurstDetectorConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnergyBurstDetectorConfig::MergeFrom(const EnergyBurstDetectorConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_iqfilter()) {
      mutable_iqfilter()->::service_rxdataplane::IQIngestFilter::MergeFrom(from.iqfilter());
    }
    if (from.has_burstparams()) {
      mutable_burstparams()->::service_energyburstdetector::EnergyBurstDetectorConfig_BurstDetectionParams::MergeFrom(from.burstparams());
    }
    if (from.has_writeaux()) {
      set_writeaux(from.writeaux());
    }
    if (from.has_segmentername()) {
      set_segmentername(from.segmentername());
    }
    if (from.has_fftparams()) {
      mutable_fftparams()->::service_energyburstdetector::EnergyBurstDetectorConfig_FFTParams::MergeFrom(from.fftparams());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnergyBurstDetectorConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnergyBurstDetectorConfig::CopyFrom(const EnergyBurstDetectorConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnergyBurstDetectorConfig::IsInitialized() const {

  return true;
}

void EnergyBurstDetectorConfig::Swap(EnergyBurstDetectorConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(iqfilter_, other->iqfilter_);
    std::swap(burstparams_, other->burstparams_);
    std::swap(writeaux_, other->writeaux_);
    std::swap(segmentername_, other->segmentername_);
    std::swap(fftparams_, other->fftparams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnergyBurstDetectorConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnergyBurstDetectorConfig_descriptor_;
  metadata.reflection = EnergyBurstDetectorConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_energyburstdetector

// @@protoc_insertion_point(global_scope)
