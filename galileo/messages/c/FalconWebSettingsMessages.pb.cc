// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FalconWebSettingsMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FalconWebSettingsMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fv {
namespace settings {
namespace protos {

namespace {

const ::google::protobuf::Descriptor* SetMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateWebSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateWebSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSettingType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSettingType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UpdateSettingType_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UpdateDefaultMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDefaultMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebSettingsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebSettingsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebSettingsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebSettingsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mission_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScryptDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScryptDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateWebSettingsAckNack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateWebSettingsAckNack_reflection_ = NULL;
const ::google::protobuf::Descriptor* SettingsStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SettingsStatus_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FalconWebSettingsMessages_2eproto() {
  protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FalconWebSettingsMessages.proto");
  GOOGLE_CHECK(file != NULL);
  SetMission_descriptor_ = file->message_type(0);
  static const int SetMission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMission, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMission, platscrypt_),
  };
  SetMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetMission_descriptor_,
      SetMission::default_instance_,
      SetMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetMission));
  UpdateWebSetting_descriptor_ = file->message_type(1);
  static const int UpdateWebSetting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWebSetting, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWebSetting, setting_),
  };
  UpdateWebSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateWebSetting_descriptor_,
      UpdateWebSetting::default_instance_,
      UpdateWebSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWebSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWebSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateWebSetting));
  UpdateSettingType_descriptor_ = file->message_type(2);
  static const int UpdateSettingType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSettingType, type_),
  };
  UpdateSettingType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSettingType_descriptor_,
      UpdateSettingType::default_instance_,
      UpdateSettingType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSettingType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSettingType, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSettingType, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSettingType));
  UpdateSettingType_Type_descriptor_ = UpdateSettingType_descriptor_->enum_type(0);
  UpdateDefaultMission_descriptor_ = file->message_type(3);
  static const int UpdateDefaultMission_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDefaultMission, default_missions_),
  };
  UpdateDefaultMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDefaultMission_descriptor_,
      UpdateDefaultMission::default_instance_,
      UpdateDefaultMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDefaultMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDefaultMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDefaultMission));
  WebSettingsRequest_descriptor_ = file->message_type(4);
  static const int WebSettingsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSettingsRequest, msgname_),
  };
  WebSettingsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebSettingsRequest_descriptor_,
      WebSettingsRequest::default_instance_,
      WebSettingsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSettingsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSettingsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebSettingsRequest));
  WebSettingsResponse_descriptor_ = file->message_type(5);
  static const int WebSettingsResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSettingsResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSettingsResponse, mission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSettingsResponse, scrypts_),
  };
  WebSettingsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebSettingsResponse_descriptor_,
      WebSettingsResponse::default_instance_,
      WebSettingsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSettingsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSettingsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebSettingsResponse));
  Mission_descriptor_ = file->message_type(6);
  static const int Mission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, default_missions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, mission_list_),
  };
  Mission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mission_descriptor_,
      Mission::default_instance_,
      Mission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mission));
  ScryptDetail_descriptor_ = file->message_type(7);
  static const int ScryptDetail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScryptDetail, scryptname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScryptDetail, scryptthread_),
  };
  ScryptDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScryptDetail_descriptor_,
      ScryptDetail::default_instance_,
      ScryptDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScryptDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScryptDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScryptDetail));
  UpdateWebSettingsAckNack_descriptor_ = file->message_type(8);
  static const int UpdateWebSettingsAckNack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWebSettingsAckNack, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWebSettingsAckNack, status_),
  };
  UpdateWebSettingsAckNack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateWebSettingsAckNack_descriptor_,
      UpdateWebSettingsAckNack::default_instance_,
      UpdateWebSettingsAckNack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWebSettingsAckNack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWebSettingsAckNack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateWebSettingsAckNack));
  SettingsStatus_descriptor_ = file->message_type(9);
  static const int SettingsStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsStatus, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsStatus, error_text_),
  };
  SettingsStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SettingsStatus_descriptor_,
      SettingsStatus::default_instance_,
      SettingsStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingsStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SettingsStatus));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FalconWebSettingsMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetMission_descriptor_, &SetMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateWebSetting_descriptor_, &UpdateWebSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSettingType_descriptor_, &UpdateSettingType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDefaultMission_descriptor_, &UpdateDefaultMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebSettingsRequest_descriptor_, &WebSettingsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebSettingsResponse_descriptor_, &WebSettingsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mission_descriptor_, &Mission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScryptDetail_descriptor_, &ScryptDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateWebSettingsAckNack_descriptor_, &UpdateWebSettingsAckNack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SettingsStatus_descriptor_, &SettingsStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FalconWebSettingsMessages_2eproto() {
  delete SetMission::default_instance_;
  delete SetMission_reflection_;
  delete SetMission::_default_msgname_;
  delete UpdateWebSetting::default_instance_;
  delete UpdateWebSetting_reflection_;
  delete UpdateWebSetting::_default_msgname_;
  delete UpdateSettingType::default_instance_;
  delete UpdateSettingType_reflection_;
  delete UpdateDefaultMission::default_instance_;
  delete UpdateDefaultMission_reflection_;
  delete WebSettingsRequest::default_instance_;
  delete WebSettingsRequest_reflection_;
  delete WebSettingsRequest::_default_msgname_;
  delete WebSettingsResponse::default_instance_;
  delete WebSettingsResponse_reflection_;
  delete WebSettingsResponse::_default_msgname_;
  delete Mission::default_instance_;
  delete Mission_reflection_;
  delete ScryptDetail::default_instance_;
  delete ScryptDetail_reflection_;
  delete UpdateWebSettingsAckNack::default_instance_;
  delete UpdateWebSettingsAckNack_reflection_;
  delete UpdateWebSettingsAckNack::_default_msgname_;
  delete SettingsStatus::default_instance_;
  delete SettingsStatus_reflection_;
}

void protobuf_AddDesc_FalconWebSettingsMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037FalconWebSettingsMessages.proto\022\022fv.se"
    "ttings.protos\">\n\nSetMission\022\034\n\007msgName\030\001"
    " \001(\t:\013SET_MISSION\022\022\n\nplatScrypt\030\002 \001(\t\"o\n"
    "\020UpdateWebSetting\022#\n\007msgName\030\001 \001(\t:\022UPDA"
    "TE_WEB_SETTING\0226\n\007setting\030\002 \003(\0132%.fv.set"
    "tings.protos.UpdateSettingType\"y\n\021Update"
    "SettingType\0228\n\004type\030\001 \002(\0162*.fv.settings."
    "protos.UpdateSettingType.Type\" \n\004Type\022\030\n"
    "\024UpdateDefaultMission\020\001*\010\010d\020\200\200\200\200\002\"\236\001\n\024Up"
    "dateDefaultMission\022\030\n\020default_missions\030\001"
    " \003(\t2l\n\023update_setting_type\022%.fv.setting"
    "s.protos.UpdateSettingType\030d \001(\0132(.fv.se"
    "ttings.protos.UpdateDefaultMission\";\n\022We"
    "bSettingsRequest\022%\n\007msgName\030\001 \001(\t:\024WEB_S"
    "ETTINGS_REQUEST\"\236\001\n\023WebSettingsResponse\022"
    "&\n\007msgName\030\001 \001(\t:\025WEB_SETTINGS_RESPONSE\022"
    ",\n\007mission\030\002 \001(\0132\033.fv.settings.protos.Mi"
    "ssion\0221\n\007scrypts\030\003 \003(\0132 .fv.settings.pro"
    "tos.ScryptDetail\"9\n\007Mission\022\030\n\020default_m"
    "issions\030\001 \003(\t\022\024\n\014mission_list\030\002 \003(\t\"8\n\014S"
    "cryptDetail\022\022\n\nscryptName\030\001 \001(\t\022\024\n\014scryp"
    "tThread\030\002 \001(\t\"}\n\030UpdateWebSettingsAckNac"
    "k\022-\n\007msgName\030\001 \001(\t:\034UPDATE_WEB_SETTINGS_"
    "ACK_NACK\0222\n\006status\030\002 \003(\0132\".fv.settings.p"
    "rotos.SettingsStatus\"a\n\016SettingsStatus\022;"
    "\n\014message_type\030\001 \002(\0132%.fv.settings.proto"
    "s.UpdateSettingType\022\022\n\nerror_text\030\002 \002(\tB"
    "\025\n\023fv.protos.kepsvisor", 1102);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FalconWebSettingsMessages.proto", &protobuf_RegisterTypes);
  SetMission::_default_msgname_ =
      new ::std::string("SET_MISSION", 11);
  SetMission::default_instance_ = new SetMission();
  UpdateWebSetting::_default_msgname_ =
      new ::std::string("UPDATE_WEB_SETTING", 18);
  UpdateWebSetting::default_instance_ = new UpdateWebSetting();
  UpdateSettingType::default_instance_ = new UpdateSettingType();
  UpdateDefaultMission::default_instance_ = new UpdateDefaultMission();
  WebSettingsRequest::_default_msgname_ =
      new ::std::string("WEB_SETTINGS_REQUEST", 20);
  WebSettingsRequest::default_instance_ = new WebSettingsRequest();
  WebSettingsResponse::_default_msgname_ =
      new ::std::string("WEB_SETTINGS_RESPONSE", 21);
  WebSettingsResponse::default_instance_ = new WebSettingsResponse();
  Mission::default_instance_ = new Mission();
  ScryptDetail::default_instance_ = new ScryptDetail();
  UpdateWebSettingsAckNack::_default_msgname_ =
      new ::std::string("UPDATE_WEB_SETTINGS_ACK_NACK", 28);
  UpdateWebSettingsAckNack::default_instance_ = new UpdateWebSettingsAckNack();
  SettingsStatus::default_instance_ = new SettingsStatus();
  SetMission::default_instance_->InitAsDefaultInstance();
  UpdateWebSetting::default_instance_->InitAsDefaultInstance();
  UpdateSettingType::default_instance_->InitAsDefaultInstance();
  UpdateDefaultMission::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fv::settings::protos::UpdateSettingType::default_instance(),
    100, 11, false, false,
    &::fv::settings::protos::UpdateDefaultMission::default_instance());
  WebSettingsRequest::default_instance_->InitAsDefaultInstance();
  WebSettingsResponse::default_instance_->InitAsDefaultInstance();
  Mission::default_instance_->InitAsDefaultInstance();
  ScryptDetail::default_instance_->InitAsDefaultInstance();
  UpdateWebSettingsAckNack::default_instance_->InitAsDefaultInstance();
  SettingsStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FalconWebSettingsMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FalconWebSettingsMessages_2eproto {
  StaticDescriptorInitializer_FalconWebSettingsMessages_2eproto() {
    protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  }
} static_descriptor_initializer_FalconWebSettingsMessages_2eproto_;

// ===================================================================

::std::string* SetMission::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SetMission::kMsgNameFieldNumber;
const int SetMission::kPlatScryptFieldNumber;
#endif  // !_MSC_VER

SetMission::SetMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetMission::InitAsDefaultInstance() {
}

SetMission::SetMission(const SetMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetMission::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  platscrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetMission::~SetMission() {
  SharedDtor();
}

void SetMission::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (platscrypt_ != &::google::protobuf::internal::kEmptyString) {
    delete platscrypt_;
  }
  if (this != default_instance_) {
  }
}

void SetMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetMission_descriptor_;
}

const SetMission& SetMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  return *default_instance_;
}

SetMission* SetMission::default_instance_ = NULL;

SetMission* SetMission::New() const {
  return new SetMission;
}

void SetMission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_platscrypt()) {
      if (platscrypt_ != &::google::protobuf::internal::kEmptyString) {
        platscrypt_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SET_MISSION"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_platScrypt;
        break;
      }

      // optional string platScrypt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platScrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platscrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platscrypt().data(), this->platscrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SET_MISSION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string platScrypt = 2;
  if (has_platscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platscrypt().data(), this->platscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platscrypt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SET_MISSION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string platScrypt = 2;
  if (has_platscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platscrypt().data(), this->platscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platscrypt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SET_MISSION"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string platScrypt = 2;
    if (has_platscrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platscrypt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetMission::MergeFrom(const SetMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_platscrypt()) {
      set_platscrypt(from.platscrypt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMission::CopyFrom(const SetMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMission::IsInitialized() const {

  return true;
}

void SetMission::Swap(SetMission* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(platscrypt_, other->platscrypt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetMission_descriptor_;
  metadata.reflection = SetMission_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UpdateWebSetting::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UpdateWebSetting::kMsgNameFieldNumber;
const int UpdateWebSetting::kSettingFieldNumber;
#endif  // !_MSC_VER

UpdateWebSetting::UpdateWebSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateWebSetting::InitAsDefaultInstance() {
}

UpdateWebSetting::UpdateWebSetting(const UpdateWebSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateWebSetting::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateWebSetting::~UpdateWebSetting() {
  SharedDtor();
}

void UpdateWebSetting::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void UpdateWebSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateWebSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateWebSetting_descriptor_;
}

const UpdateWebSetting& UpdateWebSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  return *default_instance_;
}

UpdateWebSetting* UpdateWebSetting::default_instance_ = NULL;

UpdateWebSetting* UpdateWebSetting::New() const {
  return new UpdateWebSetting;
}

void UpdateWebSetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  setting_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateWebSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UPDATE_WEB_SETTING"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_setting;
        break;
      }

      // repeated .fv.settings.protos.UpdateSettingType setting = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_setting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_setting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_setting;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateWebSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UPDATE_WEB_SETTING"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated .fv.settings.protos.UpdateSettingType setting = 2;
  for (int i = 0; i < this->setting_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->setting(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateWebSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UPDATE_WEB_SETTING"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated .fv.settings.protos.UpdateSettingType setting = 2;
  for (int i = 0; i < this->setting_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->setting(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateWebSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UPDATE_WEB_SETTING"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  // repeated .fv.settings.protos.UpdateSettingType setting = 2;
  total_size += 1 * this->setting_size();
  for (int i = 0; i < this->setting_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->setting(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateWebSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateWebSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateWebSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateWebSetting::MergeFrom(const UpdateWebSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  setting_.MergeFrom(from.setting_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateWebSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateWebSetting::CopyFrom(const UpdateWebSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateWebSetting::IsInitialized() const {

  for (int i = 0; i < setting_size(); i++) {
    if (!this->setting(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateWebSetting::Swap(UpdateWebSetting* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    setting_.Swap(&other->setting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateWebSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateWebSetting_descriptor_;
  metadata.reflection = UpdateWebSetting_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UpdateSettingType_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSettingType_Type_descriptor_;
}
bool UpdateSettingType_Type_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UpdateSettingType_Type UpdateSettingType::UpdateDefaultMission;
const UpdateSettingType_Type UpdateSettingType::Type_MIN;
const UpdateSettingType_Type UpdateSettingType::Type_MAX;
const int UpdateSettingType::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UpdateSettingType::kTypeFieldNumber;
#endif  // !_MSC_VER

UpdateSettingType::UpdateSettingType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateSettingType::InitAsDefaultInstance() {
}

UpdateSettingType::UpdateSettingType(const UpdateSettingType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateSettingType::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSettingType::~UpdateSettingType() {
  SharedDtor();
}

void UpdateSettingType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateSettingType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSettingType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSettingType_descriptor_;
}

const UpdateSettingType& UpdateSettingType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  return *default_instance_;
}

UpdateSettingType* UpdateSettingType::default_instance_ = NULL;

UpdateSettingType* UpdateSettingType::New() const {
  return new UpdateSettingType;
}

void UpdateSettingType::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSettingType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fv.settings.protos.UpdateSettingType.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fv::settings::protos::UpdateSettingType_Type_IsValid(value)) {
            set_type(static_cast< ::fv::settings::protos::UpdateSettingType_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateSettingType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .fv.settings.protos.UpdateSettingType.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateSettingType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .fv.settings.protos.UpdateSettingType.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateSettingType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fv.settings.protos.UpdateSettingType.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSettingType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSettingType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSettingType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSettingType::MergeFrom(const UpdateSettingType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSettingType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSettingType::CopyFrom(const UpdateSettingType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSettingType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void UpdateSettingType::Swap(UpdateSettingType* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata UpdateSettingType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSettingType_descriptor_;
  metadata.reflection = UpdateSettingType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDefaultMission::kDefaultMissionsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int UpdateDefaultMission::kUpdateSettingTypeFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fv::settings::protos::UpdateSettingType,
    ::google::protobuf::internal::MessageTypeTraits< ::fv::settings::protos::UpdateDefaultMission >, 11, false >
  UpdateDefaultMission::update_setting_type(kUpdateSettingTypeFieldNumber, ::fv::settings::protos::UpdateDefaultMission::default_instance());
UpdateDefaultMission::UpdateDefaultMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateDefaultMission::InitAsDefaultInstance() {
}

UpdateDefaultMission::UpdateDefaultMission(const UpdateDefaultMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateDefaultMission::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDefaultMission::~UpdateDefaultMission() {
  SharedDtor();
}

void UpdateDefaultMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateDefaultMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDefaultMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDefaultMission_descriptor_;
}

const UpdateDefaultMission& UpdateDefaultMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  return *default_instance_;
}

UpdateDefaultMission* UpdateDefaultMission::default_instance_ = NULL;

UpdateDefaultMission* UpdateDefaultMission::New() const {
  return new UpdateDefaultMission;
}

void UpdateDefaultMission::Clear() {
  default_missions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDefaultMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string default_missions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_default_missions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->default_missions(this->default_missions_size() - 1).data(),
            this->default_missions(this->default_missions_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_default_missions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateDefaultMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string default_missions = 1;
  for (int i = 0; i < this->default_missions_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->default_missions(i).data(), this->default_missions(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->default_missions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateDefaultMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string default_missions = 1;
  for (int i = 0; i < this->default_missions_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->default_missions(i).data(), this->default_missions(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->default_missions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateDefaultMission::ByteSize() const {
  int total_size = 0;

  // repeated string default_missions = 1;
  total_size += 1 * this->default_missions_size();
  for (int i = 0; i < this->default_missions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->default_missions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDefaultMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDefaultMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDefaultMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDefaultMission::MergeFrom(const UpdateDefaultMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  default_missions_.MergeFrom(from.default_missions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDefaultMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDefaultMission::CopyFrom(const UpdateDefaultMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDefaultMission::IsInitialized() const {

  return true;
}

void UpdateDefaultMission::Swap(UpdateDefaultMission* other) {
  if (other != this) {
    default_missions_.Swap(&other->default_missions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDefaultMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDefaultMission_descriptor_;
  metadata.reflection = UpdateDefaultMission_reflection_;
  return metadata;
}


// ===================================================================

::std::string* WebSettingsRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int WebSettingsRequest::kMsgNameFieldNumber;
#endif  // !_MSC_VER

WebSettingsRequest::WebSettingsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebSettingsRequest::InitAsDefaultInstance() {
}

WebSettingsRequest::WebSettingsRequest(const WebSettingsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebSettingsRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebSettingsRequest::~WebSettingsRequest() {
  SharedDtor();
}

void WebSettingsRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void WebSettingsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebSettingsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebSettingsRequest_descriptor_;
}

const WebSettingsRequest& WebSettingsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  return *default_instance_;
}

WebSettingsRequest* WebSettingsRequest::default_instance_ = NULL;

WebSettingsRequest* WebSettingsRequest::New() const {
  return new WebSettingsRequest;
}

void WebSettingsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebSettingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "WEB_SETTINGS_REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebSettingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "WEB_SETTINGS_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebSettingsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "WEB_SETTINGS_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebSettingsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "WEB_SETTINGS_REQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebSettingsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebSettingsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebSettingsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebSettingsRequest::MergeFrom(const WebSettingsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebSettingsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebSettingsRequest::CopyFrom(const WebSettingsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebSettingsRequest::IsInitialized() const {

  return true;
}

void WebSettingsRequest::Swap(WebSettingsRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebSettingsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebSettingsRequest_descriptor_;
  metadata.reflection = WebSettingsRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* WebSettingsResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int WebSettingsResponse::kMsgNameFieldNumber;
const int WebSettingsResponse::kMissionFieldNumber;
const int WebSettingsResponse::kScryptsFieldNumber;
#endif  // !_MSC_VER

WebSettingsResponse::WebSettingsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebSettingsResponse::InitAsDefaultInstance() {
  mission_ = const_cast< ::fv::settings::protos::Mission*>(&::fv::settings::protos::Mission::default_instance());
}

WebSettingsResponse::WebSettingsResponse(const WebSettingsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebSettingsResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  mission_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebSettingsResponse::~WebSettingsResponse() {
  SharedDtor();
}

void WebSettingsResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete mission_;
  }
}

void WebSettingsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebSettingsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebSettingsResponse_descriptor_;
}

const WebSettingsResponse& WebSettingsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  return *default_instance_;
}

WebSettingsResponse* WebSettingsResponse::default_instance_ = NULL;

WebSettingsResponse* WebSettingsResponse::New() const {
  return new WebSettingsResponse;
}

void WebSettingsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_mission()) {
      if (mission_ != NULL) mission_->::fv::settings::protos::Mission::Clear();
    }
  }
  scrypts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebSettingsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "WEB_SETTINGS_RESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mission;
        break;
      }

      // optional .fv.settings.protos.Mission mission = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_scrypts;
        break;
      }

      // repeated .fv.settings.protos.ScryptDetail scrypts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scrypts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scrypts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_scrypts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebSettingsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "WEB_SETTINGS_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .fv.settings.protos.Mission mission = 2;
  if (has_mission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mission(), output);
  }

  // repeated .fv.settings.protos.ScryptDetail scrypts = 3;
  for (int i = 0; i < this->scrypts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->scrypts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebSettingsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "WEB_SETTINGS_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .fv.settings.protos.Mission mission = 2;
  if (has_mission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mission(), target);
  }

  // repeated .fv.settings.protos.ScryptDetail scrypts = 3;
  for (int i = 0; i < this->scrypts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->scrypts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebSettingsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "WEB_SETTINGS_RESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .fv.settings.protos.Mission mission = 2;
    if (has_mission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission());
    }

  }
  // repeated .fv.settings.protos.ScryptDetail scrypts = 3;
  total_size += 1 * this->scrypts_size();
  for (int i = 0; i < this->scrypts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scrypts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebSettingsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebSettingsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebSettingsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebSettingsResponse::MergeFrom(const WebSettingsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  scrypts_.MergeFrom(from.scrypts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_mission()) {
      mutable_mission()->::fv::settings::protos::Mission::MergeFrom(from.mission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebSettingsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebSettingsResponse::CopyFrom(const WebSettingsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebSettingsResponse::IsInitialized() const {

  return true;
}

void WebSettingsResponse::Swap(WebSettingsResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(mission_, other->mission_);
    scrypts_.Swap(&other->scrypts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebSettingsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebSettingsResponse_descriptor_;
  metadata.reflection = WebSettingsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mission::kDefaultMissionsFieldNumber;
const int Mission::kMissionListFieldNumber;
#endif  // !_MSC_VER

Mission::Mission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mission::InitAsDefaultInstance() {
}

Mission::Mission(const Mission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mission::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mission::~Mission() {
  SharedDtor();
}

void Mission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mission_descriptor_;
}

const Mission& Mission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  return *default_instance_;
}

Mission* Mission::default_instance_ = NULL;

Mission* Mission::New() const {
  return new Mission;
}

void Mission::Clear() {
  default_missions_.Clear();
  mission_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string default_missions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_default_missions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->default_missions(this->default_missions_size() - 1).data(),
            this->default_missions(this->default_missions_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_default_missions;
        if (input->ExpectTag(18)) goto parse_mission_list;
        break;
      }

      // repeated string mission_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mission_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mission_list(this->mission_list_size() - 1).data(),
            this->mission_list(this->mission_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mission_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string default_missions = 1;
  for (int i = 0; i < this->default_missions_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->default_missions(i).data(), this->default_missions(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->default_missions(i), output);
  }

  // repeated string mission_list = 2;
  for (int i = 0; i < this->mission_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->mission_list(i).data(), this->mission_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mission_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string default_missions = 1;
  for (int i = 0; i < this->default_missions_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->default_missions(i).data(), this->default_missions(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->default_missions(i), target);
  }

  // repeated string mission_list = 2;
  for (int i = 0; i < this->mission_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mission_list(i).data(), this->mission_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->mission_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mission::ByteSize() const {
  int total_size = 0;

  // repeated string default_missions = 1;
  total_size += 1 * this->default_missions_size();
  for (int i = 0; i < this->default_missions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->default_missions(i));
  }

  // repeated string mission_list = 2;
  total_size += 1 * this->mission_list_size();
  for (int i = 0; i < this->mission_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mission_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mission::MergeFrom(const Mission& from) {
  GOOGLE_CHECK_NE(&from, this);
  default_missions_.MergeFrom(from.default_missions_);
  mission_list_.MergeFrom(from.mission_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mission::CopyFrom(const Mission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission::IsInitialized() const {

  return true;
}

void Mission::Swap(Mission* other) {
  if (other != this) {
    default_missions_.Swap(&other->default_missions_);
    mission_list_.Swap(&other->mission_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mission_descriptor_;
  metadata.reflection = Mission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScryptDetail::kScryptNameFieldNumber;
const int ScryptDetail::kScryptThreadFieldNumber;
#endif  // !_MSC_VER

ScryptDetail::ScryptDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScryptDetail::InitAsDefaultInstance() {
}

ScryptDetail::ScryptDetail(const ScryptDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScryptDetail::SharedCtor() {
  _cached_size_ = 0;
  scryptname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scryptthread_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScryptDetail::~ScryptDetail() {
  SharedDtor();
}

void ScryptDetail::SharedDtor() {
  if (scryptname_ != &::google::protobuf::internal::kEmptyString) {
    delete scryptname_;
  }
  if (scryptthread_ != &::google::protobuf::internal::kEmptyString) {
    delete scryptthread_;
  }
  if (this != default_instance_) {
  }
}

void ScryptDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScryptDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScryptDetail_descriptor_;
}

const ScryptDetail& ScryptDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  return *default_instance_;
}

ScryptDetail* ScryptDetail::default_instance_ = NULL;

ScryptDetail* ScryptDetail::New() const {
  return new ScryptDetail;
}

void ScryptDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_scryptname()) {
      if (scryptname_ != &::google::protobuf::internal::kEmptyString) {
        scryptname_->clear();
      }
    }
    if (has_scryptthread()) {
      if (scryptthread_ != &::google::protobuf::internal::kEmptyString) {
        scryptthread_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScryptDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string scryptName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scryptname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scryptname().data(), this->scryptname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scryptThread;
        break;
      }

      // optional string scryptThread = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scryptThread:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scryptthread()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scryptthread().data(), this->scryptthread().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScryptDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string scryptName = 1;
  if (has_scryptname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scryptname().data(), this->scryptname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->scryptname(), output);
  }

  // optional string scryptThread = 2;
  if (has_scryptthread()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scryptthread().data(), this->scryptthread().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->scryptthread(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScryptDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string scryptName = 1;
  if (has_scryptname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scryptname().data(), this->scryptname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->scryptname(), target);
  }

  // optional string scryptThread = 2;
  if (has_scryptthread()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scryptthread().data(), this->scryptthread().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scryptthread(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScryptDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string scryptName = 1;
    if (has_scryptname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scryptname());
    }

    // optional string scryptThread = 2;
    if (has_scryptthread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scryptthread());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScryptDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScryptDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScryptDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScryptDetail::MergeFrom(const ScryptDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scryptname()) {
      set_scryptname(from.scryptname());
    }
    if (from.has_scryptthread()) {
      set_scryptthread(from.scryptthread());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScryptDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScryptDetail::CopyFrom(const ScryptDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScryptDetail::IsInitialized() const {

  return true;
}

void ScryptDetail::Swap(ScryptDetail* other) {
  if (other != this) {
    std::swap(scryptname_, other->scryptname_);
    std::swap(scryptthread_, other->scryptthread_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScryptDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScryptDetail_descriptor_;
  metadata.reflection = ScryptDetail_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UpdateWebSettingsAckNack::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UpdateWebSettingsAckNack::kMsgNameFieldNumber;
const int UpdateWebSettingsAckNack::kStatusFieldNumber;
#endif  // !_MSC_VER

UpdateWebSettingsAckNack::UpdateWebSettingsAckNack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateWebSettingsAckNack::InitAsDefaultInstance() {
}

UpdateWebSettingsAckNack::UpdateWebSettingsAckNack(const UpdateWebSettingsAckNack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateWebSettingsAckNack::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateWebSettingsAckNack::~UpdateWebSettingsAckNack() {
  SharedDtor();
}

void UpdateWebSettingsAckNack::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void UpdateWebSettingsAckNack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateWebSettingsAckNack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateWebSettingsAckNack_descriptor_;
}

const UpdateWebSettingsAckNack& UpdateWebSettingsAckNack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  return *default_instance_;
}

UpdateWebSettingsAckNack* UpdateWebSettingsAckNack::default_instance_ = NULL;

UpdateWebSettingsAckNack* UpdateWebSettingsAckNack::New() const {
  return new UpdateWebSettingsAckNack;
}

void UpdateWebSettingsAckNack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateWebSettingsAckNack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UPDATE_WEB_SETTINGS_ACK_NACK"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // repeated .fv.settings.protos.SettingsStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateWebSettingsAckNack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UPDATE_WEB_SETTINGS_ACK_NACK"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated .fv.settings.protos.SettingsStatus status = 2;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateWebSettingsAckNack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UPDATE_WEB_SETTINGS_ACK_NACK"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated .fv.settings.protos.SettingsStatus status = 2;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateWebSettingsAckNack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UPDATE_WEB_SETTINGS_ACK_NACK"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  // repeated .fv.settings.protos.SettingsStatus status = 2;
  total_size += 1 * this->status_size();
  for (int i = 0; i < this->status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateWebSettingsAckNack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateWebSettingsAckNack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateWebSettingsAckNack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateWebSettingsAckNack::MergeFrom(const UpdateWebSettingsAckNack& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_.MergeFrom(from.status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateWebSettingsAckNack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateWebSettingsAckNack::CopyFrom(const UpdateWebSettingsAckNack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateWebSettingsAckNack::IsInitialized() const {

  for (int i = 0; i < status_size(); i++) {
    if (!this->status(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateWebSettingsAckNack::Swap(UpdateWebSettingsAckNack* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    status_.Swap(&other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateWebSettingsAckNack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateWebSettingsAckNack_descriptor_;
  metadata.reflection = UpdateWebSettingsAckNack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SettingsStatus::kMessageTypeFieldNumber;
const int SettingsStatus::kErrorTextFieldNumber;
#endif  // !_MSC_VER

SettingsStatus::SettingsStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SettingsStatus::InitAsDefaultInstance() {
  message_type_ = const_cast< ::fv::settings::protos::UpdateSettingType*>(&::fv::settings::protos::UpdateSettingType::default_instance());
}

SettingsStatus::SettingsStatus(const SettingsStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SettingsStatus::SharedCtor() {
  _cached_size_ = 0;
  message_type_ = NULL;
  error_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SettingsStatus::~SettingsStatus() {
  SharedDtor();
}

void SettingsStatus::SharedDtor() {
  if (error_text_ != &::google::protobuf::internal::kEmptyString) {
    delete error_text_;
  }
  if (this != default_instance_) {
    delete message_type_;
  }
}

void SettingsStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SettingsStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettingsStatus_descriptor_;
}

const SettingsStatus& SettingsStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconWebSettingsMessages_2eproto();
  return *default_instance_;
}

SettingsStatus* SettingsStatus::default_instance_ = NULL;

SettingsStatus* SettingsStatus::New() const {
  return new SettingsStatus;
}

void SettingsStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message_type()) {
      if (message_type_ != NULL) message_type_->::fv::settings::protos::UpdateSettingType::Clear();
    }
    if (has_error_text()) {
      if (error_text_ != &::google::protobuf::internal::kEmptyString) {
        error_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SettingsStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fv.settings.protos.UpdateSettingType message_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_text;
        break;
      }

      // required string error_text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_text().data(), this->error_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SettingsStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .fv.settings.protos.UpdateSettingType message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->message_type(), output);
  }

  // required string error_text = 2;
  if (has_error_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SettingsStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .fv.settings.protos.UpdateSettingType message_type = 1;
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->message_type(), target);
  }

  // required string error_text = 2;
  if (has_error_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SettingsStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fv.settings.protos.UpdateSettingType message_type = 1;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message_type());
    }

    // required string error_text = 2;
    if (has_error_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SettingsStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SettingsStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SettingsStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SettingsStatus::MergeFrom(const SettingsStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type()) {
      mutable_message_type()->::fv::settings::protos::UpdateSettingType::MergeFrom(from.message_type());
    }
    if (from.has_error_text()) {
      set_error_text(from.error_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SettingsStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingsStatus::CopyFrom(const SettingsStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_message_type()) {
    if (!this->message_type().IsInitialized()) return false;
  }
  return true;
}

void SettingsStatus::Swap(SettingsStatus* other) {
  if (other != this) {
    std::swap(message_type_, other->message_type_);
    std::swap(error_text_, other->error_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SettingsStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SettingsStatus_descriptor_;
  metadata.reflection = SettingsStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace settings
}  // namespace fv

// @@protoc_insertion_point(global_scope)
