// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RxCommandMessages.proto

#ifndef PROTOBUF_RxCommandMessages_2eproto__INCLUDED
#define PROTOBUF_RxCommandMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rx_command_msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RxCommandMessages_2eproto();
void protobuf_AssignDesc_RxCommandMessages_2eproto();
void protobuf_ShutdownFile_RxCommandMessages_2eproto();

class RxCommandRequest;
class RxCommandResponse;

// ===================================================================

class RxCommandRequest : public ::google::protobuf::Message {
 public:
  RxCommandRequest();
  virtual ~RxCommandRequest();

  RxCommandRequest(const RxCommandRequest& from);

  inline RxCommandRequest& operator=(const RxCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RxCommandRequest& default_instance();

  void Swap(RxCommandRequest* other);

  // implements Message ----------------------------------------------

  RxCommandRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RxCommandRequest& from);
  void MergeFrom(const RxCommandRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "RXCOMMANDREQUEST"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional float frequency = 3;
  inline bool has_frequency() const;
  inline void clear_frequency();
  static const int kFrequencyFieldNumber = 3;
  inline float frequency() const;
  inline void set_frequency(float value);

  // optional int32 gain = 4;
  inline bool has_gain() const;
  inline void clear_gain();
  static const int kGainFieldNumber = 4;
  inline ::google::protobuf::int32 gain() const;
  inline void set_gain(::google::protobuf::int32 value);

  // optional string guid = 5 [default = "UNSPECIFIED"];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 5;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional int32 priority = 6 [default = 100];
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 6;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);

  // optional bool enabled = 7;
  inline bool has_enabled() const;
  inline void clear_enabled();
  static const int kEnabledFieldNumber = 7;
  inline bool enabled() const;
  inline void set_enabled(bool value);

  // optional int32 gainMode = 8;
  inline bool has_gainmode() const;
  inline void clear_gainmode();
  static const int kGainModeFieldNumber = 8;
  inline ::google::protobuf::int32 gainmode() const;
  inline void set_gainmode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rx_command_msg.RxCommandRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_frequency();
  inline void clear_has_frequency();
  inline void set_has_gain();
  inline void clear_has_gain();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_enabled();
  inline void clear_has_enabled();
  inline void set_has_gainmode();
  inline void clear_has_gainmode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int32 channel_;
  float frequency_;
  ::std::string* guid_;
  static ::std::string* _default_guid_;
  ::google::protobuf::int32 gain_;
  ::google::protobuf::int32 priority_;
  bool enabled_;
  ::google::protobuf::int32 gainmode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_RxCommandMessages_2eproto();
  friend void protobuf_AssignDesc_RxCommandMessages_2eproto();
  friend void protobuf_ShutdownFile_RxCommandMessages_2eproto();

  void InitAsDefaultInstance();
  static RxCommandRequest* default_instance_;
};
// -------------------------------------------------------------------

class RxCommandResponse : public ::google::protobuf::Message {
 public:
  RxCommandResponse();
  virtual ~RxCommandResponse();

  RxCommandResponse(const RxCommandResponse& from);

  inline RxCommandResponse& operator=(const RxCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RxCommandResponse& default_instance();

  void Swap(RxCommandResponse* other);

  // implements Message ----------------------------------------------

  RxCommandResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RxCommandResponse& from);
  void MergeFrom(const RxCommandResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "RXCOMMANDRESPONSE"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional float frequency = 3;
  inline bool has_frequency() const;
  inline void clear_frequency();
  static const int kFrequencyFieldNumber = 3;
  inline float frequency() const;
  inline void set_frequency(float value);

  // optional int32 gain = 4;
  inline bool has_gain() const;
  inline void clear_gain();
  static const int kGainFieldNumber = 4;
  inline ::google::protobuf::int32 gain() const;
  inline void set_gain(::google::protobuf::int32 value);

  // optional string guid = 5 [default = "UNSPECIFIED"];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 5;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional int32 priority = 6 [default = 100];
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 6;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);

  // optional bool enabled = 7;
  inline bool has_enabled() const;
  inline void clear_enabled();
  static const int kEnabledFieldNumber = 7;
  inline bool enabled() const;
  inline void set_enabled(bool value);

  // optional int32 gainMode = 8;
  inline bool has_gainmode() const;
  inline void clear_gainmode();
  static const int kGainModeFieldNumber = 8;
  inline ::google::protobuf::int32 gainmode() const;
  inline void set_gainmode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rx_command_msg.RxCommandResponse)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_frequency();
  inline void clear_has_frequency();
  inline void set_has_gain();
  inline void clear_has_gain();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_enabled();
  inline void clear_has_enabled();
  inline void set_has_gainmode();
  inline void clear_has_gainmode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int32 channel_;
  float frequency_;
  ::std::string* guid_;
  static ::std::string* _default_guid_;
  ::google::protobuf::int32 gain_;
  ::google::protobuf::int32 priority_;
  bool enabled_;
  ::google::protobuf::int32 gainmode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_RxCommandMessages_2eproto();
  friend void protobuf_AssignDesc_RxCommandMessages_2eproto();
  friend void protobuf_ShutdownFile_RxCommandMessages_2eproto();

  void InitAsDefaultInstance();
  static RxCommandResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// RxCommandRequest

// optional string msgName = 1 [default = "RXCOMMANDREQUEST"];
inline bool RxCommandRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RxCommandRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RxCommandRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RxCommandRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& RxCommandRequest::msgname() const {
  return *msgname_;
}
inline void RxCommandRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void RxCommandRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void RxCommandRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RxCommandRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* RxCommandRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void RxCommandRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 channel = 2;
inline bool RxCommandRequest::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RxCommandRequest::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RxCommandRequest::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RxCommandRequest::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 RxCommandRequest::channel() const {
  return channel_;
}
inline void RxCommandRequest::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional float frequency = 3;
inline bool RxCommandRequest::has_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RxCommandRequest::set_has_frequency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RxCommandRequest::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RxCommandRequest::clear_frequency() {
  frequency_ = 0;
  clear_has_frequency();
}
inline float RxCommandRequest::frequency() const {
  return frequency_;
}
inline void RxCommandRequest::set_frequency(float value) {
  set_has_frequency();
  frequency_ = value;
}

// optional int32 gain = 4;
inline bool RxCommandRequest::has_gain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RxCommandRequest::set_has_gain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RxCommandRequest::clear_has_gain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RxCommandRequest::clear_gain() {
  gain_ = 0;
  clear_has_gain();
}
inline ::google::protobuf::int32 RxCommandRequest::gain() const {
  return gain_;
}
inline void RxCommandRequest::set_gain(::google::protobuf::int32 value) {
  set_has_gain();
  gain_ = value;
}

// optional string guid = 5 [default = "UNSPECIFIED"];
inline bool RxCommandRequest::has_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RxCommandRequest::set_has_guid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RxCommandRequest::clear_has_guid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RxCommandRequest::clear_guid() {
  if (guid_ != _default_guid_) {
    guid_->assign(*_default_guid_);
  }
  clear_has_guid();
}
inline const ::std::string& RxCommandRequest::guid() const {
  return *guid_;
}
inline void RxCommandRequest::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == _default_guid_) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void RxCommandRequest::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == _default_guid_) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void RxCommandRequest::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == _default_guid_) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RxCommandRequest::mutable_guid() {
  set_has_guid();
  if (guid_ == _default_guid_) {
    guid_ = new ::std::string(*_default_guid_);
  }
  return guid_;
}
inline ::std::string* RxCommandRequest::release_guid() {
  clear_has_guid();
  if (guid_ == _default_guid_) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(_default_guid_);
    return temp;
  }
}
inline void RxCommandRequest::set_allocated_guid(::std::string* guid) {
  if (guid_ != _default_guid_) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(_default_guid_);
  }
}

// optional int32 priority = 6 [default = 100];
inline bool RxCommandRequest::has_priority() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RxCommandRequest::set_has_priority() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RxCommandRequest::clear_has_priority() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RxCommandRequest::clear_priority() {
  priority_ = 100;
  clear_has_priority();
}
inline ::google::protobuf::int32 RxCommandRequest::priority() const {
  return priority_;
}
inline void RxCommandRequest::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
}

// optional bool enabled = 7;
inline bool RxCommandRequest::has_enabled() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RxCommandRequest::set_has_enabled() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RxCommandRequest::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RxCommandRequest::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool RxCommandRequest::enabled() const {
  return enabled_;
}
inline void RxCommandRequest::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
}

// optional int32 gainMode = 8;
inline bool RxCommandRequest::has_gainmode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RxCommandRequest::set_has_gainmode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RxCommandRequest::clear_has_gainmode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RxCommandRequest::clear_gainmode() {
  gainmode_ = 0;
  clear_has_gainmode();
}
inline ::google::protobuf::int32 RxCommandRequest::gainmode() const {
  return gainmode_;
}
inline void RxCommandRequest::set_gainmode(::google::protobuf::int32 value) {
  set_has_gainmode();
  gainmode_ = value;
}

// -------------------------------------------------------------------

// RxCommandResponse

// optional string msgName = 1 [default = "RXCOMMANDRESPONSE"];
inline bool RxCommandResponse::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RxCommandResponse::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RxCommandResponse::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RxCommandResponse::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& RxCommandResponse::msgname() const {
  return *msgname_;
}
inline void RxCommandResponse::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void RxCommandResponse::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void RxCommandResponse::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RxCommandResponse::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* RxCommandResponse::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void RxCommandResponse::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 channel = 2;
inline bool RxCommandResponse::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RxCommandResponse::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RxCommandResponse::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RxCommandResponse::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 RxCommandResponse::channel() const {
  return channel_;
}
inline void RxCommandResponse::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional float frequency = 3;
inline bool RxCommandResponse::has_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RxCommandResponse::set_has_frequency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RxCommandResponse::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RxCommandResponse::clear_frequency() {
  frequency_ = 0;
  clear_has_frequency();
}
inline float RxCommandResponse::frequency() const {
  return frequency_;
}
inline void RxCommandResponse::set_frequency(float value) {
  set_has_frequency();
  frequency_ = value;
}

// optional int32 gain = 4;
inline bool RxCommandResponse::has_gain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RxCommandResponse::set_has_gain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RxCommandResponse::clear_has_gain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RxCommandResponse::clear_gain() {
  gain_ = 0;
  clear_has_gain();
}
inline ::google::protobuf::int32 RxCommandResponse::gain() const {
  return gain_;
}
inline void RxCommandResponse::set_gain(::google::protobuf::int32 value) {
  set_has_gain();
  gain_ = value;
}

// optional string guid = 5 [default = "UNSPECIFIED"];
inline bool RxCommandResponse::has_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RxCommandResponse::set_has_guid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RxCommandResponse::clear_has_guid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RxCommandResponse::clear_guid() {
  if (guid_ != _default_guid_) {
    guid_->assign(*_default_guid_);
  }
  clear_has_guid();
}
inline const ::std::string& RxCommandResponse::guid() const {
  return *guid_;
}
inline void RxCommandResponse::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == _default_guid_) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void RxCommandResponse::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == _default_guid_) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void RxCommandResponse::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == _default_guid_) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RxCommandResponse::mutable_guid() {
  set_has_guid();
  if (guid_ == _default_guid_) {
    guid_ = new ::std::string(*_default_guid_);
  }
  return guid_;
}
inline ::std::string* RxCommandResponse::release_guid() {
  clear_has_guid();
  if (guid_ == _default_guid_) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(_default_guid_);
    return temp;
  }
}
inline void RxCommandResponse::set_allocated_guid(::std::string* guid) {
  if (guid_ != _default_guid_) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(_default_guid_);
  }
}

// optional int32 priority = 6 [default = 100];
inline bool RxCommandResponse::has_priority() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RxCommandResponse::set_has_priority() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RxCommandResponse::clear_has_priority() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RxCommandResponse::clear_priority() {
  priority_ = 100;
  clear_has_priority();
}
inline ::google::protobuf::int32 RxCommandResponse::priority() const {
  return priority_;
}
inline void RxCommandResponse::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
}

// optional bool enabled = 7;
inline bool RxCommandResponse::has_enabled() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RxCommandResponse::set_has_enabled() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RxCommandResponse::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RxCommandResponse::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool RxCommandResponse::enabled() const {
  return enabled_;
}
inline void RxCommandResponse::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
}

// optional int32 gainMode = 8;
inline bool RxCommandResponse::has_gainmode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RxCommandResponse::set_has_gainmode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RxCommandResponse::clear_has_gainmode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RxCommandResponse::clear_gainmode() {
  gainmode_ = 0;
  clear_has_gainmode();
}
inline ::google::protobuf::int32 RxCommandResponse::gainmode() const {
  return gainmode_;
}
inline void RxCommandResponse::set_gainmode(::google::protobuf::int32 value) {
  set_has_gainmode();
  gainmode_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rx_command_msg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RxCommandMessages_2eproto__INCLUDED
