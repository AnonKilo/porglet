// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FalconAntennaMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FalconAntennaMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace falcon_antenna_msg {

namespace {

const ::google::protobuf::Descriptor* RotorStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotorStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotorSlew_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotorSlew_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RotorSlew_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RotorPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotorPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotorStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotorStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryRotorPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryRotorPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyRotorScanRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyRotorScanRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* AntennaTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AntennaTrack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AntennaTrack_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AntennaScan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AntennaScan_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AntennaScan_ScanType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ModifyRotorOffset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyRotorOffset_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotorPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotorPosition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RotorPosition_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RotorStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotorStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RotorStatus_Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RotorStatus_CutoutStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SwitchMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwitchMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwitchMapInputFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwitchMapInputFail_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuerySwitchStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuerySwitchStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwitchStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwitchStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SwitchStatus_Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SwitchStatus_Response_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SlaveAntWaitScan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlaveAntWaitScan_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FalconAntennaMessages_2eproto() {
  protobuf_AddDesc_FalconAntennaMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FalconAntennaMessages.proto");
  GOOGLE_CHECK(file != NULL);
  RotorStep_descriptor_ = file->message_type(0);
  static const int RotorStep_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStep, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStep, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStep, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStep, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStep, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStep, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStep, msgid_),
  };
  RotorStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotorStep_descriptor_,
      RotorStep::default_instance_,
      RotorStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotorStep));
  RotorSlew_descriptor_ = file->message_type(1);
  static const int RotorSlew_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorSlew, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorSlew, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorSlew, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorSlew, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorSlew, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorSlew, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorSlew, rettostart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorSlew, slewtype_),
  };
  RotorSlew_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotorSlew_descriptor_,
      RotorSlew::default_instance_,
      RotorSlew_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorSlew, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorSlew, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotorSlew));
  RotorSlew_Type_descriptor_ = RotorSlew_descriptor_->enum_type(0);
  RotorPoint_descriptor_ = file->message_type(2);
  static const int RotorPoint_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPoint, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPoint, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPoint, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPoint, tracklat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPoint, tracklon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPoint, trackalt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPoint, msgid_),
  };
  RotorPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotorPoint_descriptor_,
      RotorPoint::default_instance_,
      RotorPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotorPoint));
  RotorStop_descriptor_ = file->message_type(3);
  static const int RotorStop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStop, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStop, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStop, appid_),
  };
  RotorStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotorStop_descriptor_,
      RotorStop::default_instance_,
      RotorStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotorStop));
  QueryRotorPosition_descriptor_ = file->message_type(4);
  static const int QueryRotorPosition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRotorPosition, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRotorPosition, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRotorPosition, appid_),
  };
  QueryRotorPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryRotorPosition_descriptor_,
      QueryRotorPosition::default_instance_,
      QueryRotorPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRotorPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRotorPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryRotorPosition));
  ModifyRotorScanRange_descriptor_ = file->message_type(5);
  static const int ModifyRotorScanRange_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRotorScanRange, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRotorScanRange, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRotorScanRange, minscanangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRotorScanRange, maxscanangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRotorScanRange, msgid_),
  };
  ModifyRotorScanRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyRotorScanRange_descriptor_,
      ModifyRotorScanRange::default_instance_,
      ModifyRotorScanRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRotorScanRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRotorScanRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyRotorScanRange));
  AntennaTrack_descriptor_ = file->message_type(6);
  static const int AntennaTrack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaTrack, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaTrack, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaTrack, trackstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaTrack, msgid_),
  };
  AntennaTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AntennaTrack_descriptor_,
      AntennaTrack::default_instance_,
      AntennaTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AntennaTrack));
  AntennaTrack_Status_descriptor_ = AntennaTrack_descriptor_->enum_type(0);
  AntennaScan_descriptor_ = file->message_type(7);
  static const int AntennaScan_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScan, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScan, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScan, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScan, scantype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScan, scanstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScan, scanend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScan, scanvelocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScan, msgid_),
  };
  AntennaScan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AntennaScan_descriptor_,
      AntennaScan::default_instance_,
      AntennaScan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaScan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AntennaScan));
  AntennaScan_ScanType_descriptor_ = AntennaScan_descriptor_->enum_type(0);
  ModifyRotorOffset_descriptor_ = file->message_type(8);
  static const int ModifyRotorOffset_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRotorOffset, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRotorOffset, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRotorOffset, azimuthoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRotorOffset, elevationoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRotorOffset, msgid_),
  };
  ModifyRotorOffset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyRotorOffset_descriptor_,
      ModifyRotorOffset::default_instance_,
      ModifyRotorOffset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRotorOffset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRotorOffset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyRotorOffset));
  RotorPosition_descriptor_ = file->message_type(9);
  static const int RotorPosition_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPosition, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPosition, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPosition, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPosition, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPosition, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPosition, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPosition, velocity_),
  };
  RotorPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotorPosition_descriptor_,
      RotorPosition::default_instance_,
      RotorPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotorPosition));
  RotorPosition_Status_descriptor_ = RotorPosition_descriptor_->enum_type(0);
  RotorStatus_descriptor_ = file->message_type(10);
  static const int RotorStatus_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStatus, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStatus, minscanangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStatus, maxscanangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStatus, azoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStatus, eloffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStatus, elctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStatus, velctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStatus, cutout_),
  };
  RotorStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotorStatus_descriptor_,
      RotorStatus::default_instance_,
      RotorStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotorStatus));
  RotorStatus_Status_descriptor_ = RotorStatus_descriptor_->enum_type(0);
  RotorStatus_CutoutStatus_descriptor_ = RotorStatus_descriptor_->enum_type(1);
  SwitchMap_descriptor_ = file->message_type(11);
  static const int SwitchMap_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchMap, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchMap, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchMap, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchMap, inputport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchMap, outputport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchMap, msgid_),
  };
  SwitchMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwitchMap_descriptor_,
      SwitchMap::default_instance_,
      SwitchMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwitchMap));
  SwitchMapInputFail_descriptor_ = file->message_type(12);
  static const int SwitchMapInputFail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchMapInputFail, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchMapInputFail, inputportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchMapInputFail, map_),
  };
  SwitchMapInputFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwitchMapInputFail_descriptor_,
      SwitchMapInputFail::default_instance_,
      SwitchMapInputFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchMapInputFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchMapInputFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwitchMapInputFail));
  QuerySwitchStatus_descriptor_ = file->message_type(13);
  static const int QuerySwitchStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySwitchStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySwitchStatus, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySwitchStatus, appid_),
  };
  QuerySwitchStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuerySwitchStatus_descriptor_,
      QuerySwitchStatus::default_instance_,
      QuerySwitchStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySwitchStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySwitchStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuerySwitchStatus));
  SwitchStatus_descriptor_ = file->message_type(14);
  static const int SwitchStatus_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchStatus, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchStatus, outputports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchStatus, inputports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchStatus, cmdstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchStatus, serialport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchStatus, state_),
  };
  SwitchStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwitchStatus_descriptor_,
      SwitchStatus::default_instance_,
      SwitchStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwitchStatus));
  SwitchStatus_Status_descriptor_ = SwitchStatus_descriptor_->enum_type(0);
  SwitchStatus_Response_descriptor_ = SwitchStatus_descriptor_->enum_type(1);
  SlaveAntWaitScan_descriptor_ = file->message_type(15);
  static const int SlaveAntWaitScan_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveAntWaitScan, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveAntWaitScan, scanstate_),
  };
  SlaveAntWaitScan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlaveAntWaitScan_descriptor_,
      SlaveAntWaitScan::default_instance_,
      SlaveAntWaitScan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveAntWaitScan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveAntWaitScan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlaveAntWaitScan));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FalconAntennaMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotorStep_descriptor_, &RotorStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotorSlew_descriptor_, &RotorSlew::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotorPoint_descriptor_, &RotorPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotorStop_descriptor_, &RotorStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryRotorPosition_descriptor_, &QueryRotorPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyRotorScanRange_descriptor_, &ModifyRotorScanRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AntennaTrack_descriptor_, &AntennaTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AntennaScan_descriptor_, &AntennaScan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyRotorOffset_descriptor_, &ModifyRotorOffset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotorPosition_descriptor_, &RotorPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotorStatus_descriptor_, &RotorStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwitchMap_descriptor_, &SwitchMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwitchMapInputFail_descriptor_, &SwitchMapInputFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuerySwitchStatus_descriptor_, &QuerySwitchStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwitchStatus_descriptor_, &SwitchStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlaveAntWaitScan_descriptor_, &SlaveAntWaitScan::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FalconAntennaMessages_2eproto() {
  delete RotorStep::default_instance_;
  delete RotorStep_reflection_;
  delete RotorStep::_default_msgname_;
  delete RotorSlew::default_instance_;
  delete RotorSlew_reflection_;
  delete RotorSlew::_default_msgname_;
  delete RotorPoint::default_instance_;
  delete RotorPoint_reflection_;
  delete RotorPoint::_default_msgname_;
  delete RotorStop::default_instance_;
  delete RotorStop_reflection_;
  delete RotorStop::_default_msgname_;
  delete QueryRotorPosition::default_instance_;
  delete QueryRotorPosition_reflection_;
  delete QueryRotorPosition::_default_msgname_;
  delete ModifyRotorScanRange::default_instance_;
  delete ModifyRotorScanRange_reflection_;
  delete ModifyRotorScanRange::_default_msgname_;
  delete AntennaTrack::default_instance_;
  delete AntennaTrack_reflection_;
  delete AntennaTrack::_default_msgname_;
  delete AntennaScan::default_instance_;
  delete AntennaScan_reflection_;
  delete AntennaScan::_default_msgname_;
  delete ModifyRotorOffset::default_instance_;
  delete ModifyRotorOffset_reflection_;
  delete ModifyRotorOffset::_default_msgname_;
  delete RotorPosition::default_instance_;
  delete RotorPosition_reflection_;
  delete RotorPosition::_default_msgname_;
  delete RotorStatus::default_instance_;
  delete RotorStatus_reflection_;
  delete RotorStatus::_default_msgname_;
  delete SwitchMap::default_instance_;
  delete SwitchMap_reflection_;
  delete SwitchMap::_default_msgname_;
  delete SwitchMapInputFail::default_instance_;
  delete SwitchMapInputFail_reflection_;
  delete SwitchMapInputFail::_default_msgname_;
  delete QuerySwitchStatus::default_instance_;
  delete QuerySwitchStatus_reflection_;
  delete QuerySwitchStatus::_default_msgname_;
  delete SwitchStatus::default_instance_;
  delete SwitchStatus_reflection_;
  delete SwitchStatus::_default_msgname_;
  delete SlaveAntWaitScan::default_instance_;
  delete SlaveAntWaitScan_reflection_;
  delete SlaveAntWaitScan::_default_msgname_;
}

void protobuf_AddDesc_FalconAntennaMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033FalconAntennaMessages.proto\022\022falcon_an"
    "tenna_msg\"\226\001\n\tRotorStep\022\033\n\007msgName\030\001 \001(\t"
    ":\nROTOR_STEP\022\r\n\005resID\030\002 \001(\t\022\r\n\005appID\030\003 \001"
    "(\005\022\023\n\007azimuth\030\004 \001(\002:\002-1\022\025\n\televation\030\005 \001"
    "(\002:\002-1\022\020\n\010velocity\030\006 \001(\002\022\020\n\005msgID\030\007 \001(\001:"
    "\0010\"\366\001\n\tRotorSlew\022\033\n\007msgName\030\001 \001(\t:\nROTOR"
    "_SLEW\022\r\n\005resID\030\002 \001(\t\022\r\n\005appID\030\003 \001(\005\022\017\n\007a"
    "zimuth\030\004 \003(\002\022\021\n\televation\030\005 \001(\002\022\020\n\010veloc"
    "ity\030\006 \001(\002\022\022\n\nretToStart\030\007 \001(\010\022@\n\010slewTyp"
    "e\030\010 \001(\0162\".falcon_antenna_msg.RotorSlew.T"
    "ype:\nCONTINUOUS\"\"\n\004Type\022\016\n\nCONTINUOUS\020\000\022"
    "\n\n\006ENERGY\020\001\"\220\001\n\nRotorPoint\022\034\n\007msgName\030\001 "
    "\001(\t:\013ROTOR_POINT\022\r\n\005resID\030\002 \001(\t\022\r\n\005appID"
    "\030\003 \001(\005\022\020\n\010trackLat\030\004 \001(\002\022\020\n\010trackLon\030\005 \001"
    "(\002\022\020\n\010trackAlt\030\006 \001(\002\022\020\n\005msgID\030\007 \001(\001:\0010\"F"
    "\n\tRotorStop\022\033\n\007msgName\030\001 \001(\t:\nROTOR_STOP"
    "\022\r\n\005resID\030\002 \001(\t\022\r\n\005appID\030\003 \001(\005\"Y\n\022QueryR"
    "otorPosition\022%\n\007msgName\030\001 \001(\t:\024QUERY_ROT"
    "OR_POSITION\022\r\n\005resID\030\002 \001(\t\022\r\n\005appID\030\003 \001("
    "\005\"\225\001\n\024ModifyRotorScanRange\022(\n\007msgName\030\001 "
    "\001(\t:\027MODIFY_ROTOR_SCAN_RANGE\022\r\n\005resID\030\002 "
    "\001(\t\022\030\n\014minScanAngle\030\003 \001(\002:\002-1\022\030\n\014maxScan"
    "Angle\030\004 \001(\002:\002-1\022\020\n\005msgID\030\005 \001(\001:\0010\"\255\001\n\014An"
    "tennaTrack\022\036\n\007msgName\030\001 \001(\t:\rANTENNA_TRA"
    "CK\022\r\n\005appID\030\002 \001(\005\022A\n\013trackStatus\030\003 \001(\0162\'"
    ".falcon_antenna_msg.AntennaTrack.Status:"
    "\003OFF\022\020\n\005msgID\030\004 \001(\001:\0010\"\031\n\006Status\022\007\n\003OFF\020"
    "\000\022\006\n\002ON\020\001\"\266\002\n\013AntennaScan\022\035\n\007msgName\030\001 \001"
    "(\t:\014ANTENNA_SCAN\022\r\n\005resID\030\002 \001(\t\022\r\n\005appID"
    "\030\003 \001(\005\022:\n\010scanType\030\004 \001(\0162(.falcon_antenn"
    "a_msg.AntennaScan.ScanType\022\021\n\tscanStart\030"
    "\005 \001(\002\022\017\n\007scanEnd\030\006 \001(\002\022\024\n\014scanVelocity\030\007"
    " \001(\002\022\020\n\005msgID\030\010 \001(\001:\0010\"b\n\010ScanType\022\007\n\003OF"
    "F\020\000\022\016\n\nCONTINUOUS\020\001\022\n\n\006ENERGY\020\002\022\023\n\017CONTI"
    "NUOUS_STEP\020\003\022\017\n\013ENERGY_STEP\020\004\022\013\n\007DEFAULT"
    "\020\005\"\220\001\n\021ModifyRotorOffset\022$\n\007msgName\030\001 \001("
    "\t:\023MODIFY_ROTOR_OFFSET\022\r\n\005resID\030\002 \001(\t\022\030\n"
    "\razimuthOffset\030\003 \001(\002:\0010\022\032\n\017elevationOffs"
    "et\030\004 \001(\002:\0010\022\020\n\005msgID\030\005 \001(\001:\0010\"\231\002\n\rRotorP"
    "osition\022\037\n\007msgName\030\001 \001(\t:\016ROTOR_POSITION"
    "\022\r\n\005resID\030\002 \001(\t\022>\n\006status\030\003 \001(\0162(.falcon"
    "_antenna_msg.RotorPosition.Status:\004IDLE\022"
    "\014\n\004time\030\004 \001(\002\022\017\n\007azimuth\030\005 \001(\002\022\021\n\televat"
    "ion\030\006 \001(\002\022\020\n\010velocity\030\007 \001(\002\"T\n\006Status\022\010\n"
    "\004IDLE\020\000\022\n\n\006MOVING\020\001\022\010\n\004DONE\020\002\022\n\n\006FAILED\020"
    "\003\022\r\n\tCANCELLED\020\004\022\017\n\013MOVING_SLEW\020\005\"\264\003\n\013Ro"
    "torStatus\022\035\n\007msgName\030\001 \001(\t:\014ROTOR_STATUS"
    "\022\r\n\005resID\030\002 \001(\t\022A\n\006status\030\003 \001(\0162&.falcon"
    "_antenna_msg.RotorStatus.Status:\tCONNECT"
    "ED\022\024\n\014minScanAngle\030\004 \001(\002\022\024\n\014maxScanAngle"
    "\030\005 \001(\002\022\020\n\010azOffset\030\006 \001(\002\022\020\n\010elOffset\030\007 \001"
    "(\002\022\025\n\006elCtrl\030\010 \001(\010:\005false\022\026\n\007velCtrl\030\t \001"
    "(\010:\005false\022G\n\006cutout\030\n \001(\0162,.falcon_anten"
    "na_msg.RotorStatus.CutoutStatus:\tNO_CUTO"
    "UT\"A\n\006Status\022\025\n\010NO_ROTOR\020\377\377\377\377\377\377\377\377\377\001\022\021\n\rN"
    "O_CONNECTION\020\000\022\r\n\tCONNECTED\020\001\")\n\014CutoutS"
    "tatus\022\n\n\006CUTOUT\020\000\022\r\n\tNO_CUTOUT\020\001\"\177\n\tSwit"
    "chMap\022\033\n\007msgName\030\001 \001(\t:\nSWITCH_MAP\022\r\n\005re"
    "sID\030\002 \001(\t\022\r\n\005appID\030\003 \001(\005\022\021\n\tinputPort\030\004 "
    "\001(\005\022\022\n\noutputPort\030\005 \001(\005\022\020\n\005msgID\030\006 \001(\001:\001"
    "0\"}\n\022SwitchMapInputFail\022&\n\007msgName\030\001 \001(\t"
    ":\025SWITCH_MAP_INPUT_FAIL\022\023\n\013inputPortID\030\002"
    " \001(\t\022*\n\003map\030\003 \001(\0132\035.falcon_antenna_msg.S"
    "witchMap\"W\n\021QuerySwitchStatus\022$\n\007msgName"
    "\030\001 \001(\t:\023QUERY_SWITCH_STATUS\022\r\n\005resID\030\002 \001"
    "(\t\022\r\n\005appID\030\003 \001(\005\"\205\003\n\014SwitchStatus\022\036\n\007ms"
    "gName\030\001 \001(\t:\rSWITCH_STATUS\022\r\n\005resID\030\002 \001("
    "\t\022\023\n\013outputPorts\030\003 \003(\005\022\022\n\ninputPorts\030\004 \003"
    "(\005\022B\n\006status\030\005 \001(\0162\'.falcon_antenna_msg."
    "SwitchStatus.Status:\tCONNECTED\022<\n\tcmdSta"
    "tus\030\006 \001(\0162).falcon_antenna_msg.SwitchSta"
    "tus.Response\022\022\n\nserialPort\030\007 \001(\t\022\r\n\005stat"
    "e\030\010 \003(\t\"I\n\006Status\022\032\n\rNO_CONNECTION\020\376\377\377\377\377"
    "\377\377\377\377\001\022\024\n\007NO_RFSW\020\377\377\377\377\377\377\377\377\377\001\022\r\n\tCONNECTED"
    "\020\000\"-\n\010Response\022\024\n\007FAILURE\020\377\377\377\377\377\377\377\377\377\001\022\013\n\007"
    "SUCCESS\020\000\"K\n\020SlaveAntWaitScan\022$\n\007msgName"
    "\030\001 \001(\t:\023SLAVE_ANT_WAIT_SCAN\022\021\n\tScanState"
    "\030\002 \001(\010B\025\n\023fv.protos.kepsvisor", 3109);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FalconAntennaMessages.proto", &protobuf_RegisterTypes);
  RotorStep::_default_msgname_ =
      new ::std::string("ROTOR_STEP", 10);
  RotorStep::default_instance_ = new RotorStep();
  RotorSlew::_default_msgname_ =
      new ::std::string("ROTOR_SLEW", 10);
  RotorSlew::default_instance_ = new RotorSlew();
  RotorPoint::_default_msgname_ =
      new ::std::string("ROTOR_POINT", 11);
  RotorPoint::default_instance_ = new RotorPoint();
  RotorStop::_default_msgname_ =
      new ::std::string("ROTOR_STOP", 10);
  RotorStop::default_instance_ = new RotorStop();
  QueryRotorPosition::_default_msgname_ =
      new ::std::string("QUERY_ROTOR_POSITION", 20);
  QueryRotorPosition::default_instance_ = new QueryRotorPosition();
  ModifyRotorScanRange::_default_msgname_ =
      new ::std::string("MODIFY_ROTOR_SCAN_RANGE", 23);
  ModifyRotorScanRange::default_instance_ = new ModifyRotorScanRange();
  AntennaTrack::_default_msgname_ =
      new ::std::string("ANTENNA_TRACK", 13);
  AntennaTrack::default_instance_ = new AntennaTrack();
  AntennaScan::_default_msgname_ =
      new ::std::string("ANTENNA_SCAN", 12);
  AntennaScan::default_instance_ = new AntennaScan();
  ModifyRotorOffset::_default_msgname_ =
      new ::std::string("MODIFY_ROTOR_OFFSET", 19);
  ModifyRotorOffset::default_instance_ = new ModifyRotorOffset();
  RotorPosition::_default_msgname_ =
      new ::std::string("ROTOR_POSITION", 14);
  RotorPosition::default_instance_ = new RotorPosition();
  RotorStatus::_default_msgname_ =
      new ::std::string("ROTOR_STATUS", 12);
  RotorStatus::default_instance_ = new RotorStatus();
  SwitchMap::_default_msgname_ =
      new ::std::string("SWITCH_MAP", 10);
  SwitchMap::default_instance_ = new SwitchMap();
  SwitchMapInputFail::_default_msgname_ =
      new ::std::string("SWITCH_MAP_INPUT_FAIL", 21);
  SwitchMapInputFail::default_instance_ = new SwitchMapInputFail();
  QuerySwitchStatus::_default_msgname_ =
      new ::std::string("QUERY_SWITCH_STATUS", 19);
  QuerySwitchStatus::default_instance_ = new QuerySwitchStatus();
  SwitchStatus::_default_msgname_ =
      new ::std::string("SWITCH_STATUS", 13);
  SwitchStatus::default_instance_ = new SwitchStatus();
  SlaveAntWaitScan::_default_msgname_ =
      new ::std::string("SLAVE_ANT_WAIT_SCAN", 19);
  SlaveAntWaitScan::default_instance_ = new SlaveAntWaitScan();
  RotorStep::default_instance_->InitAsDefaultInstance();
  RotorSlew::default_instance_->InitAsDefaultInstance();
  RotorPoint::default_instance_->InitAsDefaultInstance();
  RotorStop::default_instance_->InitAsDefaultInstance();
  QueryRotorPosition::default_instance_->InitAsDefaultInstance();
  ModifyRotorScanRange::default_instance_->InitAsDefaultInstance();
  AntennaTrack::default_instance_->InitAsDefaultInstance();
  AntennaScan::default_instance_->InitAsDefaultInstance();
  ModifyRotorOffset::default_instance_->InitAsDefaultInstance();
  RotorPosition::default_instance_->InitAsDefaultInstance();
  RotorStatus::default_instance_->InitAsDefaultInstance();
  SwitchMap::default_instance_->InitAsDefaultInstance();
  SwitchMapInputFail::default_instance_->InitAsDefaultInstance();
  QuerySwitchStatus::default_instance_->InitAsDefaultInstance();
  SwitchStatus::default_instance_->InitAsDefaultInstance();
  SlaveAntWaitScan::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FalconAntennaMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FalconAntennaMessages_2eproto {
  StaticDescriptorInitializer_FalconAntennaMessages_2eproto() {
    protobuf_AddDesc_FalconAntennaMessages_2eproto();
  }
} static_descriptor_initializer_FalconAntennaMessages_2eproto_;

// ===================================================================

::std::string* RotorStep::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RotorStep::kMsgNameFieldNumber;
const int RotorStep::kResIDFieldNumber;
const int RotorStep::kAppIDFieldNumber;
const int RotorStep::kAzimuthFieldNumber;
const int RotorStep::kElevationFieldNumber;
const int RotorStep::kVelocityFieldNumber;
const int RotorStep::kMsgIDFieldNumber;
#endif  // !_MSC_VER

RotorStep::RotorStep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RotorStep::InitAsDefaultInstance() {
}

RotorStep::RotorStep(const RotorStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RotorStep::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  azimuth_ = -1;
  elevation_ = -1;
  velocity_ = 0;
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotorStep::~RotorStep() {
  SharedDtor();
}

void RotorStep::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (this != default_instance_) {
  }
}

void RotorStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotorStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotorStep_descriptor_;
}

const RotorStep& RotorStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconAntennaMessages_2eproto();
  return *default_instance_;
}

RotorStep* RotorStep::default_instance_ = NULL;

RotorStep* RotorStep::New() const {
  return new RotorStep;
}

void RotorStep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    appid_ = 0;
    azimuth_ = -1;
    elevation_ = -1;
    velocity_ = 0;
    msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotorStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ROTOR_STEP"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appID;
        break;
      }

      // optional int32 appID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_azimuth;
        break;
      }

      // optional float azimuth = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_elevation;
        break;
      }

      // optional float elevation = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_velocity;
        break;
      }

      // optional float velocity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_msgID;
        break;
      }

      // optional double msgID = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_msgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RotorStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ROTOR_STEP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  // optional float azimuth = 4 [default = -1];
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->azimuth(), output);
  }

  // optional float elevation = 5 [default = -1];
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->elevation(), output);
  }

  // optional float velocity = 6;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->velocity(), output);
  }

  // optional double msgID = 7 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RotorStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ROTOR_STEP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  // optional float azimuth = 4 [default = -1];
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->azimuth(), target);
  }

  // optional float elevation = 5 [default = -1];
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->elevation(), target);
  }

  // optional float velocity = 6;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->velocity(), target);
  }

  // optional double msgID = 7 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RotorStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ROTOR_STEP"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional int32 appID = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional float azimuth = 4 [default = -1];
    if (has_azimuth()) {
      total_size += 1 + 4;
    }

    // optional float elevation = 5 [default = -1];
    if (has_elevation()) {
      total_size += 1 + 4;
    }

    // optional float velocity = 6;
    if (has_velocity()) {
      total_size += 1 + 4;
    }

    // optional double msgID = 7 [default = 0];
    if (has_msgid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotorStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotorStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotorStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotorStep::MergeFrom(const RotorStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotorStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotorStep::CopyFrom(const RotorStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotorStep::IsInitialized() const {

  return true;
}

void RotorStep::Swap(RotorStep* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(appid_, other->appid_);
    std::swap(azimuth_, other->azimuth_);
    std::swap(elevation_, other->elevation_);
    std::swap(velocity_, other->velocity_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotorStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotorStep_descriptor_;
  metadata.reflection = RotorStep_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RotorSlew_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotorSlew_Type_descriptor_;
}
bool RotorSlew_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RotorSlew_Type RotorSlew::CONTINUOUS;
const RotorSlew_Type RotorSlew::ENERGY;
const RotorSlew_Type RotorSlew::Type_MIN;
const RotorSlew_Type RotorSlew::Type_MAX;
const int RotorSlew::Type_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* RotorSlew::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RotorSlew::kMsgNameFieldNumber;
const int RotorSlew::kResIDFieldNumber;
const int RotorSlew::kAppIDFieldNumber;
const int RotorSlew::kAzimuthFieldNumber;
const int RotorSlew::kElevationFieldNumber;
const int RotorSlew::kVelocityFieldNumber;
const int RotorSlew::kRetToStartFieldNumber;
const int RotorSlew::kSlewTypeFieldNumber;
#endif  // !_MSC_VER

RotorSlew::RotorSlew()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RotorSlew::InitAsDefaultInstance() {
}

RotorSlew::RotorSlew(const RotorSlew& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RotorSlew::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  elevation_ = 0;
  velocity_ = 0;
  rettostart_ = false;
  slewtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotorSlew::~RotorSlew() {
  SharedDtor();
}

void RotorSlew::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (this != default_instance_) {
  }
}

void RotorSlew::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotorSlew::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotorSlew_descriptor_;
}

const RotorSlew& RotorSlew::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconAntennaMessages_2eproto();
  return *default_instance_;
}

RotorSlew* RotorSlew::default_instance_ = NULL;

RotorSlew* RotorSlew::New() const {
  return new RotorSlew;
}

void RotorSlew::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    appid_ = 0;
    elevation_ = 0;
    velocity_ = 0;
    rettostart_ = false;
    slewtype_ = 0;
  }
  azimuth_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotorSlew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ROTOR_SLEW"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appID;
        break;
      }

      // optional int32 appID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_azimuth;
        break;
      }

      // repeated float azimuth = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_azimuth())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_azimuth())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_azimuth;
        if (input->ExpectTag(45)) goto parse_elevation;
        break;
      }

      // optional float elevation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_velocity;
        break;
      }

      // optional float velocity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_retToStart;
        break;
      }

      // optional bool retToStart = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retToStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rettostart_)));
          set_has_rettostart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_slewType;
        break;
      }

      // optional .falcon_antenna_msg.RotorSlew.Type slewType = 8 [default = CONTINUOUS];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slewType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_antenna_msg::RotorSlew_Type_IsValid(value)) {
            set_slewtype(static_cast< ::falcon_antenna_msg::RotorSlew_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RotorSlew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ROTOR_SLEW"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  // repeated float azimuth = 4;
  for (int i = 0; i < this->azimuth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->azimuth(i), output);
  }

  // optional float elevation = 5;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->elevation(), output);
  }

  // optional float velocity = 6;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->velocity(), output);
  }

  // optional bool retToStart = 7;
  if (has_rettostart()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->rettostart(), output);
  }

  // optional .falcon_antenna_msg.RotorSlew.Type slewType = 8 [default = CONTINUOUS];
  if (has_slewtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->slewtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RotorSlew::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ROTOR_SLEW"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  // repeated float azimuth = 4;
  for (int i = 0; i < this->azimuth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->azimuth(i), target);
  }

  // optional float elevation = 5;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->elevation(), target);
  }

  // optional float velocity = 6;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->velocity(), target);
  }

  // optional bool retToStart = 7;
  if (has_rettostart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->rettostart(), target);
  }

  // optional .falcon_antenna_msg.RotorSlew.Type slewType = 8 [default = CONTINUOUS];
  if (has_slewtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->slewtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RotorSlew::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ROTOR_SLEW"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional int32 appID = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional float elevation = 5;
    if (has_elevation()) {
      total_size += 1 + 4;
    }

    // optional float velocity = 6;
    if (has_velocity()) {
      total_size += 1 + 4;
    }

    // optional bool retToStart = 7;
    if (has_rettostart()) {
      total_size += 1 + 1;
    }

    // optional .falcon_antenna_msg.RotorSlew.Type slewType = 8 [default = CONTINUOUS];
    if (has_slewtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->slewtype());
    }

  }
  // repeated float azimuth = 4;
  {
    int data_size = 0;
    data_size = 4 * this->azimuth_size();
    total_size += 1 * this->azimuth_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotorSlew::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotorSlew* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotorSlew*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotorSlew::MergeFrom(const RotorSlew& from) {
  GOOGLE_CHECK_NE(&from, this);
  azimuth_.MergeFrom(from.azimuth_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_rettostart()) {
      set_rettostart(from.rettostart());
    }
    if (from.has_slewtype()) {
      set_slewtype(from.slewtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotorSlew::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotorSlew::CopyFrom(const RotorSlew& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotorSlew::IsInitialized() const {

  return true;
}

void RotorSlew::Swap(RotorSlew* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(appid_, other->appid_);
    azimuth_.Swap(&other->azimuth_);
    std::swap(elevation_, other->elevation_);
    std::swap(velocity_, other->velocity_);
    std::swap(rettostart_, other->rettostart_);
    std::swap(slewtype_, other->slewtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotorSlew::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotorSlew_descriptor_;
  metadata.reflection = RotorSlew_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RotorPoint::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RotorPoint::kMsgNameFieldNumber;
const int RotorPoint::kResIDFieldNumber;
const int RotorPoint::kAppIDFieldNumber;
const int RotorPoint::kTrackLatFieldNumber;
const int RotorPoint::kTrackLonFieldNumber;
const int RotorPoint::kTrackAltFieldNumber;
const int RotorPoint::kMsgIDFieldNumber;
#endif  // !_MSC_VER

RotorPoint::RotorPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RotorPoint::InitAsDefaultInstance() {
}

RotorPoint::RotorPoint(const RotorPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RotorPoint::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  tracklat_ = 0;
  tracklon_ = 0;
  trackalt_ = 0;
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotorPoint::~RotorPoint() {
  SharedDtor();
}

void RotorPoint::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (this != default_instance_) {
  }
}

void RotorPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotorPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotorPoint_descriptor_;
}

const RotorPoint& RotorPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconAntennaMessages_2eproto();
  return *default_instance_;
}

RotorPoint* RotorPoint::default_instance_ = NULL;

RotorPoint* RotorPoint::New() const {
  return new RotorPoint;
}

void RotorPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    appid_ = 0;
    tracklat_ = 0;
    tracklon_ = 0;
    trackalt_ = 0;
    msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotorPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ROTOR_POINT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appID;
        break;
      }

      // optional int32 appID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_trackLat;
        break;
      }

      // optional float trackLat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_trackLat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tracklat_)));
          set_has_tracklat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_trackLon;
        break;
      }

      // optional float trackLon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_trackLon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tracklon_)));
          set_has_tracklon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_trackAlt;
        break;
      }

      // optional float trackAlt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_trackAlt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trackalt_)));
          set_has_trackalt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_msgID;
        break;
      }

      // optional double msgID = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_msgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RotorPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ROTOR_POINT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  // optional float trackLat = 4;
  if (has_tracklat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->tracklat(), output);
  }

  // optional float trackLon = 5;
  if (has_tracklon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->tracklon(), output);
  }

  // optional float trackAlt = 6;
  if (has_trackalt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->trackalt(), output);
  }

  // optional double msgID = 7 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RotorPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ROTOR_POINT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  // optional float trackLat = 4;
  if (has_tracklat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->tracklat(), target);
  }

  // optional float trackLon = 5;
  if (has_tracklon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->tracklon(), target);
  }

  // optional float trackAlt = 6;
  if (has_trackalt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->trackalt(), target);
  }

  // optional double msgID = 7 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RotorPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ROTOR_POINT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional int32 appID = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional float trackLat = 4;
    if (has_tracklat()) {
      total_size += 1 + 4;
    }

    // optional float trackLon = 5;
    if (has_tracklon()) {
      total_size += 1 + 4;
    }

    // optional float trackAlt = 6;
    if (has_trackalt()) {
      total_size += 1 + 4;
    }

    // optional double msgID = 7 [default = 0];
    if (has_msgid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotorPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotorPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotorPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotorPoint::MergeFrom(const RotorPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_tracklat()) {
      set_tracklat(from.tracklat());
    }
    if (from.has_tracklon()) {
      set_tracklon(from.tracklon());
    }
    if (from.has_trackalt()) {
      set_trackalt(from.trackalt());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotorPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotorPoint::CopyFrom(const RotorPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotorPoint::IsInitialized() const {

  return true;
}

void RotorPoint::Swap(RotorPoint* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(appid_, other->appid_);
    std::swap(tracklat_, other->tracklat_);
    std::swap(tracklon_, other->tracklon_);
    std::swap(trackalt_, other->trackalt_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotorPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotorPoint_descriptor_;
  metadata.reflection = RotorPoint_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RotorStop::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RotorStop::kMsgNameFieldNumber;
const int RotorStop::kResIDFieldNumber;
const int RotorStop::kAppIDFieldNumber;
#endif  // !_MSC_VER

RotorStop::RotorStop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RotorStop::InitAsDefaultInstance() {
}

RotorStop::RotorStop(const RotorStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RotorStop::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotorStop::~RotorStop() {
  SharedDtor();
}

void RotorStop::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (this != default_instance_) {
  }
}

void RotorStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotorStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotorStop_descriptor_;
}

const RotorStop& RotorStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconAntennaMessages_2eproto();
  return *default_instance_;
}

RotorStop* RotorStop::default_instance_ = NULL;

RotorStop* RotorStop::New() const {
  return new RotorStop;
}

void RotorStop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    appid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotorStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ROTOR_STOP"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appID;
        break;
      }

      // optional int32 appID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RotorStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ROTOR_STOP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RotorStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ROTOR_STOP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RotorStop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ROTOR_STOP"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional int32 appID = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotorStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotorStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotorStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotorStop::MergeFrom(const RotorStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotorStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotorStop::CopyFrom(const RotorStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotorStop::IsInitialized() const {

  return true;
}

void RotorStop::Swap(RotorStop* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotorStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotorStop_descriptor_;
  metadata.reflection = RotorStop_reflection_;
  return metadata;
}


// ===================================================================

::std::string* QueryRotorPosition::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int QueryRotorPosition::kMsgNameFieldNumber;
const int QueryRotorPosition::kResIDFieldNumber;
const int QueryRotorPosition::kAppIDFieldNumber;
#endif  // !_MSC_VER

QueryRotorPosition::QueryRotorPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryRotorPosition::InitAsDefaultInstance() {
}

QueryRotorPosition::QueryRotorPosition(const QueryRotorPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryRotorPosition::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryRotorPosition::~QueryRotorPosition() {
  SharedDtor();
}

void QueryRotorPosition::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (this != default_instance_) {
  }
}

void QueryRotorPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryRotorPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryRotorPosition_descriptor_;
}

const QueryRotorPosition& QueryRotorPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconAntennaMessages_2eproto();
  return *default_instance_;
}

QueryRotorPosition* QueryRotorPosition::default_instance_ = NULL;

QueryRotorPosition* QueryRotorPosition::New() const {
  return new QueryRotorPosition;
}

void QueryRotorPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    appid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryRotorPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "QUERY_ROTOR_POSITION"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appID;
        break;
      }

      // optional int32 appID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryRotorPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "QUERY_ROTOR_POSITION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryRotorPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "QUERY_ROTOR_POSITION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryRotorPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "QUERY_ROTOR_POSITION"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional int32 appID = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRotorPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryRotorPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryRotorPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryRotorPosition::MergeFrom(const QueryRotorPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryRotorPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRotorPosition::CopyFrom(const QueryRotorPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRotorPosition::IsInitialized() const {

  return true;
}

void QueryRotorPosition::Swap(QueryRotorPosition* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryRotorPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryRotorPosition_descriptor_;
  metadata.reflection = QueryRotorPosition_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ModifyRotorScanRange::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ModifyRotorScanRange::kMsgNameFieldNumber;
const int ModifyRotorScanRange::kResIDFieldNumber;
const int ModifyRotorScanRange::kMinScanAngleFieldNumber;
const int ModifyRotorScanRange::kMaxScanAngleFieldNumber;
const int ModifyRotorScanRange::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ModifyRotorScanRange::ModifyRotorScanRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyRotorScanRange::InitAsDefaultInstance() {
}

ModifyRotorScanRange::ModifyRotorScanRange(const ModifyRotorScanRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyRotorScanRange::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minscanangle_ = -1;
  maxscanangle_ = -1;
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyRotorScanRange::~ModifyRotorScanRange() {
  SharedDtor();
}

void ModifyRotorScanRange::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (this != default_instance_) {
  }
}

void ModifyRotorScanRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyRotorScanRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyRotorScanRange_descriptor_;
}

const ModifyRotorScanRange& ModifyRotorScanRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconAntennaMessages_2eproto();
  return *default_instance_;
}

ModifyRotorScanRange* ModifyRotorScanRange::default_instance_ = NULL;

ModifyRotorScanRange* ModifyRotorScanRange::New() const {
  return new ModifyRotorScanRange;
}

void ModifyRotorScanRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    minscanangle_ = -1;
    maxscanangle_ = -1;
    msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyRotorScanRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "MODIFY_ROTOR_SCAN_RANGE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_minScanAngle;
        break;
      }

      // optional float minScanAngle = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minscanangle_)));
          set_has_minscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_maxScanAngle;
        break;
      }

      // optional float maxScanAngle = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxscanangle_)));
          set_has_maxscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_msgID;
        break;
      }

      // optional double msgID = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_msgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyRotorScanRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "MODIFY_ROTOR_SCAN_RANGE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional float minScanAngle = 3 [default = -1];
  if (has_minscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->minscanangle(), output);
  }

  // optional float maxScanAngle = 4 [default = -1];
  if (has_maxscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->maxscanangle(), output);
  }

  // optional double msgID = 5 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyRotorScanRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "MODIFY_ROTOR_SCAN_RANGE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional float minScanAngle = 3 [default = -1];
  if (has_minscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->minscanangle(), target);
  }

  // optional float maxScanAngle = 4 [default = -1];
  if (has_maxscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->maxscanangle(), target);
  }

  // optional double msgID = 5 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyRotorScanRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "MODIFY_ROTOR_SCAN_RANGE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional float minScanAngle = 3 [default = -1];
    if (has_minscanangle()) {
      total_size += 1 + 4;
    }

    // optional float maxScanAngle = 4 [default = -1];
    if (has_maxscanangle()) {
      total_size += 1 + 4;
    }

    // optional double msgID = 5 [default = 0];
    if (has_msgid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyRotorScanRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyRotorScanRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyRotorScanRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyRotorScanRange::MergeFrom(const ModifyRotorScanRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_minscanangle()) {
      set_minscanangle(from.minscanangle());
    }
    if (from.has_maxscanangle()) {
      set_maxscanangle(from.maxscanangle());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyRotorScanRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyRotorScanRange::CopyFrom(const ModifyRotorScanRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyRotorScanRange::IsInitialized() const {

  return true;
}

void ModifyRotorScanRange::Swap(ModifyRotorScanRange* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(minscanangle_, other->minscanangle_);
    std::swap(maxscanangle_, other->maxscanangle_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyRotorScanRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyRotorScanRange_descriptor_;
  metadata.reflection = ModifyRotorScanRange_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AntennaTrack_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AntennaTrack_Status_descriptor_;
}
bool AntennaTrack_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AntennaTrack_Status AntennaTrack::OFF;
const AntennaTrack_Status AntennaTrack::ON;
const AntennaTrack_Status AntennaTrack::Status_MIN;
const AntennaTrack_Status AntennaTrack::Status_MAX;
const int AntennaTrack::Status_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* AntennaTrack::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int AntennaTrack::kMsgNameFieldNumber;
const int AntennaTrack::kAppIDFieldNumber;
const int AntennaTrack::kTrackStatusFieldNumber;
const int AntennaTrack::kMsgIDFieldNumber;
#endif  // !_MSC_VER

AntennaTrack::AntennaTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AntennaTrack::InitAsDefaultInstance() {
}

AntennaTrack::AntennaTrack(const AntennaTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AntennaTrack::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  appid_ = 0;
  trackstatus_ = 0;
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AntennaTrack::~AntennaTrack() {
  SharedDtor();
}

void AntennaTrack::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void AntennaTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AntennaTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AntennaTrack_descriptor_;
}

const AntennaTrack& AntennaTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconAntennaMessages_2eproto();
  return *default_instance_;
}

AntennaTrack* AntennaTrack::default_instance_ = NULL;

AntennaTrack* AntennaTrack::New() const {
  return new AntennaTrack;
}

void AntennaTrack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    appid_ = 0;
    trackstatus_ = 0;
    msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AntennaTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ANTENNA_TRACK"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appID;
        break;
      }

      // optional int32 appID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_trackStatus;
        break;
      }

      // optional .falcon_antenna_msg.AntennaTrack.Status trackStatus = 3 [default = OFF];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trackStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_antenna_msg::AntennaTrack_Status_IsValid(value)) {
            set_trackstatus(static_cast< ::falcon_antenna_msg::AntennaTrack_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_msgID;
        break;
      }

      // optional double msgID = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_msgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AntennaTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ANTENNA_TRACK"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  // optional .falcon_antenna_msg.AntennaTrack.Status trackStatus = 3 [default = OFF];
  if (has_trackstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->trackstatus(), output);
  }

  // optional double msgID = 4 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AntennaTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ANTENNA_TRACK"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 appID = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appid(), target);
  }

  // optional .falcon_antenna_msg.AntennaTrack.Status trackStatus = 3 [default = OFF];
  if (has_trackstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->trackstatus(), target);
  }

  // optional double msgID = 4 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AntennaTrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ANTENNA_TRACK"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 appID = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional .falcon_antenna_msg.AntennaTrack.Status trackStatus = 3 [default = OFF];
    if (has_trackstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trackstatus());
    }

    // optional double msgID = 4 [default = 0];
    if (has_msgid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AntennaTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AntennaTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AntennaTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AntennaTrack::MergeFrom(const AntennaTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_trackstatus()) {
      set_trackstatus(from.trackstatus());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AntennaTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AntennaTrack::CopyFrom(const AntennaTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaTrack::IsInitialized() const {

  return true;
}

void AntennaTrack::Swap(AntennaTrack* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(appid_, other->appid_);
    std::swap(trackstatus_, other->trackstatus_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AntennaTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AntennaTrack_descriptor_;
  metadata.reflection = AntennaTrack_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AntennaScan_ScanType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AntennaScan_ScanType_descriptor_;
}
bool AntennaScan_ScanType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AntennaScan_ScanType AntennaScan::OFF;
const AntennaScan_ScanType AntennaScan::CONTINUOUS;
const AntennaScan_ScanType AntennaScan::ENERGY;
const AntennaScan_ScanType AntennaScan::CONTINUOUS_STEP;
const AntennaScan_ScanType AntennaScan::ENERGY_STEP;
const AntennaScan_ScanType AntennaScan::DEFAULT;
const AntennaScan_ScanType AntennaScan::ScanType_MIN;
const AntennaScan_ScanType AntennaScan::ScanType_MAX;
const int AntennaScan::ScanType_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* AntennaScan::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int AntennaScan::kMsgNameFieldNumber;
const int AntennaScan::kResIDFieldNumber;
const int AntennaScan::kAppIDFieldNumber;
const int AntennaScan::kScanTypeFieldNumber;
const int AntennaScan::kScanStartFieldNumber;
const int AntennaScan::kScanEndFieldNumber;
const int AntennaScan::kScanVelocityFieldNumber;
const int AntennaScan::kMsgIDFieldNumber;
#endif  // !_MSC_VER

AntennaScan::AntennaScan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AntennaScan::InitAsDefaultInstance() {
}

AntennaScan::AntennaScan(const AntennaScan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AntennaScan::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  scantype_ = 0;
  scanstart_ = 0;
  scanend_ = 0;
  scanvelocity_ = 0;
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AntennaScan::~AntennaScan() {
  SharedDtor();
}

void AntennaScan::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (this != default_instance_) {
  }
}

void AntennaScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AntennaScan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AntennaScan_descriptor_;
}

const AntennaScan& AntennaScan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconAntennaMessages_2eproto();
  return *default_instance_;
}

AntennaScan* AntennaScan::default_instance_ = NULL;

AntennaScan* AntennaScan::New() const {
  return new AntennaScan;
}

void AntennaScan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    appid_ = 0;
    scantype_ = 0;
    scanstart_ = 0;
    scanend_ = 0;
    scanvelocity_ = 0;
    msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AntennaScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ANTENNA_SCAN"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appID;
        break;
      }

      // optional int32 appID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scanType;
        break;
      }

      // optional .falcon_antenna_msg.AntennaScan.ScanType scanType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scanType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_antenna_msg::AntennaScan_ScanType_IsValid(value)) {
            set_scantype(static_cast< ::falcon_antenna_msg::AntennaScan_ScanType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_scanStart;
        break;
      }

      // optional float scanStart = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scanStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scanstart_)));
          set_has_scanstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_scanEnd;
        break;
      }

      // optional float scanEnd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scanEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scanend_)));
          set_has_scanend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_scanVelocity;
        break;
      }

      // optional float scanVelocity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scanVelocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scanvelocity_)));
          set_has_scanvelocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_msgID;
        break;
      }

      // optional double msgID = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_msgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AntennaScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ANTENNA_SCAN"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  // optional .falcon_antenna_msg.AntennaScan.ScanType scanType = 4;
  if (has_scantype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scantype(), output);
  }

  // optional float scanStart = 5;
  if (has_scanstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->scanstart(), output);
  }

  // optional float scanEnd = 6;
  if (has_scanend()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->scanend(), output);
  }

  // optional float scanVelocity = 7;
  if (has_scanvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->scanvelocity(), output);
  }

  // optional double msgID = 8 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AntennaScan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ANTENNA_SCAN"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  // optional .falcon_antenna_msg.AntennaScan.ScanType scanType = 4;
  if (has_scantype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->scantype(), target);
  }

  // optional float scanStart = 5;
  if (has_scanstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->scanstart(), target);
  }

  // optional float scanEnd = 6;
  if (has_scanend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->scanend(), target);
  }

  // optional float scanVelocity = 7;
  if (has_scanvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->scanvelocity(), target);
  }

  // optional double msgID = 8 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AntennaScan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ANTENNA_SCAN"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional int32 appID = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional .falcon_antenna_msg.AntennaScan.ScanType scanType = 4;
    if (has_scantype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scantype());
    }

    // optional float scanStart = 5;
    if (has_scanstart()) {
      total_size += 1 + 4;
    }

    // optional float scanEnd = 6;
    if (has_scanend()) {
      total_size += 1 + 4;
    }

    // optional float scanVelocity = 7;
    if (has_scanvelocity()) {
      total_size += 1 + 4;
    }

    // optional double msgID = 8 [default = 0];
    if (has_msgid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AntennaScan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AntennaScan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AntennaScan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AntennaScan::MergeFrom(const AntennaScan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_scantype()) {
      set_scantype(from.scantype());
    }
    if (from.has_scanstart()) {
      set_scanstart(from.scanstart());
    }
    if (from.has_scanend()) {
      set_scanend(from.scanend());
    }
    if (from.has_scanvelocity()) {
      set_scanvelocity(from.scanvelocity());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AntennaScan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AntennaScan::CopyFrom(const AntennaScan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaScan::IsInitialized() const {

  return true;
}

void AntennaScan::Swap(AntennaScan* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(appid_, other->appid_);
    std::swap(scantype_, other->scantype_);
    std::swap(scanstart_, other->scanstart_);
    std::swap(scanend_, other->scanend_);
    std::swap(scanvelocity_, other->scanvelocity_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AntennaScan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AntennaScan_descriptor_;
  metadata.reflection = AntennaScan_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ModifyRotorOffset::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ModifyRotorOffset::kMsgNameFieldNumber;
const int ModifyRotorOffset::kResIDFieldNumber;
const int ModifyRotorOffset::kAzimuthOffsetFieldNumber;
const int ModifyRotorOffset::kElevationOffsetFieldNumber;
const int ModifyRotorOffset::kMsgIDFieldNumber;
#endif  // !_MSC_VER

ModifyRotorOffset::ModifyRotorOffset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyRotorOffset::InitAsDefaultInstance() {
}

ModifyRotorOffset::ModifyRotorOffset(const ModifyRotorOffset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyRotorOffset::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  azimuthoffset_ = 0;
  elevationoffset_ = 0;
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyRotorOffset::~ModifyRotorOffset() {
  SharedDtor();
}

void ModifyRotorOffset::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (this != default_instance_) {
  }
}

void ModifyRotorOffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyRotorOffset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyRotorOffset_descriptor_;
}

const ModifyRotorOffset& ModifyRotorOffset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconAntennaMessages_2eproto();
  return *default_instance_;
}

ModifyRotorOffset* ModifyRotorOffset::default_instance_ = NULL;

ModifyRotorOffset* ModifyRotorOffset::New() const {
  return new ModifyRotorOffset;
}

void ModifyRotorOffset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    azimuthoffset_ = 0;
    elevationoffset_ = 0;
    msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyRotorOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "MODIFY_ROTOR_OFFSET"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_azimuthOffset;
        break;
      }

      // optional float azimuthOffset = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azimuthOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuthoffset_)));
          set_has_azimuthoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_elevationOffset;
        break;
      }

      // optional float elevationOffset = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elevationOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevationoffset_)));
          set_has_elevationoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_msgID;
        break;
      }

      // optional double msgID = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_msgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyRotorOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "MODIFY_ROTOR_OFFSET"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional float azimuthOffset = 3 [default = 0];
  if (has_azimuthoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->azimuthoffset(), output);
  }

  // optional float elevationOffset = 4 [default = 0];
  if (has_elevationoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->elevationoffset(), output);
  }

  // optional double msgID = 5 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyRotorOffset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "MODIFY_ROTOR_OFFSET"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional float azimuthOffset = 3 [default = 0];
  if (has_azimuthoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->azimuthoffset(), target);
  }

  // optional float elevationOffset = 4 [default = 0];
  if (has_elevationoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->elevationoffset(), target);
  }

  // optional double msgID = 5 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyRotorOffset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "MODIFY_ROTOR_OFFSET"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional float azimuthOffset = 3 [default = 0];
    if (has_azimuthoffset()) {
      total_size += 1 + 4;
    }

    // optional float elevationOffset = 4 [default = 0];
    if (has_elevationoffset()) {
      total_size += 1 + 4;
    }

    // optional double msgID = 5 [default = 0];
    if (has_msgid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyRotorOffset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyRotorOffset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyRotorOffset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyRotorOffset::MergeFrom(const ModifyRotorOffset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_azimuthoffset()) {
      set_azimuthoffset(from.azimuthoffset());
    }
    if (from.has_elevationoffset()) {
      set_elevationoffset(from.elevationoffset());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyRotorOffset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyRotorOffset::CopyFrom(const ModifyRotorOffset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyRotorOffset::IsInitialized() const {

  return true;
}

void ModifyRotorOffset::Swap(ModifyRotorOffset* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(azimuthoffset_, other->azimuthoffset_);
    std::swap(elevationoffset_, other->elevationoffset_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyRotorOffset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyRotorOffset_descriptor_;
  metadata.reflection = ModifyRotorOffset_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RotorPosition_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotorPosition_Status_descriptor_;
}
bool RotorPosition_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RotorPosition_Status RotorPosition::IDLE;
const RotorPosition_Status RotorPosition::MOVING;
const RotorPosition_Status RotorPosition::DONE;
const RotorPosition_Status RotorPosition::FAILED;
const RotorPosition_Status RotorPosition::CANCELLED;
const RotorPosition_Status RotorPosition::MOVING_SLEW;
const RotorPosition_Status RotorPosition::Status_MIN;
const RotorPosition_Status RotorPosition::Status_MAX;
const int RotorPosition::Status_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* RotorPosition::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RotorPosition::kMsgNameFieldNumber;
const int RotorPosition::kResIDFieldNumber;
const int RotorPosition::kStatusFieldNumber;
const int RotorPosition::kTimeFieldNumber;
const int RotorPosition::kAzimuthFieldNumber;
const int RotorPosition::kElevationFieldNumber;
const int RotorPosition::kVelocityFieldNumber;
#endif  // !_MSC_VER

RotorPosition::RotorPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RotorPosition::InitAsDefaultInstance() {
}

RotorPosition::RotorPosition(const RotorPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RotorPosition::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  time_ = 0;
  azimuth_ = 0;
  elevation_ = 0;
  velocity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotorPosition::~RotorPosition() {
  SharedDtor();
}

void RotorPosition::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (this != default_instance_) {
  }
}

void RotorPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotorPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotorPosition_descriptor_;
}

const RotorPosition& RotorPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconAntennaMessages_2eproto();
  return *default_instance_;
}

RotorPosition* RotorPosition::default_instance_ = NULL;

RotorPosition* RotorPosition::New() const {
  return new RotorPosition;
}

void RotorPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    status_ = 0;
    time_ = 0;
    azimuth_ = 0;
    elevation_ = 0;
    velocity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotorPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ROTOR_POSITION"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .falcon_antenna_msg.RotorPosition.Status status = 3 [default = IDLE];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_antenna_msg::RotorPosition_Status_IsValid(value)) {
            set_status(static_cast< ::falcon_antenna_msg::RotorPosition_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_time;
        break;
      }

      // optional float time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_azimuth;
        break;
      }

      // optional float azimuth = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_elevation;
        break;
      }

      // optional float elevation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_velocity;
        break;
      }

      // optional float velocity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RotorPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ROTOR_POSITION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional .falcon_antenna_msg.RotorPosition.Status status = 3 [default = IDLE];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional float time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->time(), output);
  }

  // optional float azimuth = 5;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->azimuth(), output);
  }

  // optional float elevation = 6;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->elevation(), output);
  }

  // optional float velocity = 7;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->velocity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RotorPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ROTOR_POSITION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional .falcon_antenna_msg.RotorPosition.Status status = 3 [default = IDLE];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional float time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->time(), target);
  }

  // optional float azimuth = 5;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->azimuth(), target);
  }

  // optional float elevation = 6;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->elevation(), target);
  }

  // optional float velocity = 7;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->velocity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RotorPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ROTOR_POSITION"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional .falcon_antenna_msg.RotorPosition.Status status = 3 [default = IDLE];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional float time = 4;
    if (has_time()) {
      total_size += 1 + 4;
    }

    // optional float azimuth = 5;
    if (has_azimuth()) {
      total_size += 1 + 4;
    }

    // optional float elevation = 6;
    if (has_elevation()) {
      total_size += 1 + 4;
    }

    // optional float velocity = 7;
    if (has_velocity()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotorPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotorPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotorPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotorPosition::MergeFrom(const RotorPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotorPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotorPosition::CopyFrom(const RotorPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotorPosition::IsInitialized() const {

  return true;
}

void RotorPosition::Swap(RotorPosition* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(status_, other->status_);
    std::swap(time_, other->time_);
    std::swap(azimuth_, other->azimuth_);
    std::swap(elevation_, other->elevation_);
    std::swap(velocity_, other->velocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotorPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotorPosition_descriptor_;
  metadata.reflection = RotorPosition_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RotorStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotorStatus_Status_descriptor_;
}
bool RotorStatus_Status_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RotorStatus_Status RotorStatus::NO_ROTOR;
const RotorStatus_Status RotorStatus::NO_CONNECTION;
const RotorStatus_Status RotorStatus::CONNECTED;
const RotorStatus_Status RotorStatus::Status_MIN;
const RotorStatus_Status RotorStatus::Status_MAX;
const int RotorStatus::Status_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* RotorStatus_CutoutStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotorStatus_CutoutStatus_descriptor_;
}
bool RotorStatus_CutoutStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RotorStatus_CutoutStatus RotorStatus::CUTOUT;
const RotorStatus_CutoutStatus RotorStatus::NO_CUTOUT;
const RotorStatus_CutoutStatus RotorStatus::CutoutStatus_MIN;
const RotorStatus_CutoutStatus RotorStatus::CutoutStatus_MAX;
const int RotorStatus::CutoutStatus_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* RotorStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RotorStatus::kMsgNameFieldNumber;
const int RotorStatus::kResIDFieldNumber;
const int RotorStatus::kStatusFieldNumber;
const int RotorStatus::kMinScanAngleFieldNumber;
const int RotorStatus::kMaxScanAngleFieldNumber;
const int RotorStatus::kAzOffsetFieldNumber;
const int RotorStatus::kElOffsetFieldNumber;
const int RotorStatus::kElCtrlFieldNumber;
const int RotorStatus::kVelCtrlFieldNumber;
const int RotorStatus::kCutoutFieldNumber;
#endif  // !_MSC_VER

RotorStatus::RotorStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RotorStatus::InitAsDefaultInstance() {
}

RotorStatus::RotorStatus(const RotorStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RotorStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 1;
  minscanangle_ = 0;
  maxscanangle_ = 0;
  azoffset_ = 0;
  eloffset_ = 0;
  elctrl_ = false;
  velctrl_ = false;
  cutout_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotorStatus::~RotorStatus() {
  SharedDtor();
}

void RotorStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (this != default_instance_) {
  }
}

void RotorStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotorStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotorStatus_descriptor_;
}

const RotorStatus& RotorStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconAntennaMessages_2eproto();
  return *default_instance_;
}

RotorStatus* RotorStatus::default_instance_ = NULL;

RotorStatus* RotorStatus::New() const {
  return new RotorStatus;
}

void RotorStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    status_ = 1;
    minscanangle_ = 0;
    maxscanangle_ = 0;
    azoffset_ = 0;
    eloffset_ = 0;
    elctrl_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    velctrl_ = false;
    cutout_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ROTOR_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .falcon_antenna_msg.RotorStatus.Status status = 3 [default = CONNECTED];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_antenna_msg::RotorStatus_Status_IsValid(value)) {
            set_status(static_cast< ::falcon_antenna_msg::RotorStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_minScanAngle;
        break;
      }

      // optional float minScanAngle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minscanangle_)));
          set_has_minscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_maxScanAngle;
        break;
      }

      // optional float maxScanAngle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxscanangle_)));
          set_has_maxscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_azOffset;
        break;
      }

      // optional float azOffset = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azoffset_)));
          set_has_azoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_elOffset;
        break;
      }

      // optional float elOffset = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eloffset_)));
          set_has_eloffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_elCtrl;
        break;
      }

      // optional bool elCtrl = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elCtrl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &elctrl_)));
          set_has_elctrl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_velCtrl;
        break;
      }

      // optional bool velCtrl = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_velCtrl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &velctrl_)));
          set_has_velctrl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cutout;
        break;
      }

      // optional .falcon_antenna_msg.RotorStatus.CutoutStatus cutout = 10 [default = NO_CUTOUT];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cutout:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_antenna_msg::RotorStatus_CutoutStatus_IsValid(value)) {
            set_cutout(static_cast< ::falcon_antenna_msg::RotorStatus_CutoutStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RotorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ROTOR_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional .falcon_antenna_msg.RotorStatus.Status status = 3 [default = CONNECTED];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional float minScanAngle = 4;
  if (has_minscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->minscanangle(), output);
  }

  // optional float maxScanAngle = 5;
  if (has_maxscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->maxscanangle(), output);
  }

  // optional float azOffset = 6;
  if (has_azoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->azoffset(), output);
  }

  // optional float elOffset = 7;
  if (has_eloffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->eloffset(), output);
  }

  // optional bool elCtrl = 8 [default = false];
  if (has_elctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->elctrl(), output);
  }

  // optional bool velCtrl = 9 [default = false];
  if (has_velctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->velctrl(), output);
  }

  // optional .falcon_antenna_msg.RotorStatus.CutoutStatus cutout = 10 [default = NO_CUTOUT];
  if (has_cutout()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->cutout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RotorStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ROTOR_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional .falcon_antenna_msg.RotorStatus.Status status = 3 [default = CONNECTED];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional float minScanAngle = 4;
  if (has_minscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->minscanangle(), target);
  }

  // optional float maxScanAngle = 5;
  if (has_maxscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->maxscanangle(), target);
  }

  // optional float azOffset = 6;
  if (has_azoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->azoffset(), target);
  }

  // optional float elOffset = 7;
  if (has_eloffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->eloffset(), target);
  }

  // optional bool elCtrl = 8 [default = false];
  if (has_elctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->elctrl(), target);
  }

  // optional bool velCtrl = 9 [default = false];
  if (has_velctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->velctrl(), target);
  }

  // optional .falcon_antenna_msg.RotorStatus.CutoutStatus cutout = 10 [default = NO_CUTOUT];
  if (has_cutout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->cutout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RotorStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ROTOR_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional .falcon_antenna_msg.RotorStatus.Status status = 3 [default = CONNECTED];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional float minScanAngle = 4;
    if (has_minscanangle()) {
      total_size += 1 + 4;
    }

    // optional float maxScanAngle = 5;
    if (has_maxscanangle()) {
      total_size += 1 + 4;
    }

    // optional float azOffset = 6;
    if (has_azoffset()) {
      total_size += 1 + 4;
    }

    // optional float elOffset = 7;
    if (has_eloffset()) {
      total_size += 1 + 4;
    }

    // optional bool elCtrl = 8 [default = false];
    if (has_elctrl()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool velCtrl = 9 [default = false];
    if (has_velctrl()) {
      total_size += 1 + 1;
    }

    // optional .falcon_antenna_msg.RotorStatus.CutoutStatus cutout = 10 [default = NO_CUTOUT];
    if (has_cutout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cutout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotorStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotorStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotorStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotorStatus::MergeFrom(const RotorStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_minscanangle()) {
      set_minscanangle(from.minscanangle());
    }
    if (from.has_maxscanangle()) {
      set_maxscanangle(from.maxscanangle());
    }
    if (from.has_azoffset()) {
      set_azoffset(from.azoffset());
    }
    if (from.has_eloffset()) {
      set_eloffset(from.eloffset());
    }
    if (from.has_elctrl()) {
      set_elctrl(from.elctrl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_velctrl()) {
      set_velctrl(from.velctrl());
    }
    if (from.has_cutout()) {
      set_cutout(from.cutout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotorStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotorStatus::CopyFrom(const RotorStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotorStatus::IsInitialized() const {

  return true;
}

void RotorStatus::Swap(RotorStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(status_, other->status_);
    std::swap(minscanangle_, other->minscanangle_);
    std::swap(maxscanangle_, other->maxscanangle_);
    std::swap(azoffset_, other->azoffset_);
    std::swap(eloffset_, other->eloffset_);
    std::swap(elctrl_, other->elctrl_);
    std::swap(velctrl_, other->velctrl_);
    std::swap(cutout_, other->cutout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotorStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotorStatus_descriptor_;
  metadata.reflection = RotorStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SwitchMap::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SwitchMap::kMsgNameFieldNumber;
const int SwitchMap::kResIDFieldNumber;
const int SwitchMap::kAppIDFieldNumber;
const int SwitchMap::kInputPortFieldNumber;
const int SwitchMap::kOutputPortFieldNumber;
const int SwitchMap::kMsgIDFieldNumber;
#endif  // !_MSC_VER

SwitchMap::SwitchMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwitchMap::InitAsDefaultInstance() {
}

SwitchMap::SwitchMap(const SwitchMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwitchMap::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  inputport_ = 0;
  outputport_ = 0;
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwitchMap::~SwitchMap() {
  SharedDtor();
}

void SwitchMap::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (this != default_instance_) {
  }
}

void SwitchMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwitchMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwitchMap_descriptor_;
}

const SwitchMap& SwitchMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconAntennaMessages_2eproto();
  return *default_instance_;
}

SwitchMap* SwitchMap::default_instance_ = NULL;

SwitchMap* SwitchMap::New() const {
  return new SwitchMap;
}

void SwitchMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    appid_ = 0;
    inputport_ = 0;
    outputport_ = 0;
    msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwitchMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SWITCH_MAP"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appID;
        break;
      }

      // optional int32 appID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inputPort;
        break;
      }

      // optional int32 inputPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inputport_)));
          set_has_inputport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_outputPort;
        break;
      }

      // optional int32 outputPort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outputPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outputport_)));
          set_has_outputport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_msgID;
        break;
      }

      // optional double msgID = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_msgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwitchMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SWITCH_MAP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  // optional int32 inputPort = 4;
  if (has_inputport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->inputport(), output);
  }

  // optional int32 outputPort = 5;
  if (has_outputport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->outputport(), output);
  }

  // optional double msgID = 6 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwitchMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SWITCH_MAP"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  // optional int32 inputPort = 4;
  if (has_inputport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->inputport(), target);
  }

  // optional int32 outputPort = 5;
  if (has_outputport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->outputport(), target);
  }

  // optional double msgID = 6 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwitchMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SWITCH_MAP"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional int32 appID = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional int32 inputPort = 4;
    if (has_inputport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inputport());
    }

    // optional int32 outputPort = 5;
    if (has_outputport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outputport());
    }

    // optional double msgID = 6 [default = 0];
    if (has_msgid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwitchMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwitchMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwitchMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwitchMap::MergeFrom(const SwitchMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_inputport()) {
      set_inputport(from.inputport());
    }
    if (from.has_outputport()) {
      set_outputport(from.outputport());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwitchMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchMap::CopyFrom(const SwitchMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchMap::IsInitialized() const {

  return true;
}

void SwitchMap::Swap(SwitchMap* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(appid_, other->appid_);
    std::swap(inputport_, other->inputport_);
    std::swap(outputport_, other->outputport_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwitchMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwitchMap_descriptor_;
  metadata.reflection = SwitchMap_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SwitchMapInputFail::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SwitchMapInputFail::kMsgNameFieldNumber;
const int SwitchMapInputFail::kInputPortIDFieldNumber;
const int SwitchMapInputFail::kMapFieldNumber;
#endif  // !_MSC_VER

SwitchMapInputFail::SwitchMapInputFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwitchMapInputFail::InitAsDefaultInstance() {
  map_ = const_cast< ::falcon_antenna_msg::SwitchMap*>(&::falcon_antenna_msg::SwitchMap::default_instance());
}

SwitchMapInputFail::SwitchMapInputFail(const SwitchMapInputFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwitchMapInputFail::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  inputportid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwitchMapInputFail::~SwitchMapInputFail() {
  SharedDtor();
}

void SwitchMapInputFail::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (inputportid_ != &::google::protobuf::internal::kEmptyString) {
    delete inputportid_;
  }
  if (this != default_instance_) {
    delete map_;
  }
}

void SwitchMapInputFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwitchMapInputFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwitchMapInputFail_descriptor_;
}

const SwitchMapInputFail& SwitchMapInputFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconAntennaMessages_2eproto();
  return *default_instance_;
}

SwitchMapInputFail* SwitchMapInputFail::default_instance_ = NULL;

SwitchMapInputFail* SwitchMapInputFail::New() const {
  return new SwitchMapInputFail;
}

void SwitchMapInputFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_inputportid()) {
      if (inputportid_ != &::google::protobuf::internal::kEmptyString) {
        inputportid_->clear();
      }
    }
    if (has_map()) {
      if (map_ != NULL) map_->::falcon_antenna_msg::SwitchMap::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwitchMapInputFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SWITCH_MAP_INPUT_FAIL"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inputPortID;
        break;
      }

      // optional string inputPortID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inputPortID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inputportid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inputportid().data(), this->inputportid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_map;
        break;
      }

      // optional .falcon_antenna_msg.SwitchMap map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwitchMapInputFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SWITCH_MAP_INPUT_FAIL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string inputPortID = 2;
  if (has_inputportid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputportid().data(), this->inputportid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->inputportid(), output);
  }

  // optional .falcon_antenna_msg.SwitchMap map = 3;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwitchMapInputFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SWITCH_MAP_INPUT_FAIL"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string inputPortID = 2;
  if (has_inputportid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputportid().data(), this->inputportid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inputportid(), target);
  }

  // optional .falcon_antenna_msg.SwitchMap map = 3;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwitchMapInputFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SWITCH_MAP_INPUT_FAIL"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string inputPortID = 2;
    if (has_inputportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inputportid());
    }

    // optional .falcon_antenna_msg.SwitchMap map = 3;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwitchMapInputFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwitchMapInputFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwitchMapInputFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwitchMapInputFail::MergeFrom(const SwitchMapInputFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_inputportid()) {
      set_inputportid(from.inputportid());
    }
    if (from.has_map()) {
      mutable_map()->::falcon_antenna_msg::SwitchMap::MergeFrom(from.map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwitchMapInputFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchMapInputFail::CopyFrom(const SwitchMapInputFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchMapInputFail::IsInitialized() const {

  return true;
}

void SwitchMapInputFail::Swap(SwitchMapInputFail* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(inputportid_, other->inputportid_);
    std::swap(map_, other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwitchMapInputFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwitchMapInputFail_descriptor_;
  metadata.reflection = SwitchMapInputFail_reflection_;
  return metadata;
}


// ===================================================================

::std::string* QuerySwitchStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int QuerySwitchStatus::kMsgNameFieldNumber;
const int QuerySwitchStatus::kResIDFieldNumber;
const int QuerySwitchStatus::kAppIDFieldNumber;
#endif  // !_MSC_VER

QuerySwitchStatus::QuerySwitchStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuerySwitchStatus::InitAsDefaultInstance() {
}

QuerySwitchStatus::QuerySwitchStatus(const QuerySwitchStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuerySwitchStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuerySwitchStatus::~QuerySwitchStatus() {
  SharedDtor();
}

void QuerySwitchStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (this != default_instance_) {
  }
}

void QuerySwitchStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuerySwitchStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuerySwitchStatus_descriptor_;
}

const QuerySwitchStatus& QuerySwitchStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconAntennaMessages_2eproto();
  return *default_instance_;
}

QuerySwitchStatus* QuerySwitchStatus::default_instance_ = NULL;

QuerySwitchStatus* QuerySwitchStatus::New() const {
  return new QuerySwitchStatus;
}

void QuerySwitchStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    appid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuerySwitchStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "QUERY_SWITCH_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appID;
        break;
      }

      // optional int32 appID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuerySwitchStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "QUERY_SWITCH_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuerySwitchStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "QUERY_SWITCH_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuerySwitchStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "QUERY_SWITCH_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional int32 appID = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySwitchStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuerySwitchStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuerySwitchStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuerySwitchStatus::MergeFrom(const QuerySwitchStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuerySwitchStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySwitchStatus::CopyFrom(const QuerySwitchStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySwitchStatus::IsInitialized() const {

  return true;
}

void QuerySwitchStatus::Swap(QuerySwitchStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuerySwitchStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuerySwitchStatus_descriptor_;
  metadata.reflection = QuerySwitchStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SwitchStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwitchStatus_Status_descriptor_;
}
bool SwitchStatus_Status_IsValid(int value) {
  switch(value) {
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SwitchStatus_Status SwitchStatus::NO_CONNECTION;
const SwitchStatus_Status SwitchStatus::NO_RFSW;
const SwitchStatus_Status SwitchStatus::CONNECTED;
const SwitchStatus_Status SwitchStatus::Status_MIN;
const SwitchStatus_Status SwitchStatus::Status_MAX;
const int SwitchStatus::Status_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SwitchStatus_Response_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwitchStatus_Response_descriptor_;
}
bool SwitchStatus_Response_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SwitchStatus_Response SwitchStatus::FAILURE;
const SwitchStatus_Response SwitchStatus::SUCCESS;
const SwitchStatus_Response SwitchStatus::Response_MIN;
const SwitchStatus_Response SwitchStatus::Response_MAX;
const int SwitchStatus::Response_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* SwitchStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SwitchStatus::kMsgNameFieldNumber;
const int SwitchStatus::kResIDFieldNumber;
const int SwitchStatus::kOutputPortsFieldNumber;
const int SwitchStatus::kInputPortsFieldNumber;
const int SwitchStatus::kStatusFieldNumber;
const int SwitchStatus::kCmdStatusFieldNumber;
const int SwitchStatus::kSerialPortFieldNumber;
const int SwitchStatus::kStateFieldNumber;
#endif  // !_MSC_VER

SwitchStatus::SwitchStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwitchStatus::InitAsDefaultInstance() {
}

SwitchStatus::SwitchStatus(const SwitchStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwitchStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  cmdstatus_ = -1;
  serialport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwitchStatus::~SwitchStatus() {
  SharedDtor();
}

void SwitchStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (serialport_ != &::google::protobuf::internal::kEmptyString) {
    delete serialport_;
  }
  if (this != default_instance_) {
  }
}

void SwitchStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwitchStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwitchStatus_descriptor_;
}

const SwitchStatus& SwitchStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconAntennaMessages_2eproto();
  return *default_instance_;
}

SwitchStatus* SwitchStatus::default_instance_ = NULL;

SwitchStatus* SwitchStatus::New() const {
  return new SwitchStatus;
}

void SwitchStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    status_ = 0;
    cmdstatus_ = -1;
    if (has_serialport()) {
      if (serialport_ != &::google::protobuf::internal::kEmptyString) {
        serialport_->clear();
      }
    }
  }
  outputports_.Clear();
  inputports_.Clear();
  state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwitchStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SWITCH_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outputPorts;
        break;
      }

      // repeated int32 outputPorts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outputPorts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_outputports())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outputports())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outputPorts;
        if (input->ExpectTag(32)) goto parse_inputPorts;
        break;
      }

      // repeated int32 inputPorts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputPorts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_inputports())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_inputports())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inputPorts;
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional .falcon_antenna_msg.SwitchStatus.Status status = 5 [default = CONNECTED];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_antenna_msg::SwitchStatus_Status_IsValid(value)) {
            set_status(static_cast< ::falcon_antenna_msg::SwitchStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cmdStatus;
        break;
      }

      // optional .falcon_antenna_msg.SwitchStatus.Response cmdStatus = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmdStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_antenna_msg::SwitchStatus_Response_IsValid(value)) {
            set_cmdstatus(static_cast< ::falcon_antenna_msg::SwitchStatus_Response >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_serialPort;
        break;
      }

      // optional string serialPort = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialPort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialport()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serialport().data(), this->serialport().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_state;
        break;
      }

      // repeated string state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->state(this->state_size() - 1).data(),
            this->state(this->state_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwitchStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SWITCH_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // repeated int32 outputPorts = 3;
  for (int i = 0; i < this->outputports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->outputports(i), output);
  }

  // repeated int32 inputPorts = 4;
  for (int i = 0; i < this->inputports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->inputports(i), output);
  }

  // optional .falcon_antenna_msg.SwitchStatus.Status status = 5 [default = CONNECTED];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // optional .falcon_antenna_msg.SwitchStatus.Response cmdStatus = 6;
  if (has_cmdstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->cmdstatus(), output);
  }

  // optional string serialPort = 7;
  if (has_serialport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialport().data(), this->serialport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->serialport(), output);
  }

  // repeated string state = 8;
  for (int i = 0; i < this->state_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->state(i).data(), this->state(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwitchStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SWITCH_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // repeated int32 outputPorts = 3;
  for (int i = 0; i < this->outputports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->outputports(i), target);
  }

  // repeated int32 inputPorts = 4;
  for (int i = 0; i < this->inputports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->inputports(i), target);
  }

  // optional .falcon_antenna_msg.SwitchStatus.Status status = 5 [default = CONNECTED];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // optional .falcon_antenna_msg.SwitchStatus.Response cmdStatus = 6;
  if (has_cmdstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->cmdstatus(), target);
  }

  // optional string serialPort = 7;
  if (has_serialport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialport().data(), this->serialport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->serialport(), target);
  }

  // repeated string state = 8;
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state(i).data(), this->state(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwitchStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SWITCH_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional .falcon_antenna_msg.SwitchStatus.Status status = 5 [default = CONNECTED];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .falcon_antenna_msg.SwitchStatus.Response cmdStatus = 6;
    if (has_cmdstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdstatus());
    }

    // optional string serialPort = 7;
    if (has_serialport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serialport());
    }

  }
  // repeated int32 outputPorts = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->outputports_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outputports(i));
    }
    total_size += 1 * this->outputports_size() + data_size;
  }

  // repeated int32 inputPorts = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->inputports_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->inputports(i));
    }
    total_size += 1 * this->inputports_size() + data_size;
  }

  // repeated string state = 8;
  total_size += 1 * this->state_size();
  for (int i = 0; i < this->state_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwitchStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwitchStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwitchStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwitchStatus::MergeFrom(const SwitchStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  outputports_.MergeFrom(from.outputports_);
  inputports_.MergeFrom(from.inputports_);
  state_.MergeFrom(from.state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_cmdstatus()) {
      set_cmdstatus(from.cmdstatus());
    }
    if (from.has_serialport()) {
      set_serialport(from.serialport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwitchStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchStatus::CopyFrom(const SwitchStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchStatus::IsInitialized() const {

  return true;
}

void SwitchStatus::Swap(SwitchStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    outputports_.Swap(&other->outputports_);
    inputports_.Swap(&other->inputports_);
    std::swap(status_, other->status_);
    std::swap(cmdstatus_, other->cmdstatus_);
    std::swap(serialport_, other->serialport_);
    state_.Swap(&other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwitchStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwitchStatus_descriptor_;
  metadata.reflection = SwitchStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SlaveAntWaitScan::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SlaveAntWaitScan::kMsgNameFieldNumber;
const int SlaveAntWaitScan::kScanStateFieldNumber;
#endif  // !_MSC_VER

SlaveAntWaitScan::SlaveAntWaitScan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlaveAntWaitScan::InitAsDefaultInstance() {
}

SlaveAntWaitScan::SlaveAntWaitScan(const SlaveAntWaitScan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlaveAntWaitScan::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  scanstate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlaveAntWaitScan::~SlaveAntWaitScan() {
  SharedDtor();
}

void SlaveAntWaitScan::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void SlaveAntWaitScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlaveAntWaitScan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlaveAntWaitScan_descriptor_;
}

const SlaveAntWaitScan& SlaveAntWaitScan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconAntennaMessages_2eproto();
  return *default_instance_;
}

SlaveAntWaitScan* SlaveAntWaitScan::default_instance_ = NULL;

SlaveAntWaitScan* SlaveAntWaitScan::New() const {
  return new SlaveAntWaitScan;
}

void SlaveAntWaitScan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    scanstate_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlaveAntWaitScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SLAVE_ANT_WAIT_SCAN"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ScanState;
        break;
      }

      // optional bool ScanState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScanState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scanstate_)));
          set_has_scanstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlaveAntWaitScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SLAVE_ANT_WAIT_SCAN"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool ScanState = 2;
  if (has_scanstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->scanstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlaveAntWaitScan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SLAVE_ANT_WAIT_SCAN"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool ScanState = 2;
  if (has_scanstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->scanstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlaveAntWaitScan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SLAVE_ANT_WAIT_SCAN"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool ScanState = 2;
    if (has_scanstate()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlaveAntWaitScan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlaveAntWaitScan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlaveAntWaitScan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlaveAntWaitScan::MergeFrom(const SlaveAntWaitScan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_scanstate()) {
      set_scanstate(from.scanstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlaveAntWaitScan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlaveAntWaitScan::CopyFrom(const SlaveAntWaitScan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlaveAntWaitScan::IsInitialized() const {

  return true;
}

void SlaveAntWaitScan::Swap(SlaveAntWaitScan* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(scanstate_, other->scanstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlaveAntWaitScan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlaveAntWaitScan_descriptor_;
  metadata.reflection = SlaveAntWaitScan_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace falcon_antenna_msg

// @@protoc_insertion_point(global_scope)
