// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_galileoprocessor.proto

#ifndef PROTOBUF_service_5fgalileoprocessor_2eproto__INCLUDED
#define PROTOBUF_service_5fgalileoprocessor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace service_galileoprocessor {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_5fgalileoprocessor_2eproto();
void protobuf_AssignDesc_service_5fgalileoprocessor_2eproto();
void protobuf_ShutdownFile_service_5fgalileoprocessor_2eproto();

class GalileoProcessorConfig;

// ===================================================================

class GalileoProcessorConfig : public ::google::protobuf::Message {
 public:
  GalileoProcessorConfig();
  virtual ~GalileoProcessorConfig();

  GalileoProcessorConfig(const GalileoProcessorConfig& from);

  inline GalileoProcessorConfig& operator=(const GalileoProcessorConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GalileoProcessorConfig& default_instance();

  void Swap(GalileoProcessorConfig* other);

  // implements Message ----------------------------------------------

  GalileoProcessorConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GalileoProcessorConfig& from);
  void MergeFrom(const GalileoProcessorConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "service_galileoprocessor.GalileoProcessorConfig"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional bool writeDebugFiles = 2 [default = false];
  inline bool has_writedebugfiles() const;
  inline void clear_writedebugfiles();
  static const int kWriteDebugFilesFieldNumber = 2;
  inline bool writedebugfiles() const;
  inline void set_writedebugfiles(bool value);

  // optional double batchSizeSec = 3 [default = 5];
  inline bool has_batchsizesec() const;
  inline void clear_batchsizesec();
  static const int kBatchSizeSecFieldNumber = 3;
  inline double batchsizesec() const;
  inline void set_batchsizesec(double value);

  // optional string debugRootPath = 4 [default = "/scratch/test-dataplane/"];
  inline bool has_debugrootpath() const;
  inline void clear_debugrootpath();
  static const int kDebugRootPathFieldNumber = 4;
  inline const ::std::string& debugrootpath() const;
  inline void set_debugrootpath(const ::std::string& value);
  inline void set_debugrootpath(const char* value);
  inline void set_debugrootpath(const char* value, size_t size);
  inline ::std::string* mutable_debugrootpath();
  inline ::std::string* release_debugrootpath();
  inline void set_allocated_debugrootpath(::std::string* debugrootpath);

  // optional string segmenterConfig = 5 [default = "/user/config/segmenter_config.xml"];
  inline bool has_segmenterconfig() const;
  inline void clear_segmenterconfig();
  static const int kSegmenterConfigFieldNumber = 5;
  inline const ::std::string& segmenterconfig() const;
  inline void set_segmenterconfig(const ::std::string& value);
  inline void set_segmenterconfig(const char* value);
  inline void set_segmenterconfig(const char* value, size_t size);
  inline ::std::string* mutable_segmenterconfig();
  inline ::std::string* release_segmenterconfig();
  inline void set_allocated_segmenterconfig(::std::string* segmenterconfig);

  // @@protoc_insertion_point(class_scope:service_galileoprocessor.GalileoProcessorConfig)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_writedebugfiles();
  inline void clear_has_writedebugfiles();
  inline void set_has_batchsizesec();
  inline void clear_has_batchsizesec();
  inline void set_has_debugrootpath();
  inline void clear_has_debugrootpath();
  inline void set_has_segmenterconfig();
  inline void clear_has_segmenterconfig();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  double batchsizesec_;
  ::std::string* debugrootpath_;
  static ::std::string* _default_debugrootpath_;
  ::std::string* segmenterconfig_;
  static ::std::string* _default_segmenterconfig_;
  bool writedebugfiles_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_service_5fgalileoprocessor_2eproto();
  friend void protobuf_AssignDesc_service_5fgalileoprocessor_2eproto();
  friend void protobuf_ShutdownFile_service_5fgalileoprocessor_2eproto();

  void InitAsDefaultInstance();
  static GalileoProcessorConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// GalileoProcessorConfig

// optional string msgName = 1 [default = "service_galileoprocessor.GalileoProcessorConfig"];
inline bool GalileoProcessorConfig::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GalileoProcessorConfig::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GalileoProcessorConfig::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GalileoProcessorConfig::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& GalileoProcessorConfig::msgname() const {
  return *msgname_;
}
inline void GalileoProcessorConfig::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void GalileoProcessorConfig::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void GalileoProcessorConfig::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GalileoProcessorConfig::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* GalileoProcessorConfig::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void GalileoProcessorConfig::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional bool writeDebugFiles = 2 [default = false];
inline bool GalileoProcessorConfig::has_writedebugfiles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GalileoProcessorConfig::set_has_writedebugfiles() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GalileoProcessorConfig::clear_has_writedebugfiles() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GalileoProcessorConfig::clear_writedebugfiles() {
  writedebugfiles_ = false;
  clear_has_writedebugfiles();
}
inline bool GalileoProcessorConfig::writedebugfiles() const {
  return writedebugfiles_;
}
inline void GalileoProcessorConfig::set_writedebugfiles(bool value) {
  set_has_writedebugfiles();
  writedebugfiles_ = value;
}

// optional double batchSizeSec = 3 [default = 5];
inline bool GalileoProcessorConfig::has_batchsizesec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GalileoProcessorConfig::set_has_batchsizesec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GalileoProcessorConfig::clear_has_batchsizesec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GalileoProcessorConfig::clear_batchsizesec() {
  batchsizesec_ = 5;
  clear_has_batchsizesec();
}
inline double GalileoProcessorConfig::batchsizesec() const {
  return batchsizesec_;
}
inline void GalileoProcessorConfig::set_batchsizesec(double value) {
  set_has_batchsizesec();
  batchsizesec_ = value;
}

// optional string debugRootPath = 4 [default = "/scratch/test-dataplane/"];
inline bool GalileoProcessorConfig::has_debugrootpath() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GalileoProcessorConfig::set_has_debugrootpath() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GalileoProcessorConfig::clear_has_debugrootpath() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GalileoProcessorConfig::clear_debugrootpath() {
  if (debugrootpath_ != _default_debugrootpath_) {
    debugrootpath_->assign(*_default_debugrootpath_);
  }
  clear_has_debugrootpath();
}
inline const ::std::string& GalileoProcessorConfig::debugrootpath() const {
  return *debugrootpath_;
}
inline void GalileoProcessorConfig::set_debugrootpath(const ::std::string& value) {
  set_has_debugrootpath();
  if (debugrootpath_ == _default_debugrootpath_) {
    debugrootpath_ = new ::std::string;
  }
  debugrootpath_->assign(value);
}
inline void GalileoProcessorConfig::set_debugrootpath(const char* value) {
  set_has_debugrootpath();
  if (debugrootpath_ == _default_debugrootpath_) {
    debugrootpath_ = new ::std::string;
  }
  debugrootpath_->assign(value);
}
inline void GalileoProcessorConfig::set_debugrootpath(const char* value, size_t size) {
  set_has_debugrootpath();
  if (debugrootpath_ == _default_debugrootpath_) {
    debugrootpath_ = new ::std::string;
  }
  debugrootpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GalileoProcessorConfig::mutable_debugrootpath() {
  set_has_debugrootpath();
  if (debugrootpath_ == _default_debugrootpath_) {
    debugrootpath_ = new ::std::string(*_default_debugrootpath_);
  }
  return debugrootpath_;
}
inline ::std::string* GalileoProcessorConfig::release_debugrootpath() {
  clear_has_debugrootpath();
  if (debugrootpath_ == _default_debugrootpath_) {
    return NULL;
  } else {
    ::std::string* temp = debugrootpath_;
    debugrootpath_ = const_cast< ::std::string*>(_default_debugrootpath_);
    return temp;
  }
}
inline void GalileoProcessorConfig::set_allocated_debugrootpath(::std::string* debugrootpath) {
  if (debugrootpath_ != _default_debugrootpath_) {
    delete debugrootpath_;
  }
  if (debugrootpath) {
    set_has_debugrootpath();
    debugrootpath_ = debugrootpath;
  } else {
    clear_has_debugrootpath();
    debugrootpath_ = const_cast< ::std::string*>(_default_debugrootpath_);
  }
}

// optional string segmenterConfig = 5 [default = "/user/config/segmenter_config.xml"];
inline bool GalileoProcessorConfig::has_segmenterconfig() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GalileoProcessorConfig::set_has_segmenterconfig() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GalileoProcessorConfig::clear_has_segmenterconfig() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GalileoProcessorConfig::clear_segmenterconfig() {
  if (segmenterconfig_ != _default_segmenterconfig_) {
    segmenterconfig_->assign(*_default_segmenterconfig_);
  }
  clear_has_segmenterconfig();
}
inline const ::std::string& GalileoProcessorConfig::segmenterconfig() const {
  return *segmenterconfig_;
}
inline void GalileoProcessorConfig::set_segmenterconfig(const ::std::string& value) {
  set_has_segmenterconfig();
  if (segmenterconfig_ == _default_segmenterconfig_) {
    segmenterconfig_ = new ::std::string;
  }
  segmenterconfig_->assign(value);
}
inline void GalileoProcessorConfig::set_segmenterconfig(const char* value) {
  set_has_segmenterconfig();
  if (segmenterconfig_ == _default_segmenterconfig_) {
    segmenterconfig_ = new ::std::string;
  }
  segmenterconfig_->assign(value);
}
inline void GalileoProcessorConfig::set_segmenterconfig(const char* value, size_t size) {
  set_has_segmenterconfig();
  if (segmenterconfig_ == _default_segmenterconfig_) {
    segmenterconfig_ = new ::std::string;
  }
  segmenterconfig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GalileoProcessorConfig::mutable_segmenterconfig() {
  set_has_segmenterconfig();
  if (segmenterconfig_ == _default_segmenterconfig_) {
    segmenterconfig_ = new ::std::string(*_default_segmenterconfig_);
  }
  return segmenterconfig_;
}
inline ::std::string* GalileoProcessorConfig::release_segmenterconfig() {
  clear_has_segmenterconfig();
  if (segmenterconfig_ == _default_segmenterconfig_) {
    return NULL;
  } else {
    ::std::string* temp = segmenterconfig_;
    segmenterconfig_ = const_cast< ::std::string*>(_default_segmenterconfig_);
    return temp;
  }
}
inline void GalileoProcessorConfig::set_allocated_segmenterconfig(::std::string* segmenterconfig) {
  if (segmenterconfig_ != _default_segmenterconfig_) {
    delete segmenterconfig_;
  }
  if (segmenterconfig) {
    set_has_segmenterconfig();
    segmenterconfig_ = segmenterconfig;
  } else {
    clear_has_segmenterconfig();
    segmenterconfig_ = const_cast< ::std::string*>(_default_segmenterconfig_);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_galileoprocessor

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_5fgalileoprocessor_2eproto__INCLUDED
