// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PinpointMessages.proto

#ifndef PROTOBUF_PinpointMessages_2eproto__INCLUDED
#define PROTOBUF_PinpointMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pinpoint_msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PinpointMessages_2eproto();
void protobuf_AssignDesc_PinpointMessages_2eproto();
void protobuf_ShutdownFile_PinpointMessages_2eproto();

class SignalHitRequest;
class SignalHit;
class SignalHitResponse;
class SetSNRThresholdRequest;
class SetSNRThresholdResponse;
class SignalSolutionRequest;
class SignalSolution;
class SignalSolutionResponse;
class TunePoint;
class SetTunePlanRequest;
class TunePlanActiveResponse;
class TunePlanUpdateResponse;
class SetGHzModeRequest;
class SetGHzModeResponse;

// ===================================================================

class SignalHitRequest : public ::google::protobuf::Message {
 public:
  SignalHitRequest();
  virtual ~SignalHitRequest();

  SignalHitRequest(const SignalHitRequest& from);

  inline SignalHitRequest& operator=(const SignalHitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalHitRequest& default_instance();

  void Swap(SignalHitRequest* other);

  // implements Message ----------------------------------------------

  SignalHitRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignalHitRequest& from);
  void MergeFrom(const SignalHitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "SIGNALHITREQUEST"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 messageID = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIDFieldNumber = 2;
  inline ::google::protobuf::int32 messageid() const;
  inline void set_messageid(::google::protobuf::int32 value);

  // optional int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional int64 timeTol = 4;
  inline bool has_timetol() const;
  inline void clear_timetol();
  static const int kTimeTolFieldNumber = 4;
  inline ::google::protobuf::int64 timetol() const;
  inline void set_timetol(::google::protobuf::int64 value);

  // optional int64 freq = 5;
  inline bool has_freq() const;
  inline void clear_freq();
  static const int kFreqFieldNumber = 5;
  inline ::google::protobuf::int64 freq() const;
  inline void set_freq(::google::protobuf::int64 value);

  // optional int64 freqTol = 6;
  inline bool has_freqtol() const;
  inline void clear_freqtol();
  static const int kFreqTolFieldNumber = 6;
  inline ::google::protobuf::int64 freqtol() const;
  inline void set_freqtol(::google::protobuf::int64 value);

  // optional string user = 7;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 7;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string globalID = 8;
  inline bool has_globalid() const;
  inline void clear_globalid();
  static const int kGlobalIDFieldNumber = 8;
  inline const ::std::string& globalid() const;
  inline void set_globalid(const ::std::string& value);
  inline void set_globalid(const char* value);
  inline void set_globalid(const char* value, size_t size);
  inline ::std::string* mutable_globalid();
  inline ::std::string* release_globalid();
  inline void set_allocated_globalid(::std::string* globalid);

  // @@protoc_insertion_point(class_scope:pinpoint_msg.SignalHitRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_timetol();
  inline void clear_has_timetol();
  inline void set_has_freq();
  inline void clear_has_freq();
  inline void set_has_freqtol();
  inline void clear_has_freqtol();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_globalid();
  inline void clear_has_globalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 timetol_;
  ::google::protobuf::int64 freq_;
  ::google::protobuf::int64 freqtol_;
  ::std::string* user_;
  ::std::string* globalid_;
  ::google::protobuf::int32 messageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PinpointMessages_2eproto();
  friend void protobuf_AssignDesc_PinpointMessages_2eproto();
  friend void protobuf_ShutdownFile_PinpointMessages_2eproto();

  void InitAsDefaultInstance();
  static SignalHitRequest* default_instance_;
};
// -------------------------------------------------------------------

class SignalHit : public ::google::protobuf::Message {
 public:
  SignalHit();
  virtual ~SignalHit();

  SignalHit(const SignalHit& from);

  inline SignalHit& operator=(const SignalHit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalHit& default_instance();

  void Swap(SignalHit* other);

  // implements Message ----------------------------------------------

  SignalHit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignalHit& from);
  void MergeFrom(const SignalHit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "SIGNALHIT"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 bytesAmount = 2;
  inline bool has_bytesamount() const;
  inline void clear_bytesamount();
  static const int kBytesAmountFieldNumber = 2;
  inline ::google::protobuf::int32 bytesamount() const;
  inline void set_bytesamount(::google::protobuf::int32 value);

  // optional int64 freq = 3;
  inline bool has_freq() const;
  inline void clear_freq();
  static const int kFreqFieldNumber = 3;
  inline ::google::protobuf::int64 freq() const;
  inline void set_freq(::google::protobuf::int64 value);

  // optional float azimuth = 4;
  inline bool has_azimuth() const;
  inline void clear_azimuth();
  static const int kAzimuthFieldNumber = 4;
  inline float azimuth() const;
  inline void set_azimuth(float value);

  // optional float elevation = 5;
  inline bool has_elevation() const;
  inline void clear_elevation();
  static const int kElevationFieldNumber = 5;
  inline float elevation() const;
  inline void set_elevation(float value);

  // optional float confidence = 6;
  inline bool has_confidence() const;
  inline void clear_confidence();
  static const int kConfidenceFieldNumber = 6;
  inline float confidence() const;
  inline void set_confidence(float value);

  // optional double longitude = 7;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 7;
  inline double longitude() const;
  inline void set_longitude(double value);

  // optional double latitude = 8;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 8;
  inline double latitude() const;
  inline void set_latitude(double value);

  // optional int64 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional int32 hitType = 10;
  inline bool has_hittype() const;
  inline void clear_hittype();
  static const int kHitTypeFieldNumber = 10;
  inline ::google::protobuf::int32 hittype() const;
  inline void set_hittype(::google::protobuf::int32 value);

  // optional string globalID = 11;
  inline bool has_globalid() const;
  inline void clear_globalid();
  static const int kGlobalIDFieldNumber = 11;
  inline const ::std::string& globalid() const;
  inline void set_globalid(const ::std::string& value);
  inline void set_globalid(const char* value);
  inline void set_globalid(const char* value, size_t size);
  inline ::std::string* mutable_globalid();
  inline ::std::string* release_globalid();
  inline void set_allocated_globalid(::std::string* globalid);

  // @@protoc_insertion_point(class_scope:pinpoint_msg.SignalHit)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_bytesamount();
  inline void clear_has_bytesamount();
  inline void set_has_freq();
  inline void clear_has_freq();
  inline void set_has_azimuth();
  inline void clear_has_azimuth();
  inline void set_has_elevation();
  inline void clear_has_elevation();
  inline void set_has_confidence();
  inline void clear_has_confidence();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_hittype();
  inline void clear_has_hittype();
  inline void set_has_globalid();
  inline void clear_has_globalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int64 freq_;
  ::google::protobuf::int32 bytesamount_;
  float azimuth_;
  float elevation_;
  float confidence_;
  double longitude_;
  double latitude_;
  ::google::protobuf::int64 time_;
  ::std::string* globalid_;
  ::google::protobuf::int32 hittype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_PinpointMessages_2eproto();
  friend void protobuf_AssignDesc_PinpointMessages_2eproto();
  friend void protobuf_ShutdownFile_PinpointMessages_2eproto();

  void InitAsDefaultInstance();
  static SignalHit* default_instance_;
};
// -------------------------------------------------------------------

class SignalHitResponse : public ::google::protobuf::Message {
 public:
  SignalHitResponse();
  virtual ~SignalHitResponse();

  SignalHitResponse(const SignalHitResponse& from);

  inline SignalHitResponse& operator=(const SignalHitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalHitResponse& default_instance();

  void Swap(SignalHitResponse* other);

  // implements Message ----------------------------------------------

  SignalHitResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignalHitResponse& from);
  void MergeFrom(const SignalHitResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "SIGNALHITRESPONSE"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 messageID = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIDFieldNumber = 2;
  inline ::google::protobuf::int32 messageid() const;
  inline void set_messageid(::google::protobuf::int32 value);

  // repeated .pinpoint_msg.SignalHit sigHits = 3;
  inline int sighits_size() const;
  inline void clear_sighits();
  static const int kSigHitsFieldNumber = 3;
  inline const ::pinpoint_msg::SignalHit& sighits(int index) const;
  inline ::pinpoint_msg::SignalHit* mutable_sighits(int index);
  inline ::pinpoint_msg::SignalHit* add_sighits();
  inline const ::google::protobuf::RepeatedPtrField< ::pinpoint_msg::SignalHit >&
      sighits() const;
  inline ::google::protobuf::RepeatedPtrField< ::pinpoint_msg::SignalHit >*
      mutable_sighits();

  // optional bool continue = 4;
  inline bool has_continue_() const;
  inline void clear_continue_();
  static const int kContinueFieldNumber = 4;
  inline bool continue_() const;
  inline void set_continue_(bool value);

  // optional string user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string globalID = 6;
  inline bool has_globalid() const;
  inline void clear_globalid();
  static const int kGlobalIDFieldNumber = 6;
  inline const ::std::string& globalid() const;
  inline void set_globalid(const ::std::string& value);
  inline void set_globalid(const char* value);
  inline void set_globalid(const char* value, size_t size);
  inline ::std::string* mutable_globalid();
  inline ::std::string* release_globalid();
  inline void set_allocated_globalid(::std::string* globalid);

  // @@protoc_insertion_point(class_scope:pinpoint_msg.SignalHitResponse)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_continue_();
  inline void clear_has_continue_();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_globalid();
  inline void clear_has_globalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::RepeatedPtrField< ::pinpoint_msg::SignalHit > sighits_;
  ::google::protobuf::int32 messageid_;
  bool continue__;
  ::std::string* user_;
  ::std::string* globalid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PinpointMessages_2eproto();
  friend void protobuf_AssignDesc_PinpointMessages_2eproto();
  friend void protobuf_ShutdownFile_PinpointMessages_2eproto();

  void InitAsDefaultInstance();
  static SignalHitResponse* default_instance_;
};
// -------------------------------------------------------------------

class SetSNRThresholdRequest : public ::google::protobuf::Message {
 public:
  SetSNRThresholdRequest();
  virtual ~SetSNRThresholdRequest();

  SetSNRThresholdRequest(const SetSNRThresholdRequest& from);

  inline SetSNRThresholdRequest& operator=(const SetSNRThresholdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetSNRThresholdRequest& default_instance();

  void Swap(SetSNRThresholdRequest* other);

  // implements Message ----------------------------------------------

  SetSNRThresholdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetSNRThresholdRequest& from);
  void MergeFrom(const SetSNRThresholdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "SETSNRTHRESHOLDREQUEST"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 messageID = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIDFieldNumber = 2;
  inline ::google::protobuf::int32 messageid() const;
  inline void set_messageid(::google::protobuf::int32 value);

  // optional int64 threshold = 3;
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 3;
  inline ::google::protobuf::int64 threshold() const;
  inline void set_threshold(::google::protobuf::int64 value);

  // optional int64 startFreq = 4;
  inline bool has_startfreq() const;
  inline void clear_startfreq();
  static const int kStartFreqFieldNumber = 4;
  inline ::google::protobuf::int64 startfreq() const;
  inline void set_startfreq(::google::protobuf::int64 value);

  // optional int64 stopFreq = 5;
  inline bool has_stopfreq() const;
  inline void clear_stopfreq();
  static const int kStopFreqFieldNumber = 5;
  inline ::google::protobuf::int64 stopfreq() const;
  inline void set_stopfreq(::google::protobuf::int64 value);

  // optional string user = 6;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 6;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string globalID = 7;
  inline bool has_globalid() const;
  inline void clear_globalid();
  static const int kGlobalIDFieldNumber = 7;
  inline const ::std::string& globalid() const;
  inline void set_globalid(const ::std::string& value);
  inline void set_globalid(const char* value);
  inline void set_globalid(const char* value, size_t size);
  inline ::std::string* mutable_globalid();
  inline ::std::string* release_globalid();
  inline void set_allocated_globalid(::std::string* globalid);

  // @@protoc_insertion_point(class_scope:pinpoint_msg.SetSNRThresholdRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_threshold();
  inline void clear_has_threshold();
  inline void set_has_startfreq();
  inline void clear_has_startfreq();
  inline void set_has_stopfreq();
  inline void clear_has_stopfreq();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_globalid();
  inline void clear_has_globalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int64 threshold_;
  ::google::protobuf::int64 startfreq_;
  ::google::protobuf::int64 stopfreq_;
  ::std::string* user_;
  ::std::string* globalid_;
  ::google::protobuf::int32 messageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PinpointMessages_2eproto();
  friend void protobuf_AssignDesc_PinpointMessages_2eproto();
  friend void protobuf_ShutdownFile_PinpointMessages_2eproto();

  void InitAsDefaultInstance();
  static SetSNRThresholdRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetSNRThresholdResponse : public ::google::protobuf::Message {
 public:
  SetSNRThresholdResponse();
  virtual ~SetSNRThresholdResponse();

  SetSNRThresholdResponse(const SetSNRThresholdResponse& from);

  inline SetSNRThresholdResponse& operator=(const SetSNRThresholdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetSNRThresholdResponse& default_instance();

  void Swap(SetSNRThresholdResponse* other);

  // implements Message ----------------------------------------------

  SetSNRThresholdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetSNRThresholdResponse& from);
  void MergeFrom(const SetSNRThresholdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "SETSNRTHRESHOLDRESPONSE"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 messageID = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIDFieldNumber = 2;
  inline ::google::protobuf::int32 messageid() const;
  inline void set_messageid(::google::protobuf::int32 value);

  // optional bool success = 3;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 3;
  inline bool success() const;
  inline void set_success(bool value);

  // optional string user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string globalID = 5;
  inline bool has_globalid() const;
  inline void clear_globalid();
  static const int kGlobalIDFieldNumber = 5;
  inline const ::std::string& globalid() const;
  inline void set_globalid(const ::std::string& value);
  inline void set_globalid(const char* value);
  inline void set_globalid(const char* value, size_t size);
  inline ::std::string* mutable_globalid();
  inline ::std::string* release_globalid();
  inline void set_allocated_globalid(::std::string* globalid);

  // @@protoc_insertion_point(class_scope:pinpoint_msg.SetSNRThresholdResponse)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_globalid();
  inline void clear_has_globalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int32 messageid_;
  bool success_;
  ::std::string* user_;
  ::std::string* globalid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PinpointMessages_2eproto();
  friend void protobuf_AssignDesc_PinpointMessages_2eproto();
  friend void protobuf_ShutdownFile_PinpointMessages_2eproto();

  void InitAsDefaultInstance();
  static SetSNRThresholdResponse* default_instance_;
};
// -------------------------------------------------------------------

class SignalSolutionRequest : public ::google::protobuf::Message {
 public:
  SignalSolutionRequest();
  virtual ~SignalSolutionRequest();

  SignalSolutionRequest(const SignalSolutionRequest& from);

  inline SignalSolutionRequest& operator=(const SignalSolutionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalSolutionRequest& default_instance();

  void Swap(SignalSolutionRequest* other);

  // implements Message ----------------------------------------------

  SignalSolutionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignalSolutionRequest& from);
  void MergeFrom(const SignalSolutionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "SIGNALSOLUTIONREQUEST"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 messageID = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIDFieldNumber = 2;
  inline ::google::protobuf::int32 messageid() const;
  inline void set_messageid(::google::protobuf::int32 value);

  // optional int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional int64 timeTol = 4;
  inline bool has_timetol() const;
  inline void clear_timetol();
  static const int kTimeTolFieldNumber = 4;
  inline ::google::protobuf::int64 timetol() const;
  inline void set_timetol(::google::protobuf::int64 value);

  // optional int64 freq = 5;
  inline bool has_freq() const;
  inline void clear_freq();
  static const int kFreqFieldNumber = 5;
  inline ::google::protobuf::int64 freq() const;
  inline void set_freq(::google::protobuf::int64 value);

  // optional int64 freqTol = 6;
  inline bool has_freqtol() const;
  inline void clear_freqtol();
  static const int kFreqTolFieldNumber = 6;
  inline ::google::protobuf::int64 freqtol() const;
  inline void set_freqtol(::google::protobuf::int64 value);

  // optional string user = 7;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 7;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string globalID = 8;
  inline bool has_globalid() const;
  inline void clear_globalid();
  static const int kGlobalIDFieldNumber = 8;
  inline const ::std::string& globalid() const;
  inline void set_globalid(const ::std::string& value);
  inline void set_globalid(const char* value);
  inline void set_globalid(const char* value, size_t size);
  inline ::std::string* mutable_globalid();
  inline ::std::string* release_globalid();
  inline void set_allocated_globalid(::std::string* globalid);

  // @@protoc_insertion_point(class_scope:pinpoint_msg.SignalSolutionRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_timetol();
  inline void clear_has_timetol();
  inline void set_has_freq();
  inline void clear_has_freq();
  inline void set_has_freqtol();
  inline void clear_has_freqtol();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_globalid();
  inline void clear_has_globalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 timetol_;
  ::google::protobuf::int64 freq_;
  ::google::protobuf::int64 freqtol_;
  ::std::string* user_;
  ::std::string* globalid_;
  ::google::protobuf::int32 messageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PinpointMessages_2eproto();
  friend void protobuf_AssignDesc_PinpointMessages_2eproto();
  friend void protobuf_ShutdownFile_PinpointMessages_2eproto();

  void InitAsDefaultInstance();
  static SignalSolutionRequest* default_instance_;
};
// -------------------------------------------------------------------

class SignalSolution : public ::google::protobuf::Message {
 public:
  SignalSolution();
  virtual ~SignalSolution();

  SignalSolution(const SignalSolution& from);

  inline SignalSolution& operator=(const SignalSolution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalSolution& default_instance();

  void Swap(SignalSolution* other);

  // implements Message ----------------------------------------------

  SignalSolution* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignalSolution& from);
  void MergeFrom(const SignalSolution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "SIGNALSOLUTION"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 byteAmount = 2;
  inline bool has_byteamount() const;
  inline void clear_byteamount();
  static const int kByteAmountFieldNumber = 2;
  inline ::google::protobuf::int32 byteamount() const;
  inline void set_byteamount(::google::protobuf::int32 value);

  // optional int64 freq = 3;
  inline bool has_freq() const;
  inline void clear_freq();
  static const int kFreqFieldNumber = 3;
  inline ::google::protobuf::int64 freq() const;
  inline void set_freq(::google::protobuf::int64 value);

  // optional float azimuth = 4;
  inline bool has_azimuth() const;
  inline void clear_azimuth();
  static const int kAzimuthFieldNumber = 4;
  inline float azimuth() const;
  inline void set_azimuth(float value);

  // optional float elevation = 5;
  inline bool has_elevation() const;
  inline void clear_elevation();
  static const int kElevationFieldNumber = 5;
  inline float elevation() const;
  inline void set_elevation(float value);

  // optional float confidence = 6;
  inline bool has_confidence() const;
  inline void clear_confidence();
  static const int kConfidenceFieldNumber = 6;
  inline float confidence() const;
  inline void set_confidence(float value);

  // optional double longitude = 7;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 7;
  inline double longitude() const;
  inline void set_longitude(double value);

  // optional double latitude = 8;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 8;
  inline double latitude() const;
  inline void set_latitude(double value);

  // optional int64 startTime = 9;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 9;
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);

  // optional int64 stopTime = 10;
  inline bool has_stoptime() const;
  inline void clear_stoptime();
  static const int kStopTimeFieldNumber = 10;
  inline ::google::protobuf::int64 stoptime() const;
  inline void set_stoptime(::google::protobuf::int64 value);

  // optional int64 hitType = 11;
  inline bool has_hittype() const;
  inline void clear_hittype();
  static const int kHitTypeFieldNumber = 11;
  inline ::google::protobuf::int64 hittype() const;
  inline void set_hittype(::google::protobuf::int64 value);

  // optional string globalID = 12;
  inline bool has_globalid() const;
  inline void clear_globalid();
  static const int kGlobalIDFieldNumber = 12;
  inline const ::std::string& globalid() const;
  inline void set_globalid(const ::std::string& value);
  inline void set_globalid(const char* value);
  inline void set_globalid(const char* value, size_t size);
  inline ::std::string* mutable_globalid();
  inline ::std::string* release_globalid();
  inline void set_allocated_globalid(::std::string* globalid);

  // @@protoc_insertion_point(class_scope:pinpoint_msg.SignalSolution)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_byteamount();
  inline void clear_has_byteamount();
  inline void set_has_freq();
  inline void clear_has_freq();
  inline void set_has_azimuth();
  inline void clear_has_azimuth();
  inline void set_has_elevation();
  inline void clear_has_elevation();
  inline void set_has_confidence();
  inline void clear_has_confidence();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_stoptime();
  inline void clear_has_stoptime();
  inline void set_has_hittype();
  inline void clear_has_hittype();
  inline void set_has_globalid();
  inline void clear_has_globalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int64 freq_;
  ::google::protobuf::int32 byteamount_;
  float azimuth_;
  float elevation_;
  float confidence_;
  double longitude_;
  double latitude_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int64 stoptime_;
  ::google::protobuf::int64 hittype_;
  ::std::string* globalid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_PinpointMessages_2eproto();
  friend void protobuf_AssignDesc_PinpointMessages_2eproto();
  friend void protobuf_ShutdownFile_PinpointMessages_2eproto();

  void InitAsDefaultInstance();
  static SignalSolution* default_instance_;
};
// -------------------------------------------------------------------

class SignalSolutionResponse : public ::google::protobuf::Message {
 public:
  SignalSolutionResponse();
  virtual ~SignalSolutionResponse();

  SignalSolutionResponse(const SignalSolutionResponse& from);

  inline SignalSolutionResponse& operator=(const SignalSolutionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalSolutionResponse& default_instance();

  void Swap(SignalSolutionResponse* other);

  // implements Message ----------------------------------------------

  SignalSolutionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignalSolutionResponse& from);
  void MergeFrom(const SignalSolutionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "SIGNALSOLUTIONRESPONSE"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 messageID = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIDFieldNumber = 2;
  inline ::google::protobuf::int32 messageid() const;
  inline void set_messageid(::google::protobuf::int32 value);

  // repeated .pinpoint_msg.SignalSolution sigSolution = 3;
  inline int sigsolution_size() const;
  inline void clear_sigsolution();
  static const int kSigSolutionFieldNumber = 3;
  inline const ::pinpoint_msg::SignalSolution& sigsolution(int index) const;
  inline ::pinpoint_msg::SignalSolution* mutable_sigsolution(int index);
  inline ::pinpoint_msg::SignalSolution* add_sigsolution();
  inline const ::google::protobuf::RepeatedPtrField< ::pinpoint_msg::SignalSolution >&
      sigsolution() const;
  inline ::google::protobuf::RepeatedPtrField< ::pinpoint_msg::SignalSolution >*
      mutable_sigsolution();

  // optional bool continue = 4;
  inline bool has_continue_() const;
  inline void clear_continue_();
  static const int kContinueFieldNumber = 4;
  inline bool continue_() const;
  inline void set_continue_(bool value);

  // optional string user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string globalID = 6;
  inline bool has_globalid() const;
  inline void clear_globalid();
  static const int kGlobalIDFieldNumber = 6;
  inline const ::std::string& globalid() const;
  inline void set_globalid(const ::std::string& value);
  inline void set_globalid(const char* value);
  inline void set_globalid(const char* value, size_t size);
  inline ::std::string* mutable_globalid();
  inline ::std::string* release_globalid();
  inline void set_allocated_globalid(::std::string* globalid);

  // @@protoc_insertion_point(class_scope:pinpoint_msg.SignalSolutionResponse)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_continue_();
  inline void clear_has_continue_();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_globalid();
  inline void clear_has_globalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::RepeatedPtrField< ::pinpoint_msg::SignalSolution > sigsolution_;
  ::google::protobuf::int32 messageid_;
  bool continue__;
  ::std::string* user_;
  ::std::string* globalid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PinpointMessages_2eproto();
  friend void protobuf_AssignDesc_PinpointMessages_2eproto();
  friend void protobuf_ShutdownFile_PinpointMessages_2eproto();

  void InitAsDefaultInstance();
  static SignalSolutionResponse* default_instance_;
};
// -------------------------------------------------------------------

class TunePoint : public ::google::protobuf::Message {
 public:
  TunePoint();
  virtual ~TunePoint();

  TunePoint(const TunePoint& from);

  inline TunePoint& operator=(const TunePoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TunePoint& default_instance();

  void Swap(TunePoint* other);

  // implements Message ----------------------------------------------

  TunePoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TunePoint& from);
  void MergeFrom(const TunePoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "TUNEPOINT"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 messageID = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIDFieldNumber = 2;
  inline ::google::protobuf::int32 messageid() const;
  inline void set_messageid(::google::protobuf::int32 value);

  // optional int64 centerFreq = 3;
  inline bool has_centerfreq() const;
  inline void clear_centerfreq();
  static const int kCenterFreqFieldNumber = 3;
  inline ::google::protobuf::int64 centerfreq() const;
  inline void set_centerfreq(::google::protobuf::int64 value);

  // optional int64 dwellTime = 4;
  inline bool has_dwelltime() const;
  inline void clear_dwelltime();
  static const int kDwellTimeFieldNumber = 4;
  inline ::google::protobuf::int64 dwelltime() const;
  inline void set_dwelltime(::google::protobuf::int64 value);

  // optional string user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string globalID = 6;
  inline bool has_globalid() const;
  inline void clear_globalid();
  static const int kGlobalIDFieldNumber = 6;
  inline const ::std::string& globalid() const;
  inline void set_globalid(const ::std::string& value);
  inline void set_globalid(const char* value);
  inline void set_globalid(const char* value, size_t size);
  inline ::std::string* mutable_globalid();
  inline ::std::string* release_globalid();
  inline void set_allocated_globalid(::std::string* globalid);

  // @@protoc_insertion_point(class_scope:pinpoint_msg.TunePoint)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_centerfreq();
  inline void clear_has_centerfreq();
  inline void set_has_dwelltime();
  inline void clear_has_dwelltime();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_globalid();
  inline void clear_has_globalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int64 centerfreq_;
  ::google::protobuf::int64 dwelltime_;
  ::std::string* user_;
  ::std::string* globalid_;
  ::google::protobuf::int32 messageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PinpointMessages_2eproto();
  friend void protobuf_AssignDesc_PinpointMessages_2eproto();
  friend void protobuf_ShutdownFile_PinpointMessages_2eproto();

  void InitAsDefaultInstance();
  static TunePoint* default_instance_;
};
// -------------------------------------------------------------------

class SetTunePlanRequest : public ::google::protobuf::Message {
 public:
  SetTunePlanRequest();
  virtual ~SetTunePlanRequest();

  SetTunePlanRequest(const SetTunePlanRequest& from);

  inline SetTunePlanRequest& operator=(const SetTunePlanRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetTunePlanRequest& default_instance();

  void Swap(SetTunePlanRequest* other);

  // implements Message ----------------------------------------------

  SetTunePlanRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetTunePlanRequest& from);
  void MergeFrom(const SetTunePlanRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "SETTUNEPLANREQUEST"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 messageID = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIDFieldNumber = 2;
  inline ::google::protobuf::int32 messageid() const;
  inline void set_messageid(::google::protobuf::int32 value);

  // optional bool repeat = 3;
  inline bool has_repeat() const;
  inline void clear_repeat();
  static const int kRepeatFieldNumber = 3;
  inline bool repeat() const;
  inline void set_repeat(bool value);

  // repeated .pinpoint_msg.TunePoint tunePlan = 4;
  inline int tuneplan_size() const;
  inline void clear_tuneplan();
  static const int kTunePlanFieldNumber = 4;
  inline const ::pinpoint_msg::TunePoint& tuneplan(int index) const;
  inline ::pinpoint_msg::TunePoint* mutable_tuneplan(int index);
  inline ::pinpoint_msg::TunePoint* add_tuneplan();
  inline const ::google::protobuf::RepeatedPtrField< ::pinpoint_msg::TunePoint >&
      tuneplan() const;
  inline ::google::protobuf::RepeatedPtrField< ::pinpoint_msg::TunePoint >*
      mutable_tuneplan();

  // optional string user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string globalID = 6;
  inline bool has_globalid() const;
  inline void clear_globalid();
  static const int kGlobalIDFieldNumber = 6;
  inline const ::std::string& globalid() const;
  inline void set_globalid(const ::std::string& value);
  inline void set_globalid(const char* value);
  inline void set_globalid(const char* value, size_t size);
  inline ::std::string* mutable_globalid();
  inline ::std::string* release_globalid();
  inline void set_allocated_globalid(::std::string* globalid);

  // @@protoc_insertion_point(class_scope:pinpoint_msg.SetTunePlanRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_repeat();
  inline void clear_has_repeat();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_globalid();
  inline void clear_has_globalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int32 messageid_;
  bool repeat_;
  ::google::protobuf::RepeatedPtrField< ::pinpoint_msg::TunePoint > tuneplan_;
  ::std::string* user_;
  ::std::string* globalid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PinpointMessages_2eproto();
  friend void protobuf_AssignDesc_PinpointMessages_2eproto();
  friend void protobuf_ShutdownFile_PinpointMessages_2eproto();

  void InitAsDefaultInstance();
  static SetTunePlanRequest* default_instance_;
};
// -------------------------------------------------------------------

class TunePlanActiveResponse : public ::google::protobuf::Message {
 public:
  TunePlanActiveResponse();
  virtual ~TunePlanActiveResponse();

  TunePlanActiveResponse(const TunePlanActiveResponse& from);

  inline TunePlanActiveResponse& operator=(const TunePlanActiveResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TunePlanActiveResponse& default_instance();

  void Swap(TunePlanActiveResponse* other);

  // implements Message ----------------------------------------------

  TunePlanActiveResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TunePlanActiveResponse& from);
  void MergeFrom(const TunePlanActiveResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "TUNEPLANACTIVERESPONSE"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 messageID = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIDFieldNumber = 2;
  inline ::google::protobuf::int32 messageid() const;
  inline void set_messageid(::google::protobuf::int32 value);

  // optional bool active = 3;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 3;
  inline bool active() const;
  inline void set_active(bool value);

  // optional string user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string globalID = 5;
  inline bool has_globalid() const;
  inline void clear_globalid();
  static const int kGlobalIDFieldNumber = 5;
  inline const ::std::string& globalid() const;
  inline void set_globalid(const ::std::string& value);
  inline void set_globalid(const char* value);
  inline void set_globalid(const char* value, size_t size);
  inline ::std::string* mutable_globalid();
  inline ::std::string* release_globalid();
  inline void set_allocated_globalid(::std::string* globalid);

  // @@protoc_insertion_point(class_scope:pinpoint_msg.TunePlanActiveResponse)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_globalid();
  inline void clear_has_globalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int32 messageid_;
  bool active_;
  ::std::string* user_;
  ::std::string* globalid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PinpointMessages_2eproto();
  friend void protobuf_AssignDesc_PinpointMessages_2eproto();
  friend void protobuf_ShutdownFile_PinpointMessages_2eproto();

  void InitAsDefaultInstance();
  static TunePlanActiveResponse* default_instance_;
};
// -------------------------------------------------------------------

class TunePlanUpdateResponse : public ::google::protobuf::Message {
 public:
  TunePlanUpdateResponse();
  virtual ~TunePlanUpdateResponse();

  TunePlanUpdateResponse(const TunePlanUpdateResponse& from);

  inline TunePlanUpdateResponse& operator=(const TunePlanUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TunePlanUpdateResponse& default_instance();

  void Swap(TunePlanUpdateResponse* other);

  // implements Message ----------------------------------------------

  TunePlanUpdateResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TunePlanUpdateResponse& from);
  void MergeFrom(const TunePlanUpdateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "TUNEPLANUPDATERESPONSE"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 messageID = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIDFieldNumber = 2;
  inline ::google::protobuf::int32 messageid() const;
  inline void set_messageid(::google::protobuf::int32 value);

  // optional bool success = 3;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 3;
  inline bool success() const;
  inline void set_success(bool value);

  // optional int64 lowFreq = 4;
  inline bool has_lowfreq() const;
  inline void clear_lowfreq();
  static const int kLowFreqFieldNumber = 4;
  inline ::google::protobuf::int64 lowfreq() const;
  inline void set_lowfreq(::google::protobuf::int64 value);

  // optional int64 hiFreq = 5;
  inline bool has_hifreq() const;
  inline void clear_hifreq();
  static const int kHiFreqFieldNumber = 5;
  inline ::google::protobuf::int64 hifreq() const;
  inline void set_hifreq(::google::protobuf::int64 value);

  // optional string user = 6;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 6;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string globalID = 7;
  inline bool has_globalid() const;
  inline void clear_globalid();
  static const int kGlobalIDFieldNumber = 7;
  inline const ::std::string& globalid() const;
  inline void set_globalid(const ::std::string& value);
  inline void set_globalid(const char* value);
  inline void set_globalid(const char* value, size_t size);
  inline ::std::string* mutable_globalid();
  inline ::std::string* release_globalid();
  inline void set_allocated_globalid(::std::string* globalid);

  // @@protoc_insertion_point(class_scope:pinpoint_msg.TunePlanUpdateResponse)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_lowfreq();
  inline void clear_has_lowfreq();
  inline void set_has_hifreq();
  inline void clear_has_hifreq();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_globalid();
  inline void clear_has_globalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int32 messageid_;
  bool success_;
  ::google::protobuf::int64 lowfreq_;
  ::google::protobuf::int64 hifreq_;
  ::std::string* user_;
  ::std::string* globalid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PinpointMessages_2eproto();
  friend void protobuf_AssignDesc_PinpointMessages_2eproto();
  friend void protobuf_ShutdownFile_PinpointMessages_2eproto();

  void InitAsDefaultInstance();
  static TunePlanUpdateResponse* default_instance_;
};
// -------------------------------------------------------------------

class SetGHzModeRequest : public ::google::protobuf::Message {
 public:
  SetGHzModeRequest();
  virtual ~SetGHzModeRequest();

  SetGHzModeRequest(const SetGHzModeRequest& from);

  inline SetGHzModeRequest& operator=(const SetGHzModeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetGHzModeRequest& default_instance();

  void Swap(SetGHzModeRequest* other);

  // implements Message ----------------------------------------------

  SetGHzModeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetGHzModeRequest& from);
  void MergeFrom(const SetGHzModeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "SETGHZMODEREQUEST"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 messageID = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIDFieldNumber = 2;
  inline ::google::protobuf::int32 messageid() const;
  inline void set_messageid(::google::protobuf::int32 value);

  // optional int32 mode = 3;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 3;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // optional string user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string globalID = 5;
  inline bool has_globalid() const;
  inline void clear_globalid();
  static const int kGlobalIDFieldNumber = 5;
  inline const ::std::string& globalid() const;
  inline void set_globalid(const ::std::string& value);
  inline void set_globalid(const char* value);
  inline void set_globalid(const char* value, size_t size);
  inline ::std::string* mutable_globalid();
  inline ::std::string* release_globalid();
  inline void set_allocated_globalid(::std::string* globalid);

  // @@protoc_insertion_point(class_scope:pinpoint_msg.SetGHzModeRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_globalid();
  inline void clear_has_globalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int32 messageid_;
  ::google::protobuf::int32 mode_;
  ::std::string* user_;
  ::std::string* globalid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PinpointMessages_2eproto();
  friend void protobuf_AssignDesc_PinpointMessages_2eproto();
  friend void protobuf_ShutdownFile_PinpointMessages_2eproto();

  void InitAsDefaultInstance();
  static SetGHzModeRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetGHzModeResponse : public ::google::protobuf::Message {
 public:
  SetGHzModeResponse();
  virtual ~SetGHzModeResponse();

  SetGHzModeResponse(const SetGHzModeResponse& from);

  inline SetGHzModeResponse& operator=(const SetGHzModeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetGHzModeResponse& default_instance();

  void Swap(SetGHzModeResponse* other);

  // implements Message ----------------------------------------------

  SetGHzModeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetGHzModeResponse& from);
  void MergeFrom(const SetGHzModeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "SETGHZMODERESPONSE"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 messageID = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIDFieldNumber = 2;
  inline ::google::protobuf::int32 messageid() const;
  inline void set_messageid(::google::protobuf::int32 value);

  // optional bool success = 3;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 3;
  inline bool success() const;
  inline void set_success(bool value);

  // optional string user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string globalID = 5;
  inline bool has_globalid() const;
  inline void clear_globalid();
  static const int kGlobalIDFieldNumber = 5;
  inline const ::std::string& globalid() const;
  inline void set_globalid(const ::std::string& value);
  inline void set_globalid(const char* value);
  inline void set_globalid(const char* value, size_t size);
  inline ::std::string* mutable_globalid();
  inline ::std::string* release_globalid();
  inline void set_allocated_globalid(::std::string* globalid);

  // @@protoc_insertion_point(class_scope:pinpoint_msg.SetGHzModeResponse)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_globalid();
  inline void clear_has_globalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int32 messageid_;
  bool success_;
  ::std::string* user_;
  ::std::string* globalid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PinpointMessages_2eproto();
  friend void protobuf_AssignDesc_PinpointMessages_2eproto();
  friend void protobuf_ShutdownFile_PinpointMessages_2eproto();

  void InitAsDefaultInstance();
  static SetGHzModeResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// SignalHitRequest

// optional string msgName = 1 [default = "SIGNALHITREQUEST"];
inline bool SignalHitRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalHitRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalHitRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalHitRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& SignalHitRequest::msgname() const {
  return *msgname_;
}
inline void SignalHitRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SignalHitRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SignalHitRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalHitRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* SignalHitRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void SignalHitRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 messageID = 2;
inline bool SignalHitRequest::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalHitRequest::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalHitRequest::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalHitRequest::clear_messageid() {
  messageid_ = 0;
  clear_has_messageid();
}
inline ::google::protobuf::int32 SignalHitRequest::messageid() const {
  return messageid_;
}
inline void SignalHitRequest::set_messageid(::google::protobuf::int32 value) {
  set_has_messageid();
  messageid_ = value;
}

// optional int64 time = 3;
inline bool SignalHitRequest::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignalHitRequest::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignalHitRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignalHitRequest::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 SignalHitRequest::time() const {
  return time_;
}
inline void SignalHitRequest::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional int64 timeTol = 4;
inline bool SignalHitRequest::has_timetol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignalHitRequest::set_has_timetol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignalHitRequest::clear_has_timetol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignalHitRequest::clear_timetol() {
  timetol_ = GOOGLE_LONGLONG(0);
  clear_has_timetol();
}
inline ::google::protobuf::int64 SignalHitRequest::timetol() const {
  return timetol_;
}
inline void SignalHitRequest::set_timetol(::google::protobuf::int64 value) {
  set_has_timetol();
  timetol_ = value;
}

// optional int64 freq = 5;
inline bool SignalHitRequest::has_freq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SignalHitRequest::set_has_freq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SignalHitRequest::clear_has_freq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SignalHitRequest::clear_freq() {
  freq_ = GOOGLE_LONGLONG(0);
  clear_has_freq();
}
inline ::google::protobuf::int64 SignalHitRequest::freq() const {
  return freq_;
}
inline void SignalHitRequest::set_freq(::google::protobuf::int64 value) {
  set_has_freq();
  freq_ = value;
}

// optional int64 freqTol = 6;
inline bool SignalHitRequest::has_freqtol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SignalHitRequest::set_has_freqtol() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SignalHitRequest::clear_has_freqtol() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SignalHitRequest::clear_freqtol() {
  freqtol_ = GOOGLE_LONGLONG(0);
  clear_has_freqtol();
}
inline ::google::protobuf::int64 SignalHitRequest::freqtol() const {
  return freqtol_;
}
inline void SignalHitRequest::set_freqtol(::google::protobuf::int64 value) {
  set_has_freqtol();
  freqtol_ = value;
}

// optional string user = 7;
inline bool SignalHitRequest::has_user() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SignalHitRequest::set_has_user() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SignalHitRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SignalHitRequest::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& SignalHitRequest::user() const {
  return *user_;
}
inline void SignalHitRequest::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SignalHitRequest::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SignalHitRequest::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalHitRequest::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* SignalHitRequest::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignalHitRequest::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string globalID = 8;
inline bool SignalHitRequest::has_globalid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SignalHitRequest::set_has_globalid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SignalHitRequest::clear_has_globalid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SignalHitRequest::clear_globalid() {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    globalid_->clear();
  }
  clear_has_globalid();
}
inline const ::std::string& SignalHitRequest::globalid() const {
  return *globalid_;
}
inline void SignalHitRequest::set_globalid(const ::std::string& value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SignalHitRequest::set_globalid(const char* value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SignalHitRequest::set_globalid(const char* value, size_t size) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalHitRequest::mutable_globalid() {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  return globalid_;
}
inline ::std::string* SignalHitRequest::release_globalid() {
  clear_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = globalid_;
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignalHitRequest::set_allocated_globalid(::std::string* globalid) {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (globalid) {
    set_has_globalid();
    globalid_ = globalid;
  } else {
    clear_has_globalid();
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SignalHit

// optional string msgName = 1 [default = "SIGNALHIT"];
inline bool SignalHit::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalHit::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalHit::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalHit::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& SignalHit::msgname() const {
  return *msgname_;
}
inline void SignalHit::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SignalHit::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SignalHit::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalHit::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* SignalHit::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void SignalHit::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 bytesAmount = 2;
inline bool SignalHit::has_bytesamount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalHit::set_has_bytesamount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalHit::clear_has_bytesamount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalHit::clear_bytesamount() {
  bytesamount_ = 0;
  clear_has_bytesamount();
}
inline ::google::protobuf::int32 SignalHit::bytesamount() const {
  return bytesamount_;
}
inline void SignalHit::set_bytesamount(::google::protobuf::int32 value) {
  set_has_bytesamount();
  bytesamount_ = value;
}

// optional int64 freq = 3;
inline bool SignalHit::has_freq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignalHit::set_has_freq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignalHit::clear_has_freq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignalHit::clear_freq() {
  freq_ = GOOGLE_LONGLONG(0);
  clear_has_freq();
}
inline ::google::protobuf::int64 SignalHit::freq() const {
  return freq_;
}
inline void SignalHit::set_freq(::google::protobuf::int64 value) {
  set_has_freq();
  freq_ = value;
}

// optional float azimuth = 4;
inline bool SignalHit::has_azimuth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignalHit::set_has_azimuth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignalHit::clear_has_azimuth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignalHit::clear_azimuth() {
  azimuth_ = 0;
  clear_has_azimuth();
}
inline float SignalHit::azimuth() const {
  return azimuth_;
}
inline void SignalHit::set_azimuth(float value) {
  set_has_azimuth();
  azimuth_ = value;
}

// optional float elevation = 5;
inline bool SignalHit::has_elevation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SignalHit::set_has_elevation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SignalHit::clear_has_elevation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SignalHit::clear_elevation() {
  elevation_ = 0;
  clear_has_elevation();
}
inline float SignalHit::elevation() const {
  return elevation_;
}
inline void SignalHit::set_elevation(float value) {
  set_has_elevation();
  elevation_ = value;
}

// optional float confidence = 6;
inline bool SignalHit::has_confidence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SignalHit::set_has_confidence() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SignalHit::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SignalHit::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
inline float SignalHit::confidence() const {
  return confidence_;
}
inline void SignalHit::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
}

// optional double longitude = 7;
inline bool SignalHit::has_longitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SignalHit::set_has_longitude() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SignalHit::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SignalHit::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double SignalHit::longitude() const {
  return longitude_;
}
inline void SignalHit::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
}

// optional double latitude = 8;
inline bool SignalHit::has_latitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SignalHit::set_has_latitude() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SignalHit::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SignalHit::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double SignalHit::latitude() const {
  return latitude_;
}
inline void SignalHit::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
}

// optional int64 time = 9;
inline bool SignalHit::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SignalHit::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SignalHit::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SignalHit::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 SignalHit::time() const {
  return time_;
}
inline void SignalHit::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional int32 hitType = 10;
inline bool SignalHit::has_hittype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SignalHit::set_has_hittype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SignalHit::clear_has_hittype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SignalHit::clear_hittype() {
  hittype_ = 0;
  clear_has_hittype();
}
inline ::google::protobuf::int32 SignalHit::hittype() const {
  return hittype_;
}
inline void SignalHit::set_hittype(::google::protobuf::int32 value) {
  set_has_hittype();
  hittype_ = value;
}

// optional string globalID = 11;
inline bool SignalHit::has_globalid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SignalHit::set_has_globalid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SignalHit::clear_has_globalid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SignalHit::clear_globalid() {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    globalid_->clear();
  }
  clear_has_globalid();
}
inline const ::std::string& SignalHit::globalid() const {
  return *globalid_;
}
inline void SignalHit::set_globalid(const ::std::string& value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SignalHit::set_globalid(const char* value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SignalHit::set_globalid(const char* value, size_t size) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalHit::mutable_globalid() {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  return globalid_;
}
inline ::std::string* SignalHit::release_globalid() {
  clear_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = globalid_;
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignalHit::set_allocated_globalid(::std::string* globalid) {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (globalid) {
    set_has_globalid();
    globalid_ = globalid;
  } else {
    clear_has_globalid();
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SignalHitResponse

// optional string msgName = 1 [default = "SIGNALHITRESPONSE"];
inline bool SignalHitResponse::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalHitResponse::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalHitResponse::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalHitResponse::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& SignalHitResponse::msgname() const {
  return *msgname_;
}
inline void SignalHitResponse::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SignalHitResponse::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SignalHitResponse::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalHitResponse::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* SignalHitResponse::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void SignalHitResponse::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 messageID = 2;
inline bool SignalHitResponse::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalHitResponse::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalHitResponse::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalHitResponse::clear_messageid() {
  messageid_ = 0;
  clear_has_messageid();
}
inline ::google::protobuf::int32 SignalHitResponse::messageid() const {
  return messageid_;
}
inline void SignalHitResponse::set_messageid(::google::protobuf::int32 value) {
  set_has_messageid();
  messageid_ = value;
}

// repeated .pinpoint_msg.SignalHit sigHits = 3;
inline int SignalHitResponse::sighits_size() const {
  return sighits_.size();
}
inline void SignalHitResponse::clear_sighits() {
  sighits_.Clear();
}
inline const ::pinpoint_msg::SignalHit& SignalHitResponse::sighits(int index) const {
  return sighits_.Get(index);
}
inline ::pinpoint_msg::SignalHit* SignalHitResponse::mutable_sighits(int index) {
  return sighits_.Mutable(index);
}
inline ::pinpoint_msg::SignalHit* SignalHitResponse::add_sighits() {
  return sighits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pinpoint_msg::SignalHit >&
SignalHitResponse::sighits() const {
  return sighits_;
}
inline ::google::protobuf::RepeatedPtrField< ::pinpoint_msg::SignalHit >*
SignalHitResponse::mutable_sighits() {
  return &sighits_;
}

// optional bool continue = 4;
inline bool SignalHitResponse::has_continue_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignalHitResponse::set_has_continue_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignalHitResponse::clear_has_continue_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignalHitResponse::clear_continue_() {
  continue__ = false;
  clear_has_continue_();
}
inline bool SignalHitResponse::continue_() const {
  return continue__;
}
inline void SignalHitResponse::set_continue_(bool value) {
  set_has_continue_();
  continue__ = value;
}

// optional string user = 5;
inline bool SignalHitResponse::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SignalHitResponse::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SignalHitResponse::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SignalHitResponse::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& SignalHitResponse::user() const {
  return *user_;
}
inline void SignalHitResponse::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SignalHitResponse::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SignalHitResponse::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalHitResponse::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* SignalHitResponse::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignalHitResponse::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string globalID = 6;
inline bool SignalHitResponse::has_globalid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SignalHitResponse::set_has_globalid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SignalHitResponse::clear_has_globalid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SignalHitResponse::clear_globalid() {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    globalid_->clear();
  }
  clear_has_globalid();
}
inline const ::std::string& SignalHitResponse::globalid() const {
  return *globalid_;
}
inline void SignalHitResponse::set_globalid(const ::std::string& value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SignalHitResponse::set_globalid(const char* value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SignalHitResponse::set_globalid(const char* value, size_t size) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalHitResponse::mutable_globalid() {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  return globalid_;
}
inline ::std::string* SignalHitResponse::release_globalid() {
  clear_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = globalid_;
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignalHitResponse::set_allocated_globalid(::std::string* globalid) {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (globalid) {
    set_has_globalid();
    globalid_ = globalid;
  } else {
    clear_has_globalid();
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SetSNRThresholdRequest

// optional string msgName = 1 [default = "SETSNRTHRESHOLDREQUEST"];
inline bool SetSNRThresholdRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetSNRThresholdRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetSNRThresholdRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetSNRThresholdRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& SetSNRThresholdRequest::msgname() const {
  return *msgname_;
}
inline void SetSNRThresholdRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SetSNRThresholdRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SetSNRThresholdRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetSNRThresholdRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* SetSNRThresholdRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void SetSNRThresholdRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 messageID = 2;
inline bool SetSNRThresholdRequest::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetSNRThresholdRequest::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetSNRThresholdRequest::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetSNRThresholdRequest::clear_messageid() {
  messageid_ = 0;
  clear_has_messageid();
}
inline ::google::protobuf::int32 SetSNRThresholdRequest::messageid() const {
  return messageid_;
}
inline void SetSNRThresholdRequest::set_messageid(::google::protobuf::int32 value) {
  set_has_messageid();
  messageid_ = value;
}

// optional int64 threshold = 3;
inline bool SetSNRThresholdRequest::has_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetSNRThresholdRequest::set_has_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetSNRThresholdRequest::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetSNRThresholdRequest::clear_threshold() {
  threshold_ = GOOGLE_LONGLONG(0);
  clear_has_threshold();
}
inline ::google::protobuf::int64 SetSNRThresholdRequest::threshold() const {
  return threshold_;
}
inline void SetSNRThresholdRequest::set_threshold(::google::protobuf::int64 value) {
  set_has_threshold();
  threshold_ = value;
}

// optional int64 startFreq = 4;
inline bool SetSNRThresholdRequest::has_startfreq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SetSNRThresholdRequest::set_has_startfreq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SetSNRThresholdRequest::clear_has_startfreq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SetSNRThresholdRequest::clear_startfreq() {
  startfreq_ = GOOGLE_LONGLONG(0);
  clear_has_startfreq();
}
inline ::google::protobuf::int64 SetSNRThresholdRequest::startfreq() const {
  return startfreq_;
}
inline void SetSNRThresholdRequest::set_startfreq(::google::protobuf::int64 value) {
  set_has_startfreq();
  startfreq_ = value;
}

// optional int64 stopFreq = 5;
inline bool SetSNRThresholdRequest::has_stopfreq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SetSNRThresholdRequest::set_has_stopfreq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SetSNRThresholdRequest::clear_has_stopfreq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SetSNRThresholdRequest::clear_stopfreq() {
  stopfreq_ = GOOGLE_LONGLONG(0);
  clear_has_stopfreq();
}
inline ::google::protobuf::int64 SetSNRThresholdRequest::stopfreq() const {
  return stopfreq_;
}
inline void SetSNRThresholdRequest::set_stopfreq(::google::protobuf::int64 value) {
  set_has_stopfreq();
  stopfreq_ = value;
}

// optional string user = 6;
inline bool SetSNRThresholdRequest::has_user() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SetSNRThresholdRequest::set_has_user() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SetSNRThresholdRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SetSNRThresholdRequest::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& SetSNRThresholdRequest::user() const {
  return *user_;
}
inline void SetSNRThresholdRequest::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SetSNRThresholdRequest::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SetSNRThresholdRequest::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetSNRThresholdRequest::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* SetSNRThresholdRequest::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetSNRThresholdRequest::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string globalID = 7;
inline bool SetSNRThresholdRequest::has_globalid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SetSNRThresholdRequest::set_has_globalid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SetSNRThresholdRequest::clear_has_globalid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SetSNRThresholdRequest::clear_globalid() {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    globalid_->clear();
  }
  clear_has_globalid();
}
inline const ::std::string& SetSNRThresholdRequest::globalid() const {
  return *globalid_;
}
inline void SetSNRThresholdRequest::set_globalid(const ::std::string& value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SetSNRThresholdRequest::set_globalid(const char* value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SetSNRThresholdRequest::set_globalid(const char* value, size_t size) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetSNRThresholdRequest::mutable_globalid() {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  return globalid_;
}
inline ::std::string* SetSNRThresholdRequest::release_globalid() {
  clear_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = globalid_;
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetSNRThresholdRequest::set_allocated_globalid(::std::string* globalid) {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (globalid) {
    set_has_globalid();
    globalid_ = globalid;
  } else {
    clear_has_globalid();
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SetSNRThresholdResponse

// optional string msgName = 1 [default = "SETSNRTHRESHOLDRESPONSE"];
inline bool SetSNRThresholdResponse::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetSNRThresholdResponse::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetSNRThresholdResponse::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetSNRThresholdResponse::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& SetSNRThresholdResponse::msgname() const {
  return *msgname_;
}
inline void SetSNRThresholdResponse::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SetSNRThresholdResponse::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SetSNRThresholdResponse::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetSNRThresholdResponse::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* SetSNRThresholdResponse::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void SetSNRThresholdResponse::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 messageID = 2;
inline bool SetSNRThresholdResponse::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetSNRThresholdResponse::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetSNRThresholdResponse::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetSNRThresholdResponse::clear_messageid() {
  messageid_ = 0;
  clear_has_messageid();
}
inline ::google::protobuf::int32 SetSNRThresholdResponse::messageid() const {
  return messageid_;
}
inline void SetSNRThresholdResponse::set_messageid(::google::protobuf::int32 value) {
  set_has_messageid();
  messageid_ = value;
}

// optional bool success = 3;
inline bool SetSNRThresholdResponse::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetSNRThresholdResponse::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetSNRThresholdResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetSNRThresholdResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool SetSNRThresholdResponse::success() const {
  return success_;
}
inline void SetSNRThresholdResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional string user = 4;
inline bool SetSNRThresholdResponse::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SetSNRThresholdResponse::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SetSNRThresholdResponse::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SetSNRThresholdResponse::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& SetSNRThresholdResponse::user() const {
  return *user_;
}
inline void SetSNRThresholdResponse::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SetSNRThresholdResponse::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SetSNRThresholdResponse::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetSNRThresholdResponse::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* SetSNRThresholdResponse::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetSNRThresholdResponse::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string globalID = 5;
inline bool SetSNRThresholdResponse::has_globalid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SetSNRThresholdResponse::set_has_globalid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SetSNRThresholdResponse::clear_has_globalid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SetSNRThresholdResponse::clear_globalid() {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    globalid_->clear();
  }
  clear_has_globalid();
}
inline const ::std::string& SetSNRThresholdResponse::globalid() const {
  return *globalid_;
}
inline void SetSNRThresholdResponse::set_globalid(const ::std::string& value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SetSNRThresholdResponse::set_globalid(const char* value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SetSNRThresholdResponse::set_globalid(const char* value, size_t size) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetSNRThresholdResponse::mutable_globalid() {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  return globalid_;
}
inline ::std::string* SetSNRThresholdResponse::release_globalid() {
  clear_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = globalid_;
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetSNRThresholdResponse::set_allocated_globalid(::std::string* globalid) {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (globalid) {
    set_has_globalid();
    globalid_ = globalid;
  } else {
    clear_has_globalid();
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SignalSolutionRequest

// optional string msgName = 1 [default = "SIGNALSOLUTIONREQUEST"];
inline bool SignalSolutionRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalSolutionRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalSolutionRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalSolutionRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& SignalSolutionRequest::msgname() const {
  return *msgname_;
}
inline void SignalSolutionRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SignalSolutionRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SignalSolutionRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalSolutionRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* SignalSolutionRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void SignalSolutionRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 messageID = 2;
inline bool SignalSolutionRequest::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalSolutionRequest::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalSolutionRequest::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalSolutionRequest::clear_messageid() {
  messageid_ = 0;
  clear_has_messageid();
}
inline ::google::protobuf::int32 SignalSolutionRequest::messageid() const {
  return messageid_;
}
inline void SignalSolutionRequest::set_messageid(::google::protobuf::int32 value) {
  set_has_messageid();
  messageid_ = value;
}

// optional int64 time = 3;
inline bool SignalSolutionRequest::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignalSolutionRequest::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignalSolutionRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignalSolutionRequest::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 SignalSolutionRequest::time() const {
  return time_;
}
inline void SignalSolutionRequest::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional int64 timeTol = 4;
inline bool SignalSolutionRequest::has_timetol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignalSolutionRequest::set_has_timetol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignalSolutionRequest::clear_has_timetol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignalSolutionRequest::clear_timetol() {
  timetol_ = GOOGLE_LONGLONG(0);
  clear_has_timetol();
}
inline ::google::protobuf::int64 SignalSolutionRequest::timetol() const {
  return timetol_;
}
inline void SignalSolutionRequest::set_timetol(::google::protobuf::int64 value) {
  set_has_timetol();
  timetol_ = value;
}

// optional int64 freq = 5;
inline bool SignalSolutionRequest::has_freq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SignalSolutionRequest::set_has_freq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SignalSolutionRequest::clear_has_freq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SignalSolutionRequest::clear_freq() {
  freq_ = GOOGLE_LONGLONG(0);
  clear_has_freq();
}
inline ::google::protobuf::int64 SignalSolutionRequest::freq() const {
  return freq_;
}
inline void SignalSolutionRequest::set_freq(::google::protobuf::int64 value) {
  set_has_freq();
  freq_ = value;
}

// optional int64 freqTol = 6;
inline bool SignalSolutionRequest::has_freqtol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SignalSolutionRequest::set_has_freqtol() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SignalSolutionRequest::clear_has_freqtol() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SignalSolutionRequest::clear_freqtol() {
  freqtol_ = GOOGLE_LONGLONG(0);
  clear_has_freqtol();
}
inline ::google::protobuf::int64 SignalSolutionRequest::freqtol() const {
  return freqtol_;
}
inline void SignalSolutionRequest::set_freqtol(::google::protobuf::int64 value) {
  set_has_freqtol();
  freqtol_ = value;
}

// optional string user = 7;
inline bool SignalSolutionRequest::has_user() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SignalSolutionRequest::set_has_user() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SignalSolutionRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SignalSolutionRequest::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& SignalSolutionRequest::user() const {
  return *user_;
}
inline void SignalSolutionRequest::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SignalSolutionRequest::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SignalSolutionRequest::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalSolutionRequest::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* SignalSolutionRequest::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignalSolutionRequest::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string globalID = 8;
inline bool SignalSolutionRequest::has_globalid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SignalSolutionRequest::set_has_globalid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SignalSolutionRequest::clear_has_globalid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SignalSolutionRequest::clear_globalid() {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    globalid_->clear();
  }
  clear_has_globalid();
}
inline const ::std::string& SignalSolutionRequest::globalid() const {
  return *globalid_;
}
inline void SignalSolutionRequest::set_globalid(const ::std::string& value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SignalSolutionRequest::set_globalid(const char* value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SignalSolutionRequest::set_globalid(const char* value, size_t size) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalSolutionRequest::mutable_globalid() {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  return globalid_;
}
inline ::std::string* SignalSolutionRequest::release_globalid() {
  clear_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = globalid_;
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignalSolutionRequest::set_allocated_globalid(::std::string* globalid) {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (globalid) {
    set_has_globalid();
    globalid_ = globalid;
  } else {
    clear_has_globalid();
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SignalSolution

// optional string msgName = 1 [default = "SIGNALSOLUTION"];
inline bool SignalSolution::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalSolution::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalSolution::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalSolution::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& SignalSolution::msgname() const {
  return *msgname_;
}
inline void SignalSolution::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SignalSolution::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SignalSolution::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalSolution::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* SignalSolution::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void SignalSolution::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 byteAmount = 2;
inline bool SignalSolution::has_byteamount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalSolution::set_has_byteamount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalSolution::clear_has_byteamount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalSolution::clear_byteamount() {
  byteamount_ = 0;
  clear_has_byteamount();
}
inline ::google::protobuf::int32 SignalSolution::byteamount() const {
  return byteamount_;
}
inline void SignalSolution::set_byteamount(::google::protobuf::int32 value) {
  set_has_byteamount();
  byteamount_ = value;
}

// optional int64 freq = 3;
inline bool SignalSolution::has_freq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignalSolution::set_has_freq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignalSolution::clear_has_freq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignalSolution::clear_freq() {
  freq_ = GOOGLE_LONGLONG(0);
  clear_has_freq();
}
inline ::google::protobuf::int64 SignalSolution::freq() const {
  return freq_;
}
inline void SignalSolution::set_freq(::google::protobuf::int64 value) {
  set_has_freq();
  freq_ = value;
}

// optional float azimuth = 4;
inline bool SignalSolution::has_azimuth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignalSolution::set_has_azimuth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignalSolution::clear_has_azimuth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignalSolution::clear_azimuth() {
  azimuth_ = 0;
  clear_has_azimuth();
}
inline float SignalSolution::azimuth() const {
  return azimuth_;
}
inline void SignalSolution::set_azimuth(float value) {
  set_has_azimuth();
  azimuth_ = value;
}

// optional float elevation = 5;
inline bool SignalSolution::has_elevation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SignalSolution::set_has_elevation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SignalSolution::clear_has_elevation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SignalSolution::clear_elevation() {
  elevation_ = 0;
  clear_has_elevation();
}
inline float SignalSolution::elevation() const {
  return elevation_;
}
inline void SignalSolution::set_elevation(float value) {
  set_has_elevation();
  elevation_ = value;
}

// optional float confidence = 6;
inline bool SignalSolution::has_confidence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SignalSolution::set_has_confidence() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SignalSolution::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SignalSolution::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
inline float SignalSolution::confidence() const {
  return confidence_;
}
inline void SignalSolution::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
}

// optional double longitude = 7;
inline bool SignalSolution::has_longitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SignalSolution::set_has_longitude() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SignalSolution::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SignalSolution::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double SignalSolution::longitude() const {
  return longitude_;
}
inline void SignalSolution::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
}

// optional double latitude = 8;
inline bool SignalSolution::has_latitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SignalSolution::set_has_latitude() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SignalSolution::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SignalSolution::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double SignalSolution::latitude() const {
  return latitude_;
}
inline void SignalSolution::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
}

// optional int64 startTime = 9;
inline bool SignalSolution::has_starttime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SignalSolution::set_has_starttime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SignalSolution::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SignalSolution::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 SignalSolution::starttime() const {
  return starttime_;
}
inline void SignalSolution::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
}

// optional int64 stopTime = 10;
inline bool SignalSolution::has_stoptime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SignalSolution::set_has_stoptime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SignalSolution::clear_has_stoptime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SignalSolution::clear_stoptime() {
  stoptime_ = GOOGLE_LONGLONG(0);
  clear_has_stoptime();
}
inline ::google::protobuf::int64 SignalSolution::stoptime() const {
  return stoptime_;
}
inline void SignalSolution::set_stoptime(::google::protobuf::int64 value) {
  set_has_stoptime();
  stoptime_ = value;
}

// optional int64 hitType = 11;
inline bool SignalSolution::has_hittype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SignalSolution::set_has_hittype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SignalSolution::clear_has_hittype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SignalSolution::clear_hittype() {
  hittype_ = GOOGLE_LONGLONG(0);
  clear_has_hittype();
}
inline ::google::protobuf::int64 SignalSolution::hittype() const {
  return hittype_;
}
inline void SignalSolution::set_hittype(::google::protobuf::int64 value) {
  set_has_hittype();
  hittype_ = value;
}

// optional string globalID = 12;
inline bool SignalSolution::has_globalid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SignalSolution::set_has_globalid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SignalSolution::clear_has_globalid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SignalSolution::clear_globalid() {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    globalid_->clear();
  }
  clear_has_globalid();
}
inline const ::std::string& SignalSolution::globalid() const {
  return *globalid_;
}
inline void SignalSolution::set_globalid(const ::std::string& value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SignalSolution::set_globalid(const char* value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SignalSolution::set_globalid(const char* value, size_t size) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalSolution::mutable_globalid() {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  return globalid_;
}
inline ::std::string* SignalSolution::release_globalid() {
  clear_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = globalid_;
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignalSolution::set_allocated_globalid(::std::string* globalid) {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (globalid) {
    set_has_globalid();
    globalid_ = globalid;
  } else {
    clear_has_globalid();
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SignalSolutionResponse

// optional string msgName = 1 [default = "SIGNALSOLUTIONRESPONSE"];
inline bool SignalSolutionResponse::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalSolutionResponse::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalSolutionResponse::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalSolutionResponse::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& SignalSolutionResponse::msgname() const {
  return *msgname_;
}
inline void SignalSolutionResponse::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SignalSolutionResponse::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SignalSolutionResponse::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalSolutionResponse::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* SignalSolutionResponse::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void SignalSolutionResponse::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 messageID = 2;
inline bool SignalSolutionResponse::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalSolutionResponse::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalSolutionResponse::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalSolutionResponse::clear_messageid() {
  messageid_ = 0;
  clear_has_messageid();
}
inline ::google::protobuf::int32 SignalSolutionResponse::messageid() const {
  return messageid_;
}
inline void SignalSolutionResponse::set_messageid(::google::protobuf::int32 value) {
  set_has_messageid();
  messageid_ = value;
}

// repeated .pinpoint_msg.SignalSolution sigSolution = 3;
inline int SignalSolutionResponse::sigsolution_size() const {
  return sigsolution_.size();
}
inline void SignalSolutionResponse::clear_sigsolution() {
  sigsolution_.Clear();
}
inline const ::pinpoint_msg::SignalSolution& SignalSolutionResponse::sigsolution(int index) const {
  return sigsolution_.Get(index);
}
inline ::pinpoint_msg::SignalSolution* SignalSolutionResponse::mutable_sigsolution(int index) {
  return sigsolution_.Mutable(index);
}
inline ::pinpoint_msg::SignalSolution* SignalSolutionResponse::add_sigsolution() {
  return sigsolution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pinpoint_msg::SignalSolution >&
SignalSolutionResponse::sigsolution() const {
  return sigsolution_;
}
inline ::google::protobuf::RepeatedPtrField< ::pinpoint_msg::SignalSolution >*
SignalSolutionResponse::mutable_sigsolution() {
  return &sigsolution_;
}

// optional bool continue = 4;
inline bool SignalSolutionResponse::has_continue_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignalSolutionResponse::set_has_continue_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignalSolutionResponse::clear_has_continue_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignalSolutionResponse::clear_continue_() {
  continue__ = false;
  clear_has_continue_();
}
inline bool SignalSolutionResponse::continue_() const {
  return continue__;
}
inline void SignalSolutionResponse::set_continue_(bool value) {
  set_has_continue_();
  continue__ = value;
}

// optional string user = 5;
inline bool SignalSolutionResponse::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SignalSolutionResponse::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SignalSolutionResponse::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SignalSolutionResponse::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& SignalSolutionResponse::user() const {
  return *user_;
}
inline void SignalSolutionResponse::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SignalSolutionResponse::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SignalSolutionResponse::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalSolutionResponse::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* SignalSolutionResponse::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignalSolutionResponse::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string globalID = 6;
inline bool SignalSolutionResponse::has_globalid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SignalSolutionResponse::set_has_globalid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SignalSolutionResponse::clear_has_globalid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SignalSolutionResponse::clear_globalid() {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    globalid_->clear();
  }
  clear_has_globalid();
}
inline const ::std::string& SignalSolutionResponse::globalid() const {
  return *globalid_;
}
inline void SignalSolutionResponse::set_globalid(const ::std::string& value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SignalSolutionResponse::set_globalid(const char* value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SignalSolutionResponse::set_globalid(const char* value, size_t size) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalSolutionResponse::mutable_globalid() {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  return globalid_;
}
inline ::std::string* SignalSolutionResponse::release_globalid() {
  clear_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = globalid_;
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignalSolutionResponse::set_allocated_globalid(::std::string* globalid) {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (globalid) {
    set_has_globalid();
    globalid_ = globalid;
  } else {
    clear_has_globalid();
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TunePoint

// optional string msgName = 1 [default = "TUNEPOINT"];
inline bool TunePoint::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TunePoint::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TunePoint::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TunePoint::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& TunePoint::msgname() const {
  return *msgname_;
}
inline void TunePoint::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void TunePoint::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void TunePoint::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TunePoint::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* TunePoint::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void TunePoint::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 messageID = 2;
inline bool TunePoint::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TunePoint::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TunePoint::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TunePoint::clear_messageid() {
  messageid_ = 0;
  clear_has_messageid();
}
inline ::google::protobuf::int32 TunePoint::messageid() const {
  return messageid_;
}
inline void TunePoint::set_messageid(::google::protobuf::int32 value) {
  set_has_messageid();
  messageid_ = value;
}

// optional int64 centerFreq = 3;
inline bool TunePoint::has_centerfreq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TunePoint::set_has_centerfreq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TunePoint::clear_has_centerfreq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TunePoint::clear_centerfreq() {
  centerfreq_ = GOOGLE_LONGLONG(0);
  clear_has_centerfreq();
}
inline ::google::protobuf::int64 TunePoint::centerfreq() const {
  return centerfreq_;
}
inline void TunePoint::set_centerfreq(::google::protobuf::int64 value) {
  set_has_centerfreq();
  centerfreq_ = value;
}

// optional int64 dwellTime = 4;
inline bool TunePoint::has_dwelltime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TunePoint::set_has_dwelltime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TunePoint::clear_has_dwelltime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TunePoint::clear_dwelltime() {
  dwelltime_ = GOOGLE_LONGLONG(0);
  clear_has_dwelltime();
}
inline ::google::protobuf::int64 TunePoint::dwelltime() const {
  return dwelltime_;
}
inline void TunePoint::set_dwelltime(::google::protobuf::int64 value) {
  set_has_dwelltime();
  dwelltime_ = value;
}

// optional string user = 5;
inline bool TunePoint::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TunePoint::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TunePoint::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TunePoint::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& TunePoint::user() const {
  return *user_;
}
inline void TunePoint::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void TunePoint::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void TunePoint::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TunePoint::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* TunePoint::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TunePoint::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string globalID = 6;
inline bool TunePoint::has_globalid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TunePoint::set_has_globalid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TunePoint::clear_has_globalid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TunePoint::clear_globalid() {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    globalid_->clear();
  }
  clear_has_globalid();
}
inline const ::std::string& TunePoint::globalid() const {
  return *globalid_;
}
inline void TunePoint::set_globalid(const ::std::string& value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void TunePoint::set_globalid(const char* value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void TunePoint::set_globalid(const char* value, size_t size) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TunePoint::mutable_globalid() {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  return globalid_;
}
inline ::std::string* TunePoint::release_globalid() {
  clear_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = globalid_;
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TunePoint::set_allocated_globalid(::std::string* globalid) {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (globalid) {
    set_has_globalid();
    globalid_ = globalid;
  } else {
    clear_has_globalid();
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SetTunePlanRequest

// optional string msgName = 1 [default = "SETTUNEPLANREQUEST"];
inline bool SetTunePlanRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetTunePlanRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetTunePlanRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetTunePlanRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& SetTunePlanRequest::msgname() const {
  return *msgname_;
}
inline void SetTunePlanRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SetTunePlanRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SetTunePlanRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetTunePlanRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* SetTunePlanRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void SetTunePlanRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 messageID = 2;
inline bool SetTunePlanRequest::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetTunePlanRequest::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetTunePlanRequest::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetTunePlanRequest::clear_messageid() {
  messageid_ = 0;
  clear_has_messageid();
}
inline ::google::protobuf::int32 SetTunePlanRequest::messageid() const {
  return messageid_;
}
inline void SetTunePlanRequest::set_messageid(::google::protobuf::int32 value) {
  set_has_messageid();
  messageid_ = value;
}

// optional bool repeat = 3;
inline bool SetTunePlanRequest::has_repeat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetTunePlanRequest::set_has_repeat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetTunePlanRequest::clear_has_repeat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetTunePlanRequest::clear_repeat() {
  repeat_ = false;
  clear_has_repeat();
}
inline bool SetTunePlanRequest::repeat() const {
  return repeat_;
}
inline void SetTunePlanRequest::set_repeat(bool value) {
  set_has_repeat();
  repeat_ = value;
}

// repeated .pinpoint_msg.TunePoint tunePlan = 4;
inline int SetTunePlanRequest::tuneplan_size() const {
  return tuneplan_.size();
}
inline void SetTunePlanRequest::clear_tuneplan() {
  tuneplan_.Clear();
}
inline const ::pinpoint_msg::TunePoint& SetTunePlanRequest::tuneplan(int index) const {
  return tuneplan_.Get(index);
}
inline ::pinpoint_msg::TunePoint* SetTunePlanRequest::mutable_tuneplan(int index) {
  return tuneplan_.Mutable(index);
}
inline ::pinpoint_msg::TunePoint* SetTunePlanRequest::add_tuneplan() {
  return tuneplan_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pinpoint_msg::TunePoint >&
SetTunePlanRequest::tuneplan() const {
  return tuneplan_;
}
inline ::google::protobuf::RepeatedPtrField< ::pinpoint_msg::TunePoint >*
SetTunePlanRequest::mutable_tuneplan() {
  return &tuneplan_;
}

// optional string user = 5;
inline bool SetTunePlanRequest::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SetTunePlanRequest::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SetTunePlanRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SetTunePlanRequest::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& SetTunePlanRequest::user() const {
  return *user_;
}
inline void SetTunePlanRequest::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SetTunePlanRequest::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SetTunePlanRequest::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetTunePlanRequest::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* SetTunePlanRequest::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetTunePlanRequest::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string globalID = 6;
inline bool SetTunePlanRequest::has_globalid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SetTunePlanRequest::set_has_globalid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SetTunePlanRequest::clear_has_globalid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SetTunePlanRequest::clear_globalid() {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    globalid_->clear();
  }
  clear_has_globalid();
}
inline const ::std::string& SetTunePlanRequest::globalid() const {
  return *globalid_;
}
inline void SetTunePlanRequest::set_globalid(const ::std::string& value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SetTunePlanRequest::set_globalid(const char* value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SetTunePlanRequest::set_globalid(const char* value, size_t size) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetTunePlanRequest::mutable_globalid() {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  return globalid_;
}
inline ::std::string* SetTunePlanRequest::release_globalid() {
  clear_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = globalid_;
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetTunePlanRequest::set_allocated_globalid(::std::string* globalid) {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (globalid) {
    set_has_globalid();
    globalid_ = globalid;
  } else {
    clear_has_globalid();
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TunePlanActiveResponse

// optional string msgName = 1 [default = "TUNEPLANACTIVERESPONSE"];
inline bool TunePlanActiveResponse::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TunePlanActiveResponse::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TunePlanActiveResponse::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TunePlanActiveResponse::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& TunePlanActiveResponse::msgname() const {
  return *msgname_;
}
inline void TunePlanActiveResponse::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void TunePlanActiveResponse::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void TunePlanActiveResponse::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TunePlanActiveResponse::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* TunePlanActiveResponse::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void TunePlanActiveResponse::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 messageID = 2;
inline bool TunePlanActiveResponse::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TunePlanActiveResponse::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TunePlanActiveResponse::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TunePlanActiveResponse::clear_messageid() {
  messageid_ = 0;
  clear_has_messageid();
}
inline ::google::protobuf::int32 TunePlanActiveResponse::messageid() const {
  return messageid_;
}
inline void TunePlanActiveResponse::set_messageid(::google::protobuf::int32 value) {
  set_has_messageid();
  messageid_ = value;
}

// optional bool active = 3;
inline bool TunePlanActiveResponse::has_active() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TunePlanActiveResponse::set_has_active() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TunePlanActiveResponse::clear_has_active() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TunePlanActiveResponse::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool TunePlanActiveResponse::active() const {
  return active_;
}
inline void TunePlanActiveResponse::set_active(bool value) {
  set_has_active();
  active_ = value;
}

// optional string user = 4;
inline bool TunePlanActiveResponse::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TunePlanActiveResponse::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TunePlanActiveResponse::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TunePlanActiveResponse::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& TunePlanActiveResponse::user() const {
  return *user_;
}
inline void TunePlanActiveResponse::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void TunePlanActiveResponse::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void TunePlanActiveResponse::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TunePlanActiveResponse::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* TunePlanActiveResponse::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TunePlanActiveResponse::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string globalID = 5;
inline bool TunePlanActiveResponse::has_globalid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TunePlanActiveResponse::set_has_globalid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TunePlanActiveResponse::clear_has_globalid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TunePlanActiveResponse::clear_globalid() {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    globalid_->clear();
  }
  clear_has_globalid();
}
inline const ::std::string& TunePlanActiveResponse::globalid() const {
  return *globalid_;
}
inline void TunePlanActiveResponse::set_globalid(const ::std::string& value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void TunePlanActiveResponse::set_globalid(const char* value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void TunePlanActiveResponse::set_globalid(const char* value, size_t size) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TunePlanActiveResponse::mutable_globalid() {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  return globalid_;
}
inline ::std::string* TunePlanActiveResponse::release_globalid() {
  clear_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = globalid_;
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TunePlanActiveResponse::set_allocated_globalid(::std::string* globalid) {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (globalid) {
    set_has_globalid();
    globalid_ = globalid;
  } else {
    clear_has_globalid();
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TunePlanUpdateResponse

// optional string msgName = 1 [default = "TUNEPLANUPDATERESPONSE"];
inline bool TunePlanUpdateResponse::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TunePlanUpdateResponse::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TunePlanUpdateResponse::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TunePlanUpdateResponse::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& TunePlanUpdateResponse::msgname() const {
  return *msgname_;
}
inline void TunePlanUpdateResponse::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void TunePlanUpdateResponse::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void TunePlanUpdateResponse::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TunePlanUpdateResponse::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* TunePlanUpdateResponse::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void TunePlanUpdateResponse::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 messageID = 2;
inline bool TunePlanUpdateResponse::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TunePlanUpdateResponse::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TunePlanUpdateResponse::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TunePlanUpdateResponse::clear_messageid() {
  messageid_ = 0;
  clear_has_messageid();
}
inline ::google::protobuf::int32 TunePlanUpdateResponse::messageid() const {
  return messageid_;
}
inline void TunePlanUpdateResponse::set_messageid(::google::protobuf::int32 value) {
  set_has_messageid();
  messageid_ = value;
}

// optional bool success = 3;
inline bool TunePlanUpdateResponse::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TunePlanUpdateResponse::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TunePlanUpdateResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TunePlanUpdateResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool TunePlanUpdateResponse::success() const {
  return success_;
}
inline void TunePlanUpdateResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional int64 lowFreq = 4;
inline bool TunePlanUpdateResponse::has_lowfreq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TunePlanUpdateResponse::set_has_lowfreq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TunePlanUpdateResponse::clear_has_lowfreq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TunePlanUpdateResponse::clear_lowfreq() {
  lowfreq_ = GOOGLE_LONGLONG(0);
  clear_has_lowfreq();
}
inline ::google::protobuf::int64 TunePlanUpdateResponse::lowfreq() const {
  return lowfreq_;
}
inline void TunePlanUpdateResponse::set_lowfreq(::google::protobuf::int64 value) {
  set_has_lowfreq();
  lowfreq_ = value;
}

// optional int64 hiFreq = 5;
inline bool TunePlanUpdateResponse::has_hifreq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TunePlanUpdateResponse::set_has_hifreq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TunePlanUpdateResponse::clear_has_hifreq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TunePlanUpdateResponse::clear_hifreq() {
  hifreq_ = GOOGLE_LONGLONG(0);
  clear_has_hifreq();
}
inline ::google::protobuf::int64 TunePlanUpdateResponse::hifreq() const {
  return hifreq_;
}
inline void TunePlanUpdateResponse::set_hifreq(::google::protobuf::int64 value) {
  set_has_hifreq();
  hifreq_ = value;
}

// optional string user = 6;
inline bool TunePlanUpdateResponse::has_user() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TunePlanUpdateResponse::set_has_user() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TunePlanUpdateResponse::clear_has_user() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TunePlanUpdateResponse::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& TunePlanUpdateResponse::user() const {
  return *user_;
}
inline void TunePlanUpdateResponse::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void TunePlanUpdateResponse::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void TunePlanUpdateResponse::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TunePlanUpdateResponse::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* TunePlanUpdateResponse::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TunePlanUpdateResponse::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string globalID = 7;
inline bool TunePlanUpdateResponse::has_globalid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TunePlanUpdateResponse::set_has_globalid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TunePlanUpdateResponse::clear_has_globalid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TunePlanUpdateResponse::clear_globalid() {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    globalid_->clear();
  }
  clear_has_globalid();
}
inline const ::std::string& TunePlanUpdateResponse::globalid() const {
  return *globalid_;
}
inline void TunePlanUpdateResponse::set_globalid(const ::std::string& value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void TunePlanUpdateResponse::set_globalid(const char* value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void TunePlanUpdateResponse::set_globalid(const char* value, size_t size) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TunePlanUpdateResponse::mutable_globalid() {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  return globalid_;
}
inline ::std::string* TunePlanUpdateResponse::release_globalid() {
  clear_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = globalid_;
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TunePlanUpdateResponse::set_allocated_globalid(::std::string* globalid) {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (globalid) {
    set_has_globalid();
    globalid_ = globalid;
  } else {
    clear_has_globalid();
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SetGHzModeRequest

// optional string msgName = 1 [default = "SETGHZMODEREQUEST"];
inline bool SetGHzModeRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetGHzModeRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetGHzModeRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetGHzModeRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& SetGHzModeRequest::msgname() const {
  return *msgname_;
}
inline void SetGHzModeRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SetGHzModeRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SetGHzModeRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetGHzModeRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* SetGHzModeRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void SetGHzModeRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 messageID = 2;
inline bool SetGHzModeRequest::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetGHzModeRequest::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetGHzModeRequest::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetGHzModeRequest::clear_messageid() {
  messageid_ = 0;
  clear_has_messageid();
}
inline ::google::protobuf::int32 SetGHzModeRequest::messageid() const {
  return messageid_;
}
inline void SetGHzModeRequest::set_messageid(::google::protobuf::int32 value) {
  set_has_messageid();
  messageid_ = value;
}

// optional int32 mode = 3;
inline bool SetGHzModeRequest::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetGHzModeRequest::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetGHzModeRequest::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetGHzModeRequest::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 SetGHzModeRequest::mode() const {
  return mode_;
}
inline void SetGHzModeRequest::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
}

// optional string user = 4;
inline bool SetGHzModeRequest::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SetGHzModeRequest::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SetGHzModeRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SetGHzModeRequest::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& SetGHzModeRequest::user() const {
  return *user_;
}
inline void SetGHzModeRequest::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SetGHzModeRequest::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SetGHzModeRequest::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetGHzModeRequest::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* SetGHzModeRequest::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetGHzModeRequest::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string globalID = 5;
inline bool SetGHzModeRequest::has_globalid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SetGHzModeRequest::set_has_globalid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SetGHzModeRequest::clear_has_globalid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SetGHzModeRequest::clear_globalid() {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    globalid_->clear();
  }
  clear_has_globalid();
}
inline const ::std::string& SetGHzModeRequest::globalid() const {
  return *globalid_;
}
inline void SetGHzModeRequest::set_globalid(const ::std::string& value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SetGHzModeRequest::set_globalid(const char* value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SetGHzModeRequest::set_globalid(const char* value, size_t size) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetGHzModeRequest::mutable_globalid() {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  return globalid_;
}
inline ::std::string* SetGHzModeRequest::release_globalid() {
  clear_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = globalid_;
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetGHzModeRequest::set_allocated_globalid(::std::string* globalid) {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (globalid) {
    set_has_globalid();
    globalid_ = globalid;
  } else {
    clear_has_globalid();
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SetGHzModeResponse

// optional string msgName = 1 [default = "SETGHZMODERESPONSE"];
inline bool SetGHzModeResponse::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetGHzModeResponse::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetGHzModeResponse::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetGHzModeResponse::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& SetGHzModeResponse::msgname() const {
  return *msgname_;
}
inline void SetGHzModeResponse::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SetGHzModeResponse::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void SetGHzModeResponse::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetGHzModeResponse::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* SetGHzModeResponse::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void SetGHzModeResponse::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 messageID = 2;
inline bool SetGHzModeResponse::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetGHzModeResponse::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetGHzModeResponse::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetGHzModeResponse::clear_messageid() {
  messageid_ = 0;
  clear_has_messageid();
}
inline ::google::protobuf::int32 SetGHzModeResponse::messageid() const {
  return messageid_;
}
inline void SetGHzModeResponse::set_messageid(::google::protobuf::int32 value) {
  set_has_messageid();
  messageid_ = value;
}

// optional bool success = 3;
inline bool SetGHzModeResponse::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetGHzModeResponse::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetGHzModeResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetGHzModeResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool SetGHzModeResponse::success() const {
  return success_;
}
inline void SetGHzModeResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional string user = 4;
inline bool SetGHzModeResponse::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SetGHzModeResponse::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SetGHzModeResponse::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SetGHzModeResponse::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& SetGHzModeResponse::user() const {
  return *user_;
}
inline void SetGHzModeResponse::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SetGHzModeResponse::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SetGHzModeResponse::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetGHzModeResponse::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* SetGHzModeResponse::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetGHzModeResponse::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string globalID = 5;
inline bool SetGHzModeResponse::has_globalid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SetGHzModeResponse::set_has_globalid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SetGHzModeResponse::clear_has_globalid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SetGHzModeResponse::clear_globalid() {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    globalid_->clear();
  }
  clear_has_globalid();
}
inline const ::std::string& SetGHzModeResponse::globalid() const {
  return *globalid_;
}
inline void SetGHzModeResponse::set_globalid(const ::std::string& value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SetGHzModeResponse::set_globalid(const char* value) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(value);
}
inline void SetGHzModeResponse::set_globalid(const char* value, size_t size) {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  globalid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetGHzModeResponse::mutable_globalid() {
  set_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    globalid_ = new ::std::string;
  }
  return globalid_;
}
inline ::std::string* SetGHzModeResponse::release_globalid() {
  clear_has_globalid();
  if (globalid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = globalid_;
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetGHzModeResponse::set_allocated_globalid(::std::string* globalid) {
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (globalid) {
    set_has_globalid();
    globalid_ = globalid;
  } else {
    clear_has_globalid();
    globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pinpoint_msg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PinpointMessages_2eproto__INCLUDED
