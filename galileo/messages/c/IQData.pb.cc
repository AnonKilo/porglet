// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IQData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IQData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace public_topics {

namespace {

const ::google::protobuf::Descriptor* IQDataTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IQDataTopic_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_IQData_2eproto() {
  protobuf_AddDesc_IQData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IQData.proto");
  GOOGLE_CHECK(file != NULL);
  IQDataTopic_descriptor_ = file->message_type(0);
  static const int IQDataTopic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQDataTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQDataTopic, snap_info_),
  };
  IQDataTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IQDataTopic_descriptor_,
      IQDataTopic::default_instance_,
      IQDataTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQDataTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQDataTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IQDataTopic));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IQData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IQDataTopic_descriptor_, &IQDataTopic::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IQData_2eproto() {
  delete IQDataTopic::default_instance_;
  delete IQDataTopic_reflection_;
}

void protobuf_AddDesc_IQData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tuner_msg::protobuf_AddDesc_TunerMessages_2eproto();
  ::service_infrastructure::protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014IQData.proto\022\rpublic_topics\032\023TunerMess"
    "ages.proto\032!ServiceInfrastructureCommon."
    "proto\"e\n\013IQDataTopic\022.\n\006header\030\001 \001(\0132\036.s"
    "ervice_infrastructure.Header\022&\n\tsnap_inf"
    "o\030\002 \001(\0132\023.tuner_msg.SnapInfo", 188);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IQData.proto", &protobuf_RegisterTypes);
  IQDataTopic::default_instance_ = new IQDataTopic();
  IQDataTopic::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IQData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IQData_2eproto {
  StaticDescriptorInitializer_IQData_2eproto() {
    protobuf_AddDesc_IQData_2eproto();
  }
} static_descriptor_initializer_IQData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int IQDataTopic::kHeaderFieldNumber;
const int IQDataTopic::kSnapInfoFieldNumber;
#endif  // !_MSC_VER

IQDataTopic::IQDataTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IQDataTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  snap_info_ = const_cast< ::tuner_msg::SnapInfo*>(&::tuner_msg::SnapInfo::default_instance());
}

IQDataTopic::IQDataTopic(const IQDataTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IQDataTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  snap_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IQDataTopic::~IQDataTopic() {
  SharedDtor();
}

void IQDataTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete snap_info_;
  }
}

void IQDataTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IQDataTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IQDataTopic_descriptor_;
}

const IQDataTopic& IQDataTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IQData_2eproto();
  return *default_instance_;
}

IQDataTopic* IQDataTopic::default_instance_ = NULL;

IQDataTopic* IQDataTopic::New() const {
  return new IQDataTopic;
}

void IQDataTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_snap_info()) {
      if (snap_info_ != NULL) snap_info_->::tuner_msg::SnapInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IQDataTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .service_infrastructure.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_snap_info;
        break;
      }

      // optional .tuner_msg.SnapInfo snap_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snap_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snap_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IQDataTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .service_infrastructure.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .tuner_msg.SnapInfo snap_info = 2;
  if (has_snap_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->snap_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IQDataTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .service_infrastructure.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .tuner_msg.SnapInfo snap_info = 2;
  if (has_snap_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->snap_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IQDataTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .tuner_msg.SnapInfo snap_info = 2;
    if (has_snap_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snap_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IQDataTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IQDataTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IQDataTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IQDataTopic::MergeFrom(const IQDataTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_snap_info()) {
      mutable_snap_info()->::tuner_msg::SnapInfo::MergeFrom(from.snap_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IQDataTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IQDataTopic::CopyFrom(const IQDataTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IQDataTopic::IsInitialized() const {

  return true;
}

void IQDataTopic::Swap(IQDataTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(snap_info_, other->snap_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IQDataTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IQDataTopic_descriptor_;
  metadata.reflection = IQDataTopic_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace public_topics

// @@protoc_insertion_point(global_scope)
