// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ThunderbirdMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ThunderbirdMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fv {
namespace tb {
namespace protos {
namespace TBProtos {

namespace {

const ::google::protobuf::Descriptor* CloseSelf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseSelf_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWCommandRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWCommandRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* OutputChannelStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutputChannelStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OutputChannelStatus_TransmitState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EWTransmittingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWTransmittingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWCapabilityUnregister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWCapabilityUnregister_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWCapability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWCapability_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EWCapability_DetectionSource_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EWCapabilities_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWCapabilities_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWCapabilityTransmitting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWCapabilityTransmitting_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWTransmitting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWTransmitting_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWTechniqueDescriptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWTechniqueDescriptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWTechniqueDescriptionsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWTechniqueDescriptionsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWOption_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EWOption_DetectionSource_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EWOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWOptionsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWOptionsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWCapabilitiesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWCapabilitiesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWOptionDelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWOptionDelete_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWCeaseBuzzer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWCeaseBuzzer_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxAntennaConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxAntennaConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxAmpConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxAmpConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransmitterConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransmitterConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TransmitterConfig_SiggenType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* techniqueCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  techniqueCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* techniqueCommand_CommandType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* newSignalFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  newSignalFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnregisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnregisterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HopAttackStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HopAttackStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxFreqRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxFreqRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmergencyJam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmergencyJam_reflection_ = NULL;
const ::google::protobuf::Descriptor* JamOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JamOff_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWSDRRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWSDRRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWSDRCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWSDRCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* Aperture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Aperture_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transceiver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transceiver_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThreatStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThreatStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWSDRStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWSDRStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetAppParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetAppParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionMode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MissionMode_Mode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SignalEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SignalEvent_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TxSignalParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxSignalParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxFileStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxFileStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalibrationTimingResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalibrationTimingResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ThunderbirdMessages_2eproto() {
  protobuf_AddDesc_ThunderbirdMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ThunderbirdMessages.proto");
  GOOGLE_CHECK(file != NULL);
  CloseSelf_descriptor_ = file->message_type(0);
  static const int CloseSelf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSelf, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSelf, uniqueword_),
  };
  CloseSelf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseSelf_descriptor_,
      CloseSelf::default_instance_,
      CloseSelf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSelf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSelf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseSelf));
  EWCommandRequest_descriptor_ = file->message_type(1);
  static const int EWCommandRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCommandRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCommandRequest, ewcap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCommandRequest, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCommandRequest, sensorname_),
  };
  EWCommandRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWCommandRequest_descriptor_,
      EWCommandRequest::default_instance_,
      EWCommandRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCommandRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCommandRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWCommandRequest));
  Parameters_descriptor_ = file->message_type(2);
  static const int Parameters_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, jamcfmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, tunecfmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, jambwmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, jambaudrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, jamdeviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, oncycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, totalcycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, modeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, destinationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, frameformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, textmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, numtargets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, kvps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, jamifmhz_),
  };
  Parameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parameters_descriptor_,
      Parameters::default_instance_,
      Parameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parameters));
  EWStatus_descriptor_ = file->message_type(3);
  static const int EWStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWStatus, outputchannelstatus_),
  };
  EWStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWStatus_descriptor_,
      EWStatus::default_instance_,
      EWStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWStatus));
  OutputChannelStatus_descriptor_ = file->message_type(4);
  static const int OutputChannelStatus_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, transmitfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, antenna_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, powermeter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, signalname_),
  };
  OutputChannelStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OutputChannelStatus_descriptor_,
      OutputChannelStatus::default_instance_,
      OutputChannelStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OutputChannelStatus));
  OutputChannelStatus_TransmitState_descriptor_ = OutputChannelStatus_descriptor_->enum_type(0);
  EWTransmittingRequest_descriptor_ = file->message_type(5);
  static const int EWTransmittingRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWTransmittingRequest, msgname_),
  };
  EWTransmittingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWTransmittingRequest_descriptor_,
      EWTransmittingRequest::default_instance_,
      EWTransmittingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWTransmittingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWTransmittingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWTransmittingRequest));
  EWCapabilityUnregister_descriptor_ = file->message_type(6);
  static const int EWCapabilityUnregister_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapabilityUnregister, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapabilityUnregister, capabilityid_),
  };
  EWCapabilityUnregister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWCapabilityUnregister_descriptor_,
      EWCapabilityUnregister::default_instance_,
      EWCapabilityUnregister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapabilityUnregister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapabilityUnregister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWCapabilityUnregister));
  EWCapability_descriptor_ = file->message_type(7);
  static const int EWCapability_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapability, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapability, signalname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapability, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapability, capabilityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapability, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapability, percentready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapability, parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapability, tbuniqueid_),
  };
  EWCapability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWCapability_descriptor_,
      EWCapability::default_instance_,
      EWCapability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWCapability));
  EWCapability_DetectionSource_descriptor_ = EWCapability_descriptor_->enum_type(0);
  EWCapabilities_descriptor_ = file->message_type(8);
  static const int EWCapabilities_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapabilities, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapabilities, ewcap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapabilities, sensorname_),
  };
  EWCapabilities_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWCapabilities_descriptor_,
      EWCapabilities::default_instance_,
      EWCapabilities_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapabilities, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapabilities, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWCapabilities));
  EWCapabilityTransmitting_descriptor_ = file->message_type(9);
  static const int EWCapabilityTransmitting_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapabilityTransmitting, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapabilityTransmitting, ewcap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapabilityTransmitting, active_),
  };
  EWCapabilityTransmitting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWCapabilityTransmitting_descriptor_,
      EWCapabilityTransmitting::default_instance_,
      EWCapabilityTransmitting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapabilityTransmitting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapabilityTransmitting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWCapabilityTransmitting));
  EWTransmitting_descriptor_ = file->message_type(10);
  static const int EWTransmitting_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWTransmitting, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWTransmitting, ewcap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWTransmitting, sensorname_),
  };
  EWTransmitting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWTransmitting_descriptor_,
      EWTransmitting::default_instance_,
      EWTransmitting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWTransmitting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWTransmitting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWTransmitting));
  EWTechniqueDescriptions_descriptor_ = file->message_type(11);
  static const int EWTechniqueDescriptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWTechniqueDescriptions, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWTechniqueDescriptions, techniquedescription_),
  };
  EWTechniqueDescriptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWTechniqueDescriptions_descriptor_,
      EWTechniqueDescriptions::default_instance_,
      EWTechniqueDescriptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWTechniqueDescriptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWTechniqueDescriptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWTechniqueDescriptions));
  EWTechniqueDescriptionsRequest_descriptor_ = file->message_type(12);
  static const int EWTechniqueDescriptionsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWTechniqueDescriptionsRequest, msgname_),
  };
  EWTechniqueDescriptionsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWTechniqueDescriptionsRequest_descriptor_,
      EWTechniqueDescriptionsRequest::default_instance_,
      EWTechniqueDescriptionsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWTechniqueDescriptionsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWTechniqueDescriptionsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWTechniqueDescriptionsRequest));
  EWOption_descriptor_ = file->message_type(13);
  static const int EWOption_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOption, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOption, signalname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOption, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOption, detectionsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOption, globalid_),
  };
  EWOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWOption_descriptor_,
      EWOption::default_instance_,
      EWOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWOption));
  EWOption_DetectionSource_descriptor_ = EWOption_descriptor_->enum_type(0);
  EWOptions_descriptor_ = file->message_type(14);
  static const int EWOptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOptions, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOptions, ewopt_),
  };
  EWOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWOptions_descriptor_,
      EWOptions::default_instance_,
      EWOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWOptions));
  EWOptionsRequest_descriptor_ = file->message_type(15);
  static const int EWOptionsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOptionsRequest, msgname_),
  };
  EWOptionsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWOptionsRequest_descriptor_,
      EWOptionsRequest::default_instance_,
      EWOptionsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOptionsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOptionsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWOptionsRequest));
  EWStatusRequest_descriptor_ = file->message_type(16);
  static const int EWStatusRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWStatusRequest, msgname_),
  };
  EWStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWStatusRequest_descriptor_,
      EWStatusRequest::default_instance_,
      EWStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWStatusRequest));
  EWCapabilitiesRequest_descriptor_ = file->message_type(17);
  static const int EWCapabilitiesRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapabilitiesRequest, msgname_),
  };
  EWCapabilitiesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWCapabilitiesRequest_descriptor_,
      EWCapabilitiesRequest::default_instance_,
      EWCapabilitiesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapabilitiesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCapabilitiesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWCapabilitiesRequest));
  EWOptionDelete_descriptor_ = file->message_type(18);
  static const int EWOptionDelete_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOptionDelete, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOptionDelete, globalid_),
  };
  EWOptionDelete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWOptionDelete_descriptor_,
      EWOptionDelete::default_instance_,
      EWOptionDelete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOptionDelete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWOptionDelete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWOptionDelete));
  EWCeaseBuzzer_descriptor_ = file->message_type(19);
  static const int EWCeaseBuzzer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCeaseBuzzer, msgname_),
  };
  EWCeaseBuzzer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWCeaseBuzzer_descriptor_,
      EWCeaseBuzzer::default_instance_,
      EWCeaseBuzzer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCeaseBuzzer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWCeaseBuzzer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWCeaseBuzzer));
  TxAntennaConfig_descriptor_ = file->message_type(20);
  static const int TxAntennaConfig_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, antname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, minrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, maxrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, fixedangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, beamwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, dwncnvtlo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, ssc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, band_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, polarization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, sightdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, noisetest_),
  };
  TxAntennaConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxAntennaConfig_descriptor_,
      TxAntennaConfig::default_instance_,
      TxAntennaConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAntennaConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxAntennaConfig));
  TxAmpConfig_descriptor_ = file->message_type(21);
  static const int TxAmpConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAmpConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAmpConfig, ampname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAmpConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAmpConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAmpConfig, hardware_),
  };
  TxAmpConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxAmpConfig_descriptor_,
      TxAmpConfig::default_instance_,
      TxAmpConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAmpConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxAmpConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxAmpConfig));
  TransmitterConfig_descriptor_ = file->message_type(22);
  static const int TransmitterConfig_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterConfig, txname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterConfig, clkfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterConfig, dacinterp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterConfig, coreinterp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterConfig, basechan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterConfig, numbuffers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterConfig, freqshift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterConfig, siggenip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterConfig, siggentype_),
  };
  TransmitterConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransmitterConfig_descriptor_,
      TransmitterConfig::default_instance_,
      TransmitterConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransmitterConfig));
  TransmitterConfig_SiggenType_descriptor_ = TransmitterConfig_descriptor_->enum_type(0);
  techniqueCommand_descriptor_ = file->message_type(23);
  static const int techniqueCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(techniqueCommand, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(techniqueCommand, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(techniqueCommand, ewcap_),
  };
  techniqueCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      techniqueCommand_descriptor_,
      techniqueCommand::default_instance_,
      techniqueCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(techniqueCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(techniqueCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(techniqueCommand));
  techniqueCommand_CommandType_descriptor_ = techniqueCommand_descriptor_->enum_type(0);
  newSignalFrame_descriptor_ = file->message_type(24);
  static const int newSignalFrame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(newSignalFrame, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(newSignalFrame, radioname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(newSignalFrame, frameid_),
  };
  newSignalFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      newSignalFrame_descriptor_,
      newSignalFrame::default_instance_,
      newSignalFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(newSignalFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(newSignalFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(newSignalFrame));
  RegisterQuery_descriptor_ = file->message_type(25);
  static const int RegisterQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterQuery, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterQuery, sensorname_),
  };
  RegisterQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterQuery_descriptor_,
      RegisterQuery::default_instance_,
      RegisterQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterQuery));
  RegisterRequest_descriptor_ = file->message_type(26);
  static const int RegisterRequest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, platformname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, techniquename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, tbuniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, datapipename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, metapipename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, techniquedescription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, numberofzpipeports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, sensorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, estimatedcenterfreqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, overridechannel_),
  };
  RegisterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterRequest_descriptor_,
      RegisterRequest::default_instance_,
      RegisterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterRequest));
  UnregisterRequest_descriptor_ = file->message_type(27);
  static const int UnregisterRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterRequest, tbuniqueid_),
  };
  UnregisterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnregisterRequest_descriptor_,
      UnregisterRequest::default_instance_,
      UnregisterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnregisterRequest));
  RegisterResponse_descriptor_ = file->message_type(28);
  static const int RegisterResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, idnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, ports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, sampleratesps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, minfreqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, maxfreqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, assignedchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, sensorname_),
  };
  RegisterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterResponse_descriptor_,
      RegisterResponse::default_instance_,
      RegisterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterResponse));
  HopAttackStatus_descriptor_ = file->message_type(29);
  static const int HopAttackStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopAttackStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopAttackStatus, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopAttackStatus, totalhops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopAttackStatus, goodhops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopAttackStatus, percentage_),
  };
  HopAttackStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HopAttackStatus_descriptor_,
      HopAttackStatus::default_instance_,
      HopAttackStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopAttackStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopAttackStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HopAttackStatus));
  TxFreqRequest_descriptor_ = file->message_type(30);
  static const int TxFreqRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxFreqRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxFreqRequest, freqhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxFreqRequest, globalid_),
  };
  TxFreqRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxFreqRequest_descriptor_,
      TxFreqRequest::default_instance_,
      TxFreqRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxFreqRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxFreqRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxFreqRequest));
  EmergencyJam_descriptor_ = file->message_type(31);
  static const int EmergencyJam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyJam, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyJam, centerfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyJam, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyJam, targetid_),
  };
  EmergencyJam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmergencyJam_descriptor_,
      EmergencyJam::default_instance_,
      EmergencyJam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyJam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyJam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmergencyJam));
  JamOff_descriptor_ = file->message_type(32);
  static const int JamOff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JamOff, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JamOff, targetid_),
  };
  JamOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JamOff_descriptor_,
      JamOff::default_instance_,
      JamOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JamOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JamOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JamOff));
  EWSDRRequest_descriptor_ = file->message_type(33);
  static const int EWSDRRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRRequest, aperture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRRequest, transceiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRRequest, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRRequest, enabled_),
  };
  EWSDRRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWSDRRequest_descriptor_,
      EWSDRRequest::default_instance_,
      EWSDRRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWSDRRequest));
  EWSDRCommand_descriptor_ = file->message_type(34);
  static const int EWSDRCommand_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRCommand, aperture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRCommand, transceiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRCommand, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRCommand, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRCommand, enabled_),
  };
  EWSDRCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWSDRCommand_descriptor_,
      EWSDRCommand::default_instance_,
      EWSDRCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWSDRCommand));
  Aperture_descriptor_ = file->message_type(35);
  static const int Aperture_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aperture, antenna_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aperture, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aperture, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aperture, polarization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aperture, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aperture, guid_),
  };
  Aperture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Aperture_descriptor_,
      Aperture::default_instance_,
      Aperture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aperture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aperture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Aperture));
  Transceiver_descriptor_ = file->message_type(36);
  static const int Transceiver_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transceiver, transceiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transceiver, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transceiver, freqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transceiver, gaindb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transceiver, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transceiver, guid_),
  };
  Transceiver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transceiver_descriptor_,
      Transceiver::default_instance_,
      Transceiver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transceiver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transceiver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transceiver));
  ThreatStatus_descriptor_ = file->message_type(37);
  static const int ThreatStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreatStatus, kvps_),
  };
  ThreatStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThreatStatus_descriptor_,
      ThreatStatus::default_instance_,
      ThreatStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreatStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreatStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThreatStatus));
  EWSDRStatus_descriptor_ = file->message_type(38);
  static const int EWSDRStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRStatus, apertures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRStatus, transceivers_),
  };
  EWSDRStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWSDRStatus_descriptor_,
      EWSDRStatus::default_instance_,
      EWSDRStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWSDRStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWSDRStatus));
  SetAppParameters_descriptor_ = file->message_type(39);
  static const int SetAppParameters_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAppParameters, eltex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAppParameters, soinum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAppParameters, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAppParameters, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAppParameters, sensorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAppParameters, superpriority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAppParameters, aperture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAppParameters, transceiver_),
  };
  SetAppParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetAppParameters_descriptor_,
      SetAppParameters::default_instance_,
      SetAppParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAppParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAppParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetAppParameters));
  MissionMode_descriptor_ = file->message_type(40);
  static const int MissionMode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionMode, mode_),
  };
  MissionMode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionMode_descriptor_,
      MissionMode::default_instance_,
      MissionMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionMode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionMode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionMode));
  MissionMode_Mode_descriptor_ = MissionMode_descriptor_->enum_type(0);
  SignalEvent_descriptor_ = file->message_type(41);
  static const int SignalEvent_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, soinum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, rfmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, subcarmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, excurkhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, antnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, antaz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, antel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, scrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, exportport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, eltex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, bwmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, sensorname_),
  };
  SignalEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalEvent_descriptor_,
      SignalEvent::default_instance_,
      SignalEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalEvent));
  SignalEvent_Type_descriptor_ = SignalEvent_descriptor_->enum_type(0);
  TxSignalParams_descriptor_ = file->message_type(42);
  static const int TxSignalParams_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSignalParams, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSignalParams, signame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSignalParams, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSignalParams, sampleratemhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSignalParams, centerfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSignalParams, config_),
  };
  TxSignalParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxSignalParams_descriptor_,
      TxSignalParams::default_instance_,
      TxSignalParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSignalParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSignalParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxSignalParams));
  TxFileStatus_descriptor_ = file->message_type(43);
  static const int TxFileStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxFileStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxFileStatus, signame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxFileStatus, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxFileStatus, config_),
  };
  TxFileStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxFileStatus_descriptor_,
      TxFileStatus::default_instance_,
      TxFileStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxFileStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxFileStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxFileStatus));
  CalibrationTimingResult_descriptor_ = file->message_type(44);
  static const int CalibrationTimingResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTimingResult, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTimingResult, wholeseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTimingResult, fracseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTimingResult, transmittedbychannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTimingResult, receivedbychannel_),
  };
  CalibrationTimingResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalibrationTimingResult_descriptor_,
      CalibrationTimingResult::default_instance_,
      CalibrationTimingResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTimingResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTimingResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalibrationTimingResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ThunderbirdMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseSelf_descriptor_, &CloseSelf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWCommandRequest_descriptor_, &EWCommandRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parameters_descriptor_, &Parameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWStatus_descriptor_, &EWStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OutputChannelStatus_descriptor_, &OutputChannelStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWTransmittingRequest_descriptor_, &EWTransmittingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWCapabilityUnregister_descriptor_, &EWCapabilityUnregister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWCapability_descriptor_, &EWCapability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWCapabilities_descriptor_, &EWCapabilities::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWCapabilityTransmitting_descriptor_, &EWCapabilityTransmitting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWTransmitting_descriptor_, &EWTransmitting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWTechniqueDescriptions_descriptor_, &EWTechniqueDescriptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWTechniqueDescriptionsRequest_descriptor_, &EWTechniqueDescriptionsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWOption_descriptor_, &EWOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWOptions_descriptor_, &EWOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWOptionsRequest_descriptor_, &EWOptionsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWStatusRequest_descriptor_, &EWStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWCapabilitiesRequest_descriptor_, &EWCapabilitiesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWOptionDelete_descriptor_, &EWOptionDelete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWCeaseBuzzer_descriptor_, &EWCeaseBuzzer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxAntennaConfig_descriptor_, &TxAntennaConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxAmpConfig_descriptor_, &TxAmpConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransmitterConfig_descriptor_, &TransmitterConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    techniqueCommand_descriptor_, &techniqueCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    newSignalFrame_descriptor_, &newSignalFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterQuery_descriptor_, &RegisterQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterRequest_descriptor_, &RegisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnregisterRequest_descriptor_, &UnregisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterResponse_descriptor_, &RegisterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HopAttackStatus_descriptor_, &HopAttackStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxFreqRequest_descriptor_, &TxFreqRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmergencyJam_descriptor_, &EmergencyJam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JamOff_descriptor_, &JamOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWSDRRequest_descriptor_, &EWSDRRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWSDRCommand_descriptor_, &EWSDRCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Aperture_descriptor_, &Aperture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transceiver_descriptor_, &Transceiver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThreatStatus_descriptor_, &ThreatStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWSDRStatus_descriptor_, &EWSDRStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetAppParameters_descriptor_, &SetAppParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionMode_descriptor_, &MissionMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalEvent_descriptor_, &SignalEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxSignalParams_descriptor_, &TxSignalParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxFileStatus_descriptor_, &TxFileStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalibrationTimingResult_descriptor_, &CalibrationTimingResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ThunderbirdMessages_2eproto() {
  delete CloseSelf::default_instance_;
  delete CloseSelf_reflection_;
  delete CloseSelf::_default_msgname_;
  delete EWCommandRequest::default_instance_;
  delete EWCommandRequest_reflection_;
  delete EWCommandRequest::_default_msgname_;
  delete Parameters::default_instance_;
  delete Parameters_reflection_;
  delete Parameters::_default_msgname_;
  delete EWStatus::default_instance_;
  delete EWStatus_reflection_;
  delete EWStatus::_default_msgname_;
  delete OutputChannelStatus::default_instance_;
  delete OutputChannelStatus_reflection_;
  delete OutputChannelStatus::_default_msgname_;
  delete EWTransmittingRequest::default_instance_;
  delete EWTransmittingRequest_reflection_;
  delete EWTransmittingRequest::_default_msgname_;
  delete EWCapabilityUnregister::default_instance_;
  delete EWCapabilityUnregister_reflection_;
  delete EWCapabilityUnregister::_default_msgname_;
  delete EWCapability::default_instance_;
  delete EWCapability_reflection_;
  delete EWCapability::_default_msgname_;
  delete EWCapabilities::default_instance_;
  delete EWCapabilities_reflection_;
  delete EWCapabilities::_default_msgname_;
  delete EWCapabilityTransmitting::default_instance_;
  delete EWCapabilityTransmitting_reflection_;
  delete EWCapabilityTransmitting::_default_msgname_;
  delete EWTransmitting::default_instance_;
  delete EWTransmitting_reflection_;
  delete EWTransmitting::_default_msgname_;
  delete EWTechniqueDescriptions::default_instance_;
  delete EWTechniqueDescriptions_reflection_;
  delete EWTechniqueDescriptions::_default_msgname_;
  delete EWTechniqueDescriptionsRequest::default_instance_;
  delete EWTechniqueDescriptionsRequest_reflection_;
  delete EWTechniqueDescriptionsRequest::_default_msgname_;
  delete EWOption::default_instance_;
  delete EWOption_reflection_;
  delete EWOption::_default_msgname_;
  delete EWOptions::default_instance_;
  delete EWOptions_reflection_;
  delete EWOptions::_default_msgname_;
  delete EWOptionsRequest::default_instance_;
  delete EWOptionsRequest_reflection_;
  delete EWOptionsRequest::_default_msgname_;
  delete EWStatusRequest::default_instance_;
  delete EWStatusRequest_reflection_;
  delete EWStatusRequest::_default_msgname_;
  delete EWCapabilitiesRequest::default_instance_;
  delete EWCapabilitiesRequest_reflection_;
  delete EWCapabilitiesRequest::_default_msgname_;
  delete EWOptionDelete::default_instance_;
  delete EWOptionDelete_reflection_;
  delete EWOptionDelete::_default_msgname_;
  delete EWCeaseBuzzer::default_instance_;
  delete EWCeaseBuzzer_reflection_;
  delete EWCeaseBuzzer::_default_msgname_;
  delete TxAntennaConfig::default_instance_;
  delete TxAntennaConfig_reflection_;
  delete TxAntennaConfig::_default_msgname_;
  delete TxAntennaConfig::_default_noisetest_;
  delete TxAmpConfig::default_instance_;
  delete TxAmpConfig_reflection_;
  delete TxAmpConfig::_default_msgname_;
  delete TxAmpConfig::_default_ip_;
  delete TransmitterConfig::default_instance_;
  delete TransmitterConfig_reflection_;
  delete TransmitterConfig::_default_msgname_;
  delete techniqueCommand::default_instance_;
  delete techniqueCommand_reflection_;
  delete techniqueCommand::_default_msgname_;
  delete newSignalFrame::default_instance_;
  delete newSignalFrame_reflection_;
  delete newSignalFrame::_default_msgname_;
  delete RegisterQuery::default_instance_;
  delete RegisterQuery_reflection_;
  delete RegisterQuery::_default_msgname_;
  delete RegisterRequest::default_instance_;
  delete RegisterRequest_reflection_;
  delete RegisterRequest::_default_msgname_;
  delete UnregisterRequest::default_instance_;
  delete UnregisterRequest_reflection_;
  delete UnregisterRequest::_default_msgname_;
  delete RegisterResponse::default_instance_;
  delete RegisterResponse_reflection_;
  delete RegisterResponse::_default_msgname_;
  delete HopAttackStatus::default_instance_;
  delete HopAttackStatus_reflection_;
  delete HopAttackStatus::_default_msgname_;
  delete TxFreqRequest::default_instance_;
  delete TxFreqRequest_reflection_;
  delete TxFreqRequest::_default_msgname_;
  delete EmergencyJam::default_instance_;
  delete EmergencyJam_reflection_;
  delete EmergencyJam::_default_msgname_;
  delete JamOff::default_instance_;
  delete JamOff_reflection_;
  delete JamOff::_default_msgname_;
  delete EWSDRRequest::default_instance_;
  delete EWSDRRequest_reflection_;
  delete EWSDRCommand::default_instance_;
  delete EWSDRCommand_reflection_;
  delete Aperture::default_instance_;
  delete Aperture_reflection_;
  delete Aperture::_default_guid_;
  delete Transceiver::default_instance_;
  delete Transceiver_reflection_;
  delete Transceiver::_default_guid_;
  delete ThreatStatus::default_instance_;
  delete ThreatStatus_reflection_;
  delete EWSDRStatus::default_instance_;
  delete EWSDRStatus_reflection_;
  delete SetAppParameters::default_instance_;
  delete SetAppParameters_reflection_;
  delete MissionMode::default_instance_;
  delete MissionMode_reflection_;
  delete SignalEvent::default_instance_;
  delete SignalEvent_reflection_;
  delete SignalEvent::_default_msgname_;
  delete TxSignalParams::default_instance_;
  delete TxSignalParams_reflection_;
  delete TxSignalParams::_default_msgname_;
  delete TxSignalParams::_default_config_;
  delete TxFileStatus::default_instance_;
  delete TxFileStatus_reflection_;
  delete TxFileStatus::_default_msgname_;
  delete TxFileStatus::_default_config_;
  delete CalibrationTimingResult::default_instance_;
  delete CalibrationTimingResult_reflection_;
  delete CalibrationTimingResult::_default_msgname_;
}

void protobuf_AddDesc_ThunderbirdMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::falcon_common_msg::protobuf_AddDesc_FalconCommonMessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031ThunderbirdMessages.proto\022\025fv.tb.proto"
    "s.TBProtos\032\032FalconCommonMessages.proto\";"
    "\n\tCloseSelf\022\032\n\007msgName\030\001 \001(\t:\tCLOSESELF\022"
    "\022\n\nuniqueWord\030\002 \001(\t\"\221\001\n\020EWCommandRequest"
    "\022#\n\007msgName\030\001 \001(\t:\022EW_COMMAND_REQUEST\0222\n"
    "\005ewcap\030\002 \001(\0132#.fv.tb.protos.TBProtos.EWC"
    "apability\022\016\n\006active\030\003 \001(\010\022\024\n\nsensorName\030"
    "\004 \001(\t:\000\"\207\003\n\nParameters\022\035\n\007msgName\030\001 \001(\t:"
    "\014EW_PARAMETER\022\020\n\010jamCFMHz\030\n \001(\002\022\021\n\ttuneC"
    "FMHz\030\013 \001(\002\022\020\n\010jamBWMHz\030\014 \001(\002\022\023\n\013jamBaudr"
    "ate\030\r \001(\002\022\024\n\014jamDeviation\030\016 \001(\002\022\017\n\007onCyc"
    "le\030\017 \001(\002\022\022\n\ntotalCycle\030\020 \001(\002\022\016\n\006modeID\030\021"
    " \001(\005\022\020\n\010sourceID\030\022 \001(\005\022\025\n\rdestinationID\030"
    "\023 \001(\005\022\023\n\013frameFormat\030\024 \001(\005\022\023\n\013textMessag"
    "e\030\025 \001(\t\022\013\n\003lat\030\026 \001(\001\022\013\n\003lon\030\027 \001(\001\022\022\n\nnum"
    "Targets\030\030 \001(\005\022-\n\004kvps\030\031 \003(\0132\037.falcon_com"
    "mon_msg.KeyValuePair\022\023\n\010jamIFMHz\030\032 \001(\001:\001"
    "0\"o\n\010EWStatus\022\032\n\007msgName\030\001 \001(\t:\tEW_STATU"
    "S\022G\n\023outputChannelStatus\030\002 \003(\0132*.fv.tb.p"
    "rotos.TBProtos.OutputChannelStatus\"\300\002\n\023O"
    "utputChannelStatus\022)\n\007msgName\030\001 \001(\t:\030EW_"
    "OUTPUT_CHANNEL_STATUS\022\016\n\006effect\030\002 \001(\t\022\024\n"
    "\014transmitFreq\030\003 \001(\001\022\020\n\010globalId\030\004 \001(\t\022\017\n"
    "\007antenna\030\005 \001(\t\022G\n\005state\030\006 \001(\01628.fv.tb.pr"
    "otos.TBProtos.OutputChannelStatus.Transm"
    "itState\022\022\n\npowerMeter\030\007 \001(\001\022\r\n\005resID\030\010 \001"
    "(\t\022\022\n\nsignalName\030\t \001(\t\"5\n\rTransmitState\022"
    "\t\n\005READY\020\000\022\r\n\tNOT_READY\020\001\022\n\n\006ACTIVE\020\002\"A\n"
    "\025EWTransmittingRequest\022(\n\007msgName\030\001 \001(\t:"
    "\027EW_TRANSMITTING_REQUEST\"Y\n\026EWCapability"
    "Unregister\022)\n\007msgName\030\001 \001(\t:\030EW_CAPABILI"
    "TY_UNREGISTER\022\024\n\014capabilityId\030\002 \001(\t\"\254\002\n\014"
    "EWCapability\022\037\n\007msgName\030\001 \001(\t:\016EW_CAPABI"
    "LITIY\022\022\n\nsignalName\030\002 \001(\t\022\016\n\006effect\030\003 \001("
    "\t\022\024\n\014capabilityId\030\004 \001(\t\022\020\n\010globalID\030\005 \001("
    "\t\022\027\n\014percentReady\030\006 \001(\002:\0010\0225\n\nparameters"
    "\030\007 \001(\0132!.fv.tb.protos.TBProtos.Parameter"
    "s\022\022\n\ntbUniqueID\030\010 \001(\t\"K\n\017DetectionSource"
    "\022\r\n\tEXTERNALS\020\000\022\r\n\tINTERNALS\020\001\022\t\n\005SIGUP\020"
    "\002\022\017\n\013THUNDERBIRD\020\003\"{\n\016EWCapabilities\022\037\n\007"
    "msgName\030\001 \001(\t:\016EWCAPABILITIES\0222\n\005ewcap\030\002"
    " \003(\0132#.fv.tb.protos.TBProtos.EWCapabilit"
    "y\022\024\n\nsensorName\030\003 \001(\t:\000\"\222\001\n\030EWCapability"
    "Transmitting\022+\n\007msgName\030\001 \001(\t:\032EW_CAPABI"
    "LITY_TRANSMITTING\0222\n\005ewcap\030\002 \001(\0132#.fv.tb"
    ".protos.TBProtos.EWCapability\022\025\n\006active\030"
    "\003 \001(\010:\005false\"z\n\016EWTransmitting\022 \n\007msgNam"
    "e\030\001 \001(\t:\017EW_TRANSMITTING\0222\n\005ewcap\030\002 \003(\0132"
    "#.fv.tb.protos.TBProtos.EWCapability\022\022\n\n"
    "sensorName\030\003 \001(\t\"a\n\027EWTechniqueDescripti"
    "ons\022(\n\007msgName\030\001 \001(\t:\027EWTECHNIQUEDESCRIP"
    "TIONS\022\034\n\024techniqueDescription\030\002 \003(\t\"Q\n\036E"
    "WTechniqueDescriptionsRequest\022/\n\007msgName"
    "\030\001 \001(\t:\036EWTECHNIQUEDESCRIPTIONSREQUEST\"\363"
    "\001\n\010EWOption\022\032\n\007msgName\030\001 \001(\t:\tEW_OPTION\022"
    "\022\n\nsignalName\030\002 \001(\t\022\016\n\006effect\030\003 \003(\t\022H\n\017d"
    "etectionSource\030\004 \001(\0162/.fv.tb.protos.TBPr"
    "otos.EWOption.DetectionSource\022\020\n\010globalI"
    "d\030\005 \001(\t\"K\n\017DetectionSource\022\r\n\tEXTERNALS\020"
    "\000\022\r\n\tINTERNALS\020\001\022\t\n\005SIGUP\020\002\022\017\n\013THUNDERBI"
    "RD\020\003\"X\n\tEWOptions\022\033\n\007msgName\030\001 \001(\t:\nEW_O"
    "PTIONS\022.\n\005ewopt\030\002 \003(\0132\037.fv.tb.protos.TBP"
    "rotos.EWOption\"7\n\020EWOptionsRequest\022#\n\007ms"
    "gName\030\001 \001(\t:\022EW_OPTIONS_REQUEST\"5\n\017EWSta"
    "tusRequest\022\"\n\007msgName\030\001 \001(\t:\021EW_STATUS_R"
    "EQUEST\"A\n\025EWCapabilitiesRequest\022(\n\007msgNa"
    "me\030\001 \001(\t:\027EW_CAPABILITIES_REQUEST\"E\n\016EWO"
    "ptionDelete\022!\n\007msgName\030\001 \001(\t:\020EW_OPTION_"
    "DELETE\022\020\n\010globalId\030\002 \001(\t\"1\n\rEWCeaseBuzze"
    "r\022 \n\007msgName\030\001 \001(\t:\017EW_CEASE_BUZZER\"\346\002\n\017"
    "TxAntennaConfig\022\"\n\007msgName\030\001 \001(\t:\021TX_ANT"
    "ENNA_CONFIG\022\017\n\007antName\030\002 \001(\t\022\r\n\005minRF\030\003 "
    "\001(\001\022\r\n\005maxRF\030\004 \001(\001\022\030\n\nfixedAngle\030\005 \001(\002:\004"
    "-999\022\023\n\010latitude\030\006 \001(\002:\0010\022\024\n\tlongitude\030\007"
    " \001(\002:\0010\022\023\n\010altitude\030\010 \001(\002:\0010\022\024\n\tbeamwidt"
    "h\030\t \001(\002:\0010\022\024\n\tdwncnvtLO\030\n \001(\002:\0010\022\017\n\003ssc\030"
    "\013 \001(\005:\002-1\022\014\n\004band\030\014 \001(\t\022\024\n\014polarization\030"
    "\r \001(\t\022\r\n\005group\030\016 \001(\005\022\032\n\rsightDistance\030\017 "
    "\001(\002:\003500\022\032\n\tnoiseTest\030\020 \001(\t:\007NO_TEST\"}\n\013"
    "TxAmpConfig\022\036\n\007msgName\030\001 \001(\t:\rTX_AMP_CON"
    "FIG\022\017\n\007ampName\030\002 \001(\t\022\027\n\002IP\030\003 \001(\t:\013nports"
    "erver\022\022\n\004port\030\004 \001(\005:\0044012\022\020\n\010hardware\030\005 "
    "\001(\010\"\350\002\n\021TransmitterConfig\022#\n\007msgName\030\001 \001"
    "(\t:\022TRANSMITTER_CONFIG\022\016\n\006txName\030\002 \001(\t\022\026"
    "\n\007clkFreq\030\003 \001(\002:\0054e+08\022\025\n\tdacInterp\030\004 \001("
    "\005:\00216\022\025\n\ncoreInterp\030\005 \001(\005:\0011\022\023\n\010baseChan"
    "\030\006 \001(\005:\0011\022\025\n\nnumBuffers\030\007 \001(\005:\0012\022\024\n\tfreq"
    "Shift\030\010 \001(\002:\0010\022\020\n\010siggenIP\030\t \001(\t\022V\n\nsigg"
    "enType\030\n \001(\01623.fv.tb.protos.TBProtos.Tra"
    "nsmitterConfig.SiggenType:\rROHDE_SCHWARZ"
    "\",\n\nSiggenType\022\021\n\rROHDE_SCHWARZ\020\000\022\013\n\007MMS"
    "_MUP\020\001\"\356\001\n\020techniqueCommand\022!\n\007msgName\030\001"
    " \001(\t:\020TECHNIQUECOMMAND\022D\n\007command\030\002 \001(\0162"
    "3.fv.tb.protos.TBProtos.techniqueCommand"
    ".CommandType\0222\n\005ewcap\030\003 \001(\0132#.fv.tb.prot"
    "os.TBProtos.EWCapability\"=\n\013CommandType\022"
    "\013\n\007TURNOFF\020\000\022\n\n\006TURNON\020\001\022\n\n\006UPDATE\020\002\022\t\n\005"
    "RESET\020\003\"U\n\016newSignalFrame\022\037\n\007msgName\030\001 \001"
    "(\t:\016NEWSIGNALFRAME\022\021\n\tradioName\030\002 \001(\t\022\017\n"
    "\007frameID\030\003 \001(\005\"C\n\rRegisterQuery\022\036\n\007msgNa"
    "me\030\001 \001(\t:\rREGISTERQUERY\022\022\n\nsensorName\030\002 "
    "\001(\t\"\256\002\n\017RegisterRequest\022 \n\007msgName\030\001 \001(\t"
    ":\017REGISTERREQUEST\022\024\n\014platformName\030\002 \001(\t\022"
    "\025\n\rtechniqueName\030\003 \001(\t\022\022\n\ntbUniqueID\030\004 \001"
    "(\t\022\024\n\014dataPipeName\030\005 \001(\t\022\024\n\014metaPipeName"
    "\030\006 \001(\t\022\034\n\024techniqueDescription\030\007 \001(\t\022\035\n\022"
    "numberOfZPipePorts\030\010 \001(\005:\0011\022\022\n\nsensorNam"
    "e\030\t \001(\t\022\036\n\026estimatedCenterFreqMHz\030\n \001(\002\022"
    "\033\n\017overrideChannel\030\013 \001(\005:\002-1\"K\n\021Unregist"
    "erRequest\022\"\n\007msgName\030\001 \001(\t:\021UNREGISTERRE"
    "QUEST\022\022\n\ntbUniqueID\030\002 \001(\t\"\311\001\n\020RegisterRe"
    "sponse\022!\n\007msgName\030\001 \001(\t:\020REGISTERRESPONS"
    "E\022\r\n\005idNum\030\002 \001(\t\022\r\n\005ports\030\003 \003(\005\022\025\n\rsampl"
    "eRateSps\030\004 \001(\002\022\026\n\nminFreqMHz\030\005 \001(\002:\00220\022\030"
    "\n\nmaxFreqMHz\030\006 \001(\002:\0046000\022\027\n\017assignedChan"
    "nel\030\007 \001(\005\022\022\n\nsensorName\030\t \001(\t\"~\n\017HopAtta"
    "ckStatus\022 \n\007msgName\030\001 \001(\t:\017HOPATTACKSTAT"
    "US\022\020\n\010platform\030\002 \001(\t\022\021\n\ttotalhops\030\003 \001(\005\022"
    "\020\n\010goodhops\030\004 \001(\005\022\022\n\npercentage\030\005 \001(\002\"Q\n"
    "\rTxFreqRequest\022\036\n\007msgName\030\001 \001(\t:\rTXFREQR"
    "EQUEST\022\016\n\006freqHz\030\002 \001(\002\022\020\n\010globalID\030\003 \001(\t"
    "\"t\n\014EmergencyJam\022\035\n\007msgName\030\001 \001(\t:\014EMERG"
    "ENCYJAM\022\030\n\ncenterFreq\030\002 \001(\001:\0042440\022\025\n\tban"
    "dwidth\030\003 \001(\001:\00284\022\024\n\010targetID\030\004 \001(\005:\002-1\"7"
    "\n\006JamOff\022\027\n\007msgName\030\001 \001(\t:\006JAMOFF\022\024\n\010tar"
    "getID\030\004 \001(\005:\002-1\"\253\001\n\014EWSDRRequest\0221\n\010aper"
    "ture\030\001 \003(\0132\037.fv.tb.protos.TBProtos.Apert"
    "ure\0227\n\013transceiver\030\002 \003(\0132\".fv.tb.protos."
    "TBProtos.Transceiver\022\014\n\004guid\030\003 \001(\t\022\020\n\010pr"
    "iority\030\004 \001(\005\022\017\n\007enabled\030\005 \001(\010\"\253\001\n\014EWSDRC"
    "ommand\0221\n\010aperture\030\001 \003(\0132\037.fv.tb.protos."
    "TBProtos.Aperture\0227\n\013transceiver\030\002 \003(\0132\""
    ".fv.tb.protos.TBProtos.Transceiver\022\014\n\004gu"
    "id\030\003 \001(\t\022\020\n\010priority\030\004 \001(\005\022\017\n\007enabled\030\005 "
    "\001(\010\"\207\001\n\010Aperture\022\017\n\007antenna\030\001 \001(\005\022\017\n\007azi"
    "muth\030\002 \001(\002\022\021\n\televation\030\003 \001(\002\022\024\n\014polariz"
    "ation\030\004 \001(\005\022\025\n\010priority\030\005 \001(\005:\003100\022\031\n\004gu"
    "id\030\006 \001(\t:\013UNSPECIFIED\"\206\001\n\013Transceiver\022\023\n"
    "\013transceiver\030\001 \001(\005\022\017\n\007channel\030\002 \001(\005\022\017\n\007f"
    "reqMHz\030\003 \001(\002\022\016\n\006gainDB\030\004 \001(\005\022\025\n\010priority"
    "\030\005 \001(\005:\003100\022\031\n\004guid\030\006 \001(\t:\013UNSPECIFIED\"="
    "\n\014ThreatStatus\022-\n\004kvps\030\001 \003(\0132\037.falcon_co"
    "mmon_msg.KeyValuePair\"{\n\013EWSDRStatus\0222\n\t"
    "apertures\030\001 \003(\0132\037.fv.tb.protos.TBProtos."
    "Aperture\0228\n\014transceivers\030\002 \003(\0132\".fv.tb.p"
    "rotos.TBProtos.Transceiver\"\351\001\n\020SetAppPar"
    "ameters\022\r\n\005eltex\030\001 \001(\t\022\016\n\006soiNum\030\002 \001(\t\022\020"
    "\n\010globalID\030\003 \001(\t\022\r\n\005appID\030\004 \001(\005\022\022\n\nsenso"
    "rName\030\005 \001(\t\022\025\n\rsuperPriority\030\006 \001(\005\0221\n\010ap"
    "erture\030\007 \003(\0132\037.fv.tb.protos.TBProtos.Ape"
    "rture\0227\n\013transceiver\030\010 \003(\0132\".fv.tb.proto"
    "s.TBProtos.Transceiver\"m\n\013MissionMode\0225\n"
    "\004mode\030\001 \001(\0162\'.fv.tb.protos.TBProtos.Miss"
    "ionMode.Mode\"\'\n\004Mode\022\n\n\006SEARCH\020\001\022\010\n\004AUTO"
    "\020\002\022\t\n\005TRACE\020\003\"\312\003\n\013SignalEvent\022\035\n\007msgName"
    "\030\001 \001(\t:\014SIGNAL_EVENT\022\017\n\007channel\030\002 \001(\005\022:\n"
    "\teventType\030\003 \001(\0162\'.fv.tb.protos.TBProtos"
    ".SignalEvent.Type\022\017\n\007eventID\030\004 \001(\t\022\021\n\tti"
    "mestamp\030\005 \001(\t\022\016\n\006soiNum\030\006 \001(\t\022\r\n\005rfMHz\030\007"
    " \001(\002\022\021\n\tsubcarMHz\030\010 \001(\002\022\020\n\010excurKHz\030\t \001("
    "\002\022\r\n\005appID\030\n \001(\005\022\016\n\006antNum\030\013 \001(\005\022\020\n\005antA"
    "z\030\014 \001(\002:\0010\022\020\n\005antEl\030\r \001(\002:\0010\022\020\n\010globalID"
    "\030\016 \001(\t\022\016\n\006scrypt\030\017 \001(\t\022\022\n\nexportPort\030\020 \001"
    "(\005\022\r\n\005eltex\030\021 \001(\t\022\r\n\005bwMHz\030\022 \001(\002\022\024\n\nsens"
    "orName\030\023 \001(\t:\000\":\n\004Type\022\n\n\006SIGDET\020\000\022\t\n\005SI"
    "GUP\020\001\022\013\n\007SIGDOWN\020\002\022\016\n\nSIGTIMEOUT\020\003\"\242\001\n\016T"
    "xSignalParams\022!\n\007msgName\030\001 \001(\t:\020TX_SIGNA"
    "L_PARAMS\022\017\n\007sigName\030\002 \001(\t\022\020\n\010fileName\030\003 "
    "\001(\t\022\031\n\rsampleRateMHz\030\004 \001(\002:\00225\022\027\n\ncenter"
    "Freq\030\005 \001(\001:\003915\022\026\n\006config\030\006 \001(\t:\006CONFIG\""
    "j\n\014TxFileStatus\022\037\n\007msgName\030\001 \001(\t:\016TX_FIL"
    "E_STATUS\022\017\n\007sigName\030\002 \001(\t\022\020\n\010fileName\030\003 "
    "\001(\t\022\026\n\006config\030\004 \001(\t:\006CONFIG\"\255\001\n\027Calibrat"
    "ionTimingResult\022(\n\007msgName\030\001 \001(\t:\027CALIBR"
    "ATIONTIMINGRESULT\022\027\n\014wholeSeconds\030\002 \001(\001:"
    "\0010\022\026\n\013fracSeconds\030\003 \001(\001:\0010\022\034\n\024transmitte"
    "dByChannel\030\004 \001(\005\022\031\n\021receivedByChannel\030\005 "
    "\001(\005B\030\n\014fv.tb.protosB\010TBProtos", 7109);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ThunderbirdMessages.proto", &protobuf_RegisterTypes);
  CloseSelf::_default_msgname_ =
      new ::std::string("CLOSESELF", 9);
  CloseSelf::default_instance_ = new CloseSelf();
  EWCommandRequest::_default_msgname_ =
      new ::std::string("EW_COMMAND_REQUEST", 18);
  EWCommandRequest::default_instance_ = new EWCommandRequest();
  Parameters::_default_msgname_ =
      new ::std::string("EW_PARAMETER", 12);
  Parameters::default_instance_ = new Parameters();
  EWStatus::_default_msgname_ =
      new ::std::string("EW_STATUS", 9);
  EWStatus::default_instance_ = new EWStatus();
  OutputChannelStatus::_default_msgname_ =
      new ::std::string("EW_OUTPUT_CHANNEL_STATUS", 24);
  OutputChannelStatus::default_instance_ = new OutputChannelStatus();
  EWTransmittingRequest::_default_msgname_ =
      new ::std::string("EW_TRANSMITTING_REQUEST", 23);
  EWTransmittingRequest::default_instance_ = new EWTransmittingRequest();
  EWCapabilityUnregister::_default_msgname_ =
      new ::std::string("EW_CAPABILITY_UNREGISTER", 24);
  EWCapabilityUnregister::default_instance_ = new EWCapabilityUnregister();
  EWCapability::_default_msgname_ =
      new ::std::string("EW_CAPABILITIY", 14);
  EWCapability::default_instance_ = new EWCapability();
  EWCapabilities::_default_msgname_ =
      new ::std::string("EWCAPABILITIES", 14);
  EWCapabilities::default_instance_ = new EWCapabilities();
  EWCapabilityTransmitting::_default_msgname_ =
      new ::std::string("EW_CAPABILITY_TRANSMITTING", 26);
  EWCapabilityTransmitting::default_instance_ = new EWCapabilityTransmitting();
  EWTransmitting::_default_msgname_ =
      new ::std::string("EW_TRANSMITTING", 15);
  EWTransmitting::default_instance_ = new EWTransmitting();
  EWTechniqueDescriptions::_default_msgname_ =
      new ::std::string("EWTECHNIQUEDESCRIPTIONS", 23);
  EWTechniqueDescriptions::default_instance_ = new EWTechniqueDescriptions();
  EWTechniqueDescriptionsRequest::_default_msgname_ =
      new ::std::string("EWTECHNIQUEDESCRIPTIONSREQUEST", 30);
  EWTechniqueDescriptionsRequest::default_instance_ = new EWTechniqueDescriptionsRequest();
  EWOption::_default_msgname_ =
      new ::std::string("EW_OPTION", 9);
  EWOption::default_instance_ = new EWOption();
  EWOptions::_default_msgname_ =
      new ::std::string("EW_OPTIONS", 10);
  EWOptions::default_instance_ = new EWOptions();
  EWOptionsRequest::_default_msgname_ =
      new ::std::string("EW_OPTIONS_REQUEST", 18);
  EWOptionsRequest::default_instance_ = new EWOptionsRequest();
  EWStatusRequest::_default_msgname_ =
      new ::std::string("EW_STATUS_REQUEST", 17);
  EWStatusRequest::default_instance_ = new EWStatusRequest();
  EWCapabilitiesRequest::_default_msgname_ =
      new ::std::string("EW_CAPABILITIES_REQUEST", 23);
  EWCapabilitiesRequest::default_instance_ = new EWCapabilitiesRequest();
  EWOptionDelete::_default_msgname_ =
      new ::std::string("EW_OPTION_DELETE", 16);
  EWOptionDelete::default_instance_ = new EWOptionDelete();
  EWCeaseBuzzer::_default_msgname_ =
      new ::std::string("EW_CEASE_BUZZER", 15);
  EWCeaseBuzzer::default_instance_ = new EWCeaseBuzzer();
  TxAntennaConfig::_default_msgname_ =
      new ::std::string("TX_ANTENNA_CONFIG", 17);
  TxAntennaConfig::_default_noisetest_ =
      new ::std::string("NO_TEST", 7);
  TxAntennaConfig::default_instance_ = new TxAntennaConfig();
  TxAmpConfig::_default_msgname_ =
      new ::std::string("TX_AMP_CONFIG", 13);
  TxAmpConfig::_default_ip_ =
      new ::std::string("nportserver", 11);
  TxAmpConfig::default_instance_ = new TxAmpConfig();
  TransmitterConfig::_default_msgname_ =
      new ::std::string("TRANSMITTER_CONFIG", 18);
  TransmitterConfig::default_instance_ = new TransmitterConfig();
  techniqueCommand::_default_msgname_ =
      new ::std::string("TECHNIQUECOMMAND", 16);
  techniqueCommand::default_instance_ = new techniqueCommand();
  newSignalFrame::_default_msgname_ =
      new ::std::string("NEWSIGNALFRAME", 14);
  newSignalFrame::default_instance_ = new newSignalFrame();
  RegisterQuery::_default_msgname_ =
      new ::std::string("REGISTERQUERY", 13);
  RegisterQuery::default_instance_ = new RegisterQuery();
  RegisterRequest::_default_msgname_ =
      new ::std::string("REGISTERREQUEST", 15);
  RegisterRequest::default_instance_ = new RegisterRequest();
  UnregisterRequest::_default_msgname_ =
      new ::std::string("UNREGISTERREQUEST", 17);
  UnregisterRequest::default_instance_ = new UnregisterRequest();
  RegisterResponse::_default_msgname_ =
      new ::std::string("REGISTERRESPONSE", 16);
  RegisterResponse::default_instance_ = new RegisterResponse();
  HopAttackStatus::_default_msgname_ =
      new ::std::string("HOPATTACKSTATUS", 15);
  HopAttackStatus::default_instance_ = new HopAttackStatus();
  TxFreqRequest::_default_msgname_ =
      new ::std::string("TXFREQREQUEST", 13);
  TxFreqRequest::default_instance_ = new TxFreqRequest();
  EmergencyJam::_default_msgname_ =
      new ::std::string("EMERGENCYJAM", 12);
  EmergencyJam::default_instance_ = new EmergencyJam();
  JamOff::_default_msgname_ =
      new ::std::string("JAMOFF", 6);
  JamOff::default_instance_ = new JamOff();
  EWSDRRequest::default_instance_ = new EWSDRRequest();
  EWSDRCommand::default_instance_ = new EWSDRCommand();
  Aperture::_default_guid_ =
      new ::std::string("UNSPECIFIED", 11);
  Aperture::default_instance_ = new Aperture();
  Transceiver::_default_guid_ =
      new ::std::string("UNSPECIFIED", 11);
  Transceiver::default_instance_ = new Transceiver();
  ThreatStatus::default_instance_ = new ThreatStatus();
  EWSDRStatus::default_instance_ = new EWSDRStatus();
  SetAppParameters::default_instance_ = new SetAppParameters();
  MissionMode::default_instance_ = new MissionMode();
  SignalEvent::_default_msgname_ =
      new ::std::string("SIGNAL_EVENT", 12);
  SignalEvent::default_instance_ = new SignalEvent();
  TxSignalParams::_default_msgname_ =
      new ::std::string("TX_SIGNAL_PARAMS", 16);
  TxSignalParams::_default_config_ =
      new ::std::string("CONFIG", 6);
  TxSignalParams::default_instance_ = new TxSignalParams();
  TxFileStatus::_default_msgname_ =
      new ::std::string("TX_FILE_STATUS", 14);
  TxFileStatus::_default_config_ =
      new ::std::string("CONFIG", 6);
  TxFileStatus::default_instance_ = new TxFileStatus();
  CalibrationTimingResult::_default_msgname_ =
      new ::std::string("CALIBRATIONTIMINGRESULT", 23);
  CalibrationTimingResult::default_instance_ = new CalibrationTimingResult();
  CloseSelf::default_instance_->InitAsDefaultInstance();
  EWCommandRequest::default_instance_->InitAsDefaultInstance();
  Parameters::default_instance_->InitAsDefaultInstance();
  EWStatus::default_instance_->InitAsDefaultInstance();
  OutputChannelStatus::default_instance_->InitAsDefaultInstance();
  EWTransmittingRequest::default_instance_->InitAsDefaultInstance();
  EWCapabilityUnregister::default_instance_->InitAsDefaultInstance();
  EWCapability::default_instance_->InitAsDefaultInstance();
  EWCapabilities::default_instance_->InitAsDefaultInstance();
  EWCapabilityTransmitting::default_instance_->InitAsDefaultInstance();
  EWTransmitting::default_instance_->InitAsDefaultInstance();
  EWTechniqueDescriptions::default_instance_->InitAsDefaultInstance();
  EWTechniqueDescriptionsRequest::default_instance_->InitAsDefaultInstance();
  EWOption::default_instance_->InitAsDefaultInstance();
  EWOptions::default_instance_->InitAsDefaultInstance();
  EWOptionsRequest::default_instance_->InitAsDefaultInstance();
  EWStatusRequest::default_instance_->InitAsDefaultInstance();
  EWCapabilitiesRequest::default_instance_->InitAsDefaultInstance();
  EWOptionDelete::default_instance_->InitAsDefaultInstance();
  EWCeaseBuzzer::default_instance_->InitAsDefaultInstance();
  TxAntennaConfig::default_instance_->InitAsDefaultInstance();
  TxAmpConfig::default_instance_->InitAsDefaultInstance();
  TransmitterConfig::default_instance_->InitAsDefaultInstance();
  techniqueCommand::default_instance_->InitAsDefaultInstance();
  newSignalFrame::default_instance_->InitAsDefaultInstance();
  RegisterQuery::default_instance_->InitAsDefaultInstance();
  RegisterRequest::default_instance_->InitAsDefaultInstance();
  UnregisterRequest::default_instance_->InitAsDefaultInstance();
  RegisterResponse::default_instance_->InitAsDefaultInstance();
  HopAttackStatus::default_instance_->InitAsDefaultInstance();
  TxFreqRequest::default_instance_->InitAsDefaultInstance();
  EmergencyJam::default_instance_->InitAsDefaultInstance();
  JamOff::default_instance_->InitAsDefaultInstance();
  EWSDRRequest::default_instance_->InitAsDefaultInstance();
  EWSDRCommand::default_instance_->InitAsDefaultInstance();
  Aperture::default_instance_->InitAsDefaultInstance();
  Transceiver::default_instance_->InitAsDefaultInstance();
  ThreatStatus::default_instance_->InitAsDefaultInstance();
  EWSDRStatus::default_instance_->InitAsDefaultInstance();
  SetAppParameters::default_instance_->InitAsDefaultInstance();
  MissionMode::default_instance_->InitAsDefaultInstance();
  SignalEvent::default_instance_->InitAsDefaultInstance();
  TxSignalParams::default_instance_->InitAsDefaultInstance();
  TxFileStatus::default_instance_->InitAsDefaultInstance();
  CalibrationTimingResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ThunderbirdMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ThunderbirdMessages_2eproto {
  StaticDescriptorInitializer_ThunderbirdMessages_2eproto() {
    protobuf_AddDesc_ThunderbirdMessages_2eproto();
  }
} static_descriptor_initializer_ThunderbirdMessages_2eproto_;

// ===================================================================

::std::string* CloseSelf::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int CloseSelf::kMsgNameFieldNumber;
const int CloseSelf::kUniqueWordFieldNumber;
#endif  // !_MSC_VER

CloseSelf::CloseSelf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseSelf::InitAsDefaultInstance() {
}

CloseSelf::CloseSelf(const CloseSelf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseSelf::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  uniqueword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseSelf::~CloseSelf() {
  SharedDtor();
}

void CloseSelf::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (uniqueword_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueword_;
  }
  if (this != default_instance_) {
  }
}

void CloseSelf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseSelf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseSelf_descriptor_;
}

const CloseSelf& CloseSelf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

CloseSelf* CloseSelf::default_instance_ = NULL;

CloseSelf* CloseSelf::New() const {
  return new CloseSelf;
}

void CloseSelf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_uniqueword()) {
      if (uniqueword_ != &::google::protobuf::internal::kEmptyString) {
        uniqueword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseSelf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "CLOSESELF"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uniqueWord;
        break;
      }

      // optional string uniqueWord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqueWord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqueword().data(), this->uniqueword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseSelf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "CLOSESELF"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string uniqueWord = 2;
  if (has_uniqueword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueword().data(), this->uniqueword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uniqueword(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseSelf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "CLOSESELF"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string uniqueWord = 2;
  if (has_uniqueword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueword().data(), this->uniqueword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uniqueword(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseSelf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "CLOSESELF"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string uniqueWord = 2;
    if (has_uniqueword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueword());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseSelf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseSelf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseSelf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseSelf::MergeFrom(const CloseSelf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_uniqueword()) {
      set_uniqueword(from.uniqueword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseSelf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseSelf::CopyFrom(const CloseSelf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseSelf::IsInitialized() const {

  return true;
}

void CloseSelf::Swap(CloseSelf* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(uniqueword_, other->uniqueword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseSelf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseSelf_descriptor_;
  metadata.reflection = CloseSelf_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EWCommandRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWCommandRequest::kMsgNameFieldNumber;
const int EWCommandRequest::kEwcapFieldNumber;
const int EWCommandRequest::kActiveFieldNumber;
const int EWCommandRequest::kSensorNameFieldNumber;
#endif  // !_MSC_VER

EWCommandRequest::EWCommandRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWCommandRequest::InitAsDefaultInstance() {
  ewcap_ = const_cast< ::fv::tb::protos::TBProtos::EWCapability*>(&::fv::tb::protos::TBProtos::EWCapability::default_instance());
}

EWCommandRequest::EWCommandRequest(const EWCommandRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWCommandRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ewcap_ = NULL;
  active_ = false;
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWCommandRequest::~EWCommandRequest() {
  SharedDtor();
}

void EWCommandRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (this != default_instance_) {
    delete ewcap_;
  }
}

void EWCommandRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWCommandRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWCommandRequest_descriptor_;
}

const EWCommandRequest& EWCommandRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWCommandRequest* EWCommandRequest::default_instance_ = NULL;

EWCommandRequest* EWCommandRequest::New() const {
  return new EWCommandRequest;
}

void EWCommandRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_ewcap()) {
      if (ewcap_ != NULL) ewcap_->::fv::tb::protos::TBProtos::EWCapability::Clear();
    }
    active_ = false;
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWCommandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_COMMAND_REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ewcap;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWCapability ewcap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ewcap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ewcap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active;
        break;
      }

      // optional bool active = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWCommandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_COMMAND_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWCapability ewcap = 2;
  if (has_ewcap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ewcap(), output);
  }

  // optional bool active = 3;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->active(), output);
  }

  // optional string sensorName = 4 [default = ""];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sensorname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWCommandRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_COMMAND_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWCapability ewcap = 2;
  if (has_ewcap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ewcap(), target);
  }

  // optional bool active = 3;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->active(), target);
  }

  // optional string sensorName = 4 [default = ""];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sensorname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWCommandRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_COMMAND_REQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .fv.tb.protos.TBProtos.EWCapability ewcap = 2;
    if (has_ewcap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ewcap());
    }

    // optional bool active = 3;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional string sensorName = 4 [default = ""];
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWCommandRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWCommandRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWCommandRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWCommandRequest::MergeFrom(const EWCommandRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_ewcap()) {
      mutable_ewcap()->::fv::tb::protos::TBProtos::EWCapability::MergeFrom(from.ewcap());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWCommandRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWCommandRequest::CopyFrom(const EWCommandRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWCommandRequest::IsInitialized() const {

  return true;
}

void EWCommandRequest::Swap(EWCommandRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(ewcap_, other->ewcap_);
    std::swap(active_, other->active_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWCommandRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWCommandRequest_descriptor_;
  metadata.reflection = EWCommandRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Parameters::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int Parameters::kMsgNameFieldNumber;
const int Parameters::kJamCFMHzFieldNumber;
const int Parameters::kTuneCFMHzFieldNumber;
const int Parameters::kJamBWMHzFieldNumber;
const int Parameters::kJamBaudrateFieldNumber;
const int Parameters::kJamDeviationFieldNumber;
const int Parameters::kOnCycleFieldNumber;
const int Parameters::kTotalCycleFieldNumber;
const int Parameters::kModeIDFieldNumber;
const int Parameters::kSourceIDFieldNumber;
const int Parameters::kDestinationIDFieldNumber;
const int Parameters::kFrameFormatFieldNumber;
const int Parameters::kTextMessageFieldNumber;
const int Parameters::kLatFieldNumber;
const int Parameters::kLonFieldNumber;
const int Parameters::kNumTargetsFieldNumber;
const int Parameters::kKvpsFieldNumber;
const int Parameters::kJamIFMHzFieldNumber;
#endif  // !_MSC_VER

Parameters::Parameters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parameters::InitAsDefaultInstance() {
}

Parameters::Parameters(const Parameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parameters::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  jamcfmhz_ = 0;
  tunecfmhz_ = 0;
  jambwmhz_ = 0;
  jambaudrate_ = 0;
  jamdeviation_ = 0;
  oncycle_ = 0;
  totalcycle_ = 0;
  modeid_ = 0;
  sourceid_ = 0;
  destinationid_ = 0;
  frameformat_ = 0;
  textmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lat_ = 0;
  lon_ = 0;
  numtargets_ = 0;
  jamifmhz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parameters::~Parameters() {
  SharedDtor();
}

void Parameters::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (textmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete textmessage_;
  }
  if (this != default_instance_) {
  }
}

void Parameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parameters_descriptor_;
}

const Parameters& Parameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

Parameters* Parameters::default_instance_ = NULL;

Parameters* Parameters::New() const {
  return new Parameters;
}

void Parameters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    jamcfmhz_ = 0;
    tunecfmhz_ = 0;
    jambwmhz_ = 0;
    jambaudrate_ = 0;
    jamdeviation_ = 0;
    oncycle_ = 0;
    totalcycle_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    modeid_ = 0;
    sourceid_ = 0;
    destinationid_ = 0;
    frameformat_ = 0;
    if (has_textmessage()) {
      if (textmessage_ != &::google::protobuf::internal::kEmptyString) {
        textmessage_->clear();
      }
    }
    lat_ = 0;
    lon_ = 0;
    numtargets_ = 0;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    jamifmhz_ = 0;
  }
  kvps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_PARAMETER"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_jamCFMHz;
        break;
      }

      // optional float jamCFMHz = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_jamCFMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jamcfmhz_)));
          set_has_jamcfmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_tuneCFMHz;
        break;
      }

      // optional float tuneCFMHz = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tuneCFMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tunecfmhz_)));
          set_has_tunecfmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_jamBWMHz;
        break;
      }

      // optional float jamBWMHz = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_jamBWMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jambwmhz_)));
          set_has_jambwmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_jamBaudrate;
        break;
      }

      // optional float jamBaudrate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_jamBaudrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jambaudrate_)));
          set_has_jambaudrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_jamDeviation;
        break;
      }

      // optional float jamDeviation = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_jamDeviation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jamdeviation_)));
          set_has_jamdeviation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_onCycle;
        break;
      }

      // optional float onCycle = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_onCycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &oncycle_)));
          set_has_oncycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_totalCycle;
        break;
      }

      // optional float totalCycle = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_totalCycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &totalcycle_)));
          set_has_totalcycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_modeID;
        break;
      }

      // optional int32 modeID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeid_)));
          set_has_modeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_sourceID;
        break;
      }

      // optional int32 sourceID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sourceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_destinationID;
        break;
      }

      // optional int32 destinationID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destinationID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destinationid_)));
          set_has_destinationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_frameFormat;
        break;
      }

      // optional int32 frameFormat = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameFormat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameformat_)));
          set_has_frameformat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_textMessage;
        break;
      }

      // optional string textMessage = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_textmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->textmessage().data(), this->textmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_lat;
        break;
      }

      // optional double lat = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_lon;
        break;
      }

      // optional double lon = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_numTargets;
        break;
      }

      // optional int32 numTargets = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numTargets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numtargets_)));
          set_has_numtargets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_kvps;
        break;
      }

      // repeated .falcon_common_msg.KeyValuePair kvps = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_kvps;
        if (input->ExpectTag(209)) goto parse_jamIFMHz;
        break;
      }

      // optional double jamIFMHz = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jamIFMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jamifmhz_)));
          set_has_jamifmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_PARAMETER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional float jamCFMHz = 10;
  if (has_jamcfmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->jamcfmhz(), output);
  }

  // optional float tuneCFMHz = 11;
  if (has_tunecfmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->tunecfmhz(), output);
  }

  // optional float jamBWMHz = 12;
  if (has_jambwmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->jambwmhz(), output);
  }

  // optional float jamBaudrate = 13;
  if (has_jambaudrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->jambaudrate(), output);
  }

  // optional float jamDeviation = 14;
  if (has_jamdeviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->jamdeviation(), output);
  }

  // optional float onCycle = 15;
  if (has_oncycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->oncycle(), output);
  }

  // optional float totalCycle = 16;
  if (has_totalcycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->totalcycle(), output);
  }

  // optional int32 modeID = 17;
  if (has_modeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->modeid(), output);
  }

  // optional int32 sourceID = 18;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->sourceid(), output);
  }

  // optional int32 destinationID = 19;
  if (has_destinationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->destinationid(), output);
  }

  // optional int32 frameFormat = 20;
  if (has_frameformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->frameformat(), output);
  }

  // optional string textMessage = 21;
  if (has_textmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->textmessage().data(), this->textmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->textmessage(), output);
  }

  // optional double lat = 22;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->lat(), output);
  }

  // optional double lon = 23;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->lon(), output);
  }

  // optional int32 numTargets = 24;
  if (has_numtargets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->numtargets(), output);
  }

  // repeated .falcon_common_msg.KeyValuePair kvps = 25;
  for (int i = 0; i < this->kvps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->kvps(i), output);
  }

  // optional double jamIFMHz = 26 [default = 0];
  if (has_jamifmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->jamifmhz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_PARAMETER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional float jamCFMHz = 10;
  if (has_jamcfmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->jamcfmhz(), target);
  }

  // optional float tuneCFMHz = 11;
  if (has_tunecfmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->tunecfmhz(), target);
  }

  // optional float jamBWMHz = 12;
  if (has_jambwmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->jambwmhz(), target);
  }

  // optional float jamBaudrate = 13;
  if (has_jambaudrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->jambaudrate(), target);
  }

  // optional float jamDeviation = 14;
  if (has_jamdeviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->jamdeviation(), target);
  }

  // optional float onCycle = 15;
  if (has_oncycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->oncycle(), target);
  }

  // optional float totalCycle = 16;
  if (has_totalcycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->totalcycle(), target);
  }

  // optional int32 modeID = 17;
  if (has_modeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->modeid(), target);
  }

  // optional int32 sourceID = 18;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->sourceid(), target);
  }

  // optional int32 destinationID = 19;
  if (has_destinationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->destinationid(), target);
  }

  // optional int32 frameFormat = 20;
  if (has_frameformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->frameformat(), target);
  }

  // optional string textMessage = 21;
  if (has_textmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->textmessage().data(), this->textmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->textmessage(), target);
  }

  // optional double lat = 22;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->lat(), target);
  }

  // optional double lon = 23;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->lon(), target);
  }

  // optional int32 numTargets = 24;
  if (has_numtargets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->numtargets(), target);
  }

  // repeated .falcon_common_msg.KeyValuePair kvps = 25;
  for (int i = 0; i < this->kvps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->kvps(i), target);
  }

  // optional double jamIFMHz = 26 [default = 0];
  if (has_jamifmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->jamifmhz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_PARAMETER"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional float jamCFMHz = 10;
    if (has_jamcfmhz()) {
      total_size += 1 + 4;
    }

    // optional float tuneCFMHz = 11;
    if (has_tunecfmhz()) {
      total_size += 1 + 4;
    }

    // optional float jamBWMHz = 12;
    if (has_jambwmhz()) {
      total_size += 1 + 4;
    }

    // optional float jamBaudrate = 13;
    if (has_jambaudrate()) {
      total_size += 1 + 4;
    }

    // optional float jamDeviation = 14;
    if (has_jamdeviation()) {
      total_size += 1 + 4;
    }

    // optional float onCycle = 15;
    if (has_oncycle()) {
      total_size += 1 + 4;
    }

    // optional float totalCycle = 16;
    if (has_totalcycle()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 modeID = 17;
    if (has_modeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modeid());
    }

    // optional int32 sourceID = 18;
    if (has_sourceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourceid());
    }

    // optional int32 destinationID = 19;
    if (has_destinationid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destinationid());
    }

    // optional int32 frameFormat = 20;
    if (has_frameformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameformat());
    }

    // optional string textMessage = 21;
    if (has_textmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->textmessage());
    }

    // optional double lat = 22;
    if (has_lat()) {
      total_size += 2 + 8;
    }

    // optional double lon = 23;
    if (has_lon()) {
      total_size += 2 + 8;
    }

    // optional int32 numTargets = 24;
    if (has_numtargets()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numtargets());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional double jamIFMHz = 26 [default = 0];
    if (has_jamifmhz()) {
      total_size += 2 + 8;
    }

  }
  // repeated .falcon_common_msg.KeyValuePair kvps = 25;
  total_size += 2 * this->kvps_size();
  for (int i = 0; i < this->kvps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parameters::MergeFrom(const Parameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvps_.MergeFrom(from.kvps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_jamcfmhz()) {
      set_jamcfmhz(from.jamcfmhz());
    }
    if (from.has_tunecfmhz()) {
      set_tunecfmhz(from.tunecfmhz());
    }
    if (from.has_jambwmhz()) {
      set_jambwmhz(from.jambwmhz());
    }
    if (from.has_jambaudrate()) {
      set_jambaudrate(from.jambaudrate());
    }
    if (from.has_jamdeviation()) {
      set_jamdeviation(from.jamdeviation());
    }
    if (from.has_oncycle()) {
      set_oncycle(from.oncycle());
    }
    if (from.has_totalcycle()) {
      set_totalcycle(from.totalcycle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_modeid()) {
      set_modeid(from.modeid());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_destinationid()) {
      set_destinationid(from.destinationid());
    }
    if (from.has_frameformat()) {
      set_frameformat(from.frameformat());
    }
    if (from.has_textmessage()) {
      set_textmessage(from.textmessage());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_numtargets()) {
      set_numtargets(from.numtargets());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_jamifmhz()) {
      set_jamifmhz(from.jamifmhz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameters::CopyFrom(const Parameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameters::IsInitialized() const {

  return true;
}

void Parameters::Swap(Parameters* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(jamcfmhz_, other->jamcfmhz_);
    std::swap(tunecfmhz_, other->tunecfmhz_);
    std::swap(jambwmhz_, other->jambwmhz_);
    std::swap(jambaudrate_, other->jambaudrate_);
    std::swap(jamdeviation_, other->jamdeviation_);
    std::swap(oncycle_, other->oncycle_);
    std::swap(totalcycle_, other->totalcycle_);
    std::swap(modeid_, other->modeid_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(destinationid_, other->destinationid_);
    std::swap(frameformat_, other->frameformat_);
    std::swap(textmessage_, other->textmessage_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(numtargets_, other->numtargets_);
    kvps_.Swap(&other->kvps_);
    std::swap(jamifmhz_, other->jamifmhz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parameters_descriptor_;
  metadata.reflection = Parameters_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EWStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWStatus::kMsgNameFieldNumber;
const int EWStatus::kOutputChannelStatusFieldNumber;
#endif  // !_MSC_VER

EWStatus::EWStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWStatus::InitAsDefaultInstance() {
}

EWStatus::EWStatus(const EWStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWStatus::~EWStatus() {
  SharedDtor();
}

void EWStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void EWStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWStatus_descriptor_;
}

const EWStatus& EWStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWStatus* EWStatus::default_instance_ = NULL;

EWStatus* EWStatus::New() const {
  return new EWStatus;
}

void EWStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  outputchannelstatus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_outputChannelStatus;
        break;
      }

      // repeated .fv.tb.protos.TBProtos.OutputChannelStatus outputChannelStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outputChannelStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputchannelstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_outputChannelStatus;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated .fv.tb.protos.TBProtos.OutputChannelStatus outputChannelStatus = 2;
  for (int i = 0; i < this->outputchannelstatus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->outputchannelstatus(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated .fv.tb.protos.TBProtos.OutputChannelStatus outputChannelStatus = 2;
  for (int i = 0; i < this->outputchannelstatus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->outputchannelstatus(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  // repeated .fv.tb.protos.TBProtos.OutputChannelStatus outputChannelStatus = 2;
  total_size += 1 * this->outputchannelstatus_size();
  for (int i = 0; i < this->outputchannelstatus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outputchannelstatus(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWStatus::MergeFrom(const EWStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  outputchannelstatus_.MergeFrom(from.outputchannelstatus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWStatus::CopyFrom(const EWStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWStatus::IsInitialized() const {

  return true;
}

void EWStatus::Swap(EWStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    outputchannelstatus_.Swap(&other->outputchannelstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWStatus_descriptor_;
  metadata.reflection = EWStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OutputChannelStatus_TransmitState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutputChannelStatus_TransmitState_descriptor_;
}
bool OutputChannelStatus_TransmitState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OutputChannelStatus_TransmitState OutputChannelStatus::READY;
const OutputChannelStatus_TransmitState OutputChannelStatus::NOT_READY;
const OutputChannelStatus_TransmitState OutputChannelStatus::ACTIVE;
const OutputChannelStatus_TransmitState OutputChannelStatus::TransmitState_MIN;
const OutputChannelStatus_TransmitState OutputChannelStatus::TransmitState_MAX;
const int OutputChannelStatus::TransmitState_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* OutputChannelStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int OutputChannelStatus::kMsgNameFieldNumber;
const int OutputChannelStatus::kEffectFieldNumber;
const int OutputChannelStatus::kTransmitFreqFieldNumber;
const int OutputChannelStatus::kGlobalIdFieldNumber;
const int OutputChannelStatus::kAntennaFieldNumber;
const int OutputChannelStatus::kStateFieldNumber;
const int OutputChannelStatus::kPowerMeterFieldNumber;
const int OutputChannelStatus::kResIDFieldNumber;
const int OutputChannelStatus::kSignalNameFieldNumber;
#endif  // !_MSC_VER

OutputChannelStatus::OutputChannelStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OutputChannelStatus::InitAsDefaultInstance() {
}

OutputChannelStatus::OutputChannelStatus(const OutputChannelStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OutputChannelStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transmitfreq_ = 0;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  antenna_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  powermeter_ = 0;
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signalname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutputChannelStatus::~OutputChannelStatus() {
  SharedDtor();
}

void OutputChannelStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (effect_ != &::google::protobuf::internal::kEmptyString) {
    delete effect_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (antenna_ != &::google::protobuf::internal::kEmptyString) {
    delete antenna_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (signalname_ != &::google::protobuf::internal::kEmptyString) {
    delete signalname_;
  }
  if (this != default_instance_) {
  }
}

void OutputChannelStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutputChannelStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutputChannelStatus_descriptor_;
}

const OutputChannelStatus& OutputChannelStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

OutputChannelStatus* OutputChannelStatus::default_instance_ = NULL;

OutputChannelStatus* OutputChannelStatus::New() const {
  return new OutputChannelStatus;
}

void OutputChannelStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_effect()) {
      if (effect_ != &::google::protobuf::internal::kEmptyString) {
        effect_->clear();
      }
    }
    transmitfreq_ = 0;
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    if (has_antenna()) {
      if (antenna_ != &::google::protobuf::internal::kEmptyString) {
        antenna_->clear();
      }
    }
    state_ = 0;
    powermeter_ = 0;
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_signalname()) {
      if (signalname_ != &::google::protobuf::internal::kEmptyString) {
        signalname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OutputChannelStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_OUTPUT_CHANNEL_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_effect;
        break;
      }

      // optional string effect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effect().data(), this->effect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_transmitFreq;
        break;
      }

      // optional double transmitFreq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_transmitFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transmitfreq_)));
          set_has_transmitfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_globalId;
        break;
      }

      // optional string globalId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_antenna;
        break;
      }

      // optional string antenna = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_antenna:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_antenna()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->antenna().data(), this->antenna().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional .fv.tb.protos.TBProtos.OutputChannelStatus.TransmitState state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fv::tb::protos::TBProtos::OutputChannelStatus_TransmitState_IsValid(value)) {
            set_state(static_cast< ::fv::tb::protos::TBProtos::OutputChannelStatus_TransmitState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_powerMeter;
        break;
      }

      // optional double powerMeter = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_powerMeter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &powermeter_)));
          set_has_powermeter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_resID;
        break;
      }

      // optional string resID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_signalName;
        break;
      }

      // optional string signalName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signalName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signalname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signalname().data(), this->signalname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OutputChannelStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_OUTPUT_CHANNEL_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string effect = 2;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effect().data(), this->effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->effect(), output);
  }

  // optional double transmitFreq = 3;
  if (has_transmitfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->transmitfreq(), output);
  }

  // optional string globalId = 4;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->globalid(), output);
  }

  // optional string antenna = 5;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->antenna().data(), this->antenna().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->antenna(), output);
  }

  // optional .fv.tb.protos.TBProtos.OutputChannelStatus.TransmitState state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // optional double powerMeter = 7;
  if (has_powermeter()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->powermeter(), output);
  }

  // optional string resID = 8;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->resid(), output);
  }

  // optional string signalName = 9;
  if (has_signalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalname().data(), this->signalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->signalname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OutputChannelStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_OUTPUT_CHANNEL_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string effect = 2;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effect().data(), this->effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->effect(), target);
  }

  // optional double transmitFreq = 3;
  if (has_transmitfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->transmitfreq(), target);
  }

  // optional string globalId = 4;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->globalid(), target);
  }

  // optional string antenna = 5;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->antenna().data(), this->antenna().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->antenna(), target);
  }

  // optional .fv.tb.protos.TBProtos.OutputChannelStatus.TransmitState state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  // optional double powerMeter = 7;
  if (has_powermeter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->powermeter(), target);
  }

  // optional string resID = 8;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->resid(), target);
  }

  // optional string signalName = 9;
  if (has_signalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalname().data(), this->signalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->signalname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OutputChannelStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_OUTPUT_CHANNEL_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string effect = 2;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effect());
    }

    // optional double transmitFreq = 3;
    if (has_transmitfreq()) {
      total_size += 1 + 8;
    }

    // optional string globalId = 4;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional string antenna = 5;
    if (has_antenna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->antenna());
    }

    // optional .fv.tb.protos.TBProtos.OutputChannelStatus.TransmitState state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional double powerMeter = 7;
    if (has_powermeter()) {
      total_size += 1 + 8;
    }

    // optional string resID = 8;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string signalName = 9;
    if (has_signalname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signalname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutputChannelStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OutputChannelStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OutputChannelStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutputChannelStatus::MergeFrom(const OutputChannelStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_transmitfreq()) {
      set_transmitfreq(from.transmitfreq());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_antenna()) {
      set_antenna(from.antenna());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_powermeter()) {
      set_powermeter(from.powermeter());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_signalname()) {
      set_signalname(from.signalname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OutputChannelStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputChannelStatus::CopyFrom(const OutputChannelStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputChannelStatus::IsInitialized() const {

  return true;
}

void OutputChannelStatus::Swap(OutputChannelStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(effect_, other->effect_);
    std::swap(transmitfreq_, other->transmitfreq_);
    std::swap(globalid_, other->globalid_);
    std::swap(antenna_, other->antenna_);
    std::swap(state_, other->state_);
    std::swap(powermeter_, other->powermeter_);
    std::swap(resid_, other->resid_);
    std::swap(signalname_, other->signalname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OutputChannelStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutputChannelStatus_descriptor_;
  metadata.reflection = OutputChannelStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EWTransmittingRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWTransmittingRequest::kMsgNameFieldNumber;
#endif  // !_MSC_VER

EWTransmittingRequest::EWTransmittingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWTransmittingRequest::InitAsDefaultInstance() {
}

EWTransmittingRequest::EWTransmittingRequest(const EWTransmittingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWTransmittingRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWTransmittingRequest::~EWTransmittingRequest() {
  SharedDtor();
}

void EWTransmittingRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void EWTransmittingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWTransmittingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWTransmittingRequest_descriptor_;
}

const EWTransmittingRequest& EWTransmittingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWTransmittingRequest* EWTransmittingRequest::default_instance_ = NULL;

EWTransmittingRequest* EWTransmittingRequest::New() const {
  return new EWTransmittingRequest;
}

void EWTransmittingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWTransmittingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_TRANSMITTING_REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWTransmittingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_TRANSMITTING_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWTransmittingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_TRANSMITTING_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWTransmittingRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_TRANSMITTING_REQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWTransmittingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWTransmittingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWTransmittingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWTransmittingRequest::MergeFrom(const EWTransmittingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWTransmittingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWTransmittingRequest::CopyFrom(const EWTransmittingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWTransmittingRequest::IsInitialized() const {

  return true;
}

void EWTransmittingRequest::Swap(EWTransmittingRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWTransmittingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWTransmittingRequest_descriptor_;
  metadata.reflection = EWTransmittingRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EWCapabilityUnregister::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWCapabilityUnregister::kMsgNameFieldNumber;
const int EWCapabilityUnregister::kCapabilityIdFieldNumber;
#endif  // !_MSC_VER

EWCapabilityUnregister::EWCapabilityUnregister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWCapabilityUnregister::InitAsDefaultInstance() {
}

EWCapabilityUnregister::EWCapabilityUnregister(const EWCapabilityUnregister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWCapabilityUnregister::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  capabilityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWCapabilityUnregister::~EWCapabilityUnregister() {
  SharedDtor();
}

void EWCapabilityUnregister::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (capabilityid_ != &::google::protobuf::internal::kEmptyString) {
    delete capabilityid_;
  }
  if (this != default_instance_) {
  }
}

void EWCapabilityUnregister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWCapabilityUnregister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWCapabilityUnregister_descriptor_;
}

const EWCapabilityUnregister& EWCapabilityUnregister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWCapabilityUnregister* EWCapabilityUnregister::default_instance_ = NULL;

EWCapabilityUnregister* EWCapabilityUnregister::New() const {
  return new EWCapabilityUnregister;
}

void EWCapabilityUnregister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_capabilityid()) {
      if (capabilityid_ != &::google::protobuf::internal::kEmptyString) {
        capabilityid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWCapabilityUnregister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_CAPABILITY_UNREGISTER"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_capabilityId;
        break;
      }

      // optional string capabilityId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capabilityId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capabilityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->capabilityid().data(), this->capabilityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWCapabilityUnregister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_CAPABILITY_UNREGISTER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string capabilityId = 2;
  if (has_capabilityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capabilityid().data(), this->capabilityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->capabilityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWCapabilityUnregister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_CAPABILITY_UNREGISTER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string capabilityId = 2;
  if (has_capabilityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capabilityid().data(), this->capabilityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->capabilityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWCapabilityUnregister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_CAPABILITY_UNREGISTER"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string capabilityId = 2;
    if (has_capabilityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capabilityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWCapabilityUnregister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWCapabilityUnregister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWCapabilityUnregister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWCapabilityUnregister::MergeFrom(const EWCapabilityUnregister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_capabilityid()) {
      set_capabilityid(from.capabilityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWCapabilityUnregister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWCapabilityUnregister::CopyFrom(const EWCapabilityUnregister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWCapabilityUnregister::IsInitialized() const {

  return true;
}

void EWCapabilityUnregister::Swap(EWCapabilityUnregister* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(capabilityid_, other->capabilityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWCapabilityUnregister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWCapabilityUnregister_descriptor_;
  metadata.reflection = EWCapabilityUnregister_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* EWCapability_DetectionSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWCapability_DetectionSource_descriptor_;
}
bool EWCapability_DetectionSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EWCapability_DetectionSource EWCapability::EXTERNALS;
const EWCapability_DetectionSource EWCapability::INTERNALS;
const EWCapability_DetectionSource EWCapability::SIGUP;
const EWCapability_DetectionSource EWCapability::THUNDERBIRD;
const EWCapability_DetectionSource EWCapability::DetectionSource_MIN;
const EWCapability_DetectionSource EWCapability::DetectionSource_MAX;
const int EWCapability::DetectionSource_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* EWCapability::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWCapability::kMsgNameFieldNumber;
const int EWCapability::kSignalNameFieldNumber;
const int EWCapability::kEffectFieldNumber;
const int EWCapability::kCapabilityIdFieldNumber;
const int EWCapability::kGlobalIDFieldNumber;
const int EWCapability::kPercentReadyFieldNumber;
const int EWCapability::kParametersFieldNumber;
const int EWCapability::kTbUniqueIDFieldNumber;
#endif  // !_MSC_VER

EWCapability::EWCapability()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWCapability::InitAsDefaultInstance() {
  parameters_ = const_cast< ::fv::tb::protos::TBProtos::Parameters*>(&::fv::tb::protos::TBProtos::Parameters::default_instance());
}

EWCapability::EWCapability(const EWCapability& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWCapability::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  signalname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  capabilityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  percentready_ = 0;
  parameters_ = NULL;
  tbuniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWCapability::~EWCapability() {
  SharedDtor();
}

void EWCapability::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (signalname_ != &::google::protobuf::internal::kEmptyString) {
    delete signalname_;
  }
  if (effect_ != &::google::protobuf::internal::kEmptyString) {
    delete effect_;
  }
  if (capabilityid_ != &::google::protobuf::internal::kEmptyString) {
    delete capabilityid_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (tbuniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete tbuniqueid_;
  }
  if (this != default_instance_) {
    delete parameters_;
  }
}

void EWCapability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWCapability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWCapability_descriptor_;
}

const EWCapability& EWCapability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWCapability* EWCapability::default_instance_ = NULL;

EWCapability* EWCapability::New() const {
  return new EWCapability;
}

void EWCapability::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_signalname()) {
      if (signalname_ != &::google::protobuf::internal::kEmptyString) {
        signalname_->clear();
      }
    }
    if (has_effect()) {
      if (effect_ != &::google::protobuf::internal::kEmptyString) {
        effect_->clear();
      }
    }
    if (has_capabilityid()) {
      if (capabilityid_ != &::google::protobuf::internal::kEmptyString) {
        capabilityid_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    percentready_ = 0;
    if (has_parameters()) {
      if (parameters_ != NULL) parameters_->::fv::tb::protos::TBProtos::Parameters::Clear();
    }
    if (has_tbuniqueid()) {
      if (tbuniqueid_ != &::google::protobuf::internal::kEmptyString) {
        tbuniqueid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWCapability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_CAPABILITIY"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signalName;
        break;
      }

      // optional string signalName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signalName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signalname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signalname().data(), this->signalname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_effect;
        break;
      }

      // optional string effect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effect().data(), this->effect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_capabilityId;
        break;
      }

      // optional string capabilityId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capabilityId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capabilityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->capabilityid().data(), this->capabilityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_globalID;
        break;
      }

      // optional string globalID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_percentReady;
        break;
      }

      // optional float percentReady = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_percentReady:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percentready_)));
          set_has_percentready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_parameters;
        break;
      }

      // optional .fv.tb.protos.TBProtos.Parameters parameters = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tbUniqueID;
        break;
      }

      // optional string tbUniqueID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tbUniqueID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tbuniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tbuniqueid().data(), this->tbuniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWCapability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_CAPABILITIY"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string signalName = 2;
  if (has_signalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalname().data(), this->signalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->signalname(), output);
  }

  // optional string effect = 3;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effect().data(), this->effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->effect(), output);
  }

  // optional string capabilityId = 4;
  if (has_capabilityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capabilityid().data(), this->capabilityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->capabilityid(), output);
  }

  // optional string globalID = 5;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->globalid(), output);
  }

  // optional float percentReady = 6 [default = 0];
  if (has_percentready()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->percentready(), output);
  }

  // optional .fv.tb.protos.TBProtos.Parameters parameters = 7;
  if (has_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->parameters(), output);
  }

  // optional string tbUniqueID = 8;
  if (has_tbuniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tbuniqueid().data(), this->tbuniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->tbuniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWCapability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_CAPABILITIY"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string signalName = 2;
  if (has_signalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalname().data(), this->signalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signalname(), target);
  }

  // optional string effect = 3;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effect().data(), this->effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->effect(), target);
  }

  // optional string capabilityId = 4;
  if (has_capabilityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capabilityid().data(), this->capabilityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->capabilityid(), target);
  }

  // optional string globalID = 5;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->globalid(), target);
  }

  // optional float percentReady = 6 [default = 0];
  if (has_percentready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->percentready(), target);
  }

  // optional .fv.tb.protos.TBProtos.Parameters parameters = 7;
  if (has_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->parameters(), target);
  }

  // optional string tbUniqueID = 8;
  if (has_tbuniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tbuniqueid().data(), this->tbuniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->tbuniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWCapability::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_CAPABILITIY"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string signalName = 2;
    if (has_signalname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signalname());
    }

    // optional string effect = 3;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effect());
    }

    // optional string capabilityId = 4;
    if (has_capabilityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capabilityid());
    }

    // optional string globalID = 5;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional float percentReady = 6 [default = 0];
    if (has_percentready()) {
      total_size += 1 + 4;
    }

    // optional .fv.tb.protos.TBProtos.Parameters parameters = 7;
    if (has_parameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parameters());
    }

    // optional string tbUniqueID = 8;
    if (has_tbuniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tbuniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWCapability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWCapability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWCapability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWCapability::MergeFrom(const EWCapability& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_signalname()) {
      set_signalname(from.signalname());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_capabilityid()) {
      set_capabilityid(from.capabilityid());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_percentready()) {
      set_percentready(from.percentready());
    }
    if (from.has_parameters()) {
      mutable_parameters()->::fv::tb::protos::TBProtos::Parameters::MergeFrom(from.parameters());
    }
    if (from.has_tbuniqueid()) {
      set_tbuniqueid(from.tbuniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWCapability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWCapability::CopyFrom(const EWCapability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWCapability::IsInitialized() const {

  return true;
}

void EWCapability::Swap(EWCapability* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(signalname_, other->signalname_);
    std::swap(effect_, other->effect_);
    std::swap(capabilityid_, other->capabilityid_);
    std::swap(globalid_, other->globalid_);
    std::swap(percentready_, other->percentready_);
    std::swap(parameters_, other->parameters_);
    std::swap(tbuniqueid_, other->tbuniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWCapability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWCapability_descriptor_;
  metadata.reflection = EWCapability_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EWCapabilities::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWCapabilities::kMsgNameFieldNumber;
const int EWCapabilities::kEwcapFieldNumber;
const int EWCapabilities::kSensorNameFieldNumber;
#endif  // !_MSC_VER

EWCapabilities::EWCapabilities()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWCapabilities::InitAsDefaultInstance() {
}

EWCapabilities::EWCapabilities(const EWCapabilities& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWCapabilities::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWCapabilities::~EWCapabilities() {
  SharedDtor();
}

void EWCapabilities::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (this != default_instance_) {
  }
}

void EWCapabilities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWCapabilities::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWCapabilities_descriptor_;
}

const EWCapabilities& EWCapabilities::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWCapabilities* EWCapabilities::default_instance_ = NULL;

EWCapabilities* EWCapabilities::New() const {
  return new EWCapabilities;
}

void EWCapabilities::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
  }
  ewcap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWCapabilities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EWCAPABILITIES"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ewcap;
        break;
      }

      // repeated .fv.tb.protos.TBProtos.EWCapability ewcap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ewcap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ewcap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ewcap;
        if (input->ExpectTag(26)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWCapabilities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EWCAPABILITIES"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated .fv.tb.protos.TBProtos.EWCapability ewcap = 2;
  for (int i = 0; i < this->ewcap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ewcap(i), output);
  }

  // optional string sensorName = 3 [default = ""];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sensorname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWCapabilities::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EWCAPABILITIES"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated .fv.tb.protos.TBProtos.EWCapability ewcap = 2;
  for (int i = 0; i < this->ewcap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ewcap(i), target);
  }

  // optional string sensorName = 3 [default = ""];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sensorname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWCapabilities::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EWCAPABILITIES"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string sensorName = 3 [default = ""];
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

  }
  // repeated .fv.tb.protos.TBProtos.EWCapability ewcap = 2;
  total_size += 1 * this->ewcap_size();
  for (int i = 0; i < this->ewcap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ewcap(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWCapabilities::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWCapabilities* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWCapabilities*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWCapabilities::MergeFrom(const EWCapabilities& from) {
  GOOGLE_CHECK_NE(&from, this);
  ewcap_.MergeFrom(from.ewcap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWCapabilities::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWCapabilities::CopyFrom(const EWCapabilities& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWCapabilities::IsInitialized() const {

  return true;
}

void EWCapabilities::Swap(EWCapabilities* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    ewcap_.Swap(&other->ewcap_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWCapabilities::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWCapabilities_descriptor_;
  metadata.reflection = EWCapabilities_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EWCapabilityTransmitting::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWCapabilityTransmitting::kMsgNameFieldNumber;
const int EWCapabilityTransmitting::kEwcapFieldNumber;
const int EWCapabilityTransmitting::kActiveFieldNumber;
#endif  // !_MSC_VER

EWCapabilityTransmitting::EWCapabilityTransmitting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWCapabilityTransmitting::InitAsDefaultInstance() {
  ewcap_ = const_cast< ::fv::tb::protos::TBProtos::EWCapability*>(&::fv::tb::protos::TBProtos::EWCapability::default_instance());
}

EWCapabilityTransmitting::EWCapabilityTransmitting(const EWCapabilityTransmitting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWCapabilityTransmitting::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ewcap_ = NULL;
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWCapabilityTransmitting::~EWCapabilityTransmitting() {
  SharedDtor();
}

void EWCapabilityTransmitting::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete ewcap_;
  }
}

void EWCapabilityTransmitting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWCapabilityTransmitting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWCapabilityTransmitting_descriptor_;
}

const EWCapabilityTransmitting& EWCapabilityTransmitting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWCapabilityTransmitting* EWCapabilityTransmitting::default_instance_ = NULL;

EWCapabilityTransmitting* EWCapabilityTransmitting::New() const {
  return new EWCapabilityTransmitting;
}

void EWCapabilityTransmitting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_ewcap()) {
      if (ewcap_ != NULL) ewcap_->::fv::tb::protos::TBProtos::EWCapability::Clear();
    }
    active_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWCapabilityTransmitting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_CAPABILITY_TRANSMITTING"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ewcap;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWCapability ewcap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ewcap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ewcap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active;
        break;
      }

      // optional bool active = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWCapabilityTransmitting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_CAPABILITY_TRANSMITTING"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWCapability ewcap = 2;
  if (has_ewcap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ewcap(), output);
  }

  // optional bool active = 3 [default = false];
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWCapabilityTransmitting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_CAPABILITY_TRANSMITTING"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWCapability ewcap = 2;
  if (has_ewcap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ewcap(), target);
  }

  // optional bool active = 3 [default = false];
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWCapabilityTransmitting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_CAPABILITY_TRANSMITTING"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .fv.tb.protos.TBProtos.EWCapability ewcap = 2;
    if (has_ewcap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ewcap());
    }

    // optional bool active = 3 [default = false];
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWCapabilityTransmitting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWCapabilityTransmitting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWCapabilityTransmitting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWCapabilityTransmitting::MergeFrom(const EWCapabilityTransmitting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_ewcap()) {
      mutable_ewcap()->::fv::tb::protos::TBProtos::EWCapability::MergeFrom(from.ewcap());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWCapabilityTransmitting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWCapabilityTransmitting::CopyFrom(const EWCapabilityTransmitting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWCapabilityTransmitting::IsInitialized() const {

  return true;
}

void EWCapabilityTransmitting::Swap(EWCapabilityTransmitting* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(ewcap_, other->ewcap_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWCapabilityTransmitting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWCapabilityTransmitting_descriptor_;
  metadata.reflection = EWCapabilityTransmitting_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EWTransmitting::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWTransmitting::kMsgNameFieldNumber;
const int EWTransmitting::kEwcapFieldNumber;
const int EWTransmitting::kSensorNameFieldNumber;
#endif  // !_MSC_VER

EWTransmitting::EWTransmitting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWTransmitting::InitAsDefaultInstance() {
}

EWTransmitting::EWTransmitting(const EWTransmitting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWTransmitting::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWTransmitting::~EWTransmitting() {
  SharedDtor();
}

void EWTransmitting::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (this != default_instance_) {
  }
}

void EWTransmitting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWTransmitting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWTransmitting_descriptor_;
}

const EWTransmitting& EWTransmitting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWTransmitting* EWTransmitting::default_instance_ = NULL;

EWTransmitting* EWTransmitting::New() const {
  return new EWTransmitting;
}

void EWTransmitting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
  }
  ewcap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWTransmitting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_TRANSMITTING"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ewcap;
        break;
      }

      // repeated .fv.tb.protos.TBProtos.EWCapability ewcap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ewcap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ewcap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ewcap;
        if (input->ExpectTag(26)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWTransmitting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_TRANSMITTING"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated .fv.tb.protos.TBProtos.EWCapability ewcap = 2;
  for (int i = 0; i < this->ewcap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ewcap(i), output);
  }

  // optional string sensorName = 3;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sensorname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWTransmitting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_TRANSMITTING"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated .fv.tb.protos.TBProtos.EWCapability ewcap = 2;
  for (int i = 0; i < this->ewcap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ewcap(i), target);
  }

  // optional string sensorName = 3;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sensorname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWTransmitting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_TRANSMITTING"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string sensorName = 3;
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

  }
  // repeated .fv.tb.protos.TBProtos.EWCapability ewcap = 2;
  total_size += 1 * this->ewcap_size();
  for (int i = 0; i < this->ewcap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ewcap(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWTransmitting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWTransmitting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWTransmitting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWTransmitting::MergeFrom(const EWTransmitting& from) {
  GOOGLE_CHECK_NE(&from, this);
  ewcap_.MergeFrom(from.ewcap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWTransmitting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWTransmitting::CopyFrom(const EWTransmitting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWTransmitting::IsInitialized() const {

  return true;
}

void EWTransmitting::Swap(EWTransmitting* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    ewcap_.Swap(&other->ewcap_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWTransmitting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWTransmitting_descriptor_;
  metadata.reflection = EWTransmitting_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EWTechniqueDescriptions::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWTechniqueDescriptions::kMsgNameFieldNumber;
const int EWTechniqueDescriptions::kTechniqueDescriptionFieldNumber;
#endif  // !_MSC_VER

EWTechniqueDescriptions::EWTechniqueDescriptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWTechniqueDescriptions::InitAsDefaultInstance() {
}

EWTechniqueDescriptions::EWTechniqueDescriptions(const EWTechniqueDescriptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWTechniqueDescriptions::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWTechniqueDescriptions::~EWTechniqueDescriptions() {
  SharedDtor();
}

void EWTechniqueDescriptions::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void EWTechniqueDescriptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWTechniqueDescriptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWTechniqueDescriptions_descriptor_;
}

const EWTechniqueDescriptions& EWTechniqueDescriptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWTechniqueDescriptions* EWTechniqueDescriptions::default_instance_ = NULL;

EWTechniqueDescriptions* EWTechniqueDescriptions::New() const {
  return new EWTechniqueDescriptions;
}

void EWTechniqueDescriptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  techniquedescription_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWTechniqueDescriptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EWTECHNIQUEDESCRIPTIONS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_techniqueDescription;
        break;
      }

      // repeated string techniqueDescription = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_techniqueDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_techniquedescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->techniquedescription(this->techniquedescription_size() - 1).data(),
            this->techniquedescription(this->techniquedescription_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_techniqueDescription;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWTechniqueDescriptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EWTECHNIQUEDESCRIPTIONS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated string techniqueDescription = 2;
  for (int i = 0; i < this->techniquedescription_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->techniquedescription(i).data(), this->techniquedescription(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->techniquedescription(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWTechniqueDescriptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EWTECHNIQUEDESCRIPTIONS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated string techniqueDescription = 2;
  for (int i = 0; i < this->techniquedescription_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->techniquedescription(i).data(), this->techniquedescription(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->techniquedescription(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWTechniqueDescriptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EWTECHNIQUEDESCRIPTIONS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  // repeated string techniqueDescription = 2;
  total_size += 1 * this->techniquedescription_size();
  for (int i = 0; i < this->techniquedescription_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->techniquedescription(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWTechniqueDescriptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWTechniqueDescriptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWTechniqueDescriptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWTechniqueDescriptions::MergeFrom(const EWTechniqueDescriptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  techniquedescription_.MergeFrom(from.techniquedescription_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWTechniqueDescriptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWTechniqueDescriptions::CopyFrom(const EWTechniqueDescriptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWTechniqueDescriptions::IsInitialized() const {

  return true;
}

void EWTechniqueDescriptions::Swap(EWTechniqueDescriptions* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    techniquedescription_.Swap(&other->techniquedescription_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWTechniqueDescriptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWTechniqueDescriptions_descriptor_;
  metadata.reflection = EWTechniqueDescriptions_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EWTechniqueDescriptionsRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWTechniqueDescriptionsRequest::kMsgNameFieldNumber;
#endif  // !_MSC_VER

EWTechniqueDescriptionsRequest::EWTechniqueDescriptionsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWTechniqueDescriptionsRequest::InitAsDefaultInstance() {
}

EWTechniqueDescriptionsRequest::EWTechniqueDescriptionsRequest(const EWTechniqueDescriptionsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWTechniqueDescriptionsRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWTechniqueDescriptionsRequest::~EWTechniqueDescriptionsRequest() {
  SharedDtor();
}

void EWTechniqueDescriptionsRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void EWTechniqueDescriptionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWTechniqueDescriptionsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWTechniqueDescriptionsRequest_descriptor_;
}

const EWTechniqueDescriptionsRequest& EWTechniqueDescriptionsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWTechniqueDescriptionsRequest* EWTechniqueDescriptionsRequest::default_instance_ = NULL;

EWTechniqueDescriptionsRequest* EWTechniqueDescriptionsRequest::New() const {
  return new EWTechniqueDescriptionsRequest;
}

void EWTechniqueDescriptionsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWTechniqueDescriptionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EWTECHNIQUEDESCRIPTIONSREQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWTechniqueDescriptionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EWTECHNIQUEDESCRIPTIONSREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWTechniqueDescriptionsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EWTECHNIQUEDESCRIPTIONSREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWTechniqueDescriptionsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EWTECHNIQUEDESCRIPTIONSREQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWTechniqueDescriptionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWTechniqueDescriptionsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWTechniqueDescriptionsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWTechniqueDescriptionsRequest::MergeFrom(const EWTechniqueDescriptionsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWTechniqueDescriptionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWTechniqueDescriptionsRequest::CopyFrom(const EWTechniqueDescriptionsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWTechniqueDescriptionsRequest::IsInitialized() const {

  return true;
}

void EWTechniqueDescriptionsRequest::Swap(EWTechniqueDescriptionsRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWTechniqueDescriptionsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWTechniqueDescriptionsRequest_descriptor_;
  metadata.reflection = EWTechniqueDescriptionsRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* EWOption_DetectionSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWOption_DetectionSource_descriptor_;
}
bool EWOption_DetectionSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EWOption_DetectionSource EWOption::EXTERNALS;
const EWOption_DetectionSource EWOption::INTERNALS;
const EWOption_DetectionSource EWOption::SIGUP;
const EWOption_DetectionSource EWOption::THUNDERBIRD;
const EWOption_DetectionSource EWOption::DetectionSource_MIN;
const EWOption_DetectionSource EWOption::DetectionSource_MAX;
const int EWOption::DetectionSource_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* EWOption::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWOption::kMsgNameFieldNumber;
const int EWOption::kSignalNameFieldNumber;
const int EWOption::kEffectFieldNumber;
const int EWOption::kDetectionSourceFieldNumber;
const int EWOption::kGlobalIdFieldNumber;
#endif  // !_MSC_VER

EWOption::EWOption()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWOption::InitAsDefaultInstance() {
}

EWOption::EWOption(const EWOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWOption::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  signalname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  detectionsource_ = 0;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWOption::~EWOption() {
  SharedDtor();
}

void EWOption::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (signalname_ != &::google::protobuf::internal::kEmptyString) {
    delete signalname_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void EWOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWOption_descriptor_;
}

const EWOption& EWOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWOption* EWOption::default_instance_ = NULL;

EWOption* EWOption::New() const {
  return new EWOption;
}

void EWOption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_signalname()) {
      if (signalname_ != &::google::protobuf::internal::kEmptyString) {
        signalname_->clear();
      }
    }
    detectionsource_ = 0;
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  effect_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_OPTION"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signalName;
        break;
      }

      // optional string signalName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signalName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signalname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signalname().data(), this->signalname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_effect;
        break;
      }

      // repeated string effect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_effect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effect(this->effect_size() - 1).data(),
            this->effect(this->effect_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_effect;
        if (input->ExpectTag(32)) goto parse_detectionSource;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWOption.DetectionSource detectionSource = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_detectionSource:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fv::tb::protos::TBProtos::EWOption_DetectionSource_IsValid(value)) {
            set_detectionsource(static_cast< ::fv::tb::protos::TBProtos::EWOption_DetectionSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_globalId;
        break;
      }

      // optional string globalId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_OPTION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string signalName = 2;
  if (has_signalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalname().data(), this->signalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->signalname(), output);
  }

  // repeated string effect = 3;
  for (int i = 0; i < this->effect_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->effect(i).data(), this->effect(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->effect(i), output);
  }

  // optional .fv.tb.protos.TBProtos.EWOption.DetectionSource detectionSource = 4;
  if (has_detectionsource()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->detectionsource(), output);
  }

  // optional string globalId = 5;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_OPTION"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string signalName = 2;
  if (has_signalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalname().data(), this->signalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signalname(), target);
  }

  // repeated string effect = 3;
  for (int i = 0; i < this->effect_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effect(i).data(), this->effect(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->effect(i), target);
  }

  // optional .fv.tb.protos.TBProtos.EWOption.DetectionSource detectionSource = 4;
  if (has_detectionsource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->detectionsource(), target);
  }

  // optional string globalId = 5;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_OPTION"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string signalName = 2;
    if (has_signalname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signalname());
    }

    // optional .fv.tb.protos.TBProtos.EWOption.DetectionSource detectionSource = 4;
    if (has_detectionsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->detectionsource());
    }

    // optional string globalId = 5;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  // repeated string effect = 3;
  total_size += 1 * this->effect_size();
  for (int i = 0; i < this->effect_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->effect(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWOption::MergeFrom(const EWOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  effect_.MergeFrom(from.effect_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_signalname()) {
      set_signalname(from.signalname());
    }
    if (from.has_detectionsource()) {
      set_detectionsource(from.detectionsource());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWOption::CopyFrom(const EWOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWOption::IsInitialized() const {

  return true;
}

void EWOption::Swap(EWOption* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(signalname_, other->signalname_);
    effect_.Swap(&other->effect_);
    std::swap(detectionsource_, other->detectionsource_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWOption_descriptor_;
  metadata.reflection = EWOption_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EWOptions::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWOptions::kMsgNameFieldNumber;
const int EWOptions::kEwoptFieldNumber;
#endif  // !_MSC_VER

EWOptions::EWOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWOptions::InitAsDefaultInstance() {
}

EWOptions::EWOptions(const EWOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWOptions::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWOptions::~EWOptions() {
  SharedDtor();
}

void EWOptions::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void EWOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWOptions_descriptor_;
}

const EWOptions& EWOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWOptions* EWOptions::default_instance_ = NULL;

EWOptions* EWOptions::New() const {
  return new EWOptions;
}

void EWOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ewopt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_OPTIONS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ewopt;
        break;
      }

      // repeated .fv.tb.protos.TBProtos.EWOption ewopt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ewopt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ewopt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ewopt;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_OPTIONS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated .fv.tb.protos.TBProtos.EWOption ewopt = 2;
  for (int i = 0; i < this->ewopt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ewopt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_OPTIONS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated .fv.tb.protos.TBProtos.EWOption ewopt = 2;
  for (int i = 0; i < this->ewopt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ewopt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_OPTIONS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  // repeated .fv.tb.protos.TBProtos.EWOption ewopt = 2;
  total_size += 1 * this->ewopt_size();
  for (int i = 0; i < this->ewopt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ewopt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWOptions::MergeFrom(const EWOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  ewopt_.MergeFrom(from.ewopt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWOptions::CopyFrom(const EWOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWOptions::IsInitialized() const {

  return true;
}

void EWOptions::Swap(EWOptions* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    ewopt_.Swap(&other->ewopt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWOptions_descriptor_;
  metadata.reflection = EWOptions_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EWOptionsRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWOptionsRequest::kMsgNameFieldNumber;
#endif  // !_MSC_VER

EWOptionsRequest::EWOptionsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWOptionsRequest::InitAsDefaultInstance() {
}

EWOptionsRequest::EWOptionsRequest(const EWOptionsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWOptionsRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWOptionsRequest::~EWOptionsRequest() {
  SharedDtor();
}

void EWOptionsRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void EWOptionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWOptionsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWOptionsRequest_descriptor_;
}

const EWOptionsRequest& EWOptionsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWOptionsRequest* EWOptionsRequest::default_instance_ = NULL;

EWOptionsRequest* EWOptionsRequest::New() const {
  return new EWOptionsRequest;
}

void EWOptionsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWOptionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_OPTIONS_REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWOptionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_OPTIONS_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWOptionsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_OPTIONS_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWOptionsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_OPTIONS_REQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWOptionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWOptionsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWOptionsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWOptionsRequest::MergeFrom(const EWOptionsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWOptionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWOptionsRequest::CopyFrom(const EWOptionsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWOptionsRequest::IsInitialized() const {

  return true;
}

void EWOptionsRequest::Swap(EWOptionsRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWOptionsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWOptionsRequest_descriptor_;
  metadata.reflection = EWOptionsRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EWStatusRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWStatusRequest::kMsgNameFieldNumber;
#endif  // !_MSC_VER

EWStatusRequest::EWStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWStatusRequest::InitAsDefaultInstance() {
}

EWStatusRequest::EWStatusRequest(const EWStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWStatusRequest::~EWStatusRequest() {
  SharedDtor();
}

void EWStatusRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void EWStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWStatusRequest_descriptor_;
}

const EWStatusRequest& EWStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWStatusRequest* EWStatusRequest::default_instance_ = NULL;

EWStatusRequest* EWStatusRequest::New() const {
  return new EWStatusRequest;
}

void EWStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_STATUS_REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_STATUS_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_STATUS_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWStatusRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_STATUS_REQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWStatusRequest::MergeFrom(const EWStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWStatusRequest::CopyFrom(const EWStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWStatusRequest::IsInitialized() const {

  return true;
}

void EWStatusRequest::Swap(EWStatusRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWStatusRequest_descriptor_;
  metadata.reflection = EWStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EWCapabilitiesRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWCapabilitiesRequest::kMsgNameFieldNumber;
#endif  // !_MSC_VER

EWCapabilitiesRequest::EWCapabilitiesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWCapabilitiesRequest::InitAsDefaultInstance() {
}

EWCapabilitiesRequest::EWCapabilitiesRequest(const EWCapabilitiesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWCapabilitiesRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWCapabilitiesRequest::~EWCapabilitiesRequest() {
  SharedDtor();
}

void EWCapabilitiesRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void EWCapabilitiesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWCapabilitiesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWCapabilitiesRequest_descriptor_;
}

const EWCapabilitiesRequest& EWCapabilitiesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWCapabilitiesRequest* EWCapabilitiesRequest::default_instance_ = NULL;

EWCapabilitiesRequest* EWCapabilitiesRequest::New() const {
  return new EWCapabilitiesRequest;
}

void EWCapabilitiesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWCapabilitiesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_CAPABILITIES_REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWCapabilitiesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_CAPABILITIES_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWCapabilitiesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_CAPABILITIES_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWCapabilitiesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_CAPABILITIES_REQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWCapabilitiesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWCapabilitiesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWCapabilitiesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWCapabilitiesRequest::MergeFrom(const EWCapabilitiesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWCapabilitiesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWCapabilitiesRequest::CopyFrom(const EWCapabilitiesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWCapabilitiesRequest::IsInitialized() const {

  return true;
}

void EWCapabilitiesRequest::Swap(EWCapabilitiesRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWCapabilitiesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWCapabilitiesRequest_descriptor_;
  metadata.reflection = EWCapabilitiesRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EWOptionDelete::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWOptionDelete::kMsgNameFieldNumber;
const int EWOptionDelete::kGlobalIdFieldNumber;
#endif  // !_MSC_VER

EWOptionDelete::EWOptionDelete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWOptionDelete::InitAsDefaultInstance() {
}

EWOptionDelete::EWOptionDelete(const EWOptionDelete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWOptionDelete::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWOptionDelete::~EWOptionDelete() {
  SharedDtor();
}

void EWOptionDelete::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void EWOptionDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWOptionDelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWOptionDelete_descriptor_;
}

const EWOptionDelete& EWOptionDelete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWOptionDelete* EWOptionDelete::default_instance_ = NULL;

EWOptionDelete* EWOptionDelete::New() const {
  return new EWOptionDelete;
}

void EWOptionDelete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWOptionDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_OPTION_DELETE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_globalId;
        break;
      }

      // optional string globalId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWOptionDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_OPTION_DELETE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string globalId = 2;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWOptionDelete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_OPTION_DELETE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string globalId = 2;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWOptionDelete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_OPTION_DELETE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string globalId = 2;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWOptionDelete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWOptionDelete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWOptionDelete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWOptionDelete::MergeFrom(const EWOptionDelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWOptionDelete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWOptionDelete::CopyFrom(const EWOptionDelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWOptionDelete::IsInitialized() const {

  return true;
}

void EWOptionDelete::Swap(EWOptionDelete* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWOptionDelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWOptionDelete_descriptor_;
  metadata.reflection = EWOptionDelete_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EWCeaseBuzzer::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWCeaseBuzzer::kMsgNameFieldNumber;
#endif  // !_MSC_VER

EWCeaseBuzzer::EWCeaseBuzzer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWCeaseBuzzer::InitAsDefaultInstance() {
}

EWCeaseBuzzer::EWCeaseBuzzer(const EWCeaseBuzzer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWCeaseBuzzer::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWCeaseBuzzer::~EWCeaseBuzzer() {
  SharedDtor();
}

void EWCeaseBuzzer::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void EWCeaseBuzzer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWCeaseBuzzer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWCeaseBuzzer_descriptor_;
}

const EWCeaseBuzzer& EWCeaseBuzzer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWCeaseBuzzer* EWCeaseBuzzer::default_instance_ = NULL;

EWCeaseBuzzer* EWCeaseBuzzer::New() const {
  return new EWCeaseBuzzer;
}

void EWCeaseBuzzer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWCeaseBuzzer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_CEASE_BUZZER"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWCeaseBuzzer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_CEASE_BUZZER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWCeaseBuzzer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_CEASE_BUZZER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWCeaseBuzzer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_CEASE_BUZZER"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWCeaseBuzzer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWCeaseBuzzer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWCeaseBuzzer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWCeaseBuzzer::MergeFrom(const EWCeaseBuzzer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWCeaseBuzzer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWCeaseBuzzer::CopyFrom(const EWCeaseBuzzer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWCeaseBuzzer::IsInitialized() const {

  return true;
}

void EWCeaseBuzzer::Swap(EWCeaseBuzzer* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWCeaseBuzzer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWCeaseBuzzer_descriptor_;
  metadata.reflection = EWCeaseBuzzer_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TxAntennaConfig::_default_msgname_ = NULL;
::std::string* TxAntennaConfig::_default_noisetest_ = NULL;
#ifndef _MSC_VER
const int TxAntennaConfig::kMsgNameFieldNumber;
const int TxAntennaConfig::kAntNameFieldNumber;
const int TxAntennaConfig::kMinRFFieldNumber;
const int TxAntennaConfig::kMaxRFFieldNumber;
const int TxAntennaConfig::kFixedAngleFieldNumber;
const int TxAntennaConfig::kLatitudeFieldNumber;
const int TxAntennaConfig::kLongitudeFieldNumber;
const int TxAntennaConfig::kAltitudeFieldNumber;
const int TxAntennaConfig::kBeamwidthFieldNumber;
const int TxAntennaConfig::kDwncnvtLOFieldNumber;
const int TxAntennaConfig::kSscFieldNumber;
const int TxAntennaConfig::kBandFieldNumber;
const int TxAntennaConfig::kPolarizationFieldNumber;
const int TxAntennaConfig::kGroupFieldNumber;
const int TxAntennaConfig::kSightDistanceFieldNumber;
const int TxAntennaConfig::kNoiseTestFieldNumber;
#endif  // !_MSC_VER

TxAntennaConfig::TxAntennaConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxAntennaConfig::InitAsDefaultInstance() {
}

TxAntennaConfig::TxAntennaConfig(const TxAntennaConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxAntennaConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  antname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minrf_ = 0;
  maxrf_ = 0;
  fixedangle_ = -999;
  latitude_ = 0;
  longitude_ = 0;
  altitude_ = 0;
  beamwidth_ = 0;
  dwncnvtlo_ = 0;
  ssc_ = -1;
  band_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  polarization_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_ = 0;
  sightdistance_ = 500;
  noisetest_ = const_cast< ::std::string*>(_default_noisetest_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxAntennaConfig::~TxAntennaConfig() {
  SharedDtor();
}

void TxAntennaConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (antname_ != &::google::protobuf::internal::kEmptyString) {
    delete antname_;
  }
  if (band_ != &::google::protobuf::internal::kEmptyString) {
    delete band_;
  }
  if (polarization_ != &::google::protobuf::internal::kEmptyString) {
    delete polarization_;
  }
  if (noisetest_ != _default_noisetest_) {
    delete noisetest_;
  }
  if (this != default_instance_) {
  }
}

void TxAntennaConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxAntennaConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxAntennaConfig_descriptor_;
}

const TxAntennaConfig& TxAntennaConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

TxAntennaConfig* TxAntennaConfig::default_instance_ = NULL;

TxAntennaConfig* TxAntennaConfig::New() const {
  return new TxAntennaConfig;
}

void TxAntennaConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_antname()) {
      if (antname_ != &::google::protobuf::internal::kEmptyString) {
        antname_->clear();
      }
    }
    minrf_ = 0;
    maxrf_ = 0;
    fixedangle_ = -999;
    latitude_ = 0;
    longitude_ = 0;
    altitude_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    beamwidth_ = 0;
    dwncnvtlo_ = 0;
    ssc_ = -1;
    if (has_band()) {
      if (band_ != &::google::protobuf::internal::kEmptyString) {
        band_->clear();
      }
    }
    if (has_polarization()) {
      if (polarization_ != &::google::protobuf::internal::kEmptyString) {
        polarization_->clear();
      }
    }
    group_ = 0;
    sightdistance_ = 500;
    if (has_noisetest()) {
      if (noisetest_ != _default_noisetest_) {
        noisetest_->assign(*_default_noisetest_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxAntennaConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TX_ANTENNA_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_antName;
        break;
      }

      // optional string antName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_antName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_antname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->antname().data(), this->antname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_minRF;
        break;
      }

      // optional double minRF = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minrf_)));
          set_has_minrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_maxRF;
        break;
      }

      // optional double maxRF = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxrf_)));
          set_has_maxrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_fixedAngle;
        break;
      }

      // optional float fixedAngle = 5 [default = -999];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fixedAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fixedangle_)));
          set_has_fixedangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_latitude;
        break;
      }

      // optional float latitude = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_longitude;
        break;
      }

      // optional float longitude = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_altitude;
        break;
      }

      // optional float altitude = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_beamwidth;
        break;
      }

      // optional float beamwidth = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_beamwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beamwidth_)));
          set_has_beamwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_dwncnvtLO;
        break;
      }

      // optional float dwncnvtLO = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dwncnvtLO:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dwncnvtlo_)));
          set_has_dwncnvtlo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ssc;
        break;
      }

      // optional int32 ssc = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ssc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssc_)));
          set_has_ssc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_band;
        break;
      }

      // optional string band = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_band:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_band()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->band().data(), this->band().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_polarization;
        break;
      }

      // optional string polarization = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polarization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_polarization()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->polarization().data(), this->polarization().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_group;
        break;
      }

      // optional int32 group = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_sightDistance;
        break;
      }

      // optional float sightDistance = 15 [default = 500];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sightDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sightdistance_)));
          set_has_sightdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_noiseTest;
        break;
      }

      // optional string noiseTest = 16 [default = "NO_TEST"];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_noiseTest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_noisetest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->noisetest().data(), this->noisetest().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxAntennaConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TX_ANTENNA_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string antName = 2;
  if (has_antname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->antname().data(), this->antname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->antname(), output);
  }

  // optional double minRF = 3;
  if (has_minrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->minrf(), output);
  }

  // optional double maxRF = 4;
  if (has_maxrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->maxrf(), output);
  }

  // optional float fixedAngle = 5 [default = -999];
  if (has_fixedangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fixedangle(), output);
  }

  // optional float latitude = 6 [default = 0];
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->latitude(), output);
  }

  // optional float longitude = 7 [default = 0];
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->longitude(), output);
  }

  // optional float altitude = 8 [default = 0];
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->altitude(), output);
  }

  // optional float beamwidth = 9 [default = 0];
  if (has_beamwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->beamwidth(), output);
  }

  // optional float dwncnvtLO = 10 [default = 0];
  if (has_dwncnvtlo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->dwncnvtlo(), output);
  }

  // optional int32 ssc = 11 [default = -1];
  if (has_ssc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ssc(), output);
  }

  // optional string band = 12;
  if (has_band()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->band().data(), this->band().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->band(), output);
  }

  // optional string polarization = 13;
  if (has_polarization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->polarization().data(), this->polarization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->polarization(), output);
  }

  // optional int32 group = 14;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->group(), output);
  }

  // optional float sightDistance = 15 [default = 500];
  if (has_sightdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->sightdistance(), output);
  }

  // optional string noiseTest = 16 [default = "NO_TEST"];
  if (has_noisetest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->noisetest().data(), this->noisetest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->noisetest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxAntennaConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TX_ANTENNA_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string antName = 2;
  if (has_antname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->antname().data(), this->antname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->antname(), target);
  }

  // optional double minRF = 3;
  if (has_minrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->minrf(), target);
  }

  // optional double maxRF = 4;
  if (has_maxrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->maxrf(), target);
  }

  // optional float fixedAngle = 5 [default = -999];
  if (has_fixedangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->fixedangle(), target);
  }

  // optional float latitude = 6 [default = 0];
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->latitude(), target);
  }

  // optional float longitude = 7 [default = 0];
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->longitude(), target);
  }

  // optional float altitude = 8 [default = 0];
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->altitude(), target);
  }

  // optional float beamwidth = 9 [default = 0];
  if (has_beamwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->beamwidth(), target);
  }

  // optional float dwncnvtLO = 10 [default = 0];
  if (has_dwncnvtlo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->dwncnvtlo(), target);
  }

  // optional int32 ssc = 11 [default = -1];
  if (has_ssc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ssc(), target);
  }

  // optional string band = 12;
  if (has_band()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->band().data(), this->band().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->band(), target);
  }

  // optional string polarization = 13;
  if (has_polarization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->polarization().data(), this->polarization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->polarization(), target);
  }

  // optional int32 group = 14;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->group(), target);
  }

  // optional float sightDistance = 15 [default = 500];
  if (has_sightdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->sightdistance(), target);
  }

  // optional string noiseTest = 16 [default = "NO_TEST"];
  if (has_noisetest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->noisetest().data(), this->noisetest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->noisetest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxAntennaConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TX_ANTENNA_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string antName = 2;
    if (has_antname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->antname());
    }

    // optional double minRF = 3;
    if (has_minrf()) {
      total_size += 1 + 8;
    }

    // optional double maxRF = 4;
    if (has_maxrf()) {
      total_size += 1 + 8;
    }

    // optional float fixedAngle = 5 [default = -999];
    if (has_fixedangle()) {
      total_size += 1 + 4;
    }

    // optional float latitude = 6 [default = 0];
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 7 [default = 0];
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional float altitude = 8 [default = 0];
    if (has_altitude()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float beamwidth = 9 [default = 0];
    if (has_beamwidth()) {
      total_size += 1 + 4;
    }

    // optional float dwncnvtLO = 10 [default = 0];
    if (has_dwncnvtlo()) {
      total_size += 1 + 4;
    }

    // optional int32 ssc = 11 [default = -1];
    if (has_ssc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssc());
    }

    // optional string band = 12;
    if (has_band()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->band());
    }

    // optional string polarization = 13;
    if (has_polarization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->polarization());
    }

    // optional int32 group = 14;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional float sightDistance = 15 [default = 500];
    if (has_sightdistance()) {
      total_size += 1 + 4;
    }

    // optional string noiseTest = 16 [default = "NO_TEST"];
    if (has_noisetest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->noisetest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxAntennaConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxAntennaConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxAntennaConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxAntennaConfig::MergeFrom(const TxAntennaConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_antname()) {
      set_antname(from.antname());
    }
    if (from.has_minrf()) {
      set_minrf(from.minrf());
    }
    if (from.has_maxrf()) {
      set_maxrf(from.maxrf());
    }
    if (from.has_fixedangle()) {
      set_fixedangle(from.fixedangle());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_beamwidth()) {
      set_beamwidth(from.beamwidth());
    }
    if (from.has_dwncnvtlo()) {
      set_dwncnvtlo(from.dwncnvtlo());
    }
    if (from.has_ssc()) {
      set_ssc(from.ssc());
    }
    if (from.has_band()) {
      set_band(from.band());
    }
    if (from.has_polarization()) {
      set_polarization(from.polarization());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_sightdistance()) {
      set_sightdistance(from.sightdistance());
    }
    if (from.has_noisetest()) {
      set_noisetest(from.noisetest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxAntennaConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxAntennaConfig::CopyFrom(const TxAntennaConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxAntennaConfig::IsInitialized() const {

  return true;
}

void TxAntennaConfig::Swap(TxAntennaConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(antname_, other->antname_);
    std::swap(minrf_, other->minrf_);
    std::swap(maxrf_, other->maxrf_);
    std::swap(fixedangle_, other->fixedangle_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(altitude_, other->altitude_);
    std::swap(beamwidth_, other->beamwidth_);
    std::swap(dwncnvtlo_, other->dwncnvtlo_);
    std::swap(ssc_, other->ssc_);
    std::swap(band_, other->band_);
    std::swap(polarization_, other->polarization_);
    std::swap(group_, other->group_);
    std::swap(sightdistance_, other->sightdistance_);
    std::swap(noisetest_, other->noisetest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxAntennaConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxAntennaConfig_descriptor_;
  metadata.reflection = TxAntennaConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TxAmpConfig::_default_msgname_ = NULL;
::std::string* TxAmpConfig::_default_ip_ = NULL;
#ifndef _MSC_VER
const int TxAmpConfig::kMsgNameFieldNumber;
const int TxAmpConfig::kAmpNameFieldNumber;
const int TxAmpConfig::kIPFieldNumber;
const int TxAmpConfig::kPortFieldNumber;
const int TxAmpConfig::kHardwareFieldNumber;
#endif  // !_MSC_VER

TxAmpConfig::TxAmpConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxAmpConfig::InitAsDefaultInstance() {
}

TxAmpConfig::TxAmpConfig(const TxAmpConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxAmpConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ampname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(_default_ip_);
  port_ = 4012;
  hardware_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxAmpConfig::~TxAmpConfig() {
  SharedDtor();
}

void TxAmpConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (ampname_ != &::google::protobuf::internal::kEmptyString) {
    delete ampname_;
  }
  if (ip_ != _default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void TxAmpConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxAmpConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxAmpConfig_descriptor_;
}

const TxAmpConfig& TxAmpConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

TxAmpConfig* TxAmpConfig::default_instance_ = NULL;

TxAmpConfig* TxAmpConfig::New() const {
  return new TxAmpConfig;
}

void TxAmpConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_ampname()) {
      if (ampname_ != &::google::protobuf::internal::kEmptyString) {
        ampname_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != _default_ip_) {
        ip_->assign(*_default_ip_);
      }
    }
    port_ = 4012;
    hardware_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxAmpConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TX_AMP_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ampName;
        break;
      }

      // optional string ampName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ampName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ampname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ampname().data(), this->ampname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_IP;
        break;
      }

      // optional string IP = 3 [default = "nportserver"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4 [default = 4012];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hardware;
        break;
      }

      // optional bool hardware = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hardware:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hardware_)));
          set_has_hardware();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxAmpConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TX_AMP_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string ampName = 2;
  if (has_ampname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ampname().data(), this->ampname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ampname(), output);
  }

  // optional string IP = 3 [default = "nportserver"];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional int32 port = 4 [default = 4012];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // optional bool hardware = 5;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hardware(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxAmpConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TX_AMP_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string ampName = 2;
  if (has_ampname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ampname().data(), this->ampname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ampname(), target);
  }

  // optional string IP = 3 [default = "nportserver"];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional int32 port = 4 [default = 4012];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // optional bool hardware = 5;
  if (has_hardware()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hardware(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxAmpConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TX_AMP_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string ampName = 2;
    if (has_ampname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ampname());
    }

    // optional string IP = 3 [default = "nportserver"];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 4 [default = 4012];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional bool hardware = 5;
    if (has_hardware()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxAmpConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxAmpConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxAmpConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxAmpConfig::MergeFrom(const TxAmpConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_ampname()) {
      set_ampname(from.ampname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_hardware()) {
      set_hardware(from.hardware());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxAmpConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxAmpConfig::CopyFrom(const TxAmpConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxAmpConfig::IsInitialized() const {

  return true;
}

void TxAmpConfig::Swap(TxAmpConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(ampname_, other->ampname_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(hardware_, other->hardware_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxAmpConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxAmpConfig_descriptor_;
  metadata.reflection = TxAmpConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TransmitterConfig_SiggenType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransmitterConfig_SiggenType_descriptor_;
}
bool TransmitterConfig_SiggenType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TransmitterConfig_SiggenType TransmitterConfig::ROHDE_SCHWARZ;
const TransmitterConfig_SiggenType TransmitterConfig::MMS_MUP;
const TransmitterConfig_SiggenType TransmitterConfig::SiggenType_MIN;
const TransmitterConfig_SiggenType TransmitterConfig::SiggenType_MAX;
const int TransmitterConfig::SiggenType_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* TransmitterConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int TransmitterConfig::kMsgNameFieldNumber;
const int TransmitterConfig::kTxNameFieldNumber;
const int TransmitterConfig::kClkFreqFieldNumber;
const int TransmitterConfig::kDacInterpFieldNumber;
const int TransmitterConfig::kCoreInterpFieldNumber;
const int TransmitterConfig::kBaseChanFieldNumber;
const int TransmitterConfig::kNumBuffersFieldNumber;
const int TransmitterConfig::kFreqShiftFieldNumber;
const int TransmitterConfig::kSiggenIPFieldNumber;
const int TransmitterConfig::kSiggenTypeFieldNumber;
#endif  // !_MSC_VER

TransmitterConfig::TransmitterConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransmitterConfig::InitAsDefaultInstance() {
}

TransmitterConfig::TransmitterConfig(const TransmitterConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransmitterConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  txname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clkfreq_ = 4e+08f;
  dacinterp_ = 16;
  coreinterp_ = 1;
  basechan_ = 1;
  numbuffers_ = 2;
  freqshift_ = 0;
  siggenip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  siggentype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransmitterConfig::~TransmitterConfig() {
  SharedDtor();
}

void TransmitterConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (txname_ != &::google::protobuf::internal::kEmptyString) {
    delete txname_;
  }
  if (siggenip_ != &::google::protobuf::internal::kEmptyString) {
    delete siggenip_;
  }
  if (this != default_instance_) {
  }
}

void TransmitterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransmitterConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransmitterConfig_descriptor_;
}

const TransmitterConfig& TransmitterConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

TransmitterConfig* TransmitterConfig::default_instance_ = NULL;

TransmitterConfig* TransmitterConfig::New() const {
  return new TransmitterConfig;
}

void TransmitterConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_txname()) {
      if (txname_ != &::google::protobuf::internal::kEmptyString) {
        txname_->clear();
      }
    }
    clkfreq_ = 4e+08f;
    dacinterp_ = 16;
    coreinterp_ = 1;
    basechan_ = 1;
    numbuffers_ = 2;
    freqshift_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_siggenip()) {
      if (siggenip_ != &::google::protobuf::internal::kEmptyString) {
        siggenip_->clear();
      }
    }
    siggentype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransmitterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TRANSMITTER_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_txName;
        break;
      }

      // optional string txName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_txName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->txname().data(), this->txname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_clkFreq;
        break;
      }

      // optional float clkFreq = 3 [default = 4e+08];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_clkFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clkfreq_)));
          set_has_clkfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dacInterp;
        break;
      }

      // optional int32 dacInterp = 4 [default = 16];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dacInterp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dacinterp_)));
          set_has_dacinterp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_coreInterp;
        break;
      }

      // optional int32 coreInterp = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coreInterp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coreinterp_)));
          set_has_coreinterp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_baseChan;
        break;
      }

      // optional int32 baseChan = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseChan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basechan_)));
          set_has_basechan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_numBuffers;
        break;
      }

      // optional int32 numBuffers = 7 [default = 2];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numBuffers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numbuffers_)));
          set_has_numbuffers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_freqShift;
        break;
      }

      // optional float freqShift = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freqShift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freqshift_)));
          set_has_freqshift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_siggenIP;
        break;
      }

      // optional string siggenIP = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_siggenIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_siggenip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->siggenip().data(), this->siggenip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_siggenType;
        break;
      }

      // optional .fv.tb.protos.TBProtos.TransmitterConfig.SiggenType siggenType = 10 [default = ROHDE_SCHWARZ];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_siggenType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fv::tb::protos::TBProtos::TransmitterConfig_SiggenType_IsValid(value)) {
            set_siggentype(static_cast< ::fv::tb::protos::TBProtos::TransmitterConfig_SiggenType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransmitterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TRANSMITTER_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string txName = 2;
  if (has_txname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->txname().data(), this->txname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->txname(), output);
  }

  // optional float clkFreq = 3 [default = 4e+08];
  if (has_clkfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->clkfreq(), output);
  }

  // optional int32 dacInterp = 4 [default = 16];
  if (has_dacinterp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dacinterp(), output);
  }

  // optional int32 coreInterp = 5 [default = 1];
  if (has_coreinterp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->coreinterp(), output);
  }

  // optional int32 baseChan = 6 [default = 1];
  if (has_basechan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->basechan(), output);
  }

  // optional int32 numBuffers = 7 [default = 2];
  if (has_numbuffers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->numbuffers(), output);
  }

  // optional float freqShift = 8 [default = 0];
  if (has_freqshift()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->freqshift(), output);
  }

  // optional string siggenIP = 9;
  if (has_siggenip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siggenip().data(), this->siggenip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->siggenip(), output);
  }

  // optional .fv.tb.protos.TBProtos.TransmitterConfig.SiggenType siggenType = 10 [default = ROHDE_SCHWARZ];
  if (has_siggentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->siggentype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransmitterConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TRANSMITTER_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string txName = 2;
  if (has_txname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->txname().data(), this->txname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->txname(), target);
  }

  // optional float clkFreq = 3 [default = 4e+08];
  if (has_clkfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->clkfreq(), target);
  }

  // optional int32 dacInterp = 4 [default = 16];
  if (has_dacinterp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dacinterp(), target);
  }

  // optional int32 coreInterp = 5 [default = 1];
  if (has_coreinterp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->coreinterp(), target);
  }

  // optional int32 baseChan = 6 [default = 1];
  if (has_basechan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->basechan(), target);
  }

  // optional int32 numBuffers = 7 [default = 2];
  if (has_numbuffers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->numbuffers(), target);
  }

  // optional float freqShift = 8 [default = 0];
  if (has_freqshift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->freqshift(), target);
  }

  // optional string siggenIP = 9;
  if (has_siggenip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siggenip().data(), this->siggenip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->siggenip(), target);
  }

  // optional .fv.tb.protos.TBProtos.TransmitterConfig.SiggenType siggenType = 10 [default = ROHDE_SCHWARZ];
  if (has_siggentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->siggentype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransmitterConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TRANSMITTER_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string txName = 2;
    if (has_txname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->txname());
    }

    // optional float clkFreq = 3 [default = 4e+08];
    if (has_clkfreq()) {
      total_size += 1 + 4;
    }

    // optional int32 dacInterp = 4 [default = 16];
    if (has_dacinterp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dacinterp());
    }

    // optional int32 coreInterp = 5 [default = 1];
    if (has_coreinterp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coreinterp());
    }

    // optional int32 baseChan = 6 [default = 1];
    if (has_basechan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basechan());
    }

    // optional int32 numBuffers = 7 [default = 2];
    if (has_numbuffers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numbuffers());
    }

    // optional float freqShift = 8 [default = 0];
    if (has_freqshift()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string siggenIP = 9;
    if (has_siggenip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->siggenip());
    }

    // optional .fv.tb.protos.TBProtos.TransmitterConfig.SiggenType siggenType = 10 [default = ROHDE_SCHWARZ];
    if (has_siggentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->siggentype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransmitterConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransmitterConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransmitterConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransmitterConfig::MergeFrom(const TransmitterConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_txname()) {
      set_txname(from.txname());
    }
    if (from.has_clkfreq()) {
      set_clkfreq(from.clkfreq());
    }
    if (from.has_dacinterp()) {
      set_dacinterp(from.dacinterp());
    }
    if (from.has_coreinterp()) {
      set_coreinterp(from.coreinterp());
    }
    if (from.has_basechan()) {
      set_basechan(from.basechan());
    }
    if (from.has_numbuffers()) {
      set_numbuffers(from.numbuffers());
    }
    if (from.has_freqshift()) {
      set_freqshift(from.freqshift());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_siggenip()) {
      set_siggenip(from.siggenip());
    }
    if (from.has_siggentype()) {
      set_siggentype(from.siggentype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransmitterConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransmitterConfig::CopyFrom(const TransmitterConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmitterConfig::IsInitialized() const {

  return true;
}

void TransmitterConfig::Swap(TransmitterConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(txname_, other->txname_);
    std::swap(clkfreq_, other->clkfreq_);
    std::swap(dacinterp_, other->dacinterp_);
    std::swap(coreinterp_, other->coreinterp_);
    std::swap(basechan_, other->basechan_);
    std::swap(numbuffers_, other->numbuffers_);
    std::swap(freqshift_, other->freqshift_);
    std::swap(siggenip_, other->siggenip_);
    std::swap(siggentype_, other->siggentype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransmitterConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransmitterConfig_descriptor_;
  metadata.reflection = TransmitterConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* techniqueCommand_CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return techniqueCommand_CommandType_descriptor_;
}
bool techniqueCommand_CommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const techniqueCommand_CommandType techniqueCommand::TURNOFF;
const techniqueCommand_CommandType techniqueCommand::TURNON;
const techniqueCommand_CommandType techniqueCommand::UPDATE;
const techniqueCommand_CommandType techniqueCommand::RESET;
const techniqueCommand_CommandType techniqueCommand::CommandType_MIN;
const techniqueCommand_CommandType techniqueCommand::CommandType_MAX;
const int techniqueCommand::CommandType_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* techniqueCommand::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int techniqueCommand::kMsgNameFieldNumber;
const int techniqueCommand::kCommandFieldNumber;
const int techniqueCommand::kEwcapFieldNumber;
#endif  // !_MSC_VER

techniqueCommand::techniqueCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void techniqueCommand::InitAsDefaultInstance() {
  ewcap_ = const_cast< ::fv::tb::protos::TBProtos::EWCapability*>(&::fv::tb::protos::TBProtos::EWCapability::default_instance());
}

techniqueCommand::techniqueCommand(const techniqueCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void techniqueCommand::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  command_ = 0;
  ewcap_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

techniqueCommand::~techniqueCommand() {
  SharedDtor();
}

void techniqueCommand::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete ewcap_;
  }
}

void techniqueCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* techniqueCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return techniqueCommand_descriptor_;
}

const techniqueCommand& techniqueCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

techniqueCommand* techniqueCommand::default_instance_ = NULL;

techniqueCommand* techniqueCommand::New() const {
  return new techniqueCommand;
}

void techniqueCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    command_ = 0;
    if (has_ewcap()) {
      if (ewcap_ != NULL) ewcap_->::fv::tb::protos::TBProtos::EWCapability::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool techniqueCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TECHNIQUECOMMAND"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_command;
        break;
      }

      // optional .fv.tb.protos.TBProtos.techniqueCommand.CommandType command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fv::tb::protos::TBProtos::techniqueCommand_CommandType_IsValid(value)) {
            set_command(static_cast< ::fv::tb::protos::TBProtos::techniqueCommand_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ewcap;
        break;
      }

      // optional .fv.tb.protos.TBProtos.EWCapability ewcap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ewcap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ewcap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void techniqueCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TECHNIQUECOMMAND"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .fv.tb.protos.TBProtos.techniqueCommand.CommandType command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->command(), output);
  }

  // optional .fv.tb.protos.TBProtos.EWCapability ewcap = 3;
  if (has_ewcap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ewcap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* techniqueCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TECHNIQUECOMMAND"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .fv.tb.protos.TBProtos.techniqueCommand.CommandType command = 2;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->command(), target);
  }

  // optional .fv.tb.protos.TBProtos.EWCapability ewcap = 3;
  if (has_ewcap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ewcap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int techniqueCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TECHNIQUECOMMAND"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .fv.tb.protos.TBProtos.techniqueCommand.CommandType command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // optional .fv.tb.protos.TBProtos.EWCapability ewcap = 3;
    if (has_ewcap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ewcap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void techniqueCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const techniqueCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const techniqueCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void techniqueCommand::MergeFrom(const techniqueCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_ewcap()) {
      mutable_ewcap()->::fv::tb::protos::TBProtos::EWCapability::MergeFrom(from.ewcap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void techniqueCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void techniqueCommand::CopyFrom(const techniqueCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool techniqueCommand::IsInitialized() const {

  return true;
}

void techniqueCommand::Swap(techniqueCommand* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(command_, other->command_);
    std::swap(ewcap_, other->ewcap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata techniqueCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = techniqueCommand_descriptor_;
  metadata.reflection = techniqueCommand_reflection_;
  return metadata;
}


// ===================================================================

::std::string* newSignalFrame::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int newSignalFrame::kMsgNameFieldNumber;
const int newSignalFrame::kRadioNameFieldNumber;
const int newSignalFrame::kFrameIDFieldNumber;
#endif  // !_MSC_VER

newSignalFrame::newSignalFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void newSignalFrame::InitAsDefaultInstance() {
}

newSignalFrame::newSignalFrame(const newSignalFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void newSignalFrame::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  radioname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

newSignalFrame::~newSignalFrame() {
  SharedDtor();
}

void newSignalFrame::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (radioname_ != &::google::protobuf::internal::kEmptyString) {
    delete radioname_;
  }
  if (this != default_instance_) {
  }
}

void newSignalFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* newSignalFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return newSignalFrame_descriptor_;
}

const newSignalFrame& newSignalFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

newSignalFrame* newSignalFrame::default_instance_ = NULL;

newSignalFrame* newSignalFrame::New() const {
  return new newSignalFrame;
}

void newSignalFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_radioname()) {
      if (radioname_ != &::google::protobuf::internal::kEmptyString) {
        radioname_->clear();
      }
    }
    frameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool newSignalFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "NEWSIGNALFRAME"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_radioName;
        break;
      }

      // optional string radioName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_radioName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radioname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->radioname().data(), this->radioname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_frameID;
        break;
      }

      // optional int32 frameID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void newSignalFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "NEWSIGNALFRAME"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string radioName = 2;
  if (has_radioname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->radioname().data(), this->radioname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->radioname(), output);
  }

  // optional int32 frameID = 3;
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* newSignalFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "NEWSIGNALFRAME"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string radioName = 2;
  if (has_radioname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->radioname().data(), this->radioname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->radioname(), target);
  }

  // optional int32 frameID = 3;
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int newSignalFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "NEWSIGNALFRAME"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string radioName = 2;
    if (has_radioname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radioname());
    }

    // optional int32 frameID = 3;
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void newSignalFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const newSignalFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const newSignalFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void newSignalFrame::MergeFrom(const newSignalFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_radioname()) {
      set_radioname(from.radioname());
    }
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void newSignalFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void newSignalFrame::CopyFrom(const newSignalFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool newSignalFrame::IsInitialized() const {

  return true;
}

void newSignalFrame::Swap(newSignalFrame* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(radioname_, other->radioname_);
    std::swap(frameid_, other->frameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata newSignalFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = newSignalFrame_descriptor_;
  metadata.reflection = newSignalFrame_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RegisterQuery::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RegisterQuery::kMsgNameFieldNumber;
const int RegisterQuery::kSensorNameFieldNumber;
#endif  // !_MSC_VER

RegisterQuery::RegisterQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterQuery::InitAsDefaultInstance() {
}

RegisterQuery::RegisterQuery(const RegisterQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterQuery::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterQuery::~RegisterQuery() {
  SharedDtor();
}

void RegisterQuery::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (this != default_instance_) {
  }
}

void RegisterQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterQuery_descriptor_;
}

const RegisterQuery& RegisterQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

RegisterQuery* RegisterQuery::default_instance_ = NULL;

RegisterQuery* RegisterQuery::New() const {
  return new RegisterQuery;
}

void RegisterQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "REGISTERQUERY"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "REGISTERQUERY"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string sensorName = 2;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sensorname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "REGISTERQUERY"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string sensorName = 2;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sensorname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "REGISTERQUERY"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string sensorName = 2;
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterQuery::MergeFrom(const RegisterQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterQuery::CopyFrom(const RegisterQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterQuery::IsInitialized() const {

  return true;
}

void RegisterQuery::Swap(RegisterQuery* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterQuery_descriptor_;
  metadata.reflection = RegisterQuery_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RegisterRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RegisterRequest::kMsgNameFieldNumber;
const int RegisterRequest::kPlatformNameFieldNumber;
const int RegisterRequest::kTechniqueNameFieldNumber;
const int RegisterRequest::kTbUniqueIDFieldNumber;
const int RegisterRequest::kDataPipeNameFieldNumber;
const int RegisterRequest::kMetaPipeNameFieldNumber;
const int RegisterRequest::kTechniqueDescriptionFieldNumber;
const int RegisterRequest::kNumberOfZPipePortsFieldNumber;
const int RegisterRequest::kSensorNameFieldNumber;
const int RegisterRequest::kEstimatedCenterFreqMHzFieldNumber;
const int RegisterRequest::kOverrideChannelFieldNumber;
#endif  // !_MSC_VER

RegisterRequest::RegisterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterRequest::InitAsDefaultInstance() {
}

RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  platformname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  techniquename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tbuniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datapipename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  metapipename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  techniquedescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  numberofzpipeports_ = 1;
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  estimatedcenterfreqmhz_ = 0;
  overridechannel_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterRequest::~RegisterRequest() {
  SharedDtor();
}

void RegisterRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (platformname_ != &::google::protobuf::internal::kEmptyString) {
    delete platformname_;
  }
  if (techniquename_ != &::google::protobuf::internal::kEmptyString) {
    delete techniquename_;
  }
  if (tbuniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete tbuniqueid_;
  }
  if (datapipename_ != &::google::protobuf::internal::kEmptyString) {
    delete datapipename_;
  }
  if (metapipename_ != &::google::protobuf::internal::kEmptyString) {
    delete metapipename_;
  }
  if (techniquedescription_ != &::google::protobuf::internal::kEmptyString) {
    delete techniquedescription_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (this != default_instance_) {
  }
}

void RegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRequest_descriptor_;
}

const RegisterRequest& RegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

RegisterRequest* RegisterRequest::default_instance_ = NULL;

RegisterRequest* RegisterRequest::New() const {
  return new RegisterRequest;
}

void RegisterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_platformname()) {
      if (platformname_ != &::google::protobuf::internal::kEmptyString) {
        platformname_->clear();
      }
    }
    if (has_techniquename()) {
      if (techniquename_ != &::google::protobuf::internal::kEmptyString) {
        techniquename_->clear();
      }
    }
    if (has_tbuniqueid()) {
      if (tbuniqueid_ != &::google::protobuf::internal::kEmptyString) {
        tbuniqueid_->clear();
      }
    }
    if (has_datapipename()) {
      if (datapipename_ != &::google::protobuf::internal::kEmptyString) {
        datapipename_->clear();
      }
    }
    if (has_metapipename()) {
      if (metapipename_ != &::google::protobuf::internal::kEmptyString) {
        metapipename_->clear();
      }
    }
    if (has_techniquedescription()) {
      if (techniquedescription_ != &::google::protobuf::internal::kEmptyString) {
        techniquedescription_->clear();
      }
    }
    numberofzpipeports_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
    estimatedcenterfreqmhz_ = 0;
    overridechannel_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "REGISTERREQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_platformName;
        break;
      }

      // optional string platformName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platformName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platformname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platformname().data(), this->platformname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_techniqueName;
        break;
      }

      // optional string techniqueName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_techniqueName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_techniquename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->techniquename().data(), this->techniquename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tbUniqueID;
        break;
      }

      // optional string tbUniqueID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tbUniqueID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tbuniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tbuniqueid().data(), this->tbuniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dataPipeName;
        break;
      }

      // optional string dataPipeName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataPipeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datapipename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datapipename().data(), this->datapipename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_metaPipeName;
        break;
      }

      // optional string metaPipeName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metaPipeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metapipename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->metapipename().data(), this->metapipename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_techniqueDescription;
        break;
      }

      // optional string techniqueDescription = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_techniqueDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_techniquedescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->techniquedescription().data(), this->techniquedescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_numberOfZPipePorts;
        break;
      }

      // optional int32 numberOfZPipePorts = 8 [default = 1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numberOfZPipePorts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberofzpipeports_)));
          set_has_numberofzpipeports();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_estimatedCenterFreqMHz;
        break;
      }

      // optional float estimatedCenterFreqMHz = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_estimatedCenterFreqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &estimatedcenterfreqmhz_)));
          set_has_estimatedcenterfreqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_overrideChannel;
        break;
      }

      // optional int32 overrideChannel = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overrideChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overridechannel_)));
          set_has_overridechannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "REGISTERREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string platformName = 2;
  if (has_platformname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platformname().data(), this->platformname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platformname(), output);
  }

  // optional string techniqueName = 3;
  if (has_techniquename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->techniquename().data(), this->techniquename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->techniquename(), output);
  }

  // optional string tbUniqueID = 4;
  if (has_tbuniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tbuniqueid().data(), this->tbuniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tbuniqueid(), output);
  }

  // optional string dataPipeName = 5;
  if (has_datapipename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datapipename().data(), this->datapipename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->datapipename(), output);
  }

  // optional string metaPipeName = 6;
  if (has_metapipename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metapipename().data(), this->metapipename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->metapipename(), output);
  }

  // optional string techniqueDescription = 7;
  if (has_techniquedescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->techniquedescription().data(), this->techniquedescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->techniquedescription(), output);
  }

  // optional int32 numberOfZPipePorts = 8 [default = 1];
  if (has_numberofzpipeports()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->numberofzpipeports(), output);
  }

  // optional string sensorName = 9;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->sensorname(), output);
  }

  // optional float estimatedCenterFreqMHz = 10;
  if (has_estimatedcenterfreqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->estimatedcenterfreqmhz(), output);
  }

  // optional int32 overrideChannel = 11 [default = -1];
  if (has_overridechannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->overridechannel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "REGISTERREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string platformName = 2;
  if (has_platformname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platformname().data(), this->platformname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platformname(), target);
  }

  // optional string techniqueName = 3;
  if (has_techniquename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->techniquename().data(), this->techniquename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->techniquename(), target);
  }

  // optional string tbUniqueID = 4;
  if (has_tbuniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tbuniqueid().data(), this->tbuniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tbuniqueid(), target);
  }

  // optional string dataPipeName = 5;
  if (has_datapipename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datapipename().data(), this->datapipename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->datapipename(), target);
  }

  // optional string metaPipeName = 6;
  if (has_metapipename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metapipename().data(), this->metapipename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->metapipename(), target);
  }

  // optional string techniqueDescription = 7;
  if (has_techniquedescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->techniquedescription().data(), this->techniquedescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->techniquedescription(), target);
  }

  // optional int32 numberOfZPipePorts = 8 [default = 1];
  if (has_numberofzpipeports()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->numberofzpipeports(), target);
  }

  // optional string sensorName = 9;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sensorname(), target);
  }

  // optional float estimatedCenterFreqMHz = 10;
  if (has_estimatedcenterfreqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->estimatedcenterfreqmhz(), target);
  }

  // optional int32 overrideChannel = 11 [default = -1];
  if (has_overridechannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->overridechannel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "REGISTERREQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string platformName = 2;
    if (has_platformname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platformname());
    }

    // optional string techniqueName = 3;
    if (has_techniquename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->techniquename());
    }

    // optional string tbUniqueID = 4;
    if (has_tbuniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tbuniqueid());
    }

    // optional string dataPipeName = 5;
    if (has_datapipename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datapipename());
    }

    // optional string metaPipeName = 6;
    if (has_metapipename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metapipename());
    }

    // optional string techniqueDescription = 7;
    if (has_techniquedescription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->techniquedescription());
    }

    // optional int32 numberOfZPipePorts = 8 [default = 1];
    if (has_numberofzpipeports()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberofzpipeports());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string sensorName = 9;
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

    // optional float estimatedCenterFreqMHz = 10;
    if (has_estimatedcenterfreqmhz()) {
      total_size += 1 + 4;
    }

    // optional int32 overrideChannel = 11 [default = -1];
    if (has_overridechannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overridechannel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterRequest::MergeFrom(const RegisterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_platformname()) {
      set_platformname(from.platformname());
    }
    if (from.has_techniquename()) {
      set_techniquename(from.techniquename());
    }
    if (from.has_tbuniqueid()) {
      set_tbuniqueid(from.tbuniqueid());
    }
    if (from.has_datapipename()) {
      set_datapipename(from.datapipename());
    }
    if (from.has_metapipename()) {
      set_metapipename(from.metapipename());
    }
    if (from.has_techniquedescription()) {
      set_techniquedescription(from.techniquedescription());
    }
    if (from.has_numberofzpipeports()) {
      set_numberofzpipeports(from.numberofzpipeports());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
    if (from.has_estimatedcenterfreqmhz()) {
      set_estimatedcenterfreqmhz(from.estimatedcenterfreqmhz());
    }
    if (from.has_overridechannel()) {
      set_overridechannel(from.overridechannel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {

  return true;
}

void RegisterRequest::Swap(RegisterRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(platformname_, other->platformname_);
    std::swap(techniquename_, other->techniquename_);
    std::swap(tbuniqueid_, other->tbuniqueid_);
    std::swap(datapipename_, other->datapipename_);
    std::swap(metapipename_, other->metapipename_);
    std::swap(techniquedescription_, other->techniquedescription_);
    std::swap(numberofzpipeports_, other->numberofzpipeports_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(estimatedcenterfreqmhz_, other->estimatedcenterfreqmhz_);
    std::swap(overridechannel_, other->overridechannel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRequest_descriptor_;
  metadata.reflection = RegisterRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UnregisterRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UnregisterRequest::kMsgNameFieldNumber;
const int UnregisterRequest::kTbUniqueIDFieldNumber;
#endif  // !_MSC_VER

UnregisterRequest::UnregisterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnregisterRequest::InitAsDefaultInstance() {
}

UnregisterRequest::UnregisterRequest(const UnregisterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnregisterRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  tbuniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnregisterRequest::~UnregisterRequest() {
  SharedDtor();
}

void UnregisterRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (tbuniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete tbuniqueid_;
  }
  if (this != default_instance_) {
  }
}

void UnregisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnregisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnregisterRequest_descriptor_;
}

const UnregisterRequest& UnregisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

UnregisterRequest* UnregisterRequest::default_instance_ = NULL;

UnregisterRequest* UnregisterRequest::New() const {
  return new UnregisterRequest;
}

void UnregisterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_tbuniqueid()) {
      if (tbuniqueid_ != &::google::protobuf::internal::kEmptyString) {
        tbuniqueid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnregisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UNREGISTERREQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tbUniqueID;
        break;
      }

      // optional string tbUniqueID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tbUniqueID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tbuniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tbuniqueid().data(), this->tbuniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnregisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UNREGISTERREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string tbUniqueID = 2;
  if (has_tbuniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tbuniqueid().data(), this->tbuniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tbuniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnregisterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UNREGISTERREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string tbUniqueID = 2;
  if (has_tbuniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tbuniqueid().data(), this->tbuniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tbuniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnregisterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UNREGISTERREQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string tbUniqueID = 2;
    if (has_tbuniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tbuniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnregisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnregisterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnregisterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnregisterRequest::MergeFrom(const UnregisterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_tbuniqueid()) {
      set_tbuniqueid(from.tbuniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnregisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterRequest::CopyFrom(const UnregisterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterRequest::IsInitialized() const {

  return true;
}

void UnregisterRequest::Swap(UnregisterRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(tbuniqueid_, other->tbuniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnregisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnregisterRequest_descriptor_;
  metadata.reflection = UnregisterRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RegisterResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RegisterResponse::kMsgNameFieldNumber;
const int RegisterResponse::kIdNumFieldNumber;
const int RegisterResponse::kPortsFieldNumber;
const int RegisterResponse::kSampleRateSpsFieldNumber;
const int RegisterResponse::kMinFreqMHzFieldNumber;
const int RegisterResponse::kMaxFreqMHzFieldNumber;
const int RegisterResponse::kAssignedChannelFieldNumber;
const int RegisterResponse::kSensorNameFieldNumber;
#endif  // !_MSC_VER

RegisterResponse::RegisterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterResponse::InitAsDefaultInstance() {
}

RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  idnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sampleratesps_ = 0;
  minfreqmhz_ = 20;
  maxfreqmhz_ = 6000;
  assignedchannel_ = 0;
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterResponse::~RegisterResponse() {
  SharedDtor();
}

void RegisterResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (idnum_ != &::google::protobuf::internal::kEmptyString) {
    delete idnum_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (this != default_instance_) {
  }
}

void RegisterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterResponse_descriptor_;
}

const RegisterResponse& RegisterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

RegisterResponse* RegisterResponse::default_instance_ = NULL;

RegisterResponse* RegisterResponse::New() const {
  return new RegisterResponse;
}

void RegisterResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_idnum()) {
      if (idnum_ != &::google::protobuf::internal::kEmptyString) {
        idnum_->clear();
      }
    }
    sampleratesps_ = 0;
    minfreqmhz_ = 20;
    maxfreqmhz_ = 6000;
    assignedchannel_ = 0;
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
  }
  ports_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "REGISTERRESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_idNum;
        break;
      }

      // optional string idNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idnum().data(), this->idnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ports;
        break;
      }

      // repeated int32 ports = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ports:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_ports())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ports())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ports;
        if (input->ExpectTag(37)) goto parse_sampleRateSps;
        break;
      }

      // optional float sampleRateSps = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sampleRateSps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sampleratesps_)));
          set_has_sampleratesps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_minFreqMHz;
        break;
      }

      // optional float minFreqMHz = 5 [default = 20];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minFreqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minfreqmhz_)));
          set_has_minfreqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_maxFreqMHz;
        break;
      }

      // optional float maxFreqMHz = 6 [default = 6000];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxFreqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxfreqmhz_)));
          set_has_maxfreqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_assignedChannel;
        break;
      }

      // optional int32 assignedChannel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assignedChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assignedchannel_)));
          set_has_assignedchannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "REGISTERRESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string idNum = 2;
  if (has_idnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idnum().data(), this->idnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->idnum(), output);
  }

  // repeated int32 ports = 3;
  for (int i = 0; i < this->ports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->ports(i), output);
  }

  // optional float sampleRateSps = 4;
  if (has_sampleratesps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sampleratesps(), output);
  }

  // optional float minFreqMHz = 5 [default = 20];
  if (has_minfreqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->minfreqmhz(), output);
  }

  // optional float maxFreqMHz = 6 [default = 6000];
  if (has_maxfreqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->maxfreqmhz(), output);
  }

  // optional int32 assignedChannel = 7;
  if (has_assignedchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->assignedchannel(), output);
  }

  // optional string sensorName = 9;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->sensorname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "REGISTERRESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string idNum = 2;
  if (has_idnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idnum().data(), this->idnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->idnum(), target);
  }

  // repeated int32 ports = 3;
  for (int i = 0; i < this->ports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->ports(i), target);
  }

  // optional float sampleRateSps = 4;
  if (has_sampleratesps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sampleratesps(), target);
  }

  // optional float minFreqMHz = 5 [default = 20];
  if (has_minfreqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->minfreqmhz(), target);
  }

  // optional float maxFreqMHz = 6 [default = 6000];
  if (has_maxfreqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->maxfreqmhz(), target);
  }

  // optional int32 assignedChannel = 7;
  if (has_assignedchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->assignedchannel(), target);
  }

  // optional string sensorName = 9;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sensorname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "REGISTERRESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string idNum = 2;
    if (has_idnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idnum());
    }

    // optional float sampleRateSps = 4;
    if (has_sampleratesps()) {
      total_size += 1 + 4;
    }

    // optional float minFreqMHz = 5 [default = 20];
    if (has_minfreqmhz()) {
      total_size += 1 + 4;
    }

    // optional float maxFreqMHz = 6 [default = 6000];
    if (has_maxfreqmhz()) {
      total_size += 1 + 4;
    }

    // optional int32 assignedChannel = 7;
    if (has_assignedchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assignedchannel());
    }

    // optional string sensorName = 9;
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

  }
  // repeated int32 ports = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ports_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ports(i));
    }
    total_size += 1 * this->ports_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterResponse::MergeFrom(const RegisterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ports_.MergeFrom(from.ports_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_idnum()) {
      set_idnum(from.idnum());
    }
    if (from.has_sampleratesps()) {
      set_sampleratesps(from.sampleratesps());
    }
    if (from.has_minfreqmhz()) {
      set_minfreqmhz(from.minfreqmhz());
    }
    if (from.has_maxfreqmhz()) {
      set_maxfreqmhz(from.maxfreqmhz());
    }
    if (from.has_assignedchannel()) {
      set_assignedchannel(from.assignedchannel());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {

  return true;
}

void RegisterResponse::Swap(RegisterResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(idnum_, other->idnum_);
    ports_.Swap(&other->ports_);
    std::swap(sampleratesps_, other->sampleratesps_);
    std::swap(minfreqmhz_, other->minfreqmhz_);
    std::swap(maxfreqmhz_, other->maxfreqmhz_);
    std::swap(assignedchannel_, other->assignedchannel_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterResponse_descriptor_;
  metadata.reflection = RegisterResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* HopAttackStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int HopAttackStatus::kMsgNameFieldNumber;
const int HopAttackStatus::kPlatformFieldNumber;
const int HopAttackStatus::kTotalhopsFieldNumber;
const int HopAttackStatus::kGoodhopsFieldNumber;
const int HopAttackStatus::kPercentageFieldNumber;
#endif  // !_MSC_VER

HopAttackStatus::HopAttackStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HopAttackStatus::InitAsDefaultInstance() {
}

HopAttackStatus::HopAttackStatus(const HopAttackStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HopAttackStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totalhops_ = 0;
  goodhops_ = 0;
  percentage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HopAttackStatus::~HopAttackStatus() {
  SharedDtor();
}

void HopAttackStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (this != default_instance_) {
  }
}

void HopAttackStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HopAttackStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HopAttackStatus_descriptor_;
}

const HopAttackStatus& HopAttackStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

HopAttackStatus* HopAttackStatus::default_instance_ = NULL;

HopAttackStatus* HopAttackStatus::New() const {
  return new HopAttackStatus;
}

void HopAttackStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    totalhops_ = 0;
    goodhops_ = 0;
    percentage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HopAttackStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "HOPATTACKSTATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_platform;
        break;
      }

      // optional string platform = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_totalhops;
        break;
      }

      // optional int32 totalhops = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalhops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalhops_)));
          set_has_totalhops();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_goodhops;
        break;
      }

      // optional int32 goodhops = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodhops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodhops_)));
          set_has_goodhops();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_percentage;
        break;
      }

      // optional float percentage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percentage_)));
          set_has_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HopAttackStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "HOPATTACKSTATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platform(), output);
  }

  // optional int32 totalhops = 3;
  if (has_totalhops()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalhops(), output);
  }

  // optional int32 goodhops = 4;
  if (has_goodhops()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->goodhops(), output);
  }

  // optional float percentage = 5;
  if (has_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->percentage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HopAttackStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "HOPATTACKSTATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platform(), target);
  }

  // optional int32 totalhops = 3;
  if (has_totalhops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalhops(), target);
  }

  // optional int32 goodhops = 4;
  if (has_goodhops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->goodhops(), target);
  }

  // optional float percentage = 5;
  if (has_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->percentage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HopAttackStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "HOPATTACKSTATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string platform = 2;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional int32 totalhops = 3;
    if (has_totalhops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalhops());
    }

    // optional int32 goodhops = 4;
    if (has_goodhops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodhops());
    }

    // optional float percentage = 5;
    if (has_percentage()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HopAttackStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HopAttackStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HopAttackStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HopAttackStatus::MergeFrom(const HopAttackStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_totalhops()) {
      set_totalhops(from.totalhops());
    }
    if (from.has_goodhops()) {
      set_goodhops(from.goodhops());
    }
    if (from.has_percentage()) {
      set_percentage(from.percentage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HopAttackStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HopAttackStatus::CopyFrom(const HopAttackStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HopAttackStatus::IsInitialized() const {

  return true;
}

void HopAttackStatus::Swap(HopAttackStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(platform_, other->platform_);
    std::swap(totalhops_, other->totalhops_);
    std::swap(goodhops_, other->goodhops_);
    std::swap(percentage_, other->percentage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HopAttackStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HopAttackStatus_descriptor_;
  metadata.reflection = HopAttackStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TxFreqRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int TxFreqRequest::kMsgNameFieldNumber;
const int TxFreqRequest::kFreqHzFieldNumber;
const int TxFreqRequest::kGlobalIDFieldNumber;
#endif  // !_MSC_VER

TxFreqRequest::TxFreqRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxFreqRequest::InitAsDefaultInstance() {
}

TxFreqRequest::TxFreqRequest(const TxFreqRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxFreqRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  freqhz_ = 0;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxFreqRequest::~TxFreqRequest() {
  SharedDtor();
}

void TxFreqRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void TxFreqRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxFreqRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxFreqRequest_descriptor_;
}

const TxFreqRequest& TxFreqRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

TxFreqRequest* TxFreqRequest::default_instance_ = NULL;

TxFreqRequest* TxFreqRequest::New() const {
  return new TxFreqRequest;
}

void TxFreqRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    freqhz_ = 0;
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxFreqRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TXFREQREQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_freqHz;
        break;
      }

      // optional float freqHz = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freqHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freqhz_)));
          set_has_freqhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_globalID;
        break;
      }

      // optional string globalID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxFreqRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TXFREQREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional float freqHz = 2;
  if (has_freqhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->freqhz(), output);
  }

  // optional string globalID = 3;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxFreqRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TXFREQREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional float freqHz = 2;
  if (has_freqhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->freqhz(), target);
  }

  // optional string globalID = 3;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxFreqRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TXFREQREQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional float freqHz = 2;
    if (has_freqhz()) {
      total_size += 1 + 4;
    }

    // optional string globalID = 3;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxFreqRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxFreqRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxFreqRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxFreqRequest::MergeFrom(const TxFreqRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_freqhz()) {
      set_freqhz(from.freqhz());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxFreqRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxFreqRequest::CopyFrom(const TxFreqRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxFreqRequest::IsInitialized() const {

  return true;
}

void TxFreqRequest::Swap(TxFreqRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(freqhz_, other->freqhz_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxFreqRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxFreqRequest_descriptor_;
  metadata.reflection = TxFreqRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EmergencyJam::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EmergencyJam::kMsgNameFieldNumber;
const int EmergencyJam::kCenterFreqFieldNumber;
const int EmergencyJam::kBandwidthFieldNumber;
const int EmergencyJam::kTargetIDFieldNumber;
#endif  // !_MSC_VER

EmergencyJam::EmergencyJam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmergencyJam::InitAsDefaultInstance() {
}

EmergencyJam::EmergencyJam(const EmergencyJam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmergencyJam::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  centerfreq_ = 2440;
  bandwidth_ = 84;
  targetid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmergencyJam::~EmergencyJam() {
  SharedDtor();
}

void EmergencyJam::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void EmergencyJam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmergencyJam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmergencyJam_descriptor_;
}

const EmergencyJam& EmergencyJam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EmergencyJam* EmergencyJam::default_instance_ = NULL;

EmergencyJam* EmergencyJam::New() const {
  return new EmergencyJam;
}

void EmergencyJam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    centerfreq_ = 2440;
    bandwidth_ = 84;
    targetid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmergencyJam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EMERGENCYJAM"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_centerFreq;
        break;
      }

      // optional double centerFreq = 2 [default = 2440];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_centerFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerfreq_)));
          set_has_centerfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_bandwidth;
        break;
      }

      // optional double bandwidth = 3 [default = 84];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_targetID;
        break;
      }

      // optional int32 targetID = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EmergencyJam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EMERGENCYJAM"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double centerFreq = 2 [default = 2440];
  if (has_centerfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->centerfreq(), output);
  }

  // optional double bandwidth = 3 [default = 84];
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->bandwidth(), output);
  }

  // optional int32 targetID = 4 [default = -1];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmergencyJam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EMERGENCYJAM"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double centerFreq = 2 [default = 2440];
  if (has_centerfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->centerfreq(), target);
  }

  // optional double bandwidth = 3 [default = 84];
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->bandwidth(), target);
  }

  // optional int32 targetID = 4 [default = -1];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmergencyJam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EMERGENCYJAM"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double centerFreq = 2 [default = 2440];
    if (has_centerfreq()) {
      total_size += 1 + 8;
    }

    // optional double bandwidth = 3 [default = 84];
    if (has_bandwidth()) {
      total_size += 1 + 8;
    }

    // optional int32 targetID = 4 [default = -1];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmergencyJam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmergencyJam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmergencyJam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmergencyJam::MergeFrom(const EmergencyJam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_centerfreq()) {
      set_centerfreq(from.centerfreq());
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmergencyJam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmergencyJam::CopyFrom(const EmergencyJam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmergencyJam::IsInitialized() const {

  return true;
}

void EmergencyJam::Swap(EmergencyJam* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(centerfreq_, other->centerfreq_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmergencyJam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmergencyJam_descriptor_;
  metadata.reflection = EmergencyJam_reflection_;
  return metadata;
}


// ===================================================================

::std::string* JamOff::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int JamOff::kMsgNameFieldNumber;
const int JamOff::kTargetIDFieldNumber;
#endif  // !_MSC_VER

JamOff::JamOff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JamOff::InitAsDefaultInstance() {
}

JamOff::JamOff(const JamOff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JamOff::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  targetid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JamOff::~JamOff() {
  SharedDtor();
}

void JamOff::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void JamOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JamOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JamOff_descriptor_;
}

const JamOff& JamOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

JamOff* JamOff::default_instance_ = NULL;

JamOff* JamOff::New() const {
  return new JamOff;
}

void JamOff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    targetid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JamOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "JAMOFF"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_targetID;
        break;
      }

      // optional int32 targetID = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JamOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "JAMOFF"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 targetID = 4 [default = -1];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JamOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "JAMOFF"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 targetID = 4 [default = -1];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JamOff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "JAMOFF"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 targetID = 4 [default = -1];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JamOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JamOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JamOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JamOff::MergeFrom(const JamOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JamOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JamOff::CopyFrom(const JamOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JamOff::IsInitialized() const {

  return true;
}

void JamOff::Swap(JamOff* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JamOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JamOff_descriptor_;
  metadata.reflection = JamOff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EWSDRRequest::kApertureFieldNumber;
const int EWSDRRequest::kTransceiverFieldNumber;
const int EWSDRRequest::kGuidFieldNumber;
const int EWSDRRequest::kPriorityFieldNumber;
const int EWSDRRequest::kEnabledFieldNumber;
#endif  // !_MSC_VER

EWSDRRequest::EWSDRRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWSDRRequest::InitAsDefaultInstance() {
}

EWSDRRequest::EWSDRRequest(const EWSDRRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWSDRRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  priority_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWSDRRequest::~EWSDRRequest() {
  SharedDtor();
}

void EWSDRRequest::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void EWSDRRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWSDRRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWSDRRequest_descriptor_;
}

const EWSDRRequest& EWSDRRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWSDRRequest* EWSDRRequest::default_instance_ = NULL;

EWSDRRequest* EWSDRRequest::New() const {
  return new EWSDRRequest;
}

void EWSDRRequest::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::kEmptyString) {
        guid_->clear();
      }
    }
    priority_ = 0;
    enabled_ = false;
  }
  aperture_.Clear();
  transceiver_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWSDRRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fv.tb.protos.TBProtos.Aperture aperture = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aperture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aperture()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_aperture;
        if (input->ExpectTag(18)) goto parse_transceiver;
        break;
      }

      // repeated .fv.tb.protos.TBProtos.Transceiver transceiver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transceiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transceiver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_transceiver;
        if (input->ExpectTag(26)) goto parse_guid;
        break;
      }

      // optional string guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_priority;
        break;
      }

      // optional int32 priority = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWSDRRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .fv.tb.protos.TBProtos.Aperture aperture = 1;
  for (int i = 0; i < this->aperture_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->aperture(i), output);
  }

  // repeated .fv.tb.protos.TBProtos.Transceiver transceiver = 2;
  for (int i = 0; i < this->transceiver_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transceiver(i), output);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guid(), output);
  }

  // optional int32 priority = 4;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority(), output);
  }

  // optional bool enabled = 5;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWSDRRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .fv.tb.protos.TBProtos.Aperture aperture = 1;
  for (int i = 0; i < this->aperture_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->aperture(i), target);
  }

  // repeated .fv.tb.protos.TBProtos.Transceiver transceiver = 2;
  for (int i = 0; i < this->transceiver_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transceiver(i), target);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guid(), target);
  }

  // optional int32 priority = 4;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->priority(), target);
  }

  // optional bool enabled = 5;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWSDRRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional int32 priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional bool enabled = 5;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  // repeated .fv.tb.protos.TBProtos.Aperture aperture = 1;
  total_size += 1 * this->aperture_size();
  for (int i = 0; i < this->aperture_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aperture(i));
  }

  // repeated .fv.tb.protos.TBProtos.Transceiver transceiver = 2;
  total_size += 1 * this->transceiver_size();
  for (int i = 0; i < this->transceiver_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transceiver(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWSDRRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWSDRRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWSDRRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWSDRRequest::MergeFrom(const EWSDRRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  aperture_.MergeFrom(from.aperture_);
  transceiver_.MergeFrom(from.transceiver_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWSDRRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWSDRRequest::CopyFrom(const EWSDRRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWSDRRequest::IsInitialized() const {

  return true;
}

void EWSDRRequest::Swap(EWSDRRequest* other) {
  if (other != this) {
    aperture_.Swap(&other->aperture_);
    transceiver_.Swap(&other->transceiver_);
    std::swap(guid_, other->guid_);
    std::swap(priority_, other->priority_);
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWSDRRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWSDRRequest_descriptor_;
  metadata.reflection = EWSDRRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EWSDRCommand::kApertureFieldNumber;
const int EWSDRCommand::kTransceiverFieldNumber;
const int EWSDRCommand::kGuidFieldNumber;
const int EWSDRCommand::kPriorityFieldNumber;
const int EWSDRCommand::kEnabledFieldNumber;
#endif  // !_MSC_VER

EWSDRCommand::EWSDRCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWSDRCommand::InitAsDefaultInstance() {
}

EWSDRCommand::EWSDRCommand(const EWSDRCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWSDRCommand::SharedCtor() {
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  priority_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWSDRCommand::~EWSDRCommand() {
  SharedDtor();
}

void EWSDRCommand::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void EWSDRCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWSDRCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWSDRCommand_descriptor_;
}

const EWSDRCommand& EWSDRCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWSDRCommand* EWSDRCommand::default_instance_ = NULL;

EWSDRCommand* EWSDRCommand::New() const {
  return new EWSDRCommand;
}

void EWSDRCommand::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::kEmptyString) {
        guid_->clear();
      }
    }
    priority_ = 0;
    enabled_ = false;
  }
  aperture_.Clear();
  transceiver_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWSDRCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fv.tb.protos.TBProtos.Aperture aperture = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aperture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aperture()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_aperture;
        if (input->ExpectTag(18)) goto parse_transceiver;
        break;
      }

      // repeated .fv.tb.protos.TBProtos.Transceiver transceiver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transceiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transceiver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_transceiver;
        if (input->ExpectTag(26)) goto parse_guid;
        break;
      }

      // optional string guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_priority;
        break;
      }

      // optional int32 priority = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWSDRCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .fv.tb.protos.TBProtos.Aperture aperture = 1;
  for (int i = 0; i < this->aperture_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->aperture(i), output);
  }

  // repeated .fv.tb.protos.TBProtos.Transceiver transceiver = 2;
  for (int i = 0; i < this->transceiver_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transceiver(i), output);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guid(), output);
  }

  // optional int32 priority = 4;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority(), output);
  }

  // optional bool enabled = 5;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWSDRCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .fv.tb.protos.TBProtos.Aperture aperture = 1;
  for (int i = 0; i < this->aperture_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->aperture(i), target);
  }

  // repeated .fv.tb.protos.TBProtos.Transceiver transceiver = 2;
  for (int i = 0; i < this->transceiver_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transceiver(i), target);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guid(), target);
  }

  // optional int32 priority = 4;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->priority(), target);
  }

  // optional bool enabled = 5;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWSDRCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional int32 priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional bool enabled = 5;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  // repeated .fv.tb.protos.TBProtos.Aperture aperture = 1;
  total_size += 1 * this->aperture_size();
  for (int i = 0; i < this->aperture_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aperture(i));
  }

  // repeated .fv.tb.protos.TBProtos.Transceiver transceiver = 2;
  total_size += 1 * this->transceiver_size();
  for (int i = 0; i < this->transceiver_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transceiver(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWSDRCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWSDRCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWSDRCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWSDRCommand::MergeFrom(const EWSDRCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  aperture_.MergeFrom(from.aperture_);
  transceiver_.MergeFrom(from.transceiver_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWSDRCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWSDRCommand::CopyFrom(const EWSDRCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWSDRCommand::IsInitialized() const {

  return true;
}

void EWSDRCommand::Swap(EWSDRCommand* other) {
  if (other != this) {
    aperture_.Swap(&other->aperture_);
    transceiver_.Swap(&other->transceiver_);
    std::swap(guid_, other->guid_);
    std::swap(priority_, other->priority_);
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWSDRCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWSDRCommand_descriptor_;
  metadata.reflection = EWSDRCommand_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Aperture::_default_guid_ = NULL;
#ifndef _MSC_VER
const int Aperture::kAntennaFieldNumber;
const int Aperture::kAzimuthFieldNumber;
const int Aperture::kElevationFieldNumber;
const int Aperture::kPolarizationFieldNumber;
const int Aperture::kPriorityFieldNumber;
const int Aperture::kGuidFieldNumber;
#endif  // !_MSC_VER

Aperture::Aperture()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Aperture::InitAsDefaultInstance() {
}

Aperture::Aperture(const Aperture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Aperture::SharedCtor() {
  _cached_size_ = 0;
  antenna_ = 0;
  azimuth_ = 0;
  elevation_ = 0;
  polarization_ = 0;
  priority_ = 100;
  guid_ = const_cast< ::std::string*>(_default_guid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Aperture::~Aperture() {
  SharedDtor();
}

void Aperture::SharedDtor() {
  if (guid_ != _default_guid_) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void Aperture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Aperture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Aperture_descriptor_;
}

const Aperture& Aperture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

Aperture* Aperture::default_instance_ = NULL;

Aperture* Aperture::New() const {
  return new Aperture;
}

void Aperture::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    antenna_ = 0;
    azimuth_ = 0;
    elevation_ = 0;
    polarization_ = 0;
    priority_ = 100;
    if (has_guid()) {
      if (guid_ != _default_guid_) {
        guid_->assign(*_default_guid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Aperture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 antenna = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &antenna_)));
          set_has_antenna();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_azimuth;
        break;
      }

      // optional float azimuth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_elevation;
        break;
      }

      // optional float elevation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_polarization;
        break;
      }

      // optional int32 polarization = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_polarization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &polarization_)));
          set_has_polarization();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_priority;
        break;
      }

      // optional int32 priority = 5 [default = 100];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_guid;
        break;
      }

      // optional string guid = 6 [default = "UNSPECIFIED"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Aperture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 antenna = 1;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->antenna(), output);
  }

  // optional float azimuth = 2;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->azimuth(), output);
  }

  // optional float elevation = 3;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->elevation(), output);
  }

  // optional int32 polarization = 4;
  if (has_polarization()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->polarization(), output);
  }

  // optional int32 priority = 5 [default = 100];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->priority(), output);
  }

  // optional string guid = 6 [default = "UNSPECIFIED"];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Aperture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 antenna = 1;
  if (has_antenna()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->antenna(), target);
  }

  // optional float azimuth = 2;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->azimuth(), target);
  }

  // optional float elevation = 3;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->elevation(), target);
  }

  // optional int32 polarization = 4;
  if (has_polarization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->polarization(), target);
  }

  // optional int32 priority = 5 [default = 100];
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->priority(), target);
  }

  // optional string guid = 6 [default = "UNSPECIFIED"];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Aperture::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 antenna = 1;
    if (has_antenna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->antenna());
    }

    // optional float azimuth = 2;
    if (has_azimuth()) {
      total_size += 1 + 4;
    }

    // optional float elevation = 3;
    if (has_elevation()) {
      total_size += 1 + 4;
    }

    // optional int32 polarization = 4;
    if (has_polarization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->polarization());
    }

    // optional int32 priority = 5 [default = 100];
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional string guid = 6 [default = "UNSPECIFIED"];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Aperture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Aperture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Aperture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Aperture::MergeFrom(const Aperture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_antenna()) {
      set_antenna(from.antenna());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
    if (from.has_polarization()) {
      set_polarization(from.polarization());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Aperture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Aperture::CopyFrom(const Aperture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aperture::IsInitialized() const {

  return true;
}

void Aperture::Swap(Aperture* other) {
  if (other != this) {
    std::swap(antenna_, other->antenna_);
    std::swap(azimuth_, other->azimuth_);
    std::swap(elevation_, other->elevation_);
    std::swap(polarization_, other->polarization_);
    std::swap(priority_, other->priority_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Aperture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Aperture_descriptor_;
  metadata.reflection = Aperture_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Transceiver::_default_guid_ = NULL;
#ifndef _MSC_VER
const int Transceiver::kTransceiverFieldNumber;
const int Transceiver::kChannelFieldNumber;
const int Transceiver::kFreqMHzFieldNumber;
const int Transceiver::kGainDBFieldNumber;
const int Transceiver::kPriorityFieldNumber;
const int Transceiver::kGuidFieldNumber;
#endif  // !_MSC_VER

Transceiver::Transceiver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transceiver::InitAsDefaultInstance() {
}

Transceiver::Transceiver(const Transceiver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transceiver::SharedCtor() {
  _cached_size_ = 0;
  transceiver_ = 0;
  channel_ = 0;
  freqmhz_ = 0;
  gaindb_ = 0;
  priority_ = 100;
  guid_ = const_cast< ::std::string*>(_default_guid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transceiver::~Transceiver() {
  SharedDtor();
}

void Transceiver::SharedDtor() {
  if (guid_ != _default_guid_) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void Transceiver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transceiver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transceiver_descriptor_;
}

const Transceiver& Transceiver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

Transceiver* Transceiver::default_instance_ = NULL;

Transceiver* Transceiver::New() const {
  return new Transceiver;
}

void Transceiver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transceiver_ = 0;
    channel_ = 0;
    freqmhz_ = 0;
    gaindb_ = 0;
    priority_ = 100;
    if (has_guid()) {
      if (guid_ != _default_guid_) {
        guid_->assign(*_default_guid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transceiver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 transceiver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transceiver_)));
          set_has_transceiver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_freqMHz;
        break;
      }

      // optional float freqMHz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freqmhz_)));
          set_has_freqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gainDB;
        break;
      }

      // optional int32 gainDB = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gainDB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gaindb_)));
          set_has_gaindb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_priority;
        break;
      }

      // optional int32 priority = 5 [default = 100];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_guid;
        break;
      }

      // optional string guid = 6 [default = "UNSPECIFIED"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transceiver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 transceiver = 1;
  if (has_transceiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->transceiver(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional float freqMHz = 3;
  if (has_freqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->freqmhz(), output);
  }

  // optional int32 gainDB = 4;
  if (has_gaindb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gaindb(), output);
  }

  // optional int32 priority = 5 [default = 100];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->priority(), output);
  }

  // optional string guid = 6 [default = "UNSPECIFIED"];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transceiver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 transceiver = 1;
  if (has_transceiver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->transceiver(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional float freqMHz = 3;
  if (has_freqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->freqmhz(), target);
  }

  // optional int32 gainDB = 4;
  if (has_gaindb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gaindb(), target);
  }

  // optional int32 priority = 5 [default = 100];
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->priority(), target);
  }

  // optional string guid = 6 [default = "UNSPECIFIED"];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transceiver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 transceiver = 1;
    if (has_transceiver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transceiver());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional float freqMHz = 3;
    if (has_freqmhz()) {
      total_size += 1 + 4;
    }

    // optional int32 gainDB = 4;
    if (has_gaindb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gaindb());
    }

    // optional int32 priority = 5 [default = 100];
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional string guid = 6 [default = "UNSPECIFIED"];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transceiver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transceiver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transceiver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transceiver::MergeFrom(const Transceiver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transceiver()) {
      set_transceiver(from.transceiver());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_freqmhz()) {
      set_freqmhz(from.freqmhz());
    }
    if (from.has_gaindb()) {
      set_gaindb(from.gaindb());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transceiver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transceiver::CopyFrom(const Transceiver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transceiver::IsInitialized() const {

  return true;
}

void Transceiver::Swap(Transceiver* other) {
  if (other != this) {
    std::swap(transceiver_, other->transceiver_);
    std::swap(channel_, other->channel_);
    std::swap(freqmhz_, other->freqmhz_);
    std::swap(gaindb_, other->gaindb_);
    std::swap(priority_, other->priority_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transceiver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transceiver_descriptor_;
  metadata.reflection = Transceiver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThreatStatus::kKvpsFieldNumber;
#endif  // !_MSC_VER

ThreatStatus::ThreatStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThreatStatus::InitAsDefaultInstance() {
}

ThreatStatus::ThreatStatus(const ThreatStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThreatStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThreatStatus::~ThreatStatus() {
  SharedDtor();
}

void ThreatStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThreatStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThreatStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThreatStatus_descriptor_;
}

const ThreatStatus& ThreatStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

ThreatStatus* ThreatStatus::default_instance_ = NULL;

ThreatStatus* ThreatStatus::New() const {
  return new ThreatStatus;
}

void ThreatStatus::Clear() {
  kvps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThreatStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .falcon_common_msg.KeyValuePair kvps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_kvps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThreatStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .falcon_common_msg.KeyValuePair kvps = 1;
  for (int i = 0; i < this->kvps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kvps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThreatStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .falcon_common_msg.KeyValuePair kvps = 1;
  for (int i = 0; i < this->kvps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->kvps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThreatStatus::ByteSize() const {
  int total_size = 0;

  // repeated .falcon_common_msg.KeyValuePair kvps = 1;
  total_size += 1 * this->kvps_size();
  for (int i = 0; i < this->kvps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThreatStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThreatStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThreatStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThreatStatus::MergeFrom(const ThreatStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvps_.MergeFrom(from.kvps_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThreatStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThreatStatus::CopyFrom(const ThreatStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreatStatus::IsInitialized() const {

  return true;
}

void ThreatStatus::Swap(ThreatStatus* other) {
  if (other != this) {
    kvps_.Swap(&other->kvps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThreatStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThreatStatus_descriptor_;
  metadata.reflection = ThreatStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EWSDRStatus::kAperturesFieldNumber;
const int EWSDRStatus::kTransceiversFieldNumber;
#endif  // !_MSC_VER

EWSDRStatus::EWSDRStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWSDRStatus::InitAsDefaultInstance() {
}

EWSDRStatus::EWSDRStatus(const EWSDRStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWSDRStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWSDRStatus::~EWSDRStatus() {
  SharedDtor();
}

void EWSDRStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EWSDRStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWSDRStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWSDRStatus_descriptor_;
}

const EWSDRStatus& EWSDRStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

EWSDRStatus* EWSDRStatus::default_instance_ = NULL;

EWSDRStatus* EWSDRStatus::New() const {
  return new EWSDRStatus;
}

void EWSDRStatus::Clear() {
  apertures_.Clear();
  transceivers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWSDRStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fv.tb.protos.TBProtos.Aperture apertures = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apertures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apertures()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_apertures;
        if (input->ExpectTag(18)) goto parse_transceivers;
        break;
      }

      // repeated .fv.tb.protos.TBProtos.Transceiver transceivers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transceivers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transceivers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_transceivers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWSDRStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .fv.tb.protos.TBProtos.Aperture apertures = 1;
  for (int i = 0; i < this->apertures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->apertures(i), output);
  }

  // repeated .fv.tb.protos.TBProtos.Transceiver transceivers = 2;
  for (int i = 0; i < this->transceivers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transceivers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWSDRStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .fv.tb.protos.TBProtos.Aperture apertures = 1;
  for (int i = 0; i < this->apertures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->apertures(i), target);
  }

  // repeated .fv.tb.protos.TBProtos.Transceiver transceivers = 2;
  for (int i = 0; i < this->transceivers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transceivers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWSDRStatus::ByteSize() const {
  int total_size = 0;

  // repeated .fv.tb.protos.TBProtos.Aperture apertures = 1;
  total_size += 1 * this->apertures_size();
  for (int i = 0; i < this->apertures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apertures(i));
  }

  // repeated .fv.tb.protos.TBProtos.Transceiver transceivers = 2;
  total_size += 1 * this->transceivers_size();
  for (int i = 0; i < this->transceivers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transceivers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWSDRStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWSDRStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWSDRStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWSDRStatus::MergeFrom(const EWSDRStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  apertures_.MergeFrom(from.apertures_);
  transceivers_.MergeFrom(from.transceivers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWSDRStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWSDRStatus::CopyFrom(const EWSDRStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWSDRStatus::IsInitialized() const {

  return true;
}

void EWSDRStatus::Swap(EWSDRStatus* other) {
  if (other != this) {
    apertures_.Swap(&other->apertures_);
    transceivers_.Swap(&other->transceivers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWSDRStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWSDRStatus_descriptor_;
  metadata.reflection = EWSDRStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetAppParameters::kEltexFieldNumber;
const int SetAppParameters::kSoiNumFieldNumber;
const int SetAppParameters::kGlobalIDFieldNumber;
const int SetAppParameters::kAppIDFieldNumber;
const int SetAppParameters::kSensorNameFieldNumber;
const int SetAppParameters::kSuperPriorityFieldNumber;
const int SetAppParameters::kApertureFieldNumber;
const int SetAppParameters::kTransceiverFieldNumber;
#endif  // !_MSC_VER

SetAppParameters::SetAppParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetAppParameters::InitAsDefaultInstance() {
}

SetAppParameters::SetAppParameters(const SetAppParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetAppParameters::SharedCtor() {
  _cached_size_ = 0;
  eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  soinum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  superpriority_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetAppParameters::~SetAppParameters() {
  SharedDtor();
}

void SetAppParameters::SharedDtor() {
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    delete eltex_;
  }
  if (soinum_ != &::google::protobuf::internal::kEmptyString) {
    delete soinum_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (this != default_instance_) {
  }
}

void SetAppParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetAppParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetAppParameters_descriptor_;
}

const SetAppParameters& SetAppParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

SetAppParameters* SetAppParameters::default_instance_ = NULL;

SetAppParameters* SetAppParameters::New() const {
  return new SetAppParameters;
}

void SetAppParameters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_eltex()) {
      if (eltex_ != &::google::protobuf::internal::kEmptyString) {
        eltex_->clear();
      }
    }
    if (has_soinum()) {
      if (soinum_ != &::google::protobuf::internal::kEmptyString) {
        soinum_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    appid_ = 0;
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
    superpriority_ = 0;
  }
  aperture_.Clear();
  transceiver_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetAppParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string eltex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eltex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eltex().data(), this->eltex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_soiNum;
        break;
      }

      // optional string soiNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soiNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soinum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soinum().data(), this->soinum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_globalID;
        break;
      }

      // optional string globalID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_appID;
        break;
      }

      // optional int32 appID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_superPriority;
        break;
      }

      // optional int32 superPriority = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_superPriority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &superpriority_)));
          set_has_superpriority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_aperture;
        break;
      }

      // repeated .fv.tb.protos.TBProtos.Aperture aperture = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aperture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aperture()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_aperture;
        if (input->ExpectTag(66)) goto parse_transceiver;
        break;
      }

      // repeated .fv.tb.protos.TBProtos.Transceiver transceiver = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transceiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transceiver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_transceiver;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetAppParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string eltex = 1;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->eltex(), output);
  }

  // optional string soiNum = 2;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->soinum(), output);
  }

  // optional string globalID = 3;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->globalid(), output);
  }

  // optional int32 appID = 4;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->appid(), output);
  }

  // optional string sensorName = 5;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sensorname(), output);
  }

  // optional int32 superPriority = 6;
  if (has_superpriority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->superpriority(), output);
  }

  // repeated .fv.tb.protos.TBProtos.Aperture aperture = 7;
  for (int i = 0; i < this->aperture_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->aperture(i), output);
  }

  // repeated .fv.tb.protos.TBProtos.Transceiver transceiver = 8;
  for (int i = 0; i < this->transceiver_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->transceiver(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetAppParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string eltex = 1;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->eltex(), target);
  }

  // optional string soiNum = 2;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->soinum(), target);
  }

  // optional string globalID = 3;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->globalid(), target);
  }

  // optional int32 appID = 4;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->appid(), target);
  }

  // optional string sensorName = 5;
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sensorname(), target);
  }

  // optional int32 superPriority = 6;
  if (has_superpriority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->superpriority(), target);
  }

  // repeated .fv.tb.protos.TBProtos.Aperture aperture = 7;
  for (int i = 0; i < this->aperture_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->aperture(i), target);
  }

  // repeated .fv.tb.protos.TBProtos.Transceiver transceiver = 8;
  for (int i = 0; i < this->transceiver_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->transceiver(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetAppParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string eltex = 1;
    if (has_eltex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eltex());
    }

    // optional string soiNum = 2;
    if (has_soinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soinum());
    }

    // optional string globalID = 3;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional int32 appID = 4;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional string sensorName = 5;
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

    // optional int32 superPriority = 6;
    if (has_superpriority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->superpriority());
    }

  }
  // repeated .fv.tb.protos.TBProtos.Aperture aperture = 7;
  total_size += 1 * this->aperture_size();
  for (int i = 0; i < this->aperture_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aperture(i));
  }

  // repeated .fv.tb.protos.TBProtos.Transceiver transceiver = 8;
  total_size += 1 * this->transceiver_size();
  for (int i = 0; i < this->transceiver_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transceiver(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetAppParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetAppParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetAppParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetAppParameters::MergeFrom(const SetAppParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  aperture_.MergeFrom(from.aperture_);
  transceiver_.MergeFrom(from.transceiver_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eltex()) {
      set_eltex(from.eltex());
    }
    if (from.has_soinum()) {
      set_soinum(from.soinum());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
    if (from.has_superpriority()) {
      set_superpriority(from.superpriority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetAppParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAppParameters::CopyFrom(const SetAppParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAppParameters::IsInitialized() const {

  return true;
}

void SetAppParameters::Swap(SetAppParameters* other) {
  if (other != this) {
    std::swap(eltex_, other->eltex_);
    std::swap(soinum_, other->soinum_);
    std::swap(globalid_, other->globalid_);
    std::swap(appid_, other->appid_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(superpriority_, other->superpriority_);
    aperture_.Swap(&other->aperture_);
    transceiver_.Swap(&other->transceiver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetAppParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetAppParameters_descriptor_;
  metadata.reflection = SetAppParameters_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MissionMode_Mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionMode_Mode_descriptor_;
}
bool MissionMode_Mode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MissionMode_Mode MissionMode::SEARCH;
const MissionMode_Mode MissionMode::AUTO;
const MissionMode_Mode MissionMode::TRACE;
const MissionMode_Mode MissionMode::Mode_MIN;
const MissionMode_Mode MissionMode::Mode_MAX;
const int MissionMode::Mode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MissionMode::kModeFieldNumber;
#endif  // !_MSC_VER

MissionMode::MissionMode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionMode::InitAsDefaultInstance() {
}

MissionMode::MissionMode(const MissionMode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionMode::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionMode::~MissionMode() {
  SharedDtor();
}

void MissionMode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionMode_descriptor_;
}

const MissionMode& MissionMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

MissionMode* MissionMode::default_instance_ = NULL;

MissionMode* MissionMode::New() const {
  return new MissionMode;
}

void MissionMode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fv.tb.protos.TBProtos.MissionMode.Mode mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fv::tb::protos::TBProtos::MissionMode_Mode_IsValid(value)) {
            set_mode(static_cast< ::fv::tb::protos::TBProtos::MissionMode_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fv.tb.protos.TBProtos.MissionMode.Mode mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionMode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fv.tb.protos.TBProtos.MissionMode.Mode mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionMode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fv.tb.protos.TBProtos.MissionMode.Mode mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionMode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionMode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionMode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionMode::MergeFrom(const MissionMode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionMode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionMode::CopyFrom(const MissionMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionMode::IsInitialized() const {

  return true;
}

void MissionMode::Swap(MissionMode* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionMode_descriptor_;
  metadata.reflection = MissionMode_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SignalEvent_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalEvent_Type_descriptor_;
}
bool SignalEvent_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SignalEvent_Type SignalEvent::SIGDET;
const SignalEvent_Type SignalEvent::SIGUP;
const SignalEvent_Type SignalEvent::SIGDOWN;
const SignalEvent_Type SignalEvent::SIGTIMEOUT;
const SignalEvent_Type SignalEvent::Type_MIN;
const SignalEvent_Type SignalEvent::Type_MAX;
const int SignalEvent::Type_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* SignalEvent::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SignalEvent::kMsgNameFieldNumber;
const int SignalEvent::kChannelFieldNumber;
const int SignalEvent::kEventTypeFieldNumber;
const int SignalEvent::kEventIDFieldNumber;
const int SignalEvent::kTimestampFieldNumber;
const int SignalEvent::kSoiNumFieldNumber;
const int SignalEvent::kRfMHzFieldNumber;
const int SignalEvent::kSubcarMHzFieldNumber;
const int SignalEvent::kExcurKHzFieldNumber;
const int SignalEvent::kAppIDFieldNumber;
const int SignalEvent::kAntNumFieldNumber;
const int SignalEvent::kAntAzFieldNumber;
const int SignalEvent::kAntElFieldNumber;
const int SignalEvent::kGlobalIDFieldNumber;
const int SignalEvent::kScryptFieldNumber;
const int SignalEvent::kExportPortFieldNumber;
const int SignalEvent::kEltexFieldNumber;
const int SignalEvent::kBwMHzFieldNumber;
const int SignalEvent::kSensorNameFieldNumber;
#endif  // !_MSC_VER

SignalEvent::SignalEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalEvent::InitAsDefaultInstance() {
}

SignalEvent::SignalEvent(const SignalEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalEvent::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  eventtype_ = 0;
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  soinum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rfmhz_ = 0;
  subcarmhz_ = 0;
  excurkhz_ = 0;
  appid_ = 0;
  antnum_ = 0;
  antaz_ = 0;
  antel_ = 0;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exportport_ = 0;
  eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bwmhz_ = 0;
  sensorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalEvent::~SignalEvent() {
  SharedDtor();
}

void SignalEvent::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (soinum_ != &::google::protobuf::internal::kEmptyString) {
    delete soinum_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (scrypt_ != &::google::protobuf::internal::kEmptyString) {
    delete scrypt_;
  }
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    delete eltex_;
  }
  if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
    delete sensorname_;
  }
  if (this != default_instance_) {
  }
}

void SignalEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalEvent_descriptor_;
}

const SignalEvent& SignalEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

SignalEvent* SignalEvent::default_instance_ = NULL;

SignalEvent* SignalEvent::New() const {
  return new SignalEvent;
}

void SignalEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    eventtype_ = 0;
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    if (has_soinum()) {
      if (soinum_ != &::google::protobuf::internal::kEmptyString) {
        soinum_->clear();
      }
    }
    rfmhz_ = 0;
    subcarmhz_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    excurkhz_ = 0;
    appid_ = 0;
    antnum_ = 0;
    antaz_ = 0;
    antel_ = 0;
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    if (has_scrypt()) {
      if (scrypt_ != &::google::protobuf::internal::kEmptyString) {
        scrypt_->clear();
      }
    }
    exportport_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_eltex()) {
      if (eltex_ != &::google::protobuf::internal::kEmptyString) {
        eltex_->clear();
      }
    }
    bwmhz_ = 0;
    if (has_sensorname()) {
      if (sensorname_ != &::google::protobuf::internal::kEmptyString) {
        sensorname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SIGNAL_EVENT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eventType;
        break;
      }

      // optional .fv.tb.protos.TBProtos.SignalEvent.Type eventType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fv::tb::protos::TBProtos::SignalEvent_Type_IsValid(value)) {
            set_eventtype(static_cast< ::fv::tb::protos::TBProtos::SignalEvent_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_eventID;
        break;
      }

      // optional string eventID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_soiNum;
        break;
      }

      // optional string soiNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soiNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soinum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soinum().data(), this->soinum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_rfMHz;
        break;
      }

      // optional float rfMHz = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rfMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rfmhz_)));
          set_has_rfmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_subcarMHz;
        break;
      }

      // optional float subcarMHz = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_subcarMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &subcarmhz_)));
          set_has_subcarmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_excurKHz;
        break;
      }

      // optional float excurKHz = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_excurKHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &excurkhz_)));
          set_has_excurkhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_appID;
        break;
      }

      // optional int32 appID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_antNum;
        break;
      }

      // optional int32 antNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_antNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &antnum_)));
          set_has_antnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_antAz;
        break;
      }

      // optional float antAz = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_antAz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &antaz_)));
          set_has_antaz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_antEl;
        break;
      }

      // optional float antEl = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_antEl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &antel_)));
          set_has_antel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_globalID;
        break;
      }

      // optional string globalID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_scrypt;
        break;
      }

      // optional string scrypt = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scrypt().data(), this->scrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_exportPort;
        break;
      }

      // optional int32 exportPort = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exportPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exportport_)));
          set_has_exportport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_eltex;
        break;
      }

      // optional string eltex = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eltex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eltex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eltex().data(), this->eltex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_bwMHz;
        break;
      }

      // optional float bwMHz = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bwMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bwmhz_)));
          set_has_bwmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 19 [default = ""];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SIGNAL_EVENT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional .fv.tb.protos.TBProtos.SignalEvent.Type eventType = 3;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->eventtype(), output);
  }

  // optional string eventID = 4;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->eventid(), output);
  }

  // optional string timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->timestamp(), output);
  }

  // optional string soiNum = 6;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->soinum(), output);
  }

  // optional float rfMHz = 7;
  if (has_rfmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->rfmhz(), output);
  }

  // optional float subcarMHz = 8;
  if (has_subcarmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->subcarmhz(), output);
  }

  // optional float excurKHz = 9;
  if (has_excurkhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->excurkhz(), output);
  }

  // optional int32 appID = 10;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->appid(), output);
  }

  // optional int32 antNum = 11;
  if (has_antnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->antnum(), output);
  }

  // optional float antAz = 12 [default = 0];
  if (has_antaz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->antaz(), output);
  }

  // optional float antEl = 13 [default = 0];
  if (has_antel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->antel(), output);
  }

  // optional string globalID = 14;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->globalid(), output);
  }

  // optional string scrypt = 15;
  if (has_scrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scrypt().data(), this->scrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->scrypt(), output);
  }

  // optional int32 exportPort = 16;
  if (has_exportport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->exportport(), output);
  }

  // optional string eltex = 17;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->eltex(), output);
  }

  // optional float bwMHz = 18;
  if (has_bwmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->bwmhz(), output);
  }

  // optional string sensorName = 19 [default = ""];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->sensorname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SIGNAL_EVENT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional .fv.tb.protos.TBProtos.SignalEvent.Type eventType = 3;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->eventtype(), target);
  }

  // optional string eventID = 4;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->eventid(), target);
  }

  // optional string timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->timestamp(), target);
  }

  // optional string soiNum = 6;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->soinum(), target);
  }

  // optional float rfMHz = 7;
  if (has_rfmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->rfmhz(), target);
  }

  // optional float subcarMHz = 8;
  if (has_subcarmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->subcarmhz(), target);
  }

  // optional float excurKHz = 9;
  if (has_excurkhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->excurkhz(), target);
  }

  // optional int32 appID = 10;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->appid(), target);
  }

  // optional int32 antNum = 11;
  if (has_antnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->antnum(), target);
  }

  // optional float antAz = 12 [default = 0];
  if (has_antaz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->antaz(), target);
  }

  // optional float antEl = 13 [default = 0];
  if (has_antel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->antel(), target);
  }

  // optional string globalID = 14;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->globalid(), target);
  }

  // optional string scrypt = 15;
  if (has_scrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scrypt().data(), this->scrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->scrypt(), target);
  }

  // optional int32 exportPort = 16;
  if (has_exportport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->exportport(), target);
  }

  // optional string eltex = 17;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->eltex(), target);
  }

  // optional float bwMHz = 18;
  if (has_bwmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->bwmhz(), target);
  }

  // optional string sensorName = 19 [default = ""];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->sensorname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SIGNAL_EVENT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional .fv.tb.protos.TBProtos.SignalEvent.Type eventType = 3;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
    }

    // optional string eventID = 4;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

    // optional string timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional string soiNum = 6;
    if (has_soinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soinum());
    }

    // optional float rfMHz = 7;
    if (has_rfmhz()) {
      total_size += 1 + 4;
    }

    // optional float subcarMHz = 8;
    if (has_subcarmhz()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float excurKHz = 9;
    if (has_excurkhz()) {
      total_size += 1 + 4;
    }

    // optional int32 appID = 10;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional int32 antNum = 11;
    if (has_antnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->antnum());
    }

    // optional float antAz = 12 [default = 0];
    if (has_antaz()) {
      total_size += 1 + 4;
    }

    // optional float antEl = 13 [default = 0];
    if (has_antel()) {
      total_size += 1 + 4;
    }

    // optional string globalID = 14;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional string scrypt = 15;
    if (has_scrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scrypt());
    }

    // optional int32 exportPort = 16;
    if (has_exportport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exportport());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string eltex = 17;
    if (has_eltex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eltex());
    }

    // optional float bwMHz = 18;
    if (has_bwmhz()) {
      total_size += 2 + 4;
    }

    // optional string sensorName = 19 [default = ""];
    if (has_sensorname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalEvent::MergeFrom(const SignalEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_soinum()) {
      set_soinum(from.soinum());
    }
    if (from.has_rfmhz()) {
      set_rfmhz(from.rfmhz());
    }
    if (from.has_subcarmhz()) {
      set_subcarmhz(from.subcarmhz());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_excurkhz()) {
      set_excurkhz(from.excurkhz());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_antnum()) {
      set_antnum(from.antnum());
    }
    if (from.has_antaz()) {
      set_antaz(from.antaz());
    }
    if (from.has_antel()) {
      set_antel(from.antel());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_scrypt()) {
      set_scrypt(from.scrypt());
    }
    if (from.has_exportport()) {
      set_exportport(from.exportport());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_eltex()) {
      set_eltex(from.eltex());
    }
    if (from.has_bwmhz()) {
      set_bwmhz(from.bwmhz());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalEvent::CopyFrom(const SignalEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalEvent::IsInitialized() const {

  return true;
}

void SignalEvent::Swap(SignalEvent* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(eventid_, other->eventid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(soinum_, other->soinum_);
    std::swap(rfmhz_, other->rfmhz_);
    std::swap(subcarmhz_, other->subcarmhz_);
    std::swap(excurkhz_, other->excurkhz_);
    std::swap(appid_, other->appid_);
    std::swap(antnum_, other->antnum_);
    std::swap(antaz_, other->antaz_);
    std::swap(antel_, other->antel_);
    std::swap(globalid_, other->globalid_);
    std::swap(scrypt_, other->scrypt_);
    std::swap(exportport_, other->exportport_);
    std::swap(eltex_, other->eltex_);
    std::swap(bwmhz_, other->bwmhz_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalEvent_descriptor_;
  metadata.reflection = SignalEvent_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TxSignalParams::_default_msgname_ = NULL;
::std::string* TxSignalParams::_default_config_ = NULL;
#ifndef _MSC_VER
const int TxSignalParams::kMsgNameFieldNumber;
const int TxSignalParams::kSigNameFieldNumber;
const int TxSignalParams::kFileNameFieldNumber;
const int TxSignalParams::kSampleRateMHzFieldNumber;
const int TxSignalParams::kCenterFreqFieldNumber;
const int TxSignalParams::kConfigFieldNumber;
#endif  // !_MSC_VER

TxSignalParams::TxSignalParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxSignalParams::InitAsDefaultInstance() {
}

TxSignalParams::TxSignalParams(const TxSignalParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxSignalParams::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  signame_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sampleratemhz_ = 25;
  centerfreq_ = 915;
  config_ = const_cast< ::std::string*>(_default_config_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxSignalParams::~TxSignalParams() {
  SharedDtor();
}

void TxSignalParams::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (signame_ != &::google::protobuf::internal::kEmptyString) {
    delete signame_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (config_ != _default_config_) {
    delete config_;
  }
  if (this != default_instance_) {
  }
}

void TxSignalParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxSignalParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxSignalParams_descriptor_;
}

const TxSignalParams& TxSignalParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

TxSignalParams* TxSignalParams::default_instance_ = NULL;

TxSignalParams* TxSignalParams::New() const {
  return new TxSignalParams;
}

void TxSignalParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_signame()) {
      if (signame_ != &::google::protobuf::internal::kEmptyString) {
        signame_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    sampleratemhz_ = 25;
    centerfreq_ = 915;
    if (has_config()) {
      if (config_ != _default_config_) {
        config_->assign(*_default_config_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxSignalParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TX_SIGNAL_PARAMS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sigName;
        break;
      }

      // optional string sigName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signame()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signame().data(), this->signame().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fileName;
        break;
      }

      // optional string fileName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_sampleRateMHz;
        break;
      }

      // optional float sampleRateMHz = 4 [default = 25];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sampleRateMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sampleratemhz_)));
          set_has_sampleratemhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_centerFreq;
        break;
      }

      // optional double centerFreq = 5 [default = 915];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_centerFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerfreq_)));
          set_has_centerfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_config;
        break;
      }

      // optional string config = 6 [default = "CONFIG"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxSignalParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TX_SIGNAL_PARAMS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string sigName = 2;
  if (has_signame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signame().data(), this->signame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->signame(), output);
  }

  // optional string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(), output);
  }

  // optional float sampleRateMHz = 4 [default = 25];
  if (has_sampleratemhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sampleratemhz(), output);
  }

  // optional double centerFreq = 5 [default = 915];
  if (has_centerfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->centerfreq(), output);
  }

  // optional string config = 6 [default = "CONFIG"];
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxSignalParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TX_SIGNAL_PARAMS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string sigName = 2;
  if (has_signame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signame().data(), this->signame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signame(), target);
  }

  // optional string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // optional float sampleRateMHz = 4 [default = 25];
  if (has_sampleratemhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sampleratemhz(), target);
  }

  // optional double centerFreq = 5 [default = 915];
  if (has_centerfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->centerfreq(), target);
  }

  // optional string config = 6 [default = "CONFIG"];
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxSignalParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TX_SIGNAL_PARAMS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string sigName = 2;
    if (has_signame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signame());
    }

    // optional string fileName = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional float sampleRateMHz = 4 [default = 25];
    if (has_sampleratemhz()) {
      total_size += 1 + 4;
    }

    // optional double centerFreq = 5 [default = 915];
    if (has_centerfreq()) {
      total_size += 1 + 8;
    }

    // optional string config = 6 [default = "CONFIG"];
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxSignalParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxSignalParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxSignalParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxSignalParams::MergeFrom(const TxSignalParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_signame()) {
      set_signame(from.signame());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_sampleratemhz()) {
      set_sampleratemhz(from.sampleratemhz());
    }
    if (from.has_centerfreq()) {
      set_centerfreq(from.centerfreq());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxSignalParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxSignalParams::CopyFrom(const TxSignalParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxSignalParams::IsInitialized() const {

  return true;
}

void TxSignalParams::Swap(TxSignalParams* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(signame_, other->signame_);
    std::swap(filename_, other->filename_);
    std::swap(sampleratemhz_, other->sampleratemhz_);
    std::swap(centerfreq_, other->centerfreq_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxSignalParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxSignalParams_descriptor_;
  metadata.reflection = TxSignalParams_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TxFileStatus::_default_msgname_ = NULL;
::std::string* TxFileStatus::_default_config_ = NULL;
#ifndef _MSC_VER
const int TxFileStatus::kMsgNameFieldNumber;
const int TxFileStatus::kSigNameFieldNumber;
const int TxFileStatus::kFileNameFieldNumber;
const int TxFileStatus::kConfigFieldNumber;
#endif  // !_MSC_VER

TxFileStatus::TxFileStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxFileStatus::InitAsDefaultInstance() {
}

TxFileStatus::TxFileStatus(const TxFileStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxFileStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  signame_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  config_ = const_cast< ::std::string*>(_default_config_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxFileStatus::~TxFileStatus() {
  SharedDtor();
}

void TxFileStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (signame_ != &::google::protobuf::internal::kEmptyString) {
    delete signame_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (config_ != _default_config_) {
    delete config_;
  }
  if (this != default_instance_) {
  }
}

void TxFileStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxFileStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxFileStatus_descriptor_;
}

const TxFileStatus& TxFileStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

TxFileStatus* TxFileStatus::default_instance_ = NULL;

TxFileStatus* TxFileStatus::New() const {
  return new TxFileStatus;
}

void TxFileStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_signame()) {
      if (signame_ != &::google::protobuf::internal::kEmptyString) {
        signame_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_config()) {
      if (config_ != _default_config_) {
        config_->assign(*_default_config_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxFileStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TX_FILE_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sigName;
        break;
      }

      // optional string sigName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signame()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signame().data(), this->signame().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fileName;
        break;
      }

      // optional string fileName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_config;
        break;
      }

      // optional string config = 4 [default = "CONFIG"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxFileStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TX_FILE_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string sigName = 2;
  if (has_signame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signame().data(), this->signame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->signame(), output);
  }

  // optional string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(), output);
  }

  // optional string config = 4 [default = "CONFIG"];
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxFileStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TX_FILE_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string sigName = 2;
  if (has_signame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signame().data(), this->signame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signame(), target);
  }

  // optional string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // optional string config = 4 [default = "CONFIG"];
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxFileStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TX_FILE_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string sigName = 2;
    if (has_signame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signame());
    }

    // optional string fileName = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string config = 4 [default = "CONFIG"];
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxFileStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxFileStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxFileStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxFileStatus::MergeFrom(const TxFileStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_signame()) {
      set_signame(from.signame());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxFileStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxFileStatus::CopyFrom(const TxFileStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxFileStatus::IsInitialized() const {

  return true;
}

void TxFileStatus::Swap(TxFileStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(signame_, other->signame_);
    std::swap(filename_, other->filename_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxFileStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxFileStatus_descriptor_;
  metadata.reflection = TxFileStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* CalibrationTimingResult::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int CalibrationTimingResult::kMsgNameFieldNumber;
const int CalibrationTimingResult::kWholeSecondsFieldNumber;
const int CalibrationTimingResult::kFracSecondsFieldNumber;
const int CalibrationTimingResult::kTransmittedByChannelFieldNumber;
const int CalibrationTimingResult::kReceivedByChannelFieldNumber;
#endif  // !_MSC_VER

CalibrationTimingResult::CalibrationTimingResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalibrationTimingResult::InitAsDefaultInstance() {
}

CalibrationTimingResult::CalibrationTimingResult(const CalibrationTimingResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalibrationTimingResult::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  wholeseconds_ = 0;
  fracseconds_ = 0;
  transmittedbychannel_ = 0;
  receivedbychannel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalibrationTimingResult::~CalibrationTimingResult() {
  SharedDtor();
}

void CalibrationTimingResult::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void CalibrationTimingResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationTimingResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalibrationTimingResult_descriptor_;
}

const CalibrationTimingResult& CalibrationTimingResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ThunderbirdMessages_2eproto();
  return *default_instance_;
}

CalibrationTimingResult* CalibrationTimingResult::default_instance_ = NULL;

CalibrationTimingResult* CalibrationTimingResult::New() const {
  return new CalibrationTimingResult;
}

void CalibrationTimingResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    wholeseconds_ = 0;
    fracseconds_ = 0;
    transmittedbychannel_ = 0;
    receivedbychannel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalibrationTimingResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "CALIBRATIONTIMINGRESULT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_wholeSeconds;
        break;
      }

      // optional double wholeSeconds = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_wholeSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wholeseconds_)));
          set_has_wholeseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_fracSeconds;
        break;
      }

      // optional double fracSeconds = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fracSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fracseconds_)));
          set_has_fracseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_transmittedByChannel;
        break;
      }

      // optional int32 transmittedByChannel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transmittedByChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transmittedbychannel_)));
          set_has_transmittedbychannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_receivedByChannel;
        break;
      }

      // optional int32 receivedByChannel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivedByChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receivedbychannel_)));
          set_has_receivedbychannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalibrationTimingResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "CALIBRATIONTIMINGRESULT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double wholeSeconds = 2 [default = 0];
  if (has_wholeseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->wholeseconds(), output);
  }

  // optional double fracSeconds = 3 [default = 0];
  if (has_fracseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fracseconds(), output);
  }

  // optional int32 transmittedByChannel = 4;
  if (has_transmittedbychannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->transmittedbychannel(), output);
  }

  // optional int32 receivedByChannel = 5;
  if (has_receivedbychannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->receivedbychannel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalibrationTimingResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "CALIBRATIONTIMINGRESULT"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double wholeSeconds = 2 [default = 0];
  if (has_wholeseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->wholeseconds(), target);
  }

  // optional double fracSeconds = 3 [default = 0];
  if (has_fracseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fracseconds(), target);
  }

  // optional int32 transmittedByChannel = 4;
  if (has_transmittedbychannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->transmittedbychannel(), target);
  }

  // optional int32 receivedByChannel = 5;
  if (has_receivedbychannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->receivedbychannel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalibrationTimingResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "CALIBRATIONTIMINGRESULT"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double wholeSeconds = 2 [default = 0];
    if (has_wholeseconds()) {
      total_size += 1 + 8;
    }

    // optional double fracSeconds = 3 [default = 0];
    if (has_fracseconds()) {
      total_size += 1 + 8;
    }

    // optional int32 transmittedByChannel = 4;
    if (has_transmittedbychannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transmittedbychannel());
    }

    // optional int32 receivedByChannel = 5;
    if (has_receivedbychannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receivedbychannel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationTimingResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalibrationTimingResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalibrationTimingResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalibrationTimingResult::MergeFrom(const CalibrationTimingResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_wholeseconds()) {
      set_wholeseconds(from.wholeseconds());
    }
    if (from.has_fracseconds()) {
      set_fracseconds(from.fracseconds());
    }
    if (from.has_transmittedbychannel()) {
      set_transmittedbychannel(from.transmittedbychannel());
    }
    if (from.has_receivedbychannel()) {
      set_receivedbychannel(from.receivedbychannel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalibrationTimingResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationTimingResult::CopyFrom(const CalibrationTimingResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationTimingResult::IsInitialized() const {

  return true;
}

void CalibrationTimingResult::Swap(CalibrationTimingResult* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(wholeseconds_, other->wholeseconds_);
    std::swap(fracseconds_, other->fracseconds_);
    std::swap(transmittedbychannel_, other->transmittedbychannel_);
    std::swap(receivedbychannel_, other->receivedbychannel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalibrationTimingResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalibrationTimingResult_descriptor_;
  metadata.reflection = CalibrationTimingResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TBProtos
}  // namespace protos
}  // namespace tb
}  // namespace fv

// @@protoc_insertion_point(global_scope)
