// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BitManifestMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BitManifestMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace srcinc {
namespace ngi {
namespace data {

namespace {

const ::google::protobuf::Descriptor* BitManifest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitManifest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BitManifest_BitProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitManifest_BitProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* BitManifest_BitProperty_Thresholds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitManifest_BitProperty_Thresholds_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BitManifest_BitProperty_Units_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BitManifest_BitProperty_Types_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BitManifest_BitNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitManifest_BitNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* BitManifestTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitManifestTopic_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BitManifestMessage_2eproto() {
  protobuf_AddDesc_BitManifestMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BitManifestMessage.proto");
  GOOGLE_CHECK(file != NULL);
  BitManifest_descriptor_ = file->message_type(0);
  static const int BitManifest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest, root_node_),
  };
  BitManifest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BitManifest_descriptor_,
      BitManifest::default_instance_,
      BitManifest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BitManifest));
  BitManifest_BitProperty_descriptor_ = BitManifest_descriptor_->nested_type(0);
  static const int BitManifest_BitProperty_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitProperty, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitProperty, display_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitProperty, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitProperty, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitProperty, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitProperty, min_user_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitProperty, thresholds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitProperty, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitProperty, history_length_),
  };
  BitManifest_BitProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BitManifest_BitProperty_descriptor_,
      BitManifest_BitProperty::default_instance_,
      BitManifest_BitProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BitManifest_BitProperty));
  BitManifest_BitProperty_Thresholds_descriptor_ = BitManifest_BitProperty_descriptor_->nested_type(0);
  static const int BitManifest_BitProperty_Thresholds_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitProperty_Thresholds, max_faulted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitProperty_Thresholds, max_degraded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitProperty_Thresholds, min_degraded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitProperty_Thresholds, min_faulted_),
  };
  BitManifest_BitProperty_Thresholds_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BitManifest_BitProperty_Thresholds_descriptor_,
      BitManifest_BitProperty_Thresholds::default_instance_,
      BitManifest_BitProperty_Thresholds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitProperty_Thresholds, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitProperty_Thresholds, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BitManifest_BitProperty_Thresholds));
  BitManifest_BitProperty_Units_descriptor_ = BitManifest_BitProperty_descriptor_->enum_type(0);
  BitManifest_BitProperty_Types_descriptor_ = BitManifest_BitProperty_descriptor_->enum_type(1);
  BitManifest_BitNode_descriptor_ = BitManifest_descriptor_->nested_type(1);
  static const int BitManifest_BitNode_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitNode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitNode, display_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitNode, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitNode, user_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitNode, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitNode, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitNode, is_top_level_status_),
  };
  BitManifest_BitNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BitManifest_BitNode_descriptor_,
      BitManifest_BitNode::default_instance_,
      BitManifest_BitNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifest_BitNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BitManifest_BitNode));
  BitManifestTopic_descriptor_ = file->message_type(1);
  static const int BitManifestTopic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifestTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifestTopic, bit_manifest_),
  };
  BitManifestTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BitManifestTopic_descriptor_,
      BitManifestTopic::default_instance_,
      BitManifestTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifestTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitManifestTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BitManifestTopic));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BitManifestMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BitManifest_descriptor_, &BitManifest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BitManifest_BitProperty_descriptor_, &BitManifest_BitProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BitManifest_BitProperty_Thresholds_descriptor_, &BitManifest_BitProperty_Thresholds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BitManifest_BitNode_descriptor_, &BitManifest_BitNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BitManifestTopic_descriptor_, &BitManifestTopic::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BitManifestMessage_2eproto() {
  delete BitManifest::default_instance_;
  delete BitManifest_reflection_;
  delete BitManifest_BitProperty::default_instance_;
  delete BitManifest_BitProperty_reflection_;
  delete BitManifest_BitProperty_Thresholds::default_instance_;
  delete BitManifest_BitProperty_Thresholds_reflection_;
  delete BitManifest_BitNode::default_instance_;
  delete BitManifest_BitNode_reflection_;
  delete BitManifestTopic::default_instance_;
  delete BitManifestTopic_reflection_;
}

void protobuf_AddDesc_BitManifestMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::srcinc::ngi::common::protobuf_AddDesc_Users_2eproto();
  ::service_infrastructure::protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030BitManifestMessage.proto\022\023com.srcinc.n"
    "gi.data\032\013Users.proto\032!ServiceInfrastruct"
    "ureCommon.proto\"\215\t\n\013BitManifest\022;\n\troot_"
    "node\030\001 \003(\0132(.com.srcinc.ngi.data.BitMani"
    "fest.BitNode\032\257\006\n\013BitProperty\022\n\n\002id\030\001 \002(\005"
    "\022\024\n\014display_name\030\002 \002(\t\022\023\n\013description\030\003 "
    "\001(\t\022A\n\005units\030\004 \001(\01622.com.srcinc.ngi.data"
    ".BitManifest.BitProperty.Units\022@\n\004type\030\005"
    " \001(\01622.com.srcinc.ngi.data.BitManifest.B"
    "itProperty.Types\0228\n\016min_user_level\030\006 \001(\016"
    "2 .com.srcinc.ngi.common.UserLevel\022K\n\nth"
    "resholds\030\007 \001(\01327.com.srcinc.ngi.data.Bit"
    "Manifest.BitProperty.Thresholds\022\022\n\ngroup"
    "_name\030\010 \001(\t\022\026\n\016history_length\030\t \001(\005\032b\n\nT"
    "hresholds\022\023\n\013max_faulted\030\001 \001(\001\022\024\n\014max_de"
    "graded\030\002 \001(\001\022\024\n\014min_degraded\030\003 \001(\001\022\023\n\013mi"
    "n_faulted\030\004 \001(\001\"\330\001\n\005Units\022\021\n\rUNITS_UNKNO"
    "WN\020\000\022\017\n\013UNITS_VOLTS\020\001\022\016\n\nUNITS_AMPS\020\002\022\014\n"
    "\010UNITS_DB\020\003\022\021\n\rUNITS_CELSIUS\020\004\022\014\n\010UNITS_"
    "HZ\020\005\022\022\n\016UNITS_TIMESPAN\020\006\022\022\n\016UNITS_TIMESP"
    "EC\020\007\022\021\n\rUNITS_RADIANS\020\010\022\016\n\nUNITS_KBPS\020\t\022"
    "\021\n\rUNITS_PERCENT\020\n\022\016\n\nUNITS_ECEF\020\013\"r\n\005Ty"
    "pes\022\020\n\014TYPE_UNKNOWN\020\000\022\r\n\tTYPE_BOOL\020\001\022\014\n\010"
    "TYPE_INT\020\002\022\017\n\013TYPE_DOUBLE\020\003\022\017\n\013TYPE_STRI"
    "NG\020\004\022\030\n\024TYPE_DOUBLE_REPEATED\020\005\032\216\002\n\007BitNo"
    "de\022\n\n\002id\030\001 \002(\005\022\024\n\014display_name\030\002 \002(\t\022\023\n\013"
    "description\030\003 \001(\t\0224\n\nuser_level\030\004 \001(\0162 ."
    "com.srcinc.ngi.common.UserLevel\022@\n\nprope"
    "rties\030\005 \003(\0132,.com.srcinc.ngi.data.BitMan"
    "ifest.BitProperty\0227\n\005nodes\030\006 \003(\0132(.com.s"
    "rcinc.ngi.data.BitManifest.BitNode\022\033\n\023is"
    "_top_level_status\030\007 \001(\010\"z\n\020BitManifestTo"
    "pic\022.\n\006header\030d \001(\0132\036.service_infrastruc"
    "ture.Header\0226\n\014bit_manifest\030\001 \001(\0132 .com."
    "srcinc.ngi.data.BitManifest", 1387);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BitManifestMessage.proto", &protobuf_RegisterTypes);
  BitManifest::default_instance_ = new BitManifest();
  BitManifest_BitProperty::default_instance_ = new BitManifest_BitProperty();
  BitManifest_BitProperty_Thresholds::default_instance_ = new BitManifest_BitProperty_Thresholds();
  BitManifest_BitNode::default_instance_ = new BitManifest_BitNode();
  BitManifestTopic::default_instance_ = new BitManifestTopic();
  BitManifest::default_instance_->InitAsDefaultInstance();
  BitManifest_BitProperty::default_instance_->InitAsDefaultInstance();
  BitManifest_BitProperty_Thresholds::default_instance_->InitAsDefaultInstance();
  BitManifest_BitNode::default_instance_->InitAsDefaultInstance();
  BitManifestTopic::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BitManifestMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BitManifestMessage_2eproto {
  StaticDescriptorInitializer_BitManifestMessage_2eproto() {
    protobuf_AddDesc_BitManifestMessage_2eproto();
  }
} static_descriptor_initializer_BitManifestMessage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* BitManifest_BitProperty_Units_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitManifest_BitProperty_Units_descriptor_;
}
bool BitManifest_BitProperty_Units_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BitManifest_BitProperty_Units BitManifest_BitProperty::UNITS_UNKNOWN;
const BitManifest_BitProperty_Units BitManifest_BitProperty::UNITS_VOLTS;
const BitManifest_BitProperty_Units BitManifest_BitProperty::UNITS_AMPS;
const BitManifest_BitProperty_Units BitManifest_BitProperty::UNITS_DB;
const BitManifest_BitProperty_Units BitManifest_BitProperty::UNITS_CELSIUS;
const BitManifest_BitProperty_Units BitManifest_BitProperty::UNITS_HZ;
const BitManifest_BitProperty_Units BitManifest_BitProperty::UNITS_TIMESPAN;
const BitManifest_BitProperty_Units BitManifest_BitProperty::UNITS_TIMESPEC;
const BitManifest_BitProperty_Units BitManifest_BitProperty::UNITS_RADIANS;
const BitManifest_BitProperty_Units BitManifest_BitProperty::UNITS_KBPS;
const BitManifest_BitProperty_Units BitManifest_BitProperty::UNITS_PERCENT;
const BitManifest_BitProperty_Units BitManifest_BitProperty::UNITS_ECEF;
const BitManifest_BitProperty_Units BitManifest_BitProperty::Units_MIN;
const BitManifest_BitProperty_Units BitManifest_BitProperty::Units_MAX;
const int BitManifest_BitProperty::Units_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BitManifest_BitProperty_Types_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitManifest_BitProperty_Types_descriptor_;
}
bool BitManifest_BitProperty_Types_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BitManifest_BitProperty_Types BitManifest_BitProperty::TYPE_UNKNOWN;
const BitManifest_BitProperty_Types BitManifest_BitProperty::TYPE_BOOL;
const BitManifest_BitProperty_Types BitManifest_BitProperty::TYPE_INT;
const BitManifest_BitProperty_Types BitManifest_BitProperty::TYPE_DOUBLE;
const BitManifest_BitProperty_Types BitManifest_BitProperty::TYPE_STRING;
const BitManifest_BitProperty_Types BitManifest_BitProperty::TYPE_DOUBLE_REPEATED;
const BitManifest_BitProperty_Types BitManifest_BitProperty::Types_MIN;
const BitManifest_BitProperty_Types BitManifest_BitProperty::Types_MAX;
const int BitManifest_BitProperty::Types_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BitManifest_BitProperty_Thresholds::kMaxFaultedFieldNumber;
const int BitManifest_BitProperty_Thresholds::kMaxDegradedFieldNumber;
const int BitManifest_BitProperty_Thresholds::kMinDegradedFieldNumber;
const int BitManifest_BitProperty_Thresholds::kMinFaultedFieldNumber;
#endif  // !_MSC_VER

BitManifest_BitProperty_Thresholds::BitManifest_BitProperty_Thresholds()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BitManifest_BitProperty_Thresholds::InitAsDefaultInstance() {
}

BitManifest_BitProperty_Thresholds::BitManifest_BitProperty_Thresholds(const BitManifest_BitProperty_Thresholds& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BitManifest_BitProperty_Thresholds::SharedCtor() {
  _cached_size_ = 0;
  max_faulted_ = 0;
  max_degraded_ = 0;
  min_degraded_ = 0;
  min_faulted_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitManifest_BitProperty_Thresholds::~BitManifest_BitProperty_Thresholds() {
  SharedDtor();
}

void BitManifest_BitProperty_Thresholds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BitManifest_BitProperty_Thresholds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitManifest_BitProperty_Thresholds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitManifest_BitProperty_Thresholds_descriptor_;
}

const BitManifest_BitProperty_Thresholds& BitManifest_BitProperty_Thresholds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BitManifestMessage_2eproto();
  return *default_instance_;
}

BitManifest_BitProperty_Thresholds* BitManifest_BitProperty_Thresholds::default_instance_ = NULL;

BitManifest_BitProperty_Thresholds* BitManifest_BitProperty_Thresholds::New() const {
  return new BitManifest_BitProperty_Thresholds;
}

void BitManifest_BitProperty_Thresholds::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_faulted_ = 0;
    max_degraded_ = 0;
    min_degraded_ = 0;
    min_faulted_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BitManifest_BitProperty_Thresholds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_faulted = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_faulted_)));
          set_has_max_faulted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_max_degraded;
        break;
      }

      // optional double max_degraded = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_degraded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_degraded_)));
          set_has_max_degraded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_min_degraded;
        break;
      }

      // optional double min_degraded = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_degraded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_degraded_)));
          set_has_min_degraded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_min_faulted;
        break;
      }

      // optional double min_faulted = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_faulted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_faulted_)));
          set_has_min_faulted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BitManifest_BitProperty_Thresholds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double max_faulted = 1;
  if (has_max_faulted()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_faulted(), output);
  }

  // optional double max_degraded = 2;
  if (has_max_degraded()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_degraded(), output);
  }

  // optional double min_degraded = 3;
  if (has_min_degraded()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_degraded(), output);
  }

  // optional double min_faulted = 4;
  if (has_min_faulted()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_faulted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BitManifest_BitProperty_Thresholds::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double max_faulted = 1;
  if (has_max_faulted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_faulted(), target);
  }

  // optional double max_degraded = 2;
  if (has_max_degraded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_degraded(), target);
  }

  // optional double min_degraded = 3;
  if (has_min_degraded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_degraded(), target);
  }

  // optional double min_faulted = 4;
  if (has_min_faulted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_faulted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BitManifest_BitProperty_Thresholds::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double max_faulted = 1;
    if (has_max_faulted()) {
      total_size += 1 + 8;
    }

    // optional double max_degraded = 2;
    if (has_max_degraded()) {
      total_size += 1 + 8;
    }

    // optional double min_degraded = 3;
    if (has_min_degraded()) {
      total_size += 1 + 8;
    }

    // optional double min_faulted = 4;
    if (has_min_faulted()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitManifest_BitProperty_Thresholds::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BitManifest_BitProperty_Thresholds* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BitManifest_BitProperty_Thresholds*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitManifest_BitProperty_Thresholds::MergeFrom(const BitManifest_BitProperty_Thresholds& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_faulted()) {
      set_max_faulted(from.max_faulted());
    }
    if (from.has_max_degraded()) {
      set_max_degraded(from.max_degraded());
    }
    if (from.has_min_degraded()) {
      set_min_degraded(from.min_degraded());
    }
    if (from.has_min_faulted()) {
      set_min_faulted(from.min_faulted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BitManifest_BitProperty_Thresholds::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitManifest_BitProperty_Thresholds::CopyFrom(const BitManifest_BitProperty_Thresholds& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitManifest_BitProperty_Thresholds::IsInitialized() const {

  return true;
}

void BitManifest_BitProperty_Thresholds::Swap(BitManifest_BitProperty_Thresholds* other) {
  if (other != this) {
    std::swap(max_faulted_, other->max_faulted_);
    std::swap(max_degraded_, other->max_degraded_);
    std::swap(min_degraded_, other->min_degraded_);
    std::swap(min_faulted_, other->min_faulted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BitManifest_BitProperty_Thresholds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitManifest_BitProperty_Thresholds_descriptor_;
  metadata.reflection = BitManifest_BitProperty_Thresholds_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BitManifest_BitProperty::kIdFieldNumber;
const int BitManifest_BitProperty::kDisplayNameFieldNumber;
const int BitManifest_BitProperty::kDescriptionFieldNumber;
const int BitManifest_BitProperty::kUnitsFieldNumber;
const int BitManifest_BitProperty::kTypeFieldNumber;
const int BitManifest_BitProperty::kMinUserLevelFieldNumber;
const int BitManifest_BitProperty::kThresholdsFieldNumber;
const int BitManifest_BitProperty::kGroupNameFieldNumber;
const int BitManifest_BitProperty::kHistoryLengthFieldNumber;
#endif  // !_MSC_VER

BitManifest_BitProperty::BitManifest_BitProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BitManifest_BitProperty::InitAsDefaultInstance() {
  thresholds_ = const_cast< ::com::srcinc::ngi::data::BitManifest_BitProperty_Thresholds*>(&::com::srcinc::ngi::data::BitManifest_BitProperty_Thresholds::default_instance());
}

BitManifest_BitProperty::BitManifest_BitProperty(const BitManifest_BitProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BitManifest_BitProperty::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  units_ = 0;
  type_ = 0;
  min_user_level_ = 0;
  thresholds_ = NULL;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  history_length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitManifest_BitProperty::~BitManifest_BitProperty() {
  SharedDtor();
}

void BitManifest_BitProperty::SharedDtor() {
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  if (this != default_instance_) {
    delete thresholds_;
  }
}

void BitManifest_BitProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitManifest_BitProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitManifest_BitProperty_descriptor_;
}

const BitManifest_BitProperty& BitManifest_BitProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BitManifestMessage_2eproto();
  return *default_instance_;
}

BitManifest_BitProperty* BitManifest_BitProperty::default_instance_ = NULL;

BitManifest_BitProperty* BitManifest_BitProperty::New() const {
  return new BitManifest_BitProperty;
}

void BitManifest_BitProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::kEmptyString) {
        display_name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    units_ = 0;
    type_ = 0;
    min_user_level_ = 0;
    if (has_thresholds()) {
      if (thresholds_ != NULL) thresholds_->::com::srcinc::ngi::data::BitManifest_BitProperty_Thresholds::Clear();
    }
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::kEmptyString) {
        group_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    history_length_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BitManifest_BitProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_display_name;
        break;
      }

      // required string display_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_units;
        break;
      }

      // optional .com.srcinc.ngi.data.BitManifest.BitProperty.Units units = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_units:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::srcinc::ngi::data::BitManifest_BitProperty_Units_IsValid(value)) {
            set_units(static_cast< ::com::srcinc::ngi::data::BitManifest_BitProperty_Units >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .com.srcinc.ngi.data.BitManifest.BitProperty.Types type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::srcinc::ngi::data::BitManifest_BitProperty_Types_IsValid(value)) {
            set_type(static_cast< ::com::srcinc::ngi::data::BitManifest_BitProperty_Types >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_min_user_level;
        break;
      }

      // optional .com.srcinc.ngi.common.UserLevel min_user_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_user_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::srcinc::ngi::common::UserLevel_IsValid(value)) {
            set_min_user_level(static_cast< ::com::srcinc::ngi::common::UserLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_thresholds;
        break;
      }

      // optional .com.srcinc.ngi.data.BitManifest.BitProperty.Thresholds thresholds = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thresholds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thresholds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_group_name;
        break;
      }

      // optional string group_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_history_length;
        break;
      }

      // optional int32 history_length = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_length_)));
          set_has_history_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BitManifest_BitProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string display_name = 2;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->display_name(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->description(), output);
  }

  // optional .com.srcinc.ngi.data.BitManifest.BitProperty.Units units = 4;
  if (has_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->units(), output);
  }

  // optional .com.srcinc.ngi.data.BitManifest.BitProperty.Types type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional .com.srcinc.ngi.common.UserLevel min_user_level = 6;
  if (has_min_user_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->min_user_level(), output);
  }

  // optional .com.srcinc.ngi.data.BitManifest.BitProperty.Thresholds thresholds = 7;
  if (has_thresholds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->thresholds(), output);
  }

  // optional string group_name = 8;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->group_name(), output);
  }

  // optional int32 history_length = 9;
  if (has_history_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->history_length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BitManifest_BitProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string display_name = 2;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional .com.srcinc.ngi.data.BitManifest.BitProperty.Units units = 4;
  if (has_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->units(), target);
  }

  // optional .com.srcinc.ngi.data.BitManifest.BitProperty.Types type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional .com.srcinc.ngi.common.UserLevel min_user_level = 6;
  if (has_min_user_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->min_user_level(), target);
  }

  // optional .com.srcinc.ngi.data.BitManifest.BitProperty.Thresholds thresholds = 7;
  if (has_thresholds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->thresholds(), target);
  }

  // optional string group_name = 8;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->group_name(), target);
  }

  // optional int32 history_length = 9;
  if (has_history_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->history_length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BitManifest_BitProperty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string display_name = 2;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .com.srcinc.ngi.data.BitManifest.BitProperty.Units units = 4;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->units());
    }

    // optional .com.srcinc.ngi.data.BitManifest.BitProperty.Types type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .com.srcinc.ngi.common.UserLevel min_user_level = 6;
    if (has_min_user_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->min_user_level());
    }

    // optional .com.srcinc.ngi.data.BitManifest.BitProperty.Thresholds thresholds = 7;
    if (has_thresholds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thresholds());
    }

    // optional string group_name = 8;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 history_length = 9;
    if (has_history_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->history_length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitManifest_BitProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BitManifest_BitProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BitManifest_BitProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitManifest_BitProperty::MergeFrom(const BitManifest_BitProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_units()) {
      set_units(from.units());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_min_user_level()) {
      set_min_user_level(from.min_user_level());
    }
    if (from.has_thresholds()) {
      mutable_thresholds()->::com::srcinc::ngi::data::BitManifest_BitProperty_Thresholds::MergeFrom(from.thresholds());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_history_length()) {
      set_history_length(from.history_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BitManifest_BitProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitManifest_BitProperty::CopyFrom(const BitManifest_BitProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitManifest_BitProperty::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BitManifest_BitProperty::Swap(BitManifest_BitProperty* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(display_name_, other->display_name_);
    std::swap(description_, other->description_);
    std::swap(units_, other->units_);
    std::swap(type_, other->type_);
    std::swap(min_user_level_, other->min_user_level_);
    std::swap(thresholds_, other->thresholds_);
    std::swap(group_name_, other->group_name_);
    std::swap(history_length_, other->history_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BitManifest_BitProperty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitManifest_BitProperty_descriptor_;
  metadata.reflection = BitManifest_BitProperty_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BitManifest_BitNode::kIdFieldNumber;
const int BitManifest_BitNode::kDisplayNameFieldNumber;
const int BitManifest_BitNode::kDescriptionFieldNumber;
const int BitManifest_BitNode::kUserLevelFieldNumber;
const int BitManifest_BitNode::kPropertiesFieldNumber;
const int BitManifest_BitNode::kNodesFieldNumber;
const int BitManifest_BitNode::kIsTopLevelStatusFieldNumber;
#endif  // !_MSC_VER

BitManifest_BitNode::BitManifest_BitNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BitManifest_BitNode::InitAsDefaultInstance() {
}

BitManifest_BitNode::BitManifest_BitNode(const BitManifest_BitNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BitManifest_BitNode::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_level_ = 0;
  is_top_level_status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitManifest_BitNode::~BitManifest_BitNode() {
  SharedDtor();
}

void BitManifest_BitNode::SharedDtor() {
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void BitManifest_BitNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitManifest_BitNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitManifest_BitNode_descriptor_;
}

const BitManifest_BitNode& BitManifest_BitNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BitManifestMessage_2eproto();
  return *default_instance_;
}

BitManifest_BitNode* BitManifest_BitNode::default_instance_ = NULL;

BitManifest_BitNode* BitManifest_BitNode::New() const {
  return new BitManifest_BitNode;
}

void BitManifest_BitNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::kEmptyString) {
        display_name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    user_level_ = 0;
    is_top_level_status_ = false;
  }
  properties_.Clear();
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BitManifest_BitNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_display_name;
        break;
      }

      // required string display_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_level;
        break;
      }

      // optional .com.srcinc.ngi.common.UserLevel user_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::srcinc::ngi::common::UserLevel_IsValid(value)) {
            set_user_level(static_cast< ::com::srcinc::ngi::common::UserLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_properties;
        break;
      }

      // repeated .com.srcinc.ngi.data.BitManifest.BitProperty properties = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_properties;
        if (input->ExpectTag(50)) goto parse_nodes;
        break;
      }

      // repeated .com.srcinc.ngi.data.BitManifest.BitNode nodes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nodes;
        if (input->ExpectTag(56)) goto parse_is_top_level_status;
        break;
      }

      // optional bool is_top_level_status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_top_level_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_top_level_status_)));
          set_has_is_top_level_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BitManifest_BitNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string display_name = 2;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->display_name(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->description(), output);
  }

  // optional .com.srcinc.ngi.common.UserLevel user_level = 4;
  if (has_user_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->user_level(), output);
  }

  // repeated .com.srcinc.ngi.data.BitManifest.BitProperty properties = 5;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->properties(i), output);
  }

  // repeated .com.srcinc.ngi.data.BitManifest.BitNode nodes = 6;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->nodes(i), output);
  }

  // optional bool is_top_level_status = 7;
  if (has_is_top_level_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_top_level_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BitManifest_BitNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string display_name = 2;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional .com.srcinc.ngi.common.UserLevel user_level = 4;
  if (has_user_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->user_level(), target);
  }

  // repeated .com.srcinc.ngi.data.BitManifest.BitProperty properties = 5;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->properties(i), target);
  }

  // repeated .com.srcinc.ngi.data.BitManifest.BitNode nodes = 6;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->nodes(i), target);
  }

  // optional bool is_top_level_status = 7;
  if (has_is_top_level_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_top_level_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BitManifest_BitNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string display_name = 2;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .com.srcinc.ngi.common.UserLevel user_level = 4;
    if (has_user_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_level());
    }

    // optional bool is_top_level_status = 7;
    if (has_is_top_level_status()) {
      total_size += 1 + 1;
    }

  }
  // repeated .com.srcinc.ngi.data.BitManifest.BitProperty properties = 5;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  // repeated .com.srcinc.ngi.data.BitManifest.BitNode nodes = 6;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitManifest_BitNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BitManifest_BitNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BitManifest_BitNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitManifest_BitNode::MergeFrom(const BitManifest_BitNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_user_level()) {
      set_user_level(from.user_level());
    }
    if (from.has_is_top_level_status()) {
      set_is_top_level_status(from.is_top_level_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BitManifest_BitNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitManifest_BitNode::CopyFrom(const BitManifest_BitNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitManifest_BitNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < properties_size(); i++) {
    if (!this->properties(i).IsInitialized()) return false;
  }
  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void BitManifest_BitNode::Swap(BitManifest_BitNode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(display_name_, other->display_name_);
    std::swap(description_, other->description_);
    std::swap(user_level_, other->user_level_);
    properties_.Swap(&other->properties_);
    nodes_.Swap(&other->nodes_);
    std::swap(is_top_level_status_, other->is_top_level_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BitManifest_BitNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitManifest_BitNode_descriptor_;
  metadata.reflection = BitManifest_BitNode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BitManifest::kRootNodeFieldNumber;
#endif  // !_MSC_VER

BitManifest::BitManifest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BitManifest::InitAsDefaultInstance() {
}

BitManifest::BitManifest(const BitManifest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BitManifest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitManifest::~BitManifest() {
  SharedDtor();
}

void BitManifest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BitManifest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitManifest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitManifest_descriptor_;
}

const BitManifest& BitManifest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BitManifestMessage_2eproto();
  return *default_instance_;
}

BitManifest* BitManifest::default_instance_ = NULL;

BitManifest* BitManifest::New() const {
  return new BitManifest;
}

void BitManifest::Clear() {
  root_node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BitManifest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.srcinc.ngi.data.BitManifest.BitNode root_node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_root_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_root_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_root_node;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BitManifest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.srcinc.ngi.data.BitManifest.BitNode root_node = 1;
  for (int i = 0; i < this->root_node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->root_node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BitManifest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.srcinc.ngi.data.BitManifest.BitNode root_node = 1;
  for (int i = 0; i < this->root_node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->root_node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BitManifest::ByteSize() const {
  int total_size = 0;

  // repeated .com.srcinc.ngi.data.BitManifest.BitNode root_node = 1;
  total_size += 1 * this->root_node_size();
  for (int i = 0; i < this->root_node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->root_node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitManifest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BitManifest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BitManifest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitManifest::MergeFrom(const BitManifest& from) {
  GOOGLE_CHECK_NE(&from, this);
  root_node_.MergeFrom(from.root_node_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BitManifest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitManifest::CopyFrom(const BitManifest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitManifest::IsInitialized() const {

  for (int i = 0; i < root_node_size(); i++) {
    if (!this->root_node(i).IsInitialized()) return false;
  }
  return true;
}

void BitManifest::Swap(BitManifest* other) {
  if (other != this) {
    root_node_.Swap(&other->root_node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BitManifest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitManifest_descriptor_;
  metadata.reflection = BitManifest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BitManifestTopic::kHeaderFieldNumber;
const int BitManifestTopic::kBitManifestFieldNumber;
#endif  // !_MSC_VER

BitManifestTopic::BitManifestTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BitManifestTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  bit_manifest_ = const_cast< ::com::srcinc::ngi::data::BitManifest*>(&::com::srcinc::ngi::data::BitManifest::default_instance());
}

BitManifestTopic::BitManifestTopic(const BitManifestTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BitManifestTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  bit_manifest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitManifestTopic::~BitManifestTopic() {
  SharedDtor();
}

void BitManifestTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete bit_manifest_;
  }
}

void BitManifestTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitManifestTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitManifestTopic_descriptor_;
}

const BitManifestTopic& BitManifestTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BitManifestMessage_2eproto();
  return *default_instance_;
}

BitManifestTopic* BitManifestTopic::default_instance_ = NULL;

BitManifestTopic* BitManifestTopic::New() const {
  return new BitManifestTopic;
}

void BitManifestTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_bit_manifest()) {
      if (bit_manifest_ != NULL) bit_manifest_->::com::srcinc::ngi::data::BitManifest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BitManifestTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.srcinc.ngi.data.BitManifest bit_manifest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bit_manifest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BitManifestTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.srcinc.ngi.data.BitManifest bit_manifest = 1;
  if (has_bit_manifest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bit_manifest(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BitManifestTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.srcinc.ngi.data.BitManifest bit_manifest = 1;
  if (has_bit_manifest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bit_manifest(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BitManifestTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .com.srcinc.ngi.data.BitManifest bit_manifest = 1;
    if (has_bit_manifest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bit_manifest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitManifestTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BitManifestTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BitManifestTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitManifestTopic::MergeFrom(const BitManifestTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_bit_manifest()) {
      mutable_bit_manifest()->::com::srcinc::ngi::data::BitManifest::MergeFrom(from.bit_manifest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BitManifestTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitManifestTopic::CopyFrom(const BitManifestTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitManifestTopic::IsInitialized() const {

  if (has_bit_manifest()) {
    if (!this->bit_manifest().IsInitialized()) return false;
  }
  return true;
}

void BitManifestTopic::Swap(BitManifestTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(bit_manifest_, other->bit_manifest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BitManifestTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitManifestTopic_descriptor_;
  metadata.reflection = BitManifestTopic_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace ngi
}  // namespace srcinc
}  // namespace com

// @@protoc_insertion_point(global_scope)
