// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FalconResourceMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FalconResourceMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace falcon_res_msg {

namespace {

const ::google::protobuf::Descriptor* DummyRcvConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DummyRcvConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PICConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PICConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* MMSConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MMSConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZACQConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZACQConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* USRPRxTxConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  USRPRxTxConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* EPIQRxTxConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EPIQRxTxConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RTLSDRConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RTLSDRConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* USRPRxConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  USRPRxConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PentekConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PentekConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PentekConfig_SiggenType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* USRPTxConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  USRPTxConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RFSwitchConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RFSwitchConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RFSwitchSerialConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RFSwitchSerialConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPSwitchConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPSwitchConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* AntennaConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AntennaConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotorRPMConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotorRPMConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotorProtatorConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotorProtatorConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotorProsistelConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotorProsistelConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotorEzrotorConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotorEzrotorConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotorHGIOConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotorHGIOConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotorESAConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotorESAConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DSSwitchConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DSSwitchConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DummyConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DummyConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* MMSXTConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MMSXTConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* AmpConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AmpConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FalconResourceMessages_2eproto() {
  protobuf_AddDesc_FalconResourceMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FalconResourceMessages.proto");
  GOOGLE_CHECK(file != NULL);
  DummyRcvConfig_descriptor_ = file->message_type(0);
  static const int DummyRcvConfig_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyRcvConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyRcvConfig, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyRcvConfig, baseaux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyRcvConfig, rx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyRcvConfig, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyRcvConfig, fs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyRcvConfig, minrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyRcvConfig, maxrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyRcvConfig, uniqrxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyRcvConfig, pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyRcvConfig, testdur_),
  };
  DummyRcvConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DummyRcvConfig_descriptor_,
      DummyRcvConfig::default_instance_,
      DummyRcvConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyRcvConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyRcvConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DummyRcvConfig));
  PICConfig_descriptor_ = file->message_type(1);
  static const int PICConfig_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICConfig, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICConfig, baseaux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICConfig, rx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICConfig, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICConfig, picflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICConfig, picside_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICConfig, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICConfig, fs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICConfig, minrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICConfig, maxrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICConfig, uniqrxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICConfig, pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICConfig, testdur_),
  };
  PICConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PICConfig_descriptor_,
      PICConfig::default_instance_,
      PICConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PICConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PICConfig));
  MMSConfig_descriptor_ = file->message_type(2);
  static const int MMSConfig_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, baseaux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, controlport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, dataport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, interfaceip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, receiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, fs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, minrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, maxrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, cal30abw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, cal5abw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, uniqrxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, testdur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, rfcuport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, rfcuip_),
  };
  MMSConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MMSConfig_descriptor_,
      MMSConfig::default_instance_,
      MMSConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MMSConfig));
  ZACQConfig_descriptor_ = file->message_type(3);
  static const int ZACQConfig_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZACQConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZACQConfig, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZACQConfig, baseaux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZACQConfig, rx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZACQConfig, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZACQConfig, fs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZACQConfig, minrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZACQConfig, maxrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZACQConfig, uniqrxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZACQConfig, pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZACQConfig, testdur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZACQConfig, initscript_),
  };
  ZACQConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZACQConfig_descriptor_,
      ZACQConfig::default_instance_,
      ZACQConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZACQConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZACQConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZACQConfig));
  USRPRxTxConfig_descriptor_ = file->message_type(4);
  static const int USRPRxTxConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxTxConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxTxConfig, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxTxConfig, baseaux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxTxConfig, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxTxConfig, minrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxTxConfig, maxrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxTxConfig, fs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxTxConfig, uniqrxid_),
  };
  USRPRxTxConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      USRPRxTxConfig_descriptor_,
      USRPRxTxConfig::default_instance_,
      USRPRxTxConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxTxConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxTxConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(USRPRxTxConfig));
  EPIQRxTxConfig_descriptor_ = file->message_type(5);
  static const int EPIQRxTxConfig_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EPIQRxTxConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EPIQRxTxConfig, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EPIQRxTxConfig, baseaux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EPIQRxTxConfig, controlport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EPIQRxTxConfig, rfport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EPIQRxTxConfig, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EPIQRxTxConfig, minrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EPIQRxTxConfig, maxrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EPIQRxTxConfig, fs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EPIQRxTxConfig, uniqrxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EPIQRxTxConfig, uniqtxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EPIQRxTxConfig, delayreset_),
  };
  EPIQRxTxConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EPIQRxTxConfig_descriptor_,
      EPIQRxTxConfig::default_instance_,
      EPIQRxTxConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EPIQRxTxConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EPIQRxTxConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EPIQRxTxConfig));
  RTLSDRConfig_descriptor_ = file->message_type(6);
  static const int RTLSDRConfig_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTLSDRConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTLSDRConfig, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTLSDRConfig, baseaux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTLSDRConfig, controlport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTLSDRConfig, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTLSDRConfig, minrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTLSDRConfig, maxrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTLSDRConfig, fs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTLSDRConfig, uniqrxid_),
  };
  RTLSDRConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RTLSDRConfig_descriptor_,
      RTLSDRConfig::default_instance_,
      RTLSDRConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTLSDRConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTLSDRConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RTLSDRConfig));
  USRPRxConfig_descriptor_ = file->message_type(7);
  static const int USRPRxConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxConfig, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxConfig, baseaux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxConfig, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxConfig, usrpchan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxConfig, minrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxConfig, maxrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxConfig, fs_),
  };
  USRPRxConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      USRPRxConfig_descriptor_,
      USRPRxConfig::default_instance_,
      USRPRxConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPRxConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(USRPRxConfig));
  PentekConfig_descriptor_ = file->message_type(8);
  static const int PentekConfig_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PentekConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PentekConfig, clkfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PentekConfig, dacinterp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PentekConfig, coreinterp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PentekConfig, basechan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PentekConfig, numbuffers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PentekConfig, freqshift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PentekConfig, siggenip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PentekConfig, siggentype_),
  };
  PentekConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PentekConfig_descriptor_,
      PentekConfig::default_instance_,
      PentekConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PentekConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PentekConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PentekConfig));
  PentekConfig_SiggenType_descriptor_ = PentekConfig_descriptor_->enum_type(0);
  USRPTxConfig_descriptor_ = file->message_type(9);
  static const int USRPTxConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPTxConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPTxConfig, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPTxConfig, usrpchan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPTxConfig, minrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPTxConfig, maxrf_),
  };
  USRPTxConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      USRPTxConfig_descriptor_,
      USRPTxConfig::default_instance_,
      USRPTxConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPTxConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRPTxConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(USRPTxConfig));
  RFSwitchConfig_descriptor_ = file->message_type(10);
  static const int RFSwitchConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFSwitchConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFSwitchConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFSwitchConfig, slavetimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFSwitchConfig, energyscansec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFSwitchConfig, energytracktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFSwitchConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFSwitchConfig, setonlaunch_),
  };
  RFSwitchConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RFSwitchConfig_descriptor_,
      RFSwitchConfig::default_instance_,
      RFSwitchConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFSwitchConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFSwitchConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RFSwitchConfig));
  RFSwitchSerialConfig_descriptor_ = file->message_type(11);
  static const int RFSwitchSerialConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFSwitchSerialConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFSwitchSerialConfig, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFSwitchSerialConfig, baud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFSwitchSerialConfig, slavetimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFSwitchSerialConfig, energyscansec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFSwitchSerialConfig, energytracktime_),
  };
  RFSwitchSerialConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RFSwitchSerialConfig_descriptor_,
      RFSwitchSerialConfig::default_instance_,
      RFSwitchSerialConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFSwitchSerialConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFSwitchSerialConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RFSwitchSerialConfig));
  CPSwitchConfig_descriptor_ = file->message_type(12);
  static const int CPSwitchConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPSwitchConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPSwitchConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPSwitchConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPSwitchConfig, slavetimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPSwitchConfig, energyscansec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPSwitchConfig, energytracktime_),
  };
  CPSwitchConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPSwitchConfig_descriptor_,
      CPSwitchConfig::default_instance_,
      CPSwitchConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPSwitchConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPSwitchConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPSwitchConfig));
  AntennaConfig_descriptor_ = file->message_type(13);
  static const int AntennaConfig_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaConfig, minrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaConfig, maxrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaConfig, fixedangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaConfig, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaConfig, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaConfig, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaConfig, beamwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaConfig, dwncnvtlo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaConfig, ssc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaConfig, band_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaConfig, polarization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaConfig, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaConfig, sightdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaConfig, noisetest_),
  };
  AntennaConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AntennaConfig_descriptor_,
      AntennaConfig::default_instance_,
      AntennaConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AntennaConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AntennaConfig));
  RotorRPMConfig_descriptor_ = file->message_type(14);
  static const int RotorRPMConfig_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, azoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, eloffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, hardlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, minscanangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, maxscanangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, minelevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, maxelevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, scanelevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, multicastrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, pointholdincrement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, energyscanspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, startdeviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, energytracktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, scanscrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, gpsserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, gpsupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, eldisabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, invertaz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, maxvelocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, dynamicvel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, slewenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, azcloseenough_),
  };
  RotorRPMConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotorRPMConfig_descriptor_,
      RotorRPMConfig::default_instance_,
      RotorRPMConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorRPMConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotorRPMConfig));
  RotorProtatorConfig_descriptor_ = file->message_type(15);
  static const int RotorProtatorConfig_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, azoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, hardlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, minscanangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, maxscanangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, multicastrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, pointholdincrement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, energyscanspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, startdeviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, energytracktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, scanscrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, gpsserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, gpsupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, azcloseenough_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, eldisabled_),
  };
  RotorProtatorConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotorProtatorConfig_descriptor_,
      RotorProtatorConfig::default_instance_,
      RotorProtatorConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProtatorConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotorProtatorConfig));
  RotorProsistelConfig_descriptor_ = file->message_type(16);
  static const int RotorProsistelConfig_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, azoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, hardlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, minscanangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, maxscanangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, multicastrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, pointholdincrement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, energyscanspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, startdeviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, energytracktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, scanscrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, gpsserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, gpsupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, azcloseenough_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, eldisabled_),
  };
  RotorProsistelConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotorProsistelConfig_descriptor_,
      RotorProsistelConfig::default_instance_,
      RotorProsistelConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorProsistelConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotorProsistelConfig));
  RotorEzrotorConfig_descriptor_ = file->message_type(17);
  static const int RotorEzrotorConfig_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, azoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, hardlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, minscanangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, maxscanangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, multicastrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, pointholdincrement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, energyscanspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, startdeviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, energytracktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, scanscrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, gpsserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, gpsupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, azcloseenough_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, eldisabled_),
  };
  RotorEzrotorConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotorEzrotorConfig_descriptor_,
      RotorEzrotorConfig::default_instance_,
      RotorEzrotorConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorEzrotorConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotorEzrotorConfig));
  RotorHGIOConfig_descriptor_ = file->message_type(18);
  static const int RotorHGIOConfig_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, azoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, hardlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, minscanangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, maxscanangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, minelevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, maxelevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, scanelevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, multicastrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, pointholdincrement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, energyscanspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, startdeviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, energytracktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, usegps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, scanscrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, gpsserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, gpsupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, azcloseenough_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, eldisabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, slewenabled_),
  };
  RotorHGIOConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotorHGIOConfig_descriptor_,
      RotorHGIOConfig::default_instance_,
      RotorHGIOConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorHGIOConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotorHGIOConfig));
  RotorESAConfig_descriptor_ = file->message_type(19);
  static const int RotorESAConfig_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorESAConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorESAConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorESAConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorESAConfig, azoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorESAConfig, hardlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorESAConfig, minscanangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorESAConfig, maxscanangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorESAConfig, pointholdincrement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorESAConfig, energyscanspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorESAConfig, startdeviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorESAConfig, energytracktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorESAConfig, scanscrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorESAConfig, azcloseenough_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorESAConfig, eldisabled_),
  };
  RotorESAConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotorESAConfig_descriptor_,
      RotorESAConfig::default_instance_,
      RotorESAConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorESAConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotorESAConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotorESAConfig));
  DSSwitchConfig_descriptor_ = file->message_type(20);
  static const int DSSwitchConfig_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSwitchConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSwitchConfig, baseurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSwitchConfig, inputpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSwitchConfig, outputpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSwitchConfig, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSwitchConfig, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSwitchConfig, sleeptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSwitchConfig, slavetimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSwitchConfig, energyscansec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSwitchConfig, energytracktime_),
  };
  DSSwitchConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DSSwitchConfig_descriptor_,
      DSSwitchConfig::default_instance_,
      DSSwitchConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSwitchConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSSwitchConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DSSwitchConfig));
  DummyConfig_descriptor_ = file->message_type(21);
  static const int DummyConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyConfig, message_),
  };
  DummyConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DummyConfig_descriptor_,
      DummyConfig::default_instance_,
      DummyConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DummyConfig));
  MMSXTConfig_descriptor_ = file->message_type(22);
  static const int MMSXTConfig_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSXTConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSXTConfig, transmitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSXTConfig, mmsxtctrlip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSXTConfig, controlport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSXTConfig, mmsxtdataip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSXTConfig, dataport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSXTConfig, uniqtxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSXTConfig, txcuport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSXTConfig, txcuip_),
  };
  MMSXTConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MMSXTConfig_descriptor_,
      MMSXTConfig::default_instance_,
      MMSXTConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSXTConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSXTConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MMSXTConfig));
  AmpConfig_descriptor_ = file->message_type(23);
  static const int AmpConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmpConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmpConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmpConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmpConfig, hardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmpConfig, init_atten_),
  };
  AmpConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AmpConfig_descriptor_,
      AmpConfig::default_instance_,
      AmpConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmpConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmpConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AmpConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FalconResourceMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DummyRcvConfig_descriptor_, &DummyRcvConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PICConfig_descriptor_, &PICConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MMSConfig_descriptor_, &MMSConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZACQConfig_descriptor_, &ZACQConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    USRPRxTxConfig_descriptor_, &USRPRxTxConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EPIQRxTxConfig_descriptor_, &EPIQRxTxConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RTLSDRConfig_descriptor_, &RTLSDRConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    USRPRxConfig_descriptor_, &USRPRxConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PentekConfig_descriptor_, &PentekConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    USRPTxConfig_descriptor_, &USRPTxConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RFSwitchConfig_descriptor_, &RFSwitchConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RFSwitchSerialConfig_descriptor_, &RFSwitchSerialConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPSwitchConfig_descriptor_, &CPSwitchConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AntennaConfig_descriptor_, &AntennaConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotorRPMConfig_descriptor_, &RotorRPMConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotorProtatorConfig_descriptor_, &RotorProtatorConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotorProsistelConfig_descriptor_, &RotorProsistelConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotorEzrotorConfig_descriptor_, &RotorEzrotorConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotorHGIOConfig_descriptor_, &RotorHGIOConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotorESAConfig_descriptor_, &RotorESAConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DSSwitchConfig_descriptor_, &DSSwitchConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DummyConfig_descriptor_, &DummyConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MMSXTConfig_descriptor_, &MMSXTConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AmpConfig_descriptor_, &AmpConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FalconResourceMessages_2eproto() {
  delete DummyRcvConfig::default_instance_;
  delete DummyRcvConfig_reflection_;
  delete DummyRcvConfig::_default_msgname_;
  delete DummyRcvConfig::_default_host_;
  delete DummyRcvConfig::_default_uniqrxid_;
  delete PICConfig::default_instance_;
  delete PICConfig_reflection_;
  delete PICConfig::_default_msgname_;
  delete PICConfig::_default_host_;
  delete PICConfig::_default_uniqrxid_;
  delete MMSConfig::default_instance_;
  delete MMSConfig_reflection_;
  delete MMSConfig::_default_msgname_;
  delete MMSConfig::_default_host_;
  delete MMSConfig::_default_cal30abw_;
  delete MMSConfig::_default_cal5abw_;
  delete MMSConfig::_default_uniqrxid_;
  delete ZACQConfig::default_instance_;
  delete ZACQConfig_reflection_;
  delete ZACQConfig::_default_msgname_;
  delete ZACQConfig::_default_host_;
  delete ZACQConfig::_default_uniqrxid_;
  delete USRPRxTxConfig::default_instance_;
  delete USRPRxTxConfig_reflection_;
  delete USRPRxTxConfig::_default_msgname_;
  delete USRPRxTxConfig::_default_args_;
  delete USRPRxTxConfig::_default_uniqrxid_;
  delete EPIQRxTxConfig::default_instance_;
  delete EPIQRxTxConfig_reflection_;
  delete EPIQRxTxConfig::_default_msgname_;
  delete EPIQRxTxConfig::_default_host_;
  delete EPIQRxTxConfig::_default_uniqrxid_;
  delete EPIQRxTxConfig::_default_uniqtxid_;
  delete RTLSDRConfig::default_instance_;
  delete RTLSDRConfig_reflection_;
  delete RTLSDRConfig::_default_msgname_;
  delete RTLSDRConfig::_default_host_;
  delete RTLSDRConfig::_default_uniqrxid_;
  delete USRPRxConfig::default_instance_;
  delete USRPRxConfig_reflection_;
  delete USRPRxConfig::_default_msgname_;
  delete USRPRxConfig::_default_args_;
  delete PentekConfig::default_instance_;
  delete PentekConfig_reflection_;
  delete PentekConfig::_default_msgname_;
  delete USRPTxConfig::default_instance_;
  delete USRPTxConfig_reflection_;
  delete USRPTxConfig::_default_msgname_;
  delete USRPTxConfig::_default_args_;
  delete RFSwitchConfig::default_instance_;
  delete RFSwitchConfig_reflection_;
  delete RFSwitchConfig::_default_msgname_;
  delete RFSwitchConfig::_default_ip_;
  delete RFSwitchSerialConfig::default_instance_;
  delete RFSwitchSerialConfig_reflection_;
  delete RFSwitchSerialConfig::_default_msgname_;
  delete RFSwitchSerialConfig::_default_device_;
  delete CPSwitchConfig::default_instance_;
  delete CPSwitchConfig_reflection_;
  delete CPSwitchConfig::_default_msgname_;
  delete AntennaConfig::default_instance_;
  delete AntennaConfig_reflection_;
  delete AntennaConfig::_default_msgname_;
  delete AntennaConfig::_default_noisetest_;
  delete RotorRPMConfig::default_instance_;
  delete RotorRPMConfig_reflection_;
  delete RotorRPMConfig::_default_msgname_;
  delete RotorRPMConfig::_default_scanscrypt_;
  delete RotorRPMConfig::_default_gpsserver_;
  delete RotorRPMConfig::_default_gpsupdate_;
  delete RotorProtatorConfig::default_instance_;
  delete RotorProtatorConfig_reflection_;
  delete RotorProtatorConfig::_default_msgname_;
  delete RotorProtatorConfig::_default_scanscrypt_;
  delete RotorProtatorConfig::_default_gpsserver_;
  delete RotorProtatorConfig::_default_gpsupdate_;
  delete RotorProsistelConfig::default_instance_;
  delete RotorProsistelConfig_reflection_;
  delete RotorProsistelConfig::_default_msgname_;
  delete RotorProsistelConfig::_default_scanscrypt_;
  delete RotorProsistelConfig::_default_gpsserver_;
  delete RotorProsistelConfig::_default_gpsupdate_;
  delete RotorEzrotorConfig::default_instance_;
  delete RotorEzrotorConfig_reflection_;
  delete RotorEzrotorConfig::_default_msgname_;
  delete RotorEzrotorConfig::_default_scanscrypt_;
  delete RotorEzrotorConfig::_default_gpsserver_;
  delete RotorEzrotorConfig::_default_gpsupdate_;
  delete RotorHGIOConfig::default_instance_;
  delete RotorHGIOConfig_reflection_;
  delete RotorHGIOConfig::_default_msgname_;
  delete RotorHGIOConfig::_default_scanscrypt_;
  delete RotorHGIOConfig::_default_gpsserver_;
  delete RotorHGIOConfig::_default_gpsupdate_;
  delete RotorESAConfig::default_instance_;
  delete RotorESAConfig_reflection_;
  delete RotorESAConfig::_default_msgname_;
  delete RotorESAConfig::_default_scanscrypt_;
  delete DSSwitchConfig::default_instance_;
  delete DSSwitchConfig_reflection_;
  delete DSSwitchConfig::_default_msgname_;
  delete DummyConfig::default_instance_;
  delete DummyConfig_reflection_;
  delete DummyConfig::_default_msgname_;
  delete MMSXTConfig::default_instance_;
  delete MMSXTConfig_reflection_;
  delete MMSXTConfig::_default_msgname_;
  delete MMSXTConfig::_default_uniqtxid_;
  delete AmpConfig::default_instance_;
  delete AmpConfig_reflection_;
  delete AmpConfig::_default_msgname_;
  delete AmpConfig::_default_ip_;
}

void protobuf_AddDesc_FalconResourceMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034FalconResourceMessages.proto\022\016falcon_r"
    "es_msg\"\352\001\n\016DummyRcvConfig\022 \n\007msgName\030\001 \001"
    "(\t:\017DUMMYRCV_CONFIG\022\017\n\007channel\030\002 \001(\005\022\017\n\007"
    "baseAux\030\003 \001(\005\022\n\n\002rx\030\004 \001(\t\022\023\n\004host\030\005 \001(\t:"
    "\005local\022\021\n\002fs\030\006 \001(\002:\0051e+08\022\024\n\005minRF\030\007 \001(\002"
    ":\0052e+07\022\024\n\005maxRF\030\010 \001(\002:\0053e+09\022\025\n\010uniqRXI"
    "D\030\t \001(\t:\003999\022\014\n\004pair\030\n \001(\005\022\017\n\007testDur\030\013 "
    "\001(\005\"\220\002\n\tPICConfig\022\033\n\007msgName\030\001 \001(\t:\nPIC_"
    "CONFIG\022\017\n\007channel\030\002 \001(\005\022\017\n\007baseAux\030\003 \001(\005"
    "\022\n\n\002rx\030\004 \001(\t\022\013\n\003pic\030\005 \001(\t\022\020\n\010picflags\030\006 "
    "\001(\t\022\017\n\007picside\030\007 \001(\t\022\023\n\004host\030\010 \001(\t:\005loca"
    "l\022\021\n\002fs\030\t \001(\002:\0051e+08\022\024\n\005minRF\030\n \001(\002:\0052e+"
    "07\022\024\n\005maxRF\030\013 \001(\002:\0053e+09\022\025\n\010uniqRXID\030\014 \001"
    "(\t:\003999\022\014\n\004pair\030\r \001(\005\022\017\n\007testDur\030\016 \001(\005\"\226"
    "\003\n\tMMSConfig\022\033\n\007msgName\030\001 \001(\t:\nMMS_CONFI"
    "G\022\017\n\007channel\030\002 \001(\005\022\017\n\007baseAux\030\003 \001(\005\022\n\n\002I"
    "P\030\004 \001(\t\022\023\n\013controlPort\030\005 \001(\005\022\020\n\010dataPort"
    "\030\006 \001(\005\022\023\n\013interfaceIP\030\007 \001(\t\022\020\n\010receiver\030"
    "\010 \001(\005\022\023\n\004host\030\t \001(\t:\005local\022\021\n\002fs\030\n \001(\002:\005"
    "1e+08\022\024\n\005minRF\030\013 \001(\002:\0052e+07\022\024\n\005maxRF\030\014 \001"
    "(\002:\0053e+09\022\037\n\010cal30abw\030\r \001(\t:\rmms_30abw.c"
    "sv\022\035\n\007cal5abw\030\016 \001(\t:\014mms_5abw.csv\022\025\n\010uni"
    "qRXID\030\017 \001(\t:\003999\022\014\n\004pair\030\020 \001(\005\022\017\n\007testDu"
    "r\030\021 \001(\005\022\024\n\010rfcuPort\030\022 \001(\005:\002-1\022\020\n\006rfcuIP\030"
    "\023 \001(\t:\000\"\366\001\n\nZACQConfig\022\034\n\007msgName\030\001 \001(\t:"
    "\013ZACQ_CONFIG\022\017\n\007channel\030\002 \001(\005\022\017\n\007baseAux"
    "\030\003 \001(\005\022\n\n\002rx\030\004 \001(\t\022\023\n\004host\030\005 \001(\t:\005local\022"
    "\021\n\002fs\030\006 \001(\002:\0051e+08\022\024\n\005minRF\030\007 \001(\002:\0052e+07"
    "\022\024\n\005maxRF\030\010 \001(\002:\0053e+09\022\025\n\010uniqRXID\030\t \001(\t"
    ":\003999\022\014\n\004pair\030\n \001(\005\022\017\n\007testDur\030\013 \001(\005\022\022\n\n"
    "initScript\030\014 \001(\t\"\276\001\n\016USRPRxTxConfig\022!\n\007m"
    "sgName\030\001 \001(\t:\020USRP_RXTX_CONFIG\022\017\n\007channe"
    "l\030\002 \001(\005\022\017\n\007baseAux\030\003 \001(\005\022\037\n\004args\030\004 \001(\t:\021"
    "addr=192.168.10.2\022\r\n\005minRF\030\005 \001(\002\022\r\n\005maxR"
    "F\030\006 \001(\002\022\021\n\002fs\030\007 \001(\002:\0051e+08\022\025\n\010uniqRXID\030\010"
    " \001(\t:\003999\"\210\002\n\016EPIQRxTxConfig\022!\n\007msgName\030"
    "\001 \001(\t:\020EPIQ_RXTX_CONFIG\022\017\n\007channel\030\002 \001(\005"
    "\022\017\n\007baseAux\030\003 \001(\005\022\023\n\013controlPort\030\004 \001(\005\022\016"
    "\n\006rfPort\030\005 \001(\005\022\023\n\004host\030\006 \001(\t:\005local\022\r\n\005m"
    "inRF\030\007 \001(\002\022\r\n\005maxRF\030\010 \001(\002\022\023\n\002fs\030\t \001(\002:\0072"
    ".5e+07\022\025\n\010uniqRXID\030\n \001(\t:\003999\022\025\n\010uniqTXI"
    "D\030\013 \001(\t:\003999\022\026\n\ndelayReset\030\014 \001(\002:\002-1\"\306\001\n"
    "\014RTLSDRConfig\022\036\n\007msgName\030\001 \001(\t:\rRTLSDR_C"
    "ONFIG\022\017\n\007channel\030\002 \001(\005\022\017\n\007baseAux\030\003 \001(\005\022"
    "\023\n\013controlPort\030\004 \001(\005\022\023\n\004host\030\005 \001(\t:\005loca"
    "l\022\r\n\005minRF\030\006 \001(\002\022\r\n\005maxRF\030\007 \001(\002\022\025\n\002fs\030\010 "
    "\001(\002:\t2.048e+06\022\025\n\010uniqRXID\030\t \001(\t:\003999\"\265\001"
    "\n\014USRPRxConfig\022\037\n\007msgName\030\001 \001(\t:\016USRP_RX"
    "_CONFIG\022\017\n\007channel\030\002 \001(\005\022\017\n\007baseAux\030\003 \001("
    "\005\022\037\n\004args\030\004 \001(\t:\021addr=192.168.10.2\022\020\n\010us"
    "rpchan\030\005 \001(\005\022\r\n\005minRF\030\006 \001(\002\022\r\n\005maxRF\030\007 \001"
    "(\002\022\021\n\002fs\030\010 \001(\002:\0051e+08\"\302\002\n\014PentekConfig\022\036"
    "\n\007msgName\030\001 \001(\t:\rPENTEK_CONFIG\022\026\n\007clkFre"
    "q\030\002 \001(\002:\0054e+08\022\025\n\tdacInterp\030\003 \001(\005:\00216\022\025\n"
    "\ncoreInterp\030\004 \001(\005:\0011\022\023\n\010baseChan\030\005 \001(\005:\001"
    "1\022\025\n\nnumBuffers\030\006 \001(\005:\0012\022\024\n\tfreqShift\030\007 "
    "\001(\002:\0010\022\020\n\010siggenIP\030\010 \001(\t\022J\n\nsiggenType\030\t"
    " \001(\0162\'.falcon_res_msg.PentekConfig.Sigge"
    "nType:\rROHDE_SCHWARZ\",\n\nSiggenType\022\021\n\rRO"
    "HDE_SCHWARZ\020\000\022\013\n\007MMS_MUP\020\001\"\200\001\n\014USRPTxCon"
    "fig\022\037\n\007msgName\030\001 \001(\t:\016USRP_TX_CONFIG\022\037\n\004"
    "args\030\002 \001(\t:\021addr=192.168.10.2\022\020\n\010usrpcha"
    "n\030\003 \001(\005\022\r\n\005minRF\030\004 \001(\002\022\r\n\005maxRF\030\005 \001(\002\"\317\001"
    "\n\016RFSwitchConfig\022 \n\007msgName\030\001 \001(\t:\017RFSWI"
    "TCH_CONFIG\022\027\n\002IP\030\002 \001(\t:\013nportserver\022\031\n\014s"
    "laveTimeout\030\003 \001(\005:\003180\022\031\n\renergyScanSec\030"
    "\004 \001(\002:\00210\022\034\n\017energyTrackTime\030\005 \001(\002:\003300\022"
    "\022\n\004port\030\006 \001(\005:\0044003\022\032\n\013setOnLaunch\030\007 \001(\010"
    ":\005false\"\303\001\n\024RFSwitchSerialConfig\022\'\n\007msgN"
    "ame\030\001 \001(\t:\026RFSWITCH_SERIAL_CONFIG\022\032\n\006dev"
    "ice\030\002 \001(\t:\n/dev/ttyS0\022\022\n\004baud\030\003 \001(\005:\004960"
    "0\022\031\n\014slaveTimeout\030\004 \001(\005:\003180\022\031\n\renergySc"
    "anSec\030\005 \001(\002:\00210\022\034\n\017energyTrackTime\030\006 \001(\002"
    ":\003300\"\244\001\n\016CPSwitchConfig\022 \n\007msgName\030\001 \001("
    "\t:\017CPSWITCH_CONFIG\022\n\n\002IP\030\002 \001(\t\022\020\n\004port\030\003"
    " \001(\005:\00223\022\031\n\014slaveTimeout\030\004 \001(\005:\003180\022\031\n\re"
    "nergyScanSec\030\005 \001(\002:\00210\022\034\n\017energyTrackTim"
    "e\030\006 \001(\002:\003300\"\320\002\n\rAntennaConfig\022\037\n\007msgNam"
    "e\030\001 \001(\t:\016ANTENNA_CONFIG\022\r\n\005minRF\030\002 \001(\002\022\r"
    "\n\005maxRF\030\003 \001(\002\022\030\n\nfixedAngle\030\004 \001(\002:\004-999\022"
    "\023\n\010latitude\030\005 \001(\002:\0010\022\024\n\tlongitude\030\006 \001(\002:"
    "\0010\022\023\n\010altitude\030\007 \001(\002:\0010\022\024\n\tbeamwidth\030\010 \001"
    "(\002:\0010\022\024\n\tdwncnvtLO\030\t \001(\002:\0010\022\017\n\003ssc\030\n \001(\005"
    ":\002-1\022\014\n\004band\030\013 \001(\t\022\024\n\014polarization\030\014 \001(\t"
    "\022\r\n\005group\030\r \001(\005\022\032\n\rsightDistance\030\016 \001(\002:\003"
    "500\022\032\n\tnoiseTest\030\017 \001(\t:\007NO_TEST\"\345\004\n\016Roto"
    "rRPMConfig\022!\n\007msgName\030\001 \001(\t:\020ROTOR_RPM_C"
    "ONFIG\022\n\n\002IP\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022\020\n\010AzOff"
    "set\030\004 \001(\002\022\020\n\010ElOffset\030\005 \001(\002\022\021\n\thardLimit"
    "\030\006 \001(\010\022\024\n\014minScanAngle\030\007 \001(\002\022\024\n\014maxScanA"
    "ngle\030\010 \001(\002\022\024\n\014minElevation\030\t \001(\002\022\024\n\014maxE"
    "levation\030\n \001(\002\022\025\n\rscanElevation\030\013 \001(\002\022\025\n"
    "\rmulticastRate\030\014 \001(\002\022\032\n\022pointHoldIncreme"
    "nt\030\r \001(\002\022\032\n\017energyScanSpeed\030\016 \001(\002:\0014\022\033\n\016"
    "startDeviation\030\017 \001(\002:\003180\022\033\n\017energyTrack"
    "Time\030\020 \001(\002:\00230\022\030\n\nscanScrypt\030\021 \001(\t:\004NONE"
    "\022\026\n\tgpsServer\030\022 \001(\t:\003OFF\022\025\n\tgpsUpdate\030\023 "
    "\001(\t:\002ON\022\031\n\nelDisabled\030\024 \001(\010:\005false\022\027\n\010in"
    "vertAz\030\025 \001(\010:\005false\022\027\n\013maxVelocity\030\026 \001(\002"
    ":\00210\022\031\n\ndynamicVel\030\027 \001(\010:\005false\022\032\n\013slewE"
    "nabled\030\030 \001(\010:\005false\022\032\n\razCloseEnough\030\031 \001"
    "(\002:\0030.5\"\260\003\n\023RotorProtatorConfig\022&\n\007msgNa"
    "me\030\001 \001(\t:\025ROTOR_PROTATOR_CONFIG\022\n\n\002IP\030\002 "
    "\001(\t\022\014\n\004port\030\003 \001(\005\022\020\n\010AzOffset\030\004 \001(\002\022\021\n\th"
    "ardLimit\030\005 \001(\010\022\024\n\014minScanAngle\030\006 \001(\002\022\024\n\014"
    "maxScanAngle\030\007 \001(\002\022\025\n\rmulticastRate\030\010 \001("
    "\002\022\032\n\022pointHoldIncrement\030\t \001(\002\022\033\n\017energyS"
    "canSpeed\030\n \001(\002:\00220\022\033\n\016startDeviation\030\013 \001"
    "(\002:\003180\022\034\n\017energyTrackTime\030\014 \001(\002:\003500\022\030\n"
    "\nscanScrypt\030\r \001(\t:\004NONE\022\026\n\tgpsServer\030\016 \001"
    "(\t:\003OFF\022\025\n\tgpsUpdate\030\017 \001(\t:\002ON\022\030\n\razClos"
    "eEnough\030\020 \001(\002:\0015\022\030\n\nelDisabled\030\021 \001(\010:\004tr"
    "ue\"\263\003\n\024RotorProsistelConfig\022\'\n\007msgName\030\001"
    " \001(\t:\026ROTOR_PROSISTEL_CONFIG\022\n\n\002IP\030\002 \001(\t"
    "\022\014\n\004port\030\003 \001(\005\022\020\n\010AzOffset\030\004 \001(\002\022\021\n\thard"
    "Limit\030\005 \001(\010\022\024\n\014minScanAngle\030\006 \001(\002\022\024\n\014max"
    "ScanAngle\030\007 \001(\002\022\025\n\rmulticastRate\030\010 \001(\002\022\032"
    "\n\022pointHoldIncrement\030\t \001(\002\022\033\n\017energyScan"
    "Speed\030\n \001(\002:\00220\022\033\n\016startDeviation\030\013 \001(\002:"
    "\003180\022\034\n\017energyTrackTime\030\014 \001(\002:\003500\022\030\n\nsc"
    "anScrypt\030\r \001(\t:\004NONE\022\026\n\tgpsServer\030\016 \001(\t:"
    "\003OFF\022\025\n\tgpsUpdate\030\017 \001(\t:\002ON\022\030\n\razCloseEn"
    "ough\030\020 \001(\002:\0015\022\031\n\nelDisabled\030\021 \001(\010:\005false"
    "\"\251\003\n\022RotorEzrotorConfig\022\037\n\007msgName\030\001 \001(\t"
    ":\016EZROTOR_CONFIG\022\n\n\002IP\030\002 \001(\t\022\014\n\004port\030\003 \001"
    "(\005\022\020\n\010AzOffset\030\004 \001(\002\022\021\n\thardLimit\030\005 \001(\010\022"
    "\024\n\014minScanAngle\030\006 \001(\002\022\024\n\014maxScanAngle\030\007 "
    "\001(\002\022\025\n\rmulticastRate\030\010 \001(\002\022\032\n\022pointHoldI"
    "ncrement\030\t \001(\002\022\033\n\017energyScanSpeed\030\n \001(\002:"
    "\00220\022\033\n\016startDeviation\030\013 \001(\002:\003180\022\034\n\017ener"
    "gyTrackTime\030\014 \001(\002:\003500\022\030\n\nscanScrypt\030\r \001"
    "(\t:\004NONE\022\026\n\tgpsServer\030\016 \001(\t:\003OFF\022\025\n\tgpsU"
    "pdate\030\017 \001(\t:\002ON\022\030\n\razCloseEnough\030\020 \001(\002:\001"
    "5\022\031\n\nelDisabled\030\021 \001(\010:\005false\"\241\004\n\017RotorHG"
    "IOConfig\022\034\n\007msgName\030\001 \001(\t:\013HGIO_CONFIG\022\n"
    "\n\002IP\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022\020\n\010AzOffset\030\004 \001"
    "(\002\022\030\n\thardLimit\030\005 \001(\010:\005false\022\024\n\014minScanA"
    "ngle\030\006 \001(\002\022\024\n\014maxScanAngle\030\007 \001(\002\022\024\n\014minE"
    "levation\030\010 \001(\002\022\024\n\014maxElevation\030\t \001(\002\022\025\n\r"
    "scanElevation\030\n \001(\002\022\025\n\rmulticastRate\030\013 \001"
    "(\002\022\032\n\022pointHoldIncrement\030\014 \001(\002\022\032\n\017energy"
    "ScanSpeed\030\r \001(\002:\0015\022\033\n\016startDeviation\030\016 \001"
    "(\002:\003180\022\034\n\017energyTrackTime\030\017 \001(\002:\003500\022\025\n"
    "\006useGps\030\020 \001(\010:\005false\022\030\n\nscanScrypt\030\021 \001(\t"
    ":\004NONE\022\026\n\tgpsServer\030\022 \001(\t:\003OFF\022\025\n\tgpsUpd"
    "ate\030\023 \001(\t:\002ON\022\032\n\razCloseEnough\030\024 \001(\002:\0030."
    "5\022\031\n\nelDisabled\030\025 \001(\010:\005false\022\032\n\013slewEnab"
    "led\030\026 \001(\010:\005false\"\340\002\n\016RotorESAConfig\022!\n\007m"
    "sgName\030\001 \001(\t:\020ROTOR_ESA_CONFIG\022\n\n\002IP\030\002 \001"
    "(\t\022\014\n\004port\030\003 \001(\005\022\020\n\010AzOffset\030\004 \001(\002\022\021\n\tha"
    "rdLimit\030\005 \001(\010\022\024\n\014minScanAngle\030\006 \001(\002\022\024\n\014m"
    "axScanAngle\030\007 \001(\002\022\032\n\022pointHoldIncrement\030"
    "\010 \001(\002\022\032\n\017energyScanSpeed\030\t \001(\002:\0014\022\033\n\016sta"
    "rtDeviation\030\n \001(\002:\003180\022\033\n\017energyTrackTim"
    "e\030\013 \001(\002:\00220\022\030\n\nscanScrypt\030\014 \001(\t:\004NONE\022\032\n"
    "\razCloseEnough\030\r \001(\002:\0030.5\022\030\n\nelDisabled\030"
    "\016 \001(\010:\004true\"\365\001\n\016DSSwitchConfig\022 \n\007msgNam"
    "e\030\001 \001(\t:\017DSSWITCH_CONFIG\022\017\n\007baseURL\030\002 \001("
    "\t\022\021\n\tinputPath\030\003 \001(\t\022\022\n\noutputPath\030\004 \001(\t"
    "\022\020\n\010userName\030\005 \001(\t\022\020\n\010password\030\006 \001(\t\022\021\n\t"
    "sleepTime\030\007 \001(\002\022\031\n\014slaveTimeout\030\010 \001(\005:\0031"
    "80\022\031\n\renergyScanSec\030\t \001(\002:\00210\022\034\n\017energyT"
    "rackTime\030\n \001(\002:\003300\"<\n\013DummyConfig\022\034\n\007ms"
    "gName\030\001 \001(\t:\013DummyConfig\022\017\n\007message\030\002 \001("
    "\t\"\334\001\n\013MMSXTConfig\022\035\n\007msgName\030\001 \001(\t:\014MMSX"
    "T_CONFIG\022\023\n\013transmitter\030\002 \001(\005\022\023\n\013MMSXTCt"
    "rlIp\030\003 \001(\t\022\027\n\013controlPort\030\004 \001(\005:\00223\022\023\n\013M"
    "MSXTDataIp\030\005 \001(\t\022\027\n\010dataPort\030\006 \001(\005:\0054930"
    "0\022\025\n\010uniqTXID\030\007 \001(\t:\003999\022\024\n\010txcuPort\030\010 \001"
    "(\005:\002-1\022\020\n\006txcuIP\030\t \001(\t:\000\"{\n\tAmpConfig\022\033\n"
    "\007msgName\030\001 \001(\t:\nAMP_CONFIG\022\027\n\002IP\030\002 \001(\t:\013"
    "nportserver\022\022\n\004port\030\003 \001(\005:\0044012\022\020\n\010hardw"
    "are\030\004 \001(\010\022\022\n\ninit_atten\030\005 \001(\005B\025\n\023fv.prot"
    "os.kepsvisor", 6932);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FalconResourceMessages.proto", &protobuf_RegisterTypes);
  DummyRcvConfig::_default_msgname_ =
      new ::std::string("DUMMYRCV_CONFIG", 15);
  DummyRcvConfig::_default_host_ =
      new ::std::string("local", 5);
  DummyRcvConfig::_default_uniqrxid_ =
      new ::std::string("999", 3);
  DummyRcvConfig::default_instance_ = new DummyRcvConfig();
  PICConfig::_default_msgname_ =
      new ::std::string("PIC_CONFIG", 10);
  PICConfig::_default_host_ =
      new ::std::string("local", 5);
  PICConfig::_default_uniqrxid_ =
      new ::std::string("999", 3);
  PICConfig::default_instance_ = new PICConfig();
  MMSConfig::_default_msgname_ =
      new ::std::string("MMS_CONFIG", 10);
  MMSConfig::_default_host_ =
      new ::std::string("local", 5);
  MMSConfig::_default_cal30abw_ =
      new ::std::string("mms_30abw.csv", 13);
  MMSConfig::_default_cal5abw_ =
      new ::std::string("mms_5abw.csv", 12);
  MMSConfig::_default_uniqrxid_ =
      new ::std::string("999", 3);
  MMSConfig::default_instance_ = new MMSConfig();
  ZACQConfig::_default_msgname_ =
      new ::std::string("ZACQ_CONFIG", 11);
  ZACQConfig::_default_host_ =
      new ::std::string("local", 5);
  ZACQConfig::_default_uniqrxid_ =
      new ::std::string("999", 3);
  ZACQConfig::default_instance_ = new ZACQConfig();
  USRPRxTxConfig::_default_msgname_ =
      new ::std::string("USRP_RXTX_CONFIG", 16);
  USRPRxTxConfig::_default_args_ =
      new ::std::string("addr=192.168.10.2", 17);
  USRPRxTxConfig::_default_uniqrxid_ =
      new ::std::string("999", 3);
  USRPRxTxConfig::default_instance_ = new USRPRxTxConfig();
  EPIQRxTxConfig::_default_msgname_ =
      new ::std::string("EPIQ_RXTX_CONFIG", 16);
  EPIQRxTxConfig::_default_host_ =
      new ::std::string("local", 5);
  EPIQRxTxConfig::_default_uniqrxid_ =
      new ::std::string("999", 3);
  EPIQRxTxConfig::_default_uniqtxid_ =
      new ::std::string("999", 3);
  EPIQRxTxConfig::default_instance_ = new EPIQRxTxConfig();
  RTLSDRConfig::_default_msgname_ =
      new ::std::string("RTLSDR_CONFIG", 13);
  RTLSDRConfig::_default_host_ =
      new ::std::string("local", 5);
  RTLSDRConfig::_default_uniqrxid_ =
      new ::std::string("999", 3);
  RTLSDRConfig::default_instance_ = new RTLSDRConfig();
  USRPRxConfig::_default_msgname_ =
      new ::std::string("USRP_RX_CONFIG", 14);
  USRPRxConfig::_default_args_ =
      new ::std::string("addr=192.168.10.2", 17);
  USRPRxConfig::default_instance_ = new USRPRxConfig();
  PentekConfig::_default_msgname_ =
      new ::std::string("PENTEK_CONFIG", 13);
  PentekConfig::default_instance_ = new PentekConfig();
  USRPTxConfig::_default_msgname_ =
      new ::std::string("USRP_TX_CONFIG", 14);
  USRPTxConfig::_default_args_ =
      new ::std::string("addr=192.168.10.2", 17);
  USRPTxConfig::default_instance_ = new USRPTxConfig();
  RFSwitchConfig::_default_msgname_ =
      new ::std::string("RFSWITCH_CONFIG", 15);
  RFSwitchConfig::_default_ip_ =
      new ::std::string("nportserver", 11);
  RFSwitchConfig::default_instance_ = new RFSwitchConfig();
  RFSwitchSerialConfig::_default_msgname_ =
      new ::std::string("RFSWITCH_SERIAL_CONFIG", 22);
  RFSwitchSerialConfig::_default_device_ =
      new ::std::string("/dev/ttyS0", 10);
  RFSwitchSerialConfig::default_instance_ = new RFSwitchSerialConfig();
  CPSwitchConfig::_default_msgname_ =
      new ::std::string("CPSWITCH_CONFIG", 15);
  CPSwitchConfig::default_instance_ = new CPSwitchConfig();
  AntennaConfig::_default_msgname_ =
      new ::std::string("ANTENNA_CONFIG", 14);
  AntennaConfig::_default_noisetest_ =
      new ::std::string("NO_TEST", 7);
  AntennaConfig::default_instance_ = new AntennaConfig();
  RotorRPMConfig::_default_msgname_ =
      new ::std::string("ROTOR_RPM_CONFIG", 16);
  RotorRPMConfig::_default_scanscrypt_ =
      new ::std::string("NONE", 4);
  RotorRPMConfig::_default_gpsserver_ =
      new ::std::string("OFF", 3);
  RotorRPMConfig::_default_gpsupdate_ =
      new ::std::string("ON", 2);
  RotorRPMConfig::default_instance_ = new RotorRPMConfig();
  RotorProtatorConfig::_default_msgname_ =
      new ::std::string("ROTOR_PROTATOR_CONFIG", 21);
  RotorProtatorConfig::_default_scanscrypt_ =
      new ::std::string("NONE", 4);
  RotorProtatorConfig::_default_gpsserver_ =
      new ::std::string("OFF", 3);
  RotorProtatorConfig::_default_gpsupdate_ =
      new ::std::string("ON", 2);
  RotorProtatorConfig::default_instance_ = new RotorProtatorConfig();
  RotorProsistelConfig::_default_msgname_ =
      new ::std::string("ROTOR_PROSISTEL_CONFIG", 22);
  RotorProsistelConfig::_default_scanscrypt_ =
      new ::std::string("NONE", 4);
  RotorProsistelConfig::_default_gpsserver_ =
      new ::std::string("OFF", 3);
  RotorProsistelConfig::_default_gpsupdate_ =
      new ::std::string("ON", 2);
  RotorProsistelConfig::default_instance_ = new RotorProsistelConfig();
  RotorEzrotorConfig::_default_msgname_ =
      new ::std::string("EZROTOR_CONFIG", 14);
  RotorEzrotorConfig::_default_scanscrypt_ =
      new ::std::string("NONE", 4);
  RotorEzrotorConfig::_default_gpsserver_ =
      new ::std::string("OFF", 3);
  RotorEzrotorConfig::_default_gpsupdate_ =
      new ::std::string("ON", 2);
  RotorEzrotorConfig::default_instance_ = new RotorEzrotorConfig();
  RotorHGIOConfig::_default_msgname_ =
      new ::std::string("HGIO_CONFIG", 11);
  RotorHGIOConfig::_default_scanscrypt_ =
      new ::std::string("NONE", 4);
  RotorHGIOConfig::_default_gpsserver_ =
      new ::std::string("OFF", 3);
  RotorHGIOConfig::_default_gpsupdate_ =
      new ::std::string("ON", 2);
  RotorHGIOConfig::default_instance_ = new RotorHGIOConfig();
  RotorESAConfig::_default_msgname_ =
      new ::std::string("ROTOR_ESA_CONFIG", 16);
  RotorESAConfig::_default_scanscrypt_ =
      new ::std::string("NONE", 4);
  RotorESAConfig::default_instance_ = new RotorESAConfig();
  DSSwitchConfig::_default_msgname_ =
      new ::std::string("DSSWITCH_CONFIG", 15);
  DSSwitchConfig::default_instance_ = new DSSwitchConfig();
  DummyConfig::_default_msgname_ =
      new ::std::string("DummyConfig", 11);
  DummyConfig::default_instance_ = new DummyConfig();
  MMSXTConfig::_default_msgname_ =
      new ::std::string("MMSXT_CONFIG", 12);
  MMSXTConfig::_default_uniqtxid_ =
      new ::std::string("999", 3);
  MMSXTConfig::default_instance_ = new MMSXTConfig();
  AmpConfig::_default_msgname_ =
      new ::std::string("AMP_CONFIG", 10);
  AmpConfig::_default_ip_ =
      new ::std::string("nportserver", 11);
  AmpConfig::default_instance_ = new AmpConfig();
  DummyRcvConfig::default_instance_->InitAsDefaultInstance();
  PICConfig::default_instance_->InitAsDefaultInstance();
  MMSConfig::default_instance_->InitAsDefaultInstance();
  ZACQConfig::default_instance_->InitAsDefaultInstance();
  USRPRxTxConfig::default_instance_->InitAsDefaultInstance();
  EPIQRxTxConfig::default_instance_->InitAsDefaultInstance();
  RTLSDRConfig::default_instance_->InitAsDefaultInstance();
  USRPRxConfig::default_instance_->InitAsDefaultInstance();
  PentekConfig::default_instance_->InitAsDefaultInstance();
  USRPTxConfig::default_instance_->InitAsDefaultInstance();
  RFSwitchConfig::default_instance_->InitAsDefaultInstance();
  RFSwitchSerialConfig::default_instance_->InitAsDefaultInstance();
  CPSwitchConfig::default_instance_->InitAsDefaultInstance();
  AntennaConfig::default_instance_->InitAsDefaultInstance();
  RotorRPMConfig::default_instance_->InitAsDefaultInstance();
  RotorProtatorConfig::default_instance_->InitAsDefaultInstance();
  RotorProsistelConfig::default_instance_->InitAsDefaultInstance();
  RotorEzrotorConfig::default_instance_->InitAsDefaultInstance();
  RotorHGIOConfig::default_instance_->InitAsDefaultInstance();
  RotorESAConfig::default_instance_->InitAsDefaultInstance();
  DSSwitchConfig::default_instance_->InitAsDefaultInstance();
  DummyConfig::default_instance_->InitAsDefaultInstance();
  MMSXTConfig::default_instance_->InitAsDefaultInstance();
  AmpConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FalconResourceMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FalconResourceMessages_2eproto {
  StaticDescriptorInitializer_FalconResourceMessages_2eproto() {
    protobuf_AddDesc_FalconResourceMessages_2eproto();
  }
} static_descriptor_initializer_FalconResourceMessages_2eproto_;

// ===================================================================

::std::string* DummyRcvConfig::_default_msgname_ = NULL;
::std::string* DummyRcvConfig::_default_host_ = NULL;
::std::string* DummyRcvConfig::_default_uniqrxid_ = NULL;
#ifndef _MSC_VER
const int DummyRcvConfig::kMsgNameFieldNumber;
const int DummyRcvConfig::kChannelFieldNumber;
const int DummyRcvConfig::kBaseAuxFieldNumber;
const int DummyRcvConfig::kRxFieldNumber;
const int DummyRcvConfig::kHostFieldNumber;
const int DummyRcvConfig::kFsFieldNumber;
const int DummyRcvConfig::kMinRFFieldNumber;
const int DummyRcvConfig::kMaxRFFieldNumber;
const int DummyRcvConfig::kUniqRXIDFieldNumber;
const int DummyRcvConfig::kPairFieldNumber;
const int DummyRcvConfig::kTestDurFieldNumber;
#endif  // !_MSC_VER

DummyRcvConfig::DummyRcvConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DummyRcvConfig::InitAsDefaultInstance() {
}

DummyRcvConfig::DummyRcvConfig(const DummyRcvConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DummyRcvConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  baseaux_ = 0;
  rx_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(_default_host_);
  fs_ = 1e+08f;
  minrf_ = 2e+07f;
  maxrf_ = 3e+09f;
  uniqrxid_ = const_cast< ::std::string*>(_default_uniqrxid_);
  pair_ = 0;
  testdur_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DummyRcvConfig::~DummyRcvConfig() {
  SharedDtor();
}

void DummyRcvConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (rx_ != &::google::protobuf::internal::kEmptyString) {
    delete rx_;
  }
  if (host_ != _default_host_) {
    delete host_;
  }
  if (uniqrxid_ != _default_uniqrxid_) {
    delete uniqrxid_;
  }
  if (this != default_instance_) {
  }
}

void DummyRcvConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DummyRcvConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DummyRcvConfig_descriptor_;
}

const DummyRcvConfig& DummyRcvConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

DummyRcvConfig* DummyRcvConfig::default_instance_ = NULL;

DummyRcvConfig* DummyRcvConfig::New() const {
  return new DummyRcvConfig;
}

void DummyRcvConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    baseaux_ = 0;
    if (has_rx()) {
      if (rx_ != &::google::protobuf::internal::kEmptyString) {
        rx_->clear();
      }
    }
    if (has_host()) {
      if (host_ != _default_host_) {
        host_->assign(*_default_host_);
      }
    }
    fs_ = 1e+08f;
    minrf_ = 2e+07f;
    maxrf_ = 3e+09f;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_uniqrxid()) {
      if (uniqrxid_ != _default_uniqrxid_) {
        uniqrxid_->assign(*_default_uniqrxid_);
      }
    }
    pair_ = 0;
    testdur_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DummyRcvConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DUMMYRCV_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_baseAux;
        break;
      }

      // optional int32 baseAux = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseAux:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseaux_)));
          set_has_baseaux();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rx;
        break;
      }

      // optional string rx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rx().data(), this->rx().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_host;
        break;
      }

      // optional string host = 5 [default = "local"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_fs;
        break;
      }

      // optional float fs = 6 [default = 1e+08];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fs_)));
          set_has_fs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_minRF;
        break;
      }

      // optional float minRF = 7 [default = 2e+07];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minrf_)));
          set_has_minrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_maxRF;
        break;
      }

      // optional float maxRF = 8 [default = 3e+09];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxrf_)));
          set_has_maxrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_uniqRXID;
        break;
      }

      // optional string uniqRXID = 9 [default = "999"];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqRXID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqrxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqrxid().data(), this->uniqrxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pair;
        break;
      }

      // optional int32 pair = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pair_)));
          set_has_pair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_testDur;
        break;
      }

      // optional int32 testDur = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_testDur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &testdur_)));
          set_has_testdur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DummyRcvConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DUMMYRCV_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional int32 baseAux = 3;
  if (has_baseaux()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baseaux(), output);
  }

  // optional string rx = 4;
  if (has_rx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx().data(), this->rx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rx(), output);
  }

  // optional string host = 5 [default = "local"];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->host(), output);
  }

  // optional float fs = 6 [default = 1e+08];
  if (has_fs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fs(), output);
  }

  // optional float minRF = 7 [default = 2e+07];
  if (has_minrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->minrf(), output);
  }

  // optional float maxRF = 8 [default = 3e+09];
  if (has_maxrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->maxrf(), output);
  }

  // optional string uniqRXID = 9 [default = "999"];
  if (has_uniqrxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqrxid().data(), this->uniqrxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->uniqrxid(), output);
  }

  // optional int32 pair = 10;
  if (has_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pair(), output);
  }

  // optional int32 testDur = 11;
  if (has_testdur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->testdur(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DummyRcvConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DUMMYRCV_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional int32 baseAux = 3;
  if (has_baseaux()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->baseaux(), target);
  }

  // optional string rx = 4;
  if (has_rx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx().data(), this->rx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rx(), target);
  }

  // optional string host = 5 [default = "local"];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->host(), target);
  }

  // optional float fs = 6 [default = 1e+08];
  if (has_fs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->fs(), target);
  }

  // optional float minRF = 7 [default = 2e+07];
  if (has_minrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->minrf(), target);
  }

  // optional float maxRF = 8 [default = 3e+09];
  if (has_maxrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->maxrf(), target);
  }

  // optional string uniqRXID = 9 [default = "999"];
  if (has_uniqrxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqrxid().data(), this->uniqrxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->uniqrxid(), target);
  }

  // optional int32 pair = 10;
  if (has_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pair(), target);
  }

  // optional int32 testDur = 11;
  if (has_testdur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->testdur(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DummyRcvConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DUMMYRCV_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 baseAux = 3;
    if (has_baseaux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseaux());
    }

    // optional string rx = 4;
    if (has_rx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rx());
    }

    // optional string host = 5 [default = "local"];
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional float fs = 6 [default = 1e+08];
    if (has_fs()) {
      total_size += 1 + 4;
    }

    // optional float minRF = 7 [default = 2e+07];
    if (has_minrf()) {
      total_size += 1 + 4;
    }

    // optional float maxRF = 8 [default = 3e+09];
    if (has_maxrf()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string uniqRXID = 9 [default = "999"];
    if (has_uniqrxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqrxid());
    }

    // optional int32 pair = 10;
    if (has_pair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pair());
    }

    // optional int32 testDur = 11;
    if (has_testdur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->testdur());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DummyRcvConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DummyRcvConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DummyRcvConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DummyRcvConfig::MergeFrom(const DummyRcvConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_baseaux()) {
      set_baseaux(from.baseaux());
    }
    if (from.has_rx()) {
      set_rx(from.rx());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_fs()) {
      set_fs(from.fs());
    }
    if (from.has_minrf()) {
      set_minrf(from.minrf());
    }
    if (from.has_maxrf()) {
      set_maxrf(from.maxrf());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uniqrxid()) {
      set_uniqrxid(from.uniqrxid());
    }
    if (from.has_pair()) {
      set_pair(from.pair());
    }
    if (from.has_testdur()) {
      set_testdur(from.testdur());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DummyRcvConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyRcvConfig::CopyFrom(const DummyRcvConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyRcvConfig::IsInitialized() const {

  return true;
}

void DummyRcvConfig::Swap(DummyRcvConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(baseaux_, other->baseaux_);
    std::swap(rx_, other->rx_);
    std::swap(host_, other->host_);
    std::swap(fs_, other->fs_);
    std::swap(minrf_, other->minrf_);
    std::swap(maxrf_, other->maxrf_);
    std::swap(uniqrxid_, other->uniqrxid_);
    std::swap(pair_, other->pair_);
    std::swap(testdur_, other->testdur_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DummyRcvConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DummyRcvConfig_descriptor_;
  metadata.reflection = DummyRcvConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* PICConfig::_default_msgname_ = NULL;
::std::string* PICConfig::_default_host_ = NULL;
::std::string* PICConfig::_default_uniqrxid_ = NULL;
#ifndef _MSC_VER
const int PICConfig::kMsgNameFieldNumber;
const int PICConfig::kChannelFieldNumber;
const int PICConfig::kBaseAuxFieldNumber;
const int PICConfig::kRxFieldNumber;
const int PICConfig::kPicFieldNumber;
const int PICConfig::kPicflagsFieldNumber;
const int PICConfig::kPicsideFieldNumber;
const int PICConfig::kHostFieldNumber;
const int PICConfig::kFsFieldNumber;
const int PICConfig::kMinRFFieldNumber;
const int PICConfig::kMaxRFFieldNumber;
const int PICConfig::kUniqRXIDFieldNumber;
const int PICConfig::kPairFieldNumber;
const int PICConfig::kTestDurFieldNumber;
#endif  // !_MSC_VER

PICConfig::PICConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PICConfig::InitAsDefaultInstance() {
}

PICConfig::PICConfig(const PICConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PICConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  baseaux_ = 0;
  rx_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  picflags_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  picside_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(_default_host_);
  fs_ = 1e+08f;
  minrf_ = 2e+07f;
  maxrf_ = 3e+09f;
  uniqrxid_ = const_cast< ::std::string*>(_default_uniqrxid_);
  pair_ = 0;
  testdur_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PICConfig::~PICConfig() {
  SharedDtor();
}

void PICConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (rx_ != &::google::protobuf::internal::kEmptyString) {
    delete rx_;
  }
  if (pic_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_;
  }
  if (picflags_ != &::google::protobuf::internal::kEmptyString) {
    delete picflags_;
  }
  if (picside_ != &::google::protobuf::internal::kEmptyString) {
    delete picside_;
  }
  if (host_ != _default_host_) {
    delete host_;
  }
  if (uniqrxid_ != _default_uniqrxid_) {
    delete uniqrxid_;
  }
  if (this != default_instance_) {
  }
}

void PICConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PICConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PICConfig_descriptor_;
}

const PICConfig& PICConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

PICConfig* PICConfig::default_instance_ = NULL;

PICConfig* PICConfig::New() const {
  return new PICConfig;
}

void PICConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    baseaux_ = 0;
    if (has_rx()) {
      if (rx_ != &::google::protobuf::internal::kEmptyString) {
        rx_->clear();
      }
    }
    if (has_pic()) {
      if (pic_ != &::google::protobuf::internal::kEmptyString) {
        pic_->clear();
      }
    }
    if (has_picflags()) {
      if (picflags_ != &::google::protobuf::internal::kEmptyString) {
        picflags_->clear();
      }
    }
    if (has_picside()) {
      if (picside_ != &::google::protobuf::internal::kEmptyString) {
        picside_->clear();
      }
    }
    if (has_host()) {
      if (host_ != _default_host_) {
        host_->assign(*_default_host_);
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fs_ = 1e+08f;
    minrf_ = 2e+07f;
    maxrf_ = 3e+09f;
    if (has_uniqrxid()) {
      if (uniqrxid_ != _default_uniqrxid_) {
        uniqrxid_->assign(*_default_uniqrxid_);
      }
    }
    pair_ = 0;
    testdur_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PICConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "PIC_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_baseAux;
        break;
      }

      // optional int32 baseAux = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseAux:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseaux_)));
          set_has_baseaux();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rx;
        break;
      }

      // optional string rx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rx().data(), this->rx().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pic;
        break;
      }

      // optional string pic = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pic().data(), this->pic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_picflags;
        break;
      }

      // optional string picflags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picflags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picflags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->picflags().data(), this->picflags().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_picside;
        break;
      }

      // optional string picside = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picside:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picside()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->picside().data(), this->picside().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_host;
        break;
      }

      // optional string host = 8 [default = "local"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_fs;
        break;
      }

      // optional float fs = 9 [default = 1e+08];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fs_)));
          set_has_fs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_minRF;
        break;
      }

      // optional float minRF = 10 [default = 2e+07];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minrf_)));
          set_has_minrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_maxRF;
        break;
      }

      // optional float maxRF = 11 [default = 3e+09];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxrf_)));
          set_has_maxrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_uniqRXID;
        break;
      }

      // optional string uniqRXID = 12 [default = "999"];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqRXID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqrxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqrxid().data(), this->uniqrxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_pair;
        break;
      }

      // optional int32 pair = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pair_)));
          set_has_pair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_testDur;
        break;
      }

      // optional int32 testDur = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_testDur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &testdur_)));
          set_has_testdur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PICConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "PIC_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional int32 baseAux = 3;
  if (has_baseaux()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baseaux(), output);
  }

  // optional string rx = 4;
  if (has_rx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx().data(), this->rx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rx(), output);
  }

  // optional string pic = 5;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pic(), output);
  }

  // optional string picflags = 6;
  if (has_picflags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picflags().data(), this->picflags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->picflags(), output);
  }

  // optional string picside = 7;
  if (has_picside()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picside().data(), this->picside().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->picside(), output);
  }

  // optional string host = 8 [default = "local"];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->host(), output);
  }

  // optional float fs = 9 [default = 1e+08];
  if (has_fs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->fs(), output);
  }

  // optional float minRF = 10 [default = 2e+07];
  if (has_minrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->minrf(), output);
  }

  // optional float maxRF = 11 [default = 3e+09];
  if (has_maxrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->maxrf(), output);
  }

  // optional string uniqRXID = 12 [default = "999"];
  if (has_uniqrxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqrxid().data(), this->uniqrxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->uniqrxid(), output);
  }

  // optional int32 pair = 13;
  if (has_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pair(), output);
  }

  // optional int32 testDur = 14;
  if (has_testdur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->testdur(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PICConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "PIC_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional int32 baseAux = 3;
  if (has_baseaux()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->baseaux(), target);
  }

  // optional string rx = 4;
  if (has_rx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx().data(), this->rx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rx(), target);
  }

  // optional string pic = 5;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pic(), target);
  }

  // optional string picflags = 6;
  if (has_picflags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picflags().data(), this->picflags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->picflags(), target);
  }

  // optional string picside = 7;
  if (has_picside()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picside().data(), this->picside().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->picside(), target);
  }

  // optional string host = 8 [default = "local"];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->host(), target);
  }

  // optional float fs = 9 [default = 1e+08];
  if (has_fs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->fs(), target);
  }

  // optional float minRF = 10 [default = 2e+07];
  if (has_minrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->minrf(), target);
  }

  // optional float maxRF = 11 [default = 3e+09];
  if (has_maxrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->maxrf(), target);
  }

  // optional string uniqRXID = 12 [default = "999"];
  if (has_uniqrxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqrxid().data(), this->uniqrxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->uniqrxid(), target);
  }

  // optional int32 pair = 13;
  if (has_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->pair(), target);
  }

  // optional int32 testDur = 14;
  if (has_testdur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->testdur(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PICConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "PIC_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 baseAux = 3;
    if (has_baseaux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseaux());
    }

    // optional string rx = 4;
    if (has_rx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rx());
    }

    // optional string pic = 5;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }

    // optional string picflags = 6;
    if (has_picflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picflags());
    }

    // optional string picside = 7;
    if (has_picside()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picside());
    }

    // optional string host = 8 [default = "local"];
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float fs = 9 [default = 1e+08];
    if (has_fs()) {
      total_size += 1 + 4;
    }

    // optional float minRF = 10 [default = 2e+07];
    if (has_minrf()) {
      total_size += 1 + 4;
    }

    // optional float maxRF = 11 [default = 3e+09];
    if (has_maxrf()) {
      total_size += 1 + 4;
    }

    // optional string uniqRXID = 12 [default = "999"];
    if (has_uniqrxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqrxid());
    }

    // optional int32 pair = 13;
    if (has_pair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pair());
    }

    // optional int32 testDur = 14;
    if (has_testdur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->testdur());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PICConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PICConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PICConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PICConfig::MergeFrom(const PICConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_baseaux()) {
      set_baseaux(from.baseaux());
    }
    if (from.has_rx()) {
      set_rx(from.rx());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_picflags()) {
      set_picflags(from.picflags());
    }
    if (from.has_picside()) {
      set_picside(from.picside());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fs()) {
      set_fs(from.fs());
    }
    if (from.has_minrf()) {
      set_minrf(from.minrf());
    }
    if (from.has_maxrf()) {
      set_maxrf(from.maxrf());
    }
    if (from.has_uniqrxid()) {
      set_uniqrxid(from.uniqrxid());
    }
    if (from.has_pair()) {
      set_pair(from.pair());
    }
    if (from.has_testdur()) {
      set_testdur(from.testdur());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PICConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PICConfig::CopyFrom(const PICConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PICConfig::IsInitialized() const {

  return true;
}

void PICConfig::Swap(PICConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(baseaux_, other->baseaux_);
    std::swap(rx_, other->rx_);
    std::swap(pic_, other->pic_);
    std::swap(picflags_, other->picflags_);
    std::swap(picside_, other->picside_);
    std::swap(host_, other->host_);
    std::swap(fs_, other->fs_);
    std::swap(minrf_, other->minrf_);
    std::swap(maxrf_, other->maxrf_);
    std::swap(uniqrxid_, other->uniqrxid_);
    std::swap(pair_, other->pair_);
    std::swap(testdur_, other->testdur_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PICConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PICConfig_descriptor_;
  metadata.reflection = PICConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* MMSConfig::_default_msgname_ = NULL;
::std::string* MMSConfig::_default_host_ = NULL;
::std::string* MMSConfig::_default_cal30abw_ = NULL;
::std::string* MMSConfig::_default_cal5abw_ = NULL;
::std::string* MMSConfig::_default_uniqrxid_ = NULL;
#ifndef _MSC_VER
const int MMSConfig::kMsgNameFieldNumber;
const int MMSConfig::kChannelFieldNumber;
const int MMSConfig::kBaseAuxFieldNumber;
const int MMSConfig::kIPFieldNumber;
const int MMSConfig::kControlPortFieldNumber;
const int MMSConfig::kDataPortFieldNumber;
const int MMSConfig::kInterfaceIPFieldNumber;
const int MMSConfig::kReceiverFieldNumber;
const int MMSConfig::kHostFieldNumber;
const int MMSConfig::kFsFieldNumber;
const int MMSConfig::kMinRFFieldNumber;
const int MMSConfig::kMaxRFFieldNumber;
const int MMSConfig::kCal30AbwFieldNumber;
const int MMSConfig::kCal5AbwFieldNumber;
const int MMSConfig::kUniqRXIDFieldNumber;
const int MMSConfig::kPairFieldNumber;
const int MMSConfig::kTestDurFieldNumber;
const int MMSConfig::kRfcuPortFieldNumber;
const int MMSConfig::kRfcuIPFieldNumber;
#endif  // !_MSC_VER

MMSConfig::MMSConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MMSConfig::InitAsDefaultInstance() {
}

MMSConfig::MMSConfig(const MMSConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MMSConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  baseaux_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  controlport_ = 0;
  dataport_ = 0;
  interfaceip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiver_ = 0;
  host_ = const_cast< ::std::string*>(_default_host_);
  fs_ = 1e+08f;
  minrf_ = 2e+07f;
  maxrf_ = 3e+09f;
  cal30abw_ = const_cast< ::std::string*>(_default_cal30abw_);
  cal5abw_ = const_cast< ::std::string*>(_default_cal5abw_);
  uniqrxid_ = const_cast< ::std::string*>(_default_uniqrxid_);
  pair_ = 0;
  testdur_ = 0;
  rfcuport_ = -1;
  rfcuip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MMSConfig::~MMSConfig() {
  SharedDtor();
}

void MMSConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (interfaceip_ != &::google::protobuf::internal::kEmptyString) {
    delete interfaceip_;
  }
  if (host_ != _default_host_) {
    delete host_;
  }
  if (cal30abw_ != _default_cal30abw_) {
    delete cal30abw_;
  }
  if (cal5abw_ != _default_cal5abw_) {
    delete cal5abw_;
  }
  if (uniqrxid_ != _default_uniqrxid_) {
    delete uniqrxid_;
  }
  if (rfcuip_ != &::google::protobuf::internal::kEmptyString) {
    delete rfcuip_;
  }
  if (this != default_instance_) {
  }
}

void MMSConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MMSConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MMSConfig_descriptor_;
}

const MMSConfig& MMSConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

MMSConfig* MMSConfig::default_instance_ = NULL;

MMSConfig* MMSConfig::New() const {
  return new MMSConfig;
}

void MMSConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    baseaux_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    controlport_ = 0;
    dataport_ = 0;
    if (has_interfaceip()) {
      if (interfaceip_ != &::google::protobuf::internal::kEmptyString) {
        interfaceip_->clear();
      }
    }
    receiver_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_host()) {
      if (host_ != _default_host_) {
        host_->assign(*_default_host_);
      }
    }
    fs_ = 1e+08f;
    minrf_ = 2e+07f;
    maxrf_ = 3e+09f;
    if (has_cal30abw()) {
      if (cal30abw_ != _default_cal30abw_) {
        cal30abw_->assign(*_default_cal30abw_);
      }
    }
    if (has_cal5abw()) {
      if (cal5abw_ != _default_cal5abw_) {
        cal5abw_->assign(*_default_cal5abw_);
      }
    }
    if (has_uniqrxid()) {
      if (uniqrxid_ != _default_uniqrxid_) {
        uniqrxid_->assign(*_default_uniqrxid_);
      }
    }
    pair_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    testdur_ = 0;
    rfcuport_ = -1;
    if (has_rfcuip()) {
      if (rfcuip_ != &::google::protobuf::internal::kEmptyString) {
        rfcuip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MMSConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "MMS_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_baseAux;
        break;
      }

      // optional int32 baseAux = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseAux:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseaux_)));
          set_has_baseaux();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_IP;
        break;
      }

      // optional string IP = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_controlPort;
        break;
      }

      // optional int32 controlPort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controlPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controlport_)));
          set_has_controlport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dataPort;
        break;
      }

      // optional int32 dataPort = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dataport_)));
          set_has_dataport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_interfaceIP;
        break;
      }

      // optional string interfaceIP = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interfaceIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interfaceip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->interfaceip().data(), this->interfaceip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_receiver;
        break;
      }

      // optional int32 receiver = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiver_)));
          set_has_receiver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_host;
        break;
      }

      // optional string host = 9 [default = "local"];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_fs;
        break;
      }

      // optional float fs = 10 [default = 1e+08];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fs_)));
          set_has_fs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_minRF;
        break;
      }

      // optional float minRF = 11 [default = 2e+07];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minrf_)));
          set_has_minrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_maxRF;
        break;
      }

      // optional float maxRF = 12 [default = 3e+09];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxrf_)));
          set_has_maxrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_cal30abw;
        break;
      }

      // optional string cal30abw = 13 [default = "mms_30abw.csv"];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cal30abw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cal30abw()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cal30abw().data(), this->cal30abw().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_cal5abw;
        break;
      }

      // optional string cal5abw = 14 [default = "mms_5abw.csv"];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cal5abw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cal5abw()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cal5abw().data(), this->cal5abw().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_uniqRXID;
        break;
      }

      // optional string uniqRXID = 15 [default = "999"];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqRXID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqrxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqrxid().data(), this->uniqrxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_pair;
        break;
      }

      // optional int32 pair = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pair_)));
          set_has_pair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_testDur;
        break;
      }

      // optional int32 testDur = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_testDur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &testdur_)));
          set_has_testdur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_rfcuPort;
        break;
      }

      // optional int32 rfcuPort = 18 [default = -1];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rfcuPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rfcuport_)));
          set_has_rfcuport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_rfcuIP;
        break;
      }

      // optional string rfcuIP = 19 [default = ""];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rfcuIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rfcuip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rfcuip().data(), this->rfcuip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MMSConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "MMS_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional int32 baseAux = 3;
  if (has_baseaux()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baseaux(), output);
  }

  // optional string IP = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional int32 controlPort = 5;
  if (has_controlport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->controlport(), output);
  }

  // optional int32 dataPort = 6;
  if (has_dataport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dataport(), output);
  }

  // optional string interfaceIP = 7;
  if (has_interfaceip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->interfaceip().data(), this->interfaceip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->interfaceip(), output);
  }

  // optional int32 receiver = 8;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->receiver(), output);
  }

  // optional string host = 9 [default = "local"];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->host(), output);
  }

  // optional float fs = 10 [default = 1e+08];
  if (has_fs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fs(), output);
  }

  // optional float minRF = 11 [default = 2e+07];
  if (has_minrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->minrf(), output);
  }

  // optional float maxRF = 12 [default = 3e+09];
  if (has_maxrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->maxrf(), output);
  }

  // optional string cal30abw = 13 [default = "mms_30abw.csv"];
  if (has_cal30abw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cal30abw().data(), this->cal30abw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->cal30abw(), output);
  }

  // optional string cal5abw = 14 [default = "mms_5abw.csv"];
  if (has_cal5abw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cal5abw().data(), this->cal5abw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->cal5abw(), output);
  }

  // optional string uniqRXID = 15 [default = "999"];
  if (has_uniqrxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqrxid().data(), this->uniqrxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->uniqrxid(), output);
  }

  // optional int32 pair = 16;
  if (has_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->pair(), output);
  }

  // optional int32 testDur = 17;
  if (has_testdur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->testdur(), output);
  }

  // optional int32 rfcuPort = 18 [default = -1];
  if (has_rfcuport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->rfcuport(), output);
  }

  // optional string rfcuIP = 19 [default = ""];
  if (has_rfcuip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rfcuip().data(), this->rfcuip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->rfcuip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MMSConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "MMS_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional int32 baseAux = 3;
  if (has_baseaux()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->baseaux(), target);
  }

  // optional string IP = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional int32 controlPort = 5;
  if (has_controlport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->controlport(), target);
  }

  // optional int32 dataPort = 6;
  if (has_dataport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dataport(), target);
  }

  // optional string interfaceIP = 7;
  if (has_interfaceip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->interfaceip().data(), this->interfaceip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->interfaceip(), target);
  }

  // optional int32 receiver = 8;
  if (has_receiver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->receiver(), target);
  }

  // optional string host = 9 [default = "local"];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->host(), target);
  }

  // optional float fs = 10 [default = 1e+08];
  if (has_fs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->fs(), target);
  }

  // optional float minRF = 11 [default = 2e+07];
  if (has_minrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->minrf(), target);
  }

  // optional float maxRF = 12 [default = 3e+09];
  if (has_maxrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->maxrf(), target);
  }

  // optional string cal30abw = 13 [default = "mms_30abw.csv"];
  if (has_cal30abw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cal30abw().data(), this->cal30abw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->cal30abw(), target);
  }

  // optional string cal5abw = 14 [default = "mms_5abw.csv"];
  if (has_cal5abw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cal5abw().data(), this->cal5abw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->cal5abw(), target);
  }

  // optional string uniqRXID = 15 [default = "999"];
  if (has_uniqrxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqrxid().data(), this->uniqrxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->uniqrxid(), target);
  }

  // optional int32 pair = 16;
  if (has_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->pair(), target);
  }

  // optional int32 testDur = 17;
  if (has_testdur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->testdur(), target);
  }

  // optional int32 rfcuPort = 18 [default = -1];
  if (has_rfcuport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->rfcuport(), target);
  }

  // optional string rfcuIP = 19 [default = ""];
  if (has_rfcuip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rfcuip().data(), this->rfcuip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->rfcuip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MMSConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "MMS_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 baseAux = 3;
    if (has_baseaux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseaux());
    }

    // optional string IP = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 controlPort = 5;
    if (has_controlport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controlport());
    }

    // optional int32 dataPort = 6;
    if (has_dataport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dataport());
    }

    // optional string interfaceIP = 7;
    if (has_interfaceip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interfaceip());
    }

    // optional int32 receiver = 8;
    if (has_receiver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiver());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string host = 9 [default = "local"];
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional float fs = 10 [default = 1e+08];
    if (has_fs()) {
      total_size += 1 + 4;
    }

    // optional float minRF = 11 [default = 2e+07];
    if (has_minrf()) {
      total_size += 1 + 4;
    }

    // optional float maxRF = 12 [default = 3e+09];
    if (has_maxrf()) {
      total_size += 1 + 4;
    }

    // optional string cal30abw = 13 [default = "mms_30abw.csv"];
    if (has_cal30abw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cal30abw());
    }

    // optional string cal5abw = 14 [default = "mms_5abw.csv"];
    if (has_cal5abw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cal5abw());
    }

    // optional string uniqRXID = 15 [default = "999"];
    if (has_uniqrxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqrxid());
    }

    // optional int32 pair = 16;
    if (has_pair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pair());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 testDur = 17;
    if (has_testdur()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->testdur());
    }

    // optional int32 rfcuPort = 18 [default = -1];
    if (has_rfcuport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rfcuport());
    }

    // optional string rfcuIP = 19 [default = ""];
    if (has_rfcuip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rfcuip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MMSConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MMSConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MMSConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MMSConfig::MergeFrom(const MMSConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_baseaux()) {
      set_baseaux(from.baseaux());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_controlport()) {
      set_controlport(from.controlport());
    }
    if (from.has_dataport()) {
      set_dataport(from.dataport());
    }
    if (from.has_interfaceip()) {
      set_interfaceip(from.interfaceip());
    }
    if (from.has_receiver()) {
      set_receiver(from.receiver());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_fs()) {
      set_fs(from.fs());
    }
    if (from.has_minrf()) {
      set_minrf(from.minrf());
    }
    if (from.has_maxrf()) {
      set_maxrf(from.maxrf());
    }
    if (from.has_cal30abw()) {
      set_cal30abw(from.cal30abw());
    }
    if (from.has_cal5abw()) {
      set_cal5abw(from.cal5abw());
    }
    if (from.has_uniqrxid()) {
      set_uniqrxid(from.uniqrxid());
    }
    if (from.has_pair()) {
      set_pair(from.pair());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_testdur()) {
      set_testdur(from.testdur());
    }
    if (from.has_rfcuport()) {
      set_rfcuport(from.rfcuport());
    }
    if (from.has_rfcuip()) {
      set_rfcuip(from.rfcuip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MMSConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MMSConfig::CopyFrom(const MMSConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMSConfig::IsInitialized() const {

  return true;
}

void MMSConfig::Swap(MMSConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(baseaux_, other->baseaux_);
    std::swap(ip_, other->ip_);
    std::swap(controlport_, other->controlport_);
    std::swap(dataport_, other->dataport_);
    std::swap(interfaceip_, other->interfaceip_);
    std::swap(receiver_, other->receiver_);
    std::swap(host_, other->host_);
    std::swap(fs_, other->fs_);
    std::swap(minrf_, other->minrf_);
    std::swap(maxrf_, other->maxrf_);
    std::swap(cal30abw_, other->cal30abw_);
    std::swap(cal5abw_, other->cal5abw_);
    std::swap(uniqrxid_, other->uniqrxid_);
    std::swap(pair_, other->pair_);
    std::swap(testdur_, other->testdur_);
    std::swap(rfcuport_, other->rfcuport_);
    std::swap(rfcuip_, other->rfcuip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MMSConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MMSConfig_descriptor_;
  metadata.reflection = MMSConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ZACQConfig::_default_msgname_ = NULL;
::std::string* ZACQConfig::_default_host_ = NULL;
::std::string* ZACQConfig::_default_uniqrxid_ = NULL;
#ifndef _MSC_VER
const int ZACQConfig::kMsgNameFieldNumber;
const int ZACQConfig::kChannelFieldNumber;
const int ZACQConfig::kBaseAuxFieldNumber;
const int ZACQConfig::kRxFieldNumber;
const int ZACQConfig::kHostFieldNumber;
const int ZACQConfig::kFsFieldNumber;
const int ZACQConfig::kMinRFFieldNumber;
const int ZACQConfig::kMaxRFFieldNumber;
const int ZACQConfig::kUniqRXIDFieldNumber;
const int ZACQConfig::kPairFieldNumber;
const int ZACQConfig::kTestDurFieldNumber;
const int ZACQConfig::kInitScriptFieldNumber;
#endif  // !_MSC_VER

ZACQConfig::ZACQConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZACQConfig::InitAsDefaultInstance() {
}

ZACQConfig::ZACQConfig(const ZACQConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZACQConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  baseaux_ = 0;
  rx_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(_default_host_);
  fs_ = 1e+08f;
  minrf_ = 2e+07f;
  maxrf_ = 3e+09f;
  uniqrxid_ = const_cast< ::std::string*>(_default_uniqrxid_);
  pair_ = 0;
  testdur_ = 0;
  initscript_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZACQConfig::~ZACQConfig() {
  SharedDtor();
}

void ZACQConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (rx_ != &::google::protobuf::internal::kEmptyString) {
    delete rx_;
  }
  if (host_ != _default_host_) {
    delete host_;
  }
  if (uniqrxid_ != _default_uniqrxid_) {
    delete uniqrxid_;
  }
  if (initscript_ != &::google::protobuf::internal::kEmptyString) {
    delete initscript_;
  }
  if (this != default_instance_) {
  }
}

void ZACQConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZACQConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZACQConfig_descriptor_;
}

const ZACQConfig& ZACQConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

ZACQConfig* ZACQConfig::default_instance_ = NULL;

ZACQConfig* ZACQConfig::New() const {
  return new ZACQConfig;
}

void ZACQConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    baseaux_ = 0;
    if (has_rx()) {
      if (rx_ != &::google::protobuf::internal::kEmptyString) {
        rx_->clear();
      }
    }
    if (has_host()) {
      if (host_ != _default_host_) {
        host_->assign(*_default_host_);
      }
    }
    fs_ = 1e+08f;
    minrf_ = 2e+07f;
    maxrf_ = 3e+09f;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_uniqrxid()) {
      if (uniqrxid_ != _default_uniqrxid_) {
        uniqrxid_->assign(*_default_uniqrxid_);
      }
    }
    pair_ = 0;
    testdur_ = 0;
    if (has_initscript()) {
      if (initscript_ != &::google::protobuf::internal::kEmptyString) {
        initscript_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZACQConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ZACQ_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_baseAux;
        break;
      }

      // optional int32 baseAux = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseAux:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseaux_)));
          set_has_baseaux();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rx;
        break;
      }

      // optional string rx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rx().data(), this->rx().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_host;
        break;
      }

      // optional string host = 5 [default = "local"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_fs;
        break;
      }

      // optional float fs = 6 [default = 1e+08];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fs_)));
          set_has_fs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_minRF;
        break;
      }

      // optional float minRF = 7 [default = 2e+07];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minrf_)));
          set_has_minrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_maxRF;
        break;
      }

      // optional float maxRF = 8 [default = 3e+09];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxrf_)));
          set_has_maxrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_uniqRXID;
        break;
      }

      // optional string uniqRXID = 9 [default = "999"];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqRXID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqrxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqrxid().data(), this->uniqrxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pair;
        break;
      }

      // optional int32 pair = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pair_)));
          set_has_pair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_testDur;
        break;
      }

      // optional int32 testDur = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_testDur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &testdur_)));
          set_has_testdur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_initScript;
        break;
      }

      // optional string initScript = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initScript:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initscript()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->initscript().data(), this->initscript().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZACQConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ZACQ_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional int32 baseAux = 3;
  if (has_baseaux()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baseaux(), output);
  }

  // optional string rx = 4;
  if (has_rx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx().data(), this->rx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rx(), output);
  }

  // optional string host = 5 [default = "local"];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->host(), output);
  }

  // optional float fs = 6 [default = 1e+08];
  if (has_fs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fs(), output);
  }

  // optional float minRF = 7 [default = 2e+07];
  if (has_minrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->minrf(), output);
  }

  // optional float maxRF = 8 [default = 3e+09];
  if (has_maxrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->maxrf(), output);
  }

  // optional string uniqRXID = 9 [default = "999"];
  if (has_uniqrxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqrxid().data(), this->uniqrxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->uniqrxid(), output);
  }

  // optional int32 pair = 10;
  if (has_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pair(), output);
  }

  // optional int32 testDur = 11;
  if (has_testdur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->testdur(), output);
  }

  // optional string initScript = 12;
  if (has_initscript()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initscript().data(), this->initscript().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->initscript(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZACQConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ZACQ_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional int32 baseAux = 3;
  if (has_baseaux()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->baseaux(), target);
  }

  // optional string rx = 4;
  if (has_rx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rx().data(), this->rx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rx(), target);
  }

  // optional string host = 5 [default = "local"];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->host(), target);
  }

  // optional float fs = 6 [default = 1e+08];
  if (has_fs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->fs(), target);
  }

  // optional float minRF = 7 [default = 2e+07];
  if (has_minrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->minrf(), target);
  }

  // optional float maxRF = 8 [default = 3e+09];
  if (has_maxrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->maxrf(), target);
  }

  // optional string uniqRXID = 9 [default = "999"];
  if (has_uniqrxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqrxid().data(), this->uniqrxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->uniqrxid(), target);
  }

  // optional int32 pair = 10;
  if (has_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pair(), target);
  }

  // optional int32 testDur = 11;
  if (has_testdur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->testdur(), target);
  }

  // optional string initScript = 12;
  if (has_initscript()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initscript().data(), this->initscript().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->initscript(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZACQConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ZACQ_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 baseAux = 3;
    if (has_baseaux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseaux());
    }

    // optional string rx = 4;
    if (has_rx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rx());
    }

    // optional string host = 5 [default = "local"];
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional float fs = 6 [default = 1e+08];
    if (has_fs()) {
      total_size += 1 + 4;
    }

    // optional float minRF = 7 [default = 2e+07];
    if (has_minrf()) {
      total_size += 1 + 4;
    }

    // optional float maxRF = 8 [default = 3e+09];
    if (has_maxrf()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string uniqRXID = 9 [default = "999"];
    if (has_uniqrxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqrxid());
    }

    // optional int32 pair = 10;
    if (has_pair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pair());
    }

    // optional int32 testDur = 11;
    if (has_testdur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->testdur());
    }

    // optional string initScript = 12;
    if (has_initscript()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initscript());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZACQConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZACQConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZACQConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZACQConfig::MergeFrom(const ZACQConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_baseaux()) {
      set_baseaux(from.baseaux());
    }
    if (from.has_rx()) {
      set_rx(from.rx());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_fs()) {
      set_fs(from.fs());
    }
    if (from.has_minrf()) {
      set_minrf(from.minrf());
    }
    if (from.has_maxrf()) {
      set_maxrf(from.maxrf());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uniqrxid()) {
      set_uniqrxid(from.uniqrxid());
    }
    if (from.has_pair()) {
      set_pair(from.pair());
    }
    if (from.has_testdur()) {
      set_testdur(from.testdur());
    }
    if (from.has_initscript()) {
      set_initscript(from.initscript());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZACQConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZACQConfig::CopyFrom(const ZACQConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZACQConfig::IsInitialized() const {

  return true;
}

void ZACQConfig::Swap(ZACQConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(baseaux_, other->baseaux_);
    std::swap(rx_, other->rx_);
    std::swap(host_, other->host_);
    std::swap(fs_, other->fs_);
    std::swap(minrf_, other->minrf_);
    std::swap(maxrf_, other->maxrf_);
    std::swap(uniqrxid_, other->uniqrxid_);
    std::swap(pair_, other->pair_);
    std::swap(testdur_, other->testdur_);
    std::swap(initscript_, other->initscript_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZACQConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZACQConfig_descriptor_;
  metadata.reflection = ZACQConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* USRPRxTxConfig::_default_msgname_ = NULL;
::std::string* USRPRxTxConfig::_default_args_ = NULL;
::std::string* USRPRxTxConfig::_default_uniqrxid_ = NULL;
#ifndef _MSC_VER
const int USRPRxTxConfig::kMsgNameFieldNumber;
const int USRPRxTxConfig::kChannelFieldNumber;
const int USRPRxTxConfig::kBaseAuxFieldNumber;
const int USRPRxTxConfig::kArgsFieldNumber;
const int USRPRxTxConfig::kMinRFFieldNumber;
const int USRPRxTxConfig::kMaxRFFieldNumber;
const int USRPRxTxConfig::kFsFieldNumber;
const int USRPRxTxConfig::kUniqRXIDFieldNumber;
#endif  // !_MSC_VER

USRPRxTxConfig::USRPRxTxConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void USRPRxTxConfig::InitAsDefaultInstance() {
}

USRPRxTxConfig::USRPRxTxConfig(const USRPRxTxConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void USRPRxTxConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  baseaux_ = 0;
  args_ = const_cast< ::std::string*>(_default_args_);
  minrf_ = 0;
  maxrf_ = 0;
  fs_ = 1e+08f;
  uniqrxid_ = const_cast< ::std::string*>(_default_uniqrxid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

USRPRxTxConfig::~USRPRxTxConfig() {
  SharedDtor();
}

void USRPRxTxConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (args_ != _default_args_) {
    delete args_;
  }
  if (uniqrxid_ != _default_uniqrxid_) {
    delete uniqrxid_;
  }
  if (this != default_instance_) {
  }
}

void USRPRxTxConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* USRPRxTxConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return USRPRxTxConfig_descriptor_;
}

const USRPRxTxConfig& USRPRxTxConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

USRPRxTxConfig* USRPRxTxConfig::default_instance_ = NULL;

USRPRxTxConfig* USRPRxTxConfig::New() const {
  return new USRPRxTxConfig;
}

void USRPRxTxConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    baseaux_ = 0;
    if (has_args()) {
      if (args_ != _default_args_) {
        args_->assign(*_default_args_);
      }
    }
    minrf_ = 0;
    maxrf_ = 0;
    fs_ = 1e+08f;
    if (has_uniqrxid()) {
      if (uniqrxid_ != _default_uniqrxid_) {
        uniqrxid_->assign(*_default_uniqrxid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool USRPRxTxConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "USRP_RXTX_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_baseAux;
        break;
      }

      // optional int32 baseAux = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseAux:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseaux_)));
          set_has_baseaux();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_args;
        break;
      }

      // optional string args = 4 [default = "addr=192.168.10.2"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_minRF;
        break;
      }

      // optional float minRF = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minrf_)));
          set_has_minrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_maxRF;
        break;
      }

      // optional float maxRF = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxrf_)));
          set_has_maxrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_fs;
        break;
      }

      // optional float fs = 7 [default = 1e+08];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fs_)));
          set_has_fs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_uniqRXID;
        break;
      }

      // optional string uniqRXID = 8 [default = "999"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqRXID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqrxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqrxid().data(), this->uniqrxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void USRPRxTxConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "USRP_RXTX_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional int32 baseAux = 3;
  if (has_baseaux()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baseaux(), output);
  }

  // optional string args = 4 [default = "addr=192.168.10.2"];
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->args(), output);
  }

  // optional float minRF = 5;
  if (has_minrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->minrf(), output);
  }

  // optional float maxRF = 6;
  if (has_maxrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->maxrf(), output);
  }

  // optional float fs = 7 [default = 1e+08];
  if (has_fs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fs(), output);
  }

  // optional string uniqRXID = 8 [default = "999"];
  if (has_uniqrxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqrxid().data(), this->uniqrxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->uniqrxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* USRPRxTxConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "USRP_RXTX_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional int32 baseAux = 3;
  if (has_baseaux()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->baseaux(), target);
  }

  // optional string args = 4 [default = "addr=192.168.10.2"];
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->args(), target);
  }

  // optional float minRF = 5;
  if (has_minrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->minrf(), target);
  }

  // optional float maxRF = 6;
  if (has_maxrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->maxrf(), target);
  }

  // optional float fs = 7 [default = 1e+08];
  if (has_fs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fs(), target);
  }

  // optional string uniqRXID = 8 [default = "999"];
  if (has_uniqrxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqrxid().data(), this->uniqrxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->uniqrxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int USRPRxTxConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "USRP_RXTX_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 baseAux = 3;
    if (has_baseaux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseaux());
    }

    // optional string args = 4 [default = "addr=192.168.10.2"];
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->args());
    }

    // optional float minRF = 5;
    if (has_minrf()) {
      total_size += 1 + 4;
    }

    // optional float maxRF = 6;
    if (has_maxrf()) {
      total_size += 1 + 4;
    }

    // optional float fs = 7 [default = 1e+08];
    if (has_fs()) {
      total_size += 1 + 4;
    }

    // optional string uniqRXID = 8 [default = "999"];
    if (has_uniqrxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqrxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void USRPRxTxConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const USRPRxTxConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const USRPRxTxConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void USRPRxTxConfig::MergeFrom(const USRPRxTxConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_baseaux()) {
      set_baseaux(from.baseaux());
    }
    if (from.has_args()) {
      set_args(from.args());
    }
    if (from.has_minrf()) {
      set_minrf(from.minrf());
    }
    if (from.has_maxrf()) {
      set_maxrf(from.maxrf());
    }
    if (from.has_fs()) {
      set_fs(from.fs());
    }
    if (from.has_uniqrxid()) {
      set_uniqrxid(from.uniqrxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void USRPRxTxConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USRPRxTxConfig::CopyFrom(const USRPRxTxConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USRPRxTxConfig::IsInitialized() const {

  return true;
}

void USRPRxTxConfig::Swap(USRPRxTxConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(baseaux_, other->baseaux_);
    std::swap(args_, other->args_);
    std::swap(minrf_, other->minrf_);
    std::swap(maxrf_, other->maxrf_);
    std::swap(fs_, other->fs_);
    std::swap(uniqrxid_, other->uniqrxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata USRPRxTxConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = USRPRxTxConfig_descriptor_;
  metadata.reflection = USRPRxTxConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EPIQRxTxConfig::_default_msgname_ = NULL;
::std::string* EPIQRxTxConfig::_default_host_ = NULL;
::std::string* EPIQRxTxConfig::_default_uniqrxid_ = NULL;
::std::string* EPIQRxTxConfig::_default_uniqtxid_ = NULL;
#ifndef _MSC_VER
const int EPIQRxTxConfig::kMsgNameFieldNumber;
const int EPIQRxTxConfig::kChannelFieldNumber;
const int EPIQRxTxConfig::kBaseAuxFieldNumber;
const int EPIQRxTxConfig::kControlPortFieldNumber;
const int EPIQRxTxConfig::kRfPortFieldNumber;
const int EPIQRxTxConfig::kHostFieldNumber;
const int EPIQRxTxConfig::kMinRFFieldNumber;
const int EPIQRxTxConfig::kMaxRFFieldNumber;
const int EPIQRxTxConfig::kFsFieldNumber;
const int EPIQRxTxConfig::kUniqRXIDFieldNumber;
const int EPIQRxTxConfig::kUniqTXIDFieldNumber;
const int EPIQRxTxConfig::kDelayResetFieldNumber;
#endif  // !_MSC_VER

EPIQRxTxConfig::EPIQRxTxConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EPIQRxTxConfig::InitAsDefaultInstance() {
}

EPIQRxTxConfig::EPIQRxTxConfig(const EPIQRxTxConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EPIQRxTxConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  baseaux_ = 0;
  controlport_ = 0;
  rfport_ = 0;
  host_ = const_cast< ::std::string*>(_default_host_);
  minrf_ = 0;
  maxrf_ = 0;
  fs_ = 2.5e+07f;
  uniqrxid_ = const_cast< ::std::string*>(_default_uniqrxid_);
  uniqtxid_ = const_cast< ::std::string*>(_default_uniqtxid_);
  delayreset_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EPIQRxTxConfig::~EPIQRxTxConfig() {
  SharedDtor();
}

void EPIQRxTxConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (host_ != _default_host_) {
    delete host_;
  }
  if (uniqrxid_ != _default_uniqrxid_) {
    delete uniqrxid_;
  }
  if (uniqtxid_ != _default_uniqtxid_) {
    delete uniqtxid_;
  }
  if (this != default_instance_) {
  }
}

void EPIQRxTxConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EPIQRxTxConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPIQRxTxConfig_descriptor_;
}

const EPIQRxTxConfig& EPIQRxTxConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

EPIQRxTxConfig* EPIQRxTxConfig::default_instance_ = NULL;

EPIQRxTxConfig* EPIQRxTxConfig::New() const {
  return new EPIQRxTxConfig;
}

void EPIQRxTxConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    baseaux_ = 0;
    controlport_ = 0;
    rfport_ = 0;
    if (has_host()) {
      if (host_ != _default_host_) {
        host_->assign(*_default_host_);
      }
    }
    minrf_ = 0;
    maxrf_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fs_ = 2.5e+07f;
    if (has_uniqrxid()) {
      if (uniqrxid_ != _default_uniqrxid_) {
        uniqrxid_->assign(*_default_uniqrxid_);
      }
    }
    if (has_uniqtxid()) {
      if (uniqtxid_ != _default_uniqtxid_) {
        uniqtxid_->assign(*_default_uniqtxid_);
      }
    }
    delayreset_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EPIQRxTxConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EPIQ_RXTX_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_baseAux;
        break;
      }

      // optional int32 baseAux = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseAux:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseaux_)));
          set_has_baseaux();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_controlPort;
        break;
      }

      // optional int32 controlPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controlPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controlport_)));
          set_has_controlport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rfPort;
        break;
      }

      // optional int32 rfPort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rfPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rfport_)));
          set_has_rfport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_host;
        break;
      }

      // optional string host = 6 [default = "local"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_minRF;
        break;
      }

      // optional float minRF = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minrf_)));
          set_has_minrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_maxRF;
        break;
      }

      // optional float maxRF = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxrf_)));
          set_has_maxrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_fs;
        break;
      }

      // optional float fs = 9 [default = 2.5e+07];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fs_)));
          set_has_fs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_uniqRXID;
        break;
      }

      // optional string uniqRXID = 10 [default = "999"];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqRXID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqrxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqrxid().data(), this->uniqrxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_uniqTXID;
        break;
      }

      // optional string uniqTXID = 11 [default = "999"];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqTXID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqtxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqtxid().data(), this->uniqtxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_delayReset;
        break;
      }

      // optional float delayReset = 12 [default = -1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_delayReset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delayreset_)));
          set_has_delayreset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EPIQRxTxConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EPIQ_RXTX_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional int32 baseAux = 3;
  if (has_baseaux()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baseaux(), output);
  }

  // optional int32 controlPort = 4;
  if (has_controlport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->controlport(), output);
  }

  // optional int32 rfPort = 5;
  if (has_rfport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rfport(), output);
  }

  // optional string host = 6 [default = "local"];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->host(), output);
  }

  // optional float minRF = 7;
  if (has_minrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->minrf(), output);
  }

  // optional float maxRF = 8;
  if (has_maxrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->maxrf(), output);
  }

  // optional float fs = 9 [default = 2.5e+07];
  if (has_fs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->fs(), output);
  }

  // optional string uniqRXID = 10 [default = "999"];
  if (has_uniqrxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqrxid().data(), this->uniqrxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->uniqrxid(), output);
  }

  // optional string uniqTXID = 11 [default = "999"];
  if (has_uniqtxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqtxid().data(), this->uniqtxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->uniqtxid(), output);
  }

  // optional float delayReset = 12 [default = -1];
  if (has_delayreset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->delayreset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EPIQRxTxConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EPIQ_RXTX_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional int32 baseAux = 3;
  if (has_baseaux()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->baseaux(), target);
  }

  // optional int32 controlPort = 4;
  if (has_controlport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->controlport(), target);
  }

  // optional int32 rfPort = 5;
  if (has_rfport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rfport(), target);
  }

  // optional string host = 6 [default = "local"];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->host(), target);
  }

  // optional float minRF = 7;
  if (has_minrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->minrf(), target);
  }

  // optional float maxRF = 8;
  if (has_maxrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->maxrf(), target);
  }

  // optional float fs = 9 [default = 2.5e+07];
  if (has_fs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->fs(), target);
  }

  // optional string uniqRXID = 10 [default = "999"];
  if (has_uniqrxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqrxid().data(), this->uniqrxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->uniqrxid(), target);
  }

  // optional string uniqTXID = 11 [default = "999"];
  if (has_uniqtxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqtxid().data(), this->uniqtxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->uniqtxid(), target);
  }

  // optional float delayReset = 12 [default = -1];
  if (has_delayreset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->delayreset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EPIQRxTxConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EPIQ_RXTX_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 baseAux = 3;
    if (has_baseaux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseaux());
    }

    // optional int32 controlPort = 4;
    if (has_controlport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controlport());
    }

    // optional int32 rfPort = 5;
    if (has_rfport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rfport());
    }

    // optional string host = 6 [default = "local"];
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional float minRF = 7;
    if (has_minrf()) {
      total_size += 1 + 4;
    }

    // optional float maxRF = 8;
    if (has_maxrf()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float fs = 9 [default = 2.5e+07];
    if (has_fs()) {
      total_size += 1 + 4;
    }

    // optional string uniqRXID = 10 [default = "999"];
    if (has_uniqrxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqrxid());
    }

    // optional string uniqTXID = 11 [default = "999"];
    if (has_uniqtxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqtxid());
    }

    // optional float delayReset = 12 [default = -1];
    if (has_delayreset()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EPIQRxTxConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EPIQRxTxConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EPIQRxTxConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EPIQRxTxConfig::MergeFrom(const EPIQRxTxConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_baseaux()) {
      set_baseaux(from.baseaux());
    }
    if (from.has_controlport()) {
      set_controlport(from.controlport());
    }
    if (from.has_rfport()) {
      set_rfport(from.rfport());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_minrf()) {
      set_minrf(from.minrf());
    }
    if (from.has_maxrf()) {
      set_maxrf(from.maxrf());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fs()) {
      set_fs(from.fs());
    }
    if (from.has_uniqrxid()) {
      set_uniqrxid(from.uniqrxid());
    }
    if (from.has_uniqtxid()) {
      set_uniqtxid(from.uniqtxid());
    }
    if (from.has_delayreset()) {
      set_delayreset(from.delayreset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EPIQRxTxConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EPIQRxTxConfig::CopyFrom(const EPIQRxTxConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EPIQRxTxConfig::IsInitialized() const {

  return true;
}

void EPIQRxTxConfig::Swap(EPIQRxTxConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(baseaux_, other->baseaux_);
    std::swap(controlport_, other->controlport_);
    std::swap(rfport_, other->rfport_);
    std::swap(host_, other->host_);
    std::swap(minrf_, other->minrf_);
    std::swap(maxrf_, other->maxrf_);
    std::swap(fs_, other->fs_);
    std::swap(uniqrxid_, other->uniqrxid_);
    std::swap(uniqtxid_, other->uniqtxid_);
    std::swap(delayreset_, other->delayreset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EPIQRxTxConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EPIQRxTxConfig_descriptor_;
  metadata.reflection = EPIQRxTxConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RTLSDRConfig::_default_msgname_ = NULL;
::std::string* RTLSDRConfig::_default_host_ = NULL;
::std::string* RTLSDRConfig::_default_uniqrxid_ = NULL;
#ifndef _MSC_VER
const int RTLSDRConfig::kMsgNameFieldNumber;
const int RTLSDRConfig::kChannelFieldNumber;
const int RTLSDRConfig::kBaseAuxFieldNumber;
const int RTLSDRConfig::kControlPortFieldNumber;
const int RTLSDRConfig::kHostFieldNumber;
const int RTLSDRConfig::kMinRFFieldNumber;
const int RTLSDRConfig::kMaxRFFieldNumber;
const int RTLSDRConfig::kFsFieldNumber;
const int RTLSDRConfig::kUniqRXIDFieldNumber;
#endif  // !_MSC_VER

RTLSDRConfig::RTLSDRConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RTLSDRConfig::InitAsDefaultInstance() {
}

RTLSDRConfig::RTLSDRConfig(const RTLSDRConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RTLSDRConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  baseaux_ = 0;
  controlport_ = 0;
  host_ = const_cast< ::std::string*>(_default_host_);
  minrf_ = 0;
  maxrf_ = 0;
  fs_ = 2.048e+06f;
  uniqrxid_ = const_cast< ::std::string*>(_default_uniqrxid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RTLSDRConfig::~RTLSDRConfig() {
  SharedDtor();
}

void RTLSDRConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (host_ != _default_host_) {
    delete host_;
  }
  if (uniqrxid_ != _default_uniqrxid_) {
    delete uniqrxid_;
  }
  if (this != default_instance_) {
  }
}

void RTLSDRConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RTLSDRConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RTLSDRConfig_descriptor_;
}

const RTLSDRConfig& RTLSDRConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

RTLSDRConfig* RTLSDRConfig::default_instance_ = NULL;

RTLSDRConfig* RTLSDRConfig::New() const {
  return new RTLSDRConfig;
}

void RTLSDRConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    baseaux_ = 0;
    controlport_ = 0;
    if (has_host()) {
      if (host_ != _default_host_) {
        host_->assign(*_default_host_);
      }
    }
    minrf_ = 0;
    maxrf_ = 0;
    fs_ = 2.048e+06f;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_uniqrxid()) {
      if (uniqrxid_ != _default_uniqrxid_) {
        uniqrxid_->assign(*_default_uniqrxid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RTLSDRConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RTLSDR_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_baseAux;
        break;
      }

      // optional int32 baseAux = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseAux:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseaux_)));
          set_has_baseaux();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_controlPort;
        break;
      }

      // optional int32 controlPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controlPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controlport_)));
          set_has_controlport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_host;
        break;
      }

      // optional string host = 5 [default = "local"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_minRF;
        break;
      }

      // optional float minRF = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minrf_)));
          set_has_minrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_maxRF;
        break;
      }

      // optional float maxRF = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxrf_)));
          set_has_maxrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_fs;
        break;
      }

      // optional float fs = 8 [default = 2.048e+06];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fs_)));
          set_has_fs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_uniqRXID;
        break;
      }

      // optional string uniqRXID = 9 [default = "999"];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqRXID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqrxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqrxid().data(), this->uniqrxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RTLSDRConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RTLSDR_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional int32 baseAux = 3;
  if (has_baseaux()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baseaux(), output);
  }

  // optional int32 controlPort = 4;
  if (has_controlport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->controlport(), output);
  }

  // optional string host = 5 [default = "local"];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->host(), output);
  }

  // optional float minRF = 6;
  if (has_minrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->minrf(), output);
  }

  // optional float maxRF = 7;
  if (has_maxrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->maxrf(), output);
  }

  // optional float fs = 8 [default = 2.048e+06];
  if (has_fs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->fs(), output);
  }

  // optional string uniqRXID = 9 [default = "999"];
  if (has_uniqrxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqrxid().data(), this->uniqrxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->uniqrxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RTLSDRConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RTLSDR_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional int32 baseAux = 3;
  if (has_baseaux()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->baseaux(), target);
  }

  // optional int32 controlPort = 4;
  if (has_controlport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->controlport(), target);
  }

  // optional string host = 5 [default = "local"];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->host(), target);
  }

  // optional float minRF = 6;
  if (has_minrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->minrf(), target);
  }

  // optional float maxRF = 7;
  if (has_maxrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->maxrf(), target);
  }

  // optional float fs = 8 [default = 2.048e+06];
  if (has_fs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->fs(), target);
  }

  // optional string uniqRXID = 9 [default = "999"];
  if (has_uniqrxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqrxid().data(), this->uniqrxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->uniqrxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RTLSDRConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RTLSDR_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 baseAux = 3;
    if (has_baseaux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseaux());
    }

    // optional int32 controlPort = 4;
    if (has_controlport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controlport());
    }

    // optional string host = 5 [default = "local"];
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional float minRF = 6;
    if (has_minrf()) {
      total_size += 1 + 4;
    }

    // optional float maxRF = 7;
    if (has_maxrf()) {
      total_size += 1 + 4;
    }

    // optional float fs = 8 [default = 2.048e+06];
    if (has_fs()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string uniqRXID = 9 [default = "999"];
    if (has_uniqrxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqrxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RTLSDRConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RTLSDRConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RTLSDRConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RTLSDRConfig::MergeFrom(const RTLSDRConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_baseaux()) {
      set_baseaux(from.baseaux());
    }
    if (from.has_controlport()) {
      set_controlport(from.controlport());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_minrf()) {
      set_minrf(from.minrf());
    }
    if (from.has_maxrf()) {
      set_maxrf(from.maxrf());
    }
    if (from.has_fs()) {
      set_fs(from.fs());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uniqrxid()) {
      set_uniqrxid(from.uniqrxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RTLSDRConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTLSDRConfig::CopyFrom(const RTLSDRConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTLSDRConfig::IsInitialized() const {

  return true;
}

void RTLSDRConfig::Swap(RTLSDRConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(baseaux_, other->baseaux_);
    std::swap(controlport_, other->controlport_);
    std::swap(host_, other->host_);
    std::swap(minrf_, other->minrf_);
    std::swap(maxrf_, other->maxrf_);
    std::swap(fs_, other->fs_);
    std::swap(uniqrxid_, other->uniqrxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RTLSDRConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RTLSDRConfig_descriptor_;
  metadata.reflection = RTLSDRConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* USRPRxConfig::_default_msgname_ = NULL;
::std::string* USRPRxConfig::_default_args_ = NULL;
#ifndef _MSC_VER
const int USRPRxConfig::kMsgNameFieldNumber;
const int USRPRxConfig::kChannelFieldNumber;
const int USRPRxConfig::kBaseAuxFieldNumber;
const int USRPRxConfig::kArgsFieldNumber;
const int USRPRxConfig::kUsrpchanFieldNumber;
const int USRPRxConfig::kMinRFFieldNumber;
const int USRPRxConfig::kMaxRFFieldNumber;
const int USRPRxConfig::kFsFieldNumber;
#endif  // !_MSC_VER

USRPRxConfig::USRPRxConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void USRPRxConfig::InitAsDefaultInstance() {
}

USRPRxConfig::USRPRxConfig(const USRPRxConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void USRPRxConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  baseaux_ = 0;
  args_ = const_cast< ::std::string*>(_default_args_);
  usrpchan_ = 0;
  minrf_ = 0;
  maxrf_ = 0;
  fs_ = 1e+08f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

USRPRxConfig::~USRPRxConfig() {
  SharedDtor();
}

void USRPRxConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (args_ != _default_args_) {
    delete args_;
  }
  if (this != default_instance_) {
  }
}

void USRPRxConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* USRPRxConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return USRPRxConfig_descriptor_;
}

const USRPRxConfig& USRPRxConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

USRPRxConfig* USRPRxConfig::default_instance_ = NULL;

USRPRxConfig* USRPRxConfig::New() const {
  return new USRPRxConfig;
}

void USRPRxConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    baseaux_ = 0;
    if (has_args()) {
      if (args_ != _default_args_) {
        args_->assign(*_default_args_);
      }
    }
    usrpchan_ = 0;
    minrf_ = 0;
    maxrf_ = 0;
    fs_ = 1e+08f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool USRPRxConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "USRP_RX_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_baseAux;
        break;
      }

      // optional int32 baseAux = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseAux:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseaux_)));
          set_has_baseaux();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_args;
        break;
      }

      // optional string args = 4 [default = "addr=192.168.10.2"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_usrpchan;
        break;
      }

      // optional int32 usrpchan = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usrpchan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usrpchan_)));
          set_has_usrpchan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_minRF;
        break;
      }

      // optional float minRF = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minrf_)));
          set_has_minrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_maxRF;
        break;
      }

      // optional float maxRF = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxrf_)));
          set_has_maxrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_fs;
        break;
      }

      // optional float fs = 8 [default = 1e+08];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fs_)));
          set_has_fs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void USRPRxConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "USRP_RX_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional int32 baseAux = 3;
  if (has_baseaux()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baseaux(), output);
  }

  // optional string args = 4 [default = "addr=192.168.10.2"];
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->args(), output);
  }

  // optional int32 usrpchan = 5;
  if (has_usrpchan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->usrpchan(), output);
  }

  // optional float minRF = 6;
  if (has_minrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->minrf(), output);
  }

  // optional float maxRF = 7;
  if (has_maxrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->maxrf(), output);
  }

  // optional float fs = 8 [default = 1e+08];
  if (has_fs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->fs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* USRPRxConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "USRP_RX_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional int32 baseAux = 3;
  if (has_baseaux()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->baseaux(), target);
  }

  // optional string args = 4 [default = "addr=192.168.10.2"];
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->args(), target);
  }

  // optional int32 usrpchan = 5;
  if (has_usrpchan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->usrpchan(), target);
  }

  // optional float minRF = 6;
  if (has_minrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->minrf(), target);
  }

  // optional float maxRF = 7;
  if (has_maxrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->maxrf(), target);
  }

  // optional float fs = 8 [default = 1e+08];
  if (has_fs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->fs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int USRPRxConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "USRP_RX_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 baseAux = 3;
    if (has_baseaux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseaux());
    }

    // optional string args = 4 [default = "addr=192.168.10.2"];
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->args());
    }

    // optional int32 usrpchan = 5;
    if (has_usrpchan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usrpchan());
    }

    // optional float minRF = 6;
    if (has_minrf()) {
      total_size += 1 + 4;
    }

    // optional float maxRF = 7;
    if (has_maxrf()) {
      total_size += 1 + 4;
    }

    // optional float fs = 8 [default = 1e+08];
    if (has_fs()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void USRPRxConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const USRPRxConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const USRPRxConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void USRPRxConfig::MergeFrom(const USRPRxConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_baseaux()) {
      set_baseaux(from.baseaux());
    }
    if (from.has_args()) {
      set_args(from.args());
    }
    if (from.has_usrpchan()) {
      set_usrpchan(from.usrpchan());
    }
    if (from.has_minrf()) {
      set_minrf(from.minrf());
    }
    if (from.has_maxrf()) {
      set_maxrf(from.maxrf());
    }
    if (from.has_fs()) {
      set_fs(from.fs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void USRPRxConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USRPRxConfig::CopyFrom(const USRPRxConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USRPRxConfig::IsInitialized() const {

  return true;
}

void USRPRxConfig::Swap(USRPRxConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(baseaux_, other->baseaux_);
    std::swap(args_, other->args_);
    std::swap(usrpchan_, other->usrpchan_);
    std::swap(minrf_, other->minrf_);
    std::swap(maxrf_, other->maxrf_);
    std::swap(fs_, other->fs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata USRPRxConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = USRPRxConfig_descriptor_;
  metadata.reflection = USRPRxConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PentekConfig_SiggenType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PentekConfig_SiggenType_descriptor_;
}
bool PentekConfig_SiggenType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PentekConfig_SiggenType PentekConfig::ROHDE_SCHWARZ;
const PentekConfig_SiggenType PentekConfig::MMS_MUP;
const PentekConfig_SiggenType PentekConfig::SiggenType_MIN;
const PentekConfig_SiggenType PentekConfig::SiggenType_MAX;
const int PentekConfig::SiggenType_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* PentekConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int PentekConfig::kMsgNameFieldNumber;
const int PentekConfig::kClkFreqFieldNumber;
const int PentekConfig::kDacInterpFieldNumber;
const int PentekConfig::kCoreInterpFieldNumber;
const int PentekConfig::kBaseChanFieldNumber;
const int PentekConfig::kNumBuffersFieldNumber;
const int PentekConfig::kFreqShiftFieldNumber;
const int PentekConfig::kSiggenIPFieldNumber;
const int PentekConfig::kSiggenTypeFieldNumber;
#endif  // !_MSC_VER

PentekConfig::PentekConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PentekConfig::InitAsDefaultInstance() {
}

PentekConfig::PentekConfig(const PentekConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PentekConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  clkfreq_ = 4e+08f;
  dacinterp_ = 16;
  coreinterp_ = 1;
  basechan_ = 1;
  numbuffers_ = 2;
  freqshift_ = 0;
  siggenip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  siggentype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PentekConfig::~PentekConfig() {
  SharedDtor();
}

void PentekConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (siggenip_ != &::google::protobuf::internal::kEmptyString) {
    delete siggenip_;
  }
  if (this != default_instance_) {
  }
}

void PentekConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PentekConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PentekConfig_descriptor_;
}

const PentekConfig& PentekConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

PentekConfig* PentekConfig::default_instance_ = NULL;

PentekConfig* PentekConfig::New() const {
  return new PentekConfig;
}

void PentekConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    clkfreq_ = 4e+08f;
    dacinterp_ = 16;
    coreinterp_ = 1;
    basechan_ = 1;
    numbuffers_ = 2;
    freqshift_ = 0;
    if (has_siggenip()) {
      if (siggenip_ != &::google::protobuf::internal::kEmptyString) {
        siggenip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    siggentype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PentekConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "PENTEK_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_clkFreq;
        break;
      }

      // optional float clkFreq = 2 [default = 4e+08];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_clkFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clkfreq_)));
          set_has_clkfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dacInterp;
        break;
      }

      // optional int32 dacInterp = 3 [default = 16];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dacInterp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dacinterp_)));
          set_has_dacinterp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_coreInterp;
        break;
      }

      // optional int32 coreInterp = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coreInterp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coreinterp_)));
          set_has_coreinterp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_baseChan;
        break;
      }

      // optional int32 baseChan = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseChan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basechan_)));
          set_has_basechan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_numBuffers;
        break;
      }

      // optional int32 numBuffers = 6 [default = 2];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numBuffers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numbuffers_)));
          set_has_numbuffers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_freqShift;
        break;
      }

      // optional float freqShift = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freqShift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freqshift_)));
          set_has_freqshift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_siggenIP;
        break;
      }

      // optional string siggenIP = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_siggenIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_siggenip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->siggenip().data(), this->siggenip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_siggenType;
        break;
      }

      // optional .falcon_res_msg.PentekConfig.SiggenType siggenType = 9 [default = ROHDE_SCHWARZ];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_siggenType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_res_msg::PentekConfig_SiggenType_IsValid(value)) {
            set_siggentype(static_cast< ::falcon_res_msg::PentekConfig_SiggenType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PentekConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "PENTEK_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional float clkFreq = 2 [default = 4e+08];
  if (has_clkfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->clkfreq(), output);
  }

  // optional int32 dacInterp = 3 [default = 16];
  if (has_dacinterp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dacinterp(), output);
  }

  // optional int32 coreInterp = 4 [default = 1];
  if (has_coreinterp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->coreinterp(), output);
  }

  // optional int32 baseChan = 5 [default = 1];
  if (has_basechan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->basechan(), output);
  }

  // optional int32 numBuffers = 6 [default = 2];
  if (has_numbuffers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->numbuffers(), output);
  }

  // optional float freqShift = 7 [default = 0];
  if (has_freqshift()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->freqshift(), output);
  }

  // optional string siggenIP = 8;
  if (has_siggenip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siggenip().data(), this->siggenip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->siggenip(), output);
  }

  // optional .falcon_res_msg.PentekConfig.SiggenType siggenType = 9 [default = ROHDE_SCHWARZ];
  if (has_siggentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->siggentype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PentekConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "PENTEK_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional float clkFreq = 2 [default = 4e+08];
  if (has_clkfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->clkfreq(), target);
  }

  // optional int32 dacInterp = 3 [default = 16];
  if (has_dacinterp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dacinterp(), target);
  }

  // optional int32 coreInterp = 4 [default = 1];
  if (has_coreinterp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->coreinterp(), target);
  }

  // optional int32 baseChan = 5 [default = 1];
  if (has_basechan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->basechan(), target);
  }

  // optional int32 numBuffers = 6 [default = 2];
  if (has_numbuffers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->numbuffers(), target);
  }

  // optional float freqShift = 7 [default = 0];
  if (has_freqshift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->freqshift(), target);
  }

  // optional string siggenIP = 8;
  if (has_siggenip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siggenip().data(), this->siggenip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->siggenip(), target);
  }

  // optional .falcon_res_msg.PentekConfig.SiggenType siggenType = 9 [default = ROHDE_SCHWARZ];
  if (has_siggentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->siggentype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PentekConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "PENTEK_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional float clkFreq = 2 [default = 4e+08];
    if (has_clkfreq()) {
      total_size += 1 + 4;
    }

    // optional int32 dacInterp = 3 [default = 16];
    if (has_dacinterp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dacinterp());
    }

    // optional int32 coreInterp = 4 [default = 1];
    if (has_coreinterp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coreinterp());
    }

    // optional int32 baseChan = 5 [default = 1];
    if (has_basechan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basechan());
    }

    // optional int32 numBuffers = 6 [default = 2];
    if (has_numbuffers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numbuffers());
    }

    // optional float freqShift = 7 [default = 0];
    if (has_freqshift()) {
      total_size += 1 + 4;
    }

    // optional string siggenIP = 8;
    if (has_siggenip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->siggenip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .falcon_res_msg.PentekConfig.SiggenType siggenType = 9 [default = ROHDE_SCHWARZ];
    if (has_siggentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->siggentype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PentekConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PentekConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PentekConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PentekConfig::MergeFrom(const PentekConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_clkfreq()) {
      set_clkfreq(from.clkfreq());
    }
    if (from.has_dacinterp()) {
      set_dacinterp(from.dacinterp());
    }
    if (from.has_coreinterp()) {
      set_coreinterp(from.coreinterp());
    }
    if (from.has_basechan()) {
      set_basechan(from.basechan());
    }
    if (from.has_numbuffers()) {
      set_numbuffers(from.numbuffers());
    }
    if (from.has_freqshift()) {
      set_freqshift(from.freqshift());
    }
    if (from.has_siggenip()) {
      set_siggenip(from.siggenip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_siggentype()) {
      set_siggentype(from.siggentype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PentekConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PentekConfig::CopyFrom(const PentekConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PentekConfig::IsInitialized() const {

  return true;
}

void PentekConfig::Swap(PentekConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(clkfreq_, other->clkfreq_);
    std::swap(dacinterp_, other->dacinterp_);
    std::swap(coreinterp_, other->coreinterp_);
    std::swap(basechan_, other->basechan_);
    std::swap(numbuffers_, other->numbuffers_);
    std::swap(freqshift_, other->freqshift_);
    std::swap(siggenip_, other->siggenip_);
    std::swap(siggentype_, other->siggentype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PentekConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PentekConfig_descriptor_;
  metadata.reflection = PentekConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* USRPTxConfig::_default_msgname_ = NULL;
::std::string* USRPTxConfig::_default_args_ = NULL;
#ifndef _MSC_VER
const int USRPTxConfig::kMsgNameFieldNumber;
const int USRPTxConfig::kArgsFieldNumber;
const int USRPTxConfig::kUsrpchanFieldNumber;
const int USRPTxConfig::kMinRFFieldNumber;
const int USRPTxConfig::kMaxRFFieldNumber;
#endif  // !_MSC_VER

USRPTxConfig::USRPTxConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void USRPTxConfig::InitAsDefaultInstance() {
}

USRPTxConfig::USRPTxConfig(const USRPTxConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void USRPTxConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  args_ = const_cast< ::std::string*>(_default_args_);
  usrpchan_ = 0;
  minrf_ = 0;
  maxrf_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

USRPTxConfig::~USRPTxConfig() {
  SharedDtor();
}

void USRPTxConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (args_ != _default_args_) {
    delete args_;
  }
  if (this != default_instance_) {
  }
}

void USRPTxConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* USRPTxConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return USRPTxConfig_descriptor_;
}

const USRPTxConfig& USRPTxConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

USRPTxConfig* USRPTxConfig::default_instance_ = NULL;

USRPTxConfig* USRPTxConfig::New() const {
  return new USRPTxConfig;
}

void USRPTxConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_args()) {
      if (args_ != _default_args_) {
        args_->assign(*_default_args_);
      }
    }
    usrpchan_ = 0;
    minrf_ = 0;
    maxrf_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool USRPTxConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "USRP_TX_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // optional string args = 2 [default = "addr=192.168.10.2"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usrpchan;
        break;
      }

      // optional int32 usrpchan = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usrpchan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usrpchan_)));
          set_has_usrpchan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_minRF;
        break;
      }

      // optional float minRF = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minrf_)));
          set_has_minrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_maxRF;
        break;
      }

      // optional float maxRF = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxrf_)));
          set_has_maxrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void USRPTxConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "USRP_TX_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string args = 2 [default = "addr=192.168.10.2"];
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->args(), output);
  }

  // optional int32 usrpchan = 3;
  if (has_usrpchan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usrpchan(), output);
  }

  // optional float minRF = 4;
  if (has_minrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->minrf(), output);
  }

  // optional float maxRF = 5;
  if (has_maxrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->maxrf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* USRPTxConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "USRP_TX_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string args = 2 [default = "addr=192.168.10.2"];
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->args(), target);
  }

  // optional int32 usrpchan = 3;
  if (has_usrpchan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usrpchan(), target);
  }

  // optional float minRF = 4;
  if (has_minrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->minrf(), target);
  }

  // optional float maxRF = 5;
  if (has_maxrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->maxrf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int USRPTxConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "USRP_TX_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string args = 2 [default = "addr=192.168.10.2"];
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->args());
    }

    // optional int32 usrpchan = 3;
    if (has_usrpchan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usrpchan());
    }

    // optional float minRF = 4;
    if (has_minrf()) {
      total_size += 1 + 4;
    }

    // optional float maxRF = 5;
    if (has_maxrf()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void USRPTxConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const USRPTxConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const USRPTxConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void USRPTxConfig::MergeFrom(const USRPTxConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_args()) {
      set_args(from.args());
    }
    if (from.has_usrpchan()) {
      set_usrpchan(from.usrpchan());
    }
    if (from.has_minrf()) {
      set_minrf(from.minrf());
    }
    if (from.has_maxrf()) {
      set_maxrf(from.maxrf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void USRPTxConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USRPTxConfig::CopyFrom(const USRPTxConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USRPTxConfig::IsInitialized() const {

  return true;
}

void USRPTxConfig::Swap(USRPTxConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(args_, other->args_);
    std::swap(usrpchan_, other->usrpchan_);
    std::swap(minrf_, other->minrf_);
    std::swap(maxrf_, other->maxrf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata USRPTxConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = USRPTxConfig_descriptor_;
  metadata.reflection = USRPTxConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RFSwitchConfig::_default_msgname_ = NULL;
::std::string* RFSwitchConfig::_default_ip_ = NULL;
#ifndef _MSC_VER
const int RFSwitchConfig::kMsgNameFieldNumber;
const int RFSwitchConfig::kIPFieldNumber;
const int RFSwitchConfig::kSlaveTimeoutFieldNumber;
const int RFSwitchConfig::kEnergyScanSecFieldNumber;
const int RFSwitchConfig::kEnergyTrackTimeFieldNumber;
const int RFSwitchConfig::kPortFieldNumber;
const int RFSwitchConfig::kSetOnLaunchFieldNumber;
#endif  // !_MSC_VER

RFSwitchConfig::RFSwitchConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RFSwitchConfig::InitAsDefaultInstance() {
}

RFSwitchConfig::RFSwitchConfig(const RFSwitchConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RFSwitchConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ip_ = const_cast< ::std::string*>(_default_ip_);
  slavetimeout_ = 180;
  energyscansec_ = 10;
  energytracktime_ = 300;
  port_ = 4003;
  setonlaunch_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RFSwitchConfig::~RFSwitchConfig() {
  SharedDtor();
}

void RFSwitchConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (ip_ != _default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void RFSwitchConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RFSwitchConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RFSwitchConfig_descriptor_;
}

const RFSwitchConfig& RFSwitchConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

RFSwitchConfig* RFSwitchConfig::default_instance_ = NULL;

RFSwitchConfig* RFSwitchConfig::New() const {
  return new RFSwitchConfig;
}

void RFSwitchConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_ip()) {
      if (ip_ != _default_ip_) {
        ip_->assign(*_default_ip_);
      }
    }
    slavetimeout_ = 180;
    energyscansec_ = 10;
    energytracktime_ = 300;
    port_ = 4003;
    setonlaunch_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RFSwitchConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RFSWITCH_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IP;
        break;
      }

      // optional string IP = 2 [default = "nportserver"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slaveTimeout;
        break;
      }

      // optional int32 slaveTimeout = 3 [default = 180];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slaveTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slavetimeout_)));
          set_has_slavetimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_energyScanSec;
        break;
      }

      // optional float energyScanSec = 4 [default = 10];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyScanSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energyscansec_)));
          set_has_energyscansec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_energyTrackTime;
        break;
      }

      // optional float energyTrackTime = 5 [default = 300];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyTrackTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energytracktime_)));
          set_has_energytracktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_port;
        break;
      }

      // optional int32 port = 6 [default = 4003];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_setOnLaunch;
        break;
      }

      // optional bool setOnLaunch = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_setOnLaunch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setonlaunch_)));
          set_has_setonlaunch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RFSwitchConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RFSWITCH_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string IP = 2 [default = "nportserver"];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 slaveTimeout = 3 [default = 180];
  if (has_slavetimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slavetimeout(), output);
  }

  // optional float energyScanSec = 4 [default = 10];
  if (has_energyscansec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->energyscansec(), output);
  }

  // optional float energyTrackTime = 5 [default = 300];
  if (has_energytracktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->energytracktime(), output);
  }

  // optional int32 port = 6 [default = 4003];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->port(), output);
  }

  // optional bool setOnLaunch = 7 [default = false];
  if (has_setonlaunch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->setonlaunch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RFSwitchConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RFSWITCH_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string IP = 2 [default = "nportserver"];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 slaveTimeout = 3 [default = 180];
  if (has_slavetimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slavetimeout(), target);
  }

  // optional float energyScanSec = 4 [default = 10];
  if (has_energyscansec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->energyscansec(), target);
  }

  // optional float energyTrackTime = 5 [default = 300];
  if (has_energytracktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->energytracktime(), target);
  }

  // optional int32 port = 6 [default = 4003];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->port(), target);
  }

  // optional bool setOnLaunch = 7 [default = false];
  if (has_setonlaunch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->setonlaunch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RFSwitchConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RFSWITCH_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string IP = 2 [default = "nportserver"];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 slaveTimeout = 3 [default = 180];
    if (has_slavetimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slavetimeout());
    }

    // optional float energyScanSec = 4 [default = 10];
    if (has_energyscansec()) {
      total_size += 1 + 4;
    }

    // optional float energyTrackTime = 5 [default = 300];
    if (has_energytracktime()) {
      total_size += 1 + 4;
    }

    // optional int32 port = 6 [default = 4003];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional bool setOnLaunch = 7 [default = false];
    if (has_setonlaunch()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RFSwitchConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RFSwitchConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RFSwitchConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RFSwitchConfig::MergeFrom(const RFSwitchConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_slavetimeout()) {
      set_slavetimeout(from.slavetimeout());
    }
    if (from.has_energyscansec()) {
      set_energyscansec(from.energyscansec());
    }
    if (from.has_energytracktime()) {
      set_energytracktime(from.energytracktime());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_setonlaunch()) {
      set_setonlaunch(from.setonlaunch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RFSwitchConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RFSwitchConfig::CopyFrom(const RFSwitchConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RFSwitchConfig::IsInitialized() const {

  return true;
}

void RFSwitchConfig::Swap(RFSwitchConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(ip_, other->ip_);
    std::swap(slavetimeout_, other->slavetimeout_);
    std::swap(energyscansec_, other->energyscansec_);
    std::swap(energytracktime_, other->energytracktime_);
    std::swap(port_, other->port_);
    std::swap(setonlaunch_, other->setonlaunch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RFSwitchConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RFSwitchConfig_descriptor_;
  metadata.reflection = RFSwitchConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RFSwitchSerialConfig::_default_msgname_ = NULL;
::std::string* RFSwitchSerialConfig::_default_device_ = NULL;
#ifndef _MSC_VER
const int RFSwitchSerialConfig::kMsgNameFieldNumber;
const int RFSwitchSerialConfig::kDeviceFieldNumber;
const int RFSwitchSerialConfig::kBaudFieldNumber;
const int RFSwitchSerialConfig::kSlaveTimeoutFieldNumber;
const int RFSwitchSerialConfig::kEnergyScanSecFieldNumber;
const int RFSwitchSerialConfig::kEnergyTrackTimeFieldNumber;
#endif  // !_MSC_VER

RFSwitchSerialConfig::RFSwitchSerialConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RFSwitchSerialConfig::InitAsDefaultInstance() {
}

RFSwitchSerialConfig::RFSwitchSerialConfig(const RFSwitchSerialConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RFSwitchSerialConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  device_ = const_cast< ::std::string*>(_default_device_);
  baud_ = 9600;
  slavetimeout_ = 180;
  energyscansec_ = 10;
  energytracktime_ = 300;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RFSwitchSerialConfig::~RFSwitchSerialConfig() {
  SharedDtor();
}

void RFSwitchSerialConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (device_ != _default_device_) {
    delete device_;
  }
  if (this != default_instance_) {
  }
}

void RFSwitchSerialConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RFSwitchSerialConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RFSwitchSerialConfig_descriptor_;
}

const RFSwitchSerialConfig& RFSwitchSerialConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

RFSwitchSerialConfig* RFSwitchSerialConfig::default_instance_ = NULL;

RFSwitchSerialConfig* RFSwitchSerialConfig::New() const {
  return new RFSwitchSerialConfig;
}

void RFSwitchSerialConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_device()) {
      if (device_ != _default_device_) {
        device_->assign(*_default_device_);
      }
    }
    baud_ = 9600;
    slavetimeout_ = 180;
    energyscansec_ = 10;
    energytracktime_ = 300;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RFSwitchSerialConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RFSWITCH_SERIAL_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device;
        break;
      }

      // optional string device = 2 [default = "/dev/ttyS0"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_baud;
        break;
      }

      // optional int32 baud = 3 [default = 9600];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baud_)));
          set_has_baud();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slaveTimeout;
        break;
      }

      // optional int32 slaveTimeout = 4 [default = 180];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slaveTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slavetimeout_)));
          set_has_slavetimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_energyScanSec;
        break;
      }

      // optional float energyScanSec = 5 [default = 10];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyScanSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energyscansec_)));
          set_has_energyscansec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_energyTrackTime;
        break;
      }

      // optional float energyTrackTime = 6 [default = 300];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyTrackTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energytracktime_)));
          set_has_energytracktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RFSwitchSerialConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RFSWITCH_SERIAL_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string device = 2 [default = "/dev/ttyS0"];
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device(), output);
  }

  // optional int32 baud = 3 [default = 9600];
  if (has_baud()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baud(), output);
  }

  // optional int32 slaveTimeout = 4 [default = 180];
  if (has_slavetimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->slavetimeout(), output);
  }

  // optional float energyScanSec = 5 [default = 10];
  if (has_energyscansec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->energyscansec(), output);
  }

  // optional float energyTrackTime = 6 [default = 300];
  if (has_energytracktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->energytracktime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RFSwitchSerialConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RFSWITCH_SERIAL_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string device = 2 [default = "/dev/ttyS0"];
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device(), target);
  }

  // optional int32 baud = 3 [default = 9600];
  if (has_baud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->baud(), target);
  }

  // optional int32 slaveTimeout = 4 [default = 180];
  if (has_slavetimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->slavetimeout(), target);
  }

  // optional float energyScanSec = 5 [default = 10];
  if (has_energyscansec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->energyscansec(), target);
  }

  // optional float energyTrackTime = 6 [default = 300];
  if (has_energytracktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->energytracktime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RFSwitchSerialConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RFSWITCH_SERIAL_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string device = 2 [default = "/dev/ttyS0"];
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional int32 baud = 3 [default = 9600];
    if (has_baud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baud());
    }

    // optional int32 slaveTimeout = 4 [default = 180];
    if (has_slavetimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slavetimeout());
    }

    // optional float energyScanSec = 5 [default = 10];
    if (has_energyscansec()) {
      total_size += 1 + 4;
    }

    // optional float energyTrackTime = 6 [default = 300];
    if (has_energytracktime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RFSwitchSerialConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RFSwitchSerialConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RFSwitchSerialConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RFSwitchSerialConfig::MergeFrom(const RFSwitchSerialConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_baud()) {
      set_baud(from.baud());
    }
    if (from.has_slavetimeout()) {
      set_slavetimeout(from.slavetimeout());
    }
    if (from.has_energyscansec()) {
      set_energyscansec(from.energyscansec());
    }
    if (from.has_energytracktime()) {
      set_energytracktime(from.energytracktime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RFSwitchSerialConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RFSwitchSerialConfig::CopyFrom(const RFSwitchSerialConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RFSwitchSerialConfig::IsInitialized() const {

  return true;
}

void RFSwitchSerialConfig::Swap(RFSwitchSerialConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(device_, other->device_);
    std::swap(baud_, other->baud_);
    std::swap(slavetimeout_, other->slavetimeout_);
    std::swap(energyscansec_, other->energyscansec_);
    std::swap(energytracktime_, other->energytracktime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RFSwitchSerialConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RFSwitchSerialConfig_descriptor_;
  metadata.reflection = RFSwitchSerialConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* CPSwitchConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int CPSwitchConfig::kMsgNameFieldNumber;
const int CPSwitchConfig::kIPFieldNumber;
const int CPSwitchConfig::kPortFieldNumber;
const int CPSwitchConfig::kSlaveTimeoutFieldNumber;
const int CPSwitchConfig::kEnergyScanSecFieldNumber;
const int CPSwitchConfig::kEnergyTrackTimeFieldNumber;
#endif  // !_MSC_VER

CPSwitchConfig::CPSwitchConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CPSwitchConfig::InitAsDefaultInstance() {
}

CPSwitchConfig::CPSwitchConfig(const CPSwitchConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CPSwitchConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 23;
  slavetimeout_ = 180;
  energyscansec_ = 10;
  energytracktime_ = 300;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPSwitchConfig::~CPSwitchConfig() {
  SharedDtor();
}

void CPSwitchConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void CPSwitchConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPSwitchConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPSwitchConfig_descriptor_;
}

const CPSwitchConfig& CPSwitchConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

CPSwitchConfig* CPSwitchConfig::default_instance_ = NULL;

CPSwitchConfig* CPSwitchConfig::New() const {
  return new CPSwitchConfig;
}

void CPSwitchConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 23;
    slavetimeout_ = 180;
    energyscansec_ = 10;
    energytracktime_ = 300;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPSwitchConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "CPSWITCH_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IP;
        break;
      }

      // optional string IP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3 [default = 23];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slaveTimeout;
        break;
      }

      // optional int32 slaveTimeout = 4 [default = 180];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slaveTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slavetimeout_)));
          set_has_slavetimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_energyScanSec;
        break;
      }

      // optional float energyScanSec = 5 [default = 10];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyScanSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energyscansec_)));
          set_has_energyscansec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_energyTrackTime;
        break;
      }

      // optional float energyTrackTime = 6 [default = 300];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyTrackTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energytracktime_)));
          set_has_energytracktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CPSwitchConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "CPSWITCH_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3 [default = 23];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional int32 slaveTimeout = 4 [default = 180];
  if (has_slavetimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->slavetimeout(), output);
  }

  // optional float energyScanSec = 5 [default = 10];
  if (has_energyscansec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->energyscansec(), output);
  }

  // optional float energyTrackTime = 6 [default = 300];
  if (has_energytracktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->energytracktime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CPSwitchConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "CPSWITCH_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3 [default = 23];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional int32 slaveTimeout = 4 [default = 180];
  if (has_slavetimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->slavetimeout(), target);
  }

  // optional float energyScanSec = 5 [default = 10];
  if (has_energyscansec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->energyscansec(), target);
  }

  // optional float energyTrackTime = 6 [default = 300];
  if (has_energytracktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->energytracktime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CPSwitchConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "CPSWITCH_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string IP = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3 [default = 23];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 slaveTimeout = 4 [default = 180];
    if (has_slavetimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slavetimeout());
    }

    // optional float energyScanSec = 5 [default = 10];
    if (has_energyscansec()) {
      total_size += 1 + 4;
    }

    // optional float energyTrackTime = 6 [default = 300];
    if (has_energytracktime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPSwitchConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPSwitchConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPSwitchConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPSwitchConfig::MergeFrom(const CPSwitchConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_slavetimeout()) {
      set_slavetimeout(from.slavetimeout());
    }
    if (from.has_energyscansec()) {
      set_energyscansec(from.energyscansec());
    }
    if (from.has_energytracktime()) {
      set_energytracktime(from.energytracktime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPSwitchConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPSwitchConfig::CopyFrom(const CPSwitchConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPSwitchConfig::IsInitialized() const {

  return true;
}

void CPSwitchConfig::Swap(CPSwitchConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(slavetimeout_, other->slavetimeout_);
    std::swap(energyscansec_, other->energyscansec_);
    std::swap(energytracktime_, other->energytracktime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPSwitchConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPSwitchConfig_descriptor_;
  metadata.reflection = CPSwitchConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* AntennaConfig::_default_msgname_ = NULL;
::std::string* AntennaConfig::_default_noisetest_ = NULL;
#ifndef _MSC_VER
const int AntennaConfig::kMsgNameFieldNumber;
const int AntennaConfig::kMinRFFieldNumber;
const int AntennaConfig::kMaxRFFieldNumber;
const int AntennaConfig::kFixedAngleFieldNumber;
const int AntennaConfig::kLatitudeFieldNumber;
const int AntennaConfig::kLongitudeFieldNumber;
const int AntennaConfig::kAltitudeFieldNumber;
const int AntennaConfig::kBeamwidthFieldNumber;
const int AntennaConfig::kDwncnvtLOFieldNumber;
const int AntennaConfig::kSscFieldNumber;
const int AntennaConfig::kBandFieldNumber;
const int AntennaConfig::kPolarizationFieldNumber;
const int AntennaConfig::kGroupFieldNumber;
const int AntennaConfig::kSightDistanceFieldNumber;
const int AntennaConfig::kNoiseTestFieldNumber;
#endif  // !_MSC_VER

AntennaConfig::AntennaConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AntennaConfig::InitAsDefaultInstance() {
}

AntennaConfig::AntennaConfig(const AntennaConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AntennaConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  minrf_ = 0;
  maxrf_ = 0;
  fixedangle_ = -999;
  latitude_ = 0;
  longitude_ = 0;
  altitude_ = 0;
  beamwidth_ = 0;
  dwncnvtlo_ = 0;
  ssc_ = -1;
  band_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  polarization_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_ = 0;
  sightdistance_ = 500;
  noisetest_ = const_cast< ::std::string*>(_default_noisetest_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AntennaConfig::~AntennaConfig() {
  SharedDtor();
}

void AntennaConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (band_ != &::google::protobuf::internal::kEmptyString) {
    delete band_;
  }
  if (polarization_ != &::google::protobuf::internal::kEmptyString) {
    delete polarization_;
  }
  if (noisetest_ != _default_noisetest_) {
    delete noisetest_;
  }
  if (this != default_instance_) {
  }
}

void AntennaConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AntennaConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AntennaConfig_descriptor_;
}

const AntennaConfig& AntennaConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

AntennaConfig* AntennaConfig::default_instance_ = NULL;

AntennaConfig* AntennaConfig::New() const {
  return new AntennaConfig;
}

void AntennaConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    minrf_ = 0;
    maxrf_ = 0;
    fixedangle_ = -999;
    latitude_ = 0;
    longitude_ = 0;
    altitude_ = 0;
    beamwidth_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dwncnvtlo_ = 0;
    ssc_ = -1;
    if (has_band()) {
      if (band_ != &::google::protobuf::internal::kEmptyString) {
        band_->clear();
      }
    }
    if (has_polarization()) {
      if (polarization_ != &::google::protobuf::internal::kEmptyString) {
        polarization_->clear();
      }
    }
    group_ = 0;
    sightdistance_ = 500;
    if (has_noisetest()) {
      if (noisetest_ != _default_noisetest_) {
        noisetest_->assign(*_default_noisetest_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AntennaConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ANTENNA_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_minRF;
        break;
      }

      // optional float minRF = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minrf_)));
          set_has_minrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_maxRF;
        break;
      }

      // optional float maxRF = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxrf_)));
          set_has_maxrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_fixedAngle;
        break;
      }

      // optional float fixedAngle = 4 [default = -999];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fixedAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fixedangle_)));
          set_has_fixedangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_latitude;
        break;
      }

      // optional float latitude = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_longitude;
        break;
      }

      // optional float longitude = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_altitude;
        break;
      }

      // optional float altitude = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_beamwidth;
        break;
      }

      // optional float beamwidth = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_beamwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beamwidth_)));
          set_has_beamwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_dwncnvtLO;
        break;
      }

      // optional float dwncnvtLO = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dwncnvtLO:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dwncnvtlo_)));
          set_has_dwncnvtlo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ssc;
        break;
      }

      // optional int32 ssc = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ssc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssc_)));
          set_has_ssc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_band;
        break;
      }

      // optional string band = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_band:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_band()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->band().data(), this->band().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_polarization;
        break;
      }

      // optional string polarization = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polarization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_polarization()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->polarization().data(), this->polarization().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_group;
        break;
      }

      // optional int32 group = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_sightDistance;
        break;
      }

      // optional float sightDistance = 14 [default = 500];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sightDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sightdistance_)));
          set_has_sightdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_noiseTest;
        break;
      }

      // optional string noiseTest = 15 [default = "NO_TEST"];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_noiseTest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_noisetest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->noisetest().data(), this->noisetest().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AntennaConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ANTENNA_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional float minRF = 2;
  if (has_minrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->minrf(), output);
  }

  // optional float maxRF = 3;
  if (has_maxrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->maxrf(), output);
  }

  // optional float fixedAngle = 4 [default = -999];
  if (has_fixedangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fixedangle(), output);
  }

  // optional float latitude = 5 [default = 0];
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->latitude(), output);
  }

  // optional float longitude = 6 [default = 0];
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->longitude(), output);
  }

  // optional float altitude = 7 [default = 0];
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->altitude(), output);
  }

  // optional float beamwidth = 8 [default = 0];
  if (has_beamwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->beamwidth(), output);
  }

  // optional float dwncnvtLO = 9 [default = 0];
  if (has_dwncnvtlo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->dwncnvtlo(), output);
  }

  // optional int32 ssc = 10 [default = -1];
  if (has_ssc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ssc(), output);
  }

  // optional string band = 11;
  if (has_band()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->band().data(), this->band().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->band(), output);
  }

  // optional string polarization = 12;
  if (has_polarization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->polarization().data(), this->polarization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->polarization(), output);
  }

  // optional int32 group = 13;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->group(), output);
  }

  // optional float sightDistance = 14 [default = 500];
  if (has_sightdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->sightdistance(), output);
  }

  // optional string noiseTest = 15 [default = "NO_TEST"];
  if (has_noisetest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->noisetest().data(), this->noisetest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->noisetest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AntennaConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ANTENNA_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional float minRF = 2;
  if (has_minrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->minrf(), target);
  }

  // optional float maxRF = 3;
  if (has_maxrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->maxrf(), target);
  }

  // optional float fixedAngle = 4 [default = -999];
  if (has_fixedangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fixedangle(), target);
  }

  // optional float latitude = 5 [default = 0];
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->latitude(), target);
  }

  // optional float longitude = 6 [default = 0];
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->longitude(), target);
  }

  // optional float altitude = 7 [default = 0];
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->altitude(), target);
  }

  // optional float beamwidth = 8 [default = 0];
  if (has_beamwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->beamwidth(), target);
  }

  // optional float dwncnvtLO = 9 [default = 0];
  if (has_dwncnvtlo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->dwncnvtlo(), target);
  }

  // optional int32 ssc = 10 [default = -1];
  if (has_ssc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ssc(), target);
  }

  // optional string band = 11;
  if (has_band()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->band().data(), this->band().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->band(), target);
  }

  // optional string polarization = 12;
  if (has_polarization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->polarization().data(), this->polarization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->polarization(), target);
  }

  // optional int32 group = 13;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->group(), target);
  }

  // optional float sightDistance = 14 [default = 500];
  if (has_sightdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->sightdistance(), target);
  }

  // optional string noiseTest = 15 [default = "NO_TEST"];
  if (has_noisetest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->noisetest().data(), this->noisetest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->noisetest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AntennaConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ANTENNA_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional float minRF = 2;
    if (has_minrf()) {
      total_size += 1 + 4;
    }

    // optional float maxRF = 3;
    if (has_maxrf()) {
      total_size += 1 + 4;
    }

    // optional float fixedAngle = 4 [default = -999];
    if (has_fixedangle()) {
      total_size += 1 + 4;
    }

    // optional float latitude = 5 [default = 0];
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 6 [default = 0];
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional float altitude = 7 [default = 0];
    if (has_altitude()) {
      total_size += 1 + 4;
    }

    // optional float beamwidth = 8 [default = 0];
    if (has_beamwidth()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float dwncnvtLO = 9 [default = 0];
    if (has_dwncnvtlo()) {
      total_size += 1 + 4;
    }

    // optional int32 ssc = 10 [default = -1];
    if (has_ssc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssc());
    }

    // optional string band = 11;
    if (has_band()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->band());
    }

    // optional string polarization = 12;
    if (has_polarization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->polarization());
    }

    // optional int32 group = 13;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional float sightDistance = 14 [default = 500];
    if (has_sightdistance()) {
      total_size += 1 + 4;
    }

    // optional string noiseTest = 15 [default = "NO_TEST"];
    if (has_noisetest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->noisetest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AntennaConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AntennaConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AntennaConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AntennaConfig::MergeFrom(const AntennaConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_minrf()) {
      set_minrf(from.minrf());
    }
    if (from.has_maxrf()) {
      set_maxrf(from.maxrf());
    }
    if (from.has_fixedangle()) {
      set_fixedangle(from.fixedangle());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_beamwidth()) {
      set_beamwidth(from.beamwidth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dwncnvtlo()) {
      set_dwncnvtlo(from.dwncnvtlo());
    }
    if (from.has_ssc()) {
      set_ssc(from.ssc());
    }
    if (from.has_band()) {
      set_band(from.band());
    }
    if (from.has_polarization()) {
      set_polarization(from.polarization());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_sightdistance()) {
      set_sightdistance(from.sightdistance());
    }
    if (from.has_noisetest()) {
      set_noisetest(from.noisetest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AntennaConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AntennaConfig::CopyFrom(const AntennaConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaConfig::IsInitialized() const {

  return true;
}

void AntennaConfig::Swap(AntennaConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(minrf_, other->minrf_);
    std::swap(maxrf_, other->maxrf_);
    std::swap(fixedangle_, other->fixedangle_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(altitude_, other->altitude_);
    std::swap(beamwidth_, other->beamwidth_);
    std::swap(dwncnvtlo_, other->dwncnvtlo_);
    std::swap(ssc_, other->ssc_);
    std::swap(band_, other->band_);
    std::swap(polarization_, other->polarization_);
    std::swap(group_, other->group_);
    std::swap(sightdistance_, other->sightdistance_);
    std::swap(noisetest_, other->noisetest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AntennaConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AntennaConfig_descriptor_;
  metadata.reflection = AntennaConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RotorRPMConfig::_default_msgname_ = NULL;
::std::string* RotorRPMConfig::_default_scanscrypt_ = NULL;
::std::string* RotorRPMConfig::_default_gpsserver_ = NULL;
::std::string* RotorRPMConfig::_default_gpsupdate_ = NULL;
#ifndef _MSC_VER
const int RotorRPMConfig::kMsgNameFieldNumber;
const int RotorRPMConfig::kIPFieldNumber;
const int RotorRPMConfig::kPortFieldNumber;
const int RotorRPMConfig::kAzOffsetFieldNumber;
const int RotorRPMConfig::kElOffsetFieldNumber;
const int RotorRPMConfig::kHardLimitFieldNumber;
const int RotorRPMConfig::kMinScanAngleFieldNumber;
const int RotorRPMConfig::kMaxScanAngleFieldNumber;
const int RotorRPMConfig::kMinElevationFieldNumber;
const int RotorRPMConfig::kMaxElevationFieldNumber;
const int RotorRPMConfig::kScanElevationFieldNumber;
const int RotorRPMConfig::kMulticastRateFieldNumber;
const int RotorRPMConfig::kPointHoldIncrementFieldNumber;
const int RotorRPMConfig::kEnergyScanSpeedFieldNumber;
const int RotorRPMConfig::kStartDeviationFieldNumber;
const int RotorRPMConfig::kEnergyTrackTimeFieldNumber;
const int RotorRPMConfig::kScanScryptFieldNumber;
const int RotorRPMConfig::kGpsServerFieldNumber;
const int RotorRPMConfig::kGpsUpdateFieldNumber;
const int RotorRPMConfig::kElDisabledFieldNumber;
const int RotorRPMConfig::kInvertAzFieldNumber;
const int RotorRPMConfig::kMaxVelocityFieldNumber;
const int RotorRPMConfig::kDynamicVelFieldNumber;
const int RotorRPMConfig::kSlewEnabledFieldNumber;
const int RotorRPMConfig::kAzCloseEnoughFieldNumber;
#endif  // !_MSC_VER

RotorRPMConfig::RotorRPMConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RotorRPMConfig::InitAsDefaultInstance() {
}

RotorRPMConfig::RotorRPMConfig(const RotorRPMConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RotorRPMConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  azoffset_ = 0;
  eloffset_ = 0;
  hardlimit_ = false;
  minscanangle_ = 0;
  maxscanangle_ = 0;
  minelevation_ = 0;
  maxelevation_ = 0;
  scanelevation_ = 0;
  multicastrate_ = 0;
  pointholdincrement_ = 0;
  energyscanspeed_ = 4;
  startdeviation_ = 180;
  energytracktime_ = 30;
  scanscrypt_ = const_cast< ::std::string*>(_default_scanscrypt_);
  gpsserver_ = const_cast< ::std::string*>(_default_gpsserver_);
  gpsupdate_ = const_cast< ::std::string*>(_default_gpsupdate_);
  eldisabled_ = false;
  invertaz_ = false;
  maxvelocity_ = 10;
  dynamicvel_ = false;
  slewenabled_ = false;
  azcloseenough_ = 0.5f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotorRPMConfig::~RotorRPMConfig() {
  SharedDtor();
}

void RotorRPMConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (scanscrypt_ != _default_scanscrypt_) {
    delete scanscrypt_;
  }
  if (gpsserver_ != _default_gpsserver_) {
    delete gpsserver_;
  }
  if (gpsupdate_ != _default_gpsupdate_) {
    delete gpsupdate_;
  }
  if (this != default_instance_) {
  }
}

void RotorRPMConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotorRPMConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotorRPMConfig_descriptor_;
}

const RotorRPMConfig& RotorRPMConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

RotorRPMConfig* RotorRPMConfig::default_instance_ = NULL;

RotorRPMConfig* RotorRPMConfig::New() const {
  return new RotorRPMConfig;
}

void RotorRPMConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    azoffset_ = 0;
    eloffset_ = 0;
    hardlimit_ = false;
    minscanangle_ = 0;
    maxscanangle_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    minelevation_ = 0;
    maxelevation_ = 0;
    scanelevation_ = 0;
    multicastrate_ = 0;
    pointholdincrement_ = 0;
    energyscanspeed_ = 4;
    startdeviation_ = 180;
    energytracktime_ = 30;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_scanscrypt()) {
      if (scanscrypt_ != _default_scanscrypt_) {
        scanscrypt_->assign(*_default_scanscrypt_);
      }
    }
    if (has_gpsserver()) {
      if (gpsserver_ != _default_gpsserver_) {
        gpsserver_->assign(*_default_gpsserver_);
      }
    }
    if (has_gpsupdate()) {
      if (gpsupdate_ != _default_gpsupdate_) {
        gpsupdate_->assign(*_default_gpsupdate_);
      }
    }
    eldisabled_ = false;
    invertaz_ = false;
    maxvelocity_ = 10;
    dynamicvel_ = false;
    slewenabled_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    azcloseenough_ = 0.5f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotorRPMConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ROTOR_RPM_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IP;
        break;
      }

      // optional string IP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_AzOffset;
        break;
      }

      // optional float AzOffset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AzOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azoffset_)));
          set_has_azoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_ElOffset;
        break;
      }

      // optional float ElOffset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ElOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eloffset_)));
          set_has_eloffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hardLimit;
        break;
      }

      // optional bool hardLimit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hardLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hardlimit_)));
          set_has_hardlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_minScanAngle;
        break;
      }

      // optional float minScanAngle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minscanangle_)));
          set_has_minscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_maxScanAngle;
        break;
      }

      // optional float maxScanAngle = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxscanangle_)));
          set_has_maxscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_minElevation;
        break;
      }

      // optional float minElevation = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minElevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minelevation_)));
          set_has_minelevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_maxElevation;
        break;
      }

      // optional float maxElevation = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxElevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxelevation_)));
          set_has_maxelevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_scanElevation;
        break;
      }

      // optional float scanElevation = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scanElevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scanelevation_)));
          set_has_scanelevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_multicastRate;
        break;
      }

      // optional float multicastRate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_multicastRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &multicastrate_)));
          set_has_multicastrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_pointHoldIncrement;
        break;
      }

      // optional float pointHoldIncrement = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pointHoldIncrement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pointholdincrement_)));
          set_has_pointholdincrement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_energyScanSpeed;
        break;
      }

      // optional float energyScanSpeed = 14 [default = 4];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyScanSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energyscanspeed_)));
          set_has_energyscanspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_startDeviation;
        break;
      }

      // optional float startDeviation = 15 [default = 180];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startDeviation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startdeviation_)));
          set_has_startdeviation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_energyTrackTime;
        break;
      }

      // optional float energyTrackTime = 16 [default = 30];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyTrackTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energytracktime_)));
          set_has_energytracktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_scanScrypt;
        break;
      }

      // optional string scanScrypt = 17 [default = "NONE"];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scanScrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scanscrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scanscrypt().data(), this->scanscrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_gpsServer;
        break;
      }

      // optional string gpsServer = 18 [default = "OFF"];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpsServer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpsserver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpsserver().data(), this->gpsserver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_gpsUpdate;
        break;
      }

      // optional string gpsUpdate = 19 [default = "ON"];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpsUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpsupdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpsupdate().data(), this->gpsupdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_elDisabled;
        break;
      }

      // optional bool elDisabled = 20 [default = false];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elDisabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eldisabled_)));
          set_has_eldisabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_invertAz;
        break;
      }

      // optional bool invertAz = 21 [default = false];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invertAz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invertaz_)));
          set_has_invertaz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_maxVelocity;
        break;
      }

      // optional float maxVelocity = 22 [default = 10];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxVelocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxvelocity_)));
          set_has_maxvelocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_dynamicVel;
        break;
      }

      // optional bool dynamicVel = 23 [default = false];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynamicVel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dynamicvel_)));
          set_has_dynamicvel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_slewEnabled;
        break;
      }

      // optional bool slewEnabled = 24 [default = false];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slewEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &slewenabled_)));
          set_has_slewenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_azCloseEnough;
        break;
      }

      // optional float azCloseEnough = 25 [default = 0.5];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azCloseEnough:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azcloseenough_)));
          set_has_azcloseenough();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RotorRPMConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ROTOR_RPM_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional float AzOffset = 4;
  if (has_azoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->azoffset(), output);
  }

  // optional float ElOffset = 5;
  if (has_eloffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->eloffset(), output);
  }

  // optional bool hardLimit = 6;
  if (has_hardlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->hardlimit(), output);
  }

  // optional float minScanAngle = 7;
  if (has_minscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->minscanangle(), output);
  }

  // optional float maxScanAngle = 8;
  if (has_maxscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->maxscanangle(), output);
  }

  // optional float minElevation = 9;
  if (has_minelevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->minelevation(), output);
  }

  // optional float maxElevation = 10;
  if (has_maxelevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->maxelevation(), output);
  }

  // optional float scanElevation = 11;
  if (has_scanelevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->scanelevation(), output);
  }

  // optional float multicastRate = 12;
  if (has_multicastrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->multicastrate(), output);
  }

  // optional float pointHoldIncrement = 13;
  if (has_pointholdincrement()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->pointholdincrement(), output);
  }

  // optional float energyScanSpeed = 14 [default = 4];
  if (has_energyscanspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->energyscanspeed(), output);
  }

  // optional float startDeviation = 15 [default = 180];
  if (has_startdeviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->startdeviation(), output);
  }

  // optional float energyTrackTime = 16 [default = 30];
  if (has_energytracktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->energytracktime(), output);
  }

  // optional string scanScrypt = 17 [default = "NONE"];
  if (has_scanscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scanscrypt().data(), this->scanscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->scanscrypt(), output);
  }

  // optional string gpsServer = 18 [default = "OFF"];
  if (has_gpsserver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsserver().data(), this->gpsserver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->gpsserver(), output);
  }

  // optional string gpsUpdate = 19 [default = "ON"];
  if (has_gpsupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsupdate().data(), this->gpsupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->gpsupdate(), output);
  }

  // optional bool elDisabled = 20 [default = false];
  if (has_eldisabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->eldisabled(), output);
  }

  // optional bool invertAz = 21 [default = false];
  if (has_invertaz()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->invertaz(), output);
  }

  // optional float maxVelocity = 22 [default = 10];
  if (has_maxvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->maxvelocity(), output);
  }

  // optional bool dynamicVel = 23 [default = false];
  if (has_dynamicvel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->dynamicvel(), output);
  }

  // optional bool slewEnabled = 24 [default = false];
  if (has_slewenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->slewenabled(), output);
  }

  // optional float azCloseEnough = 25 [default = 0.5];
  if (has_azcloseenough()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->azcloseenough(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RotorRPMConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ROTOR_RPM_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional float AzOffset = 4;
  if (has_azoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->azoffset(), target);
  }

  // optional float ElOffset = 5;
  if (has_eloffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->eloffset(), target);
  }

  // optional bool hardLimit = 6;
  if (has_hardlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->hardlimit(), target);
  }

  // optional float minScanAngle = 7;
  if (has_minscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->minscanangle(), target);
  }

  // optional float maxScanAngle = 8;
  if (has_maxscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->maxscanangle(), target);
  }

  // optional float minElevation = 9;
  if (has_minelevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->minelevation(), target);
  }

  // optional float maxElevation = 10;
  if (has_maxelevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->maxelevation(), target);
  }

  // optional float scanElevation = 11;
  if (has_scanelevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->scanelevation(), target);
  }

  // optional float multicastRate = 12;
  if (has_multicastrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->multicastrate(), target);
  }

  // optional float pointHoldIncrement = 13;
  if (has_pointholdincrement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->pointholdincrement(), target);
  }

  // optional float energyScanSpeed = 14 [default = 4];
  if (has_energyscanspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->energyscanspeed(), target);
  }

  // optional float startDeviation = 15 [default = 180];
  if (has_startdeviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->startdeviation(), target);
  }

  // optional float energyTrackTime = 16 [default = 30];
  if (has_energytracktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->energytracktime(), target);
  }

  // optional string scanScrypt = 17 [default = "NONE"];
  if (has_scanscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scanscrypt().data(), this->scanscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->scanscrypt(), target);
  }

  // optional string gpsServer = 18 [default = "OFF"];
  if (has_gpsserver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsserver().data(), this->gpsserver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->gpsserver(), target);
  }

  // optional string gpsUpdate = 19 [default = "ON"];
  if (has_gpsupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsupdate().data(), this->gpsupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->gpsupdate(), target);
  }

  // optional bool elDisabled = 20 [default = false];
  if (has_eldisabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->eldisabled(), target);
  }

  // optional bool invertAz = 21 [default = false];
  if (has_invertaz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->invertaz(), target);
  }

  // optional float maxVelocity = 22 [default = 10];
  if (has_maxvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->maxvelocity(), target);
  }

  // optional bool dynamicVel = 23 [default = false];
  if (has_dynamicvel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->dynamicvel(), target);
  }

  // optional bool slewEnabled = 24 [default = false];
  if (has_slewenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->slewenabled(), target);
  }

  // optional float azCloseEnough = 25 [default = 0.5];
  if (has_azcloseenough()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->azcloseenough(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RotorRPMConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ROTOR_RPM_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string IP = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional float AzOffset = 4;
    if (has_azoffset()) {
      total_size += 1 + 4;
    }

    // optional float ElOffset = 5;
    if (has_eloffset()) {
      total_size += 1 + 4;
    }

    // optional bool hardLimit = 6;
    if (has_hardlimit()) {
      total_size += 1 + 1;
    }

    // optional float minScanAngle = 7;
    if (has_minscanangle()) {
      total_size += 1 + 4;
    }

    // optional float maxScanAngle = 8;
    if (has_maxscanangle()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float minElevation = 9;
    if (has_minelevation()) {
      total_size += 1 + 4;
    }

    // optional float maxElevation = 10;
    if (has_maxelevation()) {
      total_size += 1 + 4;
    }

    // optional float scanElevation = 11;
    if (has_scanelevation()) {
      total_size += 1 + 4;
    }

    // optional float multicastRate = 12;
    if (has_multicastrate()) {
      total_size += 1 + 4;
    }

    // optional float pointHoldIncrement = 13;
    if (has_pointholdincrement()) {
      total_size += 1 + 4;
    }

    // optional float energyScanSpeed = 14 [default = 4];
    if (has_energyscanspeed()) {
      total_size += 1 + 4;
    }

    // optional float startDeviation = 15 [default = 180];
    if (has_startdeviation()) {
      total_size += 1 + 4;
    }

    // optional float energyTrackTime = 16 [default = 30];
    if (has_energytracktime()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string scanScrypt = 17 [default = "NONE"];
    if (has_scanscrypt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scanscrypt());
    }

    // optional string gpsServer = 18 [default = "OFF"];
    if (has_gpsserver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpsserver());
    }

    // optional string gpsUpdate = 19 [default = "ON"];
    if (has_gpsupdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpsupdate());
    }

    // optional bool elDisabled = 20 [default = false];
    if (has_eldisabled()) {
      total_size += 2 + 1;
    }

    // optional bool invertAz = 21 [default = false];
    if (has_invertaz()) {
      total_size += 2 + 1;
    }

    // optional float maxVelocity = 22 [default = 10];
    if (has_maxvelocity()) {
      total_size += 2 + 4;
    }

    // optional bool dynamicVel = 23 [default = false];
    if (has_dynamicvel()) {
      total_size += 2 + 1;
    }

    // optional bool slewEnabled = 24 [default = false];
    if (has_slewenabled()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float azCloseEnough = 25 [default = 0.5];
    if (has_azcloseenough()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotorRPMConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotorRPMConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotorRPMConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotorRPMConfig::MergeFrom(const RotorRPMConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_azoffset()) {
      set_azoffset(from.azoffset());
    }
    if (from.has_eloffset()) {
      set_eloffset(from.eloffset());
    }
    if (from.has_hardlimit()) {
      set_hardlimit(from.hardlimit());
    }
    if (from.has_minscanangle()) {
      set_minscanangle(from.minscanangle());
    }
    if (from.has_maxscanangle()) {
      set_maxscanangle(from.maxscanangle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_minelevation()) {
      set_minelevation(from.minelevation());
    }
    if (from.has_maxelevation()) {
      set_maxelevation(from.maxelevation());
    }
    if (from.has_scanelevation()) {
      set_scanelevation(from.scanelevation());
    }
    if (from.has_multicastrate()) {
      set_multicastrate(from.multicastrate());
    }
    if (from.has_pointholdincrement()) {
      set_pointholdincrement(from.pointholdincrement());
    }
    if (from.has_energyscanspeed()) {
      set_energyscanspeed(from.energyscanspeed());
    }
    if (from.has_startdeviation()) {
      set_startdeviation(from.startdeviation());
    }
    if (from.has_energytracktime()) {
      set_energytracktime(from.energytracktime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_scanscrypt()) {
      set_scanscrypt(from.scanscrypt());
    }
    if (from.has_gpsserver()) {
      set_gpsserver(from.gpsserver());
    }
    if (from.has_gpsupdate()) {
      set_gpsupdate(from.gpsupdate());
    }
    if (from.has_eldisabled()) {
      set_eldisabled(from.eldisabled());
    }
    if (from.has_invertaz()) {
      set_invertaz(from.invertaz());
    }
    if (from.has_maxvelocity()) {
      set_maxvelocity(from.maxvelocity());
    }
    if (from.has_dynamicvel()) {
      set_dynamicvel(from.dynamicvel());
    }
    if (from.has_slewenabled()) {
      set_slewenabled(from.slewenabled());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_azcloseenough()) {
      set_azcloseenough(from.azcloseenough());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotorRPMConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotorRPMConfig::CopyFrom(const RotorRPMConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotorRPMConfig::IsInitialized() const {

  return true;
}

void RotorRPMConfig::Swap(RotorRPMConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(azoffset_, other->azoffset_);
    std::swap(eloffset_, other->eloffset_);
    std::swap(hardlimit_, other->hardlimit_);
    std::swap(minscanangle_, other->minscanangle_);
    std::swap(maxscanangle_, other->maxscanangle_);
    std::swap(minelevation_, other->minelevation_);
    std::swap(maxelevation_, other->maxelevation_);
    std::swap(scanelevation_, other->scanelevation_);
    std::swap(multicastrate_, other->multicastrate_);
    std::swap(pointholdincrement_, other->pointholdincrement_);
    std::swap(energyscanspeed_, other->energyscanspeed_);
    std::swap(startdeviation_, other->startdeviation_);
    std::swap(energytracktime_, other->energytracktime_);
    std::swap(scanscrypt_, other->scanscrypt_);
    std::swap(gpsserver_, other->gpsserver_);
    std::swap(gpsupdate_, other->gpsupdate_);
    std::swap(eldisabled_, other->eldisabled_);
    std::swap(invertaz_, other->invertaz_);
    std::swap(maxvelocity_, other->maxvelocity_);
    std::swap(dynamicvel_, other->dynamicvel_);
    std::swap(slewenabled_, other->slewenabled_);
    std::swap(azcloseenough_, other->azcloseenough_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotorRPMConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotorRPMConfig_descriptor_;
  metadata.reflection = RotorRPMConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RotorProtatorConfig::_default_msgname_ = NULL;
::std::string* RotorProtatorConfig::_default_scanscrypt_ = NULL;
::std::string* RotorProtatorConfig::_default_gpsserver_ = NULL;
::std::string* RotorProtatorConfig::_default_gpsupdate_ = NULL;
#ifndef _MSC_VER
const int RotorProtatorConfig::kMsgNameFieldNumber;
const int RotorProtatorConfig::kIPFieldNumber;
const int RotorProtatorConfig::kPortFieldNumber;
const int RotorProtatorConfig::kAzOffsetFieldNumber;
const int RotorProtatorConfig::kHardLimitFieldNumber;
const int RotorProtatorConfig::kMinScanAngleFieldNumber;
const int RotorProtatorConfig::kMaxScanAngleFieldNumber;
const int RotorProtatorConfig::kMulticastRateFieldNumber;
const int RotorProtatorConfig::kPointHoldIncrementFieldNumber;
const int RotorProtatorConfig::kEnergyScanSpeedFieldNumber;
const int RotorProtatorConfig::kStartDeviationFieldNumber;
const int RotorProtatorConfig::kEnergyTrackTimeFieldNumber;
const int RotorProtatorConfig::kScanScryptFieldNumber;
const int RotorProtatorConfig::kGpsServerFieldNumber;
const int RotorProtatorConfig::kGpsUpdateFieldNumber;
const int RotorProtatorConfig::kAzCloseEnoughFieldNumber;
const int RotorProtatorConfig::kElDisabledFieldNumber;
#endif  // !_MSC_VER

RotorProtatorConfig::RotorProtatorConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RotorProtatorConfig::InitAsDefaultInstance() {
}

RotorProtatorConfig::RotorProtatorConfig(const RotorProtatorConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RotorProtatorConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  azoffset_ = 0;
  hardlimit_ = false;
  minscanangle_ = 0;
  maxscanangle_ = 0;
  multicastrate_ = 0;
  pointholdincrement_ = 0;
  energyscanspeed_ = 20;
  startdeviation_ = 180;
  energytracktime_ = 500;
  scanscrypt_ = const_cast< ::std::string*>(_default_scanscrypt_);
  gpsserver_ = const_cast< ::std::string*>(_default_gpsserver_);
  gpsupdate_ = const_cast< ::std::string*>(_default_gpsupdate_);
  azcloseenough_ = 5;
  eldisabled_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotorProtatorConfig::~RotorProtatorConfig() {
  SharedDtor();
}

void RotorProtatorConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (scanscrypt_ != _default_scanscrypt_) {
    delete scanscrypt_;
  }
  if (gpsserver_ != _default_gpsserver_) {
    delete gpsserver_;
  }
  if (gpsupdate_ != _default_gpsupdate_) {
    delete gpsupdate_;
  }
  if (this != default_instance_) {
  }
}

void RotorProtatorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotorProtatorConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotorProtatorConfig_descriptor_;
}

const RotorProtatorConfig& RotorProtatorConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

RotorProtatorConfig* RotorProtatorConfig::default_instance_ = NULL;

RotorProtatorConfig* RotorProtatorConfig::New() const {
  return new RotorProtatorConfig;
}

void RotorProtatorConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    azoffset_ = 0;
    hardlimit_ = false;
    minscanangle_ = 0;
    maxscanangle_ = 0;
    multicastrate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pointholdincrement_ = 0;
    energyscanspeed_ = 20;
    startdeviation_ = 180;
    energytracktime_ = 500;
    if (has_scanscrypt()) {
      if (scanscrypt_ != _default_scanscrypt_) {
        scanscrypt_->assign(*_default_scanscrypt_);
      }
    }
    if (has_gpsserver()) {
      if (gpsserver_ != _default_gpsserver_) {
        gpsserver_->assign(*_default_gpsserver_);
      }
    }
    if (has_gpsupdate()) {
      if (gpsupdate_ != _default_gpsupdate_) {
        gpsupdate_->assign(*_default_gpsupdate_);
      }
    }
    azcloseenough_ = 5;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    eldisabled_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotorProtatorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ROTOR_PROTATOR_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IP;
        break;
      }

      // optional string IP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_AzOffset;
        break;
      }

      // optional float AzOffset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AzOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azoffset_)));
          set_has_azoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hardLimit;
        break;
      }

      // optional bool hardLimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hardLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hardlimit_)));
          set_has_hardlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_minScanAngle;
        break;
      }

      // optional float minScanAngle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minscanangle_)));
          set_has_minscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_maxScanAngle;
        break;
      }

      // optional float maxScanAngle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxscanangle_)));
          set_has_maxscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_multicastRate;
        break;
      }

      // optional float multicastRate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_multicastRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &multicastrate_)));
          set_has_multicastrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_pointHoldIncrement;
        break;
      }

      // optional float pointHoldIncrement = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pointHoldIncrement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pointholdincrement_)));
          set_has_pointholdincrement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_energyScanSpeed;
        break;
      }

      // optional float energyScanSpeed = 10 [default = 20];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyScanSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energyscanspeed_)));
          set_has_energyscanspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_startDeviation;
        break;
      }

      // optional float startDeviation = 11 [default = 180];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startDeviation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startdeviation_)));
          set_has_startdeviation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_energyTrackTime;
        break;
      }

      // optional float energyTrackTime = 12 [default = 500];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyTrackTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energytracktime_)));
          set_has_energytracktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_scanScrypt;
        break;
      }

      // optional string scanScrypt = 13 [default = "NONE"];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scanScrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scanscrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scanscrypt().data(), this->scanscrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_gpsServer;
        break;
      }

      // optional string gpsServer = 14 [default = "OFF"];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpsServer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpsserver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpsserver().data(), this->gpsserver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_gpsUpdate;
        break;
      }

      // optional string gpsUpdate = 15 [default = "ON"];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpsUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpsupdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpsupdate().data(), this->gpsupdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_azCloseEnough;
        break;
      }

      // optional float azCloseEnough = 16 [default = 5];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azCloseEnough:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azcloseenough_)));
          set_has_azcloseenough();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_elDisabled;
        break;
      }

      // optional bool elDisabled = 17 [default = true];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elDisabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eldisabled_)));
          set_has_eldisabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RotorProtatorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ROTOR_PROTATOR_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional float AzOffset = 4;
  if (has_azoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->azoffset(), output);
  }

  // optional bool hardLimit = 5;
  if (has_hardlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hardlimit(), output);
  }

  // optional float minScanAngle = 6;
  if (has_minscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->minscanangle(), output);
  }

  // optional float maxScanAngle = 7;
  if (has_maxscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->maxscanangle(), output);
  }

  // optional float multicastRate = 8;
  if (has_multicastrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->multicastrate(), output);
  }

  // optional float pointHoldIncrement = 9;
  if (has_pointholdincrement()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->pointholdincrement(), output);
  }

  // optional float energyScanSpeed = 10 [default = 20];
  if (has_energyscanspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->energyscanspeed(), output);
  }

  // optional float startDeviation = 11 [default = 180];
  if (has_startdeviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->startdeviation(), output);
  }

  // optional float energyTrackTime = 12 [default = 500];
  if (has_energytracktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->energytracktime(), output);
  }

  // optional string scanScrypt = 13 [default = "NONE"];
  if (has_scanscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scanscrypt().data(), this->scanscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->scanscrypt(), output);
  }

  // optional string gpsServer = 14 [default = "OFF"];
  if (has_gpsserver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsserver().data(), this->gpsserver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->gpsserver(), output);
  }

  // optional string gpsUpdate = 15 [default = "ON"];
  if (has_gpsupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsupdate().data(), this->gpsupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->gpsupdate(), output);
  }

  // optional float azCloseEnough = 16 [default = 5];
  if (has_azcloseenough()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->azcloseenough(), output);
  }

  // optional bool elDisabled = 17 [default = true];
  if (has_eldisabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->eldisabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RotorProtatorConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ROTOR_PROTATOR_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional float AzOffset = 4;
  if (has_azoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->azoffset(), target);
  }

  // optional bool hardLimit = 5;
  if (has_hardlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hardlimit(), target);
  }

  // optional float minScanAngle = 6;
  if (has_minscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->minscanangle(), target);
  }

  // optional float maxScanAngle = 7;
  if (has_maxscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->maxscanangle(), target);
  }

  // optional float multicastRate = 8;
  if (has_multicastrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->multicastrate(), target);
  }

  // optional float pointHoldIncrement = 9;
  if (has_pointholdincrement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->pointholdincrement(), target);
  }

  // optional float energyScanSpeed = 10 [default = 20];
  if (has_energyscanspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->energyscanspeed(), target);
  }

  // optional float startDeviation = 11 [default = 180];
  if (has_startdeviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->startdeviation(), target);
  }

  // optional float energyTrackTime = 12 [default = 500];
  if (has_energytracktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->energytracktime(), target);
  }

  // optional string scanScrypt = 13 [default = "NONE"];
  if (has_scanscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scanscrypt().data(), this->scanscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->scanscrypt(), target);
  }

  // optional string gpsServer = 14 [default = "OFF"];
  if (has_gpsserver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsserver().data(), this->gpsserver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->gpsserver(), target);
  }

  // optional string gpsUpdate = 15 [default = "ON"];
  if (has_gpsupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsupdate().data(), this->gpsupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->gpsupdate(), target);
  }

  // optional float azCloseEnough = 16 [default = 5];
  if (has_azcloseenough()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->azcloseenough(), target);
  }

  // optional bool elDisabled = 17 [default = true];
  if (has_eldisabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->eldisabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RotorProtatorConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ROTOR_PROTATOR_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string IP = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional float AzOffset = 4;
    if (has_azoffset()) {
      total_size += 1 + 4;
    }

    // optional bool hardLimit = 5;
    if (has_hardlimit()) {
      total_size += 1 + 1;
    }

    // optional float minScanAngle = 6;
    if (has_minscanangle()) {
      total_size += 1 + 4;
    }

    // optional float maxScanAngle = 7;
    if (has_maxscanangle()) {
      total_size += 1 + 4;
    }

    // optional float multicastRate = 8;
    if (has_multicastrate()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float pointHoldIncrement = 9;
    if (has_pointholdincrement()) {
      total_size += 1 + 4;
    }

    // optional float energyScanSpeed = 10 [default = 20];
    if (has_energyscanspeed()) {
      total_size += 1 + 4;
    }

    // optional float startDeviation = 11 [default = 180];
    if (has_startdeviation()) {
      total_size += 1 + 4;
    }

    // optional float energyTrackTime = 12 [default = 500];
    if (has_energytracktime()) {
      total_size += 1 + 4;
    }

    // optional string scanScrypt = 13 [default = "NONE"];
    if (has_scanscrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scanscrypt());
    }

    // optional string gpsServer = 14 [default = "OFF"];
    if (has_gpsserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpsserver());
    }

    // optional string gpsUpdate = 15 [default = "ON"];
    if (has_gpsupdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpsupdate());
    }

    // optional float azCloseEnough = 16 [default = 5];
    if (has_azcloseenough()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool elDisabled = 17 [default = true];
    if (has_eldisabled()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotorProtatorConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotorProtatorConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotorProtatorConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotorProtatorConfig::MergeFrom(const RotorProtatorConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_azoffset()) {
      set_azoffset(from.azoffset());
    }
    if (from.has_hardlimit()) {
      set_hardlimit(from.hardlimit());
    }
    if (from.has_minscanangle()) {
      set_minscanangle(from.minscanangle());
    }
    if (from.has_maxscanangle()) {
      set_maxscanangle(from.maxscanangle());
    }
    if (from.has_multicastrate()) {
      set_multicastrate(from.multicastrate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pointholdincrement()) {
      set_pointholdincrement(from.pointholdincrement());
    }
    if (from.has_energyscanspeed()) {
      set_energyscanspeed(from.energyscanspeed());
    }
    if (from.has_startdeviation()) {
      set_startdeviation(from.startdeviation());
    }
    if (from.has_energytracktime()) {
      set_energytracktime(from.energytracktime());
    }
    if (from.has_scanscrypt()) {
      set_scanscrypt(from.scanscrypt());
    }
    if (from.has_gpsserver()) {
      set_gpsserver(from.gpsserver());
    }
    if (from.has_gpsupdate()) {
      set_gpsupdate(from.gpsupdate());
    }
    if (from.has_azcloseenough()) {
      set_azcloseenough(from.azcloseenough());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_eldisabled()) {
      set_eldisabled(from.eldisabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotorProtatorConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotorProtatorConfig::CopyFrom(const RotorProtatorConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotorProtatorConfig::IsInitialized() const {

  return true;
}

void RotorProtatorConfig::Swap(RotorProtatorConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(azoffset_, other->azoffset_);
    std::swap(hardlimit_, other->hardlimit_);
    std::swap(minscanangle_, other->minscanangle_);
    std::swap(maxscanangle_, other->maxscanangle_);
    std::swap(multicastrate_, other->multicastrate_);
    std::swap(pointholdincrement_, other->pointholdincrement_);
    std::swap(energyscanspeed_, other->energyscanspeed_);
    std::swap(startdeviation_, other->startdeviation_);
    std::swap(energytracktime_, other->energytracktime_);
    std::swap(scanscrypt_, other->scanscrypt_);
    std::swap(gpsserver_, other->gpsserver_);
    std::swap(gpsupdate_, other->gpsupdate_);
    std::swap(azcloseenough_, other->azcloseenough_);
    std::swap(eldisabled_, other->eldisabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotorProtatorConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotorProtatorConfig_descriptor_;
  metadata.reflection = RotorProtatorConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RotorProsistelConfig::_default_msgname_ = NULL;
::std::string* RotorProsistelConfig::_default_scanscrypt_ = NULL;
::std::string* RotorProsistelConfig::_default_gpsserver_ = NULL;
::std::string* RotorProsistelConfig::_default_gpsupdate_ = NULL;
#ifndef _MSC_VER
const int RotorProsistelConfig::kMsgNameFieldNumber;
const int RotorProsistelConfig::kIPFieldNumber;
const int RotorProsistelConfig::kPortFieldNumber;
const int RotorProsistelConfig::kAzOffsetFieldNumber;
const int RotorProsistelConfig::kHardLimitFieldNumber;
const int RotorProsistelConfig::kMinScanAngleFieldNumber;
const int RotorProsistelConfig::kMaxScanAngleFieldNumber;
const int RotorProsistelConfig::kMulticastRateFieldNumber;
const int RotorProsistelConfig::kPointHoldIncrementFieldNumber;
const int RotorProsistelConfig::kEnergyScanSpeedFieldNumber;
const int RotorProsistelConfig::kStartDeviationFieldNumber;
const int RotorProsistelConfig::kEnergyTrackTimeFieldNumber;
const int RotorProsistelConfig::kScanScryptFieldNumber;
const int RotorProsistelConfig::kGpsServerFieldNumber;
const int RotorProsistelConfig::kGpsUpdateFieldNumber;
const int RotorProsistelConfig::kAzCloseEnoughFieldNumber;
const int RotorProsistelConfig::kElDisabledFieldNumber;
#endif  // !_MSC_VER

RotorProsistelConfig::RotorProsistelConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RotorProsistelConfig::InitAsDefaultInstance() {
}

RotorProsistelConfig::RotorProsistelConfig(const RotorProsistelConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RotorProsistelConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  azoffset_ = 0;
  hardlimit_ = false;
  minscanangle_ = 0;
  maxscanangle_ = 0;
  multicastrate_ = 0;
  pointholdincrement_ = 0;
  energyscanspeed_ = 20;
  startdeviation_ = 180;
  energytracktime_ = 500;
  scanscrypt_ = const_cast< ::std::string*>(_default_scanscrypt_);
  gpsserver_ = const_cast< ::std::string*>(_default_gpsserver_);
  gpsupdate_ = const_cast< ::std::string*>(_default_gpsupdate_);
  azcloseenough_ = 5;
  eldisabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotorProsistelConfig::~RotorProsistelConfig() {
  SharedDtor();
}

void RotorProsistelConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (scanscrypt_ != _default_scanscrypt_) {
    delete scanscrypt_;
  }
  if (gpsserver_ != _default_gpsserver_) {
    delete gpsserver_;
  }
  if (gpsupdate_ != _default_gpsupdate_) {
    delete gpsupdate_;
  }
  if (this != default_instance_) {
  }
}

void RotorProsistelConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotorProsistelConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotorProsistelConfig_descriptor_;
}

const RotorProsistelConfig& RotorProsistelConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

RotorProsistelConfig* RotorProsistelConfig::default_instance_ = NULL;

RotorProsistelConfig* RotorProsistelConfig::New() const {
  return new RotorProsistelConfig;
}

void RotorProsistelConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    azoffset_ = 0;
    hardlimit_ = false;
    minscanangle_ = 0;
    maxscanangle_ = 0;
    multicastrate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pointholdincrement_ = 0;
    energyscanspeed_ = 20;
    startdeviation_ = 180;
    energytracktime_ = 500;
    if (has_scanscrypt()) {
      if (scanscrypt_ != _default_scanscrypt_) {
        scanscrypt_->assign(*_default_scanscrypt_);
      }
    }
    if (has_gpsserver()) {
      if (gpsserver_ != _default_gpsserver_) {
        gpsserver_->assign(*_default_gpsserver_);
      }
    }
    if (has_gpsupdate()) {
      if (gpsupdate_ != _default_gpsupdate_) {
        gpsupdate_->assign(*_default_gpsupdate_);
      }
    }
    azcloseenough_ = 5;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    eldisabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotorProsistelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ROTOR_PROSISTEL_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IP;
        break;
      }

      // optional string IP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_AzOffset;
        break;
      }

      // optional float AzOffset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AzOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azoffset_)));
          set_has_azoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hardLimit;
        break;
      }

      // optional bool hardLimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hardLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hardlimit_)));
          set_has_hardlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_minScanAngle;
        break;
      }

      // optional float minScanAngle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minscanangle_)));
          set_has_minscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_maxScanAngle;
        break;
      }

      // optional float maxScanAngle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxscanangle_)));
          set_has_maxscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_multicastRate;
        break;
      }

      // optional float multicastRate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_multicastRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &multicastrate_)));
          set_has_multicastrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_pointHoldIncrement;
        break;
      }

      // optional float pointHoldIncrement = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pointHoldIncrement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pointholdincrement_)));
          set_has_pointholdincrement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_energyScanSpeed;
        break;
      }

      // optional float energyScanSpeed = 10 [default = 20];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyScanSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energyscanspeed_)));
          set_has_energyscanspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_startDeviation;
        break;
      }

      // optional float startDeviation = 11 [default = 180];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startDeviation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startdeviation_)));
          set_has_startdeviation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_energyTrackTime;
        break;
      }

      // optional float energyTrackTime = 12 [default = 500];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyTrackTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energytracktime_)));
          set_has_energytracktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_scanScrypt;
        break;
      }

      // optional string scanScrypt = 13 [default = "NONE"];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scanScrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scanscrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scanscrypt().data(), this->scanscrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_gpsServer;
        break;
      }

      // optional string gpsServer = 14 [default = "OFF"];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpsServer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpsserver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpsserver().data(), this->gpsserver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_gpsUpdate;
        break;
      }

      // optional string gpsUpdate = 15 [default = "ON"];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpsUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpsupdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpsupdate().data(), this->gpsupdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_azCloseEnough;
        break;
      }

      // optional float azCloseEnough = 16 [default = 5];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azCloseEnough:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azcloseenough_)));
          set_has_azcloseenough();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_elDisabled;
        break;
      }

      // optional bool elDisabled = 17 [default = false];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elDisabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eldisabled_)));
          set_has_eldisabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RotorProsistelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ROTOR_PROSISTEL_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional float AzOffset = 4;
  if (has_azoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->azoffset(), output);
  }

  // optional bool hardLimit = 5;
  if (has_hardlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hardlimit(), output);
  }

  // optional float minScanAngle = 6;
  if (has_minscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->minscanangle(), output);
  }

  // optional float maxScanAngle = 7;
  if (has_maxscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->maxscanangle(), output);
  }

  // optional float multicastRate = 8;
  if (has_multicastrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->multicastrate(), output);
  }

  // optional float pointHoldIncrement = 9;
  if (has_pointholdincrement()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->pointholdincrement(), output);
  }

  // optional float energyScanSpeed = 10 [default = 20];
  if (has_energyscanspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->energyscanspeed(), output);
  }

  // optional float startDeviation = 11 [default = 180];
  if (has_startdeviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->startdeviation(), output);
  }

  // optional float energyTrackTime = 12 [default = 500];
  if (has_energytracktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->energytracktime(), output);
  }

  // optional string scanScrypt = 13 [default = "NONE"];
  if (has_scanscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scanscrypt().data(), this->scanscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->scanscrypt(), output);
  }

  // optional string gpsServer = 14 [default = "OFF"];
  if (has_gpsserver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsserver().data(), this->gpsserver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->gpsserver(), output);
  }

  // optional string gpsUpdate = 15 [default = "ON"];
  if (has_gpsupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsupdate().data(), this->gpsupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->gpsupdate(), output);
  }

  // optional float azCloseEnough = 16 [default = 5];
  if (has_azcloseenough()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->azcloseenough(), output);
  }

  // optional bool elDisabled = 17 [default = false];
  if (has_eldisabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->eldisabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RotorProsistelConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ROTOR_PROSISTEL_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional float AzOffset = 4;
  if (has_azoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->azoffset(), target);
  }

  // optional bool hardLimit = 5;
  if (has_hardlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hardlimit(), target);
  }

  // optional float minScanAngle = 6;
  if (has_minscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->minscanangle(), target);
  }

  // optional float maxScanAngle = 7;
  if (has_maxscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->maxscanangle(), target);
  }

  // optional float multicastRate = 8;
  if (has_multicastrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->multicastrate(), target);
  }

  // optional float pointHoldIncrement = 9;
  if (has_pointholdincrement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->pointholdincrement(), target);
  }

  // optional float energyScanSpeed = 10 [default = 20];
  if (has_energyscanspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->energyscanspeed(), target);
  }

  // optional float startDeviation = 11 [default = 180];
  if (has_startdeviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->startdeviation(), target);
  }

  // optional float energyTrackTime = 12 [default = 500];
  if (has_energytracktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->energytracktime(), target);
  }

  // optional string scanScrypt = 13 [default = "NONE"];
  if (has_scanscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scanscrypt().data(), this->scanscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->scanscrypt(), target);
  }

  // optional string gpsServer = 14 [default = "OFF"];
  if (has_gpsserver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsserver().data(), this->gpsserver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->gpsserver(), target);
  }

  // optional string gpsUpdate = 15 [default = "ON"];
  if (has_gpsupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsupdate().data(), this->gpsupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->gpsupdate(), target);
  }

  // optional float azCloseEnough = 16 [default = 5];
  if (has_azcloseenough()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->azcloseenough(), target);
  }

  // optional bool elDisabled = 17 [default = false];
  if (has_eldisabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->eldisabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RotorProsistelConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ROTOR_PROSISTEL_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string IP = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional float AzOffset = 4;
    if (has_azoffset()) {
      total_size += 1 + 4;
    }

    // optional bool hardLimit = 5;
    if (has_hardlimit()) {
      total_size += 1 + 1;
    }

    // optional float minScanAngle = 6;
    if (has_minscanangle()) {
      total_size += 1 + 4;
    }

    // optional float maxScanAngle = 7;
    if (has_maxscanangle()) {
      total_size += 1 + 4;
    }

    // optional float multicastRate = 8;
    if (has_multicastrate()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float pointHoldIncrement = 9;
    if (has_pointholdincrement()) {
      total_size += 1 + 4;
    }

    // optional float energyScanSpeed = 10 [default = 20];
    if (has_energyscanspeed()) {
      total_size += 1 + 4;
    }

    // optional float startDeviation = 11 [default = 180];
    if (has_startdeviation()) {
      total_size += 1 + 4;
    }

    // optional float energyTrackTime = 12 [default = 500];
    if (has_energytracktime()) {
      total_size += 1 + 4;
    }

    // optional string scanScrypt = 13 [default = "NONE"];
    if (has_scanscrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scanscrypt());
    }

    // optional string gpsServer = 14 [default = "OFF"];
    if (has_gpsserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpsserver());
    }

    // optional string gpsUpdate = 15 [default = "ON"];
    if (has_gpsupdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpsupdate());
    }

    // optional float azCloseEnough = 16 [default = 5];
    if (has_azcloseenough()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool elDisabled = 17 [default = false];
    if (has_eldisabled()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotorProsistelConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotorProsistelConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotorProsistelConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotorProsistelConfig::MergeFrom(const RotorProsistelConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_azoffset()) {
      set_azoffset(from.azoffset());
    }
    if (from.has_hardlimit()) {
      set_hardlimit(from.hardlimit());
    }
    if (from.has_minscanangle()) {
      set_minscanangle(from.minscanangle());
    }
    if (from.has_maxscanangle()) {
      set_maxscanangle(from.maxscanangle());
    }
    if (from.has_multicastrate()) {
      set_multicastrate(from.multicastrate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pointholdincrement()) {
      set_pointholdincrement(from.pointholdincrement());
    }
    if (from.has_energyscanspeed()) {
      set_energyscanspeed(from.energyscanspeed());
    }
    if (from.has_startdeviation()) {
      set_startdeviation(from.startdeviation());
    }
    if (from.has_energytracktime()) {
      set_energytracktime(from.energytracktime());
    }
    if (from.has_scanscrypt()) {
      set_scanscrypt(from.scanscrypt());
    }
    if (from.has_gpsserver()) {
      set_gpsserver(from.gpsserver());
    }
    if (from.has_gpsupdate()) {
      set_gpsupdate(from.gpsupdate());
    }
    if (from.has_azcloseenough()) {
      set_azcloseenough(from.azcloseenough());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_eldisabled()) {
      set_eldisabled(from.eldisabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotorProsistelConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotorProsistelConfig::CopyFrom(const RotorProsistelConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotorProsistelConfig::IsInitialized() const {

  return true;
}

void RotorProsistelConfig::Swap(RotorProsistelConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(azoffset_, other->azoffset_);
    std::swap(hardlimit_, other->hardlimit_);
    std::swap(minscanangle_, other->minscanangle_);
    std::swap(maxscanangle_, other->maxscanangle_);
    std::swap(multicastrate_, other->multicastrate_);
    std::swap(pointholdincrement_, other->pointholdincrement_);
    std::swap(energyscanspeed_, other->energyscanspeed_);
    std::swap(startdeviation_, other->startdeviation_);
    std::swap(energytracktime_, other->energytracktime_);
    std::swap(scanscrypt_, other->scanscrypt_);
    std::swap(gpsserver_, other->gpsserver_);
    std::swap(gpsupdate_, other->gpsupdate_);
    std::swap(azcloseenough_, other->azcloseenough_);
    std::swap(eldisabled_, other->eldisabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotorProsistelConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotorProsistelConfig_descriptor_;
  metadata.reflection = RotorProsistelConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RotorEzrotorConfig::_default_msgname_ = NULL;
::std::string* RotorEzrotorConfig::_default_scanscrypt_ = NULL;
::std::string* RotorEzrotorConfig::_default_gpsserver_ = NULL;
::std::string* RotorEzrotorConfig::_default_gpsupdate_ = NULL;
#ifndef _MSC_VER
const int RotorEzrotorConfig::kMsgNameFieldNumber;
const int RotorEzrotorConfig::kIPFieldNumber;
const int RotorEzrotorConfig::kPortFieldNumber;
const int RotorEzrotorConfig::kAzOffsetFieldNumber;
const int RotorEzrotorConfig::kHardLimitFieldNumber;
const int RotorEzrotorConfig::kMinScanAngleFieldNumber;
const int RotorEzrotorConfig::kMaxScanAngleFieldNumber;
const int RotorEzrotorConfig::kMulticastRateFieldNumber;
const int RotorEzrotorConfig::kPointHoldIncrementFieldNumber;
const int RotorEzrotorConfig::kEnergyScanSpeedFieldNumber;
const int RotorEzrotorConfig::kStartDeviationFieldNumber;
const int RotorEzrotorConfig::kEnergyTrackTimeFieldNumber;
const int RotorEzrotorConfig::kScanScryptFieldNumber;
const int RotorEzrotorConfig::kGpsServerFieldNumber;
const int RotorEzrotorConfig::kGpsUpdateFieldNumber;
const int RotorEzrotorConfig::kAzCloseEnoughFieldNumber;
const int RotorEzrotorConfig::kElDisabledFieldNumber;
#endif  // !_MSC_VER

RotorEzrotorConfig::RotorEzrotorConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RotorEzrotorConfig::InitAsDefaultInstance() {
}

RotorEzrotorConfig::RotorEzrotorConfig(const RotorEzrotorConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RotorEzrotorConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  azoffset_ = 0;
  hardlimit_ = false;
  minscanangle_ = 0;
  maxscanangle_ = 0;
  multicastrate_ = 0;
  pointholdincrement_ = 0;
  energyscanspeed_ = 20;
  startdeviation_ = 180;
  energytracktime_ = 500;
  scanscrypt_ = const_cast< ::std::string*>(_default_scanscrypt_);
  gpsserver_ = const_cast< ::std::string*>(_default_gpsserver_);
  gpsupdate_ = const_cast< ::std::string*>(_default_gpsupdate_);
  azcloseenough_ = 5;
  eldisabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotorEzrotorConfig::~RotorEzrotorConfig() {
  SharedDtor();
}

void RotorEzrotorConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (scanscrypt_ != _default_scanscrypt_) {
    delete scanscrypt_;
  }
  if (gpsserver_ != _default_gpsserver_) {
    delete gpsserver_;
  }
  if (gpsupdate_ != _default_gpsupdate_) {
    delete gpsupdate_;
  }
  if (this != default_instance_) {
  }
}

void RotorEzrotorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotorEzrotorConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotorEzrotorConfig_descriptor_;
}

const RotorEzrotorConfig& RotorEzrotorConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

RotorEzrotorConfig* RotorEzrotorConfig::default_instance_ = NULL;

RotorEzrotorConfig* RotorEzrotorConfig::New() const {
  return new RotorEzrotorConfig;
}

void RotorEzrotorConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    azoffset_ = 0;
    hardlimit_ = false;
    minscanangle_ = 0;
    maxscanangle_ = 0;
    multicastrate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pointholdincrement_ = 0;
    energyscanspeed_ = 20;
    startdeviation_ = 180;
    energytracktime_ = 500;
    if (has_scanscrypt()) {
      if (scanscrypt_ != _default_scanscrypt_) {
        scanscrypt_->assign(*_default_scanscrypt_);
      }
    }
    if (has_gpsserver()) {
      if (gpsserver_ != _default_gpsserver_) {
        gpsserver_->assign(*_default_gpsserver_);
      }
    }
    if (has_gpsupdate()) {
      if (gpsupdate_ != _default_gpsupdate_) {
        gpsupdate_->assign(*_default_gpsupdate_);
      }
    }
    azcloseenough_ = 5;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    eldisabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotorEzrotorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EZROTOR_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IP;
        break;
      }

      // optional string IP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_AzOffset;
        break;
      }

      // optional float AzOffset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AzOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azoffset_)));
          set_has_azoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hardLimit;
        break;
      }

      // optional bool hardLimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hardLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hardlimit_)));
          set_has_hardlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_minScanAngle;
        break;
      }

      // optional float minScanAngle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minscanangle_)));
          set_has_minscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_maxScanAngle;
        break;
      }

      // optional float maxScanAngle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxscanangle_)));
          set_has_maxscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_multicastRate;
        break;
      }

      // optional float multicastRate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_multicastRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &multicastrate_)));
          set_has_multicastrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_pointHoldIncrement;
        break;
      }

      // optional float pointHoldIncrement = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pointHoldIncrement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pointholdincrement_)));
          set_has_pointholdincrement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_energyScanSpeed;
        break;
      }

      // optional float energyScanSpeed = 10 [default = 20];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyScanSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energyscanspeed_)));
          set_has_energyscanspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_startDeviation;
        break;
      }

      // optional float startDeviation = 11 [default = 180];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startDeviation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startdeviation_)));
          set_has_startdeviation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_energyTrackTime;
        break;
      }

      // optional float energyTrackTime = 12 [default = 500];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyTrackTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energytracktime_)));
          set_has_energytracktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_scanScrypt;
        break;
      }

      // optional string scanScrypt = 13 [default = "NONE"];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scanScrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scanscrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scanscrypt().data(), this->scanscrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_gpsServer;
        break;
      }

      // optional string gpsServer = 14 [default = "OFF"];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpsServer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpsserver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpsserver().data(), this->gpsserver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_gpsUpdate;
        break;
      }

      // optional string gpsUpdate = 15 [default = "ON"];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpsUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpsupdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpsupdate().data(), this->gpsupdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_azCloseEnough;
        break;
      }

      // optional float azCloseEnough = 16 [default = 5];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azCloseEnough:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azcloseenough_)));
          set_has_azcloseenough();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_elDisabled;
        break;
      }

      // optional bool elDisabled = 17 [default = false];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elDisabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eldisabled_)));
          set_has_eldisabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RotorEzrotorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EZROTOR_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional float AzOffset = 4;
  if (has_azoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->azoffset(), output);
  }

  // optional bool hardLimit = 5;
  if (has_hardlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hardlimit(), output);
  }

  // optional float minScanAngle = 6;
  if (has_minscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->minscanangle(), output);
  }

  // optional float maxScanAngle = 7;
  if (has_maxscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->maxscanangle(), output);
  }

  // optional float multicastRate = 8;
  if (has_multicastrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->multicastrate(), output);
  }

  // optional float pointHoldIncrement = 9;
  if (has_pointholdincrement()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->pointholdincrement(), output);
  }

  // optional float energyScanSpeed = 10 [default = 20];
  if (has_energyscanspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->energyscanspeed(), output);
  }

  // optional float startDeviation = 11 [default = 180];
  if (has_startdeviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->startdeviation(), output);
  }

  // optional float energyTrackTime = 12 [default = 500];
  if (has_energytracktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->energytracktime(), output);
  }

  // optional string scanScrypt = 13 [default = "NONE"];
  if (has_scanscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scanscrypt().data(), this->scanscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->scanscrypt(), output);
  }

  // optional string gpsServer = 14 [default = "OFF"];
  if (has_gpsserver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsserver().data(), this->gpsserver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->gpsserver(), output);
  }

  // optional string gpsUpdate = 15 [default = "ON"];
  if (has_gpsupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsupdate().data(), this->gpsupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->gpsupdate(), output);
  }

  // optional float azCloseEnough = 16 [default = 5];
  if (has_azcloseenough()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->azcloseenough(), output);
  }

  // optional bool elDisabled = 17 [default = false];
  if (has_eldisabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->eldisabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RotorEzrotorConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EZROTOR_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional float AzOffset = 4;
  if (has_azoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->azoffset(), target);
  }

  // optional bool hardLimit = 5;
  if (has_hardlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hardlimit(), target);
  }

  // optional float minScanAngle = 6;
  if (has_minscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->minscanangle(), target);
  }

  // optional float maxScanAngle = 7;
  if (has_maxscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->maxscanangle(), target);
  }

  // optional float multicastRate = 8;
  if (has_multicastrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->multicastrate(), target);
  }

  // optional float pointHoldIncrement = 9;
  if (has_pointholdincrement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->pointholdincrement(), target);
  }

  // optional float energyScanSpeed = 10 [default = 20];
  if (has_energyscanspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->energyscanspeed(), target);
  }

  // optional float startDeviation = 11 [default = 180];
  if (has_startdeviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->startdeviation(), target);
  }

  // optional float energyTrackTime = 12 [default = 500];
  if (has_energytracktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->energytracktime(), target);
  }

  // optional string scanScrypt = 13 [default = "NONE"];
  if (has_scanscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scanscrypt().data(), this->scanscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->scanscrypt(), target);
  }

  // optional string gpsServer = 14 [default = "OFF"];
  if (has_gpsserver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsserver().data(), this->gpsserver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->gpsserver(), target);
  }

  // optional string gpsUpdate = 15 [default = "ON"];
  if (has_gpsupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsupdate().data(), this->gpsupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->gpsupdate(), target);
  }

  // optional float azCloseEnough = 16 [default = 5];
  if (has_azcloseenough()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->azcloseenough(), target);
  }

  // optional bool elDisabled = 17 [default = false];
  if (has_eldisabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->eldisabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RotorEzrotorConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EZROTOR_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string IP = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional float AzOffset = 4;
    if (has_azoffset()) {
      total_size += 1 + 4;
    }

    // optional bool hardLimit = 5;
    if (has_hardlimit()) {
      total_size += 1 + 1;
    }

    // optional float minScanAngle = 6;
    if (has_minscanangle()) {
      total_size += 1 + 4;
    }

    // optional float maxScanAngle = 7;
    if (has_maxscanangle()) {
      total_size += 1 + 4;
    }

    // optional float multicastRate = 8;
    if (has_multicastrate()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float pointHoldIncrement = 9;
    if (has_pointholdincrement()) {
      total_size += 1 + 4;
    }

    // optional float energyScanSpeed = 10 [default = 20];
    if (has_energyscanspeed()) {
      total_size += 1 + 4;
    }

    // optional float startDeviation = 11 [default = 180];
    if (has_startdeviation()) {
      total_size += 1 + 4;
    }

    // optional float energyTrackTime = 12 [default = 500];
    if (has_energytracktime()) {
      total_size += 1 + 4;
    }

    // optional string scanScrypt = 13 [default = "NONE"];
    if (has_scanscrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scanscrypt());
    }

    // optional string gpsServer = 14 [default = "OFF"];
    if (has_gpsserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpsserver());
    }

    // optional string gpsUpdate = 15 [default = "ON"];
    if (has_gpsupdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpsupdate());
    }

    // optional float azCloseEnough = 16 [default = 5];
    if (has_azcloseenough()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool elDisabled = 17 [default = false];
    if (has_eldisabled()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotorEzrotorConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotorEzrotorConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotorEzrotorConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotorEzrotorConfig::MergeFrom(const RotorEzrotorConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_azoffset()) {
      set_azoffset(from.azoffset());
    }
    if (from.has_hardlimit()) {
      set_hardlimit(from.hardlimit());
    }
    if (from.has_minscanangle()) {
      set_minscanangle(from.minscanangle());
    }
    if (from.has_maxscanangle()) {
      set_maxscanangle(from.maxscanangle());
    }
    if (from.has_multicastrate()) {
      set_multicastrate(from.multicastrate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pointholdincrement()) {
      set_pointholdincrement(from.pointholdincrement());
    }
    if (from.has_energyscanspeed()) {
      set_energyscanspeed(from.energyscanspeed());
    }
    if (from.has_startdeviation()) {
      set_startdeviation(from.startdeviation());
    }
    if (from.has_energytracktime()) {
      set_energytracktime(from.energytracktime());
    }
    if (from.has_scanscrypt()) {
      set_scanscrypt(from.scanscrypt());
    }
    if (from.has_gpsserver()) {
      set_gpsserver(from.gpsserver());
    }
    if (from.has_gpsupdate()) {
      set_gpsupdate(from.gpsupdate());
    }
    if (from.has_azcloseenough()) {
      set_azcloseenough(from.azcloseenough());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_eldisabled()) {
      set_eldisabled(from.eldisabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotorEzrotorConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotorEzrotorConfig::CopyFrom(const RotorEzrotorConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotorEzrotorConfig::IsInitialized() const {

  return true;
}

void RotorEzrotorConfig::Swap(RotorEzrotorConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(azoffset_, other->azoffset_);
    std::swap(hardlimit_, other->hardlimit_);
    std::swap(minscanangle_, other->minscanangle_);
    std::swap(maxscanangle_, other->maxscanangle_);
    std::swap(multicastrate_, other->multicastrate_);
    std::swap(pointholdincrement_, other->pointholdincrement_);
    std::swap(energyscanspeed_, other->energyscanspeed_);
    std::swap(startdeviation_, other->startdeviation_);
    std::swap(energytracktime_, other->energytracktime_);
    std::swap(scanscrypt_, other->scanscrypt_);
    std::swap(gpsserver_, other->gpsserver_);
    std::swap(gpsupdate_, other->gpsupdate_);
    std::swap(azcloseenough_, other->azcloseenough_);
    std::swap(eldisabled_, other->eldisabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotorEzrotorConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotorEzrotorConfig_descriptor_;
  metadata.reflection = RotorEzrotorConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RotorHGIOConfig::_default_msgname_ = NULL;
::std::string* RotorHGIOConfig::_default_scanscrypt_ = NULL;
::std::string* RotorHGIOConfig::_default_gpsserver_ = NULL;
::std::string* RotorHGIOConfig::_default_gpsupdate_ = NULL;
#ifndef _MSC_VER
const int RotorHGIOConfig::kMsgNameFieldNumber;
const int RotorHGIOConfig::kIPFieldNumber;
const int RotorHGIOConfig::kPortFieldNumber;
const int RotorHGIOConfig::kAzOffsetFieldNumber;
const int RotorHGIOConfig::kHardLimitFieldNumber;
const int RotorHGIOConfig::kMinScanAngleFieldNumber;
const int RotorHGIOConfig::kMaxScanAngleFieldNumber;
const int RotorHGIOConfig::kMinElevationFieldNumber;
const int RotorHGIOConfig::kMaxElevationFieldNumber;
const int RotorHGIOConfig::kScanElevationFieldNumber;
const int RotorHGIOConfig::kMulticastRateFieldNumber;
const int RotorHGIOConfig::kPointHoldIncrementFieldNumber;
const int RotorHGIOConfig::kEnergyScanSpeedFieldNumber;
const int RotorHGIOConfig::kStartDeviationFieldNumber;
const int RotorHGIOConfig::kEnergyTrackTimeFieldNumber;
const int RotorHGIOConfig::kUseGpsFieldNumber;
const int RotorHGIOConfig::kScanScryptFieldNumber;
const int RotorHGIOConfig::kGpsServerFieldNumber;
const int RotorHGIOConfig::kGpsUpdateFieldNumber;
const int RotorHGIOConfig::kAzCloseEnoughFieldNumber;
const int RotorHGIOConfig::kElDisabledFieldNumber;
const int RotorHGIOConfig::kSlewEnabledFieldNumber;
#endif  // !_MSC_VER

RotorHGIOConfig::RotorHGIOConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RotorHGIOConfig::InitAsDefaultInstance() {
}

RotorHGIOConfig::RotorHGIOConfig(const RotorHGIOConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RotorHGIOConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  azoffset_ = 0;
  hardlimit_ = false;
  minscanangle_ = 0;
  maxscanangle_ = 0;
  minelevation_ = 0;
  maxelevation_ = 0;
  scanelevation_ = 0;
  multicastrate_ = 0;
  pointholdincrement_ = 0;
  energyscanspeed_ = 5;
  startdeviation_ = 180;
  energytracktime_ = 500;
  usegps_ = false;
  scanscrypt_ = const_cast< ::std::string*>(_default_scanscrypt_);
  gpsserver_ = const_cast< ::std::string*>(_default_gpsserver_);
  gpsupdate_ = const_cast< ::std::string*>(_default_gpsupdate_);
  azcloseenough_ = 0.5f;
  eldisabled_ = false;
  slewenabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotorHGIOConfig::~RotorHGIOConfig() {
  SharedDtor();
}

void RotorHGIOConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (scanscrypt_ != _default_scanscrypt_) {
    delete scanscrypt_;
  }
  if (gpsserver_ != _default_gpsserver_) {
    delete gpsserver_;
  }
  if (gpsupdate_ != _default_gpsupdate_) {
    delete gpsupdate_;
  }
  if (this != default_instance_) {
  }
}

void RotorHGIOConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotorHGIOConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotorHGIOConfig_descriptor_;
}

const RotorHGIOConfig& RotorHGIOConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

RotorHGIOConfig* RotorHGIOConfig::default_instance_ = NULL;

RotorHGIOConfig* RotorHGIOConfig::New() const {
  return new RotorHGIOConfig;
}

void RotorHGIOConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    azoffset_ = 0;
    hardlimit_ = false;
    minscanangle_ = 0;
    maxscanangle_ = 0;
    minelevation_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    maxelevation_ = 0;
    scanelevation_ = 0;
    multicastrate_ = 0;
    pointholdincrement_ = 0;
    energyscanspeed_ = 5;
    startdeviation_ = 180;
    energytracktime_ = 500;
    usegps_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_scanscrypt()) {
      if (scanscrypt_ != _default_scanscrypt_) {
        scanscrypt_->assign(*_default_scanscrypt_);
      }
    }
    if (has_gpsserver()) {
      if (gpsserver_ != _default_gpsserver_) {
        gpsserver_->assign(*_default_gpsserver_);
      }
    }
    if (has_gpsupdate()) {
      if (gpsupdate_ != _default_gpsupdate_) {
        gpsupdate_->assign(*_default_gpsupdate_);
      }
    }
    azcloseenough_ = 0.5f;
    eldisabled_ = false;
    slewenabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotorHGIOConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "HGIO_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IP;
        break;
      }

      // optional string IP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_AzOffset;
        break;
      }

      // optional float AzOffset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AzOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azoffset_)));
          set_has_azoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hardLimit;
        break;
      }

      // optional bool hardLimit = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hardLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hardlimit_)));
          set_has_hardlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_minScanAngle;
        break;
      }

      // optional float minScanAngle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minscanangle_)));
          set_has_minscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_maxScanAngle;
        break;
      }

      // optional float maxScanAngle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxscanangle_)));
          set_has_maxscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_minElevation;
        break;
      }

      // optional float minElevation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minElevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minelevation_)));
          set_has_minelevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_maxElevation;
        break;
      }

      // optional float maxElevation = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxElevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxelevation_)));
          set_has_maxelevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_scanElevation;
        break;
      }

      // optional float scanElevation = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scanElevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scanelevation_)));
          set_has_scanelevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_multicastRate;
        break;
      }

      // optional float multicastRate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_multicastRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &multicastrate_)));
          set_has_multicastrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_pointHoldIncrement;
        break;
      }

      // optional float pointHoldIncrement = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pointHoldIncrement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pointholdincrement_)));
          set_has_pointholdincrement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_energyScanSpeed;
        break;
      }

      // optional float energyScanSpeed = 13 [default = 5];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyScanSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energyscanspeed_)));
          set_has_energyscanspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_startDeviation;
        break;
      }

      // optional float startDeviation = 14 [default = 180];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startDeviation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startdeviation_)));
          set_has_startdeviation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_energyTrackTime;
        break;
      }

      // optional float energyTrackTime = 15 [default = 500];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyTrackTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energytracktime_)));
          set_has_energytracktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_useGps;
        break;
      }

      // optional bool useGps = 16 [default = false];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useGps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usegps_)));
          set_has_usegps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_scanScrypt;
        break;
      }

      // optional string scanScrypt = 17 [default = "NONE"];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scanScrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scanscrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scanscrypt().data(), this->scanscrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_gpsServer;
        break;
      }

      // optional string gpsServer = 18 [default = "OFF"];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpsServer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpsserver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpsserver().data(), this->gpsserver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_gpsUpdate;
        break;
      }

      // optional string gpsUpdate = 19 [default = "ON"];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpsUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpsupdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpsupdate().data(), this->gpsupdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_azCloseEnough;
        break;
      }

      // optional float azCloseEnough = 20 [default = 0.5];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azCloseEnough:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azcloseenough_)));
          set_has_azcloseenough();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_elDisabled;
        break;
      }

      // optional bool elDisabled = 21 [default = false];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elDisabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eldisabled_)));
          set_has_eldisabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_slewEnabled;
        break;
      }

      // optional bool slewEnabled = 22 [default = false];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slewEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &slewenabled_)));
          set_has_slewenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RotorHGIOConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "HGIO_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional float AzOffset = 4;
  if (has_azoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->azoffset(), output);
  }

  // optional bool hardLimit = 5 [default = false];
  if (has_hardlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hardlimit(), output);
  }

  // optional float minScanAngle = 6;
  if (has_minscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->minscanangle(), output);
  }

  // optional float maxScanAngle = 7;
  if (has_maxscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->maxscanangle(), output);
  }

  // optional float minElevation = 8;
  if (has_minelevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->minelevation(), output);
  }

  // optional float maxElevation = 9;
  if (has_maxelevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->maxelevation(), output);
  }

  // optional float scanElevation = 10;
  if (has_scanelevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->scanelevation(), output);
  }

  // optional float multicastRate = 11;
  if (has_multicastrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->multicastrate(), output);
  }

  // optional float pointHoldIncrement = 12;
  if (has_pointholdincrement()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->pointholdincrement(), output);
  }

  // optional float energyScanSpeed = 13 [default = 5];
  if (has_energyscanspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->energyscanspeed(), output);
  }

  // optional float startDeviation = 14 [default = 180];
  if (has_startdeviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->startdeviation(), output);
  }

  // optional float energyTrackTime = 15 [default = 500];
  if (has_energytracktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->energytracktime(), output);
  }

  // optional bool useGps = 16 [default = false];
  if (has_usegps()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->usegps(), output);
  }

  // optional string scanScrypt = 17 [default = "NONE"];
  if (has_scanscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scanscrypt().data(), this->scanscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->scanscrypt(), output);
  }

  // optional string gpsServer = 18 [default = "OFF"];
  if (has_gpsserver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsserver().data(), this->gpsserver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->gpsserver(), output);
  }

  // optional string gpsUpdate = 19 [default = "ON"];
  if (has_gpsupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsupdate().data(), this->gpsupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->gpsupdate(), output);
  }

  // optional float azCloseEnough = 20 [default = 0.5];
  if (has_azcloseenough()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->azcloseenough(), output);
  }

  // optional bool elDisabled = 21 [default = false];
  if (has_eldisabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->eldisabled(), output);
  }

  // optional bool slewEnabled = 22 [default = false];
  if (has_slewenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->slewenabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RotorHGIOConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "HGIO_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional float AzOffset = 4;
  if (has_azoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->azoffset(), target);
  }

  // optional bool hardLimit = 5 [default = false];
  if (has_hardlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hardlimit(), target);
  }

  // optional float minScanAngle = 6;
  if (has_minscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->minscanangle(), target);
  }

  // optional float maxScanAngle = 7;
  if (has_maxscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->maxscanangle(), target);
  }

  // optional float minElevation = 8;
  if (has_minelevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->minelevation(), target);
  }

  // optional float maxElevation = 9;
  if (has_maxelevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->maxelevation(), target);
  }

  // optional float scanElevation = 10;
  if (has_scanelevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->scanelevation(), target);
  }

  // optional float multicastRate = 11;
  if (has_multicastrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->multicastrate(), target);
  }

  // optional float pointHoldIncrement = 12;
  if (has_pointholdincrement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->pointholdincrement(), target);
  }

  // optional float energyScanSpeed = 13 [default = 5];
  if (has_energyscanspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->energyscanspeed(), target);
  }

  // optional float startDeviation = 14 [default = 180];
  if (has_startdeviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->startdeviation(), target);
  }

  // optional float energyTrackTime = 15 [default = 500];
  if (has_energytracktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->energytracktime(), target);
  }

  // optional bool useGps = 16 [default = false];
  if (has_usegps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->usegps(), target);
  }

  // optional string scanScrypt = 17 [default = "NONE"];
  if (has_scanscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scanscrypt().data(), this->scanscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->scanscrypt(), target);
  }

  // optional string gpsServer = 18 [default = "OFF"];
  if (has_gpsserver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsserver().data(), this->gpsserver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->gpsserver(), target);
  }

  // optional string gpsUpdate = 19 [default = "ON"];
  if (has_gpsupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsupdate().data(), this->gpsupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->gpsupdate(), target);
  }

  // optional float azCloseEnough = 20 [default = 0.5];
  if (has_azcloseenough()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->azcloseenough(), target);
  }

  // optional bool elDisabled = 21 [default = false];
  if (has_eldisabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->eldisabled(), target);
  }

  // optional bool slewEnabled = 22 [default = false];
  if (has_slewenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->slewenabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RotorHGIOConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "HGIO_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string IP = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional float AzOffset = 4;
    if (has_azoffset()) {
      total_size += 1 + 4;
    }

    // optional bool hardLimit = 5 [default = false];
    if (has_hardlimit()) {
      total_size += 1 + 1;
    }

    // optional float minScanAngle = 6;
    if (has_minscanangle()) {
      total_size += 1 + 4;
    }

    // optional float maxScanAngle = 7;
    if (has_maxscanangle()) {
      total_size += 1 + 4;
    }

    // optional float minElevation = 8;
    if (has_minelevation()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float maxElevation = 9;
    if (has_maxelevation()) {
      total_size += 1 + 4;
    }

    // optional float scanElevation = 10;
    if (has_scanelevation()) {
      total_size += 1 + 4;
    }

    // optional float multicastRate = 11;
    if (has_multicastrate()) {
      total_size += 1 + 4;
    }

    // optional float pointHoldIncrement = 12;
    if (has_pointholdincrement()) {
      total_size += 1 + 4;
    }

    // optional float energyScanSpeed = 13 [default = 5];
    if (has_energyscanspeed()) {
      total_size += 1 + 4;
    }

    // optional float startDeviation = 14 [default = 180];
    if (has_startdeviation()) {
      total_size += 1 + 4;
    }

    // optional float energyTrackTime = 15 [default = 500];
    if (has_energytracktime()) {
      total_size += 1 + 4;
    }

    // optional bool useGps = 16 [default = false];
    if (has_usegps()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string scanScrypt = 17 [default = "NONE"];
    if (has_scanscrypt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scanscrypt());
    }

    // optional string gpsServer = 18 [default = "OFF"];
    if (has_gpsserver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpsserver());
    }

    // optional string gpsUpdate = 19 [default = "ON"];
    if (has_gpsupdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpsupdate());
    }

    // optional float azCloseEnough = 20 [default = 0.5];
    if (has_azcloseenough()) {
      total_size += 2 + 4;
    }

    // optional bool elDisabled = 21 [default = false];
    if (has_eldisabled()) {
      total_size += 2 + 1;
    }

    // optional bool slewEnabled = 22 [default = false];
    if (has_slewenabled()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotorHGIOConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotorHGIOConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotorHGIOConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotorHGIOConfig::MergeFrom(const RotorHGIOConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_azoffset()) {
      set_azoffset(from.azoffset());
    }
    if (from.has_hardlimit()) {
      set_hardlimit(from.hardlimit());
    }
    if (from.has_minscanangle()) {
      set_minscanangle(from.minscanangle());
    }
    if (from.has_maxscanangle()) {
      set_maxscanangle(from.maxscanangle());
    }
    if (from.has_minelevation()) {
      set_minelevation(from.minelevation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxelevation()) {
      set_maxelevation(from.maxelevation());
    }
    if (from.has_scanelevation()) {
      set_scanelevation(from.scanelevation());
    }
    if (from.has_multicastrate()) {
      set_multicastrate(from.multicastrate());
    }
    if (from.has_pointholdincrement()) {
      set_pointholdincrement(from.pointholdincrement());
    }
    if (from.has_energyscanspeed()) {
      set_energyscanspeed(from.energyscanspeed());
    }
    if (from.has_startdeviation()) {
      set_startdeviation(from.startdeviation());
    }
    if (from.has_energytracktime()) {
      set_energytracktime(from.energytracktime());
    }
    if (from.has_usegps()) {
      set_usegps(from.usegps());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_scanscrypt()) {
      set_scanscrypt(from.scanscrypt());
    }
    if (from.has_gpsserver()) {
      set_gpsserver(from.gpsserver());
    }
    if (from.has_gpsupdate()) {
      set_gpsupdate(from.gpsupdate());
    }
    if (from.has_azcloseenough()) {
      set_azcloseenough(from.azcloseenough());
    }
    if (from.has_eldisabled()) {
      set_eldisabled(from.eldisabled());
    }
    if (from.has_slewenabled()) {
      set_slewenabled(from.slewenabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotorHGIOConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotorHGIOConfig::CopyFrom(const RotorHGIOConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotorHGIOConfig::IsInitialized() const {

  return true;
}

void RotorHGIOConfig::Swap(RotorHGIOConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(azoffset_, other->azoffset_);
    std::swap(hardlimit_, other->hardlimit_);
    std::swap(minscanangle_, other->minscanangle_);
    std::swap(maxscanangle_, other->maxscanangle_);
    std::swap(minelevation_, other->minelevation_);
    std::swap(maxelevation_, other->maxelevation_);
    std::swap(scanelevation_, other->scanelevation_);
    std::swap(multicastrate_, other->multicastrate_);
    std::swap(pointholdincrement_, other->pointholdincrement_);
    std::swap(energyscanspeed_, other->energyscanspeed_);
    std::swap(startdeviation_, other->startdeviation_);
    std::swap(energytracktime_, other->energytracktime_);
    std::swap(usegps_, other->usegps_);
    std::swap(scanscrypt_, other->scanscrypt_);
    std::swap(gpsserver_, other->gpsserver_);
    std::swap(gpsupdate_, other->gpsupdate_);
    std::swap(azcloseenough_, other->azcloseenough_);
    std::swap(eldisabled_, other->eldisabled_);
    std::swap(slewenabled_, other->slewenabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotorHGIOConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotorHGIOConfig_descriptor_;
  metadata.reflection = RotorHGIOConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RotorESAConfig::_default_msgname_ = NULL;
::std::string* RotorESAConfig::_default_scanscrypt_ = NULL;
#ifndef _MSC_VER
const int RotorESAConfig::kMsgNameFieldNumber;
const int RotorESAConfig::kIPFieldNumber;
const int RotorESAConfig::kPortFieldNumber;
const int RotorESAConfig::kAzOffsetFieldNumber;
const int RotorESAConfig::kHardLimitFieldNumber;
const int RotorESAConfig::kMinScanAngleFieldNumber;
const int RotorESAConfig::kMaxScanAngleFieldNumber;
const int RotorESAConfig::kPointHoldIncrementFieldNumber;
const int RotorESAConfig::kEnergyScanSpeedFieldNumber;
const int RotorESAConfig::kStartDeviationFieldNumber;
const int RotorESAConfig::kEnergyTrackTimeFieldNumber;
const int RotorESAConfig::kScanScryptFieldNumber;
const int RotorESAConfig::kAzCloseEnoughFieldNumber;
const int RotorESAConfig::kElDisabledFieldNumber;
#endif  // !_MSC_VER

RotorESAConfig::RotorESAConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RotorESAConfig::InitAsDefaultInstance() {
}

RotorESAConfig::RotorESAConfig(const RotorESAConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RotorESAConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  azoffset_ = 0;
  hardlimit_ = false;
  minscanangle_ = 0;
  maxscanangle_ = 0;
  pointholdincrement_ = 0;
  energyscanspeed_ = 4;
  startdeviation_ = 180;
  energytracktime_ = 20;
  scanscrypt_ = const_cast< ::std::string*>(_default_scanscrypt_);
  azcloseenough_ = 0.5f;
  eldisabled_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotorESAConfig::~RotorESAConfig() {
  SharedDtor();
}

void RotorESAConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (scanscrypt_ != _default_scanscrypt_) {
    delete scanscrypt_;
  }
  if (this != default_instance_) {
  }
}

void RotorESAConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotorESAConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotorESAConfig_descriptor_;
}

const RotorESAConfig& RotorESAConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

RotorESAConfig* RotorESAConfig::default_instance_ = NULL;

RotorESAConfig* RotorESAConfig::New() const {
  return new RotorESAConfig;
}

void RotorESAConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    azoffset_ = 0;
    hardlimit_ = false;
    minscanangle_ = 0;
    maxscanangle_ = 0;
    pointholdincrement_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    energyscanspeed_ = 4;
    startdeviation_ = 180;
    energytracktime_ = 20;
    if (has_scanscrypt()) {
      if (scanscrypt_ != _default_scanscrypt_) {
        scanscrypt_->assign(*_default_scanscrypt_);
      }
    }
    azcloseenough_ = 0.5f;
    eldisabled_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotorESAConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ROTOR_ESA_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IP;
        break;
      }

      // optional string IP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_AzOffset;
        break;
      }

      // optional float AzOffset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AzOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azoffset_)));
          set_has_azoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hardLimit;
        break;
      }

      // optional bool hardLimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hardLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hardlimit_)));
          set_has_hardlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_minScanAngle;
        break;
      }

      // optional float minScanAngle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minscanangle_)));
          set_has_minscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_maxScanAngle;
        break;
      }

      // optional float maxScanAngle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxScanAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxscanangle_)));
          set_has_maxscanangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_pointHoldIncrement;
        break;
      }

      // optional float pointHoldIncrement = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pointHoldIncrement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pointholdincrement_)));
          set_has_pointholdincrement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_energyScanSpeed;
        break;
      }

      // optional float energyScanSpeed = 9 [default = 4];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyScanSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energyscanspeed_)));
          set_has_energyscanspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_startDeviation;
        break;
      }

      // optional float startDeviation = 10 [default = 180];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startDeviation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startdeviation_)));
          set_has_startdeviation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_energyTrackTime;
        break;
      }

      // optional float energyTrackTime = 11 [default = 20];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyTrackTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energytracktime_)));
          set_has_energytracktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_scanScrypt;
        break;
      }

      // optional string scanScrypt = 12 [default = "NONE"];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scanScrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scanscrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scanscrypt().data(), this->scanscrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_azCloseEnough;
        break;
      }

      // optional float azCloseEnough = 13 [default = 0.5];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azCloseEnough:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azcloseenough_)));
          set_has_azcloseenough();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_elDisabled;
        break;
      }

      // optional bool elDisabled = 14 [default = true];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elDisabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eldisabled_)));
          set_has_eldisabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RotorESAConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ROTOR_ESA_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional float AzOffset = 4;
  if (has_azoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->azoffset(), output);
  }

  // optional bool hardLimit = 5;
  if (has_hardlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hardlimit(), output);
  }

  // optional float minScanAngle = 6;
  if (has_minscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->minscanangle(), output);
  }

  // optional float maxScanAngle = 7;
  if (has_maxscanangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->maxscanangle(), output);
  }

  // optional float pointHoldIncrement = 8;
  if (has_pointholdincrement()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->pointholdincrement(), output);
  }

  // optional float energyScanSpeed = 9 [default = 4];
  if (has_energyscanspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->energyscanspeed(), output);
  }

  // optional float startDeviation = 10 [default = 180];
  if (has_startdeviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->startdeviation(), output);
  }

  // optional float energyTrackTime = 11 [default = 20];
  if (has_energytracktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->energytracktime(), output);
  }

  // optional string scanScrypt = 12 [default = "NONE"];
  if (has_scanscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scanscrypt().data(), this->scanscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->scanscrypt(), output);
  }

  // optional float azCloseEnough = 13 [default = 0.5];
  if (has_azcloseenough()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->azcloseenough(), output);
  }

  // optional bool elDisabled = 14 [default = true];
  if (has_eldisabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->eldisabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RotorESAConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ROTOR_ESA_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional float AzOffset = 4;
  if (has_azoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->azoffset(), target);
  }

  // optional bool hardLimit = 5;
  if (has_hardlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hardlimit(), target);
  }

  // optional float minScanAngle = 6;
  if (has_minscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->minscanangle(), target);
  }

  // optional float maxScanAngle = 7;
  if (has_maxscanangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->maxscanangle(), target);
  }

  // optional float pointHoldIncrement = 8;
  if (has_pointholdincrement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->pointholdincrement(), target);
  }

  // optional float energyScanSpeed = 9 [default = 4];
  if (has_energyscanspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->energyscanspeed(), target);
  }

  // optional float startDeviation = 10 [default = 180];
  if (has_startdeviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->startdeviation(), target);
  }

  // optional float energyTrackTime = 11 [default = 20];
  if (has_energytracktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->energytracktime(), target);
  }

  // optional string scanScrypt = 12 [default = "NONE"];
  if (has_scanscrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scanscrypt().data(), this->scanscrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->scanscrypt(), target);
  }

  // optional float azCloseEnough = 13 [default = 0.5];
  if (has_azcloseenough()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->azcloseenough(), target);
  }

  // optional bool elDisabled = 14 [default = true];
  if (has_eldisabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->eldisabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RotorESAConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ROTOR_ESA_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string IP = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional float AzOffset = 4;
    if (has_azoffset()) {
      total_size += 1 + 4;
    }

    // optional bool hardLimit = 5;
    if (has_hardlimit()) {
      total_size += 1 + 1;
    }

    // optional float minScanAngle = 6;
    if (has_minscanangle()) {
      total_size += 1 + 4;
    }

    // optional float maxScanAngle = 7;
    if (has_maxscanangle()) {
      total_size += 1 + 4;
    }

    // optional float pointHoldIncrement = 8;
    if (has_pointholdincrement()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float energyScanSpeed = 9 [default = 4];
    if (has_energyscanspeed()) {
      total_size += 1 + 4;
    }

    // optional float startDeviation = 10 [default = 180];
    if (has_startdeviation()) {
      total_size += 1 + 4;
    }

    // optional float energyTrackTime = 11 [default = 20];
    if (has_energytracktime()) {
      total_size += 1 + 4;
    }

    // optional string scanScrypt = 12 [default = "NONE"];
    if (has_scanscrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scanscrypt());
    }

    // optional float azCloseEnough = 13 [default = 0.5];
    if (has_azcloseenough()) {
      total_size += 1 + 4;
    }

    // optional bool elDisabled = 14 [default = true];
    if (has_eldisabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotorESAConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotorESAConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotorESAConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotorESAConfig::MergeFrom(const RotorESAConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_azoffset()) {
      set_azoffset(from.azoffset());
    }
    if (from.has_hardlimit()) {
      set_hardlimit(from.hardlimit());
    }
    if (from.has_minscanangle()) {
      set_minscanangle(from.minscanangle());
    }
    if (from.has_maxscanangle()) {
      set_maxscanangle(from.maxscanangle());
    }
    if (from.has_pointholdincrement()) {
      set_pointholdincrement(from.pointholdincrement());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_energyscanspeed()) {
      set_energyscanspeed(from.energyscanspeed());
    }
    if (from.has_startdeviation()) {
      set_startdeviation(from.startdeviation());
    }
    if (from.has_energytracktime()) {
      set_energytracktime(from.energytracktime());
    }
    if (from.has_scanscrypt()) {
      set_scanscrypt(from.scanscrypt());
    }
    if (from.has_azcloseenough()) {
      set_azcloseenough(from.azcloseenough());
    }
    if (from.has_eldisabled()) {
      set_eldisabled(from.eldisabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotorESAConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotorESAConfig::CopyFrom(const RotorESAConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotorESAConfig::IsInitialized() const {

  return true;
}

void RotorESAConfig::Swap(RotorESAConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(azoffset_, other->azoffset_);
    std::swap(hardlimit_, other->hardlimit_);
    std::swap(minscanangle_, other->minscanangle_);
    std::swap(maxscanangle_, other->maxscanangle_);
    std::swap(pointholdincrement_, other->pointholdincrement_);
    std::swap(energyscanspeed_, other->energyscanspeed_);
    std::swap(startdeviation_, other->startdeviation_);
    std::swap(energytracktime_, other->energytracktime_);
    std::swap(scanscrypt_, other->scanscrypt_);
    std::swap(azcloseenough_, other->azcloseenough_);
    std::swap(eldisabled_, other->eldisabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotorESAConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotorESAConfig_descriptor_;
  metadata.reflection = RotorESAConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* DSSwitchConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int DSSwitchConfig::kMsgNameFieldNumber;
const int DSSwitchConfig::kBaseURLFieldNumber;
const int DSSwitchConfig::kInputPathFieldNumber;
const int DSSwitchConfig::kOutputPathFieldNumber;
const int DSSwitchConfig::kUserNameFieldNumber;
const int DSSwitchConfig::kPasswordFieldNumber;
const int DSSwitchConfig::kSleepTimeFieldNumber;
const int DSSwitchConfig::kSlaveTimeoutFieldNumber;
const int DSSwitchConfig::kEnergyScanSecFieldNumber;
const int DSSwitchConfig::kEnergyTrackTimeFieldNumber;
#endif  // !_MSC_VER

DSSwitchConfig::DSSwitchConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DSSwitchConfig::InitAsDefaultInstance() {
}

DSSwitchConfig::DSSwitchConfig(const DSSwitchConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DSSwitchConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  baseurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inputpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  outputpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sleeptime_ = 0;
  slavetimeout_ = 180;
  energyscansec_ = 10;
  energytracktime_ = 300;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DSSwitchConfig::~DSSwitchConfig() {
  SharedDtor();
}

void DSSwitchConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (baseurl_ != &::google::protobuf::internal::kEmptyString) {
    delete baseurl_;
  }
  if (inputpath_ != &::google::protobuf::internal::kEmptyString) {
    delete inputpath_;
  }
  if (outputpath_ != &::google::protobuf::internal::kEmptyString) {
    delete outputpath_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void DSSwitchConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DSSwitchConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DSSwitchConfig_descriptor_;
}

const DSSwitchConfig& DSSwitchConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

DSSwitchConfig* DSSwitchConfig::default_instance_ = NULL;

DSSwitchConfig* DSSwitchConfig::New() const {
  return new DSSwitchConfig;
}

void DSSwitchConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_baseurl()) {
      if (baseurl_ != &::google::protobuf::internal::kEmptyString) {
        baseurl_->clear();
      }
    }
    if (has_inputpath()) {
      if (inputpath_ != &::google::protobuf::internal::kEmptyString) {
        inputpath_->clear();
      }
    }
    if (has_outputpath()) {
      if (outputpath_ != &::google::protobuf::internal::kEmptyString) {
        outputpath_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    sleeptime_ = 0;
    slavetimeout_ = 180;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    energyscansec_ = 10;
    energytracktime_ = 300;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DSSwitchConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DSSWITCH_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_baseURL;
        break;
      }

      // optional string baseURL = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseURL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_baseurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->baseurl().data(), this->baseurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_inputPath;
        break;
      }

      // optional string inputPath = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inputPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inputpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inputpath().data(), this->inputpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_outputPath;
        break;
      }

      // optional string outputPath = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outputPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outputpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->outputpath().data(), this->outputpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userName;
        break;
      }

      // optional string userName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_password;
        break;
      }

      // optional string password = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_sleepTime;
        break;
      }

      // optional float sleepTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sleepTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sleeptime_)));
          set_has_sleeptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_slaveTimeout;
        break;
      }

      // optional int32 slaveTimeout = 8 [default = 180];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slaveTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slavetimeout_)));
          set_has_slavetimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_energyScanSec;
        break;
      }

      // optional float energyScanSec = 9 [default = 10];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyScanSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energyscansec_)));
          set_has_energyscansec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_energyTrackTime;
        break;
      }

      // optional float energyTrackTime = 10 [default = 300];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyTrackTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energytracktime_)));
          set_has_energytracktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DSSwitchConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DSSWITCH_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string baseURL = 2;
  if (has_baseurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->baseurl().data(), this->baseurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->baseurl(), output);
  }

  // optional string inputPath = 3;
  if (has_inputpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputpath().data(), this->inputpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->inputpath(), output);
  }

  // optional string outputPath = 4;
  if (has_outputpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outputpath().data(), this->outputpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->outputpath(), output);
  }

  // optional string userName = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->username(), output);
  }

  // optional string password = 6;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->password(), output);
  }

  // optional float sleepTime = 7;
  if (has_sleeptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->sleeptime(), output);
  }

  // optional int32 slaveTimeout = 8 [default = 180];
  if (has_slavetimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->slavetimeout(), output);
  }

  // optional float energyScanSec = 9 [default = 10];
  if (has_energyscansec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->energyscansec(), output);
  }

  // optional float energyTrackTime = 10 [default = 300];
  if (has_energytracktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->energytracktime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DSSwitchConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DSSWITCH_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string baseURL = 2;
  if (has_baseurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->baseurl().data(), this->baseurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->baseurl(), target);
  }

  // optional string inputPath = 3;
  if (has_inputpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputpath().data(), this->inputpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->inputpath(), target);
  }

  // optional string outputPath = 4;
  if (has_outputpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outputpath().data(), this->outputpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->outputpath(), target);
  }

  // optional string userName = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->username(), target);
  }

  // optional string password = 6;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->password(), target);
  }

  // optional float sleepTime = 7;
  if (has_sleeptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->sleeptime(), target);
  }

  // optional int32 slaveTimeout = 8 [default = 180];
  if (has_slavetimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->slavetimeout(), target);
  }

  // optional float energyScanSec = 9 [default = 10];
  if (has_energyscansec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->energyscansec(), target);
  }

  // optional float energyTrackTime = 10 [default = 300];
  if (has_energytracktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->energytracktime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DSSwitchConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DSSWITCH_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string baseURL = 2;
    if (has_baseurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->baseurl());
    }

    // optional string inputPath = 3;
    if (has_inputpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inputpath());
    }

    // optional string outputPath = 4;
    if (has_outputpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outputpath());
    }

    // optional string userName = 5;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string password = 6;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional float sleepTime = 7;
    if (has_sleeptime()) {
      total_size += 1 + 4;
    }

    // optional int32 slaveTimeout = 8 [default = 180];
    if (has_slavetimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slavetimeout());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float energyScanSec = 9 [default = 10];
    if (has_energyscansec()) {
      total_size += 1 + 4;
    }

    // optional float energyTrackTime = 10 [default = 300];
    if (has_energytracktime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DSSwitchConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DSSwitchConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DSSwitchConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DSSwitchConfig::MergeFrom(const DSSwitchConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_baseurl()) {
      set_baseurl(from.baseurl());
    }
    if (from.has_inputpath()) {
      set_inputpath(from.inputpath());
    }
    if (from.has_outputpath()) {
      set_outputpath(from.outputpath());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_sleeptime()) {
      set_sleeptime(from.sleeptime());
    }
    if (from.has_slavetimeout()) {
      set_slavetimeout(from.slavetimeout());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_energyscansec()) {
      set_energyscansec(from.energyscansec());
    }
    if (from.has_energytracktime()) {
      set_energytracktime(from.energytracktime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DSSwitchConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DSSwitchConfig::CopyFrom(const DSSwitchConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSSwitchConfig::IsInitialized() const {

  return true;
}

void DSSwitchConfig::Swap(DSSwitchConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(baseurl_, other->baseurl_);
    std::swap(inputpath_, other->inputpath_);
    std::swap(outputpath_, other->outputpath_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(sleeptime_, other->sleeptime_);
    std::swap(slavetimeout_, other->slavetimeout_);
    std::swap(energyscansec_, other->energyscansec_);
    std::swap(energytracktime_, other->energytracktime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DSSwitchConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DSSwitchConfig_descriptor_;
  metadata.reflection = DSSwitchConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* DummyConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int DummyConfig::kMsgNameFieldNumber;
const int DummyConfig::kMessageFieldNumber;
#endif  // !_MSC_VER

DummyConfig::DummyConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DummyConfig::InitAsDefaultInstance() {
}

DummyConfig::DummyConfig(const DummyConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DummyConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DummyConfig::~DummyConfig() {
  SharedDtor();
}

void DummyConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void DummyConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DummyConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DummyConfig_descriptor_;
}

const DummyConfig& DummyConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

DummyConfig* DummyConfig::default_instance_ = NULL;

DummyConfig* DummyConfig::New() const {
  return new DummyConfig;
}

void DummyConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DummyConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DummyConfig"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DummyConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DummyConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DummyConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DummyConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DummyConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DummyConfig"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DummyConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DummyConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DummyConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DummyConfig::MergeFrom(const DummyConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DummyConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyConfig::CopyFrom(const DummyConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyConfig::IsInitialized() const {

  return true;
}

void DummyConfig::Swap(DummyConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DummyConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DummyConfig_descriptor_;
  metadata.reflection = DummyConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* MMSXTConfig::_default_msgname_ = NULL;
::std::string* MMSXTConfig::_default_uniqtxid_ = NULL;
#ifndef _MSC_VER
const int MMSXTConfig::kMsgNameFieldNumber;
const int MMSXTConfig::kTransmitterFieldNumber;
const int MMSXTConfig::kMMSXTCtrlIpFieldNumber;
const int MMSXTConfig::kControlPortFieldNumber;
const int MMSXTConfig::kMMSXTDataIpFieldNumber;
const int MMSXTConfig::kDataPortFieldNumber;
const int MMSXTConfig::kUniqTXIDFieldNumber;
const int MMSXTConfig::kTxcuPortFieldNumber;
const int MMSXTConfig::kTxcuIPFieldNumber;
#endif  // !_MSC_VER

MMSXTConfig::MMSXTConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MMSXTConfig::InitAsDefaultInstance() {
}

MMSXTConfig::MMSXTConfig(const MMSXTConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MMSXTConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  transmitter_ = 0;
  mmsxtctrlip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  controlport_ = 23;
  mmsxtdataip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dataport_ = 49300;
  uniqtxid_ = const_cast< ::std::string*>(_default_uniqtxid_);
  txcuport_ = -1;
  txcuip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MMSXTConfig::~MMSXTConfig() {
  SharedDtor();
}

void MMSXTConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (mmsxtctrlip_ != &::google::protobuf::internal::kEmptyString) {
    delete mmsxtctrlip_;
  }
  if (mmsxtdataip_ != &::google::protobuf::internal::kEmptyString) {
    delete mmsxtdataip_;
  }
  if (uniqtxid_ != _default_uniqtxid_) {
    delete uniqtxid_;
  }
  if (txcuip_ != &::google::protobuf::internal::kEmptyString) {
    delete txcuip_;
  }
  if (this != default_instance_) {
  }
}

void MMSXTConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MMSXTConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MMSXTConfig_descriptor_;
}

const MMSXTConfig& MMSXTConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

MMSXTConfig* MMSXTConfig::default_instance_ = NULL;

MMSXTConfig* MMSXTConfig::New() const {
  return new MMSXTConfig;
}

void MMSXTConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    transmitter_ = 0;
    if (has_mmsxtctrlip()) {
      if (mmsxtctrlip_ != &::google::protobuf::internal::kEmptyString) {
        mmsxtctrlip_->clear();
      }
    }
    controlport_ = 23;
    if (has_mmsxtdataip()) {
      if (mmsxtdataip_ != &::google::protobuf::internal::kEmptyString) {
        mmsxtdataip_->clear();
      }
    }
    dataport_ = 49300;
    if (has_uniqtxid()) {
      if (uniqtxid_ != _default_uniqtxid_) {
        uniqtxid_->assign(*_default_uniqtxid_);
      }
    }
    txcuport_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_txcuip()) {
      if (txcuip_ != &::google::protobuf::internal::kEmptyString) {
        txcuip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MMSXTConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "MMSXT_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_transmitter;
        break;
      }

      // optional int32 transmitter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transmitter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transmitter_)));
          set_has_transmitter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MMSXTCtrlIp;
        break;
      }

      // optional string MMSXTCtrlIp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MMSXTCtrlIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mmsxtctrlip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mmsxtctrlip().data(), this->mmsxtctrlip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_controlPort;
        break;
      }

      // optional int32 controlPort = 4 [default = 23];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controlPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controlport_)));
          set_has_controlport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_MMSXTDataIp;
        break;
      }

      // optional string MMSXTDataIp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MMSXTDataIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mmsxtdataip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mmsxtdataip().data(), this->mmsxtdataip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dataPort;
        break;
      }

      // optional int32 dataPort = 6 [default = 49300];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dataport_)));
          set_has_dataport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_uniqTXID;
        break;
      }

      // optional string uniqTXID = 7 [default = "999"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqTXID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqtxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqtxid().data(), this->uniqtxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_txcuPort;
        break;
      }

      // optional int32 txcuPort = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txcuPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &txcuport_)));
          set_has_txcuport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_txcuIP;
        break;
      }

      // optional string txcuIP = 9 [default = ""];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_txcuIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txcuip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->txcuip().data(), this->txcuip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MMSXTConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "MMSXT_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 transmitter = 2;
  if (has_transmitter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->transmitter(), output);
  }

  // optional string MMSXTCtrlIp = 3;
  if (has_mmsxtctrlip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mmsxtctrlip().data(), this->mmsxtctrlip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mmsxtctrlip(), output);
  }

  // optional int32 controlPort = 4 [default = 23];
  if (has_controlport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->controlport(), output);
  }

  // optional string MMSXTDataIp = 5;
  if (has_mmsxtdataip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mmsxtdataip().data(), this->mmsxtdataip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->mmsxtdataip(), output);
  }

  // optional int32 dataPort = 6 [default = 49300];
  if (has_dataport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dataport(), output);
  }

  // optional string uniqTXID = 7 [default = "999"];
  if (has_uniqtxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqtxid().data(), this->uniqtxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->uniqtxid(), output);
  }

  // optional int32 txcuPort = 8 [default = -1];
  if (has_txcuport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->txcuport(), output);
  }

  // optional string txcuIP = 9 [default = ""];
  if (has_txcuip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->txcuip().data(), this->txcuip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->txcuip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MMSXTConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "MMSXT_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 transmitter = 2;
  if (has_transmitter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->transmitter(), target);
  }

  // optional string MMSXTCtrlIp = 3;
  if (has_mmsxtctrlip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mmsxtctrlip().data(), this->mmsxtctrlip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mmsxtctrlip(), target);
  }

  // optional int32 controlPort = 4 [default = 23];
  if (has_controlport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->controlport(), target);
  }

  // optional string MMSXTDataIp = 5;
  if (has_mmsxtdataip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mmsxtdataip().data(), this->mmsxtdataip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mmsxtdataip(), target);
  }

  // optional int32 dataPort = 6 [default = 49300];
  if (has_dataport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dataport(), target);
  }

  // optional string uniqTXID = 7 [default = "999"];
  if (has_uniqtxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqtxid().data(), this->uniqtxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->uniqtxid(), target);
  }

  // optional int32 txcuPort = 8 [default = -1];
  if (has_txcuport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->txcuport(), target);
  }

  // optional string txcuIP = 9 [default = ""];
  if (has_txcuip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->txcuip().data(), this->txcuip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->txcuip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MMSXTConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "MMSXT_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 transmitter = 2;
    if (has_transmitter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transmitter());
    }

    // optional string MMSXTCtrlIp = 3;
    if (has_mmsxtctrlip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mmsxtctrlip());
    }

    // optional int32 controlPort = 4 [default = 23];
    if (has_controlport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controlport());
    }

    // optional string MMSXTDataIp = 5;
    if (has_mmsxtdataip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mmsxtdataip());
    }

    // optional int32 dataPort = 6 [default = 49300];
    if (has_dataport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dataport());
    }

    // optional string uniqTXID = 7 [default = "999"];
    if (has_uniqtxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqtxid());
    }

    // optional int32 txcuPort = 8 [default = -1];
    if (has_txcuport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->txcuport());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string txcuIP = 9 [default = ""];
    if (has_txcuip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->txcuip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MMSXTConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MMSXTConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MMSXTConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MMSXTConfig::MergeFrom(const MMSXTConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_transmitter()) {
      set_transmitter(from.transmitter());
    }
    if (from.has_mmsxtctrlip()) {
      set_mmsxtctrlip(from.mmsxtctrlip());
    }
    if (from.has_controlport()) {
      set_controlport(from.controlport());
    }
    if (from.has_mmsxtdataip()) {
      set_mmsxtdataip(from.mmsxtdataip());
    }
    if (from.has_dataport()) {
      set_dataport(from.dataport());
    }
    if (from.has_uniqtxid()) {
      set_uniqtxid(from.uniqtxid());
    }
    if (from.has_txcuport()) {
      set_txcuport(from.txcuport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_txcuip()) {
      set_txcuip(from.txcuip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MMSXTConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MMSXTConfig::CopyFrom(const MMSXTConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMSXTConfig::IsInitialized() const {

  return true;
}

void MMSXTConfig::Swap(MMSXTConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(transmitter_, other->transmitter_);
    std::swap(mmsxtctrlip_, other->mmsxtctrlip_);
    std::swap(controlport_, other->controlport_);
    std::swap(mmsxtdataip_, other->mmsxtdataip_);
    std::swap(dataport_, other->dataport_);
    std::swap(uniqtxid_, other->uniqtxid_);
    std::swap(txcuport_, other->txcuport_);
    std::swap(txcuip_, other->txcuip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MMSXTConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MMSXTConfig_descriptor_;
  metadata.reflection = MMSXTConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* AmpConfig::_default_msgname_ = NULL;
::std::string* AmpConfig::_default_ip_ = NULL;
#ifndef _MSC_VER
const int AmpConfig::kMsgNameFieldNumber;
const int AmpConfig::kIPFieldNumber;
const int AmpConfig::kPortFieldNumber;
const int AmpConfig::kHardwareFieldNumber;
const int AmpConfig::kInitAttenFieldNumber;
#endif  // !_MSC_VER

AmpConfig::AmpConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AmpConfig::InitAsDefaultInstance() {
}

AmpConfig::AmpConfig(const AmpConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AmpConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ip_ = const_cast< ::std::string*>(_default_ip_);
  port_ = 4012;
  hardware_ = false;
  init_atten_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AmpConfig::~AmpConfig() {
  SharedDtor();
}

void AmpConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (ip_ != _default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void AmpConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AmpConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AmpConfig_descriptor_;
}

const AmpConfig& AmpConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconResourceMessages_2eproto();
  return *default_instance_;
}

AmpConfig* AmpConfig::default_instance_ = NULL;

AmpConfig* AmpConfig::New() const {
  return new AmpConfig;
}

void AmpConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_ip()) {
      if (ip_ != _default_ip_) {
        ip_->assign(*_default_ip_);
      }
    }
    port_ = 4012;
    hardware_ = false;
    init_atten_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AmpConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "AMP_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IP;
        break;
      }

      // optional string IP = 2 [default = "nportserver"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3 [default = 4012];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hardware;
        break;
      }

      // optional bool hardware = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hardware:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hardware_)));
          set_has_hardware();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_init_atten;
        break;
      }

      // optional int32 init_atten = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_atten:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_atten_)));
          set_has_init_atten();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AmpConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "AMP_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string IP = 2 [default = "nportserver"];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3 [default = 4012];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional bool hardware = 4;
  if (has_hardware()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hardware(), output);
  }

  // optional int32 init_atten = 5;
  if (has_init_atten()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->init_atten(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AmpConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "AMP_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string IP = 2 [default = "nportserver"];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3 [default = 4012];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional bool hardware = 4;
  if (has_hardware()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hardware(), target);
  }

  // optional int32 init_atten = 5;
  if (has_init_atten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->init_atten(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AmpConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "AMP_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string IP = 2 [default = "nportserver"];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3 [default = 4012];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional bool hardware = 4;
    if (has_hardware()) {
      total_size += 1 + 1;
    }

    // optional int32 init_atten = 5;
    if (has_init_atten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_atten());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AmpConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AmpConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AmpConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AmpConfig::MergeFrom(const AmpConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_hardware()) {
      set_hardware(from.hardware());
    }
    if (from.has_init_atten()) {
      set_init_atten(from.init_atten());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AmpConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmpConfig::CopyFrom(const AmpConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmpConfig::IsInitialized() const {

  return true;
}

void AmpConfig::Swap(AmpConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(hardware_, other->hardware_);
    std::swap(init_atten_, other->init_atten_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AmpConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AmpConfig_descriptor_;
  metadata.reflection = AmpConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace falcon_res_msg

// @@protoc_insertion_point(global_scope)
