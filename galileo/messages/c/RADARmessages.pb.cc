// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RADARmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RADARmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rdr_msg {

namespace {

const ::google::protobuf::Descriptor* RadarTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeodeticCoordinates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeodeticCoordinates_reflection_ = NULL;
const ::google::protobuf::Descriptor* VelocityNED_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VelocityNED_reflection_ = NULL;
const ::google::protobuf::Descriptor* Track_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Track_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackEstimate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackEstimate_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarMetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarMetaData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RADARmessages_2eproto() {
  protobuf_AddDesc_RADARmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RADARmessages.proto");
  GOOGLE_CHECK(file != NULL);
  RadarTopic_descriptor_ = file->message_type(0);
  static const int RadarTopic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarTopic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarTopic, radar_data_),
  };
  RadarTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarTopic_descriptor_,
      RadarTopic::default_instance_,
      RadarTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarTopic));
  GeodeticCoordinates_descriptor_ = file->message_type(1);
  static const int GeodeticCoordinates_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeodeticCoordinates, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeodeticCoordinates, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeodeticCoordinates, altitude_),
  };
  GeodeticCoordinates_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeodeticCoordinates_descriptor_,
      GeodeticCoordinates::default_instance_,
      GeodeticCoordinates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeodeticCoordinates, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeodeticCoordinates, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeodeticCoordinates));
  VelocityNED_descriptor_ = file->message_type(2);
  static const int VelocityNED_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelocityNED, vnorth_mps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelocityNED, veast_mps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelocityNED, vdown_mps_),
  };
  VelocityNED_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VelocityNED_descriptor_,
      VelocityNED::default_instance_,
      VelocityNED_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelocityNED, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelocityNED, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VelocityNED));
  Track_descriptor_ = file->message_type(3);
  static const int Track_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, trackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, rcsavg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, speedavg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, rcsmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, rcsmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, speedmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, speedmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, range_),
  };
  Track_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Track_descriptor_,
      Track::default_instance_,
      Track_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Track));
  TrackEstimate_descriptor_ = file->message_type(4);
  static const int TrackEstimate_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackEstimate, agl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackEstimate, gpstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackEstimate, rcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackEstimate, lla_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackEstimate, velned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackEstimate, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackEstimate, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackEstimate, speed_),
  };
  TrackEstimate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackEstimate_descriptor_,
      TrackEstimate::default_instance_,
      TrackEstimate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackEstimate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackEstimate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackEstimate));
  RadarMetaData_descriptor_ = file->message_type(5);
  static const int RadarMetaData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarMetaData, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarMetaData, track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarMetaData, trackest_),
  };
  RadarMetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarMetaData_descriptor_,
      RadarMetaData::default_instance_,
      RadarMetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarMetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarMetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarMetaData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RADARmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarTopic_descriptor_, &RadarTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeodeticCoordinates_descriptor_, &GeodeticCoordinates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VelocityNED_descriptor_, &VelocityNED::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Track_descriptor_, &Track::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackEstimate_descriptor_, &TrackEstimate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarMetaData_descriptor_, &RadarMetaData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RADARmessages_2eproto() {
  delete RadarTopic::default_instance_;
  delete RadarTopic_reflection_;
  delete GeodeticCoordinates::default_instance_;
  delete GeodeticCoordinates_reflection_;
  delete VelocityNED::default_instance_;
  delete VelocityNED_reflection_;
  delete Track::default_instance_;
  delete Track_reflection_;
  delete TrackEstimate::default_instance_;
  delete TrackEstimate_reflection_;
  delete RadarMetaData::default_instance_;
  delete RadarMetaData_reflection_;
  delete RadarMetaData::_default_msgname_;
}

void protobuf_AddDesc_RADARmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::service_infrastructure::protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023RADARmessages.proto\022\007rdr_msg\032!ServiceI"
    "nfrastructureCommon.proto\"h\n\nRadarTopic\022"
    ".\n\006header\030d \001(\0132\036.service_infrastructure"
    ".Header\022*\n\nradar_data\030\001 \001(\0132\026.rdr_msg.Ra"
    "darMetaData\"L\n\023GeodeticCoordinates\022\020\n\010la"
    "titude\030\001 \001(\002\022\021\n\tlongitude\030\002 \001(\002\022\020\n\010altit"
    "ude\030\003 \001(\002\"G\n\013VelocityNED\022\022\n\nvnorth_mps\030\001"
    " \001(\002\022\021\n\tveast_mps\030\002 \001(\002\022\021\n\tvdown_mps\030\003 \001"
    "(\002\"\261\001\n\005Track\022\017\n\007trackId\030\001 \001(\003\022\016\n\006rcsAvg\030"
    "\002 \001(\002\022\020\n\010speedAvg\030\003 \001(\002\022\016\n\006rcsMin\030\004 \001(\002\022"
    "\016\n\006rcsMax\030\005 \001(\002\022\020\n\010speedMin\030\006 \001(\002\022\020\n\010spe"
    "edMax\030\007 \001(\002\022\020\n\010duration\030\010 \001(\002\022\020\n\010isActiv"
    "e\030\t \001(\003\022\r\n\005range\030\n \001(\002\"\267\001\n\rTrackEstimate"
    "\022\013\n\003agl\030\001 \001(\002\022\017\n\007gpsTime\030\002 \001(\003\022\013\n\003rcs\030\003 "
    "\001(\002\022)\n\003lla\030\004 \001(\0132\034.rdr_msg.GeodeticCoord"
    "inates\022$\n\006velNED\030\005 \001(\0132\024.rdr_msg.Velocit"
    "yNED\022\017\n\007heading\030\006 \001(\002\022\n\n\002ts\030\007 \001(\003\022\r\n\005spe"
    "ed\030\010 \001(\002\"u\n\rRadarMetaData\022\033\n\007msgName\030\001 \001"
    "(\t:\nRADAR_DATA\022\035\n\005track\030\002 \001(\0132\016.rdr_msg."
    "Track\022(\n\010trackEst\030\003 \001(\0132\026.rdr_msg.TrackE"
    "stimate", 807);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RADARmessages.proto", &protobuf_RegisterTypes);
  RadarTopic::default_instance_ = new RadarTopic();
  GeodeticCoordinates::default_instance_ = new GeodeticCoordinates();
  VelocityNED::default_instance_ = new VelocityNED();
  Track::default_instance_ = new Track();
  TrackEstimate::default_instance_ = new TrackEstimate();
  RadarMetaData::_default_msgname_ =
      new ::std::string("RADAR_DATA", 10);
  RadarMetaData::default_instance_ = new RadarMetaData();
  RadarTopic::default_instance_->InitAsDefaultInstance();
  GeodeticCoordinates::default_instance_->InitAsDefaultInstance();
  VelocityNED::default_instance_->InitAsDefaultInstance();
  Track::default_instance_->InitAsDefaultInstance();
  TrackEstimate::default_instance_->InitAsDefaultInstance();
  RadarMetaData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RADARmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RADARmessages_2eproto {
  StaticDescriptorInitializer_RADARmessages_2eproto() {
    protobuf_AddDesc_RADARmessages_2eproto();
  }
} static_descriptor_initializer_RADARmessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RadarTopic::kHeaderFieldNumber;
const int RadarTopic::kRadarDataFieldNumber;
#endif  // !_MSC_VER

RadarTopic::RadarTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RadarTopic::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  radar_data_ = const_cast< ::rdr_msg::RadarMetaData*>(&::rdr_msg::RadarMetaData::default_instance());
}

RadarTopic::RadarTopic(const RadarTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RadarTopic::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  radar_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarTopic::~RadarTopic() {
  SharedDtor();
}

void RadarTopic::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete radar_data_;
  }
}

void RadarTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarTopic_descriptor_;
}

const RadarTopic& RadarTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RADARmessages_2eproto();
  return *default_instance_;
}

RadarTopic* RadarTopic::default_instance_ = NULL;

RadarTopic* RadarTopic::New() const {
  return new RadarTopic;
}

void RadarTopic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_radar_data()) {
      if (radar_data_ != NULL) radar_data_->::rdr_msg::RadarMetaData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rdr_msg.RadarMetaData radar_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radar_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RadarTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rdr_msg.RadarMetaData radar_data = 1;
  if (has_radar_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->radar_data(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RadarTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rdr_msg.RadarMetaData radar_data = 1;
  if (has_radar_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->radar_data(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RadarTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .rdr_msg.RadarMetaData radar_data = 1;
    if (has_radar_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radar_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarTopic::MergeFrom(const RadarTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_radar_data()) {
      mutable_radar_data()->::rdr_msg::RadarMetaData::MergeFrom(from.radar_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarTopic::CopyFrom(const RadarTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarTopic::IsInitialized() const {

  return true;
}

void RadarTopic::Swap(RadarTopic* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(radar_data_, other->radar_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarTopic_descriptor_;
  metadata.reflection = RadarTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GeodeticCoordinates::kLatitudeFieldNumber;
const int GeodeticCoordinates::kLongitudeFieldNumber;
const int GeodeticCoordinates::kAltitudeFieldNumber;
#endif  // !_MSC_VER

GeodeticCoordinates::GeodeticCoordinates()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeodeticCoordinates::InitAsDefaultInstance() {
}

GeodeticCoordinates::GeodeticCoordinates(const GeodeticCoordinates& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeodeticCoordinates::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  altitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeodeticCoordinates::~GeodeticCoordinates() {
  SharedDtor();
}

void GeodeticCoordinates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GeodeticCoordinates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeodeticCoordinates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeodeticCoordinates_descriptor_;
}

const GeodeticCoordinates& GeodeticCoordinates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RADARmessages_2eproto();
  return *default_instance_;
}

GeodeticCoordinates* GeodeticCoordinates::default_instance_ = NULL;

GeodeticCoordinates* GeodeticCoordinates::New() const {
  return new GeodeticCoordinates;
}

void GeodeticCoordinates::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    latitude_ = 0;
    longitude_ = 0;
    altitude_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeodeticCoordinates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float latitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_longitude;
        break;
      }

      // optional float longitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_altitude;
        break;
      }

      // optional float altitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeodeticCoordinates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->latitude(), output);
  }

  // optional float longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  // optional float altitude = 3;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->altitude(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeodeticCoordinates::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->latitude(), target);
  }

  // optional float longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  // optional float altitude = 3;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->altitude(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeodeticCoordinates::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional float altitude = 3;
    if (has_altitude()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeodeticCoordinates::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeodeticCoordinates* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeodeticCoordinates*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeodeticCoordinates::MergeFrom(const GeodeticCoordinates& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeodeticCoordinates::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeodeticCoordinates::CopyFrom(const GeodeticCoordinates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeodeticCoordinates::IsInitialized() const {

  return true;
}

void GeodeticCoordinates::Swap(GeodeticCoordinates* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(altitude_, other->altitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeodeticCoordinates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeodeticCoordinates_descriptor_;
  metadata.reflection = GeodeticCoordinates_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VelocityNED::kVnorthMpsFieldNumber;
const int VelocityNED::kVeastMpsFieldNumber;
const int VelocityNED::kVdownMpsFieldNumber;
#endif  // !_MSC_VER

VelocityNED::VelocityNED()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VelocityNED::InitAsDefaultInstance() {
}

VelocityNED::VelocityNED(const VelocityNED& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VelocityNED::SharedCtor() {
  _cached_size_ = 0;
  vnorth_mps_ = 0;
  veast_mps_ = 0;
  vdown_mps_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VelocityNED::~VelocityNED() {
  SharedDtor();
}

void VelocityNED::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VelocityNED::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VelocityNED::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VelocityNED_descriptor_;
}

const VelocityNED& VelocityNED::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RADARmessages_2eproto();
  return *default_instance_;
}

VelocityNED* VelocityNED::default_instance_ = NULL;

VelocityNED* VelocityNED::New() const {
  return new VelocityNED;
}

void VelocityNED::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vnorth_mps_ = 0;
    veast_mps_ = 0;
    vdown_mps_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VelocityNED::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float vnorth_mps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vnorth_mps_)));
          set_has_vnorth_mps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_veast_mps;
        break;
      }

      // optional float veast_mps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_veast_mps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &veast_mps_)));
          set_has_veast_mps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_vdown_mps;
        break;
      }

      // optional float vdown_mps = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vdown_mps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vdown_mps_)));
          set_has_vdown_mps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VelocityNED::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float vnorth_mps = 1;
  if (has_vnorth_mps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->vnorth_mps(), output);
  }

  // optional float veast_mps = 2;
  if (has_veast_mps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->veast_mps(), output);
  }

  // optional float vdown_mps = 3;
  if (has_vdown_mps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->vdown_mps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VelocityNED::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float vnorth_mps = 1;
  if (has_vnorth_mps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->vnorth_mps(), target);
  }

  // optional float veast_mps = 2;
  if (has_veast_mps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->veast_mps(), target);
  }

  // optional float vdown_mps = 3;
  if (has_vdown_mps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->vdown_mps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VelocityNED::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float vnorth_mps = 1;
    if (has_vnorth_mps()) {
      total_size += 1 + 4;
    }

    // optional float veast_mps = 2;
    if (has_veast_mps()) {
      total_size += 1 + 4;
    }

    // optional float vdown_mps = 3;
    if (has_vdown_mps()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VelocityNED::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VelocityNED* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VelocityNED*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VelocityNED::MergeFrom(const VelocityNED& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vnorth_mps()) {
      set_vnorth_mps(from.vnorth_mps());
    }
    if (from.has_veast_mps()) {
      set_veast_mps(from.veast_mps());
    }
    if (from.has_vdown_mps()) {
      set_vdown_mps(from.vdown_mps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VelocityNED::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelocityNED::CopyFrom(const VelocityNED& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelocityNED::IsInitialized() const {

  return true;
}

void VelocityNED::Swap(VelocityNED* other) {
  if (other != this) {
    std::swap(vnorth_mps_, other->vnorth_mps_);
    std::swap(veast_mps_, other->veast_mps_);
    std::swap(vdown_mps_, other->vdown_mps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VelocityNED::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VelocityNED_descriptor_;
  metadata.reflection = VelocityNED_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Track::kTrackIdFieldNumber;
const int Track::kRcsAvgFieldNumber;
const int Track::kSpeedAvgFieldNumber;
const int Track::kRcsMinFieldNumber;
const int Track::kRcsMaxFieldNumber;
const int Track::kSpeedMinFieldNumber;
const int Track::kSpeedMaxFieldNumber;
const int Track::kDurationFieldNumber;
const int Track::kIsActiveFieldNumber;
const int Track::kRangeFieldNumber;
#endif  // !_MSC_VER

Track::Track()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Track::InitAsDefaultInstance() {
}

Track::Track(const Track& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Track::SharedCtor() {
  _cached_size_ = 0;
  trackid_ = GOOGLE_LONGLONG(0);
  rcsavg_ = 0;
  speedavg_ = 0;
  rcsmin_ = 0;
  rcsmax_ = 0;
  speedmin_ = 0;
  speedmax_ = 0;
  duration_ = 0;
  isactive_ = GOOGLE_LONGLONG(0);
  range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Track::~Track() {
  SharedDtor();
}

void Track::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Track::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Track::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Track_descriptor_;
}

const Track& Track::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RADARmessages_2eproto();
  return *default_instance_;
}

Track* Track::default_instance_ = NULL;

Track* Track::New() const {
  return new Track;
}

void Track::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trackid_ = GOOGLE_LONGLONG(0);
    rcsavg_ = 0;
    speedavg_ = 0;
    rcsmin_ = 0;
    rcsmax_ = 0;
    speedmin_ = 0;
    speedmax_ = 0;
    duration_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isactive_ = GOOGLE_LONGLONG(0);
    range_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Track::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 trackId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trackid_)));
          set_has_trackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_rcsAvg;
        break;
      }

      // optional float rcsAvg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rcsAvg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rcsavg_)));
          set_has_rcsavg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_speedAvg;
        break;
      }

      // optional float speedAvg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speedAvg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speedavg_)));
          set_has_speedavg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_rcsMin;
        break;
      }

      // optional float rcsMin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rcsMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rcsmin_)));
          set_has_rcsmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rcsMax;
        break;
      }

      // optional float rcsMax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rcsMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rcsmax_)));
          set_has_rcsmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_speedMin;
        break;
      }

      // optional float speedMin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speedMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speedmin_)));
          set_has_speedmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_speedMax;
        break;
      }

      // optional float speedMax = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speedMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speedmax_)));
          set_has_speedmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_duration;
        break;
      }

      // optional float duration = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isActive;
        break;
      }

      // optional int64 isActive = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_range;
        break;
      }

      // optional float range = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Track::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 trackId = 1;
  if (has_trackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->trackid(), output);
  }

  // optional float rcsAvg = 2;
  if (has_rcsavg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rcsavg(), output);
  }

  // optional float speedAvg = 3;
  if (has_speedavg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speedavg(), output);
  }

  // optional float rcsMin = 4;
  if (has_rcsmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rcsmin(), output);
  }

  // optional float rcsMax = 5;
  if (has_rcsmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rcsmax(), output);
  }

  // optional float speedMin = 6;
  if (has_speedmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->speedmin(), output);
  }

  // optional float speedMax = 7;
  if (has_speedmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->speedmax(), output);
  }

  // optional float duration = 8;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->duration(), output);
  }

  // optional int64 isActive = 9;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->isactive(), output);
  }

  // optional float range = 10;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Track::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 trackId = 1;
  if (has_trackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->trackid(), target);
  }

  // optional float rcsAvg = 2;
  if (has_rcsavg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rcsavg(), target);
  }

  // optional float speedAvg = 3;
  if (has_speedavg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speedavg(), target);
  }

  // optional float rcsMin = 4;
  if (has_rcsmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rcsmin(), target);
  }

  // optional float rcsMax = 5;
  if (has_rcsmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rcsmax(), target);
  }

  // optional float speedMin = 6;
  if (has_speedmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->speedmin(), target);
  }

  // optional float speedMax = 7;
  if (has_speedmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->speedmax(), target);
  }

  // optional float duration = 8;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->duration(), target);
  }

  // optional int64 isActive = 9;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->isactive(), target);
  }

  // optional float range = 10;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Track::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 trackId = 1;
    if (has_trackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->trackid());
    }

    // optional float rcsAvg = 2;
    if (has_rcsavg()) {
      total_size += 1 + 4;
    }

    // optional float speedAvg = 3;
    if (has_speedavg()) {
      total_size += 1 + 4;
    }

    // optional float rcsMin = 4;
    if (has_rcsmin()) {
      total_size += 1 + 4;
    }

    // optional float rcsMax = 5;
    if (has_rcsmax()) {
      total_size += 1 + 4;
    }

    // optional float speedMin = 6;
    if (has_speedmin()) {
      total_size += 1 + 4;
    }

    // optional float speedMax = 7;
    if (has_speedmax()) {
      total_size += 1 + 4;
    }

    // optional float duration = 8;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 isActive = 9;
    if (has_isactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->isactive());
    }

    // optional float range = 10;
    if (has_range()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Track::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Track* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Track*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Track::MergeFrom(const Track& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trackid()) {
      set_trackid(from.trackid());
    }
    if (from.has_rcsavg()) {
      set_rcsavg(from.rcsavg());
    }
    if (from.has_speedavg()) {
      set_speedavg(from.speedavg());
    }
    if (from.has_rcsmin()) {
      set_rcsmin(from.rcsmin());
    }
    if (from.has_rcsmax()) {
      set_rcsmax(from.rcsmax());
    }
    if (from.has_speedmin()) {
      set_speedmin(from.speedmin());
    }
    if (from.has_speedmax()) {
      set_speedmax(from.speedmax());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Track::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Track::CopyFrom(const Track& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Track::IsInitialized() const {

  return true;
}

void Track::Swap(Track* other) {
  if (other != this) {
    std::swap(trackid_, other->trackid_);
    std::swap(rcsavg_, other->rcsavg_);
    std::swap(speedavg_, other->speedavg_);
    std::swap(rcsmin_, other->rcsmin_);
    std::swap(rcsmax_, other->rcsmax_);
    std::swap(speedmin_, other->speedmin_);
    std::swap(speedmax_, other->speedmax_);
    std::swap(duration_, other->duration_);
    std::swap(isactive_, other->isactive_);
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Track::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Track_descriptor_;
  metadata.reflection = Track_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackEstimate::kAglFieldNumber;
const int TrackEstimate::kGpsTimeFieldNumber;
const int TrackEstimate::kRcsFieldNumber;
const int TrackEstimate::kLlaFieldNumber;
const int TrackEstimate::kVelNEDFieldNumber;
const int TrackEstimate::kHeadingFieldNumber;
const int TrackEstimate::kTsFieldNumber;
const int TrackEstimate::kSpeedFieldNumber;
#endif  // !_MSC_VER

TrackEstimate::TrackEstimate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackEstimate::InitAsDefaultInstance() {
  lla_ = const_cast< ::rdr_msg::GeodeticCoordinates*>(&::rdr_msg::GeodeticCoordinates::default_instance());
  velned_ = const_cast< ::rdr_msg::VelocityNED*>(&::rdr_msg::VelocityNED::default_instance());
}

TrackEstimate::TrackEstimate(const TrackEstimate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackEstimate::SharedCtor() {
  _cached_size_ = 0;
  agl_ = 0;
  gpstime_ = GOOGLE_LONGLONG(0);
  rcs_ = 0;
  lla_ = NULL;
  velned_ = NULL;
  heading_ = 0;
  ts_ = GOOGLE_LONGLONG(0);
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackEstimate::~TrackEstimate() {
  SharedDtor();
}

void TrackEstimate::SharedDtor() {
  if (this != default_instance_) {
    delete lla_;
    delete velned_;
  }
}

void TrackEstimate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackEstimate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackEstimate_descriptor_;
}

const TrackEstimate& TrackEstimate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RADARmessages_2eproto();
  return *default_instance_;
}

TrackEstimate* TrackEstimate::default_instance_ = NULL;

TrackEstimate* TrackEstimate::New() const {
  return new TrackEstimate;
}

void TrackEstimate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    agl_ = 0;
    gpstime_ = GOOGLE_LONGLONG(0);
    rcs_ = 0;
    if (has_lla()) {
      if (lla_ != NULL) lla_->::rdr_msg::GeodeticCoordinates::Clear();
    }
    if (has_velned()) {
      if (velned_ != NULL) velned_->::rdr_msg::VelocityNED::Clear();
    }
    heading_ = 0;
    ts_ = GOOGLE_LONGLONG(0);
    speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackEstimate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float agl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &agl_)));
          set_has_agl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gpsTime;
        break;
      }

      // optional int64 gpsTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpsTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gpstime_)));
          set_has_gpstime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_rcs;
        break;
      }

      // optional float rcs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rcs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rcs_)));
          set_has_rcs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lla;
        break;
      }

      // optional .rdr_msg.GeodeticCoordinates lla = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lla:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lla()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_velNED;
        break;
      }

      // optional .rdr_msg.VelocityNED velNED = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velNED:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velned()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_heading;
        break;
      }

      // optional float heading = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ts;
        break;
      }

      // optional int64 ts = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_speed;
        break;
      }

      // optional float speed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackEstimate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float agl = 1;
  if (has_agl()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->agl(), output);
  }

  // optional int64 gpsTime = 2;
  if (has_gpstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gpstime(), output);
  }

  // optional float rcs = 3;
  if (has_rcs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rcs(), output);
  }

  // optional .rdr_msg.GeodeticCoordinates lla = 4;
  if (has_lla()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lla(), output);
  }

  // optional .rdr_msg.VelocityNED velNED = 5;
  if (has_velned()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->velned(), output);
  }

  // optional float heading = 6;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->heading(), output);
  }

  // optional int64 ts = 7;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->ts(), output);
  }

  // optional float speed = 8;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackEstimate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float agl = 1;
  if (has_agl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->agl(), target);
  }

  // optional int64 gpsTime = 2;
  if (has_gpstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gpstime(), target);
  }

  // optional float rcs = 3;
  if (has_rcs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rcs(), target);
  }

  // optional .rdr_msg.GeodeticCoordinates lla = 4;
  if (has_lla()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lla(), target);
  }

  // optional .rdr_msg.VelocityNED velNED = 5;
  if (has_velned()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->velned(), target);
  }

  // optional float heading = 6;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->heading(), target);
  }

  // optional int64 ts = 7;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->ts(), target);
  }

  // optional float speed = 8;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackEstimate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float agl = 1;
    if (has_agl()) {
      total_size += 1 + 4;
    }

    // optional int64 gpsTime = 2;
    if (has_gpstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gpstime());
    }

    // optional float rcs = 3;
    if (has_rcs()) {
      total_size += 1 + 4;
    }

    // optional .rdr_msg.GeodeticCoordinates lla = 4;
    if (has_lla()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lla());
    }

    // optional .rdr_msg.VelocityNED velNED = 5;
    if (has_velned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velned());
    }

    // optional float heading = 6;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // optional int64 ts = 7;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ts());
    }

    // optional float speed = 8;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackEstimate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackEstimate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackEstimate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackEstimate::MergeFrom(const TrackEstimate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agl()) {
      set_agl(from.agl());
    }
    if (from.has_gpstime()) {
      set_gpstime(from.gpstime());
    }
    if (from.has_rcs()) {
      set_rcs(from.rcs());
    }
    if (from.has_lla()) {
      mutable_lla()->::rdr_msg::GeodeticCoordinates::MergeFrom(from.lla());
    }
    if (from.has_velned()) {
      mutable_velned()->::rdr_msg::VelocityNED::MergeFrom(from.velned());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackEstimate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackEstimate::CopyFrom(const TrackEstimate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackEstimate::IsInitialized() const {

  return true;
}

void TrackEstimate::Swap(TrackEstimate* other) {
  if (other != this) {
    std::swap(agl_, other->agl_);
    std::swap(gpstime_, other->gpstime_);
    std::swap(rcs_, other->rcs_);
    std::swap(lla_, other->lla_);
    std::swap(velned_, other->velned_);
    std::swap(heading_, other->heading_);
    std::swap(ts_, other->ts_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackEstimate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackEstimate_descriptor_;
  metadata.reflection = TrackEstimate_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RadarMetaData::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RadarMetaData::kMsgNameFieldNumber;
const int RadarMetaData::kTrackFieldNumber;
const int RadarMetaData::kTrackEstFieldNumber;
#endif  // !_MSC_VER

RadarMetaData::RadarMetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RadarMetaData::InitAsDefaultInstance() {
  track_ = const_cast< ::rdr_msg::Track*>(&::rdr_msg::Track::default_instance());
  trackest_ = const_cast< ::rdr_msg::TrackEstimate*>(&::rdr_msg::TrackEstimate::default_instance());
}

RadarMetaData::RadarMetaData(const RadarMetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RadarMetaData::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  track_ = NULL;
  trackest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarMetaData::~RadarMetaData() {
  SharedDtor();
}

void RadarMetaData::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete track_;
    delete trackest_;
  }
}

void RadarMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarMetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarMetaData_descriptor_;
}

const RadarMetaData& RadarMetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RADARmessages_2eproto();
  return *default_instance_;
}

RadarMetaData* RadarMetaData::default_instance_ = NULL;

RadarMetaData* RadarMetaData::New() const {
  return new RadarMetaData;
}

void RadarMetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_track()) {
      if (track_ != NULL) track_->::rdr_msg::Track::Clear();
    }
    if (has_trackest()) {
      if (trackest_ != NULL) trackest_->::rdr_msg::TrackEstimate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RADAR_DATA"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_track;
        break;
      }

      // optional .rdr_msg.Track track = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_trackEst;
        break;
      }

      // optional .rdr_msg.TrackEstimate trackEst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trackEst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trackest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RadarMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RADAR_DATA"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .rdr_msg.Track track = 2;
  if (has_track()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->track(), output);
  }

  // optional .rdr_msg.TrackEstimate trackEst = 3;
  if (has_trackest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->trackest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RadarMetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RADAR_DATA"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .rdr_msg.Track track = 2;
  if (has_track()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->track(), target);
  }

  // optional .rdr_msg.TrackEstimate trackEst = 3;
  if (has_trackest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->trackest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RadarMetaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RADAR_DATA"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .rdr_msg.Track track = 2;
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->track());
    }

    // optional .rdr_msg.TrackEstimate trackEst = 3;
    if (has_trackest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trackest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarMetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarMetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarMetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarMetaData::MergeFrom(const RadarMetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_track()) {
      mutable_track()->::rdr_msg::Track::MergeFrom(from.track());
    }
    if (from.has_trackest()) {
      mutable_trackest()->::rdr_msg::TrackEstimate::MergeFrom(from.trackest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarMetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarMetaData::CopyFrom(const RadarMetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarMetaData::IsInitialized() const {

  return true;
}

void RadarMetaData::Swap(RadarMetaData* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(track_, other->track_);
    std::swap(trackest_, other->trackest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarMetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarMetaData_descriptor_;
  metadata.reflection = RadarMetaData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rdr_msg

// @@protoc_insertion_point(global_scope)
