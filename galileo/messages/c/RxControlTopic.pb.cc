// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RxControlTopic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RxControlTopic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rx_msg {

namespace {

const ::google::protobuf::Descriptor* ReceiverRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiverRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiverRelease_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiverRelease_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiverAcquired_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiverAcquired_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiverReleased_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiverReleased_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RxControlTopic_2eproto() {
  protobuf_AddDesc_RxControlTopic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RxControlTopic.proto");
  GOOGLE_CHECK(file != NULL);
  ReceiverRequest_descriptor_ = file->message_type(0);
  static const int ReceiverRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRequest, appid_),
  };
  ReceiverRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiverRequest_descriptor_,
      ReceiverRequest::default_instance_,
      ReceiverRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiverRequest));
  ReceiverRelease_descriptor_ = file->message_type(1);
  static const int ReceiverRelease_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRelease, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRelease, channel_),
  };
  ReceiverRelease_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiverRelease_descriptor_,
      ReceiverRelease::default_instance_,
      ReceiverRelease_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRelease, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverRelease, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiverRelease));
  ReceiverAcquired_descriptor_ = file->message_type(2);
  static const int ReceiverAcquired_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverAcquired, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverAcquired, channel_),
  };
  ReceiverAcquired_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiverAcquired_descriptor_,
      ReceiverAcquired::default_instance_,
      ReceiverAcquired_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverAcquired, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverAcquired, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiverAcquired));
  ReceiverReleased_descriptor_ = file->message_type(3);
  static const int ReceiverReleased_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverReleased, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverReleased, channel_),
  };
  ReceiverReleased_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiverReleased_descriptor_,
      ReceiverReleased::default_instance_,
      ReceiverReleased_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverReleased, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiverReleased, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiverReleased));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RxControlTopic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiverRequest_descriptor_, &ReceiverRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiverRelease_descriptor_, &ReceiverRelease::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiverAcquired_descriptor_, &ReceiverAcquired::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiverReleased_descriptor_, &ReceiverReleased::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RxControlTopic_2eproto() {
  delete ReceiverRequest::default_instance_;
  delete ReceiverRequest_reflection_;
  delete ReceiverRelease::default_instance_;
  delete ReceiverRelease_reflection_;
  delete ReceiverAcquired::default_instance_;
  delete ReceiverAcquired_reflection_;
  delete ReceiverReleased::default_instance_;
  delete ReceiverReleased_reflection_;
}

void protobuf_AddDesc_RxControlTopic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024RxControlTopic.proto\022\006rx_msg\" \n\017Receiv"
    "erRequest\022\r\n\005appID\030\001 \001(\005\"1\n\017ReceiverRele"
    "ase\022\r\n\005appID\030\001 \001(\005\022\017\n\007channel\030\002 \001(\005\"2\n\020R"
    "eceiverAcquired\022\r\n\005appID\030\001 \001(\005\022\017\n\007channe"
    "l\030\002 \001(\005\"2\n\020ReceiverReleased\022\r\n\005appID\030\001 \001"
    "(\005\022\017\n\007channel\030\002 \001(\005", 219);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RxControlTopic.proto", &protobuf_RegisterTypes);
  ReceiverRequest::default_instance_ = new ReceiverRequest();
  ReceiverRelease::default_instance_ = new ReceiverRelease();
  ReceiverAcquired::default_instance_ = new ReceiverAcquired();
  ReceiverReleased::default_instance_ = new ReceiverReleased();
  ReceiverRequest::default_instance_->InitAsDefaultInstance();
  ReceiverRelease::default_instance_->InitAsDefaultInstance();
  ReceiverAcquired::default_instance_->InitAsDefaultInstance();
  ReceiverReleased::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RxControlTopic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RxControlTopic_2eproto {
  StaticDescriptorInitializer_RxControlTopic_2eproto() {
    protobuf_AddDesc_RxControlTopic_2eproto();
  }
} static_descriptor_initializer_RxControlTopic_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReceiverRequest::kAppIDFieldNumber;
#endif  // !_MSC_VER

ReceiverRequest::ReceiverRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiverRequest::InitAsDefaultInstance() {
}

ReceiverRequest::ReceiverRequest(const ReceiverRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiverRequest::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiverRequest::~ReceiverRequest() {
  SharedDtor();
}

void ReceiverRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReceiverRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiverRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverRequest_descriptor_;
}

const ReceiverRequest& ReceiverRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RxControlTopic_2eproto();
  return *default_instance_;
}

ReceiverRequest* ReceiverRequest::default_instance_ = NULL;

ReceiverRequest* ReceiverRequest::New() const {
  return new ReceiverRequest;
}

void ReceiverRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiverRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 appID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiverRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 appID = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiverRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 appID = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiverRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 appID = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiverRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiverRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiverRequest::MergeFrom(const ReceiverRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiverRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverRequest::CopyFrom(const ReceiverRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverRequest::IsInitialized() const {

  return true;
}

void ReceiverRequest::Swap(ReceiverRequest* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiverRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiverRequest_descriptor_;
  metadata.reflection = ReceiverRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiverRelease::kAppIDFieldNumber;
const int ReceiverRelease::kChannelFieldNumber;
#endif  // !_MSC_VER

ReceiverRelease::ReceiverRelease()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiverRelease::InitAsDefaultInstance() {
}

ReceiverRelease::ReceiverRelease(const ReceiverRelease& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiverRelease::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0;
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiverRelease::~ReceiverRelease() {
  SharedDtor();
}

void ReceiverRelease::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReceiverRelease::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiverRelease::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverRelease_descriptor_;
}

const ReceiverRelease& ReceiverRelease::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RxControlTopic_2eproto();
  return *default_instance_;
}

ReceiverRelease* ReceiverRelease::default_instance_ = NULL;

ReceiverRelease* ReceiverRelease::New() const {
  return new ReceiverRelease;
}

void ReceiverRelease::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0;
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiverRelease::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 appID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiverRelease::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 appID = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->appid(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiverRelease::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 appID = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->appid(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiverRelease::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 appID = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverRelease::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiverRelease* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiverRelease*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiverRelease::MergeFrom(const ReceiverRelease& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiverRelease::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverRelease::CopyFrom(const ReceiverRelease& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverRelease::IsInitialized() const {

  return true;
}

void ReceiverRelease::Swap(ReceiverRelease* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiverRelease::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiverRelease_descriptor_;
  metadata.reflection = ReceiverRelease_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiverAcquired::kAppIDFieldNumber;
const int ReceiverAcquired::kChannelFieldNumber;
#endif  // !_MSC_VER

ReceiverAcquired::ReceiverAcquired()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiverAcquired::InitAsDefaultInstance() {
}

ReceiverAcquired::ReceiverAcquired(const ReceiverAcquired& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiverAcquired::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0;
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiverAcquired::~ReceiverAcquired() {
  SharedDtor();
}

void ReceiverAcquired::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReceiverAcquired::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiverAcquired::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverAcquired_descriptor_;
}

const ReceiverAcquired& ReceiverAcquired::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RxControlTopic_2eproto();
  return *default_instance_;
}

ReceiverAcquired* ReceiverAcquired::default_instance_ = NULL;

ReceiverAcquired* ReceiverAcquired::New() const {
  return new ReceiverAcquired;
}

void ReceiverAcquired::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0;
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiverAcquired::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 appID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiverAcquired::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 appID = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->appid(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiverAcquired::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 appID = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->appid(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiverAcquired::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 appID = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverAcquired::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiverAcquired* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiverAcquired*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiverAcquired::MergeFrom(const ReceiverAcquired& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiverAcquired::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverAcquired::CopyFrom(const ReceiverAcquired& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverAcquired::IsInitialized() const {

  return true;
}

void ReceiverAcquired::Swap(ReceiverAcquired* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiverAcquired::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiverAcquired_descriptor_;
  metadata.reflection = ReceiverAcquired_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiverReleased::kAppIDFieldNumber;
const int ReceiverReleased::kChannelFieldNumber;
#endif  // !_MSC_VER

ReceiverReleased::ReceiverReleased()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiverReleased::InitAsDefaultInstance() {
}

ReceiverReleased::ReceiverReleased(const ReceiverReleased& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiverReleased::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0;
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiverReleased::~ReceiverReleased() {
  SharedDtor();
}

void ReceiverReleased::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReceiverReleased::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiverReleased::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiverReleased_descriptor_;
}

const ReceiverReleased& ReceiverReleased::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RxControlTopic_2eproto();
  return *default_instance_;
}

ReceiverReleased* ReceiverReleased::default_instance_ = NULL;

ReceiverReleased* ReceiverReleased::New() const {
  return new ReceiverReleased;
}

void ReceiverReleased::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0;
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiverReleased::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 appID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiverReleased::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 appID = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->appid(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiverReleased::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 appID = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->appid(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiverReleased::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 appID = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverReleased::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiverReleased* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiverReleased*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiverReleased::MergeFrom(const ReceiverReleased& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiverReleased::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiverReleased::CopyFrom(const ReceiverReleased& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverReleased::IsInitialized() const {

  return true;
}

void ReceiverReleased::Swap(ReceiverReleased* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiverReleased::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiverReleased_descriptor_;
  metadata.reflection = ReceiverReleased_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rx_msg

// @@protoc_insertion_point(global_scope)
