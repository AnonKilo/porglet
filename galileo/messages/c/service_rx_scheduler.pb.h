// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_rx_scheduler.proto

#ifndef PROTOBUF_service_5frx_5fscheduler_2eproto__INCLUDED
#define PROTOBUF_service_5frx_5fscheduler_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace service_rx_scheduler {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_5frx_5fscheduler_2eproto();
void protobuf_AssignDesc_service_5frx_5fscheduler_2eproto();
void protobuf_ShutdownFile_service_5frx_5fscheduler_2eproto();

class RxSchedulerConfig;
class RxSchedulerConfig_ScheduleImportInfo;
class RxSchedulerConfig_TimelineImportInfo;
class RxSchedulerConfig_BlackoutImportInfo;

// ===================================================================

class RxSchedulerConfig_ScheduleImportInfo : public ::google::protobuf::Message {
 public:
  RxSchedulerConfig_ScheduleImportInfo();
  virtual ~RxSchedulerConfig_ScheduleImportInfo();

  RxSchedulerConfig_ScheduleImportInfo(const RxSchedulerConfig_ScheduleImportInfo& from);

  inline RxSchedulerConfig_ScheduleImportInfo& operator=(const RxSchedulerConfig_ScheduleImportInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RxSchedulerConfig_ScheduleImportInfo& default_instance();

  void Swap(RxSchedulerConfig_ScheduleImportInfo* other);

  // implements Message ----------------------------------------------

  RxSchedulerConfig_ScheduleImportInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RxSchedulerConfig_ScheduleImportInfo& from);
  void MergeFrom(const RxSchedulerConfig_ScheduleImportInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string channelId = 1;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // required string importPath = 2;
  inline bool has_importpath() const;
  inline void clear_importpath();
  static const int kImportPathFieldNumber = 2;
  inline const ::std::string& importpath() const;
  inline void set_importpath(const ::std::string& value);
  inline void set_importpath(const char* value);
  inline void set_importpath(const char* value, size_t size);
  inline ::std::string* mutable_importpath();
  inline ::std::string* release_importpath();
  inline void set_allocated_importpath(::std::string* importpath);

  // @@protoc_insertion_point(class_scope:service_rx_scheduler.RxSchedulerConfig.ScheduleImportInfo)
 private:
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_importpath();
  inline void clear_has_importpath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* channelid_;
  ::std::string* importpath_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_service_5frx_5fscheduler_2eproto();
  friend void protobuf_AssignDesc_service_5frx_5fscheduler_2eproto();
  friend void protobuf_ShutdownFile_service_5frx_5fscheduler_2eproto();

  void InitAsDefaultInstance();
  static RxSchedulerConfig_ScheduleImportInfo* default_instance_;
};
// -------------------------------------------------------------------

class RxSchedulerConfig_TimelineImportInfo : public ::google::protobuf::Message {
 public:
  RxSchedulerConfig_TimelineImportInfo();
  virtual ~RxSchedulerConfig_TimelineImportInfo();

  RxSchedulerConfig_TimelineImportInfo(const RxSchedulerConfig_TimelineImportInfo& from);

  inline RxSchedulerConfig_TimelineImportInfo& operator=(const RxSchedulerConfig_TimelineImportInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RxSchedulerConfig_TimelineImportInfo& default_instance();

  void Swap(RxSchedulerConfig_TimelineImportInfo* other);

  // implements Message ----------------------------------------------

  RxSchedulerConfig_TimelineImportInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RxSchedulerConfig_TimelineImportInfo& from);
  void MergeFrom(const RxSchedulerConfig_TimelineImportInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string channelId = 1;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // optional string startTime = 2;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 2;
  inline const ::std::string& starttime() const;
  inline void set_starttime(const ::std::string& value);
  inline void set_starttime(const char* value);
  inline void set_starttime(const char* value, size_t size);
  inline ::std::string* mutable_starttime();
  inline ::std::string* release_starttime();
  inline void set_allocated_starttime(::std::string* starttime);

  // optional string stopTime = 3;
  inline bool has_stoptime() const;
  inline void clear_stoptime();
  static const int kStopTimeFieldNumber = 3;
  inline const ::std::string& stoptime() const;
  inline void set_stoptime(const ::std::string& value);
  inline void set_stoptime(const char* value);
  inline void set_stoptime(const char* value, size_t size);
  inline ::std::string* mutable_stoptime();
  inline ::std::string* release_stoptime();
  inline void set_allocated_stoptime(::std::string* stoptime);

  // optional string filePath = 4;
  inline bool has_filepath() const;
  inline void clear_filepath();
  static const int kFilePathFieldNumber = 4;
  inline const ::std::string& filepath() const;
  inline void set_filepath(const ::std::string& value);
  inline void set_filepath(const char* value);
  inline void set_filepath(const char* value, size_t size);
  inline ::std::string* mutable_filepath();
  inline ::std::string* release_filepath();
  inline void set_allocated_filepath(::std::string* filepath);

  // @@protoc_insertion_point(class_scope:service_rx_scheduler.RxSchedulerConfig.TimelineImportInfo)
 private:
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_stoptime();
  inline void clear_has_stoptime();
  inline void set_has_filepath();
  inline void clear_has_filepath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* channelid_;
  ::std::string* starttime_;
  ::std::string* stoptime_;
  ::std::string* filepath_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_service_5frx_5fscheduler_2eproto();
  friend void protobuf_AssignDesc_service_5frx_5fscheduler_2eproto();
  friend void protobuf_ShutdownFile_service_5frx_5fscheduler_2eproto();

  void InitAsDefaultInstance();
  static RxSchedulerConfig_TimelineImportInfo* default_instance_;
};
// -------------------------------------------------------------------

class RxSchedulerConfig_BlackoutImportInfo : public ::google::protobuf::Message {
 public:
  RxSchedulerConfig_BlackoutImportInfo();
  virtual ~RxSchedulerConfig_BlackoutImportInfo();

  RxSchedulerConfig_BlackoutImportInfo(const RxSchedulerConfig_BlackoutImportInfo& from);

  inline RxSchedulerConfig_BlackoutImportInfo& operator=(const RxSchedulerConfig_BlackoutImportInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RxSchedulerConfig_BlackoutImportInfo& default_instance();

  void Swap(RxSchedulerConfig_BlackoutImportInfo* other);

  // implements Message ----------------------------------------------

  RxSchedulerConfig_BlackoutImportInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RxSchedulerConfig_BlackoutImportInfo& from);
  void MergeFrom(const RxSchedulerConfig_BlackoutImportInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filePath = 1;
  inline bool has_filepath() const;
  inline void clear_filepath();
  static const int kFilePathFieldNumber = 1;
  inline const ::std::string& filepath() const;
  inline void set_filepath(const ::std::string& value);
  inline void set_filepath(const char* value);
  inline void set_filepath(const char* value, size_t size);
  inline ::std::string* mutable_filepath();
  inline ::std::string* release_filepath();
  inline void set_allocated_filepath(::std::string* filepath);

  // @@protoc_insertion_point(class_scope:service_rx_scheduler.RxSchedulerConfig.BlackoutImportInfo)
 private:
  inline void set_has_filepath();
  inline void clear_has_filepath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* filepath_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_service_5frx_5fscheduler_2eproto();
  friend void protobuf_AssignDesc_service_5frx_5fscheduler_2eproto();
  friend void protobuf_ShutdownFile_service_5frx_5fscheduler_2eproto();

  void InitAsDefaultInstance();
  static RxSchedulerConfig_BlackoutImportInfo* default_instance_;
};
// -------------------------------------------------------------------

class RxSchedulerConfig : public ::google::protobuf::Message {
 public:
  RxSchedulerConfig();
  virtual ~RxSchedulerConfig();

  RxSchedulerConfig(const RxSchedulerConfig& from);

  inline RxSchedulerConfig& operator=(const RxSchedulerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RxSchedulerConfig& default_instance();

  void Swap(RxSchedulerConfig* other);

  // implements Message ----------------------------------------------

  RxSchedulerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RxSchedulerConfig& from);
  void MergeFrom(const RxSchedulerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RxSchedulerConfig_ScheduleImportInfo ScheduleImportInfo;
  typedef RxSchedulerConfig_TimelineImportInfo TimelineImportInfo;
  typedef RxSchedulerConfig_BlackoutImportInfo BlackoutImportInfo;

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "service_rx_scheduler.RxSchedulerConfig"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // repeated .service_rx_scheduler.RxSchedulerConfig.ScheduleImportInfo scheduleImportInfos = 2;
  inline int scheduleimportinfos_size() const;
  inline void clear_scheduleimportinfos();
  static const int kScheduleImportInfosFieldNumber = 2;
  inline const ::service_rx_scheduler::RxSchedulerConfig_ScheduleImportInfo& scheduleimportinfos(int index) const;
  inline ::service_rx_scheduler::RxSchedulerConfig_ScheduleImportInfo* mutable_scheduleimportinfos(int index);
  inline ::service_rx_scheduler::RxSchedulerConfig_ScheduleImportInfo* add_scheduleimportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::service_rx_scheduler::RxSchedulerConfig_ScheduleImportInfo >&
      scheduleimportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::service_rx_scheduler::RxSchedulerConfig_ScheduleImportInfo >*
      mutable_scheduleimportinfos();

  // repeated .service_rx_scheduler.RxSchedulerConfig.TimelineImportInfo timelineImportInfos = 3;
  inline int timelineimportinfos_size() const;
  inline void clear_timelineimportinfos();
  static const int kTimelineImportInfosFieldNumber = 3;
  inline const ::service_rx_scheduler::RxSchedulerConfig_TimelineImportInfo& timelineimportinfos(int index) const;
  inline ::service_rx_scheduler::RxSchedulerConfig_TimelineImportInfo* mutable_timelineimportinfos(int index);
  inline ::service_rx_scheduler::RxSchedulerConfig_TimelineImportInfo* add_timelineimportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::service_rx_scheduler::RxSchedulerConfig_TimelineImportInfo >&
      timelineimportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::service_rx_scheduler::RxSchedulerConfig_TimelineImportInfo >*
      mutable_timelineimportinfos();

  // repeated .service_rx_scheduler.RxSchedulerConfig.BlackoutImportInfo blackoutImportInfos = 4;
  inline int blackoutimportinfos_size() const;
  inline void clear_blackoutimportinfos();
  static const int kBlackoutImportInfosFieldNumber = 4;
  inline const ::service_rx_scheduler::RxSchedulerConfig_BlackoutImportInfo& blackoutimportinfos(int index) const;
  inline ::service_rx_scheduler::RxSchedulerConfig_BlackoutImportInfo* mutable_blackoutimportinfos(int index);
  inline ::service_rx_scheduler::RxSchedulerConfig_BlackoutImportInfo* add_blackoutimportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::service_rx_scheduler::RxSchedulerConfig_BlackoutImportInfo >&
      blackoutimportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::service_rx_scheduler::RxSchedulerConfig_BlackoutImportInfo >*
      mutable_blackoutimportinfos();

  // @@protoc_insertion_point(class_scope:service_rx_scheduler.RxSchedulerConfig)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::RepeatedPtrField< ::service_rx_scheduler::RxSchedulerConfig_ScheduleImportInfo > scheduleimportinfos_;
  ::google::protobuf::RepeatedPtrField< ::service_rx_scheduler::RxSchedulerConfig_TimelineImportInfo > timelineimportinfos_;
  ::google::protobuf::RepeatedPtrField< ::service_rx_scheduler::RxSchedulerConfig_BlackoutImportInfo > blackoutimportinfos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_service_5frx_5fscheduler_2eproto();
  friend void protobuf_AssignDesc_service_5frx_5fscheduler_2eproto();
  friend void protobuf_ShutdownFile_service_5frx_5fscheduler_2eproto();

  void InitAsDefaultInstance();
  static RxSchedulerConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// RxSchedulerConfig_ScheduleImportInfo

// required string channelId = 1;
inline bool RxSchedulerConfig_ScheduleImportInfo::has_channelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RxSchedulerConfig_ScheduleImportInfo::set_has_channelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RxSchedulerConfig_ScheduleImportInfo::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RxSchedulerConfig_ScheduleImportInfo::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& RxSchedulerConfig_ScheduleImportInfo::channelid() const {
  return *channelid_;
}
inline void RxSchedulerConfig_ScheduleImportInfo::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void RxSchedulerConfig_ScheduleImportInfo::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void RxSchedulerConfig_ScheduleImportInfo::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RxSchedulerConfig_ScheduleImportInfo::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  return channelid_;
}
inline ::std::string* RxSchedulerConfig_ScheduleImportInfo::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RxSchedulerConfig_ScheduleImportInfo::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string importPath = 2;
inline bool RxSchedulerConfig_ScheduleImportInfo::has_importpath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RxSchedulerConfig_ScheduleImportInfo::set_has_importpath() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RxSchedulerConfig_ScheduleImportInfo::clear_has_importpath() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RxSchedulerConfig_ScheduleImportInfo::clear_importpath() {
  if (importpath_ != &::google::protobuf::internal::kEmptyString) {
    importpath_->clear();
  }
  clear_has_importpath();
}
inline const ::std::string& RxSchedulerConfig_ScheduleImportInfo::importpath() const {
  return *importpath_;
}
inline void RxSchedulerConfig_ScheduleImportInfo::set_importpath(const ::std::string& value) {
  set_has_importpath();
  if (importpath_ == &::google::protobuf::internal::kEmptyString) {
    importpath_ = new ::std::string;
  }
  importpath_->assign(value);
}
inline void RxSchedulerConfig_ScheduleImportInfo::set_importpath(const char* value) {
  set_has_importpath();
  if (importpath_ == &::google::protobuf::internal::kEmptyString) {
    importpath_ = new ::std::string;
  }
  importpath_->assign(value);
}
inline void RxSchedulerConfig_ScheduleImportInfo::set_importpath(const char* value, size_t size) {
  set_has_importpath();
  if (importpath_ == &::google::protobuf::internal::kEmptyString) {
    importpath_ = new ::std::string;
  }
  importpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RxSchedulerConfig_ScheduleImportInfo::mutable_importpath() {
  set_has_importpath();
  if (importpath_ == &::google::protobuf::internal::kEmptyString) {
    importpath_ = new ::std::string;
  }
  return importpath_;
}
inline ::std::string* RxSchedulerConfig_ScheduleImportInfo::release_importpath() {
  clear_has_importpath();
  if (importpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = importpath_;
    importpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RxSchedulerConfig_ScheduleImportInfo::set_allocated_importpath(::std::string* importpath) {
  if (importpath_ != &::google::protobuf::internal::kEmptyString) {
    delete importpath_;
  }
  if (importpath) {
    set_has_importpath();
    importpath_ = importpath;
  } else {
    clear_has_importpath();
    importpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RxSchedulerConfig_TimelineImportInfo

// optional string channelId = 1;
inline bool RxSchedulerConfig_TimelineImportInfo::has_channelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RxSchedulerConfig_TimelineImportInfo::set_has_channelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RxSchedulerConfig_TimelineImportInfo::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RxSchedulerConfig_TimelineImportInfo::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& RxSchedulerConfig_TimelineImportInfo::channelid() const {
  return *channelid_;
}
inline void RxSchedulerConfig_TimelineImportInfo::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void RxSchedulerConfig_TimelineImportInfo::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void RxSchedulerConfig_TimelineImportInfo::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RxSchedulerConfig_TimelineImportInfo::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  return channelid_;
}
inline ::std::string* RxSchedulerConfig_TimelineImportInfo::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RxSchedulerConfig_TimelineImportInfo::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string startTime = 2;
inline bool RxSchedulerConfig_TimelineImportInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RxSchedulerConfig_TimelineImportInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RxSchedulerConfig_TimelineImportInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RxSchedulerConfig_TimelineImportInfo::clear_starttime() {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    starttime_->clear();
  }
  clear_has_starttime();
}
inline const ::std::string& RxSchedulerConfig_TimelineImportInfo::starttime() const {
  return *starttime_;
}
inline void RxSchedulerConfig_TimelineImportInfo::set_starttime(const ::std::string& value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void RxSchedulerConfig_TimelineImportInfo::set_starttime(const char* value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void RxSchedulerConfig_TimelineImportInfo::set_starttime(const char* value, size_t size) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RxSchedulerConfig_TimelineImportInfo::mutable_starttime() {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  return starttime_;
}
inline ::std::string* RxSchedulerConfig_TimelineImportInfo::release_starttime() {
  clear_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = starttime_;
    starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RxSchedulerConfig_TimelineImportInfo::set_allocated_starttime(::std::string* starttime) {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  if (starttime) {
    set_has_starttime();
    starttime_ = starttime;
  } else {
    clear_has_starttime();
    starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string stopTime = 3;
inline bool RxSchedulerConfig_TimelineImportInfo::has_stoptime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RxSchedulerConfig_TimelineImportInfo::set_has_stoptime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RxSchedulerConfig_TimelineImportInfo::clear_has_stoptime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RxSchedulerConfig_TimelineImportInfo::clear_stoptime() {
  if (stoptime_ != &::google::protobuf::internal::kEmptyString) {
    stoptime_->clear();
  }
  clear_has_stoptime();
}
inline const ::std::string& RxSchedulerConfig_TimelineImportInfo::stoptime() const {
  return *stoptime_;
}
inline void RxSchedulerConfig_TimelineImportInfo::set_stoptime(const ::std::string& value) {
  set_has_stoptime();
  if (stoptime_ == &::google::protobuf::internal::kEmptyString) {
    stoptime_ = new ::std::string;
  }
  stoptime_->assign(value);
}
inline void RxSchedulerConfig_TimelineImportInfo::set_stoptime(const char* value) {
  set_has_stoptime();
  if (stoptime_ == &::google::protobuf::internal::kEmptyString) {
    stoptime_ = new ::std::string;
  }
  stoptime_->assign(value);
}
inline void RxSchedulerConfig_TimelineImportInfo::set_stoptime(const char* value, size_t size) {
  set_has_stoptime();
  if (stoptime_ == &::google::protobuf::internal::kEmptyString) {
    stoptime_ = new ::std::string;
  }
  stoptime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RxSchedulerConfig_TimelineImportInfo::mutable_stoptime() {
  set_has_stoptime();
  if (stoptime_ == &::google::protobuf::internal::kEmptyString) {
    stoptime_ = new ::std::string;
  }
  return stoptime_;
}
inline ::std::string* RxSchedulerConfig_TimelineImportInfo::release_stoptime() {
  clear_has_stoptime();
  if (stoptime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stoptime_;
    stoptime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RxSchedulerConfig_TimelineImportInfo::set_allocated_stoptime(::std::string* stoptime) {
  if (stoptime_ != &::google::protobuf::internal::kEmptyString) {
    delete stoptime_;
  }
  if (stoptime) {
    set_has_stoptime();
    stoptime_ = stoptime;
  } else {
    clear_has_stoptime();
    stoptime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string filePath = 4;
inline bool RxSchedulerConfig_TimelineImportInfo::has_filepath() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RxSchedulerConfig_TimelineImportInfo::set_has_filepath() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RxSchedulerConfig_TimelineImportInfo::clear_has_filepath() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RxSchedulerConfig_TimelineImportInfo::clear_filepath() {
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    filepath_->clear();
  }
  clear_has_filepath();
}
inline const ::std::string& RxSchedulerConfig_TimelineImportInfo::filepath() const {
  return *filepath_;
}
inline void RxSchedulerConfig_TimelineImportInfo::set_filepath(const ::std::string& value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
}
inline void RxSchedulerConfig_TimelineImportInfo::set_filepath(const char* value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
}
inline void RxSchedulerConfig_TimelineImportInfo::set_filepath(const char* value, size_t size) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RxSchedulerConfig_TimelineImportInfo::mutable_filepath() {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  return filepath_;
}
inline ::std::string* RxSchedulerConfig_TimelineImportInfo::release_filepath() {
  clear_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filepath_;
    filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RxSchedulerConfig_TimelineImportInfo::set_allocated_filepath(::std::string* filepath) {
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (filepath) {
    set_has_filepath();
    filepath_ = filepath;
  } else {
    clear_has_filepath();
    filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RxSchedulerConfig_BlackoutImportInfo

// optional string filePath = 1;
inline bool RxSchedulerConfig_BlackoutImportInfo::has_filepath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RxSchedulerConfig_BlackoutImportInfo::set_has_filepath() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RxSchedulerConfig_BlackoutImportInfo::clear_has_filepath() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RxSchedulerConfig_BlackoutImportInfo::clear_filepath() {
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    filepath_->clear();
  }
  clear_has_filepath();
}
inline const ::std::string& RxSchedulerConfig_BlackoutImportInfo::filepath() const {
  return *filepath_;
}
inline void RxSchedulerConfig_BlackoutImportInfo::set_filepath(const ::std::string& value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
}
inline void RxSchedulerConfig_BlackoutImportInfo::set_filepath(const char* value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
}
inline void RxSchedulerConfig_BlackoutImportInfo::set_filepath(const char* value, size_t size) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RxSchedulerConfig_BlackoutImportInfo::mutable_filepath() {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  return filepath_;
}
inline ::std::string* RxSchedulerConfig_BlackoutImportInfo::release_filepath() {
  clear_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filepath_;
    filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RxSchedulerConfig_BlackoutImportInfo::set_allocated_filepath(::std::string* filepath) {
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (filepath) {
    set_has_filepath();
    filepath_ = filepath;
  } else {
    clear_has_filepath();
    filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RxSchedulerConfig

// optional string msgName = 1 [default = "service_rx_scheduler.RxSchedulerConfig"];
inline bool RxSchedulerConfig::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RxSchedulerConfig::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RxSchedulerConfig::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RxSchedulerConfig::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& RxSchedulerConfig::msgname() const {
  return *msgname_;
}
inline void RxSchedulerConfig::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void RxSchedulerConfig::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void RxSchedulerConfig::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RxSchedulerConfig::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* RxSchedulerConfig::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void RxSchedulerConfig::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// repeated .service_rx_scheduler.RxSchedulerConfig.ScheduleImportInfo scheduleImportInfos = 2;
inline int RxSchedulerConfig::scheduleimportinfos_size() const {
  return scheduleimportinfos_.size();
}
inline void RxSchedulerConfig::clear_scheduleimportinfos() {
  scheduleimportinfos_.Clear();
}
inline const ::service_rx_scheduler::RxSchedulerConfig_ScheduleImportInfo& RxSchedulerConfig::scheduleimportinfos(int index) const {
  return scheduleimportinfos_.Get(index);
}
inline ::service_rx_scheduler::RxSchedulerConfig_ScheduleImportInfo* RxSchedulerConfig::mutable_scheduleimportinfos(int index) {
  return scheduleimportinfos_.Mutable(index);
}
inline ::service_rx_scheduler::RxSchedulerConfig_ScheduleImportInfo* RxSchedulerConfig::add_scheduleimportinfos() {
  return scheduleimportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::service_rx_scheduler::RxSchedulerConfig_ScheduleImportInfo >&
RxSchedulerConfig::scheduleimportinfos() const {
  return scheduleimportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::service_rx_scheduler::RxSchedulerConfig_ScheduleImportInfo >*
RxSchedulerConfig::mutable_scheduleimportinfos() {
  return &scheduleimportinfos_;
}

// repeated .service_rx_scheduler.RxSchedulerConfig.TimelineImportInfo timelineImportInfos = 3;
inline int RxSchedulerConfig::timelineimportinfos_size() const {
  return timelineimportinfos_.size();
}
inline void RxSchedulerConfig::clear_timelineimportinfos() {
  timelineimportinfos_.Clear();
}
inline const ::service_rx_scheduler::RxSchedulerConfig_TimelineImportInfo& RxSchedulerConfig::timelineimportinfos(int index) const {
  return timelineimportinfos_.Get(index);
}
inline ::service_rx_scheduler::RxSchedulerConfig_TimelineImportInfo* RxSchedulerConfig::mutable_timelineimportinfos(int index) {
  return timelineimportinfos_.Mutable(index);
}
inline ::service_rx_scheduler::RxSchedulerConfig_TimelineImportInfo* RxSchedulerConfig::add_timelineimportinfos() {
  return timelineimportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::service_rx_scheduler::RxSchedulerConfig_TimelineImportInfo >&
RxSchedulerConfig::timelineimportinfos() const {
  return timelineimportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::service_rx_scheduler::RxSchedulerConfig_TimelineImportInfo >*
RxSchedulerConfig::mutable_timelineimportinfos() {
  return &timelineimportinfos_;
}

// repeated .service_rx_scheduler.RxSchedulerConfig.BlackoutImportInfo blackoutImportInfos = 4;
inline int RxSchedulerConfig::blackoutimportinfos_size() const {
  return blackoutimportinfos_.size();
}
inline void RxSchedulerConfig::clear_blackoutimportinfos() {
  blackoutimportinfos_.Clear();
}
inline const ::service_rx_scheduler::RxSchedulerConfig_BlackoutImportInfo& RxSchedulerConfig::blackoutimportinfos(int index) const {
  return blackoutimportinfos_.Get(index);
}
inline ::service_rx_scheduler::RxSchedulerConfig_BlackoutImportInfo* RxSchedulerConfig::mutable_blackoutimportinfos(int index) {
  return blackoutimportinfos_.Mutable(index);
}
inline ::service_rx_scheduler::RxSchedulerConfig_BlackoutImportInfo* RxSchedulerConfig::add_blackoutimportinfos() {
  return blackoutimportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::service_rx_scheduler::RxSchedulerConfig_BlackoutImportInfo >&
RxSchedulerConfig::blackoutimportinfos() const {
  return blackoutimportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::service_rx_scheduler::RxSchedulerConfig_BlackoutImportInfo >*
RxSchedulerConfig::mutable_blackoutimportinfos() {
  return &blackoutimportinfos_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_rx_scheduler

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_5frx_5fscheduler_2eproto__INCLUDED
