// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Products.proto

#ifndef PROTOBUF_Products_2eproto__INCLUDED
#define PROTOBUF_Products_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace products {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Products_2eproto();
void protobuf_AssignDesc_Products_2eproto();
void protobuf_ShutdownFile_Products_2eproto();

class FisD;
class FisD_Meta;
class FisDRequest;
class AudioAvailable;
class AudioRequest;

enum FisD_FileType {
  FisD_FileType_FS = 0,
  FisD_FileType_TC = 1,
  FisD_FileType_BER = 2
};
bool FisD_FileType_IsValid(int value);
const FisD_FileType FisD_FileType_FileType_MIN = FisD_FileType_FS;
const FisD_FileType FisD_FileType_FileType_MAX = FisD_FileType_BER;
const int FisD_FileType_FileType_ARRAYSIZE = FisD_FileType_FileType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FisD_FileType_descriptor();
inline const ::std::string& FisD_FileType_Name(FisD_FileType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FisD_FileType_descriptor(), value);
}
inline bool FisD_FileType_Parse(
    const ::std::string& name, FisD_FileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FisD_FileType>(
    FisD_FileType_descriptor(), name, value);
}
enum AudioAvailable_Status {
  AudioAvailable_Status_AVAILABLE = -1,
  AudioAvailable_Status_UNAVAILABLE = 0,
  AudioAvailable_Status_PENDING = 1
};
bool AudioAvailable_Status_IsValid(int value);
const AudioAvailable_Status AudioAvailable_Status_Status_MIN = AudioAvailable_Status_AVAILABLE;
const AudioAvailable_Status AudioAvailable_Status_Status_MAX = AudioAvailable_Status_PENDING;
const int AudioAvailable_Status_Status_ARRAYSIZE = AudioAvailable_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* AudioAvailable_Status_descriptor();
inline const ::std::string& AudioAvailable_Status_Name(AudioAvailable_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    AudioAvailable_Status_descriptor(), value);
}
inline bool AudioAvailable_Status_Parse(
    const ::std::string& name, AudioAvailable_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioAvailable_Status>(
    AudioAvailable_Status_descriptor(), name, value);
}
enum AudioRequest_TYPE {
  AudioRequest_TYPE_STREAM = 0,
  AudioRequest_TYPE_FILE = 1
};
bool AudioRequest_TYPE_IsValid(int value);
const AudioRequest_TYPE AudioRequest_TYPE_TYPE_MIN = AudioRequest_TYPE_STREAM;
const AudioRequest_TYPE AudioRequest_TYPE_TYPE_MAX = AudioRequest_TYPE_FILE;
const int AudioRequest_TYPE_TYPE_ARRAYSIZE = AudioRequest_TYPE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* AudioRequest_TYPE_descriptor();
inline const ::std::string& AudioRequest_TYPE_Name(AudioRequest_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    AudioRequest_TYPE_descriptor(), value);
}
inline bool AudioRequest_TYPE_Parse(
    const ::std::string& name, AudioRequest_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioRequest_TYPE>(
    AudioRequest_TYPE_descriptor(), name, value);
}
// ===================================================================

class FisD_Meta : public ::google::protobuf::Message {
 public:
  FisD_Meta();
  virtual ~FisD_Meta();

  FisD_Meta(const FisD_Meta& from);

  inline FisD_Meta& operator=(const FisD_Meta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FisD_Meta& default_instance();

  void Swap(FisD_Meta* other);

  // implements Message ----------------------------------------------

  FisD_Meta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FisD_Meta& from);
  void MergeFrom(const FisD_Meta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .products.FisD.FileType file_type = 1;
  inline bool has_file_type() const;
  inline void clear_file_type();
  static const int kFileTypeFieldNumber = 1;
  inline ::products::FisD_FileType file_type() const;
  inline void set_file_type(::products::FisD_FileType value);

  // optional string file_name = 2;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // optional string event_id = 3;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 3;
  inline const ::std::string& event_id() const;
  inline void set_event_id(const ::std::string& value);
  inline void set_event_id(const char* value);
  inline void set_event_id(const char* value, size_t size);
  inline ::std::string* mutable_event_id();
  inline ::std::string* release_event_id();
  inline void set_allocated_event_id(::std::string* event_id);

  // optional int32 soi = 4;
  inline bool has_soi() const;
  inline void clear_soi();
  static const int kSoiFieldNumber = 4;
  inline ::google::protobuf::int32 soi() const;
  inline void set_soi(::google::protobuf::int32 value);

  // optional string eltex = 5;
  inline bool has_eltex() const;
  inline void clear_eltex();
  static const int kEltexFieldNumber = 5;
  inline const ::std::string& eltex() const;
  inline void set_eltex(const ::std::string& value);
  inline void set_eltex(const char* value);
  inline void set_eltex(const char* value, size_t size);
  inline ::std::string* mutable_eltex();
  inline ::std::string* release_eltex();
  inline void set_allocated_eltex(::std::string* eltex);

  // @@protoc_insertion_point(class_scope:products.FisD.Meta)
 private:
  inline void set_has_file_type();
  inline void clear_has_file_type();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_soi();
  inline void clear_has_soi();
  inline void set_has_eltex();
  inline void clear_has_eltex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* file_name_;
  int file_type_;
  ::google::protobuf::int32 soi_;
  ::std::string* event_id_;
  ::std::string* eltex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Products_2eproto();
  friend void protobuf_AssignDesc_Products_2eproto();
  friend void protobuf_ShutdownFile_Products_2eproto();

  void InitAsDefaultInstance();
  static FisD_Meta* default_instance_;
};
// -------------------------------------------------------------------

class FisD : public ::google::protobuf::Message {
 public:
  FisD();
  virtual ~FisD();

  FisD(const FisD& from);

  inline FisD& operator=(const FisD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FisD& default_instance();

  void Swap(FisD* other);

  // implements Message ----------------------------------------------

  FisD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FisD& from);
  void MergeFrom(const FisD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FisD_Meta Meta;

  typedef FisD_FileType FileType;
  static const FileType FS = FisD_FileType_FS;
  static const FileType TC = FisD_FileType_TC;
  static const FileType BER = FisD_FileType_BER;
  static inline bool FileType_IsValid(int value) {
    return FisD_FileType_IsValid(value);
  }
  static const FileType FileType_MIN =
    FisD_FileType_FileType_MIN;
  static const FileType FileType_MAX =
    FisD_FileType_FileType_MAX;
  static const int FileType_ARRAYSIZE =
    FisD_FileType_FileType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FileType_descriptor() {
    return FisD_FileType_descriptor();
  }
  static inline const ::std::string& FileType_Name(FileType value) {
    return FisD_FileType_Name(value);
  }
  static inline bool FileType_Parse(const ::std::string& name,
      FileType* value) {
    return FisD_FileType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "FISD"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional bytes file = 2;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 2;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const void* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  inline void set_allocated_file(::std::string* file);

  // optional .products.FisD.Meta meta = 3;
  inline bool has_meta() const;
  inline void clear_meta();
  static const int kMetaFieldNumber = 3;
  inline const ::products::FisD_Meta& meta() const;
  inline ::products::FisD_Meta* mutable_meta();
  inline ::products::FisD_Meta* release_meta();
  inline void set_allocated_meta(::products::FisD_Meta* meta);

  // @@protoc_insertion_point(class_scope:products.FisD)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_meta();
  inline void clear_has_meta();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* file_;
  ::products::FisD_Meta* meta_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Products_2eproto();
  friend void protobuf_AssignDesc_Products_2eproto();
  friend void protobuf_ShutdownFile_Products_2eproto();

  void InitAsDefaultInstance();
  static FisD* default_instance_;
};
// -------------------------------------------------------------------

class FisDRequest : public ::google::protobuf::Message {
 public:
  FisDRequest();
  virtual ~FisDRequest();

  FisDRequest(const FisDRequest& from);

  inline FisDRequest& operator=(const FisDRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FisDRequest& default_instance();

  void Swap(FisDRequest* other);

  // implements Message ----------------------------------------------

  FisDRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FisDRequest& from);
  void MergeFrom(const FisDRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "FISDREQUEST"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional string event_id = 2;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 2;
  inline const ::std::string& event_id() const;
  inline void set_event_id(const ::std::string& value);
  inline void set_event_id(const char* value);
  inline void set_event_id(const char* value, size_t size);
  inline ::std::string* mutable_event_id();
  inline ::std::string* release_event_id();
  inline void set_allocated_event_id(::std::string* event_id);

  // optional int64 soi = 3;
  inline bool has_soi() const;
  inline void clear_soi();
  static const int kSoiFieldNumber = 3;
  inline ::google::protobuf::int64 soi() const;
  inline void set_soi(::google::protobuf::int64 value);

  // optional string eltex = 4;
  inline bool has_eltex() const;
  inline void clear_eltex();
  static const int kEltexFieldNumber = 4;
  inline const ::std::string& eltex() const;
  inline void set_eltex(const ::std::string& value);
  inline void set_eltex(const char* value);
  inline void set_eltex(const char* value, size_t size);
  inline ::std::string* mutable_eltex();
  inline ::std::string* release_eltex();
  inline void set_allocated_eltex(::std::string* eltex);

  // @@protoc_insertion_point(class_scope:products.FisDRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_soi();
  inline void clear_has_soi();
  inline void set_has_eltex();
  inline void clear_has_eltex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* event_id_;
  ::google::protobuf::int64 soi_;
  ::std::string* eltex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Products_2eproto();
  friend void protobuf_AssignDesc_Products_2eproto();
  friend void protobuf_ShutdownFile_Products_2eproto();

  void InitAsDefaultInstance();
  static FisDRequest* default_instance_;
};
// -------------------------------------------------------------------

class AudioAvailable : public ::google::protobuf::Message {
 public:
  AudioAvailable();
  virtual ~AudioAvailable();

  AudioAvailable(const AudioAvailable& from);

  inline AudioAvailable& operator=(const AudioAvailable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioAvailable& default_instance();

  void Swap(AudioAvailable* other);

  // implements Message ----------------------------------------------

  AudioAvailable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AudioAvailable& from);
  void MergeFrom(const AudioAvailable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AudioAvailable_Status Status;
  static const Status AVAILABLE = AudioAvailable_Status_AVAILABLE;
  static const Status UNAVAILABLE = AudioAvailable_Status_UNAVAILABLE;
  static const Status PENDING = AudioAvailable_Status_PENDING;
  static inline bool Status_IsValid(int value) {
    return AudioAvailable_Status_IsValid(value);
  }
  static const Status Status_MIN =
    AudioAvailable_Status_Status_MIN;
  static const Status Status_MAX =
    AudioAvailable_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    AudioAvailable_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return AudioAvailable_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return AudioAvailable_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return AudioAvailable_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "AUDIOAVAILABLE"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional double cffreq = 2;
  inline bool has_cffreq() const;
  inline void clear_cffreq();
  static const int kCffreqFieldNumber = 2;
  inline double cffreq() const;
  inline void set_cffreq(double value);

  // optional .products.AudioAvailable.Status status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::products::AudioAvailable_Status status() const;
  inline void set_status(::products::AudioAvailable_Status value);

  // optional string audiofile = 4;
  inline bool has_audiofile() const;
  inline void clear_audiofile();
  static const int kAudiofileFieldNumber = 4;
  inline const ::std::string& audiofile() const;
  inline void set_audiofile(const ::std::string& value);
  inline void set_audiofile(const char* value);
  inline void set_audiofile(const char* value, size_t size);
  inline ::std::string* mutable_audiofile();
  inline ::std::string* release_audiofile();
  inline void set_allocated_audiofile(::std::string* audiofile);

  // optional int32 msgID = 5;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 5;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);

  // optional string soiNum = 6;
  inline bool has_soinum() const;
  inline void clear_soinum();
  static const int kSoiNumFieldNumber = 6;
  inline const ::std::string& soinum() const;
  inline void set_soinum(const ::std::string& value);
  inline void set_soinum(const char* value);
  inline void set_soinum(const char* value, size_t size);
  inline ::std::string* mutable_soinum();
  inline ::std::string* release_soinum();
  inline void set_allocated_soinum(::std::string* soinum);

  // @@protoc_insertion_point(class_scope:products.AudioAvailable)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_cffreq();
  inline void clear_has_cffreq();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_audiofile();
  inline void clear_has_audiofile();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_soinum();
  inline void clear_has_soinum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  double cffreq_;
  ::std::string* audiofile_;
  int status_;
  ::google::protobuf::int32 msgid_;
  ::std::string* soinum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Products_2eproto();
  friend void protobuf_AssignDesc_Products_2eproto();
  friend void protobuf_ShutdownFile_Products_2eproto();

  void InitAsDefaultInstance();
  static AudioAvailable* default_instance_;
};
// -------------------------------------------------------------------

class AudioRequest : public ::google::protobuf::Message {
 public:
  AudioRequest();
  virtual ~AudioRequest();

  AudioRequest(const AudioRequest& from);

  inline AudioRequest& operator=(const AudioRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioRequest& default_instance();

  void Swap(AudioRequest* other);

  // implements Message ----------------------------------------------

  AudioRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AudioRequest& from);
  void MergeFrom(const AudioRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AudioRequest_TYPE TYPE;
  static const TYPE STREAM = AudioRequest_TYPE_STREAM;
  static const TYPE FILE = AudioRequest_TYPE_FILE;
  static inline bool TYPE_IsValid(int value) {
    return AudioRequest_TYPE_IsValid(value);
  }
  static const TYPE TYPE_MIN =
    AudioRequest_TYPE_TYPE_MIN;
  static const TYPE TYPE_MAX =
    AudioRequest_TYPE_TYPE_MAX;
  static const int TYPE_ARRAYSIZE =
    AudioRequest_TYPE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TYPE_descriptor() {
    return AudioRequest_TYPE_descriptor();
  }
  static inline const ::std::string& TYPE_Name(TYPE value) {
    return AudioRequest_TYPE_Name(value);
  }
  static inline bool TYPE_Parse(const ::std::string& name,
      TYPE* value) {
    return AudioRequest_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "AUDIOREQUEST"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional .products.AudioRequest.TYPE type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::products::AudioRequest_TYPE type() const;
  inline void set_type(::products::AudioRequest_TYPE value);

  // optional int32 appChan = 3;
  inline bool has_appchan() const;
  inline void clear_appchan();
  static const int kAppChanFieldNumber = 3;
  inline ::google::protobuf::int32 appchan() const;
  inline void set_appchan(::google::protobuf::int32 value);

  // optional float rfFreq = 4;
  inline bool has_rffreq() const;
  inline void clear_rffreq();
  static const int kRfFreqFieldNumber = 4;
  inline float rffreq() const;
  inline void set_rffreq(float value);

  // optional int64 soi = 5;
  inline bool has_soi() const;
  inline void clear_soi();
  static const int kSoiFieldNumber = 5;
  inline ::google::protobuf::int64 soi() const;
  inline void set_soi(::google::protobuf::int64 value);

  // optional string eltex = 6;
  inline bool has_eltex() const;
  inline void clear_eltex();
  static const int kEltexFieldNumber = 6;
  inline const ::std::string& eltex() const;
  inline void set_eltex(const ::std::string& value);
  inline void set_eltex(const char* value);
  inline void set_eltex(const char* value, size_t size);
  inline ::std::string* mutable_eltex();
  inline ::std::string* release_eltex();
  inline void set_allocated_eltex(::std::string* eltex);

  // optional bool start = 7;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 7;
  inline bool start() const;
  inline void set_start(bool value);

  // @@protoc_insertion_point(class_scope:products.AudioRequest)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_appchan();
  inline void clear_has_appchan();
  inline void set_has_rffreq();
  inline void clear_has_rffreq();
  inline void set_has_soi();
  inline void clear_has_soi();
  inline void set_has_eltex();
  inline void clear_has_eltex();
  inline void set_has_start();
  inline void clear_has_start();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  int type_;
  ::google::protobuf::int32 appchan_;
  ::google::protobuf::int64 soi_;
  float rffreq_;
  bool start_;
  ::std::string* eltex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Products_2eproto();
  friend void protobuf_AssignDesc_Products_2eproto();
  friend void protobuf_ShutdownFile_Products_2eproto();

  void InitAsDefaultInstance();
  static AudioRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// FisD_Meta

// optional .products.FisD.FileType file_type = 1;
inline bool FisD_Meta::has_file_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FisD_Meta::set_has_file_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FisD_Meta::clear_has_file_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FisD_Meta::clear_file_type() {
  file_type_ = 0;
  clear_has_file_type();
}
inline ::products::FisD_FileType FisD_Meta::file_type() const {
  return static_cast< ::products::FisD_FileType >(file_type_);
}
inline void FisD_Meta::set_file_type(::products::FisD_FileType value) {
  assert(::products::FisD_FileType_IsValid(value));
  set_has_file_type();
  file_type_ = value;
}

// optional string file_name = 2;
inline bool FisD_Meta::has_file_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FisD_Meta::set_has_file_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FisD_Meta::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FisD_Meta::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& FisD_Meta::file_name() const {
  return *file_name_;
}
inline void FisD_Meta::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void FisD_Meta::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void FisD_Meta::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FisD_Meta::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* FisD_Meta::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FisD_Meta::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string event_id = 3;
inline bool FisD_Meta::has_event_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FisD_Meta::set_has_event_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FisD_Meta::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FisD_Meta::clear_event_id() {
  if (event_id_ != &::google::protobuf::internal::kEmptyString) {
    event_id_->clear();
  }
  clear_has_event_id();
}
inline const ::std::string& FisD_Meta::event_id() const {
  return *event_id_;
}
inline void FisD_Meta::set_event_id(const ::std::string& value) {
  set_has_event_id();
  if (event_id_ == &::google::protobuf::internal::kEmptyString) {
    event_id_ = new ::std::string;
  }
  event_id_->assign(value);
}
inline void FisD_Meta::set_event_id(const char* value) {
  set_has_event_id();
  if (event_id_ == &::google::protobuf::internal::kEmptyString) {
    event_id_ = new ::std::string;
  }
  event_id_->assign(value);
}
inline void FisD_Meta::set_event_id(const char* value, size_t size) {
  set_has_event_id();
  if (event_id_ == &::google::protobuf::internal::kEmptyString) {
    event_id_ = new ::std::string;
  }
  event_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FisD_Meta::mutable_event_id() {
  set_has_event_id();
  if (event_id_ == &::google::protobuf::internal::kEmptyString) {
    event_id_ = new ::std::string;
  }
  return event_id_;
}
inline ::std::string* FisD_Meta::release_event_id() {
  clear_has_event_id();
  if (event_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_id_;
    event_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FisD_Meta::set_allocated_event_id(::std::string* event_id) {
  if (event_id_ != &::google::protobuf::internal::kEmptyString) {
    delete event_id_;
  }
  if (event_id) {
    set_has_event_id();
    event_id_ = event_id;
  } else {
    clear_has_event_id();
    event_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 soi = 4;
inline bool FisD_Meta::has_soi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FisD_Meta::set_has_soi() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FisD_Meta::clear_has_soi() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FisD_Meta::clear_soi() {
  soi_ = 0;
  clear_has_soi();
}
inline ::google::protobuf::int32 FisD_Meta::soi() const {
  return soi_;
}
inline void FisD_Meta::set_soi(::google::protobuf::int32 value) {
  set_has_soi();
  soi_ = value;
}

// optional string eltex = 5;
inline bool FisD_Meta::has_eltex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FisD_Meta::set_has_eltex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FisD_Meta::clear_has_eltex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FisD_Meta::clear_eltex() {
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    eltex_->clear();
  }
  clear_has_eltex();
}
inline const ::std::string& FisD_Meta::eltex() const {
  return *eltex_;
}
inline void FisD_Meta::set_eltex(const ::std::string& value) {
  set_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    eltex_ = new ::std::string;
  }
  eltex_->assign(value);
}
inline void FisD_Meta::set_eltex(const char* value) {
  set_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    eltex_ = new ::std::string;
  }
  eltex_->assign(value);
}
inline void FisD_Meta::set_eltex(const char* value, size_t size) {
  set_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    eltex_ = new ::std::string;
  }
  eltex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FisD_Meta::mutable_eltex() {
  set_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    eltex_ = new ::std::string;
  }
  return eltex_;
}
inline ::std::string* FisD_Meta::release_eltex() {
  clear_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eltex_;
    eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FisD_Meta::set_allocated_eltex(::std::string* eltex) {
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    delete eltex_;
  }
  if (eltex) {
    set_has_eltex();
    eltex_ = eltex;
  } else {
    clear_has_eltex();
    eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FisD

// optional string msgName = 1 [default = "FISD"];
inline bool FisD::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FisD::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FisD::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FisD::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& FisD::msgname() const {
  return *msgname_;
}
inline void FisD::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void FisD::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void FisD::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FisD::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* FisD::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void FisD::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional bytes file = 2;
inline bool FisD::has_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FisD::set_has_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FisD::clear_has_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FisD::clear_file() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& FisD::file() const {
  return *file_;
}
inline void FisD::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void FisD::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void FisD::set_file(const void* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FisD::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  return file_;
}
inline ::std::string* FisD::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FisD::set_allocated_file(::std::string* file) {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (file) {
    set_has_file();
    file_ = file;
  } else {
    clear_has_file();
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .products.FisD.Meta meta = 3;
inline bool FisD::has_meta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FisD::set_has_meta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FisD::clear_has_meta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FisD::clear_meta() {
  if (meta_ != NULL) meta_->::products::FisD_Meta::Clear();
  clear_has_meta();
}
inline const ::products::FisD_Meta& FisD::meta() const {
  return meta_ != NULL ? *meta_ : *default_instance_->meta_;
}
inline ::products::FisD_Meta* FisD::mutable_meta() {
  set_has_meta();
  if (meta_ == NULL) meta_ = new ::products::FisD_Meta;
  return meta_;
}
inline ::products::FisD_Meta* FisD::release_meta() {
  clear_has_meta();
  ::products::FisD_Meta* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline void FisD::set_allocated_meta(::products::FisD_Meta* meta) {
  delete meta_;
  meta_ = meta;
  if (meta) {
    set_has_meta();
  } else {
    clear_has_meta();
  }
}

// -------------------------------------------------------------------

// FisDRequest

// optional string msgName = 1 [default = "FISDREQUEST"];
inline bool FisDRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FisDRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FisDRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FisDRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& FisDRequest::msgname() const {
  return *msgname_;
}
inline void FisDRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void FisDRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void FisDRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FisDRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* FisDRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void FisDRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional string event_id = 2;
inline bool FisDRequest::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FisDRequest::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FisDRequest::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FisDRequest::clear_event_id() {
  if (event_id_ != &::google::protobuf::internal::kEmptyString) {
    event_id_->clear();
  }
  clear_has_event_id();
}
inline const ::std::string& FisDRequest::event_id() const {
  return *event_id_;
}
inline void FisDRequest::set_event_id(const ::std::string& value) {
  set_has_event_id();
  if (event_id_ == &::google::protobuf::internal::kEmptyString) {
    event_id_ = new ::std::string;
  }
  event_id_->assign(value);
}
inline void FisDRequest::set_event_id(const char* value) {
  set_has_event_id();
  if (event_id_ == &::google::protobuf::internal::kEmptyString) {
    event_id_ = new ::std::string;
  }
  event_id_->assign(value);
}
inline void FisDRequest::set_event_id(const char* value, size_t size) {
  set_has_event_id();
  if (event_id_ == &::google::protobuf::internal::kEmptyString) {
    event_id_ = new ::std::string;
  }
  event_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FisDRequest::mutable_event_id() {
  set_has_event_id();
  if (event_id_ == &::google::protobuf::internal::kEmptyString) {
    event_id_ = new ::std::string;
  }
  return event_id_;
}
inline ::std::string* FisDRequest::release_event_id() {
  clear_has_event_id();
  if (event_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_id_;
    event_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FisDRequest::set_allocated_event_id(::std::string* event_id) {
  if (event_id_ != &::google::protobuf::internal::kEmptyString) {
    delete event_id_;
  }
  if (event_id) {
    set_has_event_id();
    event_id_ = event_id;
  } else {
    clear_has_event_id();
    event_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 soi = 3;
inline bool FisDRequest::has_soi() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FisDRequest::set_has_soi() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FisDRequest::clear_has_soi() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FisDRequest::clear_soi() {
  soi_ = GOOGLE_LONGLONG(0);
  clear_has_soi();
}
inline ::google::protobuf::int64 FisDRequest::soi() const {
  return soi_;
}
inline void FisDRequest::set_soi(::google::protobuf::int64 value) {
  set_has_soi();
  soi_ = value;
}

// optional string eltex = 4;
inline bool FisDRequest::has_eltex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FisDRequest::set_has_eltex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FisDRequest::clear_has_eltex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FisDRequest::clear_eltex() {
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    eltex_->clear();
  }
  clear_has_eltex();
}
inline const ::std::string& FisDRequest::eltex() const {
  return *eltex_;
}
inline void FisDRequest::set_eltex(const ::std::string& value) {
  set_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    eltex_ = new ::std::string;
  }
  eltex_->assign(value);
}
inline void FisDRequest::set_eltex(const char* value) {
  set_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    eltex_ = new ::std::string;
  }
  eltex_->assign(value);
}
inline void FisDRequest::set_eltex(const char* value, size_t size) {
  set_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    eltex_ = new ::std::string;
  }
  eltex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FisDRequest::mutable_eltex() {
  set_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    eltex_ = new ::std::string;
  }
  return eltex_;
}
inline ::std::string* FisDRequest::release_eltex() {
  clear_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eltex_;
    eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FisDRequest::set_allocated_eltex(::std::string* eltex) {
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    delete eltex_;
  }
  if (eltex) {
    set_has_eltex();
    eltex_ = eltex;
  } else {
    clear_has_eltex();
    eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AudioAvailable

// optional string msgName = 1 [default = "AUDIOAVAILABLE"];
inline bool AudioAvailable::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioAvailable::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioAvailable::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioAvailable::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& AudioAvailable::msgname() const {
  return *msgname_;
}
inline void AudioAvailable::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void AudioAvailable::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void AudioAvailable::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AudioAvailable::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* AudioAvailable::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void AudioAvailable::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional double cffreq = 2;
inline bool AudioAvailable::has_cffreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioAvailable::set_has_cffreq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioAvailable::clear_has_cffreq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioAvailable::clear_cffreq() {
  cffreq_ = 0;
  clear_has_cffreq();
}
inline double AudioAvailable::cffreq() const {
  return cffreq_;
}
inline void AudioAvailable::set_cffreq(double value) {
  set_has_cffreq();
  cffreq_ = value;
}

// optional .products.AudioAvailable.Status status = 3;
inline bool AudioAvailable::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioAvailable::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AudioAvailable::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AudioAvailable::clear_status() {
  status_ = -1;
  clear_has_status();
}
inline ::products::AudioAvailable_Status AudioAvailable::status() const {
  return static_cast< ::products::AudioAvailable_Status >(status_);
}
inline void AudioAvailable::set_status(::products::AudioAvailable_Status value) {
  assert(::products::AudioAvailable_Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional string audiofile = 4;
inline bool AudioAvailable::has_audiofile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AudioAvailable::set_has_audiofile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AudioAvailable::clear_has_audiofile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AudioAvailable::clear_audiofile() {
  if (audiofile_ != &::google::protobuf::internal::kEmptyString) {
    audiofile_->clear();
  }
  clear_has_audiofile();
}
inline const ::std::string& AudioAvailable::audiofile() const {
  return *audiofile_;
}
inline void AudioAvailable::set_audiofile(const ::std::string& value) {
  set_has_audiofile();
  if (audiofile_ == &::google::protobuf::internal::kEmptyString) {
    audiofile_ = new ::std::string;
  }
  audiofile_->assign(value);
}
inline void AudioAvailable::set_audiofile(const char* value) {
  set_has_audiofile();
  if (audiofile_ == &::google::protobuf::internal::kEmptyString) {
    audiofile_ = new ::std::string;
  }
  audiofile_->assign(value);
}
inline void AudioAvailable::set_audiofile(const char* value, size_t size) {
  set_has_audiofile();
  if (audiofile_ == &::google::protobuf::internal::kEmptyString) {
    audiofile_ = new ::std::string;
  }
  audiofile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AudioAvailable::mutable_audiofile() {
  set_has_audiofile();
  if (audiofile_ == &::google::protobuf::internal::kEmptyString) {
    audiofile_ = new ::std::string;
  }
  return audiofile_;
}
inline ::std::string* AudioAvailable::release_audiofile() {
  clear_has_audiofile();
  if (audiofile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = audiofile_;
    audiofile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AudioAvailable::set_allocated_audiofile(::std::string* audiofile) {
  if (audiofile_ != &::google::protobuf::internal::kEmptyString) {
    delete audiofile_;
  }
  if (audiofile) {
    set_has_audiofile();
    audiofile_ = audiofile;
  } else {
    clear_has_audiofile();
    audiofile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 msgID = 5;
inline bool AudioAvailable::has_msgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AudioAvailable::set_has_msgid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AudioAvailable::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AudioAvailable::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 AudioAvailable::msgid() const {
  return msgid_;
}
inline void AudioAvailable::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
}

// optional string soiNum = 6;
inline bool AudioAvailable::has_soinum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AudioAvailable::set_has_soinum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AudioAvailable::clear_has_soinum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AudioAvailable::clear_soinum() {
  if (soinum_ != &::google::protobuf::internal::kEmptyString) {
    soinum_->clear();
  }
  clear_has_soinum();
}
inline const ::std::string& AudioAvailable::soinum() const {
  return *soinum_;
}
inline void AudioAvailable::set_soinum(const ::std::string& value) {
  set_has_soinum();
  if (soinum_ == &::google::protobuf::internal::kEmptyString) {
    soinum_ = new ::std::string;
  }
  soinum_->assign(value);
}
inline void AudioAvailable::set_soinum(const char* value) {
  set_has_soinum();
  if (soinum_ == &::google::protobuf::internal::kEmptyString) {
    soinum_ = new ::std::string;
  }
  soinum_->assign(value);
}
inline void AudioAvailable::set_soinum(const char* value, size_t size) {
  set_has_soinum();
  if (soinum_ == &::google::protobuf::internal::kEmptyString) {
    soinum_ = new ::std::string;
  }
  soinum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AudioAvailable::mutable_soinum() {
  set_has_soinum();
  if (soinum_ == &::google::protobuf::internal::kEmptyString) {
    soinum_ = new ::std::string;
  }
  return soinum_;
}
inline ::std::string* AudioAvailable::release_soinum() {
  clear_has_soinum();
  if (soinum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = soinum_;
    soinum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AudioAvailable::set_allocated_soinum(::std::string* soinum) {
  if (soinum_ != &::google::protobuf::internal::kEmptyString) {
    delete soinum_;
  }
  if (soinum) {
    set_has_soinum();
    soinum_ = soinum;
  } else {
    clear_has_soinum();
    soinum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AudioRequest

// optional string msgName = 1 [default = "AUDIOREQUEST"];
inline bool AudioRequest::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioRequest::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioRequest::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioRequest::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& AudioRequest::msgname() const {
  return *msgname_;
}
inline void AudioRequest::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void AudioRequest::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void AudioRequest::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AudioRequest::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* AudioRequest::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void AudioRequest::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional .products.AudioRequest.TYPE type = 2;
inline bool AudioRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::products::AudioRequest_TYPE AudioRequest::type() const {
  return static_cast< ::products::AudioRequest_TYPE >(type_);
}
inline void AudioRequest::set_type(::products::AudioRequest_TYPE value) {
  assert(::products::AudioRequest_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 appChan = 3;
inline bool AudioRequest::has_appchan() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioRequest::set_has_appchan() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AudioRequest::clear_has_appchan() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AudioRequest::clear_appchan() {
  appchan_ = 0;
  clear_has_appchan();
}
inline ::google::protobuf::int32 AudioRequest::appchan() const {
  return appchan_;
}
inline void AudioRequest::set_appchan(::google::protobuf::int32 value) {
  set_has_appchan();
  appchan_ = value;
}

// optional float rfFreq = 4;
inline bool AudioRequest::has_rffreq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AudioRequest::set_has_rffreq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AudioRequest::clear_has_rffreq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AudioRequest::clear_rffreq() {
  rffreq_ = 0;
  clear_has_rffreq();
}
inline float AudioRequest::rffreq() const {
  return rffreq_;
}
inline void AudioRequest::set_rffreq(float value) {
  set_has_rffreq();
  rffreq_ = value;
}

// optional int64 soi = 5;
inline bool AudioRequest::has_soi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AudioRequest::set_has_soi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AudioRequest::clear_has_soi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AudioRequest::clear_soi() {
  soi_ = GOOGLE_LONGLONG(0);
  clear_has_soi();
}
inline ::google::protobuf::int64 AudioRequest::soi() const {
  return soi_;
}
inline void AudioRequest::set_soi(::google::protobuf::int64 value) {
  set_has_soi();
  soi_ = value;
}

// optional string eltex = 6;
inline bool AudioRequest::has_eltex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AudioRequest::set_has_eltex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AudioRequest::clear_has_eltex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AudioRequest::clear_eltex() {
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    eltex_->clear();
  }
  clear_has_eltex();
}
inline const ::std::string& AudioRequest::eltex() const {
  return *eltex_;
}
inline void AudioRequest::set_eltex(const ::std::string& value) {
  set_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    eltex_ = new ::std::string;
  }
  eltex_->assign(value);
}
inline void AudioRequest::set_eltex(const char* value) {
  set_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    eltex_ = new ::std::string;
  }
  eltex_->assign(value);
}
inline void AudioRequest::set_eltex(const char* value, size_t size) {
  set_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    eltex_ = new ::std::string;
  }
  eltex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AudioRequest::mutable_eltex() {
  set_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    eltex_ = new ::std::string;
  }
  return eltex_;
}
inline ::std::string* AudioRequest::release_eltex() {
  clear_has_eltex();
  if (eltex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eltex_;
    eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AudioRequest::set_allocated_eltex(::std::string* eltex) {
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    delete eltex_;
  }
  if (eltex) {
    set_has_eltex();
    eltex_ = eltex;
  } else {
    clear_has_eltex();
    eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool start = 7;
inline bool AudioRequest::has_start() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AudioRequest::set_has_start() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AudioRequest::clear_has_start() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AudioRequest::clear_start() {
  start_ = false;
  clear_has_start();
}
inline bool AudioRequest::start() const {
  return start_;
}
inline void AudioRequest::set_start(bool value) {
  set_has_start();
  start_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace products

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::products::FisD_FileType>() {
  return ::products::FisD_FileType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::products::AudioAvailable_Status>() {
  return ::products::AudioAvailable_Status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::products::AudioRequest_TYPE>() {
  return ::products::AudioRequest_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Products_2eproto__INCLUDED
