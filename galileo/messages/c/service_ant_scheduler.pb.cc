// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_ant_scheduler.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service_ant_scheduler.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace service_ant_scheduler {

namespace {

const ::google::protobuf::Descriptor* ANTSchedulerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ANTSchedulerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ANTSchedulerConfig_TimelineImportInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ANTSchedulerConfig_TimelineImportInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ANTSchedulerConfig_BoxScanImportInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ANTSchedulerConfig_BoxScanImportInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_5fant_5fscheduler_2eproto() {
  protobuf_AddDesc_service_5fant_5fscheduler_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service_ant_scheduler.proto");
  GOOGLE_CHECK(file != NULL);
  ANTSchedulerConfig_descriptor_ = file->message_type(0);
  static const int ANTSchedulerConfig_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig, showgui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig, antenna_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig, polarity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig, schedulepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig, timelineimportinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig, boxscanimportinfos_),
  };
  ANTSchedulerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ANTSchedulerConfig_descriptor_,
      ANTSchedulerConfig::default_instance_,
      ANTSchedulerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ANTSchedulerConfig));
  ANTSchedulerConfig_TimelineImportInfo_descriptor_ = ANTSchedulerConfig_descriptor_->nested_type(0);
  static const int ANTSchedulerConfig_TimelineImportInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig_TimelineImportInfo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig_TimelineImportInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig_TimelineImportInfo, stoptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig_TimelineImportInfo, filepath_),
  };
  ANTSchedulerConfig_TimelineImportInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ANTSchedulerConfig_TimelineImportInfo_descriptor_,
      ANTSchedulerConfig_TimelineImportInfo::default_instance_,
      ANTSchedulerConfig_TimelineImportInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig_TimelineImportInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig_TimelineImportInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ANTSchedulerConfig_TimelineImportInfo));
  ANTSchedulerConfig_BoxScanImportInfo_descriptor_ = ANTSchedulerConfig_descriptor_->nested_type(1);
  static const int ANTSchedulerConfig_BoxScanImportInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig_BoxScanImportInfo, azstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig_BoxScanImportInfo, azstop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig_BoxScanImportInfo, azstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig_BoxScanImportInfo, elstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig_BoxScanImportInfo, elstop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig_BoxScanImportInfo, elstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig_BoxScanImportInfo, steptime_),
  };
  ANTSchedulerConfig_BoxScanImportInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ANTSchedulerConfig_BoxScanImportInfo_descriptor_,
      ANTSchedulerConfig_BoxScanImportInfo::default_instance_,
      ANTSchedulerConfig_BoxScanImportInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig_BoxScanImportInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ANTSchedulerConfig_BoxScanImportInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ANTSchedulerConfig_BoxScanImportInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_5fant_5fscheduler_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ANTSchedulerConfig_descriptor_, &ANTSchedulerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ANTSchedulerConfig_TimelineImportInfo_descriptor_, &ANTSchedulerConfig_TimelineImportInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ANTSchedulerConfig_BoxScanImportInfo_descriptor_, &ANTSchedulerConfig_BoxScanImportInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_5fant_5fscheduler_2eproto() {
  delete ANTSchedulerConfig::default_instance_;
  delete ANTSchedulerConfig_reflection_;
  delete ANTSchedulerConfig::_default_msgname_;
  delete ANTSchedulerConfig_TimelineImportInfo::default_instance_;
  delete ANTSchedulerConfig_TimelineImportInfo_reflection_;
  delete ANTSchedulerConfig_BoxScanImportInfo::default_instance_;
  delete ANTSchedulerConfig_BoxScanImportInfo_reflection_;
}

void protobuf_AddDesc_service_5fant_5fscheduler_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033service_ant_scheduler.proto\022\025service_a"
    "nt_scheduler\"\336\004\n\022ANTSchedulerConfig\0229\n\007m"
    "sgName\030\001 \001(\t:(service_ant_scheduler.AntS"
    "chedulerConfig\022\026\n\007showGUI\030\002 \001(\010:\005false\022\017"
    "\n\007antenna\030\003 \002(\005\022\014\n\004mode\030\004 \001(\005\022\020\n\010polarit"
    "y\030\005 \001(\005\022\020\n\010priority\030\006 \001(\005\022\024\n\014schedulePat"
    "h\030\007 \001(\t\022Y\n\023timelineImportInfos\030\010 \003(\0132<.s"
    "ervice_ant_scheduler.ANTSchedulerConfig."
    "TimelineImportInfo\022W\n\022boxScanImportInfos"
    "\030\t \001(\0132;.service_ant_scheduler.ANTSchedu"
    "lerConfig.BoxScanImportInfo\032^\n\022TimelineI"
    "mportInfo\022\021\n\tchannelId\030\001 \001(\t\022\021\n\tstartTim"
    "e\030\002 \001(\t\022\020\n\010stopTime\030\003 \001(\t\022\020\n\010filePath\030\004 "
    "\001(\t\032\207\001\n\021BoxScanImportInfo\022\017\n\007azStart\030\001 \001"
    "(\002\022\016\n\006azStop\030\002 \001(\002\022\016\n\006azStep\030\003 \001(\002\022\017\n\007el"
    "Start\030\004 \001(\002\022\016\n\006elStop\030\005 \001(\002\022\016\n\006elStep\030\006 "
    "\001(\002\022\020\n\010stepTime\030\007 \001(\002B\025\n\023fv.protos.kepsv"
    "isor", 684);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service_ant_scheduler.proto", &protobuf_RegisterTypes);
  ANTSchedulerConfig::_default_msgname_ =
      new ::std::string("service_ant_scheduler.AntSchedulerConfig", 40);
  ANTSchedulerConfig::default_instance_ = new ANTSchedulerConfig();
  ANTSchedulerConfig_TimelineImportInfo::default_instance_ = new ANTSchedulerConfig_TimelineImportInfo();
  ANTSchedulerConfig_BoxScanImportInfo::default_instance_ = new ANTSchedulerConfig_BoxScanImportInfo();
  ANTSchedulerConfig::default_instance_->InitAsDefaultInstance();
  ANTSchedulerConfig_TimelineImportInfo::default_instance_->InitAsDefaultInstance();
  ANTSchedulerConfig_BoxScanImportInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_5fant_5fscheduler_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_5fant_5fscheduler_2eproto {
  StaticDescriptorInitializer_service_5fant_5fscheduler_2eproto() {
    protobuf_AddDesc_service_5fant_5fscheduler_2eproto();
  }
} static_descriptor_initializer_service_5fant_5fscheduler_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ANTSchedulerConfig_TimelineImportInfo::kChannelIdFieldNumber;
const int ANTSchedulerConfig_TimelineImportInfo::kStartTimeFieldNumber;
const int ANTSchedulerConfig_TimelineImportInfo::kStopTimeFieldNumber;
const int ANTSchedulerConfig_TimelineImportInfo::kFilePathFieldNumber;
#endif  // !_MSC_VER

ANTSchedulerConfig_TimelineImportInfo::ANTSchedulerConfig_TimelineImportInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ANTSchedulerConfig_TimelineImportInfo::InitAsDefaultInstance() {
}

ANTSchedulerConfig_TimelineImportInfo::ANTSchedulerConfig_TimelineImportInfo(const ANTSchedulerConfig_TimelineImportInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ANTSchedulerConfig_TimelineImportInfo::SharedCtor() {
  _cached_size_ = 0;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stoptime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ANTSchedulerConfig_TimelineImportInfo::~ANTSchedulerConfig_TimelineImportInfo() {
  SharedDtor();
}

void ANTSchedulerConfig_TimelineImportInfo::SharedDtor() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  if (stoptime_ != &::google::protobuf::internal::kEmptyString) {
    delete stoptime_;
  }
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (this != default_instance_) {
  }
}

void ANTSchedulerConfig_TimelineImportInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ANTSchedulerConfig_TimelineImportInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ANTSchedulerConfig_TimelineImportInfo_descriptor_;
}

const ANTSchedulerConfig_TimelineImportInfo& ANTSchedulerConfig_TimelineImportInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fant_5fscheduler_2eproto();
  return *default_instance_;
}

ANTSchedulerConfig_TimelineImportInfo* ANTSchedulerConfig_TimelineImportInfo::default_instance_ = NULL;

ANTSchedulerConfig_TimelineImportInfo* ANTSchedulerConfig_TimelineImportInfo::New() const {
  return new ANTSchedulerConfig_TimelineImportInfo;
}

void ANTSchedulerConfig_TimelineImportInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::kEmptyString) {
        starttime_->clear();
      }
    }
    if (has_stoptime()) {
      if (stoptime_ != &::google::protobuf::internal::kEmptyString) {
        stoptime_->clear();
      }
    }
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::kEmptyString) {
        filepath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ANTSchedulerConfig_TimelineImportInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channelId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_startTime;
        break;
      }

      // optional string startTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stopTime;
        break;
      }

      // optional string stopTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stopTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoptime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stoptime().data(), this->stoptime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_filePath;
        break;
      }

      // optional string filePath = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ANTSchedulerConfig_TimelineImportInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string channelId = 1;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channelid(), output);
  }

  // optional string startTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->starttime(), output);
  }

  // optional string stopTime = 3;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stoptime().data(), this->stoptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stoptime(), output);
  }

  // optional string filePath = 4;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->filepath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ANTSchedulerConfig_TimelineImportInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string channelId = 1;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channelid(), target);
  }

  // optional string startTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->starttime(), target);
  }

  // optional string stopTime = 3;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stoptime().data(), this->stoptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stoptime(), target);
  }

  // optional string filePath = 4;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filepath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ANTSchedulerConfig_TimelineImportInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string channelId = 1;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional string startTime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional string stopTime = 3;
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stoptime());
    }

    // optional string filePath = 4;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ANTSchedulerConfig_TimelineImportInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ANTSchedulerConfig_TimelineImportInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ANTSchedulerConfig_TimelineImportInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ANTSchedulerConfig_TimelineImportInfo::MergeFrom(const ANTSchedulerConfig_TimelineImportInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ANTSchedulerConfig_TimelineImportInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ANTSchedulerConfig_TimelineImportInfo::CopyFrom(const ANTSchedulerConfig_TimelineImportInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ANTSchedulerConfig_TimelineImportInfo::IsInitialized() const {

  return true;
}

void ANTSchedulerConfig_TimelineImportInfo::Swap(ANTSchedulerConfig_TimelineImportInfo* other) {
  if (other != this) {
    std::swap(channelid_, other->channelid_);
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(filepath_, other->filepath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ANTSchedulerConfig_TimelineImportInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ANTSchedulerConfig_TimelineImportInfo_descriptor_;
  metadata.reflection = ANTSchedulerConfig_TimelineImportInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ANTSchedulerConfig_BoxScanImportInfo::kAzStartFieldNumber;
const int ANTSchedulerConfig_BoxScanImportInfo::kAzStopFieldNumber;
const int ANTSchedulerConfig_BoxScanImportInfo::kAzStepFieldNumber;
const int ANTSchedulerConfig_BoxScanImportInfo::kElStartFieldNumber;
const int ANTSchedulerConfig_BoxScanImportInfo::kElStopFieldNumber;
const int ANTSchedulerConfig_BoxScanImportInfo::kElStepFieldNumber;
const int ANTSchedulerConfig_BoxScanImportInfo::kStepTimeFieldNumber;
#endif  // !_MSC_VER

ANTSchedulerConfig_BoxScanImportInfo::ANTSchedulerConfig_BoxScanImportInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ANTSchedulerConfig_BoxScanImportInfo::InitAsDefaultInstance() {
}

ANTSchedulerConfig_BoxScanImportInfo::ANTSchedulerConfig_BoxScanImportInfo(const ANTSchedulerConfig_BoxScanImportInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ANTSchedulerConfig_BoxScanImportInfo::SharedCtor() {
  _cached_size_ = 0;
  azstart_ = 0;
  azstop_ = 0;
  azstep_ = 0;
  elstart_ = 0;
  elstop_ = 0;
  elstep_ = 0;
  steptime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ANTSchedulerConfig_BoxScanImportInfo::~ANTSchedulerConfig_BoxScanImportInfo() {
  SharedDtor();
}

void ANTSchedulerConfig_BoxScanImportInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ANTSchedulerConfig_BoxScanImportInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ANTSchedulerConfig_BoxScanImportInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ANTSchedulerConfig_BoxScanImportInfo_descriptor_;
}

const ANTSchedulerConfig_BoxScanImportInfo& ANTSchedulerConfig_BoxScanImportInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fant_5fscheduler_2eproto();
  return *default_instance_;
}

ANTSchedulerConfig_BoxScanImportInfo* ANTSchedulerConfig_BoxScanImportInfo::default_instance_ = NULL;

ANTSchedulerConfig_BoxScanImportInfo* ANTSchedulerConfig_BoxScanImportInfo::New() const {
  return new ANTSchedulerConfig_BoxScanImportInfo;
}

void ANTSchedulerConfig_BoxScanImportInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    azstart_ = 0;
    azstop_ = 0;
    azstep_ = 0;
    elstart_ = 0;
    elstop_ = 0;
    elstep_ = 0;
    steptime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ANTSchedulerConfig_BoxScanImportInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float azStart = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azstart_)));
          set_has_azstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_azStop;
        break;
      }

      // optional float azStop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azStop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azstop_)));
          set_has_azstop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_azStep;
        break;
      }

      // optional float azStep = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azstep_)));
          set_has_azstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_elStart;
        break;
      }

      // optional float elStart = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elstart_)));
          set_has_elstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_elStop;
        break;
      }

      // optional float elStop = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elStop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elstop_)));
          set_has_elstop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_elStep;
        break;
      }

      // optional float elStep = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elstep_)));
          set_has_elstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_stepTime;
        break;
      }

      // optional float stepTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_stepTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steptime_)));
          set_has_steptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ANTSchedulerConfig_BoxScanImportInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float azStart = 1;
  if (has_azstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->azstart(), output);
  }

  // optional float azStop = 2;
  if (has_azstop()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->azstop(), output);
  }

  // optional float azStep = 3;
  if (has_azstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->azstep(), output);
  }

  // optional float elStart = 4;
  if (has_elstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->elstart(), output);
  }

  // optional float elStop = 5;
  if (has_elstop()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->elstop(), output);
  }

  // optional float elStep = 6;
  if (has_elstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->elstep(), output);
  }

  // optional float stepTime = 7;
  if (has_steptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->steptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ANTSchedulerConfig_BoxScanImportInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float azStart = 1;
  if (has_azstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->azstart(), target);
  }

  // optional float azStop = 2;
  if (has_azstop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->azstop(), target);
  }

  // optional float azStep = 3;
  if (has_azstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->azstep(), target);
  }

  // optional float elStart = 4;
  if (has_elstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->elstart(), target);
  }

  // optional float elStop = 5;
  if (has_elstop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->elstop(), target);
  }

  // optional float elStep = 6;
  if (has_elstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->elstep(), target);
  }

  // optional float stepTime = 7;
  if (has_steptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->steptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ANTSchedulerConfig_BoxScanImportInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float azStart = 1;
    if (has_azstart()) {
      total_size += 1 + 4;
    }

    // optional float azStop = 2;
    if (has_azstop()) {
      total_size += 1 + 4;
    }

    // optional float azStep = 3;
    if (has_azstep()) {
      total_size += 1 + 4;
    }

    // optional float elStart = 4;
    if (has_elstart()) {
      total_size += 1 + 4;
    }

    // optional float elStop = 5;
    if (has_elstop()) {
      total_size += 1 + 4;
    }

    // optional float elStep = 6;
    if (has_elstep()) {
      total_size += 1 + 4;
    }

    // optional float stepTime = 7;
    if (has_steptime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ANTSchedulerConfig_BoxScanImportInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ANTSchedulerConfig_BoxScanImportInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ANTSchedulerConfig_BoxScanImportInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ANTSchedulerConfig_BoxScanImportInfo::MergeFrom(const ANTSchedulerConfig_BoxScanImportInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_azstart()) {
      set_azstart(from.azstart());
    }
    if (from.has_azstop()) {
      set_azstop(from.azstop());
    }
    if (from.has_azstep()) {
      set_azstep(from.azstep());
    }
    if (from.has_elstart()) {
      set_elstart(from.elstart());
    }
    if (from.has_elstop()) {
      set_elstop(from.elstop());
    }
    if (from.has_elstep()) {
      set_elstep(from.elstep());
    }
    if (from.has_steptime()) {
      set_steptime(from.steptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ANTSchedulerConfig_BoxScanImportInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ANTSchedulerConfig_BoxScanImportInfo::CopyFrom(const ANTSchedulerConfig_BoxScanImportInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ANTSchedulerConfig_BoxScanImportInfo::IsInitialized() const {

  return true;
}

void ANTSchedulerConfig_BoxScanImportInfo::Swap(ANTSchedulerConfig_BoxScanImportInfo* other) {
  if (other != this) {
    std::swap(azstart_, other->azstart_);
    std::swap(azstop_, other->azstop_);
    std::swap(azstep_, other->azstep_);
    std::swap(elstart_, other->elstart_);
    std::swap(elstop_, other->elstop_);
    std::swap(elstep_, other->elstep_);
    std::swap(steptime_, other->steptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ANTSchedulerConfig_BoxScanImportInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ANTSchedulerConfig_BoxScanImportInfo_descriptor_;
  metadata.reflection = ANTSchedulerConfig_BoxScanImportInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* ANTSchedulerConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ANTSchedulerConfig::kMsgNameFieldNumber;
const int ANTSchedulerConfig::kShowGUIFieldNumber;
const int ANTSchedulerConfig::kAntennaFieldNumber;
const int ANTSchedulerConfig::kModeFieldNumber;
const int ANTSchedulerConfig::kPolarityFieldNumber;
const int ANTSchedulerConfig::kPriorityFieldNumber;
const int ANTSchedulerConfig::kSchedulePathFieldNumber;
const int ANTSchedulerConfig::kTimelineImportInfosFieldNumber;
const int ANTSchedulerConfig::kBoxScanImportInfosFieldNumber;
#endif  // !_MSC_VER

ANTSchedulerConfig::ANTSchedulerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ANTSchedulerConfig::InitAsDefaultInstance() {
  boxscanimportinfos_ = const_cast< ::service_ant_scheduler::ANTSchedulerConfig_BoxScanImportInfo*>(&::service_ant_scheduler::ANTSchedulerConfig_BoxScanImportInfo::default_instance());
}

ANTSchedulerConfig::ANTSchedulerConfig(const ANTSchedulerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ANTSchedulerConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  showgui_ = false;
  antenna_ = 0;
  mode_ = 0;
  polarity_ = 0;
  priority_ = 0;
  schedulepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  boxscanimportinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ANTSchedulerConfig::~ANTSchedulerConfig() {
  SharedDtor();
}

void ANTSchedulerConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (schedulepath_ != &::google::protobuf::internal::kEmptyString) {
    delete schedulepath_;
  }
  if (this != default_instance_) {
    delete boxscanimportinfos_;
  }
}

void ANTSchedulerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ANTSchedulerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ANTSchedulerConfig_descriptor_;
}

const ANTSchedulerConfig& ANTSchedulerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fant_5fscheduler_2eproto();
  return *default_instance_;
}

ANTSchedulerConfig* ANTSchedulerConfig::default_instance_ = NULL;

ANTSchedulerConfig* ANTSchedulerConfig::New() const {
  return new ANTSchedulerConfig;
}

void ANTSchedulerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    showgui_ = false;
    antenna_ = 0;
    mode_ = 0;
    polarity_ = 0;
    priority_ = 0;
    if (has_schedulepath()) {
      if (schedulepath_ != &::google::protobuf::internal::kEmptyString) {
        schedulepath_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_boxscanimportinfos()) {
      if (boxscanimportinfos_ != NULL) boxscanimportinfos_->::service_ant_scheduler::ANTSchedulerConfig_BoxScanImportInfo::Clear();
    }
  }
  timelineimportinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ANTSchedulerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "service_ant_scheduler.AntSchedulerConfig"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_showGUI;
        break;
      }

      // optional bool showGUI = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showGUI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showgui_)));
          set_has_showgui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_antenna;
        break;
      }

      // required int32 antenna = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_antenna:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &antenna_)));
          set_has_antenna();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mode;
        break;
      }

      // optional int32 mode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_polarity;
        break;
      }

      // optional int32 polarity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_polarity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &polarity_)));
          set_has_polarity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_priority;
        break;
      }

      // optional int32 priority = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_schedulePath;
        break;
      }

      // optional string schedulePath = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schedulePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schedulepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->schedulepath().data(), this->schedulepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_timelineImportInfos;
        break;
      }

      // repeated .service_ant_scheduler.ANTSchedulerConfig.TimelineImportInfo timelineImportInfos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timelineImportInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timelineimportinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_timelineImportInfos;
        if (input->ExpectTag(74)) goto parse_boxScanImportInfos;
        break;
      }

      // optional .service_ant_scheduler.ANTSchedulerConfig.BoxScanImportInfo boxScanImportInfos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boxScanImportInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boxscanimportinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ANTSchedulerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "service_ant_scheduler.AntSchedulerConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool showGUI = 2 [default = false];
  if (has_showgui()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->showgui(), output);
  }

  // required int32 antenna = 3;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->antenna(), output);
  }

  // optional int32 mode = 4;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mode(), output);
  }

  // optional int32 polarity = 5;
  if (has_polarity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->polarity(), output);
  }

  // optional int32 priority = 6;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->priority(), output);
  }

  // optional string schedulePath = 7;
  if (has_schedulepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schedulepath().data(), this->schedulepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->schedulepath(), output);
  }

  // repeated .service_ant_scheduler.ANTSchedulerConfig.TimelineImportInfo timelineImportInfos = 8;
  for (int i = 0; i < this->timelineimportinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->timelineimportinfos(i), output);
  }

  // optional .service_ant_scheduler.ANTSchedulerConfig.BoxScanImportInfo boxScanImportInfos = 9;
  if (has_boxscanimportinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->boxscanimportinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ANTSchedulerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "service_ant_scheduler.AntSchedulerConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool showGUI = 2 [default = false];
  if (has_showgui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->showgui(), target);
  }

  // required int32 antenna = 3;
  if (has_antenna()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->antenna(), target);
  }

  // optional int32 mode = 4;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mode(), target);
  }

  // optional int32 polarity = 5;
  if (has_polarity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->polarity(), target);
  }

  // optional int32 priority = 6;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->priority(), target);
  }

  // optional string schedulePath = 7;
  if (has_schedulepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schedulepath().data(), this->schedulepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->schedulepath(), target);
  }

  // repeated .service_ant_scheduler.ANTSchedulerConfig.TimelineImportInfo timelineImportInfos = 8;
  for (int i = 0; i < this->timelineimportinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->timelineimportinfos(i), target);
  }

  // optional .service_ant_scheduler.ANTSchedulerConfig.BoxScanImportInfo boxScanImportInfos = 9;
  if (has_boxscanimportinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->boxscanimportinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ANTSchedulerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "service_ant_scheduler.AntSchedulerConfig"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool showGUI = 2 [default = false];
    if (has_showgui()) {
      total_size += 1 + 1;
    }

    // required int32 antenna = 3;
    if (has_antenna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->antenna());
    }

    // optional int32 mode = 4;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional int32 polarity = 5;
    if (has_polarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->polarity());
    }

    // optional int32 priority = 6;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional string schedulePath = 7;
    if (has_schedulepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schedulepath());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .service_ant_scheduler.ANTSchedulerConfig.BoxScanImportInfo boxScanImportInfos = 9;
    if (has_boxscanimportinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boxscanimportinfos());
    }

  }
  // repeated .service_ant_scheduler.ANTSchedulerConfig.TimelineImportInfo timelineImportInfos = 8;
  total_size += 1 * this->timelineimportinfos_size();
  for (int i = 0; i < this->timelineimportinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timelineimportinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ANTSchedulerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ANTSchedulerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ANTSchedulerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ANTSchedulerConfig::MergeFrom(const ANTSchedulerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  timelineimportinfos_.MergeFrom(from.timelineimportinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_showgui()) {
      set_showgui(from.showgui());
    }
    if (from.has_antenna()) {
      set_antenna(from.antenna());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_polarity()) {
      set_polarity(from.polarity());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_schedulepath()) {
      set_schedulepath(from.schedulepath());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_boxscanimportinfos()) {
      mutable_boxscanimportinfos()->::service_ant_scheduler::ANTSchedulerConfig_BoxScanImportInfo::MergeFrom(from.boxscanimportinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ANTSchedulerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ANTSchedulerConfig::CopyFrom(const ANTSchedulerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ANTSchedulerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void ANTSchedulerConfig::Swap(ANTSchedulerConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(showgui_, other->showgui_);
    std::swap(antenna_, other->antenna_);
    std::swap(mode_, other->mode_);
    std::swap(polarity_, other->polarity_);
    std::swap(priority_, other->priority_);
    std::swap(schedulepath_, other->schedulepath_);
    timelineimportinfos_.Swap(&other->timelineimportinfos_);
    std::swap(boxscanimportinfos_, other->boxscanimportinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ANTSchedulerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ANTSchedulerConfig_descriptor_;
  metadata.reflection = ANTSchedulerConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_ant_scheduler

// @@protoc_insertion_point(global_scope)
