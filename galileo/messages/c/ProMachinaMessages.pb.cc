// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProMachinaMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProMachinaMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fv {
namespace tb {
namespace protos {
namespace PMProtos {

namespace {

const ::google::protobuf::Descriptor* PMFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PMFrame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProMachinaMessages_2eproto() {
  protobuf_AddDesc_ProMachinaMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProMachinaMessages.proto");
  GOOGLE_CHECK(file != NULL);
  PMFrame_descriptor_ = file->message_type(0);
  static const int PMFrame_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, toaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, fromaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, countvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, frameformatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, trackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, tracktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, velx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, vely_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, velz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, wholeseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, fractionalseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, framelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, uuid_),
  };
  PMFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PMFrame_descriptor_,
      PMFrame::default_instance_,
      PMFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PMFrame));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProMachinaMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PMFrame_descriptor_, &PMFrame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProMachinaMessages_2eproto() {
  delete PMFrame::default_instance_;
  delete PMFrame_reflection_;
  delete PMFrame::_default_msgname_;
}

void protobuf_AddDesc_ProMachinaMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030ProMachinaMessages.proto\022\025fv.tb.protos"
    ".PMProtos\"\324\002\n\007PMFrame\022\030\n\007msgName\030\001 \001(\t:\007"
    "PMFRAME\022\021\n\ttoAddress\030\002 \001(\005\022\023\n\013fromAddres"
    "s\030\003 \001(\005\022\022\n\ncountValue\030\004 \001(\005\022\025\n\rframeForm"
    "atID\030\005 \001(\t\022\017\n\007trackID\030\006 \001(\t\022\021\n\ttrackType"
    "\030\007 \001(\t\022\014\n\004posX\030\010 \001(\001\022\014\n\004posY\030\t \001(\001\022\014\n\004po"
    "sZ\030\n \001(\001\022\014\n\004velX\030\013 \001(\001\022\014\n\004velY\030\014 \001(\001\022\014\n\004"
    "velZ\030\r \001(\001\022\024\n\014wholeSeconds\030\016 \001(\001\022\031\n\021frac"
    "tionalSeconds\030\017 \001(\001\022\026\n\013frameLength\030\020 \001(\005"
    ":\0010\022\r\n\005frame\030\021 \001(\014\022\014\n\004uuid\030\022 \001(\tB\030\n\014fv.p"
    "m.protosB\010PMProtos", 418);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProMachinaMessages.proto", &protobuf_RegisterTypes);
  PMFrame::_default_msgname_ =
      new ::std::string("PMFRAME", 7);
  PMFrame::default_instance_ = new PMFrame();
  PMFrame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProMachinaMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProMachinaMessages_2eproto {
  StaticDescriptorInitializer_ProMachinaMessages_2eproto() {
    protobuf_AddDesc_ProMachinaMessages_2eproto();
  }
} static_descriptor_initializer_ProMachinaMessages_2eproto_;

// ===================================================================

::std::string* PMFrame::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int PMFrame::kMsgNameFieldNumber;
const int PMFrame::kToAddressFieldNumber;
const int PMFrame::kFromAddressFieldNumber;
const int PMFrame::kCountValueFieldNumber;
const int PMFrame::kFrameFormatIDFieldNumber;
const int PMFrame::kTrackIDFieldNumber;
const int PMFrame::kTrackTypeFieldNumber;
const int PMFrame::kPosXFieldNumber;
const int PMFrame::kPosYFieldNumber;
const int PMFrame::kPosZFieldNumber;
const int PMFrame::kVelXFieldNumber;
const int PMFrame::kVelYFieldNumber;
const int PMFrame::kVelZFieldNumber;
const int PMFrame::kWholeSecondsFieldNumber;
const int PMFrame::kFractionalSecondsFieldNumber;
const int PMFrame::kFrameLengthFieldNumber;
const int PMFrame::kFrameFieldNumber;
const int PMFrame::kUuidFieldNumber;
#endif  // !_MSC_VER

PMFrame::PMFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PMFrame::InitAsDefaultInstance() {
}

PMFrame::PMFrame(const PMFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PMFrame::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  toaddress_ = 0;
  fromaddress_ = 0;
  countvalue_ = 0;
  frameformatid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trackid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tracktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  posx_ = 0;
  posy_ = 0;
  posz_ = 0;
  velx_ = 0;
  vely_ = 0;
  velz_ = 0;
  wholeseconds_ = 0;
  fractionalseconds_ = 0;
  framelength_ = 0;
  frame_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PMFrame::~PMFrame() {
  SharedDtor();
}

void PMFrame::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (frameformatid_ != &::google::protobuf::internal::kEmptyString) {
    delete frameformatid_;
  }
  if (trackid_ != &::google::protobuf::internal::kEmptyString) {
    delete trackid_;
  }
  if (tracktype_ != &::google::protobuf::internal::kEmptyString) {
    delete tracktype_;
  }
  if (frame_ != &::google::protobuf::internal::kEmptyString) {
    delete frame_;
  }
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void PMFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PMFrame_descriptor_;
}

const PMFrame& PMFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProMachinaMessages_2eproto();
  return *default_instance_;
}

PMFrame* PMFrame::default_instance_ = NULL;

PMFrame* PMFrame::New() const {
  return new PMFrame;
}

void PMFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    toaddress_ = 0;
    fromaddress_ = 0;
    countvalue_ = 0;
    if (has_frameformatid()) {
      if (frameformatid_ != &::google::protobuf::internal::kEmptyString) {
        frameformatid_->clear();
      }
    }
    if (has_trackid()) {
      if (trackid_ != &::google::protobuf::internal::kEmptyString) {
        trackid_->clear();
      }
    }
    if (has_tracktype()) {
      if (tracktype_ != &::google::protobuf::internal::kEmptyString) {
        tracktype_->clear();
      }
    }
    posx_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    posy_ = 0;
    posz_ = 0;
    velx_ = 0;
    vely_ = 0;
    velz_ = 0;
    wholeseconds_ = 0;
    fractionalseconds_ = 0;
    framelength_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_frame()) {
      if (frame_ != &::google::protobuf::internal::kEmptyString) {
        frame_->clear();
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PMFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "PMFRAME"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_toAddress;
        break;
      }

      // optional int32 toAddress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toAddress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toaddress_)));
          set_has_toaddress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fromAddress;
        break;
      }

      // optional int32 fromAddress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromAddress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromaddress_)));
          set_has_fromaddress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_countValue;
        break;
      }

      // optional int32 countValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countvalue_)));
          set_has_countvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_frameFormatID;
        break;
      }

      // optional string frameFormatID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frameFormatID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frameformatid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->frameformatid().data(), this->frameformatid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_trackID;
        break;
      }

      // optional string trackID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trackID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trackid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trackid().data(), this->trackid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_trackType;
        break;
      }

      // optional string trackType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trackType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tracktype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tracktype().data(), this->tracktype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_posX;
        break;
      }

      // optional double posX = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_posY;
        break;
      }

      // optional double posY = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_posZ;
        break;
      }

      // optional double posZ = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_velX;
        break;
      }

      // optional double velX = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_velX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velx_)));
          set_has_velx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_velY;
        break;
      }

      // optional double velY = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_velY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vely_)));
          set_has_vely();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_velZ;
        break;
      }

      // optional double velZ = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_velZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velz_)));
          set_has_velz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_wholeSeconds;
        break;
      }

      // optional double wholeSeconds = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_wholeSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wholeseconds_)));
          set_has_wholeseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_fractionalSeconds;
        break;
      }

      // optional double fractionalSeconds = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fractionalSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fractionalseconds_)));
          set_has_fractionalseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_frameLength;
        break;
      }

      // optional int32 frameLength = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framelength_)));
          set_has_framelength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_frame;
        break;
      }

      // optional bytes frame = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_uuid;
        break;
      }

      // optional string uuid = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PMFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "PMFRAME"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 toAddress = 2;
  if (has_toaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->toaddress(), output);
  }

  // optional int32 fromAddress = 3;
  if (has_fromaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fromaddress(), output);
  }

  // optional int32 countValue = 4;
  if (has_countvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->countvalue(), output);
  }

  // optional string frameFormatID = 5;
  if (has_frameformatid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frameformatid().data(), this->frameformatid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->frameformatid(), output);
  }

  // optional string trackID = 6;
  if (has_trackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackid().data(), this->trackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->trackid(), output);
  }

  // optional string trackType = 7;
  if (has_tracktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tracktype().data(), this->tracktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->tracktype(), output);
  }

  // optional double posX = 8;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->posx(), output);
  }

  // optional double posY = 9;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->posy(), output);
  }

  // optional double posZ = 10;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->posz(), output);
  }

  // optional double velX = 11;
  if (has_velx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->velx(), output);
  }

  // optional double velY = 12;
  if (has_vely()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->vely(), output);
  }

  // optional double velZ = 13;
  if (has_velz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->velz(), output);
  }

  // optional double wholeSeconds = 14;
  if (has_wholeseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->wholeseconds(), output);
  }

  // optional double fractionalSeconds = 15;
  if (has_fractionalseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->fractionalseconds(), output);
  }

  // optional int32 frameLength = 16 [default = 0];
  if (has_framelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->framelength(), output);
  }

  // optional bytes frame = 17;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->frame(), output);
  }

  // optional string uuid = 18;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PMFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "PMFRAME"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 toAddress = 2;
  if (has_toaddress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->toaddress(), target);
  }

  // optional int32 fromAddress = 3;
  if (has_fromaddress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fromaddress(), target);
  }

  // optional int32 countValue = 4;
  if (has_countvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->countvalue(), target);
  }

  // optional string frameFormatID = 5;
  if (has_frameformatid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frameformatid().data(), this->frameformatid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->frameformatid(), target);
  }

  // optional string trackID = 6;
  if (has_trackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackid().data(), this->trackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->trackid(), target);
  }

  // optional string trackType = 7;
  if (has_tracktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tracktype().data(), this->tracktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tracktype(), target);
  }

  // optional double posX = 8;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->posx(), target);
  }

  // optional double posY = 9;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->posy(), target);
  }

  // optional double posZ = 10;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->posz(), target);
  }

  // optional double velX = 11;
  if (has_velx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->velx(), target);
  }

  // optional double velY = 12;
  if (has_vely()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->vely(), target);
  }

  // optional double velZ = 13;
  if (has_velz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->velz(), target);
  }

  // optional double wholeSeconds = 14;
  if (has_wholeseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->wholeseconds(), target);
  }

  // optional double fractionalSeconds = 15;
  if (has_fractionalseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->fractionalseconds(), target);
  }

  // optional int32 frameLength = 16 [default = 0];
  if (has_framelength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->framelength(), target);
  }

  // optional bytes frame = 17;
  if (has_frame()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->frame(), target);
  }

  // optional string uuid = 18;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PMFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "PMFRAME"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 toAddress = 2;
    if (has_toaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toaddress());
    }

    // optional int32 fromAddress = 3;
    if (has_fromaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromaddress());
    }

    // optional int32 countValue = 4;
    if (has_countvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countvalue());
    }

    // optional string frameFormatID = 5;
    if (has_frameformatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frameformatid());
    }

    // optional string trackID = 6;
    if (has_trackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trackid());
    }

    // optional string trackType = 7;
    if (has_tracktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tracktype());
    }

    // optional double posX = 8;
    if (has_posx()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double posY = 9;
    if (has_posy()) {
      total_size += 1 + 8;
    }

    // optional double posZ = 10;
    if (has_posz()) {
      total_size += 1 + 8;
    }

    // optional double velX = 11;
    if (has_velx()) {
      total_size += 1 + 8;
    }

    // optional double velY = 12;
    if (has_vely()) {
      total_size += 1 + 8;
    }

    // optional double velZ = 13;
    if (has_velz()) {
      total_size += 1 + 8;
    }

    // optional double wholeSeconds = 14;
    if (has_wholeseconds()) {
      total_size += 1 + 8;
    }

    // optional double fractionalSeconds = 15;
    if (has_fractionalseconds()) {
      total_size += 1 + 8;
    }

    // optional int32 frameLength = 16 [default = 0];
    if (has_framelength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->framelength());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes frame = 17;
    if (has_frame()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->frame());
    }

    // optional string uuid = 18;
    if (has_uuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PMFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PMFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PMFrame::MergeFrom(const PMFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_toaddress()) {
      set_toaddress(from.toaddress());
    }
    if (from.has_fromaddress()) {
      set_fromaddress(from.fromaddress());
    }
    if (from.has_countvalue()) {
      set_countvalue(from.countvalue());
    }
    if (from.has_frameformatid()) {
      set_frameformatid(from.frameformatid());
    }
    if (from.has_trackid()) {
      set_trackid(from.trackid());
    }
    if (from.has_tracktype()) {
      set_tracktype(from.tracktype());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
    if (from.has_velx()) {
      set_velx(from.velx());
    }
    if (from.has_vely()) {
      set_vely(from.vely());
    }
    if (from.has_velz()) {
      set_velz(from.velz());
    }
    if (from.has_wholeseconds()) {
      set_wholeseconds(from.wholeseconds());
    }
    if (from.has_fractionalseconds()) {
      set_fractionalseconds(from.fractionalseconds());
    }
    if (from.has_framelength()) {
      set_framelength(from.framelength());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PMFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMFrame::CopyFrom(const PMFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMFrame::IsInitialized() const {

  return true;
}

void PMFrame::Swap(PMFrame* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(toaddress_, other->toaddress_);
    std::swap(fromaddress_, other->fromaddress_);
    std::swap(countvalue_, other->countvalue_);
    std::swap(frameformatid_, other->frameformatid_);
    std::swap(trackid_, other->trackid_);
    std::swap(tracktype_, other->tracktype_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(posz_, other->posz_);
    std::swap(velx_, other->velx_);
    std::swap(vely_, other->vely_);
    std::swap(velz_, other->velz_);
    std::swap(wholeseconds_, other->wholeseconds_);
    std::swap(fractionalseconds_, other->fractionalseconds_);
    std::swap(framelength_, other->framelength_);
    std::swap(frame_, other->frame_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PMFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PMFrame_descriptor_;
  metadata.reflection = PMFrame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PMProtos
}  // namespace protos
}  // namespace tb
}  // namespace fv

// @@protoc_insertion_point(global_scope)
