// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_galileoprocessor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service_galileoprocessor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace service_galileoprocessor {

namespace {

const ::google::protobuf::Descriptor* GalileoProcessorConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GalileoProcessorConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_5fgalileoprocessor_2eproto() {
  protobuf_AddDesc_service_5fgalileoprocessor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service_galileoprocessor.proto");
  GOOGLE_CHECK(file != NULL);
  GalileoProcessorConfig_descriptor_ = file->message_type(0);
  static const int GalileoProcessorConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalileoProcessorConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalileoProcessorConfig, writedebugfiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalileoProcessorConfig, batchsizesec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalileoProcessorConfig, debugrootpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalileoProcessorConfig, segmenterconfig_),
  };
  GalileoProcessorConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GalileoProcessorConfig_descriptor_,
      GalileoProcessorConfig::default_instance_,
      GalileoProcessorConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalileoProcessorConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalileoProcessorConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GalileoProcessorConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_5fgalileoprocessor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GalileoProcessorConfig_descriptor_, &GalileoProcessorConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_5fgalileoprocessor_2eproto() {
  delete GalileoProcessorConfig::default_instance_;
  delete GalileoProcessorConfig_reflection_;
  delete GalileoProcessorConfig::_default_msgname_;
  delete GalileoProcessorConfig::_default_debugrootpath_;
  delete GalileoProcessorConfig::_default_segmenterconfig_;
}

void protobuf_AddDesc_service_5fgalileoprocessor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036service_galileoprocessor.proto\022\030servic"
    "e_galileoprocessor\"\200\002\n\026GalileoProcessorC"
    "onfig\022@\n\007msgName\030\001 \001(\t:/service_galileop"
    "rocessor.GalileoProcessorConfig\022\036\n\017write"
    "DebugFiles\030\002 \001(\010:\005false\022\027\n\014batchSizeSec\030"
    "\003 \001(\001:\0015\022/\n\rdebugRootPath\030\004 \001(\t:\030/scratc"
    "h/test-dataplane/\022:\n\017segmenterConfig\030\005 \001"
    "(\t:!/user/config/segmenter_config.xmlB\025\n"
    "\023fv.protos.kepsvisor", 340);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service_galileoprocessor.proto", &protobuf_RegisterTypes);
  GalileoProcessorConfig::_default_msgname_ =
      new ::std::string("service_galileoprocessor.GalileoProcessorConfig", 47);
  GalileoProcessorConfig::_default_debugrootpath_ =
      new ::std::string("/scratch/test-dataplane/", 24);
  GalileoProcessorConfig::_default_segmenterconfig_ =
      new ::std::string("/user/config/segmenter_config.xml", 33);
  GalileoProcessorConfig::default_instance_ = new GalileoProcessorConfig();
  GalileoProcessorConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_5fgalileoprocessor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_5fgalileoprocessor_2eproto {
  StaticDescriptorInitializer_service_5fgalileoprocessor_2eproto() {
    protobuf_AddDesc_service_5fgalileoprocessor_2eproto();
  }
} static_descriptor_initializer_service_5fgalileoprocessor_2eproto_;

// ===================================================================

::std::string* GalileoProcessorConfig::_default_msgname_ = NULL;
::std::string* GalileoProcessorConfig::_default_debugrootpath_ = NULL;
::std::string* GalileoProcessorConfig::_default_segmenterconfig_ = NULL;
#ifndef _MSC_VER
const int GalileoProcessorConfig::kMsgNameFieldNumber;
const int GalileoProcessorConfig::kWriteDebugFilesFieldNumber;
const int GalileoProcessorConfig::kBatchSizeSecFieldNumber;
const int GalileoProcessorConfig::kDebugRootPathFieldNumber;
const int GalileoProcessorConfig::kSegmenterConfigFieldNumber;
#endif  // !_MSC_VER

GalileoProcessorConfig::GalileoProcessorConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GalileoProcessorConfig::InitAsDefaultInstance() {
}

GalileoProcessorConfig::GalileoProcessorConfig(const GalileoProcessorConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GalileoProcessorConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  writedebugfiles_ = false;
  batchsizesec_ = 5;
  debugrootpath_ = const_cast< ::std::string*>(_default_debugrootpath_);
  segmenterconfig_ = const_cast< ::std::string*>(_default_segmenterconfig_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GalileoProcessorConfig::~GalileoProcessorConfig() {
  SharedDtor();
}

void GalileoProcessorConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (debugrootpath_ != _default_debugrootpath_) {
    delete debugrootpath_;
  }
  if (segmenterconfig_ != _default_segmenterconfig_) {
    delete segmenterconfig_;
  }
  if (this != default_instance_) {
  }
}

void GalileoProcessorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalileoProcessorConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GalileoProcessorConfig_descriptor_;
}

const GalileoProcessorConfig& GalileoProcessorConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fgalileoprocessor_2eproto();
  return *default_instance_;
}

GalileoProcessorConfig* GalileoProcessorConfig::default_instance_ = NULL;

GalileoProcessorConfig* GalileoProcessorConfig::New() const {
  return new GalileoProcessorConfig;
}

void GalileoProcessorConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    writedebugfiles_ = false;
    batchsizesec_ = 5;
    if (has_debugrootpath()) {
      if (debugrootpath_ != _default_debugrootpath_) {
        debugrootpath_->assign(*_default_debugrootpath_);
      }
    }
    if (has_segmenterconfig()) {
      if (segmenterconfig_ != _default_segmenterconfig_) {
        segmenterconfig_->assign(*_default_segmenterconfig_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GalileoProcessorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "service_galileoprocessor.GalileoProcessorConfig"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_writeDebugFiles;
        break;
      }

      // optional bool writeDebugFiles = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writeDebugFiles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &writedebugfiles_)));
          set_has_writedebugfiles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_batchSizeSec;
        break;
      }

      // optional double batchSizeSec = 3 [default = 5];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_batchSizeSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &batchsizesec_)));
          set_has_batchsizesec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_debugRootPath;
        break;
      }

      // optional string debugRootPath = 4 [default = "/scratch/test-dataplane/"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debugRootPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debugrootpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debugrootpath().data(), this->debugrootpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_segmenterConfig;
        break;
      }

      // optional string segmenterConfig = 5 [default = "/user/config/segmenter_config.xml"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_segmenterConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_segmenterconfig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->segmenterconfig().data(), this->segmenterconfig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GalileoProcessorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "service_galileoprocessor.GalileoProcessorConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool writeDebugFiles = 2 [default = false];
  if (has_writedebugfiles()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->writedebugfiles(), output);
  }

  // optional double batchSizeSec = 3 [default = 5];
  if (has_batchsizesec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->batchsizesec(), output);
  }

  // optional string debugRootPath = 4 [default = "/scratch/test-dataplane/"];
  if (has_debugrootpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debugrootpath().data(), this->debugrootpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->debugrootpath(), output);
  }

  // optional string segmenterConfig = 5 [default = "/user/config/segmenter_config.xml"];
  if (has_segmenterconfig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->segmenterconfig().data(), this->segmenterconfig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->segmenterconfig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GalileoProcessorConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "service_galileoprocessor.GalileoProcessorConfig"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool writeDebugFiles = 2 [default = false];
  if (has_writedebugfiles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->writedebugfiles(), target);
  }

  // optional double batchSizeSec = 3 [default = 5];
  if (has_batchsizesec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->batchsizesec(), target);
  }

  // optional string debugRootPath = 4 [default = "/scratch/test-dataplane/"];
  if (has_debugrootpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debugrootpath().data(), this->debugrootpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->debugrootpath(), target);
  }

  // optional string segmenterConfig = 5 [default = "/user/config/segmenter_config.xml"];
  if (has_segmenterconfig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->segmenterconfig().data(), this->segmenterconfig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->segmenterconfig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GalileoProcessorConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "service_galileoprocessor.GalileoProcessorConfig"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool writeDebugFiles = 2 [default = false];
    if (has_writedebugfiles()) {
      total_size += 1 + 1;
    }

    // optional double batchSizeSec = 3 [default = 5];
    if (has_batchsizesec()) {
      total_size += 1 + 8;
    }

    // optional string debugRootPath = 4 [default = "/scratch/test-dataplane/"];
    if (has_debugrootpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debugrootpath());
    }

    // optional string segmenterConfig = 5 [default = "/user/config/segmenter_config.xml"];
    if (has_segmenterconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->segmenterconfig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalileoProcessorConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GalileoProcessorConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GalileoProcessorConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GalileoProcessorConfig::MergeFrom(const GalileoProcessorConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_writedebugfiles()) {
      set_writedebugfiles(from.writedebugfiles());
    }
    if (from.has_batchsizesec()) {
      set_batchsizesec(from.batchsizesec());
    }
    if (from.has_debugrootpath()) {
      set_debugrootpath(from.debugrootpath());
    }
    if (from.has_segmenterconfig()) {
      set_segmenterconfig(from.segmenterconfig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GalileoProcessorConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalileoProcessorConfig::CopyFrom(const GalileoProcessorConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalileoProcessorConfig::IsInitialized() const {

  return true;
}

void GalileoProcessorConfig::Swap(GalileoProcessorConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(writedebugfiles_, other->writedebugfiles_);
    std::swap(batchsizesec_, other->batchsizesec_);
    std::swap(debugrootpath_, other->debugrootpath_);
    std::swap(segmenterconfig_, other->segmenterconfig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GalileoProcessorConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GalileoProcessorConfig_descriptor_;
  metadata.reflection = GalileoProcessorConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_galileoprocessor

// @@protoc_insertion_point(global_scope)
