// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RxCommandMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RxCommandMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rx_command_msg {

namespace {

const ::google::protobuf::Descriptor* RxCommandRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RxCommandRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RxCommandResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RxCommandResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RxCommandMessages_2eproto() {
  protobuf_AddDesc_RxCommandMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RxCommandMessages.proto");
  GOOGLE_CHECK(file != NULL);
  RxCommandRequest_descriptor_ = file->message_type(0);
  static const int RxCommandRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandRequest, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandRequest, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandRequest, gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandRequest, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandRequest, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandRequest, gainmode_),
  };
  RxCommandRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RxCommandRequest_descriptor_,
      RxCommandRequest::default_instance_,
      RxCommandRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RxCommandRequest));
  RxCommandResponse_descriptor_ = file->message_type(1);
  static const int RxCommandResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandResponse, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandResponse, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandResponse, gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandResponse, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandResponse, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandResponse, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandResponse, gainmode_),
  };
  RxCommandResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RxCommandResponse_descriptor_,
      RxCommandResponse::default_instance_,
      RxCommandResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxCommandResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RxCommandResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RxCommandMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RxCommandRequest_descriptor_, &RxCommandRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RxCommandResponse_descriptor_, &RxCommandResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RxCommandMessages_2eproto() {
  delete RxCommandRequest::default_instance_;
  delete RxCommandRequest_reflection_;
  delete RxCommandRequest::_default_msgname_;
  delete RxCommandRequest::_default_guid_;
  delete RxCommandResponse::default_instance_;
  delete RxCommandResponse_reflection_;
  delete RxCommandResponse::_default_msgname_;
  delete RxCommandResponse::_default_guid_;
}

void protobuf_AddDesc_RxCommandMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027RxCommandMessages.proto\022\016rx_command_ms"
    "g\"\274\001\n\020RxCommandRequest\022!\n\007msgName\030\001 \001(\t:"
    "\020RXCOMMANDREQUEST\022\017\n\007channel\030\002 \001(\005\022\021\n\tfr"
    "equency\030\003 \001(\002\022\014\n\004gain\030\004 \001(\005\022\031\n\004guid\030\005 \001("
    "\t:\013UNSPECIFIED\022\025\n\010priority\030\006 \001(\005:\003100\022\017\n"
    "\007enabled\030\007 \001(\010\022\020\n\010gainMode\030\010 \001(\005\"\276\001\n\021RxC"
    "ommandResponse\022\"\n\007msgName\030\001 \001(\t:\021RXCOMMA"
    "NDRESPONSE\022\017\n\007channel\030\002 \001(\005\022\021\n\tfrequency"
    "\030\003 \001(\002\022\014\n\004gain\030\004 \001(\005\022\031\n\004guid\030\005 \001(\t:\013UNSP"
    "ECIFIED\022\025\n\010priority\030\006 \001(\005:\003100\022\017\n\007enable"
    "d\030\007 \001(\010\022\020\n\010gainMode\030\010 \001(\005B\025\n\023fv.protos.k"
    "epsvisor", 448);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RxCommandMessages.proto", &protobuf_RegisterTypes);
  RxCommandRequest::_default_msgname_ =
      new ::std::string("RXCOMMANDREQUEST", 16);
  RxCommandRequest::_default_guid_ =
      new ::std::string("UNSPECIFIED", 11);
  RxCommandRequest::default_instance_ = new RxCommandRequest();
  RxCommandResponse::_default_msgname_ =
      new ::std::string("RXCOMMANDRESPONSE", 17);
  RxCommandResponse::_default_guid_ =
      new ::std::string("UNSPECIFIED", 11);
  RxCommandResponse::default_instance_ = new RxCommandResponse();
  RxCommandRequest::default_instance_->InitAsDefaultInstance();
  RxCommandResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RxCommandMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RxCommandMessages_2eproto {
  StaticDescriptorInitializer_RxCommandMessages_2eproto() {
    protobuf_AddDesc_RxCommandMessages_2eproto();
  }
} static_descriptor_initializer_RxCommandMessages_2eproto_;

// ===================================================================

::std::string* RxCommandRequest::_default_msgname_ = NULL;
::std::string* RxCommandRequest::_default_guid_ = NULL;
#ifndef _MSC_VER
const int RxCommandRequest::kMsgNameFieldNumber;
const int RxCommandRequest::kChannelFieldNumber;
const int RxCommandRequest::kFrequencyFieldNumber;
const int RxCommandRequest::kGainFieldNumber;
const int RxCommandRequest::kGuidFieldNumber;
const int RxCommandRequest::kPriorityFieldNumber;
const int RxCommandRequest::kEnabledFieldNumber;
const int RxCommandRequest::kGainModeFieldNumber;
#endif  // !_MSC_VER

RxCommandRequest::RxCommandRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RxCommandRequest::InitAsDefaultInstance() {
}

RxCommandRequest::RxCommandRequest(const RxCommandRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RxCommandRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  frequency_ = 0;
  gain_ = 0;
  guid_ = const_cast< ::std::string*>(_default_guid_);
  priority_ = 100;
  enabled_ = false;
  gainmode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RxCommandRequest::~RxCommandRequest() {
  SharedDtor();
}

void RxCommandRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (guid_ != _default_guid_) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void RxCommandRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RxCommandRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RxCommandRequest_descriptor_;
}

const RxCommandRequest& RxCommandRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RxCommandMessages_2eproto();
  return *default_instance_;
}

RxCommandRequest* RxCommandRequest::default_instance_ = NULL;

RxCommandRequest* RxCommandRequest::New() const {
  return new RxCommandRequest;
}

void RxCommandRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    frequency_ = 0;
    gain_ = 0;
    if (has_guid()) {
      if (guid_ != _default_guid_) {
        guid_->assign(*_default_guid_);
      }
    }
    priority_ = 100;
    enabled_ = false;
    gainmode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RxCommandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RXCOMMANDREQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_frequency;
        break;
      }

      // optional float frequency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gain;
        break;
      }

      // optional int32 gain = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_guid;
        break;
      }

      // optional string guid = 5 [default = "UNSPECIFIED"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_priority;
        break;
      }

      // optional int32 priority = 6 [default = 100];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gainMode;
        break;
      }

      // optional int32 gainMode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gainMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gainmode_)));
          set_has_gainmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RxCommandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RXCOMMANDREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional float frequency = 3;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->frequency(), output);
  }

  // optional int32 gain = 4;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gain(), output);
  }

  // optional string guid = 5 [default = "UNSPECIFIED"];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->guid(), output);
  }

  // optional int32 priority = 6 [default = 100];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->priority(), output);
  }

  // optional bool enabled = 7;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enabled(), output);
  }

  // optional int32 gainMode = 8;
  if (has_gainmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gainmode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RxCommandRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RXCOMMANDREQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional float frequency = 3;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->frequency(), target);
  }

  // optional int32 gain = 4;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gain(), target);
  }

  // optional string guid = 5 [default = "UNSPECIFIED"];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guid(), target);
  }

  // optional int32 priority = 6 [default = 100];
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->priority(), target);
  }

  // optional bool enabled = 7;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enabled(), target);
  }

  // optional int32 gainMode = 8;
  if (has_gainmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gainmode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RxCommandRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RXCOMMANDREQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional float frequency = 3;
    if (has_frequency()) {
      total_size += 1 + 4;
    }

    // optional int32 gain = 4;
    if (has_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gain());
    }

    // optional string guid = 5 [default = "UNSPECIFIED"];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional int32 priority = 6 [default = 100];
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional bool enabled = 7;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional int32 gainMode = 8;
    if (has_gainmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gainmode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RxCommandRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RxCommandRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RxCommandRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RxCommandRequest::MergeFrom(const RxCommandRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_gainmode()) {
      set_gainmode(from.gainmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RxCommandRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RxCommandRequest::CopyFrom(const RxCommandRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RxCommandRequest::IsInitialized() const {

  return true;
}

void RxCommandRequest::Swap(RxCommandRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(frequency_, other->frequency_);
    std::swap(gain_, other->gain_);
    std::swap(guid_, other->guid_);
    std::swap(priority_, other->priority_);
    std::swap(enabled_, other->enabled_);
    std::swap(gainmode_, other->gainmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RxCommandRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RxCommandRequest_descriptor_;
  metadata.reflection = RxCommandRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RxCommandResponse::_default_msgname_ = NULL;
::std::string* RxCommandResponse::_default_guid_ = NULL;
#ifndef _MSC_VER
const int RxCommandResponse::kMsgNameFieldNumber;
const int RxCommandResponse::kChannelFieldNumber;
const int RxCommandResponse::kFrequencyFieldNumber;
const int RxCommandResponse::kGainFieldNumber;
const int RxCommandResponse::kGuidFieldNumber;
const int RxCommandResponse::kPriorityFieldNumber;
const int RxCommandResponse::kEnabledFieldNumber;
const int RxCommandResponse::kGainModeFieldNumber;
#endif  // !_MSC_VER

RxCommandResponse::RxCommandResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RxCommandResponse::InitAsDefaultInstance() {
}

RxCommandResponse::RxCommandResponse(const RxCommandResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RxCommandResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  frequency_ = 0;
  gain_ = 0;
  guid_ = const_cast< ::std::string*>(_default_guid_);
  priority_ = 100;
  enabled_ = false;
  gainmode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RxCommandResponse::~RxCommandResponse() {
  SharedDtor();
}

void RxCommandResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (guid_ != _default_guid_) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void RxCommandResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RxCommandResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RxCommandResponse_descriptor_;
}

const RxCommandResponse& RxCommandResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RxCommandMessages_2eproto();
  return *default_instance_;
}

RxCommandResponse* RxCommandResponse::default_instance_ = NULL;

RxCommandResponse* RxCommandResponse::New() const {
  return new RxCommandResponse;
}

void RxCommandResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    frequency_ = 0;
    gain_ = 0;
    if (has_guid()) {
      if (guid_ != _default_guid_) {
        guid_->assign(*_default_guid_);
      }
    }
    priority_ = 100;
    enabled_ = false;
    gainmode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RxCommandResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RXCOMMANDRESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_frequency;
        break;
      }

      // optional float frequency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gain;
        break;
      }

      // optional int32 gain = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_guid;
        break;
      }

      // optional string guid = 5 [default = "UNSPECIFIED"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_priority;
        break;
      }

      // optional int32 priority = 6 [default = 100];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gainMode;
        break;
      }

      // optional int32 gainMode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gainMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gainmode_)));
          set_has_gainmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RxCommandResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RXCOMMANDRESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional float frequency = 3;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->frequency(), output);
  }

  // optional int32 gain = 4;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gain(), output);
  }

  // optional string guid = 5 [default = "UNSPECIFIED"];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->guid(), output);
  }

  // optional int32 priority = 6 [default = 100];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->priority(), output);
  }

  // optional bool enabled = 7;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enabled(), output);
  }

  // optional int32 gainMode = 8;
  if (has_gainmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gainmode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RxCommandResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RXCOMMANDRESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional float frequency = 3;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->frequency(), target);
  }

  // optional int32 gain = 4;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gain(), target);
  }

  // optional string guid = 5 [default = "UNSPECIFIED"];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guid(), target);
  }

  // optional int32 priority = 6 [default = 100];
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->priority(), target);
  }

  // optional bool enabled = 7;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enabled(), target);
  }

  // optional int32 gainMode = 8;
  if (has_gainmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gainmode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RxCommandResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RXCOMMANDRESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional float frequency = 3;
    if (has_frequency()) {
      total_size += 1 + 4;
    }

    // optional int32 gain = 4;
    if (has_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gain());
    }

    // optional string guid = 5 [default = "UNSPECIFIED"];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional int32 priority = 6 [default = 100];
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional bool enabled = 7;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional int32 gainMode = 8;
    if (has_gainmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gainmode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RxCommandResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RxCommandResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RxCommandResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RxCommandResponse::MergeFrom(const RxCommandResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_gainmode()) {
      set_gainmode(from.gainmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RxCommandResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RxCommandResponse::CopyFrom(const RxCommandResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RxCommandResponse::IsInitialized() const {

  return true;
}

void RxCommandResponse::Swap(RxCommandResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(frequency_, other->frequency_);
    std::swap(gain_, other->gain_);
    std::swap(guid_, other->guid_);
    std::swap(priority_, other->priority_);
    std::swap(enabled_, other->enabled_);
    std::swap(gainmode_, other->gainmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RxCommandResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RxCommandResponse_descriptor_;
  metadata.reflection = RxCommandResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rx_command_msg

// @@protoc_insertion_point(global_scope)
