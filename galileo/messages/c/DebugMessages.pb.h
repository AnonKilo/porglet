// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DebugMessages.proto

#ifndef PROTOBUF_DebugMessages_2eproto__INCLUDED
#define PROTOBUF_DebugMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace falcon_debug_msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DebugMessages_2eproto();
void protobuf_AssignDesc_DebugMessages_2eproto();
void protobuf_ShutdownFile_DebugMessages_2eproto();

class Info;
class Warning;
class Error;

// ===================================================================

class Info : public ::google::protobuf::Message {
 public:
  Info();
  virtual ~Info();

  Info(const Info& from);

  inline Info& operator=(const Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Info& default_instance();

  void Swap(Info* other);

  // implements Message ----------------------------------------------

  Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Info& from);
  void MergeFrom(const Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "INFO"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional string hostname = 10 [default = "localhost"];
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 10;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional string timestamp = 20;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 20;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // optional string reporter = 30;
  inline bool has_reporter() const;
  inline void clear_reporter();
  static const int kReporterFieldNumber = 30;
  inline const ::std::string& reporter() const;
  inline void set_reporter(const ::std::string& value);
  inline void set_reporter(const char* value);
  inline void set_reporter(const char* value, size_t size);
  inline ::std::string* mutable_reporter();
  inline ::std::string* release_reporter();
  inline void set_allocated_reporter(::std::string* reporter);

  // optional string msg = 31;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 31;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:falcon_debug_msg.Info)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_reporter();
  inline void clear_has_reporter();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* hostname_;
  static ::std::string* _default_hostname_;
  ::std::string* timestamp_;
  ::std::string* reporter_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DebugMessages_2eproto();
  friend void protobuf_AssignDesc_DebugMessages_2eproto();
  friend void protobuf_ShutdownFile_DebugMessages_2eproto();

  void InitAsDefaultInstance();
  static Info* default_instance_;
};
// -------------------------------------------------------------------

class Warning : public ::google::protobuf::Message {
 public:
  Warning();
  virtual ~Warning();

  Warning(const Warning& from);

  inline Warning& operator=(const Warning& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Warning& default_instance();

  void Swap(Warning* other);

  // implements Message ----------------------------------------------

  Warning* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Warning& from);
  void MergeFrom(const Warning& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "WARNING"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional string hostname = 10 [default = "localhost"];
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 10;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional string timestamp = 20;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 20;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // optional string reporter = 30;
  inline bool has_reporter() const;
  inline void clear_reporter();
  static const int kReporterFieldNumber = 30;
  inline const ::std::string& reporter() const;
  inline void set_reporter(const ::std::string& value);
  inline void set_reporter(const char* value);
  inline void set_reporter(const char* value, size_t size);
  inline ::std::string* mutable_reporter();
  inline ::std::string* release_reporter();
  inline void set_allocated_reporter(::std::string* reporter);

  // optional string msg = 31;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 31;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:falcon_debug_msg.Warning)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_reporter();
  inline void clear_has_reporter();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* hostname_;
  static ::std::string* _default_hostname_;
  ::std::string* timestamp_;
  ::std::string* reporter_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DebugMessages_2eproto();
  friend void protobuf_AssignDesc_DebugMessages_2eproto();
  friend void protobuf_ShutdownFile_DebugMessages_2eproto();

  void InitAsDefaultInstance();
  static Warning* default_instance_;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "ERROR"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional string hostname = 10 [default = "localhost"];
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 10;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional string timestamp = 20;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 20;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // optional string reporter = 30;
  inline bool has_reporter() const;
  inline void clear_reporter();
  static const int kReporterFieldNumber = 30;
  inline const ::std::string& reporter() const;
  inline void set_reporter(const ::std::string& value);
  inline void set_reporter(const char* value);
  inline void set_reporter(const char* value, size_t size);
  inline ::std::string* mutable_reporter();
  inline ::std::string* release_reporter();
  inline void set_allocated_reporter(::std::string* reporter);

  // optional string msg = 31;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 31;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional bool fatal = 32;
  inline bool has_fatal() const;
  inline void clear_fatal();
  static const int kFatalFieldNumber = 32;
  inline bool fatal() const;
  inline void set_fatal(bool value);

  // @@protoc_insertion_point(class_scope:falcon_debug_msg.Error)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_reporter();
  inline void clear_has_reporter();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_fatal();
  inline void clear_has_fatal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* hostname_;
  static ::std::string* _default_hostname_;
  ::std::string* timestamp_;
  ::std::string* reporter_;
  ::std::string* msg_;
  bool fatal_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_DebugMessages_2eproto();
  friend void protobuf_AssignDesc_DebugMessages_2eproto();
  friend void protobuf_ShutdownFile_DebugMessages_2eproto();

  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// ===================================================================


// ===================================================================

// Info

// optional string msgName = 1 [default = "INFO"];
inline bool Info::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Info::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Info::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Info::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& Info::msgname() const {
  return *msgname_;
}
inline void Info::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void Info::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void Info::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Info::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* Info::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void Info::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional string hostname = 10 [default = "localhost"];
inline bool Info::has_hostname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Info::set_has_hostname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Info::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Info::clear_hostname() {
  if (hostname_ != _default_hostname_) {
    hostname_->assign(*_default_hostname_);
  }
  clear_has_hostname();
}
inline const ::std::string& Info::hostname() const {
  return *hostname_;
}
inline void Info::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == _default_hostname_) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void Info::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == _default_hostname_) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void Info::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == _default_hostname_) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Info::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == _default_hostname_) {
    hostname_ = new ::std::string(*_default_hostname_);
  }
  return hostname_;
}
inline ::std::string* Info::release_hostname() {
  clear_has_hostname();
  if (hostname_ == _default_hostname_) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(_default_hostname_);
    return temp;
  }
}
inline void Info::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != _default_hostname_) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(_default_hostname_);
  }
}

// optional string timestamp = 20;
inline bool Info::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Info::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Info::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Info::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& Info::timestamp() const {
  return *timestamp_;
}
inline void Info::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void Info::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void Info::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Info::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* Info::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Info::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string reporter = 30;
inline bool Info::has_reporter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Info::set_has_reporter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Info::clear_has_reporter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Info::clear_reporter() {
  if (reporter_ != &::google::protobuf::internal::kEmptyString) {
    reporter_->clear();
  }
  clear_has_reporter();
}
inline const ::std::string& Info::reporter() const {
  return *reporter_;
}
inline void Info::set_reporter(const ::std::string& value) {
  set_has_reporter();
  if (reporter_ == &::google::protobuf::internal::kEmptyString) {
    reporter_ = new ::std::string;
  }
  reporter_->assign(value);
}
inline void Info::set_reporter(const char* value) {
  set_has_reporter();
  if (reporter_ == &::google::protobuf::internal::kEmptyString) {
    reporter_ = new ::std::string;
  }
  reporter_->assign(value);
}
inline void Info::set_reporter(const char* value, size_t size) {
  set_has_reporter();
  if (reporter_ == &::google::protobuf::internal::kEmptyString) {
    reporter_ = new ::std::string;
  }
  reporter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Info::mutable_reporter() {
  set_has_reporter();
  if (reporter_ == &::google::protobuf::internal::kEmptyString) {
    reporter_ = new ::std::string;
  }
  return reporter_;
}
inline ::std::string* Info::release_reporter() {
  clear_has_reporter();
  if (reporter_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reporter_;
    reporter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Info::set_allocated_reporter(::std::string* reporter) {
  if (reporter_ != &::google::protobuf::internal::kEmptyString) {
    delete reporter_;
  }
  if (reporter) {
    set_has_reporter();
    reporter_ = reporter;
  } else {
    clear_has_reporter();
    reporter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string msg = 31;
inline bool Info::has_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Info::set_has_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Info::clear_has_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Info::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Info::msg() const {
  return *msg_;
}
inline void Info::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Info::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Info::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Info::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* Info::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Info::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Warning

// optional string msgName = 1 [default = "WARNING"];
inline bool Warning::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Warning::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Warning::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Warning::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& Warning::msgname() const {
  return *msgname_;
}
inline void Warning::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void Warning::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void Warning::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Warning::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* Warning::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void Warning::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional string hostname = 10 [default = "localhost"];
inline bool Warning::has_hostname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Warning::set_has_hostname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Warning::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Warning::clear_hostname() {
  if (hostname_ != _default_hostname_) {
    hostname_->assign(*_default_hostname_);
  }
  clear_has_hostname();
}
inline const ::std::string& Warning::hostname() const {
  return *hostname_;
}
inline void Warning::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == _default_hostname_) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void Warning::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == _default_hostname_) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void Warning::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == _default_hostname_) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Warning::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == _default_hostname_) {
    hostname_ = new ::std::string(*_default_hostname_);
  }
  return hostname_;
}
inline ::std::string* Warning::release_hostname() {
  clear_has_hostname();
  if (hostname_ == _default_hostname_) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(_default_hostname_);
    return temp;
  }
}
inline void Warning::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != _default_hostname_) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(_default_hostname_);
  }
}

// optional string timestamp = 20;
inline bool Warning::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Warning::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Warning::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Warning::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& Warning::timestamp() const {
  return *timestamp_;
}
inline void Warning::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void Warning::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void Warning::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Warning::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* Warning::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Warning::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string reporter = 30;
inline bool Warning::has_reporter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Warning::set_has_reporter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Warning::clear_has_reporter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Warning::clear_reporter() {
  if (reporter_ != &::google::protobuf::internal::kEmptyString) {
    reporter_->clear();
  }
  clear_has_reporter();
}
inline const ::std::string& Warning::reporter() const {
  return *reporter_;
}
inline void Warning::set_reporter(const ::std::string& value) {
  set_has_reporter();
  if (reporter_ == &::google::protobuf::internal::kEmptyString) {
    reporter_ = new ::std::string;
  }
  reporter_->assign(value);
}
inline void Warning::set_reporter(const char* value) {
  set_has_reporter();
  if (reporter_ == &::google::protobuf::internal::kEmptyString) {
    reporter_ = new ::std::string;
  }
  reporter_->assign(value);
}
inline void Warning::set_reporter(const char* value, size_t size) {
  set_has_reporter();
  if (reporter_ == &::google::protobuf::internal::kEmptyString) {
    reporter_ = new ::std::string;
  }
  reporter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Warning::mutable_reporter() {
  set_has_reporter();
  if (reporter_ == &::google::protobuf::internal::kEmptyString) {
    reporter_ = new ::std::string;
  }
  return reporter_;
}
inline ::std::string* Warning::release_reporter() {
  clear_has_reporter();
  if (reporter_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reporter_;
    reporter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Warning::set_allocated_reporter(::std::string* reporter) {
  if (reporter_ != &::google::protobuf::internal::kEmptyString) {
    delete reporter_;
  }
  if (reporter) {
    set_has_reporter();
    reporter_ = reporter;
  } else {
    clear_has_reporter();
    reporter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string msg = 31;
inline bool Warning::has_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Warning::set_has_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Warning::clear_has_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Warning::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Warning::msg() const {
  return *msg_;
}
inline void Warning::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Warning::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Warning::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Warning::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* Warning::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Warning::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Error

// optional string msgName = 1 [default = "ERROR"];
inline bool Error::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& Error::msgname() const {
  return *msgname_;
}
inline void Error::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void Error::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void Error::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* Error::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void Error::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional string hostname = 10 [default = "localhost"];
inline bool Error::has_hostname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_hostname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_hostname() {
  if (hostname_ != _default_hostname_) {
    hostname_->assign(*_default_hostname_);
  }
  clear_has_hostname();
}
inline const ::std::string& Error::hostname() const {
  return *hostname_;
}
inline void Error::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == _default_hostname_) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void Error::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == _default_hostname_) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void Error::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == _default_hostname_) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == _default_hostname_) {
    hostname_ = new ::std::string(*_default_hostname_);
  }
  return hostname_;
}
inline ::std::string* Error::release_hostname() {
  clear_has_hostname();
  if (hostname_ == _default_hostname_) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(_default_hostname_);
    return temp;
  }
}
inline void Error::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != _default_hostname_) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(_default_hostname_);
  }
}

// optional string timestamp = 20;
inline bool Error::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Error::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Error::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Error::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& Error::timestamp() const {
  return *timestamp_;
}
inline void Error::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void Error::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void Error::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* Error::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Error::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string reporter = 30;
inline bool Error::has_reporter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Error::set_has_reporter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Error::clear_has_reporter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Error::clear_reporter() {
  if (reporter_ != &::google::protobuf::internal::kEmptyString) {
    reporter_->clear();
  }
  clear_has_reporter();
}
inline const ::std::string& Error::reporter() const {
  return *reporter_;
}
inline void Error::set_reporter(const ::std::string& value) {
  set_has_reporter();
  if (reporter_ == &::google::protobuf::internal::kEmptyString) {
    reporter_ = new ::std::string;
  }
  reporter_->assign(value);
}
inline void Error::set_reporter(const char* value) {
  set_has_reporter();
  if (reporter_ == &::google::protobuf::internal::kEmptyString) {
    reporter_ = new ::std::string;
  }
  reporter_->assign(value);
}
inline void Error::set_reporter(const char* value, size_t size) {
  set_has_reporter();
  if (reporter_ == &::google::protobuf::internal::kEmptyString) {
    reporter_ = new ::std::string;
  }
  reporter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_reporter() {
  set_has_reporter();
  if (reporter_ == &::google::protobuf::internal::kEmptyString) {
    reporter_ = new ::std::string;
  }
  return reporter_;
}
inline ::std::string* Error::release_reporter() {
  clear_has_reporter();
  if (reporter_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reporter_;
    reporter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Error::set_allocated_reporter(::std::string* reporter) {
  if (reporter_ != &::google::protobuf::internal::kEmptyString) {
    delete reporter_;
  }
  if (reporter) {
    set_has_reporter();
    reporter_ = reporter;
  } else {
    clear_has_reporter();
    reporter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string msg = 31;
inline bool Error::has_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Error::set_has_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Error::clear_has_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Error::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Error::msg() const {
  return *msg_;
}
inline void Error::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Error::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Error::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* Error::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Error::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool fatal = 32;
inline bool Error::has_fatal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Error::set_has_fatal() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Error::clear_has_fatal() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Error::clear_fatal() {
  fatal_ = false;
  clear_has_fatal();
}
inline bool Error::fatal() const {
  return fatal_;
}
inline void Error::set_fatal(bool value) {
  set_has_fatal();
  fatal_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace falcon_debug_msg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DebugMessages_2eproto__INCLUDED
