// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KeplerUIConnectionMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KeplerUIConnectionMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* UItoKeplerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UItoKeplerMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeplertoUIMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeplertoUIMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* UINack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UINack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UINack_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ICDVersionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ICDVersionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBVersionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBVersionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ICDVersionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ICDVersionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBVersionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBVersionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBCredentialsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBCredentialsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBCredentialsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBCredentialsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIConnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIConnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIConnectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIConnectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIDisconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIDisconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* UISignalEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UISignalEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UISignalEvent_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UIVideoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIVideoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIVideoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIVideoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIGeoInformationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIGeoInformationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIGeoInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIGeoInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* UICommandRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UICommandRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIOptionsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIOptionsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIOption_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UIOption_DetectionSource_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UIOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIOptionDelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIOptionDelete_reflection_ = NULL;
const ::google::protobuf::Descriptor* UICeaseBuzzer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UICeaseBuzzer_reflection_ = NULL;
const ::google::protobuf::Descriptor* EWStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EWStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* OutputChannelStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutputChannelStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OutputChannelStatus_TransmitState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UISetDefaultSchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UISetDefaultSchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeplerHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeplerHeartBeat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_KeplerUIConnectionMessages_2eproto() {
  protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KeplerUIConnectionMessages.proto");
  GOOGLE_CHECK(file != NULL);
  UItoKeplerMessage_descriptor_ = file->message_type(0);
  static const int UItoKeplerMessage_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UItoKeplerMessage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UItoKeplerMessage, msguiack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UItoKeplerMessage, msguinack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UItoKeplerMessage, msgicdversionrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UItoKeplerMessage, msgdbversionrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UItoKeplerMessage, msgdbcredentialsrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UItoKeplerMessage, msguiconnectrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UItoKeplerMessage, msguidisconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UItoKeplerMessage, msguivideorequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UItoKeplerMessage, msguigeoinformationrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UItoKeplerMessage, msguicommandrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UItoKeplerMessage, msguiceasebuzzer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UItoKeplerMessage, msguisetdefaultschedule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UItoKeplerMessage, msguioptionsrequest_),
  };
  UItoKeplerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UItoKeplerMessage_descriptor_,
      UItoKeplerMessage::default_instance_,
      UItoKeplerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UItoKeplerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UItoKeplerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UItoKeplerMessage));
  KeplertoUIMessage_descriptor_ = file->message_type(1);
  static const int KeplertoUIMessage_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplertoUIMessage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplertoUIMessage, msguiack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplertoUIMessage, msguinack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplertoUIMessage, msgicdversionresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplertoUIMessage, msgdbversionresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplertoUIMessage, msgdbcredentialsresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplertoUIMessage, msguiconnectresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplertoUIMessage, msguisignalevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplertoUIMessage, msguivideoresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplertoUIMessage, msguigeoinformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplertoUIMessage, msguioptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplertoUIMessage, msguioptiondelete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplertoUIMessage, msgewstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplertoUIMessage, msgkeplerheartbeat_),
  };
  KeplertoUIMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeplertoUIMessage_descriptor_,
      KeplertoUIMessage::default_instance_,
      KeplertoUIMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplertoUIMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplertoUIMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeplertoUIMessage));
  UIAck_descriptor_ = file->message_type(2);
  static const int UIAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIAck, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIAck, seqnumber_),
  };
  UIAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIAck_descriptor_,
      UIAck::default_instance_,
      UIAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIAck));
  UINack_descriptor_ = file->message_type(3);
  static const int UINack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UINack, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UINack, seqnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UINack, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UINack, reason_),
  };
  UINack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UINack_descriptor_,
      UINack::default_instance_,
      UINack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UINack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UINack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UINack));
  UINack_ErrorCode_descriptor_ = UINack_descriptor_->enum_type(0);
  ICDVersionRequest_descriptor_ = file->message_type(4);
  static const int ICDVersionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICDVersionRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICDVersionRequest, sendername_),
  };
  ICDVersionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ICDVersionRequest_descriptor_,
      ICDVersionRequest::default_instance_,
      ICDVersionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICDVersionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICDVersionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ICDVersionRequest));
  DBVersionRequest_descriptor_ = file->message_type(5);
  static const int DBVersionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBVersionRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBVersionRequest, sendername_),
  };
  DBVersionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBVersionRequest_descriptor_,
      DBVersionRequest::default_instance_,
      DBVersionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBVersionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBVersionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBVersionRequest));
  ICDVersionResponse_descriptor_ = file->message_type(6);
  static const int ICDVersionResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICDVersionResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICDVersionResponse, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICDVersionResponse, minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICDVersionResponse, patch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICDVersionResponse, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICDVersionResponse, info_),
  };
  ICDVersionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ICDVersionResponse_descriptor_,
      ICDVersionResponse::default_instance_,
      ICDVersionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICDVersionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICDVersionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ICDVersionResponse));
  DBVersionResponse_descriptor_ = file->message_type(7);
  static const int DBVersionResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBVersionResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBVersionResponse, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBVersionResponse, minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBVersionResponse, patch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBVersionResponse, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBVersionResponse, info_),
  };
  DBVersionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBVersionResponse_descriptor_,
      DBVersionResponse::default_instance_,
      DBVersionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBVersionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBVersionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBVersionResponse));
  DBCredentialsRequest_descriptor_ = file->message_type(8);
  static const int DBCredentialsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCredentialsRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCredentialsRequest, sendername_),
  };
  DBCredentialsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBCredentialsRequest_descriptor_,
      DBCredentialsRequest::default_instance_,
      DBCredentialsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCredentialsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCredentialsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBCredentialsRequest));
  DBCredentialsResponse_descriptor_ = file->message_type(9);
  static const int DBCredentialsResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCredentialsResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCredentialsResponse, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCredentialsResponse, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCredentialsResponse, dbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCredentialsResponse, dbuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCredentialsResponse, dbpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCredentialsResponse, dbport_),
  };
  DBCredentialsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBCredentialsResponse_descriptor_,
      DBCredentialsResponse::default_instance_,
      DBCredentialsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCredentialsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCredentialsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBCredentialsResponse));
  UIConnectRequest_descriptor_ = file->message_type(10);
  static const int UIConnectRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIConnectRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIConnectRequest, sendername_),
  };
  UIConnectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIConnectRequest_descriptor_,
      UIConnectRequest::default_instance_,
      UIConnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIConnectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIConnectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIConnectRequest));
  UIConnectResponse_descriptor_ = file->message_type(11);
  static const int UIConnectResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIConnectResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIConnectResponse, connectionid_),
  };
  UIConnectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIConnectResponse_descriptor_,
      UIConnectResponse::default_instance_,
      UIConnectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIConnectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIConnectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIConnectResponse));
  UIDisconnect_descriptor_ = file->message_type(12);
  static const int UIDisconnect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIDisconnect, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIDisconnect, sendername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIDisconnect, connectionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIDisconnect, test_),
  };
  UIDisconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIDisconnect_descriptor_,
      UIDisconnect::default_instance_,
      UIDisconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIDisconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIDisconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIDisconnect));
  UISignalEvent_descriptor_ = file->message_type(13);
  static const int UISignalEvent_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISignalEvent, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISignalEvent, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISignalEvent, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISignalEvent, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISignalEvent, soinum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISignalEvent, rfmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISignalEvent, antaz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISignalEvent, antel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISignalEvent, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISignalEvent, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISignalEvent, name_),
  };
  UISignalEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UISignalEvent_descriptor_,
      UISignalEvent::default_instance_,
      UISignalEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISignalEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISignalEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UISignalEvent));
  UISignalEvent_Type_descriptor_ = UISignalEvent_descriptor_->enum_type(0);
  UIVideoRequest_descriptor_ = file->message_type(14);
  static const int UIVideoRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIVideoRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIVideoRequest, eltex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIVideoRequest, connectionid_),
  };
  UIVideoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIVideoRequest_descriptor_,
      UIVideoRequest::default_instance_,
      UIVideoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIVideoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIVideoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIVideoRequest));
  UIVideoResponse_descriptor_ = file->message_type(15);
  static const int UIVideoResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIVideoResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIVideoResponse, eltex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIVideoResponse, portnumber_),
  };
  UIVideoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIVideoResponse_descriptor_,
      UIVideoResponse::default_instance_,
      UIVideoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIVideoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIVideoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIVideoResponse));
  UIGeoInformationRequest_descriptor_ = file->message_type(16);
  static const int UIGeoInformationRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformationRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformationRequest, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformationRequest, connectionid_),
  };
  UIGeoInformationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIGeoInformationRequest_descriptor_,
      UIGeoInformationRequest::default_instance_,
      UIGeoInformationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIGeoInformationRequest));
  UIGeoInformation_descriptor_ = file->message_type(17);
  static const int UIGeoInformation_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, majoraxis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, minoraxis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, altconf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, vconf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, headconf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, covariance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, geotime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, classification_),
  };
  UIGeoInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIGeoInformation_descriptor_,
      UIGeoInformation::default_instance_,
      UIGeoInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGeoInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIGeoInformation));
  UICommandRequest_descriptor_ = file->message_type(18);
  static const int UICommandRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UICommandRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UICommandRequest, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UICommandRequest, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UICommandRequest, parameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UICommandRequest, antenna_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UICommandRequest, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UICommandRequest, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UICommandRequest, signalname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UICommandRequest, connectionid_),
  };
  UICommandRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UICommandRequest_descriptor_,
      UICommandRequest::default_instance_,
      UICommandRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UICommandRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UICommandRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UICommandRequest));
  Parameter_descriptor_ = file->message_type(19);
  static const int Parameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, value_),
  };
  Parameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parameter_descriptor_,
      Parameter::default_instance_,
      Parameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parameter));
  UIOptionsRequest_descriptor_ = file->message_type(20);
  static const int UIOptionsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOptionsRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOptionsRequest, connectionid_),
  };
  UIOptionsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIOptionsRequest_descriptor_,
      UIOptionsRequest::default_instance_,
      UIOptionsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOptionsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOptionsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIOptionsRequest));
  UIOption_descriptor_ = file->message_type(21);
  static const int UIOption_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOption, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOption, signalname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOption, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOption, detectionsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOption, globalid_),
  };
  UIOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIOption_descriptor_,
      UIOption::default_instance_,
      UIOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIOption));
  UIOption_DetectionSource_descriptor_ = UIOption_descriptor_->enum_type(0);
  UIOptions_descriptor_ = file->message_type(22);
  static const int UIOptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOptions, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOptions, uiopt_),
  };
  UIOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIOptions_descriptor_,
      UIOptions::default_instance_,
      UIOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIOptions));
  UIOptionDelete_descriptor_ = file->message_type(23);
  static const int UIOptionDelete_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOptionDelete, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOptionDelete, globalid_),
  };
  UIOptionDelete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIOptionDelete_descriptor_,
      UIOptionDelete::default_instance_,
      UIOptionDelete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOptionDelete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIOptionDelete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIOptionDelete));
  UICeaseBuzzer_descriptor_ = file->message_type(24);
  static const int UICeaseBuzzer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UICeaseBuzzer, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UICeaseBuzzer, connectionid_),
  };
  UICeaseBuzzer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UICeaseBuzzer_descriptor_,
      UICeaseBuzzer::default_instance_,
      UICeaseBuzzer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UICeaseBuzzer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UICeaseBuzzer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UICeaseBuzzer));
  EWStatus_descriptor_ = file->message_type(25);
  static const int EWStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWStatus, outputchannelstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWStatus, timestamp_),
  };
  EWStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EWStatus_descriptor_,
      EWStatus::default_instance_,
      EWStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EWStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EWStatus));
  OutputChannelStatus_descriptor_ = file->message_type(26);
  static const int OutputChannelStatus_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, transmitfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, antenna_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, powermeter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, signalname_),
  };
  OutputChannelStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OutputChannelStatus_descriptor_,
      OutputChannelStatus::default_instance_,
      OutputChannelStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputChannelStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OutputChannelStatus));
  OutputChannelStatus_TransmitState_descriptor_ = OutputChannelStatus_descriptor_->enum_type(0);
  UISetDefaultSchedule_descriptor_ = file->message_type(27);
  static const int UISetDefaultSchedule_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISetDefaultSchedule, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISetDefaultSchedule, channelnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISetDefaultSchedule, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISetDefaultSchedule, connectionid_),
  };
  UISetDefaultSchedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UISetDefaultSchedule_descriptor_,
      UISetDefaultSchedule::default_instance_,
      UISetDefaultSchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISetDefaultSchedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UISetDefaultSchedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UISetDefaultSchedule));
  KeplerHeartBeat_descriptor_ = file->message_type(28);
  static const int KeplerHeartBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerHeartBeat, msgname_),
  };
  KeplerHeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeplerHeartBeat_descriptor_,
      KeplerHeartBeat::default_instance_,
      KeplerHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerHeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerHeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeplerHeartBeat));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KeplerUIConnectionMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UItoKeplerMessage_descriptor_, &UItoKeplerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeplertoUIMessage_descriptor_, &KeplertoUIMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIAck_descriptor_, &UIAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UINack_descriptor_, &UINack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ICDVersionRequest_descriptor_, &ICDVersionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBVersionRequest_descriptor_, &DBVersionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ICDVersionResponse_descriptor_, &ICDVersionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBVersionResponse_descriptor_, &DBVersionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBCredentialsRequest_descriptor_, &DBCredentialsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBCredentialsResponse_descriptor_, &DBCredentialsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIConnectRequest_descriptor_, &UIConnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIConnectResponse_descriptor_, &UIConnectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIDisconnect_descriptor_, &UIDisconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UISignalEvent_descriptor_, &UISignalEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIVideoRequest_descriptor_, &UIVideoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIVideoResponse_descriptor_, &UIVideoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIGeoInformationRequest_descriptor_, &UIGeoInformationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIGeoInformation_descriptor_, &UIGeoInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UICommandRequest_descriptor_, &UICommandRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parameter_descriptor_, &Parameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIOptionsRequest_descriptor_, &UIOptionsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIOption_descriptor_, &UIOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIOptions_descriptor_, &UIOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIOptionDelete_descriptor_, &UIOptionDelete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UICeaseBuzzer_descriptor_, &UICeaseBuzzer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EWStatus_descriptor_, &EWStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OutputChannelStatus_descriptor_, &OutputChannelStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UISetDefaultSchedule_descriptor_, &UISetDefaultSchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeplerHeartBeat_descriptor_, &KeplerHeartBeat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KeplerUIConnectionMessages_2eproto() {
  delete UItoKeplerMessage::default_instance_;
  delete UItoKeplerMessage_reflection_;
  delete KeplertoUIMessage::default_instance_;
  delete KeplertoUIMessage_reflection_;
  delete UIAck::default_instance_;
  delete UIAck_reflection_;
  delete UIAck::_default_msgname_;
  delete UINack::default_instance_;
  delete UINack_reflection_;
  delete UINack::_default_msgname_;
  delete ICDVersionRequest::default_instance_;
  delete ICDVersionRequest_reflection_;
  delete ICDVersionRequest::_default_msgname_;
  delete DBVersionRequest::default_instance_;
  delete DBVersionRequest_reflection_;
  delete DBVersionRequest::_default_msgname_;
  delete ICDVersionResponse::default_instance_;
  delete ICDVersionResponse_reflection_;
  delete ICDVersionResponse::_default_msgname_;
  delete DBVersionResponse::default_instance_;
  delete DBVersionResponse_reflection_;
  delete DBVersionResponse::_default_msgname_;
  delete DBCredentialsRequest::default_instance_;
  delete DBCredentialsRequest_reflection_;
  delete DBCredentialsRequest::_default_msgname_;
  delete DBCredentialsResponse::default_instance_;
  delete DBCredentialsResponse_reflection_;
  delete DBCredentialsResponse::_default_msgname_;
  delete UIConnectRequest::default_instance_;
  delete UIConnectRequest_reflection_;
  delete UIConnectRequest::_default_msgname_;
  delete UIConnectResponse::default_instance_;
  delete UIConnectResponse_reflection_;
  delete UIConnectResponse::_default_msgname_;
  delete UIConnectResponse::_default_connectionid_;
  delete UIDisconnect::default_instance_;
  delete UIDisconnect_reflection_;
  delete UIDisconnect::_default_msgname_;
  delete UIDisconnect::_default_connectionid_;
  delete UIDisconnect::_default_test_;
  delete UISignalEvent::default_instance_;
  delete UISignalEvent_reflection_;
  delete UISignalEvent::_default_msgname_;
  delete UIVideoRequest::default_instance_;
  delete UIVideoRequest_reflection_;
  delete UIVideoRequest::_default_msgname_;
  delete UIVideoRequest::_default_connectionid_;
  delete UIVideoResponse::default_instance_;
  delete UIVideoResponse_reflection_;
  delete UIVideoResponse::_default_msgname_;
  delete UIGeoInformationRequest::default_instance_;
  delete UIGeoInformationRequest_reflection_;
  delete UIGeoInformationRequest::_default_msgname_;
  delete UIGeoInformationRequest::_default_connectionid_;
  delete UIGeoInformation::default_instance_;
  delete UIGeoInformation_reflection_;
  delete UIGeoInformation::_default_msgname_;
  delete UICommandRequest::default_instance_;
  delete UICommandRequest_reflection_;
  delete UICommandRequest::_default_msgname_;
  delete UICommandRequest::_default_connectionid_;
  delete Parameter::default_instance_;
  delete Parameter_reflection_;
  delete Parameter::_default_msgname_;
  delete UIOptionsRequest::default_instance_;
  delete UIOptionsRequest_reflection_;
  delete UIOptionsRequest::_default_msgname_;
  delete UIOptionsRequest::_default_connectionid_;
  delete UIOption::default_instance_;
  delete UIOption_reflection_;
  delete UIOption::_default_msgname_;
  delete UIOptions::default_instance_;
  delete UIOptions_reflection_;
  delete UIOptions::_default_msgname_;
  delete UIOptionDelete::default_instance_;
  delete UIOptionDelete_reflection_;
  delete UIOptionDelete::_default_msgname_;
  delete UICeaseBuzzer::default_instance_;
  delete UICeaseBuzzer_reflection_;
  delete UICeaseBuzzer::_default_msgname_;
  delete UICeaseBuzzer::_default_connectionid_;
  delete EWStatus::default_instance_;
  delete EWStatus_reflection_;
  delete EWStatus::_default_msgname_;
  delete OutputChannelStatus::default_instance_;
  delete OutputChannelStatus_reflection_;
  delete OutputChannelStatus::_default_msgname_;
  delete UISetDefaultSchedule::default_instance_;
  delete UISetDefaultSchedule_reflection_;
  delete UISetDefaultSchedule::_default_msgname_;
  delete KeplerHeartBeat::default_instance_;
  delete KeplerHeartBeat_reflection_;
  delete KeplerHeartBeat::_default_msgname_;
}

void protobuf_AddDesc_KeplerUIConnectionMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::service_infrastructure::protobuf_AddDesc_ServiceInfrastructureCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n KeplerUIConnectionMessages.proto\032!Serv"
    "iceInfrastructureCommon.proto\"\227\005\n\021UItoKe"
    "plerMessage\022.\n\006header\030d \001(\0132\036.service_in"
    "frastructure.Header\022\030\n\010msgUIAck\030\004 \001(\0132\006."
    "UIAck\022\032\n\tmsgUINack\030\005 \001(\0132\007.UINack\0220\n\024msg"
    "ICDVersionRequest\030\006 \001(\0132\022.ICDVersionRequ"
    "est\022.\n\023msgDBVersionRequest\030\007 \001(\0132\021.DBVer"
    "sionRequest\0226\n\027msgDBCredentialsRequest\030\010"
    " \001(\0132\025.DBCredentialsRequest\022.\n\023msgUIConn"
    "ectRequest\030\t \001(\0132\021.UIConnectRequest\022&\n\017m"
    "sgUIDisconnect\030\n \001(\0132\r.UIDisconnect\022*\n\021m"
    "sgUIVideoRequest\030\013 \001(\0132\017.UIVideoRequest\022"
    "<\n\032msgUIGeoInformationRequest\030\014 \001(\0132\030.UI"
    "GeoInformationRequest\022.\n\023msgUICommandReq"
    "uest\030\r \001(\0132\021.UICommandRequest\022(\n\020msgUICe"
    "aseBuzzer\030\016 \001(\0132\016.UICeaseBuzzer\0226\n\027msgUI"
    "SetDefaultSchedule\030\017 \001(\0132\025.UISetDefaultS"
    "chedule\022.\n\023msgUIOptionsRequest\030\020 \001(\0132\021.U"
    "IOptionsRequest\"\357\004\n\021KeplertoUIMessage\022.\n"
    "\006header\030d \001(\0132\036.service_infrastructure.H"
    "eader\022\030\n\010msgUIAck\030\004 \001(\0132\006.UIAck\022\032\n\tmsgUI"
    "Nack\030\005 \001(\0132\007.UINack\0222\n\025msgICDVersionResp"
    "onse\030\006 \001(\0132\023.ICDVersionResponse\0220\n\024msgDB"
    "VersionResponse\030\007 \001(\0132\022.DBVersionRespons"
    "e\0228\n\030msgDBCredentialsResponse\030\010 \001(\0132\026.DB"
    "CredentialsResponse\0220\n\024msgUIConnectRespo"
    "nse\030\t \001(\0132\022.UIConnectResponse\022(\n\020msgUISi"
    "gnalEvent\030\n \001(\0132\016.UISignalEvent\022,\n\022msgUI"
    "VideoResponse\030\013 \001(\0132\020.UIVideoResponse\022.\n"
    "\023msgUIGeoInformation\030\014 \001(\0132\021.UIGeoInform"
    "ation\022 \n\014msgUIOptions\030\r \001(\0132\n.UIOptions\022"
    "*\n\021msgUIOptionDelete\030\016 \001(\0132\017.UIOptionDel"
    "ete\022\036\n\013msgEWStatus\030\017 \001(\0132\t.EWStatus\022,\n\022m"
    "sgKeplerHeartBeat\030\020 \001(\0132\020.KeplerHeartBea"
    "t\"2\n\005UIAck\022\026\n\007msgName\030\001 \001(\t:\005UIAck\022\021\n\tse"
    "qNumber\030\002 \001(\003\"\255\001\n\006UINack\022\027\n\007msgName\030\001 \001("
    "\t:\006UINack\022\021\n\tseqNumber\030\002 \001(\005\022$\n\terrorCod"
    "e\030\003 \001(\0162\021.UINack.ErrorCode\022\016\n\006reason\030\004 \001"
    "(\t\"A\n\tErrorCode\022\016\n\nInvalidMsg\020\000\022\017\n\013Wrong"
    "SeqNum\020\001\022\023\n\017UnrecognizedMsg\020\002\"K\n\021ICDVers"
    "ionRequest\022\"\n\007msgName\030\001 \001(\t:\021ICDVersionR"
    "equest\022\022\n\nsenderName\030\002 \001(\t\"I\n\020DBVersionR"
    "equest\022!\n\007msgName\030\001 \001(\t:\020DBVersionReques"
    "t\022\022\n\nsenderName\030\002 \001(\t\"\213\001\n\022ICDVersionResp"
    "onse\022#\n\007msgName\030\001 \001(\t:\022ICDVersionRespons"
    "e\022\020\n\005major\030\002 \001(\003:\0010\022\020\n\005minor\030\003 \001(\003:\0010\022\020\n"
    "\005patch\030\004 \001(\003:\0011\022\014\n\004date\030\005 \001(\t\022\014\n\004info\030\006 "
    "\001(\t\"\211\001\n\021DBVersionResponse\022\"\n\007msgName\030\001 \001"
    "(\t:\021DBVersionResponse\022\020\n\005major\030\002 \001(\003:\0010\022"
    "\020\n\005minor\030\003 \001(\003:\0010\022\020\n\005patch\030\004 \001(\003:\0011\022\014\n\004d"
    "ate\030\005 \001(\t\022\014\n\004info\030\006 \001(\t\"Q\n\024DBCredentials"
    "Request\022%\n\007msgName\030\001 \001(\t:\024DBCredentialsR"
    "equest\022\022\n\nsenderName\030\002 \001(\t\"\241\001\n\025DBCredent"
    "ialsResponse\022&\n\007msgName\030\001 \001(\t:\025DBCredent"
    "ialsResponse\022\020\n\010hostName\030\002 \001(\t\022\n\n\002ip\030\003 \001"
    "(\t\022\016\n\006dbName\030\004 \001(\t\022\016\n\006dbUser\030\005 \001(\t\022\022\n\ndb"
    "Password\030\006 \001(\t\022\016\n\006dbPort\030\007 \001(\t\"I\n\020UIConn"
    "ectRequest\022!\n\007msgName\030\001 \001(\t:\020UIConnectRe"
    "quest\022\022\n\nsenderName\030\002 \001(\t\"b\n\021UIConnectRe"
    "sponse\022\"\n\007msgName\030\001 \001(\t:\021UIConnectRespon"
    "se\022)\n\014connectionID\030\002 \001(\t:\023defaultConnect"
    "ionID\"\206\001\n\014UIDisconnect\022\035\n\007msgName\030\001 \001(\t:"
    "\014UIDisconnect\022\022\n\nsenderName\030\002 \001(\t\022)\n\014con"
    "nectionID\030\003 \001(\t:\023defaultConnectionID\022\030\n\004"
    "test\030\004 \001(\t:\ntestString\"\253\002\n\rUISignalEvent"
    "\022\036\n\007msgName\030\001 \001(\t:\rUISignalEvent\022\017\n\007chan"
    "nel\030\002 \001(\005\022\017\n\007eventID\030\003 \001(\t\022\021\n\ttimestamp\030"
    "\004 \001(\t\022\016\n\006soiNum\030\005 \001(\t\022\r\n\005rfMHz\030\006 \001(\002\022\020\n\005"
    "antAz\030\007 \001(\002:\0010\022\020\n\005antEl\030\010 \001(\002:\0010\022\020\n\010glob"
    "alId\030\t \001(\t\022&\n\teventType\030\n \001(\0162\023.UISignal"
    "Event.Type\022\014\n\004name\030\013 \001(\t\":\n\004Type\022\n\n\006SIGD"
    "ET\020\000\022\t\n\005SIGUP\020\001\022\013\n\007SIGDOWN\020\002\022\016\n\nSIGTIMEO"
    "UT\020\003\"k\n\016UIVideoRequest\022\037\n\007msgName\030\001 \001(\t:"
    "\016UIVideoRequest\022\r\n\005eltex\030\002 \001(\t\022)\n\014connec"
    "tionID\030\003 \001(\t:\023defaultConnectionID\"V\n\017UIV"
    "ideoResponse\022 \n\007msgName\030\001 \001(\t:\017UIVideoRe"
    "sponse\022\r\n\005eltex\030\002 \001(\t\022\022\n\nportNumber\030\003 \001("
    "\003\"\200\001\n\027UIGeoInformationRequest\022(\n\007msgName"
    "\030\001 \001(\t:\027UIGeoInformationRequest\022\020\n\010globa"
    "lId\030\002 \001(\t\022)\n\014connectionID\030\003 \001(\t:\023default"
    "ConnectionID\"\302\002\n\020UIGeoInformation\022!\n\007msg"
    "Name\030\001 \001(\t:\020UIGeoInformation\022\013\n\003lat\030\002 \001("
    "\001\022\013\n\003lon\030\003 \001(\001\022\021\n\tmajoraxis\030\004 \001(\001\022\021\n\tmin"
    "oraxis\030\005 \001(\001\022\023\n\013orientation\030\006 \001(\001\022\020\n\010alt"
    "itude\030\007 \001(\001\022\017\n\007altConf\030\010 \001(\005\022\020\n\010velocity"
    "\030\t \001(\001\022\r\n\005vConf\030\n \001(\005\022\017\n\007heading\030\013 \001(\001\022\020"
    "\n\010headConf\030\014 \001(\005\022\022\n\ncovariance\030\r \001(\t\022\020\n\010"
    "globalId\030\016 \001(\t\022\017\n\007geoTime\030\017 \001(\t\022\030\n\016class"
    "ification\030\020 \001(\t:\000\"\345\001\n\020UICommandRequest\022!"
    "\n\007msgName\030\001 \001(\t:\020UICommandRequest\022\020\n\010glo"
    "balId\030\002 \001(\t\022\016\n\006effect\030\003 \002(\t\022\035\n\tparameter"
    "\030\004 \003(\0132\n.Parameter\022\017\n\007antenna\030\005 \001(\t\022\016\n\006a"
    "ctive\030\006 \001(\010\022\r\n\005resID\030\007 \001(\t\022\022\n\nsignalName"
    "\030\010 \001(\t\022)\n\014connectionID\030\t \001(\t:\023defaultCon"
    "nectionID\"G\n\tParameter\022\035\n\007msgName\030\001 \001(\t:"
    "\014EW_PARAMETER\022\014\n\004name\030\002 \002(\t\022\r\n\005value\030\003 \002"
    "(\t\"`\n\020UIOptionsRequest\022!\n\007msgName\030\001 \001(\t:"
    "\020UIOptionsRequest\022)\n\014connectionID\030\002 \001(\t:"
    "\023defaultConnectionID\"\333\001\n\010UIOption\022\031\n\007msg"
    "Name\030\001 \001(\t:\010UIOption\022\022\n\nsignalName\030\002 \001(\t"
    "\022\016\n\006effect\030\003 \003(\t\0222\n\017detectionSource\030\004 \001("
    "\0162\031.UIOption.DetectionSource\022\020\n\010globalId"
    "\030\005 \001(\t\"J\n\017DetectionSource\022\014\n\010EXTERNAL\020\000\022"
    "\r\n\tDETECTION\020\001\022\t\n\005EVENT\020\002\022\017\n\013THUNDERBIRD"
    "\020\003\"A\n\tUIOptions\022\032\n\007msgName\030\001 \001(\t:\tUIOpti"
    "ons\022\030\n\005uiopt\030\002 \003(\0132\t.UIOption\"C\n\016UIOptio"
    "nDelete\022\037\n\007msgName\030\001 \001(\t:\016UIOptionDelete"
    "\022\020\n\010globalId\030\002 \001(\t\"Z\n\rUICeaseBuzzer\022\036\n\007m"
    "sgName\030\001 \001(\t:\rUICeaseBuzzer\022)\n\014connectio"
    "nID\030\002 \001(\t:\023defaultConnectionID\"k\n\010EWStat"
    "us\022\031\n\007msgName\030\001 \001(\t:\010EWStatus\0221\n\023outputC"
    "hannelStatus\030\002 \003(\0132\024.OutputChannelStatus"
    "\022\021\n\ttimestamp\030\003 \001(\t\"\261\002\n\023OutputChannelSta"
    "tus\022)\n\007msgName\030\001 \001(\t:\030EW_OUTPUT_CHANNEL_"
    "STATUS\022\016\n\006effect\030\002 \001(\t\022\024\n\014transmitFreq\030\003"
    " \001(\001\022\020\n\010globalId\030\004 \001(\t\022\017\n\007antenna\030\005 \001(\t\022"
    "1\n\005state\030\006 \001(\0162\".OutputChannelStatus.Tra"
    "nsmitState\022\022\n\npowerMeter\030\007 \001(\001\022\r\n\005resID\030"
    "\010 \001(\t\022\022\n\nsignalName\030\t \001(\t\"<\n\rTransmitSta"
    "te\022\017\n\013UNAVAILABLE\020\000\022\013\n\007PENDING\020\001\022\r\n\tAVAI"
    "LABLE\020\002\"y\n\024UISetDefaultSchedule\022%\n\007msgNa"
    "me\030\001 \001(\t:\024UISetDefaultSchedule\022\022\n\nchanne"
    "lNum\030\002 \001(\005\022\020\n\010fileName\030\003 \001(\t\022\024\n\014connecti"
    "onID\030\004 \001(\t\"3\n\017KeplerHeartBeat\022 \n\007msgName"
    "\030\001 \001(\t:\017KeplerHeartBeatB\025\n\023fv.protos.kep"
    "svisor", 5006);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KeplerUIConnectionMessages.proto", &protobuf_RegisterTypes);
  UItoKeplerMessage::default_instance_ = new UItoKeplerMessage();
  KeplertoUIMessage::default_instance_ = new KeplertoUIMessage();
  UIAck::_default_msgname_ =
      new ::std::string("UIAck", 5);
  UIAck::default_instance_ = new UIAck();
  UINack::_default_msgname_ =
      new ::std::string("UINack", 6);
  UINack::default_instance_ = new UINack();
  ICDVersionRequest::_default_msgname_ =
      new ::std::string("ICDVersionRequest", 17);
  ICDVersionRequest::default_instance_ = new ICDVersionRequest();
  DBVersionRequest::_default_msgname_ =
      new ::std::string("DBVersionRequest", 16);
  DBVersionRequest::default_instance_ = new DBVersionRequest();
  ICDVersionResponse::_default_msgname_ =
      new ::std::string("ICDVersionResponse", 18);
  ICDVersionResponse::default_instance_ = new ICDVersionResponse();
  DBVersionResponse::_default_msgname_ =
      new ::std::string("DBVersionResponse", 17);
  DBVersionResponse::default_instance_ = new DBVersionResponse();
  DBCredentialsRequest::_default_msgname_ =
      new ::std::string("DBCredentialsRequest", 20);
  DBCredentialsRequest::default_instance_ = new DBCredentialsRequest();
  DBCredentialsResponse::_default_msgname_ =
      new ::std::string("DBCredentialsResponse", 21);
  DBCredentialsResponse::default_instance_ = new DBCredentialsResponse();
  UIConnectRequest::_default_msgname_ =
      new ::std::string("UIConnectRequest", 16);
  UIConnectRequest::default_instance_ = new UIConnectRequest();
  UIConnectResponse::_default_msgname_ =
      new ::std::string("UIConnectResponse", 17);
  UIConnectResponse::_default_connectionid_ =
      new ::std::string("defaultConnectionID", 19);
  UIConnectResponse::default_instance_ = new UIConnectResponse();
  UIDisconnect::_default_msgname_ =
      new ::std::string("UIDisconnect", 12);
  UIDisconnect::_default_connectionid_ =
      new ::std::string("defaultConnectionID", 19);
  UIDisconnect::_default_test_ =
      new ::std::string("testString", 10);
  UIDisconnect::default_instance_ = new UIDisconnect();
  UISignalEvent::_default_msgname_ =
      new ::std::string("UISignalEvent", 13);
  UISignalEvent::default_instance_ = new UISignalEvent();
  UIVideoRequest::_default_msgname_ =
      new ::std::string("UIVideoRequest", 14);
  UIVideoRequest::_default_connectionid_ =
      new ::std::string("defaultConnectionID", 19);
  UIVideoRequest::default_instance_ = new UIVideoRequest();
  UIVideoResponse::_default_msgname_ =
      new ::std::string("UIVideoResponse", 15);
  UIVideoResponse::default_instance_ = new UIVideoResponse();
  UIGeoInformationRequest::_default_msgname_ =
      new ::std::string("UIGeoInformationRequest", 23);
  UIGeoInformationRequest::_default_connectionid_ =
      new ::std::string("defaultConnectionID", 19);
  UIGeoInformationRequest::default_instance_ = new UIGeoInformationRequest();
  UIGeoInformation::_default_msgname_ =
      new ::std::string("UIGeoInformation", 16);
  UIGeoInformation::default_instance_ = new UIGeoInformation();
  UICommandRequest::_default_msgname_ =
      new ::std::string("UICommandRequest", 16);
  UICommandRequest::_default_connectionid_ =
      new ::std::string("defaultConnectionID", 19);
  UICommandRequest::default_instance_ = new UICommandRequest();
  Parameter::_default_msgname_ =
      new ::std::string("EW_PARAMETER", 12);
  Parameter::default_instance_ = new Parameter();
  UIOptionsRequest::_default_msgname_ =
      new ::std::string("UIOptionsRequest", 16);
  UIOptionsRequest::_default_connectionid_ =
      new ::std::string("defaultConnectionID", 19);
  UIOptionsRequest::default_instance_ = new UIOptionsRequest();
  UIOption::_default_msgname_ =
      new ::std::string("UIOption", 8);
  UIOption::default_instance_ = new UIOption();
  UIOptions::_default_msgname_ =
      new ::std::string("UIOptions", 9);
  UIOptions::default_instance_ = new UIOptions();
  UIOptionDelete::_default_msgname_ =
      new ::std::string("UIOptionDelete", 14);
  UIOptionDelete::default_instance_ = new UIOptionDelete();
  UICeaseBuzzer::_default_msgname_ =
      new ::std::string("UICeaseBuzzer", 13);
  UICeaseBuzzer::_default_connectionid_ =
      new ::std::string("defaultConnectionID", 19);
  UICeaseBuzzer::default_instance_ = new UICeaseBuzzer();
  EWStatus::_default_msgname_ =
      new ::std::string("EWStatus", 8);
  EWStatus::default_instance_ = new EWStatus();
  OutputChannelStatus::_default_msgname_ =
      new ::std::string("EW_OUTPUT_CHANNEL_STATUS", 24);
  OutputChannelStatus::default_instance_ = new OutputChannelStatus();
  UISetDefaultSchedule::_default_msgname_ =
      new ::std::string("UISetDefaultSchedule", 20);
  UISetDefaultSchedule::default_instance_ = new UISetDefaultSchedule();
  KeplerHeartBeat::_default_msgname_ =
      new ::std::string("KeplerHeartBeat", 15);
  KeplerHeartBeat::default_instance_ = new KeplerHeartBeat();
  UItoKeplerMessage::default_instance_->InitAsDefaultInstance();
  KeplertoUIMessage::default_instance_->InitAsDefaultInstance();
  UIAck::default_instance_->InitAsDefaultInstance();
  UINack::default_instance_->InitAsDefaultInstance();
  ICDVersionRequest::default_instance_->InitAsDefaultInstance();
  DBVersionRequest::default_instance_->InitAsDefaultInstance();
  ICDVersionResponse::default_instance_->InitAsDefaultInstance();
  DBVersionResponse::default_instance_->InitAsDefaultInstance();
  DBCredentialsRequest::default_instance_->InitAsDefaultInstance();
  DBCredentialsResponse::default_instance_->InitAsDefaultInstance();
  UIConnectRequest::default_instance_->InitAsDefaultInstance();
  UIConnectResponse::default_instance_->InitAsDefaultInstance();
  UIDisconnect::default_instance_->InitAsDefaultInstance();
  UISignalEvent::default_instance_->InitAsDefaultInstance();
  UIVideoRequest::default_instance_->InitAsDefaultInstance();
  UIVideoResponse::default_instance_->InitAsDefaultInstance();
  UIGeoInformationRequest::default_instance_->InitAsDefaultInstance();
  UIGeoInformation::default_instance_->InitAsDefaultInstance();
  UICommandRequest::default_instance_->InitAsDefaultInstance();
  Parameter::default_instance_->InitAsDefaultInstance();
  UIOptionsRequest::default_instance_->InitAsDefaultInstance();
  UIOption::default_instance_->InitAsDefaultInstance();
  UIOptions::default_instance_->InitAsDefaultInstance();
  UIOptionDelete::default_instance_->InitAsDefaultInstance();
  UICeaseBuzzer::default_instance_->InitAsDefaultInstance();
  EWStatus::default_instance_->InitAsDefaultInstance();
  OutputChannelStatus::default_instance_->InitAsDefaultInstance();
  UISetDefaultSchedule::default_instance_->InitAsDefaultInstance();
  KeplerHeartBeat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KeplerUIConnectionMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KeplerUIConnectionMessages_2eproto {
  StaticDescriptorInitializer_KeplerUIConnectionMessages_2eproto() {
    protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  }
} static_descriptor_initializer_KeplerUIConnectionMessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UItoKeplerMessage::kHeaderFieldNumber;
const int UItoKeplerMessage::kMsgUIAckFieldNumber;
const int UItoKeplerMessage::kMsgUINackFieldNumber;
const int UItoKeplerMessage::kMsgICDVersionRequestFieldNumber;
const int UItoKeplerMessage::kMsgDBVersionRequestFieldNumber;
const int UItoKeplerMessage::kMsgDBCredentialsRequestFieldNumber;
const int UItoKeplerMessage::kMsgUIConnectRequestFieldNumber;
const int UItoKeplerMessage::kMsgUIDisconnectFieldNumber;
const int UItoKeplerMessage::kMsgUIVideoRequestFieldNumber;
const int UItoKeplerMessage::kMsgUIGeoInformationRequestFieldNumber;
const int UItoKeplerMessage::kMsgUICommandRequestFieldNumber;
const int UItoKeplerMessage::kMsgUICeaseBuzzerFieldNumber;
const int UItoKeplerMessage::kMsgUISetDefaultScheduleFieldNumber;
const int UItoKeplerMessage::kMsgUIOptionsRequestFieldNumber;
#endif  // !_MSC_VER

UItoKeplerMessage::UItoKeplerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UItoKeplerMessage::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  msguiack_ = const_cast< ::UIAck*>(&::UIAck::default_instance());
  msguinack_ = const_cast< ::UINack*>(&::UINack::default_instance());
  msgicdversionrequest_ = const_cast< ::ICDVersionRequest*>(&::ICDVersionRequest::default_instance());
  msgdbversionrequest_ = const_cast< ::DBVersionRequest*>(&::DBVersionRequest::default_instance());
  msgdbcredentialsrequest_ = const_cast< ::DBCredentialsRequest*>(&::DBCredentialsRequest::default_instance());
  msguiconnectrequest_ = const_cast< ::UIConnectRequest*>(&::UIConnectRequest::default_instance());
  msguidisconnect_ = const_cast< ::UIDisconnect*>(&::UIDisconnect::default_instance());
  msguivideorequest_ = const_cast< ::UIVideoRequest*>(&::UIVideoRequest::default_instance());
  msguigeoinformationrequest_ = const_cast< ::UIGeoInformationRequest*>(&::UIGeoInformationRequest::default_instance());
  msguicommandrequest_ = const_cast< ::UICommandRequest*>(&::UICommandRequest::default_instance());
  msguiceasebuzzer_ = const_cast< ::UICeaseBuzzer*>(&::UICeaseBuzzer::default_instance());
  msguisetdefaultschedule_ = const_cast< ::UISetDefaultSchedule*>(&::UISetDefaultSchedule::default_instance());
  msguioptionsrequest_ = const_cast< ::UIOptionsRequest*>(&::UIOptionsRequest::default_instance());
}

UItoKeplerMessage::UItoKeplerMessage(const UItoKeplerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UItoKeplerMessage::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  msguiack_ = NULL;
  msguinack_ = NULL;
  msgicdversionrequest_ = NULL;
  msgdbversionrequest_ = NULL;
  msgdbcredentialsrequest_ = NULL;
  msguiconnectrequest_ = NULL;
  msguidisconnect_ = NULL;
  msguivideorequest_ = NULL;
  msguigeoinformationrequest_ = NULL;
  msguicommandrequest_ = NULL;
  msguiceasebuzzer_ = NULL;
  msguisetdefaultschedule_ = NULL;
  msguioptionsrequest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UItoKeplerMessage::~UItoKeplerMessage() {
  SharedDtor();
}

void UItoKeplerMessage::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete msguiack_;
    delete msguinack_;
    delete msgicdversionrequest_;
    delete msgdbversionrequest_;
    delete msgdbcredentialsrequest_;
    delete msguiconnectrequest_;
    delete msguidisconnect_;
    delete msguivideorequest_;
    delete msguigeoinformationrequest_;
    delete msguicommandrequest_;
    delete msguiceasebuzzer_;
    delete msguisetdefaultschedule_;
    delete msguioptionsrequest_;
  }
}

void UItoKeplerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UItoKeplerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UItoKeplerMessage_descriptor_;
}

const UItoKeplerMessage& UItoKeplerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UItoKeplerMessage* UItoKeplerMessage::default_instance_ = NULL;

UItoKeplerMessage* UItoKeplerMessage::New() const {
  return new UItoKeplerMessage;
}

void UItoKeplerMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_msguiack()) {
      if (msguiack_ != NULL) msguiack_->::UIAck::Clear();
    }
    if (has_msguinack()) {
      if (msguinack_ != NULL) msguinack_->::UINack::Clear();
    }
    if (has_msgicdversionrequest()) {
      if (msgicdversionrequest_ != NULL) msgicdversionrequest_->::ICDVersionRequest::Clear();
    }
    if (has_msgdbversionrequest()) {
      if (msgdbversionrequest_ != NULL) msgdbversionrequest_->::DBVersionRequest::Clear();
    }
    if (has_msgdbcredentialsrequest()) {
      if (msgdbcredentialsrequest_ != NULL) msgdbcredentialsrequest_->::DBCredentialsRequest::Clear();
    }
    if (has_msguiconnectrequest()) {
      if (msguiconnectrequest_ != NULL) msguiconnectrequest_->::UIConnectRequest::Clear();
    }
    if (has_msguidisconnect()) {
      if (msguidisconnect_ != NULL) msguidisconnect_->::UIDisconnect::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_msguivideorequest()) {
      if (msguivideorequest_ != NULL) msguivideorequest_->::UIVideoRequest::Clear();
    }
    if (has_msguigeoinformationrequest()) {
      if (msguigeoinformationrequest_ != NULL) msguigeoinformationrequest_->::UIGeoInformationRequest::Clear();
    }
    if (has_msguicommandrequest()) {
      if (msguicommandrequest_ != NULL) msguicommandrequest_->::UICommandRequest::Clear();
    }
    if (has_msguiceasebuzzer()) {
      if (msguiceasebuzzer_ != NULL) msguiceasebuzzer_->::UICeaseBuzzer::Clear();
    }
    if (has_msguisetdefaultschedule()) {
      if (msguisetdefaultschedule_ != NULL) msguisetdefaultschedule_->::UISetDefaultSchedule::Clear();
    }
    if (has_msguioptionsrequest()) {
      if (msguioptionsrequest_ != NULL) msguioptionsrequest_->::UIOptionsRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UItoKeplerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UIAck msgUIAck = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguiack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_msgUINack;
        break;
      }

      // optional .UINack msgUINack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgUINack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguinack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_msgICDVersionRequest;
        break;
      }

      // optional .ICDVersionRequest msgICDVersionRequest = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgICDVersionRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgicdversionrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_msgDBVersionRequest;
        break;
      }

      // optional .DBVersionRequest msgDBVersionRequest = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgDBVersionRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgdbversionrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_msgDBCredentialsRequest;
        break;
      }

      // optional .DBCredentialsRequest msgDBCredentialsRequest = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgDBCredentialsRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgdbcredentialsrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_msgUIConnectRequest;
        break;
      }

      // optional .UIConnectRequest msgUIConnectRequest = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgUIConnectRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguiconnectrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_msgUIDisconnect;
        break;
      }

      // optional .UIDisconnect msgUIDisconnect = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgUIDisconnect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguidisconnect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_msgUIVideoRequest;
        break;
      }

      // optional .UIVideoRequest msgUIVideoRequest = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgUIVideoRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguivideorequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_msgUIGeoInformationRequest;
        break;
      }

      // optional .UIGeoInformationRequest msgUIGeoInformationRequest = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgUIGeoInformationRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguigeoinformationrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_msgUICommandRequest;
        break;
      }

      // optional .UICommandRequest msgUICommandRequest = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgUICommandRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguicommandrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_msgUICeaseBuzzer;
        break;
      }

      // optional .UICeaseBuzzer msgUICeaseBuzzer = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgUICeaseBuzzer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguiceasebuzzer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_msgUISetDefaultSchedule;
        break;
      }

      // optional .UISetDefaultSchedule msgUISetDefaultSchedule = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgUISetDefaultSchedule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguisetdefaultschedule()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_msgUIOptionsRequest;
        break;
      }

      // optional .UIOptionsRequest msgUIOptionsRequest = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgUIOptionsRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguioptionsrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UItoKeplerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .UIAck msgUIAck = 4;
  if (has_msguiack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->msguiack(), output);
  }

  // optional .UINack msgUINack = 5;
  if (has_msguinack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->msguinack(), output);
  }

  // optional .ICDVersionRequest msgICDVersionRequest = 6;
  if (has_msgicdversionrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->msgicdversionrequest(), output);
  }

  // optional .DBVersionRequest msgDBVersionRequest = 7;
  if (has_msgdbversionrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->msgdbversionrequest(), output);
  }

  // optional .DBCredentialsRequest msgDBCredentialsRequest = 8;
  if (has_msgdbcredentialsrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->msgdbcredentialsrequest(), output);
  }

  // optional .UIConnectRequest msgUIConnectRequest = 9;
  if (has_msguiconnectrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->msguiconnectrequest(), output);
  }

  // optional .UIDisconnect msgUIDisconnect = 10;
  if (has_msguidisconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->msguidisconnect(), output);
  }

  // optional .UIVideoRequest msgUIVideoRequest = 11;
  if (has_msguivideorequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->msguivideorequest(), output);
  }

  // optional .UIGeoInformationRequest msgUIGeoInformationRequest = 12;
  if (has_msguigeoinformationrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->msguigeoinformationrequest(), output);
  }

  // optional .UICommandRequest msgUICommandRequest = 13;
  if (has_msguicommandrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->msguicommandrequest(), output);
  }

  // optional .UICeaseBuzzer msgUICeaseBuzzer = 14;
  if (has_msguiceasebuzzer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->msguiceasebuzzer(), output);
  }

  // optional .UISetDefaultSchedule msgUISetDefaultSchedule = 15;
  if (has_msguisetdefaultschedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->msguisetdefaultschedule(), output);
  }

  // optional .UIOptionsRequest msgUIOptionsRequest = 16;
  if (has_msguioptionsrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->msguioptionsrequest(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UItoKeplerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .UIAck msgUIAck = 4;
  if (has_msguiack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->msguiack(), target);
  }

  // optional .UINack msgUINack = 5;
  if (has_msguinack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->msguinack(), target);
  }

  // optional .ICDVersionRequest msgICDVersionRequest = 6;
  if (has_msgicdversionrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->msgicdversionrequest(), target);
  }

  // optional .DBVersionRequest msgDBVersionRequest = 7;
  if (has_msgdbversionrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->msgdbversionrequest(), target);
  }

  // optional .DBCredentialsRequest msgDBCredentialsRequest = 8;
  if (has_msgdbcredentialsrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->msgdbcredentialsrequest(), target);
  }

  // optional .UIConnectRequest msgUIConnectRequest = 9;
  if (has_msguiconnectrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->msguiconnectrequest(), target);
  }

  // optional .UIDisconnect msgUIDisconnect = 10;
  if (has_msguidisconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->msguidisconnect(), target);
  }

  // optional .UIVideoRequest msgUIVideoRequest = 11;
  if (has_msguivideorequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->msguivideorequest(), target);
  }

  // optional .UIGeoInformationRequest msgUIGeoInformationRequest = 12;
  if (has_msguigeoinformationrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->msguigeoinformationrequest(), target);
  }

  // optional .UICommandRequest msgUICommandRequest = 13;
  if (has_msguicommandrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->msguicommandrequest(), target);
  }

  // optional .UICeaseBuzzer msgUICeaseBuzzer = 14;
  if (has_msguiceasebuzzer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->msguiceasebuzzer(), target);
  }

  // optional .UISetDefaultSchedule msgUISetDefaultSchedule = 15;
  if (has_msguisetdefaultschedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->msguisetdefaultschedule(), target);
  }

  // optional .UIOptionsRequest msgUIOptionsRequest = 16;
  if (has_msguioptionsrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->msguioptionsrequest(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UItoKeplerMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .UIAck msgUIAck = 4;
    if (has_msguiack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguiack());
    }

    // optional .UINack msgUINack = 5;
    if (has_msguinack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguinack());
    }

    // optional .ICDVersionRequest msgICDVersionRequest = 6;
    if (has_msgicdversionrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgicdversionrequest());
    }

    // optional .DBVersionRequest msgDBVersionRequest = 7;
    if (has_msgdbversionrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgdbversionrequest());
    }

    // optional .DBCredentialsRequest msgDBCredentialsRequest = 8;
    if (has_msgdbcredentialsrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgdbcredentialsrequest());
    }

    // optional .UIConnectRequest msgUIConnectRequest = 9;
    if (has_msguiconnectrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguiconnectrequest());
    }

    // optional .UIDisconnect msgUIDisconnect = 10;
    if (has_msguidisconnect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguidisconnect());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .UIVideoRequest msgUIVideoRequest = 11;
    if (has_msguivideorequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguivideorequest());
    }

    // optional .UIGeoInformationRequest msgUIGeoInformationRequest = 12;
    if (has_msguigeoinformationrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguigeoinformationrequest());
    }

    // optional .UICommandRequest msgUICommandRequest = 13;
    if (has_msguicommandrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguicommandrequest());
    }

    // optional .UICeaseBuzzer msgUICeaseBuzzer = 14;
    if (has_msguiceasebuzzer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguiceasebuzzer());
    }

    // optional .UISetDefaultSchedule msgUISetDefaultSchedule = 15;
    if (has_msguisetdefaultschedule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguisetdefaultschedule());
    }

    // optional .UIOptionsRequest msgUIOptionsRequest = 16;
    if (has_msguioptionsrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguioptionsrequest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UItoKeplerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UItoKeplerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UItoKeplerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UItoKeplerMessage::MergeFrom(const UItoKeplerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_msguiack()) {
      mutable_msguiack()->::UIAck::MergeFrom(from.msguiack());
    }
    if (from.has_msguinack()) {
      mutable_msguinack()->::UINack::MergeFrom(from.msguinack());
    }
    if (from.has_msgicdversionrequest()) {
      mutable_msgicdversionrequest()->::ICDVersionRequest::MergeFrom(from.msgicdversionrequest());
    }
    if (from.has_msgdbversionrequest()) {
      mutable_msgdbversionrequest()->::DBVersionRequest::MergeFrom(from.msgdbversionrequest());
    }
    if (from.has_msgdbcredentialsrequest()) {
      mutable_msgdbcredentialsrequest()->::DBCredentialsRequest::MergeFrom(from.msgdbcredentialsrequest());
    }
    if (from.has_msguiconnectrequest()) {
      mutable_msguiconnectrequest()->::UIConnectRequest::MergeFrom(from.msguiconnectrequest());
    }
    if (from.has_msguidisconnect()) {
      mutable_msguidisconnect()->::UIDisconnect::MergeFrom(from.msguidisconnect());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_msguivideorequest()) {
      mutable_msguivideorequest()->::UIVideoRequest::MergeFrom(from.msguivideorequest());
    }
    if (from.has_msguigeoinformationrequest()) {
      mutable_msguigeoinformationrequest()->::UIGeoInformationRequest::MergeFrom(from.msguigeoinformationrequest());
    }
    if (from.has_msguicommandrequest()) {
      mutable_msguicommandrequest()->::UICommandRequest::MergeFrom(from.msguicommandrequest());
    }
    if (from.has_msguiceasebuzzer()) {
      mutable_msguiceasebuzzer()->::UICeaseBuzzer::MergeFrom(from.msguiceasebuzzer());
    }
    if (from.has_msguisetdefaultschedule()) {
      mutable_msguisetdefaultschedule()->::UISetDefaultSchedule::MergeFrom(from.msguisetdefaultschedule());
    }
    if (from.has_msguioptionsrequest()) {
      mutable_msguioptionsrequest()->::UIOptionsRequest::MergeFrom(from.msguioptionsrequest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UItoKeplerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UItoKeplerMessage::CopyFrom(const UItoKeplerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UItoKeplerMessage::IsInitialized() const {

  if (has_msguicommandrequest()) {
    if (!this->msguicommandrequest().IsInitialized()) return false;
  }
  return true;
}

void UItoKeplerMessage::Swap(UItoKeplerMessage* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(msguiack_, other->msguiack_);
    std::swap(msguinack_, other->msguinack_);
    std::swap(msgicdversionrequest_, other->msgicdversionrequest_);
    std::swap(msgdbversionrequest_, other->msgdbversionrequest_);
    std::swap(msgdbcredentialsrequest_, other->msgdbcredentialsrequest_);
    std::swap(msguiconnectrequest_, other->msguiconnectrequest_);
    std::swap(msguidisconnect_, other->msguidisconnect_);
    std::swap(msguivideorequest_, other->msguivideorequest_);
    std::swap(msguigeoinformationrequest_, other->msguigeoinformationrequest_);
    std::swap(msguicommandrequest_, other->msguicommandrequest_);
    std::swap(msguiceasebuzzer_, other->msguiceasebuzzer_);
    std::swap(msguisetdefaultschedule_, other->msguisetdefaultschedule_);
    std::swap(msguioptionsrequest_, other->msguioptionsrequest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UItoKeplerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UItoKeplerMessage_descriptor_;
  metadata.reflection = UItoKeplerMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeplertoUIMessage::kHeaderFieldNumber;
const int KeplertoUIMessage::kMsgUIAckFieldNumber;
const int KeplertoUIMessage::kMsgUINackFieldNumber;
const int KeplertoUIMessage::kMsgICDVersionResponseFieldNumber;
const int KeplertoUIMessage::kMsgDBVersionResponseFieldNumber;
const int KeplertoUIMessage::kMsgDBCredentialsResponseFieldNumber;
const int KeplertoUIMessage::kMsgUIConnectResponseFieldNumber;
const int KeplertoUIMessage::kMsgUISignalEventFieldNumber;
const int KeplertoUIMessage::kMsgUIVideoResponseFieldNumber;
const int KeplertoUIMessage::kMsgUIGeoInformationFieldNumber;
const int KeplertoUIMessage::kMsgUIOptionsFieldNumber;
const int KeplertoUIMessage::kMsgUIOptionDeleteFieldNumber;
const int KeplertoUIMessage::kMsgEWStatusFieldNumber;
const int KeplertoUIMessage::kMsgKeplerHeartBeatFieldNumber;
#endif  // !_MSC_VER

KeplertoUIMessage::KeplertoUIMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeplertoUIMessage::InitAsDefaultInstance() {
  header_ = const_cast< ::service_infrastructure::Header*>(&::service_infrastructure::Header::default_instance());
  msguiack_ = const_cast< ::UIAck*>(&::UIAck::default_instance());
  msguinack_ = const_cast< ::UINack*>(&::UINack::default_instance());
  msgicdversionresponse_ = const_cast< ::ICDVersionResponse*>(&::ICDVersionResponse::default_instance());
  msgdbversionresponse_ = const_cast< ::DBVersionResponse*>(&::DBVersionResponse::default_instance());
  msgdbcredentialsresponse_ = const_cast< ::DBCredentialsResponse*>(&::DBCredentialsResponse::default_instance());
  msguiconnectresponse_ = const_cast< ::UIConnectResponse*>(&::UIConnectResponse::default_instance());
  msguisignalevent_ = const_cast< ::UISignalEvent*>(&::UISignalEvent::default_instance());
  msguivideoresponse_ = const_cast< ::UIVideoResponse*>(&::UIVideoResponse::default_instance());
  msguigeoinformation_ = const_cast< ::UIGeoInformation*>(&::UIGeoInformation::default_instance());
  msguioptions_ = const_cast< ::UIOptions*>(&::UIOptions::default_instance());
  msguioptiondelete_ = const_cast< ::UIOptionDelete*>(&::UIOptionDelete::default_instance());
  msgewstatus_ = const_cast< ::EWStatus*>(&::EWStatus::default_instance());
  msgkeplerheartbeat_ = const_cast< ::KeplerHeartBeat*>(&::KeplerHeartBeat::default_instance());
}

KeplertoUIMessage::KeplertoUIMessage(const KeplertoUIMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeplertoUIMessage::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  msguiack_ = NULL;
  msguinack_ = NULL;
  msgicdversionresponse_ = NULL;
  msgdbversionresponse_ = NULL;
  msgdbcredentialsresponse_ = NULL;
  msguiconnectresponse_ = NULL;
  msguisignalevent_ = NULL;
  msguivideoresponse_ = NULL;
  msguigeoinformation_ = NULL;
  msguioptions_ = NULL;
  msguioptiondelete_ = NULL;
  msgewstatus_ = NULL;
  msgkeplerheartbeat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeplertoUIMessage::~KeplertoUIMessage() {
  SharedDtor();
}

void KeplertoUIMessage::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete msguiack_;
    delete msguinack_;
    delete msgicdversionresponse_;
    delete msgdbversionresponse_;
    delete msgdbcredentialsresponse_;
    delete msguiconnectresponse_;
    delete msguisignalevent_;
    delete msguivideoresponse_;
    delete msguigeoinformation_;
    delete msguioptions_;
    delete msguioptiondelete_;
    delete msgewstatus_;
    delete msgkeplerheartbeat_;
  }
}

void KeplertoUIMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeplertoUIMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeplertoUIMessage_descriptor_;
}

const KeplertoUIMessage& KeplertoUIMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

KeplertoUIMessage* KeplertoUIMessage::default_instance_ = NULL;

KeplertoUIMessage* KeplertoUIMessage::New() const {
  return new KeplertoUIMessage;
}

void KeplertoUIMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::service_infrastructure::Header::Clear();
    }
    if (has_msguiack()) {
      if (msguiack_ != NULL) msguiack_->::UIAck::Clear();
    }
    if (has_msguinack()) {
      if (msguinack_ != NULL) msguinack_->::UINack::Clear();
    }
    if (has_msgicdversionresponse()) {
      if (msgicdversionresponse_ != NULL) msgicdversionresponse_->::ICDVersionResponse::Clear();
    }
    if (has_msgdbversionresponse()) {
      if (msgdbversionresponse_ != NULL) msgdbversionresponse_->::DBVersionResponse::Clear();
    }
    if (has_msgdbcredentialsresponse()) {
      if (msgdbcredentialsresponse_ != NULL) msgdbcredentialsresponse_->::DBCredentialsResponse::Clear();
    }
    if (has_msguiconnectresponse()) {
      if (msguiconnectresponse_ != NULL) msguiconnectresponse_->::UIConnectResponse::Clear();
    }
    if (has_msguisignalevent()) {
      if (msguisignalevent_ != NULL) msguisignalevent_->::UISignalEvent::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_msguivideoresponse()) {
      if (msguivideoresponse_ != NULL) msguivideoresponse_->::UIVideoResponse::Clear();
    }
    if (has_msguigeoinformation()) {
      if (msguigeoinformation_ != NULL) msguigeoinformation_->::UIGeoInformation::Clear();
    }
    if (has_msguioptions()) {
      if (msguioptions_ != NULL) msguioptions_->::UIOptions::Clear();
    }
    if (has_msguioptiondelete()) {
      if (msguioptiondelete_ != NULL) msguioptiondelete_->::UIOptionDelete::Clear();
    }
    if (has_msgewstatus()) {
      if (msgewstatus_ != NULL) msgewstatus_->::EWStatus::Clear();
    }
    if (has_msgkeplerheartbeat()) {
      if (msgkeplerheartbeat_ != NULL) msgkeplerheartbeat_->::KeplerHeartBeat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeplertoUIMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UIAck msgUIAck = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguiack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_msgUINack;
        break;
      }

      // optional .UINack msgUINack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgUINack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguinack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_msgICDVersionResponse;
        break;
      }

      // optional .ICDVersionResponse msgICDVersionResponse = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgICDVersionResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgicdversionresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_msgDBVersionResponse;
        break;
      }

      // optional .DBVersionResponse msgDBVersionResponse = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgDBVersionResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgdbversionresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_msgDBCredentialsResponse;
        break;
      }

      // optional .DBCredentialsResponse msgDBCredentialsResponse = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgDBCredentialsResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgdbcredentialsresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_msgUIConnectResponse;
        break;
      }

      // optional .UIConnectResponse msgUIConnectResponse = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgUIConnectResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguiconnectresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_msgUISignalEvent;
        break;
      }

      // optional .UISignalEvent msgUISignalEvent = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgUISignalEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguisignalevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_msgUIVideoResponse;
        break;
      }

      // optional .UIVideoResponse msgUIVideoResponse = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgUIVideoResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguivideoresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_msgUIGeoInformation;
        break;
      }

      // optional .UIGeoInformation msgUIGeoInformation = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgUIGeoInformation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguigeoinformation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_msgUIOptions;
        break;
      }

      // optional .UIOptions msgUIOptions = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgUIOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguioptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_msgUIOptionDelete;
        break;
      }

      // optional .UIOptionDelete msgUIOptionDelete = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgUIOptionDelete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguioptiondelete()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_msgEWStatus;
        break;
      }

      // optional .EWStatus msgEWStatus = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgEWStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgewstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_msgKeplerHeartBeat;
        break;
      }

      // optional .KeplerHeartBeat msgKeplerHeartBeat = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgKeplerHeartBeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgkeplerheartbeat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_header;
        break;
      }

      // optional .service_infrastructure.Header header = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeplertoUIMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .UIAck msgUIAck = 4;
  if (has_msguiack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->msguiack(), output);
  }

  // optional .UINack msgUINack = 5;
  if (has_msguinack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->msguinack(), output);
  }

  // optional .ICDVersionResponse msgICDVersionResponse = 6;
  if (has_msgicdversionresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->msgicdversionresponse(), output);
  }

  // optional .DBVersionResponse msgDBVersionResponse = 7;
  if (has_msgdbversionresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->msgdbversionresponse(), output);
  }

  // optional .DBCredentialsResponse msgDBCredentialsResponse = 8;
  if (has_msgdbcredentialsresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->msgdbcredentialsresponse(), output);
  }

  // optional .UIConnectResponse msgUIConnectResponse = 9;
  if (has_msguiconnectresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->msguiconnectresponse(), output);
  }

  // optional .UISignalEvent msgUISignalEvent = 10;
  if (has_msguisignalevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->msguisignalevent(), output);
  }

  // optional .UIVideoResponse msgUIVideoResponse = 11;
  if (has_msguivideoresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->msguivideoresponse(), output);
  }

  // optional .UIGeoInformation msgUIGeoInformation = 12;
  if (has_msguigeoinformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->msguigeoinformation(), output);
  }

  // optional .UIOptions msgUIOptions = 13;
  if (has_msguioptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->msguioptions(), output);
  }

  // optional .UIOptionDelete msgUIOptionDelete = 14;
  if (has_msguioptiondelete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->msguioptiondelete(), output);
  }

  // optional .EWStatus msgEWStatus = 15;
  if (has_msgewstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->msgewstatus(), output);
  }

  // optional .KeplerHeartBeat msgKeplerHeartBeat = 16;
  if (has_msgkeplerheartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->msgkeplerheartbeat(), output);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeplertoUIMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .UIAck msgUIAck = 4;
  if (has_msguiack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->msguiack(), target);
  }

  // optional .UINack msgUINack = 5;
  if (has_msguinack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->msguinack(), target);
  }

  // optional .ICDVersionResponse msgICDVersionResponse = 6;
  if (has_msgicdversionresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->msgicdversionresponse(), target);
  }

  // optional .DBVersionResponse msgDBVersionResponse = 7;
  if (has_msgdbversionresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->msgdbversionresponse(), target);
  }

  // optional .DBCredentialsResponse msgDBCredentialsResponse = 8;
  if (has_msgdbcredentialsresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->msgdbcredentialsresponse(), target);
  }

  // optional .UIConnectResponse msgUIConnectResponse = 9;
  if (has_msguiconnectresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->msguiconnectresponse(), target);
  }

  // optional .UISignalEvent msgUISignalEvent = 10;
  if (has_msguisignalevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->msguisignalevent(), target);
  }

  // optional .UIVideoResponse msgUIVideoResponse = 11;
  if (has_msguivideoresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->msguivideoresponse(), target);
  }

  // optional .UIGeoInformation msgUIGeoInformation = 12;
  if (has_msguigeoinformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->msguigeoinformation(), target);
  }

  // optional .UIOptions msgUIOptions = 13;
  if (has_msguioptions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->msguioptions(), target);
  }

  // optional .UIOptionDelete msgUIOptionDelete = 14;
  if (has_msguioptiondelete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->msguioptiondelete(), target);
  }

  // optional .EWStatus msgEWStatus = 15;
  if (has_msgewstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->msgewstatus(), target);
  }

  // optional .KeplerHeartBeat msgKeplerHeartBeat = 16;
  if (has_msgkeplerheartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->msgkeplerheartbeat(), target);
  }

  // optional .service_infrastructure.Header header = 100;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeplertoUIMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .service_infrastructure.Header header = 100;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .UIAck msgUIAck = 4;
    if (has_msguiack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguiack());
    }

    // optional .UINack msgUINack = 5;
    if (has_msguinack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguinack());
    }

    // optional .ICDVersionResponse msgICDVersionResponse = 6;
    if (has_msgicdversionresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgicdversionresponse());
    }

    // optional .DBVersionResponse msgDBVersionResponse = 7;
    if (has_msgdbversionresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgdbversionresponse());
    }

    // optional .DBCredentialsResponse msgDBCredentialsResponse = 8;
    if (has_msgdbcredentialsresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgdbcredentialsresponse());
    }

    // optional .UIConnectResponse msgUIConnectResponse = 9;
    if (has_msguiconnectresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguiconnectresponse());
    }

    // optional .UISignalEvent msgUISignalEvent = 10;
    if (has_msguisignalevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguisignalevent());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .UIVideoResponse msgUIVideoResponse = 11;
    if (has_msguivideoresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguivideoresponse());
    }

    // optional .UIGeoInformation msgUIGeoInformation = 12;
    if (has_msguigeoinformation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguigeoinformation());
    }

    // optional .UIOptions msgUIOptions = 13;
    if (has_msguioptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguioptions());
    }

    // optional .UIOptionDelete msgUIOptionDelete = 14;
    if (has_msguioptiondelete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguioptiondelete());
    }

    // optional .EWStatus msgEWStatus = 15;
    if (has_msgewstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgewstatus());
    }

    // optional .KeplerHeartBeat msgKeplerHeartBeat = 16;
    if (has_msgkeplerheartbeat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgkeplerheartbeat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeplertoUIMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeplertoUIMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeplertoUIMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeplertoUIMessage::MergeFrom(const KeplertoUIMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::service_infrastructure::Header::MergeFrom(from.header());
    }
    if (from.has_msguiack()) {
      mutable_msguiack()->::UIAck::MergeFrom(from.msguiack());
    }
    if (from.has_msguinack()) {
      mutable_msguinack()->::UINack::MergeFrom(from.msguinack());
    }
    if (from.has_msgicdversionresponse()) {
      mutable_msgicdversionresponse()->::ICDVersionResponse::MergeFrom(from.msgicdversionresponse());
    }
    if (from.has_msgdbversionresponse()) {
      mutable_msgdbversionresponse()->::DBVersionResponse::MergeFrom(from.msgdbversionresponse());
    }
    if (from.has_msgdbcredentialsresponse()) {
      mutable_msgdbcredentialsresponse()->::DBCredentialsResponse::MergeFrom(from.msgdbcredentialsresponse());
    }
    if (from.has_msguiconnectresponse()) {
      mutable_msguiconnectresponse()->::UIConnectResponse::MergeFrom(from.msguiconnectresponse());
    }
    if (from.has_msguisignalevent()) {
      mutable_msguisignalevent()->::UISignalEvent::MergeFrom(from.msguisignalevent());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_msguivideoresponse()) {
      mutable_msguivideoresponse()->::UIVideoResponse::MergeFrom(from.msguivideoresponse());
    }
    if (from.has_msguigeoinformation()) {
      mutable_msguigeoinformation()->::UIGeoInformation::MergeFrom(from.msguigeoinformation());
    }
    if (from.has_msguioptions()) {
      mutable_msguioptions()->::UIOptions::MergeFrom(from.msguioptions());
    }
    if (from.has_msguioptiondelete()) {
      mutable_msguioptiondelete()->::UIOptionDelete::MergeFrom(from.msguioptiondelete());
    }
    if (from.has_msgewstatus()) {
      mutable_msgewstatus()->::EWStatus::MergeFrom(from.msgewstatus());
    }
    if (from.has_msgkeplerheartbeat()) {
      mutable_msgkeplerheartbeat()->::KeplerHeartBeat::MergeFrom(from.msgkeplerheartbeat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeplertoUIMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeplertoUIMessage::CopyFrom(const KeplertoUIMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeplertoUIMessage::IsInitialized() const {

  return true;
}

void KeplertoUIMessage::Swap(KeplertoUIMessage* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(msguiack_, other->msguiack_);
    std::swap(msguinack_, other->msguinack_);
    std::swap(msgicdversionresponse_, other->msgicdversionresponse_);
    std::swap(msgdbversionresponse_, other->msgdbversionresponse_);
    std::swap(msgdbcredentialsresponse_, other->msgdbcredentialsresponse_);
    std::swap(msguiconnectresponse_, other->msguiconnectresponse_);
    std::swap(msguisignalevent_, other->msguisignalevent_);
    std::swap(msguivideoresponse_, other->msguivideoresponse_);
    std::swap(msguigeoinformation_, other->msguigeoinformation_);
    std::swap(msguioptions_, other->msguioptions_);
    std::swap(msguioptiondelete_, other->msguioptiondelete_);
    std::swap(msgewstatus_, other->msgewstatus_);
    std::swap(msgkeplerheartbeat_, other->msgkeplerheartbeat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeplertoUIMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeplertoUIMessage_descriptor_;
  metadata.reflection = KeplertoUIMessage_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UIAck::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UIAck::kMsgNameFieldNumber;
const int UIAck::kSeqNumberFieldNumber;
#endif  // !_MSC_VER

UIAck::UIAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIAck::InitAsDefaultInstance() {
}

UIAck::UIAck(const UIAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIAck::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  seqnumber_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIAck::~UIAck() {
  SharedDtor();
}

void UIAck::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void UIAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIAck_descriptor_;
}

const UIAck& UIAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UIAck* UIAck::default_instance_ = NULL;

UIAck* UIAck::New() const {
  return new UIAck;
}

void UIAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    seqnumber_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UIAck"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seqNumber;
        break;
      }

      // optional int64 seqNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seqnumber_)));
          set_has_seqnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UIAck"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int64 seqNumber = 2;
  if (has_seqnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->seqnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UIAck"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int64 seqNumber = 2;
  if (has_seqnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->seqnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UIAck"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int64 seqNumber = 2;
    if (has_seqnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seqnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIAck::MergeFrom(const UIAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_seqnumber()) {
      set_seqnumber(from.seqnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIAck::CopyFrom(const UIAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIAck::IsInitialized() const {

  return true;
}

void UIAck::Swap(UIAck* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(seqnumber_, other->seqnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIAck_descriptor_;
  metadata.reflection = UIAck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UINack_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UINack_ErrorCode_descriptor_;
}
bool UINack_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UINack_ErrorCode UINack::InvalidMsg;
const UINack_ErrorCode UINack::WrongSeqNum;
const UINack_ErrorCode UINack::UnrecognizedMsg;
const UINack_ErrorCode UINack::ErrorCode_MIN;
const UINack_ErrorCode UINack::ErrorCode_MAX;
const int UINack::ErrorCode_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* UINack::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UINack::kMsgNameFieldNumber;
const int UINack::kSeqNumberFieldNumber;
const int UINack::kErrorCodeFieldNumber;
const int UINack::kReasonFieldNumber;
#endif  // !_MSC_VER

UINack::UINack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UINack::InitAsDefaultInstance() {
}

UINack::UINack(const UINack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UINack::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  seqnumber_ = 0;
  errorcode_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UINack::~UINack() {
  SharedDtor();
}

void UINack::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void UINack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UINack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UINack_descriptor_;
}

const UINack& UINack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UINack* UINack::default_instance_ = NULL;

UINack* UINack::New() const {
  return new UINack;
}

void UINack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    seqnumber_ = 0;
    errorcode_ = 0;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UINack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UINack"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seqNumber;
        break;
      }

      // optional int32 seqNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqnumber_)));
          set_has_seqnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_errorCode;
        break;
      }

      // optional .UINack.ErrorCode errorCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UINack_ErrorCode_IsValid(value)) {
            set_errorcode(static_cast< ::UINack_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reason;
        break;
      }

      // optional string reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UINack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UINack"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 seqNumber = 2;
  if (has_seqnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seqnumber(), output);
  }

  // optional .UINack.ErrorCode errorCode = 3;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->errorcode(), output);
  }

  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UINack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UINack"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 seqNumber = 2;
  if (has_seqnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seqnumber(), target);
  }

  // optional .UINack.ErrorCode errorCode = 3;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->errorcode(), target);
  }

  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UINack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UINack"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 seqNumber = 2;
    if (has_seqnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqnumber());
    }

    // optional .UINack.ErrorCode errorCode = 3;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errorcode());
    }

    // optional string reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UINack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UINack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UINack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UINack::MergeFrom(const UINack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_seqnumber()) {
      set_seqnumber(from.seqnumber());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UINack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UINack::CopyFrom(const UINack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UINack::IsInitialized() const {

  return true;
}

void UINack::Swap(UINack* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(seqnumber_, other->seqnumber_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UINack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UINack_descriptor_;
  metadata.reflection = UINack_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ICDVersionRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ICDVersionRequest::kMsgNameFieldNumber;
const int ICDVersionRequest::kSenderNameFieldNumber;
#endif  // !_MSC_VER

ICDVersionRequest::ICDVersionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ICDVersionRequest::InitAsDefaultInstance() {
}

ICDVersionRequest::ICDVersionRequest(const ICDVersionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ICDVersionRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ICDVersionRequest::~ICDVersionRequest() {
  SharedDtor();
}

void ICDVersionRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (this != default_instance_) {
  }
}

void ICDVersionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ICDVersionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ICDVersionRequest_descriptor_;
}

const ICDVersionRequest& ICDVersionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

ICDVersionRequest* ICDVersionRequest::default_instance_ = NULL;

ICDVersionRequest* ICDVersionRequest::New() const {
  return new ICDVersionRequest;
}

void ICDVersionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::kEmptyString) {
        sendername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ICDVersionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ICDVersionRequest"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_senderName;
        break;
      }

      // optional string senderName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ICDVersionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ICDVersionRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string senderName = 2;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sendername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ICDVersionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ICDVersionRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string senderName = 2;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sendername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ICDVersionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ICDVersionRequest"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string senderName = 2;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ICDVersionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ICDVersionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ICDVersionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ICDVersionRequest::MergeFrom(const ICDVersionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ICDVersionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ICDVersionRequest::CopyFrom(const ICDVersionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ICDVersionRequest::IsInitialized() const {

  return true;
}

void ICDVersionRequest::Swap(ICDVersionRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(sendername_, other->sendername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ICDVersionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ICDVersionRequest_descriptor_;
  metadata.reflection = ICDVersionRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* DBVersionRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int DBVersionRequest::kMsgNameFieldNumber;
const int DBVersionRequest::kSenderNameFieldNumber;
#endif  // !_MSC_VER

DBVersionRequest::DBVersionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBVersionRequest::InitAsDefaultInstance() {
}

DBVersionRequest::DBVersionRequest(const DBVersionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBVersionRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBVersionRequest::~DBVersionRequest() {
  SharedDtor();
}

void DBVersionRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (this != default_instance_) {
  }
}

void DBVersionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBVersionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBVersionRequest_descriptor_;
}

const DBVersionRequest& DBVersionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

DBVersionRequest* DBVersionRequest::default_instance_ = NULL;

DBVersionRequest* DBVersionRequest::New() const {
  return new DBVersionRequest;
}

void DBVersionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::kEmptyString) {
        sendername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBVersionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DBVersionRequest"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_senderName;
        break;
      }

      // optional string senderName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBVersionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DBVersionRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string senderName = 2;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sendername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBVersionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DBVersionRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string senderName = 2;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sendername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBVersionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DBVersionRequest"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string senderName = 2;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBVersionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBVersionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBVersionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBVersionRequest::MergeFrom(const DBVersionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBVersionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBVersionRequest::CopyFrom(const DBVersionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBVersionRequest::IsInitialized() const {

  return true;
}

void DBVersionRequest::Swap(DBVersionRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(sendername_, other->sendername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBVersionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBVersionRequest_descriptor_;
  metadata.reflection = DBVersionRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ICDVersionResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ICDVersionResponse::kMsgNameFieldNumber;
const int ICDVersionResponse::kMajorFieldNumber;
const int ICDVersionResponse::kMinorFieldNumber;
const int ICDVersionResponse::kPatchFieldNumber;
const int ICDVersionResponse::kDateFieldNumber;
const int ICDVersionResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

ICDVersionResponse::ICDVersionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ICDVersionResponse::InitAsDefaultInstance() {
}

ICDVersionResponse::ICDVersionResponse(const ICDVersionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ICDVersionResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  major_ = GOOGLE_LONGLONG(0);
  minor_ = GOOGLE_LONGLONG(0);
  patch_ = GOOGLE_LONGLONG(1);
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ICDVersionResponse::~ICDVersionResponse() {
  SharedDtor();
}

void ICDVersionResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void ICDVersionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ICDVersionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ICDVersionResponse_descriptor_;
}

const ICDVersionResponse& ICDVersionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

ICDVersionResponse* ICDVersionResponse::default_instance_ = NULL;

ICDVersionResponse* ICDVersionResponse::New() const {
  return new ICDVersionResponse;
}

void ICDVersionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    major_ = GOOGLE_LONGLONG(0);
    minor_ = GOOGLE_LONGLONG(0);
    patch_ = GOOGLE_LONGLONG(1);
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::kEmptyString) {
        date_->clear();
      }
    }
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ICDVersionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "ICDVersionResponse"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_major;
        break;
      }

      // optional int64 major = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &major_)));
          set_has_major();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_minor;
        break;
      }

      // optional int64 minor = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minor_)));
          set_has_minor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_patch;
        break;
      }

      // optional int64 patch = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &patch_)));
          set_has_patch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_date;
        break;
      }

      // optional string date = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_info;
        break;
      }

      // optional string info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ICDVersionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "ICDVersionResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int64 major = 2 [default = 0];
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->major(), output);
  }

  // optional int64 minor = 3 [default = 0];
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->minor(), output);
  }

  // optional int64 patch = 4 [default = 1];
  if (has_patch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->patch(), output);
  }

  // optional string date = 5;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->date(), output);
  }

  // optional string info = 6;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ICDVersionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "ICDVersionResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int64 major = 2 [default = 0];
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->major(), target);
  }

  // optional int64 minor = 3 [default = 0];
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->minor(), target);
  }

  // optional int64 patch = 4 [default = 1];
  if (has_patch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->patch(), target);
  }

  // optional string date = 5;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->date(), target);
  }

  // optional string info = 6;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ICDVersionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "ICDVersionResponse"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int64 major = 2 [default = 0];
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->major());
    }

    // optional int64 minor = 3 [default = 0];
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->minor());
    }

    // optional int64 patch = 4 [default = 1];
    if (has_patch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->patch());
    }

    // optional string date = 5;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string info = 6;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ICDVersionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ICDVersionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ICDVersionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ICDVersionResponse::MergeFrom(const ICDVersionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
    if (from.has_patch()) {
      set_patch(from.patch());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ICDVersionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ICDVersionResponse::CopyFrom(const ICDVersionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ICDVersionResponse::IsInitialized() const {

  return true;
}

void ICDVersionResponse::Swap(ICDVersionResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(major_, other->major_);
    std::swap(minor_, other->minor_);
    std::swap(patch_, other->patch_);
    std::swap(date_, other->date_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ICDVersionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ICDVersionResponse_descriptor_;
  metadata.reflection = ICDVersionResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* DBVersionResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int DBVersionResponse::kMsgNameFieldNumber;
const int DBVersionResponse::kMajorFieldNumber;
const int DBVersionResponse::kMinorFieldNumber;
const int DBVersionResponse::kPatchFieldNumber;
const int DBVersionResponse::kDateFieldNumber;
const int DBVersionResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

DBVersionResponse::DBVersionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBVersionResponse::InitAsDefaultInstance() {
}

DBVersionResponse::DBVersionResponse(const DBVersionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBVersionResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  major_ = GOOGLE_LONGLONG(0);
  minor_ = GOOGLE_LONGLONG(0);
  patch_ = GOOGLE_LONGLONG(1);
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBVersionResponse::~DBVersionResponse() {
  SharedDtor();
}

void DBVersionResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void DBVersionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBVersionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBVersionResponse_descriptor_;
}

const DBVersionResponse& DBVersionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

DBVersionResponse* DBVersionResponse::default_instance_ = NULL;

DBVersionResponse* DBVersionResponse::New() const {
  return new DBVersionResponse;
}

void DBVersionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    major_ = GOOGLE_LONGLONG(0);
    minor_ = GOOGLE_LONGLONG(0);
    patch_ = GOOGLE_LONGLONG(1);
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::kEmptyString) {
        date_->clear();
      }
    }
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBVersionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DBVersionResponse"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_major;
        break;
      }

      // optional int64 major = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &major_)));
          set_has_major();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_minor;
        break;
      }

      // optional int64 minor = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minor_)));
          set_has_minor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_patch;
        break;
      }

      // optional int64 patch = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &patch_)));
          set_has_patch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_date;
        break;
      }

      // optional string date = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_info;
        break;
      }

      // optional string info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBVersionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DBVersionResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int64 major = 2 [default = 0];
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->major(), output);
  }

  // optional int64 minor = 3 [default = 0];
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->minor(), output);
  }

  // optional int64 patch = 4 [default = 1];
  if (has_patch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->patch(), output);
  }

  // optional string date = 5;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->date(), output);
  }

  // optional string info = 6;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBVersionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DBVersionResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int64 major = 2 [default = 0];
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->major(), target);
  }

  // optional int64 minor = 3 [default = 0];
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->minor(), target);
  }

  // optional int64 patch = 4 [default = 1];
  if (has_patch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->patch(), target);
  }

  // optional string date = 5;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->date(), target);
  }

  // optional string info = 6;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBVersionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DBVersionResponse"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int64 major = 2 [default = 0];
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->major());
    }

    // optional int64 minor = 3 [default = 0];
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->minor());
    }

    // optional int64 patch = 4 [default = 1];
    if (has_patch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->patch());
    }

    // optional string date = 5;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string info = 6;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBVersionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBVersionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBVersionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBVersionResponse::MergeFrom(const DBVersionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
    if (from.has_patch()) {
      set_patch(from.patch());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBVersionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBVersionResponse::CopyFrom(const DBVersionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBVersionResponse::IsInitialized() const {

  return true;
}

void DBVersionResponse::Swap(DBVersionResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(major_, other->major_);
    std::swap(minor_, other->minor_);
    std::swap(patch_, other->patch_);
    std::swap(date_, other->date_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBVersionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBVersionResponse_descriptor_;
  metadata.reflection = DBVersionResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* DBCredentialsRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int DBCredentialsRequest::kMsgNameFieldNumber;
const int DBCredentialsRequest::kSenderNameFieldNumber;
#endif  // !_MSC_VER

DBCredentialsRequest::DBCredentialsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBCredentialsRequest::InitAsDefaultInstance() {
}

DBCredentialsRequest::DBCredentialsRequest(const DBCredentialsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBCredentialsRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBCredentialsRequest::~DBCredentialsRequest() {
  SharedDtor();
}

void DBCredentialsRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (this != default_instance_) {
  }
}

void DBCredentialsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCredentialsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCredentialsRequest_descriptor_;
}

const DBCredentialsRequest& DBCredentialsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

DBCredentialsRequest* DBCredentialsRequest::default_instance_ = NULL;

DBCredentialsRequest* DBCredentialsRequest::New() const {
  return new DBCredentialsRequest;
}

void DBCredentialsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::kEmptyString) {
        sendername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBCredentialsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DBCredentialsRequest"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_senderName;
        break;
      }

      // optional string senderName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBCredentialsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DBCredentialsRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string senderName = 2;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sendername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBCredentialsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DBCredentialsRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string senderName = 2;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sendername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBCredentialsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DBCredentialsRequest"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string senderName = 2;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCredentialsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBCredentialsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBCredentialsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBCredentialsRequest::MergeFrom(const DBCredentialsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBCredentialsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCredentialsRequest::CopyFrom(const DBCredentialsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCredentialsRequest::IsInitialized() const {

  return true;
}

void DBCredentialsRequest::Swap(DBCredentialsRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(sendername_, other->sendername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBCredentialsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBCredentialsRequest_descriptor_;
  metadata.reflection = DBCredentialsRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* DBCredentialsResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int DBCredentialsResponse::kMsgNameFieldNumber;
const int DBCredentialsResponse::kHostNameFieldNumber;
const int DBCredentialsResponse::kIpFieldNumber;
const int DBCredentialsResponse::kDbNameFieldNumber;
const int DBCredentialsResponse::kDbUserFieldNumber;
const int DBCredentialsResponse::kDbPasswordFieldNumber;
const int DBCredentialsResponse::kDbPortFieldNumber;
#endif  // !_MSC_VER

DBCredentialsResponse::DBCredentialsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBCredentialsResponse::InitAsDefaultInstance() {
}

DBCredentialsResponse::DBCredentialsResponse(const DBCredentialsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBCredentialsResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBCredentialsResponse::~DBCredentialsResponse() {
  SharedDtor();
}

void DBCredentialsResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    delete dbname_;
  }
  if (dbuser_ != &::google::protobuf::internal::kEmptyString) {
    delete dbuser_;
  }
  if (dbpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete dbpassword_;
  }
  if (dbport_ != &::google::protobuf::internal::kEmptyString) {
    delete dbport_;
  }
  if (this != default_instance_) {
  }
}

void DBCredentialsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCredentialsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCredentialsResponse_descriptor_;
}

const DBCredentialsResponse& DBCredentialsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

DBCredentialsResponse* DBCredentialsResponse::default_instance_ = NULL;

DBCredentialsResponse* DBCredentialsResponse::New() const {
  return new DBCredentialsResponse;
}

void DBCredentialsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_dbname()) {
      if (dbname_ != &::google::protobuf::internal::kEmptyString) {
        dbname_->clear();
      }
    }
    if (has_dbuser()) {
      if (dbuser_ != &::google::protobuf::internal::kEmptyString) {
        dbuser_->clear();
      }
    }
    if (has_dbpassword()) {
      if (dbpassword_ != &::google::protobuf::internal::kEmptyString) {
        dbpassword_->clear();
      }
    }
    if (has_dbport()) {
      if (dbport_ != &::google::protobuf::internal::kEmptyString) {
        dbport_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBCredentialsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DBCredentialsResponse"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hostName;
        break;
      }

      // optional string hostName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dbName;
        break;
      }

      // optional string dbName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbname().data(), this->dbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dbUser;
        break;
      }

      // optional string dbUser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbuser().data(), this->dbuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dbPassword;
        break;
      }

      // optional string dbPassword = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbpassword().data(), this->dbpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dbPort;
        break;
      }

      // optional string dbPort = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbPort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbport()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbport().data(), this->dbport().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBCredentialsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DBCredentialsResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string hostName = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hostname(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional string dbName = 4;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dbname(), output);
  }

  // optional string dbUser = 5;
  if (has_dbuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbuser().data(), this->dbuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->dbuser(), output);
  }

  // optional string dbPassword = 6;
  if (has_dbpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbpassword().data(), this->dbpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->dbpassword(), output);
  }

  // optional string dbPort = 7;
  if (has_dbport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbport().data(), this->dbport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->dbport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBCredentialsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DBCredentialsResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string hostName = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional string dbName = 4;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dbname(), target);
  }

  // optional string dbUser = 5;
  if (has_dbuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbuser().data(), this->dbuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dbuser(), target);
  }

  // optional string dbPassword = 6;
  if (has_dbpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbpassword().data(), this->dbpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dbpassword(), target);
  }

  // optional string dbPort = 7;
  if (has_dbport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbport().data(), this->dbport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->dbport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBCredentialsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DBCredentialsResponse"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string hostName = 2;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string dbName = 4;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbname());
    }

    // optional string dbUser = 5;
    if (has_dbuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbuser());
    }

    // optional string dbPassword = 6;
    if (has_dbpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbpassword());
    }

    // optional string dbPort = 7;
    if (has_dbport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCredentialsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBCredentialsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBCredentialsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBCredentialsResponse::MergeFrom(const DBCredentialsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
    if (from.has_dbuser()) {
      set_dbuser(from.dbuser());
    }
    if (from.has_dbpassword()) {
      set_dbpassword(from.dbpassword());
    }
    if (from.has_dbport()) {
      set_dbport(from.dbport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBCredentialsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCredentialsResponse::CopyFrom(const DBCredentialsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCredentialsResponse::IsInitialized() const {

  return true;
}

void DBCredentialsResponse::Swap(DBCredentialsResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(hostname_, other->hostname_);
    std::swap(ip_, other->ip_);
    std::swap(dbname_, other->dbname_);
    std::swap(dbuser_, other->dbuser_);
    std::swap(dbpassword_, other->dbpassword_);
    std::swap(dbport_, other->dbport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBCredentialsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBCredentialsResponse_descriptor_;
  metadata.reflection = DBCredentialsResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UIConnectRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UIConnectRequest::kMsgNameFieldNumber;
const int UIConnectRequest::kSenderNameFieldNumber;
#endif  // !_MSC_VER

UIConnectRequest::UIConnectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIConnectRequest::InitAsDefaultInstance() {
}

UIConnectRequest::UIConnectRequest(const UIConnectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIConnectRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIConnectRequest::~UIConnectRequest() {
  SharedDtor();
}

void UIConnectRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (this != default_instance_) {
  }
}

void UIConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIConnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIConnectRequest_descriptor_;
}

const UIConnectRequest& UIConnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UIConnectRequest* UIConnectRequest::default_instance_ = NULL;

UIConnectRequest* UIConnectRequest::New() const {
  return new UIConnectRequest;
}

void UIConnectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::kEmptyString) {
        sendername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UIConnectRequest"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_senderName;
        break;
      }

      // optional string senderName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UIConnectRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string senderName = 2;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sendername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIConnectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UIConnectRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string senderName = 2;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sendername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIConnectRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UIConnectRequest"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string senderName = 2;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIConnectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIConnectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIConnectRequest::MergeFrom(const UIConnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIConnectRequest::CopyFrom(const UIConnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIConnectRequest::IsInitialized() const {

  return true;
}

void UIConnectRequest::Swap(UIConnectRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(sendername_, other->sendername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIConnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIConnectRequest_descriptor_;
  metadata.reflection = UIConnectRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UIConnectResponse::_default_msgname_ = NULL;
::std::string* UIConnectResponse::_default_connectionid_ = NULL;
#ifndef _MSC_VER
const int UIConnectResponse::kMsgNameFieldNumber;
const int UIConnectResponse::kConnectionIDFieldNumber;
#endif  // !_MSC_VER

UIConnectResponse::UIConnectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIConnectResponse::InitAsDefaultInstance() {
}

UIConnectResponse::UIConnectResponse(const UIConnectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIConnectResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  connectionid_ = const_cast< ::std::string*>(_default_connectionid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIConnectResponse::~UIConnectResponse() {
  SharedDtor();
}

void UIConnectResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (connectionid_ != _default_connectionid_) {
    delete connectionid_;
  }
  if (this != default_instance_) {
  }
}

void UIConnectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIConnectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIConnectResponse_descriptor_;
}

const UIConnectResponse& UIConnectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UIConnectResponse* UIConnectResponse::default_instance_ = NULL;

UIConnectResponse* UIConnectResponse::New() const {
  return new UIConnectResponse;
}

void UIConnectResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_connectionid()) {
      if (connectionid_ != _default_connectionid_) {
        connectionid_->assign(*_default_connectionid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIConnectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UIConnectResponse"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_connectionID;
        break;
      }

      // optional string connectionID = 2 [default = "defaultConnectionID"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connectionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectionid().data(), this->connectionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIConnectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UIConnectResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string connectionID = 2 [default = "defaultConnectionID"];
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->connectionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIConnectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UIConnectResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string connectionID = 2 [default = "defaultConnectionID"];
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->connectionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIConnectResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UIConnectResponse"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string connectionID = 2 [default = "defaultConnectionID"];
    if (has_connectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIConnectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIConnectResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIConnectResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIConnectResponse::MergeFrom(const UIConnectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_connectionid()) {
      set_connectionid(from.connectionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIConnectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIConnectResponse::CopyFrom(const UIConnectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIConnectResponse::IsInitialized() const {

  return true;
}

void UIConnectResponse::Swap(UIConnectResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(connectionid_, other->connectionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIConnectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIConnectResponse_descriptor_;
  metadata.reflection = UIConnectResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UIDisconnect::_default_msgname_ = NULL;
::std::string* UIDisconnect::_default_connectionid_ = NULL;
::std::string* UIDisconnect::_default_test_ = NULL;
#ifndef _MSC_VER
const int UIDisconnect::kMsgNameFieldNumber;
const int UIDisconnect::kSenderNameFieldNumber;
const int UIDisconnect::kConnectionIDFieldNumber;
const int UIDisconnect::kTestFieldNumber;
#endif  // !_MSC_VER

UIDisconnect::UIDisconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIDisconnect::InitAsDefaultInstance() {
}

UIDisconnect::UIDisconnect(const UIDisconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIDisconnect::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connectionid_ = const_cast< ::std::string*>(_default_connectionid_);
  test_ = const_cast< ::std::string*>(_default_test_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIDisconnect::~UIDisconnect() {
  SharedDtor();
}

void UIDisconnect::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (connectionid_ != _default_connectionid_) {
    delete connectionid_;
  }
  if (test_ != _default_test_) {
    delete test_;
  }
  if (this != default_instance_) {
  }
}

void UIDisconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIDisconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIDisconnect_descriptor_;
}

const UIDisconnect& UIDisconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UIDisconnect* UIDisconnect::default_instance_ = NULL;

UIDisconnect* UIDisconnect::New() const {
  return new UIDisconnect;
}

void UIDisconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::kEmptyString) {
        sendername_->clear();
      }
    }
    if (has_connectionid()) {
      if (connectionid_ != _default_connectionid_) {
        connectionid_->assign(*_default_connectionid_);
      }
    }
    if (has_test()) {
      if (test_ != _default_test_) {
        test_->assign(*_default_test_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIDisconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UIDisconnect"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_senderName;
        break;
      }

      // optional string senderName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_connectionID;
        break;
      }

      // optional string connectionID = 3 [default = "defaultConnectionID"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connectionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectionid().data(), this->connectionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_test;
        break;
      }

      // optional string test = 4 [default = "testString"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->test().data(), this->test().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIDisconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UIDisconnect"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string senderName = 2;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sendername(), output);
  }

  // optional string connectionID = 3 [default = "defaultConnectionID"];
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->connectionid(), output);
  }

  // optional string test = 4 [default = "testString"];
  if (has_test()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->test(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIDisconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UIDisconnect"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string senderName = 2;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sendername(), target);
  }

  // optional string connectionID = 3 [default = "defaultConnectionID"];
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->connectionid(), target);
  }

  // optional string test = 4 [default = "testString"];
  if (has_test()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->test(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIDisconnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UIDisconnect"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string senderName = 2;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

    // optional string connectionID = 3 [default = "defaultConnectionID"];
    if (has_connectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectionid());
    }

    // optional string test = 4 [default = "testString"];
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIDisconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIDisconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIDisconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIDisconnect::MergeFrom(const UIDisconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
    if (from.has_connectionid()) {
      set_connectionid(from.connectionid());
    }
    if (from.has_test()) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIDisconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIDisconnect::CopyFrom(const UIDisconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIDisconnect::IsInitialized() const {

  return true;
}

void UIDisconnect::Swap(UIDisconnect* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(sendername_, other->sendername_);
    std::swap(connectionid_, other->connectionid_);
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIDisconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIDisconnect_descriptor_;
  metadata.reflection = UIDisconnect_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UISignalEvent_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UISignalEvent_Type_descriptor_;
}
bool UISignalEvent_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UISignalEvent_Type UISignalEvent::SIGDET;
const UISignalEvent_Type UISignalEvent::SIGUP;
const UISignalEvent_Type UISignalEvent::SIGDOWN;
const UISignalEvent_Type UISignalEvent::SIGTIMEOUT;
const UISignalEvent_Type UISignalEvent::Type_MIN;
const UISignalEvent_Type UISignalEvent::Type_MAX;
const int UISignalEvent::Type_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* UISignalEvent::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UISignalEvent::kMsgNameFieldNumber;
const int UISignalEvent::kChannelFieldNumber;
const int UISignalEvent::kEventIDFieldNumber;
const int UISignalEvent::kTimestampFieldNumber;
const int UISignalEvent::kSoiNumFieldNumber;
const int UISignalEvent::kRfMHzFieldNumber;
const int UISignalEvent::kAntAzFieldNumber;
const int UISignalEvent::kAntElFieldNumber;
const int UISignalEvent::kGlobalIdFieldNumber;
const int UISignalEvent::kEventTypeFieldNumber;
const int UISignalEvent::kNameFieldNumber;
#endif  // !_MSC_VER

UISignalEvent::UISignalEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UISignalEvent::InitAsDefaultInstance() {
}

UISignalEvent::UISignalEvent(const UISignalEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UISignalEvent::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channel_ = 0;
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  soinum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rfmhz_ = 0;
  antaz_ = 0;
  antel_ = 0;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eventtype_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UISignalEvent::~UISignalEvent() {
  SharedDtor();
}

void UISignalEvent::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (soinum_ != &::google::protobuf::internal::kEmptyString) {
    delete soinum_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UISignalEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UISignalEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UISignalEvent_descriptor_;
}

const UISignalEvent& UISignalEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UISignalEvent* UISignalEvent::default_instance_ = NULL;

UISignalEvent* UISignalEvent::New() const {
  return new UISignalEvent;
}

void UISignalEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channel_ = 0;
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    if (has_soinum()) {
      if (soinum_ != &::google::protobuf::internal::kEmptyString) {
        soinum_->clear();
      }
    }
    rfmhz_ = 0;
    antaz_ = 0;
    antel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    eventtype_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UISignalEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UISignalEvent"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_eventID;
        break;
      }

      // optional string eventID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_soiNum;
        break;
      }

      // optional string soiNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soiNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soinum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soinum().data(), this->soinum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_rfMHz;
        break;
      }

      // optional float rfMHz = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rfMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rfmhz_)));
          set_has_rfmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_antAz;
        break;
      }

      // optional float antAz = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_antAz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &antaz_)));
          set_has_antaz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_antEl;
        break;
      }

      // optional float antEl = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_antEl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &antel_)));
          set_has_antel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_globalId;
        break;
      }

      // optional string globalId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_eventType;
        break;
      }

      // optional .UISignalEvent.Type eventType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UISignalEvent_Type_IsValid(value)) {
            set_eventtype(static_cast< ::UISignalEvent_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_name;
        break;
      }

      // optional string name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UISignalEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UISignalEvent"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional string eventID = 3;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->eventid(), output);
  }

  // optional string timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->timestamp(), output);
  }

  // optional string soiNum = 5;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->soinum(), output);
  }

  // optional float rfMHz = 6;
  if (has_rfmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rfmhz(), output);
  }

  // optional float antAz = 7 [default = 0];
  if (has_antaz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->antaz(), output);
  }

  // optional float antEl = 8 [default = 0];
  if (has_antel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->antel(), output);
  }

  // optional string globalId = 9;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->globalid(), output);
  }

  // optional .UISignalEvent.Type eventType = 10;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->eventtype(), output);
  }

  // optional string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UISignalEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UISignalEvent"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional string eventID = 3;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->eventid(), target);
  }

  // optional string timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->timestamp(), target);
  }

  // optional string soiNum = 5;
  if (has_soinum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soinum().data(), this->soinum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->soinum(), target);
  }

  // optional float rfMHz = 6;
  if (has_rfmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->rfmhz(), target);
  }

  // optional float antAz = 7 [default = 0];
  if (has_antaz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->antaz(), target);
  }

  // optional float antEl = 8 [default = 0];
  if (has_antel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->antel(), target);
  }

  // optional string globalId = 9;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->globalid(), target);
  }

  // optional .UISignalEvent.Type eventType = 10;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->eventtype(), target);
  }

  // optional string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UISignalEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UISignalEvent"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional string eventID = 3;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

    // optional string timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional string soiNum = 5;
    if (has_soinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soinum());
    }

    // optional float rfMHz = 6;
    if (has_rfmhz()) {
      total_size += 1 + 4;
    }

    // optional float antAz = 7 [default = 0];
    if (has_antaz()) {
      total_size += 1 + 4;
    }

    // optional float antEl = 8 [default = 0];
    if (has_antel()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string globalId = 9;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional .UISignalEvent.Type eventType = 10;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
    }

    // optional string name = 11;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UISignalEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UISignalEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UISignalEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UISignalEvent::MergeFrom(const UISignalEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_soinum()) {
      set_soinum(from.soinum());
    }
    if (from.has_rfmhz()) {
      set_rfmhz(from.rfmhz());
    }
    if (from.has_antaz()) {
      set_antaz(from.antaz());
    }
    if (from.has_antel()) {
      set_antel(from.antel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UISignalEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UISignalEvent::CopyFrom(const UISignalEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UISignalEvent::IsInitialized() const {

  return true;
}

void UISignalEvent::Swap(UISignalEvent* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channel_, other->channel_);
    std::swap(eventid_, other->eventid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(soinum_, other->soinum_);
    std::swap(rfmhz_, other->rfmhz_);
    std::swap(antaz_, other->antaz_);
    std::swap(antel_, other->antel_);
    std::swap(globalid_, other->globalid_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UISignalEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UISignalEvent_descriptor_;
  metadata.reflection = UISignalEvent_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UIVideoRequest::_default_msgname_ = NULL;
::std::string* UIVideoRequest::_default_connectionid_ = NULL;
#ifndef _MSC_VER
const int UIVideoRequest::kMsgNameFieldNumber;
const int UIVideoRequest::kEltexFieldNumber;
const int UIVideoRequest::kConnectionIDFieldNumber;
#endif  // !_MSC_VER

UIVideoRequest::UIVideoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIVideoRequest::InitAsDefaultInstance() {
}

UIVideoRequest::UIVideoRequest(const UIVideoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIVideoRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connectionid_ = const_cast< ::std::string*>(_default_connectionid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIVideoRequest::~UIVideoRequest() {
  SharedDtor();
}

void UIVideoRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    delete eltex_;
  }
  if (connectionid_ != _default_connectionid_) {
    delete connectionid_;
  }
  if (this != default_instance_) {
  }
}

void UIVideoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIVideoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIVideoRequest_descriptor_;
}

const UIVideoRequest& UIVideoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UIVideoRequest* UIVideoRequest::default_instance_ = NULL;

UIVideoRequest* UIVideoRequest::New() const {
  return new UIVideoRequest;
}

void UIVideoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_eltex()) {
      if (eltex_ != &::google::protobuf::internal::kEmptyString) {
        eltex_->clear();
      }
    }
    if (has_connectionid()) {
      if (connectionid_ != _default_connectionid_) {
        connectionid_->assign(*_default_connectionid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIVideoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UIVideoRequest"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eltex;
        break;
      }

      // optional string eltex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eltex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eltex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eltex().data(), this->eltex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_connectionID;
        break;
      }

      // optional string connectionID = 3 [default = "defaultConnectionID"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connectionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectionid().data(), this->connectionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIVideoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UIVideoRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string eltex = 2;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->eltex(), output);
  }

  // optional string connectionID = 3 [default = "defaultConnectionID"];
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->connectionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIVideoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UIVideoRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string eltex = 2;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->eltex(), target);
  }

  // optional string connectionID = 3 [default = "defaultConnectionID"];
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->connectionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIVideoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UIVideoRequest"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string eltex = 2;
    if (has_eltex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eltex());
    }

    // optional string connectionID = 3 [default = "defaultConnectionID"];
    if (has_connectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIVideoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIVideoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIVideoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIVideoRequest::MergeFrom(const UIVideoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_eltex()) {
      set_eltex(from.eltex());
    }
    if (from.has_connectionid()) {
      set_connectionid(from.connectionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIVideoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIVideoRequest::CopyFrom(const UIVideoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIVideoRequest::IsInitialized() const {

  return true;
}

void UIVideoRequest::Swap(UIVideoRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(eltex_, other->eltex_);
    std::swap(connectionid_, other->connectionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIVideoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIVideoRequest_descriptor_;
  metadata.reflection = UIVideoRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UIVideoResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UIVideoResponse::kMsgNameFieldNumber;
const int UIVideoResponse::kEltexFieldNumber;
const int UIVideoResponse::kPortNumberFieldNumber;
#endif  // !_MSC_VER

UIVideoResponse::UIVideoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIVideoResponse::InitAsDefaultInstance() {
}

UIVideoResponse::UIVideoResponse(const UIVideoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIVideoResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  eltex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  portnumber_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIVideoResponse::~UIVideoResponse() {
  SharedDtor();
}

void UIVideoResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (eltex_ != &::google::protobuf::internal::kEmptyString) {
    delete eltex_;
  }
  if (this != default_instance_) {
  }
}

void UIVideoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIVideoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIVideoResponse_descriptor_;
}

const UIVideoResponse& UIVideoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UIVideoResponse* UIVideoResponse::default_instance_ = NULL;

UIVideoResponse* UIVideoResponse::New() const {
  return new UIVideoResponse;
}

void UIVideoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_eltex()) {
      if (eltex_ != &::google::protobuf::internal::kEmptyString) {
        eltex_->clear();
      }
    }
    portnumber_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIVideoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UIVideoResponse"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eltex;
        break;
      }

      // optional string eltex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eltex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eltex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eltex().data(), this->eltex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_portNumber;
        break;
      }

      // optional int64 portNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_portNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &portnumber_)));
          set_has_portnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIVideoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UIVideoResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string eltex = 2;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->eltex(), output);
  }

  // optional int64 portNumber = 3;
  if (has_portnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->portnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIVideoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UIVideoResponse"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string eltex = 2;
  if (has_eltex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eltex().data(), this->eltex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->eltex(), target);
  }

  // optional int64 portNumber = 3;
  if (has_portnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->portnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIVideoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UIVideoResponse"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string eltex = 2;
    if (has_eltex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eltex());
    }

    // optional int64 portNumber = 3;
    if (has_portnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->portnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIVideoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIVideoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIVideoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIVideoResponse::MergeFrom(const UIVideoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_eltex()) {
      set_eltex(from.eltex());
    }
    if (from.has_portnumber()) {
      set_portnumber(from.portnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIVideoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIVideoResponse::CopyFrom(const UIVideoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIVideoResponse::IsInitialized() const {

  return true;
}

void UIVideoResponse::Swap(UIVideoResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(eltex_, other->eltex_);
    std::swap(portnumber_, other->portnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIVideoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIVideoResponse_descriptor_;
  metadata.reflection = UIVideoResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UIGeoInformationRequest::_default_msgname_ = NULL;
::std::string* UIGeoInformationRequest::_default_connectionid_ = NULL;
#ifndef _MSC_VER
const int UIGeoInformationRequest::kMsgNameFieldNumber;
const int UIGeoInformationRequest::kGlobalIdFieldNumber;
const int UIGeoInformationRequest::kConnectionIDFieldNumber;
#endif  // !_MSC_VER

UIGeoInformationRequest::UIGeoInformationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIGeoInformationRequest::InitAsDefaultInstance() {
}

UIGeoInformationRequest::UIGeoInformationRequest(const UIGeoInformationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIGeoInformationRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connectionid_ = const_cast< ::std::string*>(_default_connectionid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIGeoInformationRequest::~UIGeoInformationRequest() {
  SharedDtor();
}

void UIGeoInformationRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (connectionid_ != _default_connectionid_) {
    delete connectionid_;
  }
  if (this != default_instance_) {
  }
}

void UIGeoInformationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIGeoInformationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIGeoInformationRequest_descriptor_;
}

const UIGeoInformationRequest& UIGeoInformationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UIGeoInformationRequest* UIGeoInformationRequest::default_instance_ = NULL;

UIGeoInformationRequest* UIGeoInformationRequest::New() const {
  return new UIGeoInformationRequest;
}

void UIGeoInformationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    if (has_connectionid()) {
      if (connectionid_ != _default_connectionid_) {
        connectionid_->assign(*_default_connectionid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIGeoInformationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UIGeoInformationRequest"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_globalId;
        break;
      }

      // optional string globalId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_connectionID;
        break;
      }

      // optional string connectionID = 3 [default = "defaultConnectionID"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connectionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectionid().data(), this->connectionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIGeoInformationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UIGeoInformationRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string globalId = 2;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->globalid(), output);
  }

  // optional string connectionID = 3 [default = "defaultConnectionID"];
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->connectionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIGeoInformationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UIGeoInformationRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string globalId = 2;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->globalid(), target);
  }

  // optional string connectionID = 3 [default = "defaultConnectionID"];
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->connectionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIGeoInformationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UIGeoInformationRequest"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string globalId = 2;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional string connectionID = 3 [default = "defaultConnectionID"];
    if (has_connectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIGeoInformationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIGeoInformationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIGeoInformationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIGeoInformationRequest::MergeFrom(const UIGeoInformationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_connectionid()) {
      set_connectionid(from.connectionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIGeoInformationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIGeoInformationRequest::CopyFrom(const UIGeoInformationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIGeoInformationRequest::IsInitialized() const {

  return true;
}

void UIGeoInformationRequest::Swap(UIGeoInformationRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(globalid_, other->globalid_);
    std::swap(connectionid_, other->connectionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIGeoInformationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIGeoInformationRequest_descriptor_;
  metadata.reflection = UIGeoInformationRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UIGeoInformation::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UIGeoInformation::kMsgNameFieldNumber;
const int UIGeoInformation::kLatFieldNumber;
const int UIGeoInformation::kLonFieldNumber;
const int UIGeoInformation::kMajoraxisFieldNumber;
const int UIGeoInformation::kMinoraxisFieldNumber;
const int UIGeoInformation::kOrientationFieldNumber;
const int UIGeoInformation::kAltitudeFieldNumber;
const int UIGeoInformation::kAltConfFieldNumber;
const int UIGeoInformation::kVelocityFieldNumber;
const int UIGeoInformation::kVConfFieldNumber;
const int UIGeoInformation::kHeadingFieldNumber;
const int UIGeoInformation::kHeadConfFieldNumber;
const int UIGeoInformation::kCovarianceFieldNumber;
const int UIGeoInformation::kGlobalIdFieldNumber;
const int UIGeoInformation::kGeoTimeFieldNumber;
const int UIGeoInformation::kClassificationFieldNumber;
#endif  // !_MSC_VER

UIGeoInformation::UIGeoInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIGeoInformation::InitAsDefaultInstance() {
}

UIGeoInformation::UIGeoInformation(const UIGeoInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIGeoInformation::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  lat_ = 0;
  lon_ = 0;
  majoraxis_ = 0;
  minoraxis_ = 0;
  orientation_ = 0;
  altitude_ = 0;
  altconf_ = 0;
  velocity_ = 0;
  vconf_ = 0;
  heading_ = 0;
  headconf_ = 0;
  covariance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  geotime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIGeoInformation::~UIGeoInformation() {
  SharedDtor();
}

void UIGeoInformation::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (covariance_ != &::google::protobuf::internal::kEmptyString) {
    delete covariance_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (geotime_ != &::google::protobuf::internal::kEmptyString) {
    delete geotime_;
  }
  if (classification_ != &::google::protobuf::internal::kEmptyString) {
    delete classification_;
  }
  if (this != default_instance_) {
  }
}

void UIGeoInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIGeoInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIGeoInformation_descriptor_;
}

const UIGeoInformation& UIGeoInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UIGeoInformation* UIGeoInformation::default_instance_ = NULL;

UIGeoInformation* UIGeoInformation::New() const {
  return new UIGeoInformation;
}

void UIGeoInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    lat_ = 0;
    lon_ = 0;
    majoraxis_ = 0;
    minoraxis_ = 0;
    orientation_ = 0;
    altitude_ = 0;
    altconf_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    velocity_ = 0;
    vconf_ = 0;
    heading_ = 0;
    headconf_ = 0;
    if (has_covariance()) {
      if (covariance_ != &::google::protobuf::internal::kEmptyString) {
        covariance_->clear();
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    if (has_geotime()) {
      if (geotime_ != &::google::protobuf::internal::kEmptyString) {
        geotime_->clear();
      }
    }
    if (has_classification()) {
      if (classification_ != &::google::protobuf::internal::kEmptyString) {
        classification_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIGeoInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UIGeoInformation"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }

      // optional double lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_lon;
        break;
      }

      // optional double lon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_majoraxis;
        break;
      }

      // optional double majoraxis = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_majoraxis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &majoraxis_)));
          set_has_majoraxis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_minoraxis;
        break;
      }

      // optional double minoraxis = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minoraxis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minoraxis_)));
          set_has_minoraxis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_orientation;
        break;
      }

      // optional double orientation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_altitude;
        break;
      }

      // optional double altitude = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_altConf;
        break;
      }

      // optional int32 altConf = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_altConf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &altconf_)));
          set_has_altconf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_velocity;
        break;
      }

      // optional double velocity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vConf;
        break;
      }

      // optional int32 vConf = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vConf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vconf_)));
          set_has_vconf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_heading;
        break;
      }

      // optional double heading = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_headConf;
        break;
      }

      // optional int32 headConf = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headConf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headconf_)));
          set_has_headconf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_covariance;
        break;
      }

      // optional string covariance = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_covariance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_covariance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->covariance().data(), this->covariance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_globalId;
        break;
      }

      // optional string globalId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_geoTime;
        break;
      }

      // optional string geoTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geoTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geotime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geotime().data(), this->geotime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_classification;
        break;
      }

      // optional string classification = 16 [default = ""];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->classification().data(), this->classification().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIGeoInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UIGeoInformation"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // optional double lon = 3;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lon(), output);
  }

  // optional double majoraxis = 4;
  if (has_majoraxis()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->majoraxis(), output);
  }

  // optional double minoraxis = 5;
  if (has_minoraxis()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->minoraxis(), output);
  }

  // optional double orientation = 6;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->orientation(), output);
  }

  // optional double altitude = 7;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->altitude(), output);
  }

  // optional int32 altConf = 8;
  if (has_altconf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->altconf(), output);
  }

  // optional double velocity = 9;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->velocity(), output);
  }

  // optional int32 vConf = 10;
  if (has_vconf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vconf(), output);
  }

  // optional double heading = 11;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->heading(), output);
  }

  // optional int32 headConf = 12;
  if (has_headconf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->headconf(), output);
  }

  // optional string covariance = 13;
  if (has_covariance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->covariance().data(), this->covariance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->covariance(), output);
  }

  // optional string globalId = 14;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->globalid(), output);
  }

  // optional string geoTime = 15;
  if (has_geotime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geotime().data(), this->geotime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->geotime(), output);
  }

  // optional string classification = 16 [default = ""];
  if (has_classification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->classification().data(), this->classification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->classification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIGeoInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UIGeoInformation"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // optional double lon = 3;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lon(), target);
  }

  // optional double majoraxis = 4;
  if (has_majoraxis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->majoraxis(), target);
  }

  // optional double minoraxis = 5;
  if (has_minoraxis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->minoraxis(), target);
  }

  // optional double orientation = 6;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->orientation(), target);
  }

  // optional double altitude = 7;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->altitude(), target);
  }

  // optional int32 altConf = 8;
  if (has_altconf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->altconf(), target);
  }

  // optional double velocity = 9;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->velocity(), target);
  }

  // optional int32 vConf = 10;
  if (has_vconf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vconf(), target);
  }

  // optional double heading = 11;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->heading(), target);
  }

  // optional int32 headConf = 12;
  if (has_headconf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->headconf(), target);
  }

  // optional string covariance = 13;
  if (has_covariance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->covariance().data(), this->covariance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->covariance(), target);
  }

  // optional string globalId = 14;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->globalid(), target);
  }

  // optional string geoTime = 15;
  if (has_geotime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geotime().data(), this->geotime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->geotime(), target);
  }

  // optional string classification = 16 [default = ""];
  if (has_classification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->classification().data(), this->classification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->classification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIGeoInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UIGeoInformation"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double lat = 2;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional double lon = 3;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // optional double majoraxis = 4;
    if (has_majoraxis()) {
      total_size += 1 + 8;
    }

    // optional double minoraxis = 5;
    if (has_minoraxis()) {
      total_size += 1 + 8;
    }

    // optional double orientation = 6;
    if (has_orientation()) {
      total_size += 1 + 8;
    }

    // optional double altitude = 7;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

    // optional int32 altConf = 8;
    if (has_altconf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->altconf());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double velocity = 9;
    if (has_velocity()) {
      total_size += 1 + 8;
    }

    // optional int32 vConf = 10;
    if (has_vconf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vconf());
    }

    // optional double heading = 11;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional int32 headConf = 12;
    if (has_headconf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headconf());
    }

    // optional string covariance = 13;
    if (has_covariance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->covariance());
    }

    // optional string globalId = 14;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional string geoTime = 15;
    if (has_geotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geotime());
    }

    // optional string classification = 16 [default = ""];
    if (has_classification()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classification());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIGeoInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIGeoInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIGeoInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIGeoInformation::MergeFrom(const UIGeoInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_majoraxis()) {
      set_majoraxis(from.majoraxis());
    }
    if (from.has_minoraxis()) {
      set_minoraxis(from.minoraxis());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_altconf()) {
      set_altconf(from.altconf());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_vconf()) {
      set_vconf(from.vconf());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_headconf()) {
      set_headconf(from.headconf());
    }
    if (from.has_covariance()) {
      set_covariance(from.covariance());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_geotime()) {
      set_geotime(from.geotime());
    }
    if (from.has_classification()) {
      set_classification(from.classification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIGeoInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIGeoInformation::CopyFrom(const UIGeoInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIGeoInformation::IsInitialized() const {

  return true;
}

void UIGeoInformation::Swap(UIGeoInformation* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(majoraxis_, other->majoraxis_);
    std::swap(minoraxis_, other->minoraxis_);
    std::swap(orientation_, other->orientation_);
    std::swap(altitude_, other->altitude_);
    std::swap(altconf_, other->altconf_);
    std::swap(velocity_, other->velocity_);
    std::swap(vconf_, other->vconf_);
    std::swap(heading_, other->heading_);
    std::swap(headconf_, other->headconf_);
    std::swap(covariance_, other->covariance_);
    std::swap(globalid_, other->globalid_);
    std::swap(geotime_, other->geotime_);
    std::swap(classification_, other->classification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIGeoInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIGeoInformation_descriptor_;
  metadata.reflection = UIGeoInformation_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UICommandRequest::_default_msgname_ = NULL;
::std::string* UICommandRequest::_default_connectionid_ = NULL;
#ifndef _MSC_VER
const int UICommandRequest::kMsgNameFieldNumber;
const int UICommandRequest::kGlobalIdFieldNumber;
const int UICommandRequest::kEffectFieldNumber;
const int UICommandRequest::kParameterFieldNumber;
const int UICommandRequest::kAntennaFieldNumber;
const int UICommandRequest::kActiveFieldNumber;
const int UICommandRequest::kResIDFieldNumber;
const int UICommandRequest::kSignalNameFieldNumber;
const int UICommandRequest::kConnectionIDFieldNumber;
#endif  // !_MSC_VER

UICommandRequest::UICommandRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UICommandRequest::InitAsDefaultInstance() {
}

UICommandRequest::UICommandRequest(const UICommandRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UICommandRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  antenna_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  active_ = false;
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signalname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connectionid_ = const_cast< ::std::string*>(_default_connectionid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UICommandRequest::~UICommandRequest() {
  SharedDtor();
}

void UICommandRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (effect_ != &::google::protobuf::internal::kEmptyString) {
    delete effect_;
  }
  if (antenna_ != &::google::protobuf::internal::kEmptyString) {
    delete antenna_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (signalname_ != &::google::protobuf::internal::kEmptyString) {
    delete signalname_;
  }
  if (connectionid_ != _default_connectionid_) {
    delete connectionid_;
  }
  if (this != default_instance_) {
  }
}

void UICommandRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UICommandRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UICommandRequest_descriptor_;
}

const UICommandRequest& UICommandRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UICommandRequest* UICommandRequest::default_instance_ = NULL;

UICommandRequest* UICommandRequest::New() const {
  return new UICommandRequest;
}

void UICommandRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    if (has_effect()) {
      if (effect_ != &::google::protobuf::internal::kEmptyString) {
        effect_->clear();
      }
    }
    if (has_antenna()) {
      if (antenna_ != &::google::protobuf::internal::kEmptyString) {
        antenna_->clear();
      }
    }
    active_ = false;
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    if (has_signalname()) {
      if (signalname_ != &::google::protobuf::internal::kEmptyString) {
        signalname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_connectionid()) {
      if (connectionid_ != _default_connectionid_) {
        connectionid_->assign(*_default_connectionid_);
      }
    }
  }
  parameter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UICommandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UICommandRequest"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_globalId;
        break;
      }

      // optional string globalId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_effect;
        break;
      }

      // required string effect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effect().data(), this->effect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parameter;
        break;
      }

      // repeated .Parameter parameter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parameter;
        if (input->ExpectTag(42)) goto parse_antenna;
        break;
      }

      // optional string antenna = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_antenna:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_antenna()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->antenna().data(), this->antenna().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_active;
        break;
      }

      // optional bool active = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_resID;
        break;
      }

      // optional string resID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_signalName;
        break;
      }

      // optional string signalName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signalName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signalname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signalname().data(), this->signalname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_connectionID;
        break;
      }

      // optional string connectionID = 9 [default = "defaultConnectionID"];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connectionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectionid().data(), this->connectionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UICommandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UICommandRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string globalId = 2;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->globalid(), output);
  }

  // required string effect = 3;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effect().data(), this->effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->effect(), output);
  }

  // repeated .Parameter parameter = 4;
  for (int i = 0; i < this->parameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->parameter(i), output);
  }

  // optional string antenna = 5;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->antenna().data(), this->antenna().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->antenna(), output);
  }

  // optional bool active = 6;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->active(), output);
  }

  // optional string resID = 7;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->resid(), output);
  }

  // optional string signalName = 8;
  if (has_signalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalname().data(), this->signalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->signalname(), output);
  }

  // optional string connectionID = 9 [default = "defaultConnectionID"];
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->connectionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UICommandRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UICommandRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string globalId = 2;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->globalid(), target);
  }

  // required string effect = 3;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effect().data(), this->effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->effect(), target);
  }

  // repeated .Parameter parameter = 4;
  for (int i = 0; i < this->parameter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->parameter(i), target);
  }

  // optional string antenna = 5;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->antenna().data(), this->antenna().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->antenna(), target);
  }

  // optional bool active = 6;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->active(), target);
  }

  // optional string resID = 7;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->resid(), target);
  }

  // optional string signalName = 8;
  if (has_signalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalname().data(), this->signalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->signalname(), target);
  }

  // optional string connectionID = 9 [default = "defaultConnectionID"];
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->connectionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UICommandRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UICommandRequest"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string globalId = 2;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // required string effect = 3;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effect());
    }

    // optional string antenna = 5;
    if (has_antenna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->antenna());
    }

    // optional bool active = 6;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional string resID = 7;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional string signalName = 8;
    if (has_signalname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signalname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string connectionID = 9 [default = "defaultConnectionID"];
    if (has_connectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectionid());
    }

  }
  // repeated .Parameter parameter = 4;
  total_size += 1 * this->parameter_size();
  for (int i = 0; i < this->parameter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UICommandRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UICommandRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UICommandRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UICommandRequest::MergeFrom(const UICommandRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameter_.MergeFrom(from.parameter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_antenna()) {
      set_antenna(from.antenna());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_signalname()) {
      set_signalname(from.signalname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_connectionid()) {
      set_connectionid(from.connectionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UICommandRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UICommandRequest::CopyFrom(const UICommandRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UICommandRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  for (int i = 0; i < parameter_size(); i++) {
    if (!this->parameter(i).IsInitialized()) return false;
  }
  return true;
}

void UICommandRequest::Swap(UICommandRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(globalid_, other->globalid_);
    std::swap(effect_, other->effect_);
    parameter_.Swap(&other->parameter_);
    std::swap(antenna_, other->antenna_);
    std::swap(active_, other->active_);
    std::swap(resid_, other->resid_);
    std::swap(signalname_, other->signalname_);
    std::swap(connectionid_, other->connectionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UICommandRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UICommandRequest_descriptor_;
  metadata.reflection = UICommandRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Parameter::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int Parameter::kMsgNameFieldNumber;
const int Parameter::kNameFieldNumber;
const int Parameter::kValueFieldNumber;
#endif  // !_MSC_VER

Parameter::Parameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parameter::InitAsDefaultInstance() {
}

Parameter::Parameter(const Parameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parameter::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parameter::~Parameter() {
  SharedDtor();
}

void Parameter::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Parameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parameter_descriptor_;
}

const Parameter& Parameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

Parameter* Parameter::default_instance_ = NULL;

Parameter* Parameter::New() const {
  return new Parameter;
}

void Parameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_PARAMETER"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // required string value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_PARAMETER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_PARAMETER"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_PARAMETER"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parameter::MergeFrom(const Parameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter::CopyFrom(const Parameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void Parameter::Swap(Parameter* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parameter_descriptor_;
  metadata.reflection = Parameter_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UIOptionsRequest::_default_msgname_ = NULL;
::std::string* UIOptionsRequest::_default_connectionid_ = NULL;
#ifndef _MSC_VER
const int UIOptionsRequest::kMsgNameFieldNumber;
const int UIOptionsRequest::kConnectionIDFieldNumber;
#endif  // !_MSC_VER

UIOptionsRequest::UIOptionsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIOptionsRequest::InitAsDefaultInstance() {
}

UIOptionsRequest::UIOptionsRequest(const UIOptionsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIOptionsRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  connectionid_ = const_cast< ::std::string*>(_default_connectionid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIOptionsRequest::~UIOptionsRequest() {
  SharedDtor();
}

void UIOptionsRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (connectionid_ != _default_connectionid_) {
    delete connectionid_;
  }
  if (this != default_instance_) {
  }
}

void UIOptionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIOptionsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIOptionsRequest_descriptor_;
}

const UIOptionsRequest& UIOptionsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UIOptionsRequest* UIOptionsRequest::default_instance_ = NULL;

UIOptionsRequest* UIOptionsRequest::New() const {
  return new UIOptionsRequest;
}

void UIOptionsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_connectionid()) {
      if (connectionid_ != _default_connectionid_) {
        connectionid_->assign(*_default_connectionid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIOptionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UIOptionsRequest"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_connectionID;
        break;
      }

      // optional string connectionID = 2 [default = "defaultConnectionID"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connectionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectionid().data(), this->connectionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIOptionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UIOptionsRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string connectionID = 2 [default = "defaultConnectionID"];
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->connectionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIOptionsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UIOptionsRequest"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string connectionID = 2 [default = "defaultConnectionID"];
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->connectionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIOptionsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UIOptionsRequest"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string connectionID = 2 [default = "defaultConnectionID"];
    if (has_connectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIOptionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIOptionsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIOptionsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIOptionsRequest::MergeFrom(const UIOptionsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_connectionid()) {
      set_connectionid(from.connectionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIOptionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIOptionsRequest::CopyFrom(const UIOptionsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIOptionsRequest::IsInitialized() const {

  return true;
}

void UIOptionsRequest::Swap(UIOptionsRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(connectionid_, other->connectionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIOptionsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIOptionsRequest_descriptor_;
  metadata.reflection = UIOptionsRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UIOption_DetectionSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIOption_DetectionSource_descriptor_;
}
bool UIOption_DetectionSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UIOption_DetectionSource UIOption::EXTERNAL;
const UIOption_DetectionSource UIOption::DETECTION;
const UIOption_DetectionSource UIOption::EVENT;
const UIOption_DetectionSource UIOption::THUNDERBIRD;
const UIOption_DetectionSource UIOption::DetectionSource_MIN;
const UIOption_DetectionSource UIOption::DetectionSource_MAX;
const int UIOption::DetectionSource_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* UIOption::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UIOption::kMsgNameFieldNumber;
const int UIOption::kSignalNameFieldNumber;
const int UIOption::kEffectFieldNumber;
const int UIOption::kDetectionSourceFieldNumber;
const int UIOption::kGlobalIdFieldNumber;
#endif  // !_MSC_VER

UIOption::UIOption()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIOption::InitAsDefaultInstance() {
}

UIOption::UIOption(const UIOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIOption::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  signalname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  detectionsource_ = 0;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIOption::~UIOption() {
  SharedDtor();
}

void UIOption::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (signalname_ != &::google::protobuf::internal::kEmptyString) {
    delete signalname_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void UIOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIOption_descriptor_;
}

const UIOption& UIOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UIOption* UIOption::default_instance_ = NULL;

UIOption* UIOption::New() const {
  return new UIOption;
}

void UIOption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_signalname()) {
      if (signalname_ != &::google::protobuf::internal::kEmptyString) {
        signalname_->clear();
      }
    }
    detectionsource_ = 0;
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  effect_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UIOption"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signalName;
        break;
      }

      // optional string signalName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signalName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signalname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signalname().data(), this->signalname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_effect;
        break;
      }

      // repeated string effect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_effect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effect(this->effect_size() - 1).data(),
            this->effect(this->effect_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_effect;
        if (input->ExpectTag(32)) goto parse_detectionSource;
        break;
      }

      // optional .UIOption.DetectionSource detectionSource = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_detectionSource:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UIOption_DetectionSource_IsValid(value)) {
            set_detectionsource(static_cast< ::UIOption_DetectionSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_globalId;
        break;
      }

      // optional string globalId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UIOption"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string signalName = 2;
  if (has_signalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalname().data(), this->signalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->signalname(), output);
  }

  // repeated string effect = 3;
  for (int i = 0; i < this->effect_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->effect(i).data(), this->effect(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->effect(i), output);
  }

  // optional .UIOption.DetectionSource detectionSource = 4;
  if (has_detectionsource()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->detectionsource(), output);
  }

  // optional string globalId = 5;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UIOption"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string signalName = 2;
  if (has_signalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalname().data(), this->signalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signalname(), target);
  }

  // repeated string effect = 3;
  for (int i = 0; i < this->effect_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effect(i).data(), this->effect(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->effect(i), target);
  }

  // optional .UIOption.DetectionSource detectionSource = 4;
  if (has_detectionsource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->detectionsource(), target);
  }

  // optional string globalId = 5;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UIOption"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string signalName = 2;
    if (has_signalname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signalname());
    }

    // optional .UIOption.DetectionSource detectionSource = 4;
    if (has_detectionsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->detectionsource());
    }

    // optional string globalId = 5;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  // repeated string effect = 3;
  total_size += 1 * this->effect_size();
  for (int i = 0; i < this->effect_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->effect(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIOption::MergeFrom(const UIOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  effect_.MergeFrom(from.effect_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_signalname()) {
      set_signalname(from.signalname());
    }
    if (from.has_detectionsource()) {
      set_detectionsource(from.detectionsource());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIOption::CopyFrom(const UIOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIOption::IsInitialized() const {

  return true;
}

void UIOption::Swap(UIOption* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(signalname_, other->signalname_);
    effect_.Swap(&other->effect_);
    std::swap(detectionsource_, other->detectionsource_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIOption_descriptor_;
  metadata.reflection = UIOption_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UIOptions::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UIOptions::kMsgNameFieldNumber;
const int UIOptions::kUioptFieldNumber;
#endif  // !_MSC_VER

UIOptions::UIOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIOptions::InitAsDefaultInstance() {
}

UIOptions::UIOptions(const UIOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIOptions::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIOptions::~UIOptions() {
  SharedDtor();
}

void UIOptions::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void UIOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIOptions_descriptor_;
}

const UIOptions& UIOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UIOptions* UIOptions::default_instance_ = NULL;

UIOptions* UIOptions::New() const {
  return new UIOptions;
}

void UIOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  uiopt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UIOptions"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uiopt;
        break;
      }

      // repeated .UIOption uiopt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uiopt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uiopt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uiopt;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UIOptions"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated .UIOption uiopt = 2;
  for (int i = 0; i < this->uiopt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uiopt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UIOptions"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated .UIOption uiopt = 2;
  for (int i = 0; i < this->uiopt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uiopt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UIOptions"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  // repeated .UIOption uiopt = 2;
  total_size += 1 * this->uiopt_size();
  for (int i = 0; i < this->uiopt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uiopt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIOptions::MergeFrom(const UIOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  uiopt_.MergeFrom(from.uiopt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIOptions::CopyFrom(const UIOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIOptions::IsInitialized() const {

  return true;
}

void UIOptions::Swap(UIOptions* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    uiopt_.Swap(&other->uiopt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIOptions_descriptor_;
  metadata.reflection = UIOptions_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UIOptionDelete::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UIOptionDelete::kMsgNameFieldNumber;
const int UIOptionDelete::kGlobalIdFieldNumber;
#endif  // !_MSC_VER

UIOptionDelete::UIOptionDelete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIOptionDelete::InitAsDefaultInstance() {
}

UIOptionDelete::UIOptionDelete(const UIOptionDelete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIOptionDelete::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIOptionDelete::~UIOptionDelete() {
  SharedDtor();
}

void UIOptionDelete::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (this != default_instance_) {
  }
}

void UIOptionDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIOptionDelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIOptionDelete_descriptor_;
}

const UIOptionDelete& UIOptionDelete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UIOptionDelete* UIOptionDelete::default_instance_ = NULL;

UIOptionDelete* UIOptionDelete::New() const {
  return new UIOptionDelete;
}

void UIOptionDelete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIOptionDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UIOptionDelete"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_globalId;
        break;
      }

      // optional string globalId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIOptionDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UIOptionDelete"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string globalId = 2;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->globalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIOptionDelete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UIOptionDelete"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string globalId = 2;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->globalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIOptionDelete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UIOptionDelete"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string globalId = 2;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIOptionDelete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIOptionDelete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIOptionDelete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIOptionDelete::MergeFrom(const UIOptionDelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIOptionDelete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIOptionDelete::CopyFrom(const UIOptionDelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIOptionDelete::IsInitialized() const {

  return true;
}

void UIOptionDelete::Swap(UIOptionDelete* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIOptionDelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIOptionDelete_descriptor_;
  metadata.reflection = UIOptionDelete_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UICeaseBuzzer::_default_msgname_ = NULL;
::std::string* UICeaseBuzzer::_default_connectionid_ = NULL;
#ifndef _MSC_VER
const int UICeaseBuzzer::kMsgNameFieldNumber;
const int UICeaseBuzzer::kConnectionIDFieldNumber;
#endif  // !_MSC_VER

UICeaseBuzzer::UICeaseBuzzer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UICeaseBuzzer::InitAsDefaultInstance() {
}

UICeaseBuzzer::UICeaseBuzzer(const UICeaseBuzzer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UICeaseBuzzer::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  connectionid_ = const_cast< ::std::string*>(_default_connectionid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UICeaseBuzzer::~UICeaseBuzzer() {
  SharedDtor();
}

void UICeaseBuzzer::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (connectionid_ != _default_connectionid_) {
    delete connectionid_;
  }
  if (this != default_instance_) {
  }
}

void UICeaseBuzzer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UICeaseBuzzer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UICeaseBuzzer_descriptor_;
}

const UICeaseBuzzer& UICeaseBuzzer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UICeaseBuzzer* UICeaseBuzzer::default_instance_ = NULL;

UICeaseBuzzer* UICeaseBuzzer::New() const {
  return new UICeaseBuzzer;
}

void UICeaseBuzzer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_connectionid()) {
      if (connectionid_ != _default_connectionid_) {
        connectionid_->assign(*_default_connectionid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UICeaseBuzzer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UICeaseBuzzer"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_connectionID;
        break;
      }

      // optional string connectionID = 2 [default = "defaultConnectionID"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connectionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectionid().data(), this->connectionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UICeaseBuzzer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UICeaseBuzzer"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string connectionID = 2 [default = "defaultConnectionID"];
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->connectionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UICeaseBuzzer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UICeaseBuzzer"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string connectionID = 2 [default = "defaultConnectionID"];
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->connectionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UICeaseBuzzer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UICeaseBuzzer"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string connectionID = 2 [default = "defaultConnectionID"];
    if (has_connectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UICeaseBuzzer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UICeaseBuzzer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UICeaseBuzzer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UICeaseBuzzer::MergeFrom(const UICeaseBuzzer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_connectionid()) {
      set_connectionid(from.connectionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UICeaseBuzzer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UICeaseBuzzer::CopyFrom(const UICeaseBuzzer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UICeaseBuzzer::IsInitialized() const {

  return true;
}

void UICeaseBuzzer::Swap(UICeaseBuzzer* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(connectionid_, other->connectionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UICeaseBuzzer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UICeaseBuzzer_descriptor_;
  metadata.reflection = UICeaseBuzzer_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EWStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EWStatus::kMsgNameFieldNumber;
const int EWStatus::kOutputChannelStatusFieldNumber;
const int EWStatus::kTimestampFieldNumber;
#endif  // !_MSC_VER

EWStatus::EWStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EWStatus::InitAsDefaultInstance() {
}

EWStatus::EWStatus(const EWStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EWStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EWStatus::~EWStatus() {
  SharedDtor();
}

void EWStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void EWStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EWStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWStatus_descriptor_;
}

const EWStatus& EWStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

EWStatus* EWStatus::default_instance_ = NULL;

EWStatus* EWStatus::New() const {
  return new EWStatus;
}

void EWStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  outputchannelstatus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EWStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EWStatus"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_outputChannelStatus;
        break;
      }

      // repeated .OutputChannelStatus outputChannelStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outputChannelStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputchannelstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_outputChannelStatus;
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EWStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EWStatus"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated .OutputChannelStatus outputChannelStatus = 2;
  for (int i = 0; i < this->outputchannelstatus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->outputchannelstatus(i), output);
  }

  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EWStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EWStatus"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated .OutputChannelStatus outputChannelStatus = 2;
  for (int i = 0; i < this->outputchannelstatus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->outputchannelstatus(i), target);
  }

  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EWStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EWStatus"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

  }
  // repeated .OutputChannelStatus outputChannelStatus = 2;
  total_size += 1 * this->outputchannelstatus_size();
  for (int i = 0; i < this->outputchannelstatus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outputchannelstatus(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EWStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EWStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EWStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EWStatus::MergeFrom(const EWStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  outputchannelstatus_.MergeFrom(from.outputchannelstatus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EWStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EWStatus::CopyFrom(const EWStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EWStatus::IsInitialized() const {

  return true;
}

void EWStatus::Swap(EWStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    outputchannelstatus_.Swap(&other->outputchannelstatus_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EWStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EWStatus_descriptor_;
  metadata.reflection = EWStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OutputChannelStatus_TransmitState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutputChannelStatus_TransmitState_descriptor_;
}
bool OutputChannelStatus_TransmitState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OutputChannelStatus_TransmitState OutputChannelStatus::UNAVAILABLE;
const OutputChannelStatus_TransmitState OutputChannelStatus::PENDING;
const OutputChannelStatus_TransmitState OutputChannelStatus::AVAILABLE;
const OutputChannelStatus_TransmitState OutputChannelStatus::TransmitState_MIN;
const OutputChannelStatus_TransmitState OutputChannelStatus::TransmitState_MAX;
const int OutputChannelStatus::TransmitState_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* OutputChannelStatus::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int OutputChannelStatus::kMsgNameFieldNumber;
const int OutputChannelStatus::kEffectFieldNumber;
const int OutputChannelStatus::kTransmitFreqFieldNumber;
const int OutputChannelStatus::kGlobalIdFieldNumber;
const int OutputChannelStatus::kAntennaFieldNumber;
const int OutputChannelStatus::kStateFieldNumber;
const int OutputChannelStatus::kPowerMeterFieldNumber;
const int OutputChannelStatus::kResIDFieldNumber;
const int OutputChannelStatus::kSignalNameFieldNumber;
#endif  // !_MSC_VER

OutputChannelStatus::OutputChannelStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OutputChannelStatus::InitAsDefaultInstance() {
}

OutputChannelStatus::OutputChannelStatus(const OutputChannelStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OutputChannelStatus::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transmitfreq_ = 0;
  globalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  antenna_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  powermeter_ = 0;
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signalname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutputChannelStatus::~OutputChannelStatus() {
  SharedDtor();
}

void OutputChannelStatus::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (effect_ != &::google::protobuf::internal::kEmptyString) {
    delete effect_;
  }
  if (globalid_ != &::google::protobuf::internal::kEmptyString) {
    delete globalid_;
  }
  if (antenna_ != &::google::protobuf::internal::kEmptyString) {
    delete antenna_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (signalname_ != &::google::protobuf::internal::kEmptyString) {
    delete signalname_;
  }
  if (this != default_instance_) {
  }
}

void OutputChannelStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutputChannelStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutputChannelStatus_descriptor_;
}

const OutputChannelStatus& OutputChannelStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

OutputChannelStatus* OutputChannelStatus::default_instance_ = NULL;

OutputChannelStatus* OutputChannelStatus::New() const {
  return new OutputChannelStatus;
}

void OutputChannelStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_effect()) {
      if (effect_ != &::google::protobuf::internal::kEmptyString) {
        effect_->clear();
      }
    }
    transmitfreq_ = 0;
    if (has_globalid()) {
      if (globalid_ != &::google::protobuf::internal::kEmptyString) {
        globalid_->clear();
      }
    }
    if (has_antenna()) {
      if (antenna_ != &::google::protobuf::internal::kEmptyString) {
        antenna_->clear();
      }
    }
    state_ = 0;
    powermeter_ = 0;
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_signalname()) {
      if (signalname_ != &::google::protobuf::internal::kEmptyString) {
        signalname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OutputChannelStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EW_OUTPUT_CHANNEL_STATUS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_effect;
        break;
      }

      // optional string effect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effect().data(), this->effect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_transmitFreq;
        break;
      }

      // optional double transmitFreq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_transmitFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transmitfreq_)));
          set_has_transmitfreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_globalId;
        break;
      }

      // optional string globalId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalid().data(), this->globalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_antenna;
        break;
      }

      // optional string antenna = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_antenna:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_antenna()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->antenna().data(), this->antenna().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional .OutputChannelStatus.TransmitState state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OutputChannelStatus_TransmitState_IsValid(value)) {
            set_state(static_cast< ::OutputChannelStatus_TransmitState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_powerMeter;
        break;
      }

      // optional double powerMeter = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_powerMeter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &powermeter_)));
          set_has_powermeter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_resID;
        break;
      }

      // optional string resID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_signalName;
        break;
      }

      // optional string signalName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signalName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signalname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signalname().data(), this->signalname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OutputChannelStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EW_OUTPUT_CHANNEL_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string effect = 2;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effect().data(), this->effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->effect(), output);
  }

  // optional double transmitFreq = 3;
  if (has_transmitfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->transmitfreq(), output);
  }

  // optional string globalId = 4;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->globalid(), output);
  }

  // optional string antenna = 5;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->antenna().data(), this->antenna().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->antenna(), output);
  }

  // optional .OutputChannelStatus.TransmitState state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // optional double powerMeter = 7;
  if (has_powermeter()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->powermeter(), output);
  }

  // optional string resID = 8;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->resid(), output);
  }

  // optional string signalName = 9;
  if (has_signalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalname().data(), this->signalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->signalname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OutputChannelStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EW_OUTPUT_CHANNEL_STATUS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string effect = 2;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effect().data(), this->effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->effect(), target);
  }

  // optional double transmitFreq = 3;
  if (has_transmitfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->transmitfreq(), target);
  }

  // optional string globalId = 4;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalid().data(), this->globalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->globalid(), target);
  }

  // optional string antenna = 5;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->antenna().data(), this->antenna().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->antenna(), target);
  }

  // optional .OutputChannelStatus.TransmitState state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  // optional double powerMeter = 7;
  if (has_powermeter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->powermeter(), target);
  }

  // optional string resID = 8;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->resid(), target);
  }

  // optional string signalName = 9;
  if (has_signalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signalname().data(), this->signalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->signalname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OutputChannelStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EW_OUTPUT_CHANNEL_STATUS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string effect = 2;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effect());
    }

    // optional double transmitFreq = 3;
    if (has_transmitfreq()) {
      total_size += 1 + 8;
    }

    // optional string globalId = 4;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalid());
    }

    // optional string antenna = 5;
    if (has_antenna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->antenna());
    }

    // optional .OutputChannelStatus.TransmitState state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional double powerMeter = 7;
    if (has_powermeter()) {
      total_size += 1 + 8;
    }

    // optional string resID = 8;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string signalName = 9;
    if (has_signalname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signalname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutputChannelStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OutputChannelStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OutputChannelStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutputChannelStatus::MergeFrom(const OutputChannelStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_transmitfreq()) {
      set_transmitfreq(from.transmitfreq());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_antenna()) {
      set_antenna(from.antenna());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_powermeter()) {
      set_powermeter(from.powermeter());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_signalname()) {
      set_signalname(from.signalname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OutputChannelStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputChannelStatus::CopyFrom(const OutputChannelStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputChannelStatus::IsInitialized() const {

  return true;
}

void OutputChannelStatus::Swap(OutputChannelStatus* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(effect_, other->effect_);
    std::swap(transmitfreq_, other->transmitfreq_);
    std::swap(globalid_, other->globalid_);
    std::swap(antenna_, other->antenna_);
    std::swap(state_, other->state_);
    std::swap(powermeter_, other->powermeter_);
    std::swap(resid_, other->resid_);
    std::swap(signalname_, other->signalname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OutputChannelStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutputChannelStatus_descriptor_;
  metadata.reflection = OutputChannelStatus_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UISetDefaultSchedule::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UISetDefaultSchedule::kMsgNameFieldNumber;
const int UISetDefaultSchedule::kChannelNumFieldNumber;
const int UISetDefaultSchedule::kFileNameFieldNumber;
const int UISetDefaultSchedule::kConnectionIDFieldNumber;
#endif  // !_MSC_VER

UISetDefaultSchedule::UISetDefaultSchedule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UISetDefaultSchedule::InitAsDefaultInstance() {
}

UISetDefaultSchedule::UISetDefaultSchedule(const UISetDefaultSchedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UISetDefaultSchedule::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  channelnum_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connectionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UISetDefaultSchedule::~UISetDefaultSchedule() {
  SharedDtor();
}

void UISetDefaultSchedule::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (connectionid_ != &::google::protobuf::internal::kEmptyString) {
    delete connectionid_;
  }
  if (this != default_instance_) {
  }
}

void UISetDefaultSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UISetDefaultSchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UISetDefaultSchedule_descriptor_;
}

const UISetDefaultSchedule& UISetDefaultSchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

UISetDefaultSchedule* UISetDefaultSchedule::default_instance_ = NULL;

UISetDefaultSchedule* UISetDefaultSchedule::New() const {
  return new UISetDefaultSchedule;
}

void UISetDefaultSchedule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    channelnum_ = 0;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_connectionid()) {
      if (connectionid_ != &::google::protobuf::internal::kEmptyString) {
        connectionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UISetDefaultSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UISetDefaultSchedule"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channelNum;
        break;
      }

      // optional int32 channelNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelnum_)));
          set_has_channelnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fileName;
        break;
      }

      // optional string fileName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_connectionID;
        break;
      }

      // optional string connectionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connectionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectionid().data(), this->connectionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UISetDefaultSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UISetDefaultSchedule"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 channelNum = 2;
  if (has_channelnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channelnum(), output);
  }

  // optional string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(), output);
  }

  // optional string connectionID = 4;
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->connectionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UISetDefaultSchedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UISetDefaultSchedule"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 channelNum = 2;
  if (has_channelnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channelnum(), target);
  }

  // optional string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // optional string connectionID = 4;
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->connectionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UISetDefaultSchedule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UISetDefaultSchedule"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 channelNum = 2;
    if (has_channelnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelnum());
    }

    // optional string fileName = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string connectionID = 4;
    if (has_connectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UISetDefaultSchedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UISetDefaultSchedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UISetDefaultSchedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UISetDefaultSchedule::MergeFrom(const UISetDefaultSchedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_channelnum()) {
      set_channelnum(from.channelnum());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_connectionid()) {
      set_connectionid(from.connectionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UISetDefaultSchedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UISetDefaultSchedule::CopyFrom(const UISetDefaultSchedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UISetDefaultSchedule::IsInitialized() const {

  return true;
}

void UISetDefaultSchedule::Swap(UISetDefaultSchedule* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(channelnum_, other->channelnum_);
    std::swap(filename_, other->filename_);
    std::swap(connectionid_, other->connectionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UISetDefaultSchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UISetDefaultSchedule_descriptor_;
  metadata.reflection = UISetDefaultSchedule_reflection_;
  return metadata;
}


// ===================================================================

::std::string* KeplerHeartBeat::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int KeplerHeartBeat::kMsgNameFieldNumber;
#endif  // !_MSC_VER

KeplerHeartBeat::KeplerHeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeplerHeartBeat::InitAsDefaultInstance() {
}

KeplerHeartBeat::KeplerHeartBeat(const KeplerHeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeplerHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeplerHeartBeat::~KeplerHeartBeat() {
  SharedDtor();
}

void KeplerHeartBeat::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void KeplerHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeplerHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeplerHeartBeat_descriptor_;
}

const KeplerHeartBeat& KeplerHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeplerUIConnectionMessages_2eproto();
  return *default_instance_;
}

KeplerHeartBeat* KeplerHeartBeat::default_instance_ = NULL;

KeplerHeartBeat* KeplerHeartBeat::New() const {
  return new KeplerHeartBeat;
}

void KeplerHeartBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeplerHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "KeplerHeartBeat"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeplerHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "KeplerHeartBeat"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeplerHeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "KeplerHeartBeat"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeplerHeartBeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "KeplerHeartBeat"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeplerHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeplerHeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeplerHeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeplerHeartBeat::MergeFrom(const KeplerHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeplerHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeplerHeartBeat::CopyFrom(const KeplerHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeplerHeartBeat::IsInitialized() const {

  return true;
}

void KeplerHeartBeat::Swap(KeplerHeartBeat* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeplerHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeplerHeartBeat_descriptor_;
  metadata.reflection = KeplerHeartBeat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
