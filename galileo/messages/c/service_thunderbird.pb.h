// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_thunderbird.proto

#ifndef PROTOBUF_service_5fthunderbird_2eproto__INCLUDED
#define PROTOBUF_service_5fthunderbird_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace service_thunderbird {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_5fthunderbird_2eproto();
void protobuf_AssignDesc_service_5fthunderbird_2eproto();
void protobuf_ShutdownFile_service_5fthunderbird_2eproto();

class ThunderbirdConfig;
class ThunderbirdConfig_MuxtxConfig;
class ThunderbirdConfig_ThrottleHeadersConfig;
class ThunderbirdConfig_TBChannelConfig;

// ===================================================================

class ThunderbirdConfig_MuxtxConfig : public ::google::protobuf::Message {
 public:
  ThunderbirdConfig_MuxtxConfig();
  virtual ~ThunderbirdConfig_MuxtxConfig();

  ThunderbirdConfig_MuxtxConfig(const ThunderbirdConfig_MuxtxConfig& from);

  inline ThunderbirdConfig_MuxtxConfig& operator=(const ThunderbirdConfig_MuxtxConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThunderbirdConfig_MuxtxConfig& default_instance();

  void Swap(ThunderbirdConfig_MuxtxConfig* other);

  // implements Message ----------------------------------------------

  ThunderbirdConfig_MuxtxConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThunderbirdConfig_MuxtxConfig& from);
  void MergeFrom(const ThunderbirdConfig_MuxtxConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 midasProcessPriority = 1 [default = -2147483648];
  inline bool has_midasprocesspriority() const;
  inline void clear_midasprocesspriority();
  static const int kMidasProcessPriorityFieldNumber = 1;
  inline ::google::protobuf::int32 midasprocesspriority() const;
  inline void set_midasprocesspriority(::google::protobuf::int32 value);

  // optional int32 outputSamplesPerHeader = 2 [default = 262144];
  inline bool has_outputsamplesperheader() const;
  inline void clear_outputsamplesperheader();
  static const int kOutputSamplesPerHeaderFieldNumber = 2;
  inline ::google::protobuf::int32 outputsamplesperheader() const;
  inline void set_outputsamplesperheader(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:service_thunderbird.ThunderbirdConfig.MuxtxConfig)
 private:
  inline void set_has_midasprocesspriority();
  inline void clear_has_midasprocesspriority();
  inline void set_has_outputsamplesperheader();
  inline void clear_has_outputsamplesperheader();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 midasprocesspriority_;
  ::google::protobuf::int32 outputsamplesperheader_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_service_5fthunderbird_2eproto();
  friend void protobuf_AssignDesc_service_5fthunderbird_2eproto();
  friend void protobuf_ShutdownFile_service_5fthunderbird_2eproto();

  void InitAsDefaultInstance();
  static ThunderbirdConfig_MuxtxConfig* default_instance_;
};
// -------------------------------------------------------------------

class ThunderbirdConfig_ThrottleHeadersConfig : public ::google::protobuf::Message {
 public:
  ThunderbirdConfig_ThrottleHeadersConfig();
  virtual ~ThunderbirdConfig_ThrottleHeadersConfig();

  ThunderbirdConfig_ThrottleHeadersConfig(const ThunderbirdConfig_ThrottleHeadersConfig& from);

  inline ThunderbirdConfig_ThrottleHeadersConfig& operator=(const ThunderbirdConfig_ThrottleHeadersConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThunderbirdConfig_ThrottleHeadersConfig& default_instance();

  void Swap(ThunderbirdConfig_ThrottleHeadersConfig* other);

  // implements Message ----------------------------------------------

  ThunderbirdConfig_ThrottleHeadersConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThunderbirdConfig_ThrottleHeadersConfig& from);
  void MergeFrom(const ThunderbirdConfig_ThrottleHeadersConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool enabled = 1 [default = false];
  inline bool has_enabled() const;
  inline void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  inline bool enabled() const;
  inline void set_enabled(bool value);

  // optional double throttleTimeOffset = 2 [default = 20];
  inline bool has_throttletimeoffset() const;
  inline void clear_throttletimeoffset();
  static const int kThrottleTimeOffsetFieldNumber = 2;
  inline double throttletimeoffset() const;
  inline void set_throttletimeoffset(double value);

  // @@protoc_insertion_point(class_scope:service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig)
 private:
  inline void set_has_enabled();
  inline void clear_has_enabled();
  inline void set_has_throttletimeoffset();
  inline void clear_has_throttletimeoffset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double throttletimeoffset_;
  bool enabled_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_service_5fthunderbird_2eproto();
  friend void protobuf_AssignDesc_service_5fthunderbird_2eproto();
  friend void protobuf_ShutdownFile_service_5fthunderbird_2eproto();

  void InitAsDefaultInstance();
  static ThunderbirdConfig_ThrottleHeadersConfig* default_instance_;
};
// -------------------------------------------------------------------

class ThunderbirdConfig_TBChannelConfig : public ::google::protobuf::Message {
 public:
  ThunderbirdConfig_TBChannelConfig();
  virtual ~ThunderbirdConfig_TBChannelConfig();

  ThunderbirdConfig_TBChannelConfig(const ThunderbirdConfig_TBChannelConfig& from);

  inline ThunderbirdConfig_TBChannelConfig& operator=(const ThunderbirdConfig_TBChannelConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThunderbirdConfig_TBChannelConfig& default_instance();

  void Swap(ThunderbirdConfig_TBChannelConfig* other);

  // implements Message ----------------------------------------------

  ThunderbirdConfig_TBChannelConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThunderbirdConfig_TBChannelConfig& from);
  void MergeFrom(const ThunderbirdConfig_TBChannelConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channelNumber = 1 [default = 1];
  inline bool has_channelnumber() const;
  inline void clear_channelnumber();
  static const int kChannelNumberFieldNumber = 1;
  inline ::google::protobuf::int32 channelnumber() const;
  inline void set_channelnumber(::google::protobuf::int32 value);

  // optional double sampleRate = 2 [default = 100000000];
  inline bool has_samplerate() const;
  inline void clear_samplerate();
  static const int kSampleRateFieldNumber = 2;
  inline double samplerate() const;
  inline void set_samplerate(double value);

  // optional double minFreqMHz = 3 [default = 20];
  inline bool has_minfreqmhz() const;
  inline void clear_minfreqmhz();
  static const int kMinFreqMHzFieldNumber = 3;
  inline double minfreqmhz() const;
  inline void set_minfreqmhz(double value);

  // optional double maxFreqMHz = 4 [default = 6000];
  inline bool has_maxfreqmhz() const;
  inline void clear_maxfreqmhz();
  static const int kMaxFreqMHzFieldNumber = 4;
  inline double maxfreqmhz() const;
  inline void set_maxfreqmhz(double value);

  // optional int32 zpipeport = 5 [default = 38599];
  inline bool has_zpipeport() const;
  inline void clear_zpipeport();
  static const int kZpipeportFieldNumber = 5;
  inline ::google::protobuf::int32 zpipeport() const;
  inline void set_zpipeport(::google::protobuf::int32 value);

  // optional string device = 6 [default = "ZPIPE"];
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 6;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // @@protoc_insertion_point(class_scope:service_thunderbird.ThunderbirdConfig.TBChannelConfig)
 private:
  inline void set_has_channelnumber();
  inline void clear_has_channelnumber();
  inline void set_has_samplerate();
  inline void clear_has_samplerate();
  inline void set_has_minfreqmhz();
  inline void clear_has_minfreqmhz();
  inline void set_has_maxfreqmhz();
  inline void clear_has_maxfreqmhz();
  inline void set_has_zpipeport();
  inline void clear_has_zpipeport();
  inline void set_has_device();
  inline void clear_has_device();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double samplerate_;
  double minfreqmhz_;
  ::google::protobuf::int32 channelnumber_;
  ::google::protobuf::int32 zpipeport_;
  double maxfreqmhz_;
  ::std::string* device_;
  static ::std::string* _default_device_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_service_5fthunderbird_2eproto();
  friend void protobuf_AssignDesc_service_5fthunderbird_2eproto();
  friend void protobuf_ShutdownFile_service_5fthunderbird_2eproto();

  void InitAsDefaultInstance();
  static ThunderbirdConfig_TBChannelConfig* default_instance_;
};
// -------------------------------------------------------------------

class ThunderbirdConfig : public ::google::protobuf::Message {
 public:
  ThunderbirdConfig();
  virtual ~ThunderbirdConfig();

  ThunderbirdConfig(const ThunderbirdConfig& from);

  inline ThunderbirdConfig& operator=(const ThunderbirdConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThunderbirdConfig& default_instance();

  void Swap(ThunderbirdConfig* other);

  // implements Message ----------------------------------------------

  ThunderbirdConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThunderbirdConfig& from);
  void MergeFrom(const ThunderbirdConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ThunderbirdConfig_MuxtxConfig MuxtxConfig;
  typedef ThunderbirdConfig_ThrottleHeadersConfig ThrottleHeadersConfig;
  typedef ThunderbirdConfig_TBChannelConfig TBChannelConfig;

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional string script = 2;
  inline bool has_script() const;
  inline void clear_script();
  static const int kScriptFieldNumber = 2;
  inline const ::std::string& script() const;
  inline void set_script(const ::std::string& value);
  inline void set_script(const char* value);
  inline void set_script(const char* value, size_t size);
  inline ::std::string* mutable_script();
  inline ::std::string* release_script();
  inline void set_allocated_script(::std::string* script);

  // optional float gaindb = 4 [default = 30];
  inline bool has_gaindb() const;
  inline void clear_gaindb();
  static const int kGaindbFieldNumber = 4;
  inline float gaindb() const;
  inline void set_gaindb(float value);

  // optional int32 numberZPipePortsPerChannel = 6 [default = 30];
  inline bool has_numberzpipeportsperchannel() const;
  inline void clear_numberzpipeportsperchannel();
  static const int kNumberZPipePortsPerChannelFieldNumber = 6;
  inline ::google::protobuf::int32 numberzpipeportsperchannel() const;
  inline void set_numberzpipeportsperchannel(::google::protobuf::int32 value);

  // optional int32 index = 8 [default = 2];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 8;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional double ewCapabilitiesRebroadcastCooldown = 101 [default = 5];
  inline bool has_ewcapabilitiesrebroadcastcooldown() const;
  inline void clear_ewcapabilitiesrebroadcastcooldown();
  static const int kEwCapabilitiesRebroadcastCooldownFieldNumber = 101;
  inline double ewcapabilitiesrebroadcastcooldown() const;
  inline void set_ewcapabilitiesrebroadcastcooldown(double value);

  // optional double ewTransmittingRebroadcastCooldown = 102 [default = 5];
  inline bool has_ewtransmittingrebroadcastcooldown() const;
  inline void clear_ewtransmittingrebroadcastcooldown();
  static const int kEwTransmittingRebroadcastCooldownFieldNumber = 102;
  inline double ewtransmittingrebroadcastcooldown() const;
  inline void set_ewtransmittingrebroadcastcooldown(double value);

  // optional bool plotOutputSpectrumEnabled = 11 [default = false];
  inline bool has_plotoutputspectrumenabled() const;
  inline void clear_plotoutputspectrumenabled();
  static const int kPlotOutputSpectrumEnabledFieldNumber = 11;
  inline bool plotoutputspectrumenabled() const;
  inline void set_plotoutputspectrumenabled(bool value);

  // optional bool plotOutputSpectrumThinned = 12 [default = true];
  inline bool has_plotoutputspectrumthinned() const;
  inline void clear_plotoutputspectrumthinned();
  static const int kPlotOutputSpectrumThinnedFieldNumber = 12;
  inline bool plotoutputspectrumthinned() const;
  inline void set_plotoutputspectrumthinned(bool value);

  // optional bool xpipemonitorEnabled = 13 [default = true];
  inline bool has_xpipemonitorenabled() const;
  inline void clear_xpipemonitorenabled();
  static const int kXpipemonitorEnabledFieldNumber = 13;
  inline bool xpipemonitorenabled() const;
  inline void set_xpipemonitorenabled(bool value);

  // optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;
  inline bool has_muxtxconfig() const;
  inline void clear_muxtxconfig();
  static const int kMuxtxConfigFieldNumber = 14;
  inline const ::service_thunderbird::ThunderbirdConfig_MuxtxConfig& muxtxconfig() const;
  inline ::service_thunderbird::ThunderbirdConfig_MuxtxConfig* mutable_muxtxconfig();
  inline ::service_thunderbird::ThunderbirdConfig_MuxtxConfig* release_muxtxconfig();
  inline void set_allocated_muxtxconfig(::service_thunderbird::ThunderbirdConfig_MuxtxConfig* muxtxconfig);

  // optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;
  inline bool has_throttleheadersconfig() const;
  inline void clear_throttleheadersconfig();
  static const int kThrottleHeadersConfigFieldNumber = 15;
  inline const ::service_thunderbird::ThunderbirdConfig_ThrottleHeadersConfig& throttleheadersconfig() const;
  inline ::service_thunderbird::ThunderbirdConfig_ThrottleHeadersConfig* mutable_throttleheadersconfig();
  inline ::service_thunderbird::ThunderbirdConfig_ThrottleHeadersConfig* release_throttleheadersconfig();
  inline void set_allocated_throttleheadersconfig(::service_thunderbird::ThunderbirdConfig_ThrottleHeadersConfig* throttleheadersconfig);

  // repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;
  inline int tbchannels_size() const;
  inline void clear_tbchannels();
  static const int kTbChannelsFieldNumber = 16;
  inline const ::service_thunderbird::ThunderbirdConfig_TBChannelConfig& tbchannels(int index) const;
  inline ::service_thunderbird::ThunderbirdConfig_TBChannelConfig* mutable_tbchannels(int index);
  inline ::service_thunderbird::ThunderbirdConfig_TBChannelConfig* add_tbchannels();
  inline const ::google::protobuf::RepeatedPtrField< ::service_thunderbird::ThunderbirdConfig_TBChannelConfig >&
      tbchannels() const;
  inline ::google::protobuf::RepeatedPtrField< ::service_thunderbird::ThunderbirdConfig_TBChannelConfig >*
      mutable_tbchannels();

  // @@protoc_insertion_point(class_scope:service_thunderbird.ThunderbirdConfig)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_script();
  inline void clear_has_script();
  inline void set_has_gaindb();
  inline void clear_has_gaindb();
  inline void set_has_numberzpipeportsperchannel();
  inline void clear_has_numberzpipeportsperchannel();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_ewcapabilitiesrebroadcastcooldown();
  inline void clear_has_ewcapabilitiesrebroadcastcooldown();
  inline void set_has_ewtransmittingrebroadcastcooldown();
  inline void clear_has_ewtransmittingrebroadcastcooldown();
  inline void set_has_plotoutputspectrumenabled();
  inline void clear_has_plotoutputspectrumenabled();
  inline void set_has_plotoutputspectrumthinned();
  inline void clear_has_plotoutputspectrumthinned();
  inline void set_has_xpipemonitorenabled();
  inline void clear_has_xpipemonitorenabled();
  inline void set_has_muxtxconfig();
  inline void clear_has_muxtxconfig();
  inline void set_has_throttleheadersconfig();
  inline void clear_has_throttleheadersconfig();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* script_;
  float gaindb_;
  ::google::protobuf::int32 numberzpipeportsperchannel_;
  double ewcapabilitiesrebroadcastcooldown_;
  double ewtransmittingrebroadcastcooldown_;
  ::google::protobuf::int32 index_;
  bool plotoutputspectrumenabled_;
  bool plotoutputspectrumthinned_;
  bool xpipemonitorenabled_;
  ::service_thunderbird::ThunderbirdConfig_MuxtxConfig* muxtxconfig_;
  ::service_thunderbird::ThunderbirdConfig_ThrottleHeadersConfig* throttleheadersconfig_;
  ::google::protobuf::RepeatedPtrField< ::service_thunderbird::ThunderbirdConfig_TBChannelConfig > tbchannels_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_service_5fthunderbird_2eproto();
  friend void protobuf_AssignDesc_service_5fthunderbird_2eproto();
  friend void protobuf_ShutdownFile_service_5fthunderbird_2eproto();

  void InitAsDefaultInstance();
  static ThunderbirdConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// ThunderbirdConfig_MuxtxConfig

// optional int32 midasProcessPriority = 1 [default = -2147483648];
inline bool ThunderbirdConfig_MuxtxConfig::has_midasprocesspriority() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThunderbirdConfig_MuxtxConfig::set_has_midasprocesspriority() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThunderbirdConfig_MuxtxConfig::clear_has_midasprocesspriority() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThunderbirdConfig_MuxtxConfig::clear_midasprocesspriority() {
  midasprocesspriority_ = -0x80000000;
  clear_has_midasprocesspriority();
}
inline ::google::protobuf::int32 ThunderbirdConfig_MuxtxConfig::midasprocesspriority() const {
  return midasprocesspriority_;
}
inline void ThunderbirdConfig_MuxtxConfig::set_midasprocesspriority(::google::protobuf::int32 value) {
  set_has_midasprocesspriority();
  midasprocesspriority_ = value;
}

// optional int32 outputSamplesPerHeader = 2 [default = 262144];
inline bool ThunderbirdConfig_MuxtxConfig::has_outputsamplesperheader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThunderbirdConfig_MuxtxConfig::set_has_outputsamplesperheader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThunderbirdConfig_MuxtxConfig::clear_has_outputsamplesperheader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThunderbirdConfig_MuxtxConfig::clear_outputsamplesperheader() {
  outputsamplesperheader_ = 262144;
  clear_has_outputsamplesperheader();
}
inline ::google::protobuf::int32 ThunderbirdConfig_MuxtxConfig::outputsamplesperheader() const {
  return outputsamplesperheader_;
}
inline void ThunderbirdConfig_MuxtxConfig::set_outputsamplesperheader(::google::protobuf::int32 value) {
  set_has_outputsamplesperheader();
  outputsamplesperheader_ = value;
}

// -------------------------------------------------------------------

// ThunderbirdConfig_ThrottleHeadersConfig

// optional bool enabled = 1 [default = false];
inline bool ThunderbirdConfig_ThrottleHeadersConfig::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThunderbirdConfig_ThrottleHeadersConfig::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThunderbirdConfig_ThrottleHeadersConfig::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThunderbirdConfig_ThrottleHeadersConfig::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool ThunderbirdConfig_ThrottleHeadersConfig::enabled() const {
  return enabled_;
}
inline void ThunderbirdConfig_ThrottleHeadersConfig::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
}

// optional double throttleTimeOffset = 2 [default = 20];
inline bool ThunderbirdConfig_ThrottleHeadersConfig::has_throttletimeoffset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThunderbirdConfig_ThrottleHeadersConfig::set_has_throttletimeoffset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThunderbirdConfig_ThrottleHeadersConfig::clear_has_throttletimeoffset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThunderbirdConfig_ThrottleHeadersConfig::clear_throttletimeoffset() {
  throttletimeoffset_ = 20;
  clear_has_throttletimeoffset();
}
inline double ThunderbirdConfig_ThrottleHeadersConfig::throttletimeoffset() const {
  return throttletimeoffset_;
}
inline void ThunderbirdConfig_ThrottleHeadersConfig::set_throttletimeoffset(double value) {
  set_has_throttletimeoffset();
  throttletimeoffset_ = value;
}

// -------------------------------------------------------------------

// ThunderbirdConfig_TBChannelConfig

// optional int32 channelNumber = 1 [default = 1];
inline bool ThunderbirdConfig_TBChannelConfig::has_channelnumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThunderbirdConfig_TBChannelConfig::set_has_channelnumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThunderbirdConfig_TBChannelConfig::clear_has_channelnumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThunderbirdConfig_TBChannelConfig::clear_channelnumber() {
  channelnumber_ = 1;
  clear_has_channelnumber();
}
inline ::google::protobuf::int32 ThunderbirdConfig_TBChannelConfig::channelnumber() const {
  return channelnumber_;
}
inline void ThunderbirdConfig_TBChannelConfig::set_channelnumber(::google::protobuf::int32 value) {
  set_has_channelnumber();
  channelnumber_ = value;
}

// optional double sampleRate = 2 [default = 100000000];
inline bool ThunderbirdConfig_TBChannelConfig::has_samplerate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThunderbirdConfig_TBChannelConfig::set_has_samplerate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThunderbirdConfig_TBChannelConfig::clear_has_samplerate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThunderbirdConfig_TBChannelConfig::clear_samplerate() {
  samplerate_ = 100000000;
  clear_has_samplerate();
}
inline double ThunderbirdConfig_TBChannelConfig::samplerate() const {
  return samplerate_;
}
inline void ThunderbirdConfig_TBChannelConfig::set_samplerate(double value) {
  set_has_samplerate();
  samplerate_ = value;
}

// optional double minFreqMHz = 3 [default = 20];
inline bool ThunderbirdConfig_TBChannelConfig::has_minfreqmhz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ThunderbirdConfig_TBChannelConfig::set_has_minfreqmhz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ThunderbirdConfig_TBChannelConfig::clear_has_minfreqmhz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ThunderbirdConfig_TBChannelConfig::clear_minfreqmhz() {
  minfreqmhz_ = 20;
  clear_has_minfreqmhz();
}
inline double ThunderbirdConfig_TBChannelConfig::minfreqmhz() const {
  return minfreqmhz_;
}
inline void ThunderbirdConfig_TBChannelConfig::set_minfreqmhz(double value) {
  set_has_minfreqmhz();
  minfreqmhz_ = value;
}

// optional double maxFreqMHz = 4 [default = 6000];
inline bool ThunderbirdConfig_TBChannelConfig::has_maxfreqmhz() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ThunderbirdConfig_TBChannelConfig::set_has_maxfreqmhz() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ThunderbirdConfig_TBChannelConfig::clear_has_maxfreqmhz() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ThunderbirdConfig_TBChannelConfig::clear_maxfreqmhz() {
  maxfreqmhz_ = 6000;
  clear_has_maxfreqmhz();
}
inline double ThunderbirdConfig_TBChannelConfig::maxfreqmhz() const {
  return maxfreqmhz_;
}
inline void ThunderbirdConfig_TBChannelConfig::set_maxfreqmhz(double value) {
  set_has_maxfreqmhz();
  maxfreqmhz_ = value;
}

// optional int32 zpipeport = 5 [default = 38599];
inline bool ThunderbirdConfig_TBChannelConfig::has_zpipeport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ThunderbirdConfig_TBChannelConfig::set_has_zpipeport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ThunderbirdConfig_TBChannelConfig::clear_has_zpipeport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ThunderbirdConfig_TBChannelConfig::clear_zpipeport() {
  zpipeport_ = 38599;
  clear_has_zpipeport();
}
inline ::google::protobuf::int32 ThunderbirdConfig_TBChannelConfig::zpipeport() const {
  return zpipeport_;
}
inline void ThunderbirdConfig_TBChannelConfig::set_zpipeport(::google::protobuf::int32 value) {
  set_has_zpipeport();
  zpipeport_ = value;
}

// optional string device = 6 [default = "ZPIPE"];
inline bool ThunderbirdConfig_TBChannelConfig::has_device() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ThunderbirdConfig_TBChannelConfig::set_has_device() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ThunderbirdConfig_TBChannelConfig::clear_has_device() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ThunderbirdConfig_TBChannelConfig::clear_device() {
  if (device_ != _default_device_) {
    device_->assign(*_default_device_);
  }
  clear_has_device();
}
inline const ::std::string& ThunderbirdConfig_TBChannelConfig::device() const {
  return *device_;
}
inline void ThunderbirdConfig_TBChannelConfig::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == _default_device_) {
    device_ = new ::std::string;
  }
  device_->assign(value);
}
inline void ThunderbirdConfig_TBChannelConfig::set_device(const char* value) {
  set_has_device();
  if (device_ == _default_device_) {
    device_ = new ::std::string;
  }
  device_->assign(value);
}
inline void ThunderbirdConfig_TBChannelConfig::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == _default_device_) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ThunderbirdConfig_TBChannelConfig::mutable_device() {
  set_has_device();
  if (device_ == _default_device_) {
    device_ = new ::std::string(*_default_device_);
  }
  return device_;
}
inline ::std::string* ThunderbirdConfig_TBChannelConfig::release_device() {
  clear_has_device();
  if (device_ == _default_device_) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(_default_device_);
    return temp;
  }
}
inline void ThunderbirdConfig_TBChannelConfig::set_allocated_device(::std::string* device) {
  if (device_ != _default_device_) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(_default_device_);
  }
}

// -------------------------------------------------------------------

// ThunderbirdConfig

// optional string msgName = 1 [default = "service_thunderbird.ThunderbirdConfig"];
inline bool ThunderbirdConfig::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThunderbirdConfig::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThunderbirdConfig::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThunderbirdConfig::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& ThunderbirdConfig::msgname() const {
  return *msgname_;
}
inline void ThunderbirdConfig::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ThunderbirdConfig::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void ThunderbirdConfig::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ThunderbirdConfig::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* ThunderbirdConfig::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void ThunderbirdConfig::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional string script = 2;
inline bool ThunderbirdConfig::has_script() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThunderbirdConfig::set_has_script() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThunderbirdConfig::clear_has_script() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThunderbirdConfig::clear_script() {
  if (script_ != &::google::protobuf::internal::kEmptyString) {
    script_->clear();
  }
  clear_has_script();
}
inline const ::std::string& ThunderbirdConfig::script() const {
  return *script_;
}
inline void ThunderbirdConfig::set_script(const ::std::string& value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::kEmptyString) {
    script_ = new ::std::string;
  }
  script_->assign(value);
}
inline void ThunderbirdConfig::set_script(const char* value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::kEmptyString) {
    script_ = new ::std::string;
  }
  script_->assign(value);
}
inline void ThunderbirdConfig::set_script(const char* value, size_t size) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::kEmptyString) {
    script_ = new ::std::string;
  }
  script_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ThunderbirdConfig::mutable_script() {
  set_has_script();
  if (script_ == &::google::protobuf::internal::kEmptyString) {
    script_ = new ::std::string;
  }
  return script_;
}
inline ::std::string* ThunderbirdConfig::release_script() {
  clear_has_script();
  if (script_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = script_;
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ThunderbirdConfig::set_allocated_script(::std::string* script) {
  if (script_ != &::google::protobuf::internal::kEmptyString) {
    delete script_;
  }
  if (script) {
    set_has_script();
    script_ = script;
  } else {
    clear_has_script();
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float gaindb = 4 [default = 30];
inline bool ThunderbirdConfig::has_gaindb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ThunderbirdConfig::set_has_gaindb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ThunderbirdConfig::clear_has_gaindb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ThunderbirdConfig::clear_gaindb() {
  gaindb_ = 30;
  clear_has_gaindb();
}
inline float ThunderbirdConfig::gaindb() const {
  return gaindb_;
}
inline void ThunderbirdConfig::set_gaindb(float value) {
  set_has_gaindb();
  gaindb_ = value;
}

// optional int32 numberZPipePortsPerChannel = 6 [default = 30];
inline bool ThunderbirdConfig::has_numberzpipeportsperchannel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ThunderbirdConfig::set_has_numberzpipeportsperchannel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ThunderbirdConfig::clear_has_numberzpipeportsperchannel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ThunderbirdConfig::clear_numberzpipeportsperchannel() {
  numberzpipeportsperchannel_ = 30;
  clear_has_numberzpipeportsperchannel();
}
inline ::google::protobuf::int32 ThunderbirdConfig::numberzpipeportsperchannel() const {
  return numberzpipeportsperchannel_;
}
inline void ThunderbirdConfig::set_numberzpipeportsperchannel(::google::protobuf::int32 value) {
  set_has_numberzpipeportsperchannel();
  numberzpipeportsperchannel_ = value;
}

// optional int32 index = 8 [default = 2];
inline bool ThunderbirdConfig::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ThunderbirdConfig::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ThunderbirdConfig::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ThunderbirdConfig::clear_index() {
  index_ = 2;
  clear_has_index();
}
inline ::google::protobuf::int32 ThunderbirdConfig::index() const {
  return index_;
}
inline void ThunderbirdConfig::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional double ewCapabilitiesRebroadcastCooldown = 101 [default = 5];
inline bool ThunderbirdConfig::has_ewcapabilitiesrebroadcastcooldown() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ThunderbirdConfig::set_has_ewcapabilitiesrebroadcastcooldown() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ThunderbirdConfig::clear_has_ewcapabilitiesrebroadcastcooldown() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ThunderbirdConfig::clear_ewcapabilitiesrebroadcastcooldown() {
  ewcapabilitiesrebroadcastcooldown_ = 5;
  clear_has_ewcapabilitiesrebroadcastcooldown();
}
inline double ThunderbirdConfig::ewcapabilitiesrebroadcastcooldown() const {
  return ewcapabilitiesrebroadcastcooldown_;
}
inline void ThunderbirdConfig::set_ewcapabilitiesrebroadcastcooldown(double value) {
  set_has_ewcapabilitiesrebroadcastcooldown();
  ewcapabilitiesrebroadcastcooldown_ = value;
}

// optional double ewTransmittingRebroadcastCooldown = 102 [default = 5];
inline bool ThunderbirdConfig::has_ewtransmittingrebroadcastcooldown() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ThunderbirdConfig::set_has_ewtransmittingrebroadcastcooldown() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ThunderbirdConfig::clear_has_ewtransmittingrebroadcastcooldown() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ThunderbirdConfig::clear_ewtransmittingrebroadcastcooldown() {
  ewtransmittingrebroadcastcooldown_ = 5;
  clear_has_ewtransmittingrebroadcastcooldown();
}
inline double ThunderbirdConfig::ewtransmittingrebroadcastcooldown() const {
  return ewtransmittingrebroadcastcooldown_;
}
inline void ThunderbirdConfig::set_ewtransmittingrebroadcastcooldown(double value) {
  set_has_ewtransmittingrebroadcastcooldown();
  ewtransmittingrebroadcastcooldown_ = value;
}

// optional bool plotOutputSpectrumEnabled = 11 [default = false];
inline bool ThunderbirdConfig::has_plotoutputspectrumenabled() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ThunderbirdConfig::set_has_plotoutputspectrumenabled() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ThunderbirdConfig::clear_has_plotoutputspectrumenabled() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ThunderbirdConfig::clear_plotoutputspectrumenabled() {
  plotoutputspectrumenabled_ = false;
  clear_has_plotoutputspectrumenabled();
}
inline bool ThunderbirdConfig::plotoutputspectrumenabled() const {
  return plotoutputspectrumenabled_;
}
inline void ThunderbirdConfig::set_plotoutputspectrumenabled(bool value) {
  set_has_plotoutputspectrumenabled();
  plotoutputspectrumenabled_ = value;
}

// optional bool plotOutputSpectrumThinned = 12 [default = true];
inline bool ThunderbirdConfig::has_plotoutputspectrumthinned() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ThunderbirdConfig::set_has_plotoutputspectrumthinned() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ThunderbirdConfig::clear_has_plotoutputspectrumthinned() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ThunderbirdConfig::clear_plotoutputspectrumthinned() {
  plotoutputspectrumthinned_ = true;
  clear_has_plotoutputspectrumthinned();
}
inline bool ThunderbirdConfig::plotoutputspectrumthinned() const {
  return plotoutputspectrumthinned_;
}
inline void ThunderbirdConfig::set_plotoutputspectrumthinned(bool value) {
  set_has_plotoutputspectrumthinned();
  plotoutputspectrumthinned_ = value;
}

// optional bool xpipemonitorEnabled = 13 [default = true];
inline bool ThunderbirdConfig::has_xpipemonitorenabled() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ThunderbirdConfig::set_has_xpipemonitorenabled() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ThunderbirdConfig::clear_has_xpipemonitorenabled() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ThunderbirdConfig::clear_xpipemonitorenabled() {
  xpipemonitorenabled_ = true;
  clear_has_xpipemonitorenabled();
}
inline bool ThunderbirdConfig::xpipemonitorenabled() const {
  return xpipemonitorenabled_;
}
inline void ThunderbirdConfig::set_xpipemonitorenabled(bool value) {
  set_has_xpipemonitorenabled();
  xpipemonitorenabled_ = value;
}

// optional .service_thunderbird.ThunderbirdConfig.MuxtxConfig muxtxConfig = 14;
inline bool ThunderbirdConfig::has_muxtxconfig() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ThunderbirdConfig::set_has_muxtxconfig() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ThunderbirdConfig::clear_has_muxtxconfig() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ThunderbirdConfig::clear_muxtxconfig() {
  if (muxtxconfig_ != NULL) muxtxconfig_->::service_thunderbird::ThunderbirdConfig_MuxtxConfig::Clear();
  clear_has_muxtxconfig();
}
inline const ::service_thunderbird::ThunderbirdConfig_MuxtxConfig& ThunderbirdConfig::muxtxconfig() const {
  return muxtxconfig_ != NULL ? *muxtxconfig_ : *default_instance_->muxtxconfig_;
}
inline ::service_thunderbird::ThunderbirdConfig_MuxtxConfig* ThunderbirdConfig::mutable_muxtxconfig() {
  set_has_muxtxconfig();
  if (muxtxconfig_ == NULL) muxtxconfig_ = new ::service_thunderbird::ThunderbirdConfig_MuxtxConfig;
  return muxtxconfig_;
}
inline ::service_thunderbird::ThunderbirdConfig_MuxtxConfig* ThunderbirdConfig::release_muxtxconfig() {
  clear_has_muxtxconfig();
  ::service_thunderbird::ThunderbirdConfig_MuxtxConfig* temp = muxtxconfig_;
  muxtxconfig_ = NULL;
  return temp;
}
inline void ThunderbirdConfig::set_allocated_muxtxconfig(::service_thunderbird::ThunderbirdConfig_MuxtxConfig* muxtxconfig) {
  delete muxtxconfig_;
  muxtxconfig_ = muxtxconfig;
  if (muxtxconfig) {
    set_has_muxtxconfig();
  } else {
    clear_has_muxtxconfig();
  }
}

// optional .service_thunderbird.ThunderbirdConfig.ThrottleHeadersConfig throttleHeadersConfig = 15;
inline bool ThunderbirdConfig::has_throttleheadersconfig() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ThunderbirdConfig::set_has_throttleheadersconfig() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ThunderbirdConfig::clear_has_throttleheadersconfig() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ThunderbirdConfig::clear_throttleheadersconfig() {
  if (throttleheadersconfig_ != NULL) throttleheadersconfig_->::service_thunderbird::ThunderbirdConfig_ThrottleHeadersConfig::Clear();
  clear_has_throttleheadersconfig();
}
inline const ::service_thunderbird::ThunderbirdConfig_ThrottleHeadersConfig& ThunderbirdConfig::throttleheadersconfig() const {
  return throttleheadersconfig_ != NULL ? *throttleheadersconfig_ : *default_instance_->throttleheadersconfig_;
}
inline ::service_thunderbird::ThunderbirdConfig_ThrottleHeadersConfig* ThunderbirdConfig::mutable_throttleheadersconfig() {
  set_has_throttleheadersconfig();
  if (throttleheadersconfig_ == NULL) throttleheadersconfig_ = new ::service_thunderbird::ThunderbirdConfig_ThrottleHeadersConfig;
  return throttleheadersconfig_;
}
inline ::service_thunderbird::ThunderbirdConfig_ThrottleHeadersConfig* ThunderbirdConfig::release_throttleheadersconfig() {
  clear_has_throttleheadersconfig();
  ::service_thunderbird::ThunderbirdConfig_ThrottleHeadersConfig* temp = throttleheadersconfig_;
  throttleheadersconfig_ = NULL;
  return temp;
}
inline void ThunderbirdConfig::set_allocated_throttleheadersconfig(::service_thunderbird::ThunderbirdConfig_ThrottleHeadersConfig* throttleheadersconfig) {
  delete throttleheadersconfig_;
  throttleheadersconfig_ = throttleheadersconfig;
  if (throttleheadersconfig) {
    set_has_throttleheadersconfig();
  } else {
    clear_has_throttleheadersconfig();
  }
}

// repeated .service_thunderbird.ThunderbirdConfig.TBChannelConfig tbChannels = 16;
inline int ThunderbirdConfig::tbchannels_size() const {
  return tbchannels_.size();
}
inline void ThunderbirdConfig::clear_tbchannels() {
  tbchannels_.Clear();
}
inline const ::service_thunderbird::ThunderbirdConfig_TBChannelConfig& ThunderbirdConfig::tbchannels(int index) const {
  return tbchannels_.Get(index);
}
inline ::service_thunderbird::ThunderbirdConfig_TBChannelConfig* ThunderbirdConfig::mutable_tbchannels(int index) {
  return tbchannels_.Mutable(index);
}
inline ::service_thunderbird::ThunderbirdConfig_TBChannelConfig* ThunderbirdConfig::add_tbchannels() {
  return tbchannels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::service_thunderbird::ThunderbirdConfig_TBChannelConfig >&
ThunderbirdConfig::tbchannels() const {
  return tbchannels_;
}
inline ::google::protobuf::RepeatedPtrField< ::service_thunderbird::ThunderbirdConfig_TBChannelConfig >*
ThunderbirdConfig::mutable_tbchannels() {
  return &tbchannels_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_thunderbird

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_5fthunderbird_2eproto__INCLUDED
