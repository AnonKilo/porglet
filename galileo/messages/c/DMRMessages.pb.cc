// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DMRMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DMRMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fv {
namespace tb {
namespace protos {
namespace DMRProtos {

namespace {

const ::google::protobuf::Descriptor* DmrMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DmrMeta_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DMRMessages_2eproto() {
  protobuf_AddDesc_DMRMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DMRMessages.proto");
  GOOGLE_CHECK(file != NULL);
  DmrMeta_descriptor_ = file->message_type(0);
  static const int DmrMeta_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, cffreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, srctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, srcaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, desttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, destaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, timeslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, calltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, colorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, geo_),
  };
  DmrMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DmrMeta_descriptor_,
      DmrMeta::default_instance_,
      DmrMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DmrMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DmrMeta));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DMRMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DmrMeta_descriptor_, &DmrMeta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DMRMessages_2eproto() {
  delete DmrMeta::default_instance_;
  delete DmrMeta_reflection_;
  delete DmrMeta::_default_msgname_;
  delete DmrMeta::_default_text_;
  delete DmrMeta::_default_geo_;
}

void protobuf_AddDesc_DMRMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021DMRMessages.proto\022\026fv.tb.protos.DMRPro"
    "tos\"\327\001\n\007DmrMeta\022\030\n\007msgName\030\001 \001(\t:\007DMRMET"
    "A\022\016\n\006cffreq\030\002 \001(\001\022\017\n\007srcType\030\003 \001(\t\022\017\n\007sr"
    "cAddr\030\004 \001(\005\022\020\n\010destType\030\005 \001(\t\022\020\n\010destAdd"
    "r\030\006 \001(\005\022\020\n\010timeSlot\030\007 \001(\005\022\020\n\010callType\030\010 "
    "\001(\t\022\021\n\tcolorCode\030\t \001(\005\022\022\n\004text\030\n \001(\t:\004No"
    "ne\022\021\n\003geo\030\013 \001(\t:\004NoneB\032\n\rfv.dmr.protosB\t"
    "DMRProtos", 289);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DMRMessages.proto", &protobuf_RegisterTypes);
  DmrMeta::_default_msgname_ =
      new ::std::string("DMRMETA", 7);
  DmrMeta::_default_text_ =
      new ::std::string("None", 4);
  DmrMeta::_default_geo_ =
      new ::std::string("None", 4);
  DmrMeta::default_instance_ = new DmrMeta();
  DmrMeta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DMRMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DMRMessages_2eproto {
  StaticDescriptorInitializer_DMRMessages_2eproto() {
    protobuf_AddDesc_DMRMessages_2eproto();
  }
} static_descriptor_initializer_DMRMessages_2eproto_;

// ===================================================================

::std::string* DmrMeta::_default_msgname_ = NULL;
::std::string* DmrMeta::_default_text_ = NULL;
::std::string* DmrMeta::_default_geo_ = NULL;
#ifndef _MSC_VER
const int DmrMeta::kMsgNameFieldNumber;
const int DmrMeta::kCffreqFieldNumber;
const int DmrMeta::kSrcTypeFieldNumber;
const int DmrMeta::kSrcAddrFieldNumber;
const int DmrMeta::kDestTypeFieldNumber;
const int DmrMeta::kDestAddrFieldNumber;
const int DmrMeta::kTimeSlotFieldNumber;
const int DmrMeta::kCallTypeFieldNumber;
const int DmrMeta::kColorCodeFieldNumber;
const int DmrMeta::kTextFieldNumber;
const int DmrMeta::kGeoFieldNumber;
#endif  // !_MSC_VER

DmrMeta::DmrMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DmrMeta::InitAsDefaultInstance() {
}

DmrMeta::DmrMeta(const DmrMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DmrMeta::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  cffreq_ = 0;
  srctype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srcaddr_ = 0;
  desttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  destaddr_ = 0;
  timeslot_ = 0;
  calltype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  colorcode_ = 0;
  text_ = const_cast< ::std::string*>(_default_text_);
  geo_ = const_cast< ::std::string*>(_default_geo_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DmrMeta::~DmrMeta() {
  SharedDtor();
}

void DmrMeta::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (srctype_ != &::google::protobuf::internal::kEmptyString) {
    delete srctype_;
  }
  if (desttype_ != &::google::protobuf::internal::kEmptyString) {
    delete desttype_;
  }
  if (calltype_ != &::google::protobuf::internal::kEmptyString) {
    delete calltype_;
  }
  if (text_ != _default_text_) {
    delete text_;
  }
  if (geo_ != _default_geo_) {
    delete geo_;
  }
  if (this != default_instance_) {
  }
}

void DmrMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DmrMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DmrMeta_descriptor_;
}

const DmrMeta& DmrMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DMRMessages_2eproto();
  return *default_instance_;
}

DmrMeta* DmrMeta::default_instance_ = NULL;

DmrMeta* DmrMeta::New() const {
  return new DmrMeta;
}

void DmrMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    cffreq_ = 0;
    if (has_srctype()) {
      if (srctype_ != &::google::protobuf::internal::kEmptyString) {
        srctype_->clear();
      }
    }
    srcaddr_ = 0;
    if (has_desttype()) {
      if (desttype_ != &::google::protobuf::internal::kEmptyString) {
        desttype_->clear();
      }
    }
    destaddr_ = 0;
    timeslot_ = 0;
    if (has_calltype()) {
      if (calltype_ != &::google::protobuf::internal::kEmptyString) {
        calltype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    colorcode_ = 0;
    if (has_text()) {
      if (text_ != _default_text_) {
        text_->assign(*_default_text_);
      }
    }
    if (has_geo()) {
      if (geo_ != _default_geo_) {
        geo_->assign(*_default_geo_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DmrMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DMRMETA"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_cffreq;
        break;
      }

      // optional double cffreq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cffreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cffreq_)));
          set_has_cffreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_srcType;
        break;
      }

      // optional string srcType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srcType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srctype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srctype().data(), this->srctype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_srcAddr;
        break;
      }

      // optional int32 srcAddr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcAddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcaddr_)));
          set_has_srcaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_destType;
        break;
      }

      // optional string destType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desttype().data(), this->desttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_destAddr;
        break;
      }

      // optional int32 destAddr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destAddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destaddr_)));
          set_has_destaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timeSlot;
        break;
      }

      // optional int32 timeSlot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeSlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeslot_)));
          set_has_timeslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_callType;
        break;
      }

      // optional string callType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_calltype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->calltype().data(), this->calltype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_colorCode;
        break;
      }

      // optional int32 colorCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colorcode_)));
          set_has_colorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_text;
        break;
      }

      // optional string text = 10 [default = "None"];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_geo;
        break;
      }

      // optional string geo = 11 [default = "None"];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geo().data(), this->geo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DmrMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DMRMETA"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional double cffreq = 2;
  if (has_cffreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cffreq(), output);
  }

  // optional string srcType = 3;
  if (has_srctype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srctype().data(), this->srctype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->srctype(), output);
  }

  // optional int32 srcAddr = 4;
  if (has_srcaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->srcaddr(), output);
  }

  // optional string destType = 5;
  if (has_desttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desttype().data(), this->desttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->desttype(), output);
  }

  // optional int32 destAddr = 6;
  if (has_destaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->destaddr(), output);
  }

  // optional int32 timeSlot = 7;
  if (has_timeslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->timeslot(), output);
  }

  // optional string callType = 8;
  if (has_calltype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->calltype().data(), this->calltype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->calltype(), output);
  }

  // optional int32 colorCode = 9;
  if (has_colorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->colorcode(), output);
  }

  // optional string text = 10 [default = "None"];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->text(), output);
  }

  // optional string geo = 11 [default = "None"];
  if (has_geo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geo().data(), this->geo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->geo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DmrMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DMRMETA"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional double cffreq = 2;
  if (has_cffreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cffreq(), target);
  }

  // optional string srcType = 3;
  if (has_srctype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srctype().data(), this->srctype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->srctype(), target);
  }

  // optional int32 srcAddr = 4;
  if (has_srcaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->srcaddr(), target);
  }

  // optional string destType = 5;
  if (has_desttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desttype().data(), this->desttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desttype(), target);
  }

  // optional int32 destAddr = 6;
  if (has_destaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->destaddr(), target);
  }

  // optional int32 timeSlot = 7;
  if (has_timeslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->timeslot(), target);
  }

  // optional string callType = 8;
  if (has_calltype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->calltype().data(), this->calltype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->calltype(), target);
  }

  // optional int32 colorCode = 9;
  if (has_colorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->colorcode(), target);
  }

  // optional string text = 10 [default = "None"];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->text(), target);
  }

  // optional string geo = 11 [default = "None"];
  if (has_geo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geo().data(), this->geo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->geo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DmrMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DMRMETA"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional double cffreq = 2;
    if (has_cffreq()) {
      total_size += 1 + 8;
    }

    // optional string srcType = 3;
    if (has_srctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srctype());
    }

    // optional int32 srcAddr = 4;
    if (has_srcaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcaddr());
    }

    // optional string destType = 5;
    if (has_desttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desttype());
    }

    // optional int32 destAddr = 6;
    if (has_destaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destaddr());
    }

    // optional int32 timeSlot = 7;
    if (has_timeslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeslot());
    }

    // optional string callType = 8;
    if (has_calltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->calltype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 colorCode = 9;
    if (has_colorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colorcode());
    }

    // optional string text = 10 [default = "None"];
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string geo = 11 [default = "None"];
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmrMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DmrMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DmrMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DmrMeta::MergeFrom(const DmrMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_cffreq()) {
      set_cffreq(from.cffreq());
    }
    if (from.has_srctype()) {
      set_srctype(from.srctype());
    }
    if (from.has_srcaddr()) {
      set_srcaddr(from.srcaddr());
    }
    if (from.has_desttype()) {
      set_desttype(from.desttype());
    }
    if (from.has_destaddr()) {
      set_destaddr(from.destaddr());
    }
    if (from.has_timeslot()) {
      set_timeslot(from.timeslot());
    }
    if (from.has_calltype()) {
      set_calltype(from.calltype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_colorcode()) {
      set_colorcode(from.colorcode());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_geo()) {
      set_geo(from.geo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DmrMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DmrMeta::CopyFrom(const DmrMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmrMeta::IsInitialized() const {

  return true;
}

void DmrMeta::Swap(DmrMeta* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(cffreq_, other->cffreq_);
    std::swap(srctype_, other->srctype_);
    std::swap(srcaddr_, other->srcaddr_);
    std::swap(desttype_, other->desttype_);
    std::swap(destaddr_, other->destaddr_);
    std::swap(timeslot_, other->timeslot_);
    std::swap(calltype_, other->calltype_);
    std::swap(colorcode_, other->colorcode_);
    std::swap(text_, other->text_);
    std::swap(geo_, other->geo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DmrMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DmrMeta_descriptor_;
  metadata.reflection = DmrMeta_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DMRProtos
}  // namespace protos
}  // namespace tb
}  // namespace fv

// @@protoc_insertion_point(global_scope)
